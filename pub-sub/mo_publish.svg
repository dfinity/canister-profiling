<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="23098"><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="0.0000%" y="149" width="0.0433%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="10"/><text x="0.2930%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="0.0433%" y="149" width="0.2424%" height="15" fill="rgb(230,99,41)" fg:x="10" fg:w="56"/><text x="0.3363%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="0.2857%" y="133" width="0.2165%" height="15" fill="rgb(253,106,12)" fg:x="66" fg:w="50"/><text x="0.5787%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="0.5022%" y="133" width="0.2424%" height="15" fill="rgb(213,46,41)" fg:x="116" fg:w="56"/><text x="0.7952%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="0.7447%" y="133" width="0.2771%" height="15" fill="rgb(215,133,35)" fg:x="172" fg:w="64"/><text x="1.0376%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="1.0217%" y="133" width="0.2165%" height="15" fill="rgb(213,28,5)" fg:x="236" fg:w="50"/><text x="1.3147%" y="143.50"></text></g><g><title>leb128_decode (214 instructions, 0.93%)</title><rect x="1.2382%" y="133" width="0.9265%" height="15" fill="rgb(215,77,49)" fg:x="286" fg:w="214"/><text x="1.5312%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="2.1647%" y="133" width="0.2771%" height="15" fill="rgb(248,100,22)" fg:x="500" fg:w="64"/><text x="2.4577%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.05%)</title><rect x="2.4418%" y="133" width="0.0520%" height="15" fill="rgb(208,67,9)" fg:x="564" fg:w="12"/><text x="2.7347%" y="143.50"></text></g><g><title>leb128_decode (214 instructions, 0.93%)</title><rect x="2.4937%" y="133" width="0.9265%" height="15" fill="rgb(219,133,21)" fg:x="576" fg:w="214"/><text x="2.7867%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.4202%" y="133" width="0.2771%" height="15" fill="rgb(246,46,29)" fg:x="790" fg:w="64"/><text x="3.7132%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.05%)</title><rect x="3.6973%" y="133" width="0.0520%" height="15" fill="rgb(246,185,52)" fg:x="854" fg:w="12"/><text x="3.9903%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.7492%" y="133" width="0.2771%" height="15" fill="rgb(252,136,11)" fg:x="866" fg:w="64"/><text x="4.0422%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="4.0263%" y="133" width="0.2165%" height="15" fill="rgb(219,138,53)" fg:x="930" fg:w="50"/><text x="4.3193%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="4.2428%" y="133" width="0.2771%" height="15" fill="rgb(211,51,23)" fg:x="980" fg:w="64"/><text x="4.5358%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.05%)</title><rect x="4.5199%" y="133" width="0.0520%" height="15" fill="rgb(247,221,28)" fg:x="1044" fg:w="12"/><text x="4.8128%" y="143.50"></text></g><g><title>parse_idl_header (1,290 instructions, 5.58%)</title><rect x="0.2857%" y="149" width="5.5849%" height="15" fill="rgb(251,222,45)" fg:x="66" fg:w="1290"/><text x="0.5787%" y="159.50">parse_..</text></g><g><title>memset (43 instructions, 0.19%)</title><rect x="5.8706%" y="133" width="0.1862%" height="15" fill="rgb(217,162,53)" fg:x="1356" fg:w="43"/><text x="6.1636%" y="143.50"></text></g><g><title>idl_sub_buf_init (60 instructions, 0.26%)</title><rect x="5.8706%" y="149" width="0.2598%" height="15" fill="rgb(229,93,14)" fg:x="1356" fg:w="60"/><text x="6.1636%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="6.1304%" y="149" width="0.2165%" height="15" fill="rgb(209,67,49)" fg:x="1416" fg:w="50"/><text x="6.4234%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.3469%" y="149" width="0.2771%" height="15" fill="rgb(213,87,29)" fg:x="1466" fg:w="64"/><text x="6.6398%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.6240%" y="149" width="0.2771%" height="15" fill="rgb(205,151,52)" fg:x="1530" fg:w="64"/><text x="6.9169%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="6.9010%" y="149" width="0.2165%" height="15" fill="rgb(253,215,39)" fg:x="1594" fg:w="50"/><text x="7.1940%" y="159.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (20 instructions, 0.09%)</title><rect x="7.1175%" y="149" width="0.0866%" height="15" fill="rgb(221,220,41)" fg:x="1644" fg:w="20"/><text x="7.4105%" y="159.50"></text></g><g><title>leb128_decode (214 instructions, 0.93%)</title><rect x="7.2041%" y="133" width="0.9265%" height="15" fill="rgb(218,133,21)" fg:x="1664" fg:w="214"/><text x="7.4971%" y="143.50"></text></g><g><title>find_field (250 instructions, 1.08%)</title><rect x="7.2041%" y="149" width="1.0823%" height="15" fill="rgb(221,193,43)" fg:x="1664" fg:w="250"/><text x="7.4971%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="8.2864%" y="149" width="0.2771%" height="15" fill="rgb(240,128,52)" fg:x="1914" fg:w="64"/><text x="8.5794%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="8.5635%" y="133" width="0.2165%" height="15" fill="rgb(253,114,12)" fg:x="1978" fg:w="50"/><text x="8.8565%" y="143.50"></text></g><g><title>utf8_validate (220 instructions, 0.95%)</title><rect x="8.7800%" y="133" width="0.9525%" height="15" fill="rgb(215,223,47)" fg:x="2028" fg:w="220"/><text x="9.0729%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="9.7324%" y="101" width="0.2424%" height="15" fill="rgb(248,225,23)" fg:x="2248" fg:w="56"/><text x="10.0254%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.30%)</title><rect x="9.7324%" y="117" width="0.2987%" height="15" fill="rgb(250,108,0)" fg:x="2248" fg:w="69"/><text x="10.0254%" y="127.50"></text></g><g><title>memcpy (123 instructions, 0.53%)</title><rect x="10.0312%" y="117" width="0.5325%" height="15" fill="rgb(228,208,7)" fg:x="2317" fg:w="123"/><text x="10.3241%" y="127.50"></text></g><g><title>text_of_ptr_size (211 instructions, 0.91%)</title><rect x="9.7324%" y="133" width="0.9135%" height="15" fill="rgb(244,45,10)" fg:x="2248" fg:w="211"/><text x="10.0254%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (540 instructions, 2.34%)</title><rect x="8.5635%" y="149" width="2.3379%" height="15" fill="rgb(207,125,25)" fg:x="1978" fg:w="540"/><text x="8.8565%" y="159.50">@..</text></g><g><title>leb128_decode (214 instructions, 0.93%)</title><rect x="10.9014%" y="133" width="0.9265%" height="15" fill="rgb(210,195,18)" fg:x="2518" fg:w="214"/><text x="11.1943%" y="143.50"></text></g><g><title>find_field (250 instructions, 1.08%)</title><rect x="10.9014%" y="149" width="1.0823%" height="15" fill="rgb(249,80,12)" fg:x="2518" fg:w="250"/><text x="11.1943%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="11.9837%" y="149" width="0.2771%" height="15" fill="rgb(221,65,9)" fg:x="2768" fg:w="64"/><text x="12.2767%" y="159.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="12.2608%" y="149" width="0.0260%" height="15" fill="rgb(235,49,36)" fg:x="2832" fg:w="6"/><text x="12.5538%" y="159.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="12.2868%" y="149" width="0.0866%" height="15" fill="rgb(225,32,20)" fg:x="2838" fg:w="20"/><text x="12.5797%" y="159.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="12.3734%" y="133" width="0.0866%" height="15" fill="rgb(215,141,46)" fg:x="2858" fg:w="20"/><text x="12.6663%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="12.4600%" y="133" width="0.0866%" height="15" fill="rgb(250,160,47)" fg:x="2878" fg:w="20"/><text x="12.7529%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="12.5465%" y="133" width="0.0866%" height="15" fill="rgb(216,222,40)" fg:x="2898" fg:w="20"/><text x="12.8395%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="12.6331%" y="133" width="0.0866%" height="15" fill="rgb(234,217,39)" fg:x="2918" fg:w="20"/><text x="12.9261%" y="143.50"></text></g><g><title>opt_project (23 instructions, 0.10%)</title><rect x="12.7197%" y="133" width="0.0996%" height="15" fill="rgb(207,178,40)" fg:x="2938" fg:w="23"/><text x="13.0127%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="12.8193%" y="133" width="0.1169%" height="15" fill="rgb(221,136,13)" fg:x="2961" fg:w="27"/><text x="13.1123%" y="143.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="12.9362%" y="133" width="0.0866%" height="15" fill="rgb(249,199,10)" fg:x="2988" fg:w="20"/><text x="13.2292%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.26%)</title><rect x="13.0228%" y="133" width="0.2598%" height="15" fill="rgb(249,222,13)" fg:x="3008" fg:w="60"/><text x="13.3157%" y="143.50"></text></g><g><title>opt_project (23 instructions, 0.10%)</title><rect x="13.2825%" y="117" width="0.0996%" height="15" fill="rgb(244,185,38)" fg:x="3068" fg:w="23"/><text x="13.5755%" y="127.50"></text></g><g><title>opt_inject (23 instructions, 0.10%)</title><rect x="13.3821%" y="117" width="0.0996%" height="15" fill="rgb(236,202,9)" fg:x="3091" fg:w="23"/><text x="13.6751%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.09%)</title><rect x="13.4817%" y="101" width="0.0866%" height="15" fill="rgb(250,229,37)" fg:x="3114" fg:w="20"/><text x="13.7747%" y="111.50"></text></g><g><title>to_2_tuple (36 instructions, 0.16%)</title><rect x="13.4817%" y="117" width="0.1559%" height="15" fill="rgb(206,174,23)" fg:x="3114" fg:w="36"/><text x="13.7747%" y="127.50"></text></g><g><title>opt_project (23 instructions, 0.10%)</title><rect x="13.6375%" y="117" width="0.0996%" height="15" fill="rgb(211,33,43)" fg:x="3150" fg:w="23"/><text x="13.9305%" y="127.50"></text></g><g><title>anon-func-883.7 (184 instructions, 0.80%)</title><rect x="13.2825%" y="133" width="0.7966%" height="15" fill="rgb(245,58,50)" fg:x="3068" fg:w="184"/><text x="13.5755%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="14.0791%" y="133" width="0.0866%" height="15" fill="rgb(244,68,36)" fg:x="3252" fg:w="20"/><text x="14.3721%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="14.1657%" y="117" width="0.0866%" height="15" fill="rgb(232,229,15)" fg:x="3272" fg:w="20"/><text x="14.4587%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="14.2523%" y="117" width="0.0866%" height="15" fill="rgb(254,30,23)" fg:x="3292" fg:w="20"/><text x="14.5453%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="14.3389%" y="117" width="0.0736%" height="15" fill="rgb(235,160,14)" fg:x="3312" fg:w="17"/><text x="14.6319%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="14.4125%" y="117" width="0.0736%" height="15" fill="rgb(212,155,44)" fg:x="3329" fg:w="17"/><text x="14.7055%" y="127.50"></text></g><g><title>motoko_rts::text::text_get_range::h5d6e241ebdbdcd34 (16 instructions, 0.07%)</title><rect x="14.4861%" y="101" width="0.0693%" height="15" fill="rgb(226,2,50)" fg:x="3346" fg:w="16"/><text x="14.7791%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::h5d6e241ebdbdcd34 (16 instructions, 0.07%)</title><rect x="14.5554%" y="101" width="0.0693%" height="15" fill="rgb(234,177,6)" fg:x="3362" fg:w="16"/><text x="14.8483%" y="111.50"></text></g><g><title>memcmp (146 instructions, 0.63%)</title><rect x="14.6246%" y="101" width="0.6321%" height="15" fill="rgb(217,24,9)" fg:x="3378" fg:w="146"/><text x="14.9176%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::h89ece4bb5f233acf (271 instructions, 1.17%)</title><rect x="14.4861%" y="117" width="1.1733%" height="15" fill="rgb(220,13,46)" fg:x="3346" fg:w="271"/><text x="14.7791%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="15.6594%" y="117" width="0.0736%" height="15" fill="rgb(239,221,27)" fg:x="3617" fg:w="17"/><text x="15.9523%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="15.7330%" y="101" width="0.0866%" height="15" fill="rgb(222,198,25)" fg:x="3634" fg:w="20"/><text x="16.0259%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="15.8196%" y="101" width="0.0866%" height="15" fill="rgb(211,99,13)" fg:x="3654" fg:w="20"/><text x="16.1125%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="15.9061%" y="101" width="0.0866%" height="15" fill="rgb(232,111,31)" fg:x="3674" fg:w="20"/><text x="16.1991%" y="111.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="15.9927%" y="101" width="0.0216%" height="15" fill="rgb(245,82,37)" fg:x="3694" fg:w="5"/><text x="16.2857%" y="111.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="16.0144%" y="101" width="0.0866%" height="15" fill="rgb(227,149,46)" fg:x="3699" fg:w="20"/><text x="16.3073%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="16.1010%" y="101" width="0.0866%" height="15" fill="rgb(218,36,50)" fg:x="3719" fg:w="20"/><text x="16.3939%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="16.1875%" y="101" width="0.0866%" height="15" fill="rgb(226,80,48)" fg:x="3739" fg:w="20"/><text x="16.4805%" y="111.50"></text></g><g><title>@new_async (240 instructions, 1.04%)</title><rect x="15.7330%" y="117" width="1.0391%" height="15" fill="rgb(238,224,15)" fg:x="3634" fg:w="240"/><text x="16.0259%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="16.7720%" y="117" width="0.0866%" height="15" fill="rgb(241,136,10)" fg:x="3874" fg:w="20"/><text x="17.0650%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="16.8586%" y="117" width="0.0866%" height="15" fill="rgb(208,32,45)" fg:x="3894" fg:w="20"/><text x="17.1516%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.09%)</title><rect x="16.9452%" y="117" width="0.0866%" height="15" fill="rgb(207,135,9)" fg:x="3914" fg:w="20"/><text x="17.2382%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.26%)</title><rect x="17.0318%" y="101" width="0.2598%" height="15" fill="rgb(206,86,44)" fg:x="3934" fg:w="60"/><text x="17.3247%" y="111.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (9 instructions, 0.04%)</title><rect x="17.2915%" y="101" width="0.0390%" height="15" fill="rgb(245,177,15)" fg:x="3994" fg:w="9"/><text x="17.5845%" y="111.50"></text></g><g><title>remember_continuation (3,993 instructions, 17.29%)</title><rect x="17.0318%" y="117" width="17.2872%" height="15" fill="rgb(206,64,50)" fg:x="3934" fg:w="3993"/><text x="17.3247%" y="127.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="34.3190%" y="117" width="0.0736%" height="15" fill="rgb(234,36,40)" fg:x="7927" fg:w="17"/><text x="34.6120%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.17%)</title><rect x="34.3926%" y="117" width="0.1732%" height="15" fill="rgb(213,64,8)" fg:x="7944" fg:w="40"/><text x="34.6856%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="34.5658%" y="117" width="0.1429%" height="15" fill="rgb(210,75,36)" fg:x="7984" fg:w="33"/><text x="34.8587%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="34.7086%" y="117" width="0.2424%" height="15" fill="rgb(229,88,21)" fg:x="8017" fg:w="56"/><text x="35.0016%" y="127.50"></text></g><g><title>memcpy (88 instructions, 0.38%)</title><rect x="34.9511%" y="117" width="0.3810%" height="15" fill="rgb(252,204,47)" fg:x="8073" fg:w="88"/><text x="35.2440%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="35.3321%" y="117" width="0.2424%" height="15" fill="rgb(208,77,27)" fg:x="8161" fg:w="56"/><text x="35.6250%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="35.5745%" y="117" width="0.0736%" height="15" fill="rgb(221,76,26)" fg:x="8217" fg:w="17"/><text x="35.8675%" y="127.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="35.6481%" y="101" width="0.0476%" height="15" fill="rgb(225,139,18)" fg:x="8234" fg:w="11"/><text x="35.9411%" y="111.50"></text></g><g><title>memcpy (74 instructions, 0.32%)</title><rect x="35.6957%" y="85" width="0.3204%" height="15" fill="rgb(230,137,11)" fg:x="8245" fg:w="74"/><text x="35.9887%" y="95.50"></text></g><g><title>text_to_buf (102 instructions, 0.44%)</title><rect x="35.6957%" y="101" width="0.4416%" height="15" fill="rgb(212,28,1)" fg:x="8245" fg:w="102"/><text x="35.9887%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (160 instructions, 0.69%)</title><rect x="35.6481%" y="117" width="0.6927%" height="15" fill="rgb(248,164,17)" fg:x="8234" fg:w="160"/><text x="35.9411%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="36.3408%" y="117" width="0.1429%" height="15" fill="rgb(222,171,42)" fg:x="8394" fg:w="33"/><text x="36.6338%" y="127.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="36.4837%" y="117" width="0.0476%" height="15" fill="rgb(243,84,45)" fg:x="8427" fg:w="11"/><text x="36.7766%" y="127.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="36.5313%" y="101" width="0.0216%" height="15" fill="rgb(252,49,23)" fg:x="8438" fg:w="5"/><text x="36.8243%" y="111.50"></text></g><g><title>@add_cycles (21 instructions, 0.09%)</title><rect x="36.5313%" y="117" width="0.0909%" height="15" fill="rgb(215,19,7)" fg:x="8438" fg:w="21"/><text x="36.8243%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.09%)</title><rect x="36.6222%" y="101" width="0.0866%" height="15" fill="rgb(238,81,41)" fg:x="8459" fg:w="20"/><text x="36.9152%" y="111.50"></text></g><g><title>to_2_tuple (36 instructions, 0.16%)</title><rect x="36.6222%" y="117" width="0.1559%" height="15" fill="rgb(210,199,37)" fg:x="8459" fg:w="36"/><text x="36.9152%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="36.7781%" y="101" width="0.0866%" height="15" fill="rgb(244,192,49)" fg:x="8495" fg:w="20"/><text x="37.0710%" y="111.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="36.8647%" y="85" width="0.0866%" height="15" fill="rgb(226,211,11)" fg:x="8515" fg:w="20"/><text x="37.1576%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="36.9513%" y="85" width="0.0866%" height="15" fill="rgb(236,162,54)" fg:x="8535" fg:w="20"/><text x="37.2442%" y="95.50"></text></g><g><title>enqueue (104 instructions, 0.45%)</title><rect x="36.8647%" y="101" width="0.4503%" height="15" fill="rgb(220,229,9)" fg:x="8515" fg:w="104"/><text x="37.1576%" y="111.50"></text></g><g><title>$lambda.3 (157 instructions, 0.68%)</title><rect x="36.7781%" y="117" width="0.6797%" height="15" fill="rgb(250,87,22)" fg:x="8495" fg:w="157"/><text x="37.0710%" y="127.50"></text></g><g><title>$loop/1 (13,449 instructions, 58.23%)</title><rect x="14.1657%" y="133" width="58.2258%" height="15" fill="rgb(239,43,17)" fg:x="3272" fg:w="13449"/><text x="14.4587%" y="143.50">$loop/1</text></g><g><title>$lambda.1 (14,116 instructions, 61.11%)</title><rect x="12.3734%" y="149" width="61.1135%" height="15" fill="rgb(231,177,25)" fg:x="2858" fg:w="14116"/><text x="12.6663%" y="159.50">$lambda.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="73.4869%" y="149" width="0.4676%" height="15" fill="rgb(219,179,1)" fg:x="16974" fg:w="108"/><text x="73.7799%" y="159.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="73.9545%" y="149" width="0.0693%" height="15" fill="rgb(238,219,53)" fg:x="17082" fg:w="16"/><text x="74.2474%" y="159.50"></text></g><g><title>publish (19,277 instructions, 83.46%)</title><rect x="0.0000%" y="165" width="83.4574%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="19277"/><text x="0.2930%" y="175.50">publish</text></g><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="83.4574%" y="149" width="0.0433%" height="15" fill="rgb(244,19,51)" fg:x="19277" fg:w="10"/><text x="83.7504%" y="159.50"></text></g><g><title>recall_continuation (49 instructions, 0.21%)</title><rect x="83.5007%" y="149" width="0.2121%" height="15" fill="rgb(224,6,22)" fg:x="19287" fg:w="49"/><text x="83.7937%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="83.7129%" y="149" width="0.2424%" height="15" fill="rgb(224,145,5)" fg:x="19336" fg:w="56"/><text x="84.0058%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="83.9553%" y="117" width="0.2165%" height="15" fill="rgb(234,130,49)" fg:x="19392" fg:w="50"/><text x="84.2483%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="84.1718%" y="117" width="0.2424%" height="15" fill="rgb(254,6,2)" fg:x="19442" fg:w="56"/><text x="84.4648%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="84.4142%" y="117" width="0.2165%" height="15" fill="rgb(208,96,46)" fg:x="19498" fg:w="50"/><text x="84.7072%" y="127.50"></text></g><g><title>parse_idl_header (245 instructions, 1.06%)</title><rect x="83.9553%" y="133" width="1.0607%" height="15" fill="rgb(239,3,39)" fg:x="19392" fg:w="245"/><text x="84.2483%" y="143.50"></text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="85.0160%" y="117" width="0.0260%" height="15" fill="rgb(233,210,1)" fg:x="19637" fg:w="6"/><text x="85.3090%" y="127.50"></text></g><g><title>idl_sub_buf_init (23 instructions, 0.10%)</title><rect x="85.0160%" y="133" width="0.0996%" height="15" fill="rgb(244,137,37)" fg:x="19637" fg:w="23"/><text x="85.3090%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="85.1156%" y="133" width="0.2165%" height="15" fill="rgb(240,136,2)" fg:x="19660" fg:w="50"/><text x="85.4086%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 2.21%)</title><rect x="83.9553%" y="149" width="2.2123%" height="15" fill="rgb(239,18,37)" fg:x="19392" fg:w="511"/><text x="84.2483%" y="159.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.09%)</title><rect x="86.1676%" y="117" width="0.0866%" height="15" fill="rgb(218,185,22)" fg:x="19903" fg:w="20"/><text x="86.4606%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.09%)</title><rect x="86.2542%" y="101" width="0.0866%" height="15" fill="rgb(225,218,4)" fg:x="19923" fg:w="20"/><text x="86.5472%" y="111.50"></text></g><g><title>to_2_tuple (36 instructions, 0.16%)</title><rect x="86.2542%" y="117" width="0.1559%" height="15" fill="rgb(230,182,32)" fg:x="19923" fg:w="36"/><text x="86.5472%" y="127.50"></text></g><g><title>opt_inject (23 instructions, 0.10%)</title><rect x="86.4101%" y="117" width="0.0996%" height="15" fill="rgb(242,56,43)" fg:x="19959" fg:w="23"/><text x="86.7030%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="86.5140%" y="37" width="0.2424%" height="15" fill="rgb(233,99,24)" fg:x="19983" fg:w="56"/><text x="86.8070%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.30%)</title><rect x="86.7564%" y="37" width="0.3031%" height="15" fill="rgb(234,209,42)" fg:x="20039" fg:w="70"/><text x="87.0494%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="87.0595%" y="37" width="0.2424%" height="15" fill="rgb(227,7,12)" fg:x="20109" fg:w="56"/><text x="87.3525%" y="47.50"></text></g><g><title>reply_with_data (1,019 instructions, 4.41%)</title><rect x="87.3019%" y="37" width="4.4116%" height="15" fill="rgb(245,203,43)" fg:x="20165" fg:w="1019"/><text x="87.5949%" y="47.50">repl..</text></g><g><title>anon_async (1,293 instructions, 5.60%)</title><rect x="86.5140%" y="53" width="5.5979%" height="15" fill="rgb(238,205,33)" fg:x="19983" fg:w="1293"/><text x="86.8070%" y="63.50">anon_a..</text></g><g><title>$loop/1 (1,332 instructions, 5.77%)</title><rect x="86.5140%" y="69" width="5.7667%" height="15" fill="rgb(231,56,7)" fg:x="19983" fg:w="1332"/><text x="86.8070%" y="79.50">$loop/1</text></g><g><title>$k/15 (1,358 instructions, 5.88%)</title><rect x="86.5140%" y="85" width="5.8793%" height="15" fill="rgb(244,186,29)" fg:x="19983" fg:w="1358"/><text x="86.8070%" y="95.50">$k/15</text></g><g><title>$lambda.8 (1,374 instructions, 5.95%)</title><rect x="86.5140%" y="101" width="5.9486%" height="15" fill="rgb(234,111,31)" fg:x="19983" fg:w="1374"/><text x="86.8070%" y="111.50">$lambd..</text></g><g><title>anon-func-352.15 (1,416 instructions, 6.13%)</title><rect x="86.5097%" y="117" width="6.1304%" height="15" fill="rgb(241,149,10)" fg:x="19982" fg:w="1416"/><text x="86.8026%" y="127.50">anon-f..</text></g><g><title>fulfill (1,570 instructions, 6.80%)</title><rect x="86.1676%" y="133" width="6.7971%" height="15" fill="rgb(249,206,44)" fg:x="19903" fg:w="1570"/><text x="86.4606%" y="143.50">fulfill</text></g><g><title>$lambda.6 (1,587 instructions, 6.87%)</title><rect x="86.1676%" y="149" width="6.8707%" height="15" fill="rgb(251,153,30)" fg:x="19903" fg:w="1587"/><text x="86.4606%" y="159.50">$lambda..</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="93.0384%" y="149" width="0.4676%" height="15" fill="rgb(239,152,38)" fg:x="21490" fg:w="108"/><text x="93.3313%" y="159.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="93.5059%" y="149" width="0.0693%" height="15" fill="rgb(249,139,47)" fg:x="21598" fg:w="16"/><text x="93.7989%" y="159.50"></text></g><g><title>all (23,098 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="23098"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (3,821 instructions, 16.54%)</title><rect x="83.4574%" y="165" width="16.5426%" height="15" fill="rgb(216,46,15)" fg:x="19277" fg:w="3821"/><text x="83.7504%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>