<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="15499"><g><title>trans_state5 (9 instructions, 0.06%)</title><rect x="0.0000%" y="181" width="0.0581%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="9"/><text x="0.2930%" y="191.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="0.0581%" y="181" width="0.0194%" height="15" fill="rgb(238,205,33)" fg:x="9" fg:w="3"/><text x="0.3510%" y="191.50"></text></g><g><title>@reset_refund (3 instructions, 0.02%)</title><rect x="0.0774%" y="181" width="0.0194%" height="15" fill="rgb(231,56,7)" fg:x="12" fg:w="3"/><text x="0.3704%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="0.0968%" y="165" width="0.2194%" height="15" fill="rgb(244,186,29)" fg:x="15" fg:w="34"/><text x="0.3897%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="0.0968%" y="181" width="0.2323%" height="15" fill="rgb(234,111,31)" fg:x="15" fg:w="36"/><text x="0.3897%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="0.3291%" y="149" width="0.3291%" height="15" fill="rgb(241,149,10)" fg:x="51" fg:w="51"/><text x="0.6220%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="0.6581%" y="149" width="0.2194%" height="15" fill="rgb(249,206,44)" fg:x="102" fg:w="34"/><text x="0.9511%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="0.8775%" y="149" width="0.4387%" height="15" fill="rgb(251,153,30)" fg:x="136" fg:w="68"/><text x="1.1704%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="1.3162%" y="133" width="0.3291%" height="15" fill="rgb(239,152,38)" fg:x="204" fg:w="51"/><text x="1.6092%" y="143.50"></text></g><g><title>leb128_decode (213 instructions, 1.37%)</title><rect x="1.6453%" y="133" width="1.3743%" height="15" fill="rgb(249,139,47)" fg:x="255" fg:w="213"/><text x="1.9382%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="3.0195%" y="133" width="0.4387%" height="15" fill="rgb(244,64,35)" fg:x="468" fg:w="68"/><text x="3.3125%" y="143.50"></text></g><g><title>leb128_decode (213 instructions, 1.37%)</title><rect x="3.4583%" y="133" width="1.3743%" height="15" fill="rgb(216,46,15)" fg:x="536" fg:w="213"/><text x="3.7513%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="4.8326%" y="133" width="0.4387%" height="15" fill="rgb(250,74,19)" fg:x="749" fg:w="68"/><text x="5.1255%" y="143.50"></text></g><g><title>motoko_rts::idl::parse_fields::h505d0c8155046473 (695 instructions, 4.48%)</title><rect x="1.3162%" y="149" width="4.4842%" height="15" fill="rgb(249,42,33)" fg:x="204" fg:w="695"/><text x="1.6092%" y="159.50">moto..</text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="5.8004%" y="149" width="0.4387%" height="15" fill="rgb(242,149,17)" fg:x="899" fg:w="68"/><text x="6.0933%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="6.2391%" y="149" width="0.3291%" height="15" fill="rgb(244,29,21)" fg:x="967" fg:w="51"/><text x="6.5321%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="6.5682%" y="149" width="0.4387%" height="15" fill="rgb(220,130,37)" fg:x="1018" fg:w="68"/><text x="6.8611%" y="159.50"></text></g><g><title>parse_idl_header (1,190 instructions, 7.68%)</title><rect x="0.3291%" y="165" width="7.6779%" height="15" fill="rgb(211,67,2)" fg:x="51" fg:w="1190"/><text x="0.6220%" y="175.50">parse_idl..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.06%)</title><rect x="8.0070%" y="165" width="0.0581%" height="15" fill="rgb(235,68,52)" fg:x="1241" fg:w="9"/><text x="8.2999%" y="175.50"></text></g><g><title>memset (39 instructions, 0.25%)</title><rect x="8.0650%" y="149" width="0.2516%" height="15" fill="rgb(246,142,3)" fg:x="1250" fg:w="39"/><text x="8.3580%" y="159.50"></text></g><g><title>idl_sub_buf_init (54 instructions, 0.35%)</title><rect x="8.0650%" y="165" width="0.3484%" height="15" fill="rgb(241,25,7)" fg:x="1250" fg:w="54"/><text x="8.3580%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="8.4134%" y="165" width="0.3291%" height="15" fill="rgb(242,119,39)" fg:x="1304" fg:w="51"/><text x="8.7064%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="8.7425%" y="165" width="0.4387%" height="15" fill="rgb(241,98,45)" fg:x="1355" fg:w="68"/><text x="9.0355%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="9.1812%" y="165" width="0.0194%" height="15" fill="rgb(254,28,30)" fg:x="1423" fg:w="3"/><text x="9.4742%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="9.2006%" y="165" width="0.0194%" height="15" fill="rgb(241,142,54)" fg:x="1426" fg:w="3"/><text x="9.4936%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="9.2199%" y="165" width="0.0194%" height="15" fill="rgb(222,85,15)" fg:x="1429" fg:w="3"/><text x="9.5129%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="9.2393%" y="149" width="0.4387%" height="15" fill="rgb(210,85,47)" fg:x="1432" fg:w="68"/><text x="9.5323%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="9.6780%" y="149" width="0.3291%" height="15" fill="rgb(224,206,25)" fg:x="1500" fg:w="51"/><text x="9.9710%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="10.0071%" y="149" width="0.1678%" height="15" fill="rgb(243,201,19)" fg:x="1551" fg:w="26"/><text x="10.3001%" y="159.50"></text></g><g><title>leb128_decode (213 instructions, 1.37%)</title><rect x="10.1748%" y="133" width="1.3743%" height="15" fill="rgb(236,59,4)" fg:x="1577" fg:w="213"/><text x="10.4678%" y="143.50"></text></g><g><title>find_field (242 instructions, 1.56%)</title><rect x="10.1748%" y="149" width="1.5614%" height="15" fill="rgb(254,179,45)" fg:x="1577" fg:w="242"/><text x="10.4678%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="11.7362%" y="149" width="0.4387%" height="15" fill="rgb(226,14,10)" fg:x="1819" fg:w="68"/><text x="12.0292%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="12.1750%" y="149" width="0.0194%" height="15" fill="rgb(244,27,41)" fg:x="1887" fg:w="3"/><text x="12.4679%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="12.1943%" y="149" width="0.0194%" height="15" fill="rgb(235,35,32)" fg:x="1890" fg:w="3"/><text x="12.4873%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="12.2137%" y="149" width="0.0194%" height="15" fill="rgb(218,68,31)" fg:x="1893" fg:w="3"/><text x="12.5067%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="12.2330%" y="133" width="0.3291%" height="15" fill="rgb(207,120,37)" fg:x="1896" fg:w="51"/><text x="12.5260%" y="143.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (186 instructions, 1.20%)</title><rect x="12.5621%" y="117" width="1.2001%" height="15" fill="rgb(227,98,0)" fg:x="1947" fg:w="186"/><text x="12.8551%" y="127.50"></text></g><g><title>utf8_validate (203 instructions, 1.31%)</title><rect x="12.5621%" y="133" width="1.3098%" height="15" fill="rgb(207,7,3)" fg:x="1947" fg:w="203"/><text x="12.8551%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="13.8719%" y="101" width="0.2194%" height="15" fill="rgb(206,98,19)" fg:x="2150" fg:w="34"/><text x="14.1648%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 0.26%)</title><rect x="13.8719%" y="117" width="0.2645%" height="15" fill="rgb(217,5,26)" fg:x="2150" fg:w="41"/><text x="14.1648%" y="127.50"></text></g><g><title>memcpy (115 instructions, 0.74%)</title><rect x="14.1364%" y="117" width="0.7420%" height="15" fill="rgb(235,190,38)" fg:x="2191" fg:w="115"/><text x="14.4294%" y="127.50"></text></g><g><title>text_of_ptr_size (166 instructions, 1.07%)</title><rect x="13.8719%" y="133" width="1.0710%" height="15" fill="rgb(247,86,24)" fg:x="2150" fg:w="166"/><text x="14.1648%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (457 instructions, 2.95%)</title><rect x="12.2330%" y="149" width="2.9486%" height="15" fill="rgb(205,101,16)" fg:x="1896" fg:w="457"/><text x="12.5260%" y="159.50">@d..</text></g><g><title>leb128_decode (213 instructions, 1.37%)</title><rect x="15.1816%" y="133" width="1.3743%" height="15" fill="rgb(246,168,33)" fg:x="2353" fg:w="213"/><text x="15.4746%" y="143.50"></text></g><g><title>find_field (242 instructions, 1.56%)</title><rect x="15.1816%" y="149" width="1.5614%" height="15" fill="rgb(231,114,1)" fg:x="2353" fg:w="242"/><text x="15.4746%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.44%)</title><rect x="16.7430%" y="149" width="0.4387%" height="15" fill="rgb(207,184,53)" fg:x="2595" fg:w="68"/><text x="17.0360%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="17.1818%" y="149" width="0.0194%" height="15" fill="rgb(224,95,51)" fg:x="2663" fg:w="3"/><text x="17.4747%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="17.2011%" y="149" width="0.0194%" height="15" fill="rgb(212,188,45)" fg:x="2666" fg:w="3"/><text x="17.4941%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="17.2205%" y="149" width="0.0194%" height="15" fill="rgb(223,154,38)" fg:x="2669" fg:w="3"/><text x="17.5134%" y="159.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.23%)</title><rect x="17.2398%" y="133" width="0.2323%" height="15" fill="rgb(251,22,52)" fg:x="2672" fg:w="36"/><text x="17.5328%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 0.52%)</title><rect x="17.2398%" y="149" width="0.5162%" height="15" fill="rgb(229,209,22)" fg:x="2672" fg:w="80"/><text x="17.5328%" y="159.50"></text></g><g><title>skip_fields (5 instructions, 0.03%)</title><rect x="17.7560%" y="149" width="0.0323%" height="15" fill="rgb(234,138,34)" fg:x="2752" fg:w="5"/><text x="18.0490%" y="159.50"></text></g><g><title>@deserialize_go&lt;r(topic:t,value:N)&gt; (1,503 instructions, 9.70%)</title><rect x="9.2393%" y="165" width="9.6974%" height="15" fill="rgb(212,95,11)" fg:x="1432" fg:w="1503"/><text x="9.5323%" y="175.50">@deserialize..</text></g><g><title>@deserialize&lt;r(topic:t,value:N)&gt; (3,088 instructions, 19.92%)</title><rect x="0.3291%" y="181" width="19.9239%" height="15" fill="rgb(240,179,47)" fg:x="51" fg:w="3088"/><text x="0.6220%" y="191.50">@deserialize&lt;r(topic:t,val..</text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="20.2529%" y="181" width="0.1678%" height="15" fill="rgb(240,163,11)" fg:x="3139" fg:w="26"/><text x="20.5459%" y="191.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="20.4207%" y="165" width="0.1678%" height="15" fill="rgb(236,37,12)" fg:x="3165" fg:w="26"/><text x="20.7136%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="20.5884%" y="165" width="0.1678%" height="15" fill="rgb(232,164,16)" fg:x="3191" fg:w="26"/><text x="20.8814%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="20.7562%" y="165" width="0.1678%" height="15" fill="rgb(244,205,15)" fg:x="3217" fg:w="26"/><text x="21.0491%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="20.9239%" y="149" width="0.1678%" height="15" fill="rgb(223,117,47)" fg:x="3243" fg:w="26"/><text x="21.2169%" y="159.50"></text></g><g><title>opt_project (14 instructions, 0.09%)</title><rect x="21.0917%" y="117" width="0.0903%" height="15" fill="rgb(244,107,35)" fg:x="3269" fg:w="14"/><text x="21.3847%" y="127.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.05%)</title><rect x="21.1820%" y="101" width="0.0516%" height="15" fill="rgb(205,140,8)" fg:x="3283" fg:w="8"/><text x="21.4750%" y="111.50"></text></g><g><title>B_add (25 instructions, 0.16%)</title><rect x="21.1820%" y="117" width="0.1613%" height="15" fill="rgb(228,84,46)" fg:x="3283" fg:w="25"/><text x="21.4750%" y="127.50"></text></g><g><title>rec (96 instructions, 0.62%)</title><rect x="21.0917%" y="133" width="0.6194%" height="15" fill="rgb(254,188,9)" fg:x="3269" fg:w="96"/><text x="21.3847%" y="143.50"></text></g><g><title>size (100 instructions, 0.65%)</title><rect x="21.0917%" y="149" width="0.6452%" height="15" fill="rgb(206,112,54)" fg:x="3269" fg:w="100"/><text x="21.3847%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="21.7369%" y="149" width="0.1678%" height="15" fill="rgb(216,84,49)" fg:x="3369" fg:w="26"/><text x="22.0299%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.25%)</title><rect x="21.9046%" y="101" width="0.2516%" height="15" fill="rgb(214,194,35)" fg:x="3395" fg:w="39"/><text x="22.1976%" y="111.50"></text></g><g><title>alloc_array (41 instructions, 0.26%)</title><rect x="21.9046%" y="117" width="0.2645%" height="15" fill="rgb(249,28,3)" fg:x="3395" fg:w="41"/><text x="22.1976%" y="127.50"></text></g><g><title>opt_project (14 instructions, 0.09%)</title><rect x="22.1692%" y="85" width="0.0903%" height="15" fill="rgb(222,56,52)" fg:x="3436" fg:w="14"/><text x="22.4621%" y="95.50"></text></g><g><title>opt_inject (14 instructions, 0.09%)</title><rect x="22.2595%" y="85" width="0.0903%" height="15" fill="rgb(245,217,50)" fg:x="3450" fg:w="14"/><text x="22.5525%" y="95.50"></text></g><g><title>pop (58 instructions, 0.37%)</title><rect x="22.1692%" y="101" width="0.3742%" height="15" fill="rgb(213,201,24)" fg:x="3436" fg:w="58"/><text x="22.4621%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="22.5434%" y="85" width="0.1678%" height="15" fill="rgb(248,116,28)" fg:x="3494" fg:w="26"/><text x="22.8364%" y="95.50"></text></g><g><title>to_2_tuple (41 instructions, 0.26%)</title><rect x="22.5434%" y="101" width="0.2645%" height="15" fill="rgb(219,72,43)" fg:x="3494" fg:w="41"/><text x="22.8364%" y="111.50"></text></g><g><title>opt_project (14 instructions, 0.09%)</title><rect x="22.8079%" y="101" width="0.0903%" height="15" fill="rgb(209,138,14)" fg:x="3535" fg:w="14"/><text x="23.1009%" y="111.50"></text></g><g><title>anon-func-402.7 (151 instructions, 0.97%)</title><rect x="22.1692%" y="117" width="0.9743%" height="15" fill="rgb(222,18,33)" fg:x="3436" fg:w="151"/><text x="22.4621%" y="127.50"></text></g><g><title>Array_tabulate (250 instructions, 1.61%)</title><rect x="21.9046%" y="133" width="1.6130%" height="15" fill="rgb(213,199,7)" fg:x="3395" fg:w="250"/><text x="22.1976%" y="143.50"></text></g><g><title>tabulate (254 instructions, 1.64%)</title><rect x="21.9046%" y="149" width="1.6388%" height="15" fill="rgb(250,110,10)" fg:x="3395" fg:w="254"/><text x="22.1976%" y="159.50"></text></g><g><title>toArray (441 instructions, 2.85%)</title><rect x="20.9239%" y="165" width="2.8453%" height="15" fill="rgb(248,123,6)" fg:x="3243" fg:w="441"/><text x="21.2169%" y="175.50">to..</text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="23.7693%" y="165" width="0.1678%" height="15" fill="rgb(206,91,31)" fg:x="3684" fg:w="26"/><text x="24.0622%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="23.9370%" y="165" width="0.1678%" height="15" fill="rgb(211,154,13)" fg:x="3710" fg:w="26"/><text x="24.2300%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="24.1048%" y="149" width="0.1678%" height="15" fill="rgb(225,148,7)" fg:x="3736" fg:w="26"/><text x="24.3977%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="24.2725%" y="149" width="0.1678%" height="15" fill="rgb(220,160,43)" fg:x="3762" fg:w="26"/><text x="24.5655%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="24.4403%" y="149" width="0.1032%" height="15" fill="rgb(213,52,39)" fg:x="3788" fg:w="16"/><text x="24.7333%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="24.5435%" y="149" width="0.1032%" height="15" fill="rgb(243,137,7)" fg:x="3804" fg:w="16"/><text x="24.8365%" y="159.50"></text></g><g><title>motoko_rts::text::text_get_range::hacc7c8aaa5b3cfbd (14 instructions, 0.09%)</title><rect x="24.6468%" y="101" width="0.0903%" height="15" fill="rgb(230,79,13)" fg:x="3820" fg:w="14"/><text x="24.9397%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::hacc7c8aaa5b3cfbd (14 instructions, 0.09%)</title><rect x="24.7371%" y="101" width="0.0903%" height="15" fill="rgb(247,105,23)" fg:x="3834" fg:w="14"/><text x="25.0300%" y="111.50"></text></g><g><title>memcmp (133 instructions, 0.86%)</title><rect x="24.8274%" y="101" width="0.8581%" height="15" fill="rgb(223,179,41)" fg:x="3848" fg:w="133"/><text x="25.1204%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::hf661208445698ca3 (234 instructions, 1.51%)</title><rect x="24.6468%" y="117" width="1.5098%" height="15" fill="rgb(218,9,34)" fg:x="3820" fg:w="234"/><text x="24.9397%" y="127.50"></text></g><g><title>text_compare (269 instructions, 1.74%)</title><rect x="24.6468%" y="133" width="1.7356%" height="15" fill="rgb(222,106,8)" fg:x="3820" fg:w="269"/><text x="24.9397%" y="143.50"></text></g><g><title>Text.compare_eq (273 instructions, 1.76%)</title><rect x="24.6468%" y="149" width="1.7614%" height="15" fill="rgb(211,220,0)" fg:x="3820" fg:w="273"/><text x="24.9397%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.10%)</title><rect x="26.4082%" y="149" width="0.1032%" height="15" fill="rgb(229,52,16)" fg:x="4093" fg:w="16"/><text x="26.7011%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="26.5114%" y="133" width="0.1678%" height="15" fill="rgb(212,155,18)" fg:x="4109" fg:w="26"/><text x="26.8044%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="26.6791%" y="133" width="0.1678%" height="15" fill="rgb(242,21,14)" fg:x="4135" fg:w="26"/><text x="26.9721%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="26.8469%" y="133" width="0.1678%" height="15" fill="rgb(222,19,48)" fg:x="4161" fg:w="26"/><text x="27.1399%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="27.0146%" y="133" width="0.1678%" height="15" fill="rgb(232,45,27)" fg:x="4187" fg:w="26"/><text x="27.3076%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="27.1824%" y="133" width="0.1678%" height="15" fill="rgb(249,103,42)" fg:x="4213" fg:w="26"/><text x="27.4754%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="27.3502%" y="133" width="0.1678%" height="15" fill="rgb(246,81,33)" fg:x="4239" fg:w="26"/><text x="27.6431%" y="143.50"></text></g><g><title>@new_async (266 instructions, 1.72%)</title><rect x="26.5114%" y="149" width="1.7162%" height="15" fill="rgb(252,33,42)" fg:x="4109" fg:w="266"/><text x="26.8044%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="28.2276%" y="149" width="0.1678%" height="15" fill="rgb(209,212,41)" fg:x="4375" fg:w="26"/><text x="28.5206%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="28.3954%" y="149" width="0.1678%" height="15" fill="rgb(207,154,6)" fg:x="4401" fg:w="26"/><text x="28.6883%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.05%)</title><rect x="28.5631%" y="149" width="0.0452%" height="15" fill="rgb(223,64,47)" fg:x="4427" fg:w="7"/><text x="28.8561%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.05%)</title><rect x="28.6083%" y="149" width="0.0452%" height="15" fill="rgb(211,161,38)" fg:x="4434" fg:w="7"/><text x="28.9013%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="28.6535%" y="149" width="0.1678%" height="15" fill="rgb(219,138,40)" fg:x="4441" fg:w="26"/><text x="28.9464%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.25%)</title><rect x="28.8212%" y="133" width="0.2516%" height="15" fill="rgb(241,228,46)" fg:x="4467" fg:w="39"/><text x="29.1142%" y="143.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.06%)</title><rect x="29.0728%" y="133" width="0.0581%" height="15" fill="rgb(223,209,38)" fg:x="4506" fg:w="9"/><text x="29.3658%" y="143.50"></text></g><g><title>remember_continuation (3,725 instructions, 24.03%)</title><rect x="28.8212%" y="149" width="24.0338%" height="15" fill="rgb(236,164,45)" fg:x="4467" fg:w="3725"/><text x="29.1142%" y="159.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="52.8550%" y="117" width="0.1032%" height="15" fill="rgb(231,15,5)" fg:x="8192" fg:w="16"/><text x="53.1480%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.03%)</title><rect x="52.9583%" y="101" width="0.0258%" height="15" fill="rgb(252,35,15)" fg:x="8208" fg:w="4"/><text x="53.2512%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.24%)</title><rect x="52.9583%" y="117" width="0.2387%" height="15" fill="rgb(248,181,18)" fg:x="8208" fg:w="37"/><text x="53.2512%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.19%)</title><rect x="53.1970%" y="117" width="0.1936%" height="15" fill="rgb(233,39,42)" fg:x="8245" fg:w="30"/><text x="53.4899%" y="127.50"></text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.21%)</title><rect x="53.3905%" y="117" width="0.2065%" height="15" fill="rgb(238,110,33)" fg:x="8275" fg:w="32"/><text x="53.6835%" y="127.50"></text></g><g><title>@buffer_size&lt;r(topic:t,value:N)&gt; (160 instructions, 1.03%)</title><rect x="52.8550%" y="133" width="1.0323%" height="15" fill="rgb(233,195,10)" fg:x="8192" fg:w="160"/><text x="53.1480%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="53.8873%" y="117" width="0.2194%" height="15" fill="rgb(254,105,3)" fg:x="8352" fg:w="34"/><text x="54.1803%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="53.8873%" y="133" width="0.2323%" height="15" fill="rgb(221,225,9)" fg:x="8352" fg:w="36"/><text x="54.1803%" y="143.50"></text></g><g><title>memcpy (81 instructions, 0.52%)</title><rect x="54.1196%" y="133" width="0.5226%" height="15" fill="rgb(224,227,45)" fg:x="8388" fg:w="81"/><text x="54.4126%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="54.6422%" y="117" width="0.2194%" height="15" fill="rgb(229,198,43)" fg:x="8469" fg:w="34"/><text x="54.9352%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="54.6422%" y="133" width="0.2323%" height="15" fill="rgb(206,209,35)" fg:x="8469" fg:w="36"/><text x="54.9352%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="54.8745%" y="117" width="0.1032%" height="15" fill="rgb(245,195,53)" fg:x="8505" fg:w="16"/><text x="55.1675%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.03%)</title><rect x="54.9777%" y="101" width="0.0258%" height="15" fill="rgb(240,92,26)" fg:x="8521" fg:w="4"/><text x="55.2707%" y="111.50"></text></g><g><title>leb128_encode (12 instructions, 0.08%)</title><rect x="55.0035%" y="101" width="0.0774%" height="15" fill="rgb(207,40,23)" fg:x="8525" fg:w="12"/><text x="55.2965%" y="111.50"></text></g><g><title>memcpy (68 instructions, 0.44%)</title><rect x="55.0810%" y="85" width="0.4387%" height="15" fill="rgb(223,111,35)" fg:x="8537" fg:w="68"/><text x="55.3739%" y="95.50"></text></g><g><title>text_to_buf (92 instructions, 0.59%)</title><rect x="55.0810%" y="101" width="0.5936%" height="15" fill="rgb(229,147,28)" fg:x="8537" fg:w="92"/><text x="55.3739%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (135 instructions, 0.87%)</title><rect x="54.9777%" y="117" width="0.8710%" height="15" fill="rgb(211,29,28)" fg:x="8521" fg:w="135"/><text x="55.2707%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.19%)</title><rect x="55.8488%" y="117" width="0.1936%" height="15" fill="rgb(228,72,33)" fg:x="8656" fg:w="30"/><text x="56.1417%" y="127.50"></text></g><g><title>leb128_encode (12 instructions, 0.08%)</title><rect x="56.0423%" y="101" width="0.0774%" height="15" fill="rgb(205,214,31)" fg:x="8686" fg:w="12"/><text x="56.3353%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.26%)</title><rect x="56.0423%" y="117" width="0.2581%" height="15" fill="rgb(224,111,15)" fg:x="8686" fg:w="40"/><text x="56.3353%" y="127.50"></text></g><g><title>@serialize_go&lt;r(topic:t,value:N)&gt; (246 instructions, 1.59%)</title><rect x="54.8745%" y="133" width="1.5872%" height="15" fill="rgb(253,21,26)" fg:x="8505" fg:w="246"/><text x="55.1675%" y="143.50"></text></g><g><title>@serialize&lt;r(topic:t,value:N)&gt; (622 instructions, 4.01%)</title><rect x="52.8550%" y="149" width="4.0132%" height="15" fill="rgb(245,139,43)" fg:x="8192" fg:w="622"/><text x="53.1480%" y="159.50">@se..</text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="56.8682%" y="133" width="0.0194%" height="15" fill="rgb(252,170,7)" fg:x="8814" fg:w="3"/><text x="57.1612%" y="143.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.25%)</title><rect x="56.8875%" y="53" width="0.2452%" height="15" fill="rgb(231,118,14)" fg:x="8817" fg:w="38"/><text x="57.1805%" y="63.50"></text></g><g><title>memset (244 instructions, 1.57%)</title><rect x="57.1327%" y="53" width="1.5743%" height="15" fill="rgb(238,83,0)" fg:x="8855" fg:w="244"/><text x="57.4257%" y="63.50"></text></g><g><title>mp_calloc (308 instructions, 1.99%)</title><rect x="56.8875%" y="69" width="1.9872%" height="15" fill="rgb(221,39,39)" fg:x="8817" fg:w="308"/><text x="57.1805%" y="79.50"></text></g><g><title>mp_init (323 instructions, 2.08%)</title><rect x="56.8875%" y="85" width="2.0840%" height="15" fill="rgb(222,119,46)" fg:x="8817" fg:w="323"/><text x="57.1805%" y="95.50">m..</text></g><g><title>mp_set_u64 (480 instructions, 3.10%)</title><rect x="58.9715%" y="69" width="3.0970%" height="15" fill="rgb(222,165,49)" fg:x="9140" fg:w="480"/><text x="59.2645%" y="79.50">mp..</text></g><g><title>mp_set_i64 (494 instructions, 3.19%)</title><rect x="58.9715%" y="85" width="3.1873%" height="15" fill="rgb(219,113,52)" fg:x="9140" fg:w="494"/><text x="59.2645%" y="95.50">mp..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.20%)</title><rect x="62.1588%" y="85" width="0.2000%" height="15" fill="rgb(214,7,15)" fg:x="9634" fg:w="31"/><text x="62.4518%" y="95.50"></text></g><g><title>bigint_of_int64 (891 instructions, 5.75%)</title><rect x="56.8875%" y="101" width="5.7488%" height="15" fill="rgb(235,32,4)" fg:x="8817" fg:w="891"/><text x="57.1805%" y="111.50">bigint..</text></g><g><title>mp_cmp_mag (17 instructions, 0.11%)</title><rect x="62.6363%" y="69" width="0.1097%" height="15" fill="rgb(238,90,54)" fg:x="9708" fg:w="17"/><text x="62.9293%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.20%)</title><rect x="62.6363%" y="85" width="0.2000%" height="15" fill="rgb(213,208,19)" fg:x="9708" fg:w="31"/><text x="62.9293%" y="95.50"></text></g><g><title>bigint_lt (54 instructions, 0.35%)</title><rect x="62.6363%" y="101" width="0.3484%" height="15" fill="rgb(233,156,4)" fg:x="9708" fg:w="54"/><text x="62.9293%" y="111.50"></text></g><g><title>B_lt (963 instructions, 6.21%)</title><rect x="56.8875%" y="117" width="6.2133%" height="15" fill="rgb(207,194,5)" fg:x="8817" fg:w="963"/><text x="57.1805%" y="127.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.08%)</title><rect x="63.1008%" y="117" width="0.0774%" height="15" fill="rgb(206,111,30)" fg:x="9780" fg:w="12"/><text x="63.3938%" y="127.50"></text></g><g><title>cycle_add (999 instructions, 6.45%)</title><rect x="56.8875%" y="133" width="6.4456%" height="15" fill="rgb(243,70,54)" fg:x="8817" fg:w="999"/><text x="57.1805%" y="143.50">cycle_a..</text></g><g><title>@add_cycles (1,009 instructions, 6.51%)</title><rect x="56.8682%" y="149" width="6.5101%" height="15" fill="rgb(242,28,8)" fg:x="8814" fg:w="1009"/><text x="57.1612%" y="159.50">@add_cy..</text></g><g><title>@call_succeeded (2 instructions, 0.01%)</title><rect x="63.3783%" y="149" width="0.0129%" height="15" fill="rgb(219,106,18)" fg:x="9823" fg:w="2"/><text x="63.6713%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="63.3912%" y="133" width="0.1678%" height="15" fill="rgb(244,222,10)" fg:x="9825" fg:w="26"/><text x="63.6842%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.26%)</title><rect x="63.3912%" y="149" width="0.2645%" height="15" fill="rgb(236,179,52)" fg:x="9825" fg:w="41"/><text x="63.6842%" y="159.50"></text></g><g><title>from_2_tuple (6 instructions, 0.04%)</title><rect x="63.6557%" y="149" width="0.0387%" height="15" fill="rgb(213,23,39)" fg:x="9866" fg:w="6"/><text x="63.9487%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="63.6944%" y="133" width="0.1678%" height="15" fill="rgb(238,48,10)" fg:x="9872" fg:w="26"/><text x="63.9874%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="63.8622%" y="117" width="0.1678%" height="15" fill="rgb(251,196,23)" fg:x="9898" fg:w="26"/><text x="64.1552%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="64.0299%" y="117" width="0.1678%" height="15" fill="rgb(250,152,24)" fg:x="9924" fg:w="26"/><text x="64.3229%" y="127.50"></text></g><g><title>enqueue (118 instructions, 0.76%)</title><rect x="63.8622%" y="133" width="0.7613%" height="15" fill="rgb(209,150,17)" fg:x="9898" fg:w="118"/><text x="64.1552%" y="143.50"></text></g><g><title>$lambda (167 instructions, 1.08%)</title><rect x="63.6944%" y="149" width="1.0775%" height="15" fill="rgb(234,202,34)" fg:x="9872" fg:w="167"/><text x="63.9874%" y="159.50"></text></g><g><title>$loop/1 (6,568 instructions, 42.38%)</title><rect x="24.1048%" y="165" width="42.3769%" height="15" fill="rgb(253,148,53)" fg:x="3736" fg:w="6568"/><text x="24.3977%" y="175.50">$loop/1</text></g><g><title>$lambda (7,244 instructions, 46.74%)</title><rect x="20.4207%" y="181" width="46.7385%" height="15" fill="rgb(218,129,16)" fg:x="3165" fg:w="7244"/><text x="20.7136%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.32%)</title><rect x="67.1592%" y="181" width="0.3226%" height="15" fill="rgb(216,85,19)" fg:x="10409" fg:w="50"/><text x="67.4521%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.09%)</title><rect x="67.4818%" y="181" width="0.0903%" height="15" fill="rgb(235,228,7)" fg:x="10459" fg:w="14"/><text x="67.7747%" y="191.50"></text></g><g><title>publish (10,971 instructions, 70.79%)</title><rect x="0.0000%" y="197" width="70.7852%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="10971"/><text x="0.2930%" y="207.50">publish</text></g><g><title>trans_state5 (9 instructions, 0.06%)</title><rect x="70.7852%" y="181" width="0.0581%" height="15" fill="rgb(208,168,36)" fg:x="10971" fg:w="9"/><text x="71.0782%" y="191.50"></text></g><g><title>recall_continuation (57 instructions, 0.37%)</title><rect x="70.8433%" y="181" width="0.3678%" height="15" fill="rgb(246,171,24)" fg:x="10980" fg:w="57"/><text x="71.1362%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="71.2110%" y="165" width="0.2194%" height="15" fill="rgb(215,142,24)" fg:x="11037" fg:w="34"/><text x="71.5040%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="71.2110%" y="181" width="0.2323%" height="15" fill="rgb(250,187,7)" fg:x="11037" fg:w="36"/><text x="71.5040%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="71.4433%" y="149" width="0.3291%" height="15" fill="rgb(228,66,33)" fg:x="11073" fg:w="51"/><text x="71.7363%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="71.7724%" y="149" width="0.2194%" height="15" fill="rgb(234,215,21)" fg:x="11124" fg:w="34"/><text x="72.0653%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="71.9917%" y="149" width="0.3291%" height="15" fill="rgb(222,191,20)" fg:x="11158" fg:w="51"/><text x="72.2847%" y="159.50"></text></g><g><title>parse_idl_header (207 instructions, 1.34%)</title><rect x="71.4433%" y="165" width="1.3356%" height="15" fill="rgb(245,79,54)" fg:x="11073" fg:w="207"/><text x="71.7363%" y="175.50"></text></g><g><title>idl_sub_buf_words (9 instructions, 0.06%)</title><rect x="72.7789%" y="165" width="0.0581%" height="15" fill="rgb(240,10,37)" fg:x="11280" fg:w="9"/><text x="73.0719%" y="175.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="72.8370%" y="149" width="0.0258%" height="15" fill="rgb(214,192,32)" fg:x="11289" fg:w="4"/><text x="73.1299%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.12%)</title><rect x="72.8370%" y="165" width="0.1226%" height="15" fill="rgb(209,36,54)" fg:x="11289" fg:w="19"/><text x="73.1299%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.33%)</title><rect x="72.9595%" y="165" width="0.3291%" height="15" fill="rgb(220,10,11)" fg:x="11308" fg:w="51"/><text x="73.2525%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 2.81%)</title><rect x="71.4433%" y="181" width="2.8131%" height="15" fill="rgb(221,106,17)" fg:x="11073" fg:w="436"/><text x="71.7363%" y="191.50">@d..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.25%)</title><rect x="74.2564%" y="37" width="0.2452%" height="15" fill="rgb(251,142,44)" fg:x="11509" fg:w="38"/><text x="74.5494%" y="47.50"></text></g><g><title>memset (244 instructions, 1.57%)</title><rect x="74.5016%" y="37" width="1.5743%" height="15" fill="rgb(238,13,15)" fg:x="11547" fg:w="244"/><text x="74.7945%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.99%)</title><rect x="74.2564%" y="53" width="1.9872%" height="15" fill="rgb(208,107,27)" fg:x="11509" fg:w="308"/><text x="74.5494%" y="63.50"></text></g><g><title>mp_init (323 instructions, 2.08%)</title><rect x="74.2564%" y="69" width="2.0840%" height="15" fill="rgb(205,136,37)" fg:x="11509" fg:w="323"/><text x="74.5494%" y="79.50">m..</text></g><g><title>mp_set_u32 (480 instructions, 3.10%)</title><rect x="76.3404%" y="69" width="3.0970%" height="15" fill="rgb(250,205,27)" fg:x="11832" fg:w="480"/><text x="76.6334%" y="79.50">mp..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.20%)</title><rect x="79.4374%" y="69" width="0.2000%" height="15" fill="rgb(210,80,43)" fg:x="12312" fg:w="31"/><text x="79.7304%" y="79.50"></text></g><g><title>bigint_of_word32 (877 instructions, 5.66%)</title><rect x="74.2564%" y="85" width="5.6584%" height="15" fill="rgb(247,160,36)" fg:x="11509" fg:w="877"/><text x="74.5494%" y="95.50">bigint..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.25%)</title><rect x="79.9148%" y="37" width="0.2452%" height="15" fill="rgb(234,13,49)" fg:x="12386" fg:w="38"/><text x="80.2078%" y="47.50"></text></g><g><title>memset (244 instructions, 1.57%)</title><rect x="80.1600%" y="37" width="1.5743%" height="15" fill="rgb(234,122,0)" fg:x="12424" fg:w="244"/><text x="80.4530%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.99%)</title><rect x="79.9148%" y="53" width="1.9872%" height="15" fill="rgb(207,146,38)" fg:x="12386" fg:w="308"/><text x="80.2078%" y="63.50"></text></g><g><title>mp_init (323 instructions, 2.08%)</title><rect x="79.9148%" y="69" width="2.0840%" height="15" fill="rgb(207,177,25)" fg:x="12386" fg:w="323"/><text x="80.2078%" y="79.50">m..</text></g><g><title>mp_copy (39 instructions, 0.25%)</title><rect x="81.9988%" y="53" width="0.2516%" height="15" fill="rgb(211,178,42)" fg:x="12709" fg:w="39"/><text x="82.2918%" y="63.50"></text></g><g><title>mp_lshd (12 instructions, 0.08%)</title><rect x="82.2505%" y="53" width="0.0774%" height="15" fill="rgb(230,69,54)" fg:x="12748" fg:w="12"/><text x="82.5434%" y="63.50"></text></g><g><title>mp_clamp (11 instructions, 0.07%)</title><rect x="82.3279%" y="53" width="0.0710%" height="15" fill="rgb(214,135,41)" fg:x="12760" fg:w="11"/><text x="82.6209%" y="63.50"></text></g><g><title>mp_mul_2d (110 instructions, 0.71%)</title><rect x="81.9988%" y="69" width="0.7097%" height="15" fill="rgb(237,67,25)" fg:x="12709" fg:w="110"/><text x="82.2918%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.20%)</title><rect x="82.7086%" y="69" width="0.2000%" height="15" fill="rgb(222,189,50)" fg:x="12819" fg:w="31"/><text x="83.0015%" y="79.50"></text></g><g><title>bigint_lsh (519 instructions, 3.35%)</title><rect x="79.9148%" y="85" width="3.3486%" height="15" fill="rgb(245,148,34)" fg:x="12386" fg:w="519"/><text x="80.2078%" y="95.50">bi..</text></g><g><title>B_lsh (1,421 instructions, 9.17%)</title><rect x="74.2564%" y="101" width="9.1683%" height="15" fill="rgb(222,29,6)" fg:x="11509" fg:w="1421"/><text x="74.5494%" y="111.50">B_lsh</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.25%)</title><rect x="83.4247%" y="37" width="0.2452%" height="15" fill="rgb(221,189,43)" fg:x="12930" fg:w="38"/><text x="83.7177%" y="47.50"></text></g><g><title>memset (244 instructions, 1.57%)</title><rect x="83.6699%" y="37" width="1.5743%" height="15" fill="rgb(207,36,27)" fg:x="12968" fg:w="244"/><text x="83.9629%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.99%)</title><rect x="83.4247%" y="53" width="1.9872%" height="15" fill="rgb(217,90,24)" fg:x="12930" fg:w="308"/><text x="83.7177%" y="63.50"></text></g><g><title>mp_init (323 instructions, 2.08%)</title><rect x="83.4247%" y="69" width="2.0840%" height="15" fill="rgb(224,66,35)" fg:x="12930" fg:w="323"/><text x="83.7177%" y="79.50">m..</text></g><g><title>mp_set_u64 (480 instructions, 3.10%)</title><rect x="85.5087%" y="53" width="3.0970%" height="15" fill="rgb(221,13,50)" fg:x="13253" fg:w="480"/><text x="85.8017%" y="63.50">mp..</text></g><g><title>mp_set_i64 (494 instructions, 3.19%)</title><rect x="85.5087%" y="69" width="3.1873%" height="15" fill="rgb(236,68,49)" fg:x="13253" fg:w="494"/><text x="85.8017%" y="79.50">mp..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.20%)</title><rect x="88.6960%" y="69" width="0.2000%" height="15" fill="rgb(229,146,28)" fg:x="13747" fg:w="31"/><text x="88.9890%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 5.75%)</title><rect x="83.4247%" y="85" width="5.7488%" height="15" fill="rgb(225,31,38)" fg:x="12930" fg:w="891"/><text x="83.7177%" y="95.50">bigint..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.25%)</title><rect x="89.1735%" y="37" width="0.2452%" height="15" fill="rgb(250,208,3)" fg:x="13821" fg:w="38"/><text x="89.4665%" y="47.50"></text></g><g><title>memset (244 instructions, 1.57%)</title><rect x="89.4187%" y="37" width="1.5743%" height="15" fill="rgb(246,54,23)" fg:x="13859" fg:w="244"/><text x="89.7116%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.99%)</title><rect x="89.1735%" y="53" width="1.9872%" height="15" fill="rgb(243,76,11)" fg:x="13821" fg:w="308"/><text x="89.4665%" y="63.50"></text></g><g><title>mp_init (323 instructions, 2.08%)</title><rect x="89.1735%" y="69" width="2.0840%" height="15" fill="rgb(245,21,50)" fg:x="13821" fg:w="323"/><text x="89.4665%" y="79.50">m..</text></g><g><title>mp_clamp (42 instructions, 0.27%)</title><rect x="91.2575%" y="37" width="0.2710%" height="15" fill="rgb(228,9,43)" fg:x="14144" fg:w="42"/><text x="91.5505%" y="47.50"></text></g><g><title>s_mp_add (104 instructions, 0.67%)</title><rect x="91.2575%" y="53" width="0.6710%" height="15" fill="rgb(208,100,47)" fg:x="14144" fg:w="104"/><text x="91.5505%" y="63.50"></text></g><g><title>mp_add (120 instructions, 0.77%)</title><rect x="91.2575%" y="69" width="0.7742%" height="15" fill="rgb(232,26,8)" fg:x="14144" fg:w="120"/><text x="91.5505%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.20%)</title><rect x="92.0317%" y="69" width="0.2000%" height="15" fill="rgb(216,166,38)" fg:x="14264" fg:w="31"/><text x="92.3247%" y="79.50"></text></g><g><title>bigint_add (538 instructions, 3.47%)</title><rect x="89.1735%" y="85" width="3.4712%" height="15" fill="rgb(251,202,51)" fg:x="13821" fg:w="538"/><text x="89.4665%" y="95.50">big..</text></g><g><title>mp_count_bits (6 instructions, 0.04%)</title><rect x="92.6447%" y="69" width="0.0387%" height="15" fill="rgb(254,216,34)" fg:x="14359" fg:w="6"/><text x="92.9377%" y="79.50"></text></g><g><title>bigint_2complement_bits (39 instructions, 0.25%)</title><rect x="92.6447%" y="85" width="0.2516%" height="15" fill="rgb(251,32,27)" fg:x="14359" fg:w="39"/><text x="92.9377%" y="95.50"></text></g><g><title>mp_get_mag_u32 (12 instructions, 0.08%)</title><rect x="92.8963%" y="53" width="0.0774%" height="15" fill="rgb(208,127,28)" fg:x="14398" fg:w="12"/><text x="93.1893%" y="63.50"></text></g><g><title>mp_get_i32 (23 instructions, 0.15%)</title><rect x="92.8963%" y="69" width="0.1484%" height="15" fill="rgb(224,137,22)" fg:x="14398" fg:w="23"/><text x="93.1893%" y="79.50"></text></g><g><title>bigint_to_word32_wrap (34 instructions, 0.22%)</title><rect x="92.8963%" y="85" width="0.2194%" height="15" fill="rgb(254,70,32)" fg:x="14398" fg:w="34"/><text x="93.1893%" y="95.50"></text></g><g><title>B_add (1,529 instructions, 9.87%)</title><rect x="83.4247%" y="101" width="9.8652%" height="15" fill="rgb(229,75,37)" fg:x="12930" fg:w="1529"/><text x="83.7177%" y="111.50">B_add</text></g><g><title>from_word128_ptr (2,977 instructions, 19.21%)</title><rect x="74.2564%" y="117" width="19.2077%" height="15" fill="rgb(252,64,23)" fg:x="11509" fg:w="2977"/><text x="74.5494%" y="127.50">from_word128_ptr</text></g><g><title>cycle_refunded (2,990 instructions, 19.29%)</title><rect x="74.2564%" y="133" width="19.2916%" height="15" fill="rgb(232,162,48)" fg:x="11509" fg:w="2990"/><text x="74.5494%" y="143.50">cycle_refunded</text></g><g><title>@getSystemRefund (2,992 instructions, 19.30%)</title><rect x="74.2564%" y="149" width="19.3045%" height="15" fill="rgb(246,160,12)" fg:x="11509" fg:w="2992"/><text x="74.5494%" y="159.50">@getSystemRefund</text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="93.5609%" y="149" width="0.1678%" height="15" fill="rgb(247,166,0)" fg:x="14501" fg:w="26"/><text x="93.8538%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.17%)</title><rect x="93.7286%" y="133" width="0.1678%" height="15" fill="rgb(249,219,21)" fg:x="14527" fg:w="26"/><text x="94.0216%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.26%)</title><rect x="93.7286%" y="149" width="0.2645%" height="15" fill="rgb(205,209,3)" fg:x="14527" fg:w="41"/><text x="94.0216%" y="159.50"></text></g><g><title>opt_inject (14 instructions, 0.09%)</title><rect x="93.9932%" y="149" width="0.0903%" height="15" fill="rgb(243,44,1)" fg:x="14568" fg:w="14"/><text x="94.2861%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="94.0835%" y="133" width="0.0194%" height="15" fill="rgb(206,159,16)" fg:x="14582" fg:w="3"/><text x="94.3765%" y="143.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.09%)</title><rect x="94.1028%" y="53" width="0.0903%" height="15" fill="rgb(244,77,30)" fg:x="14585" fg:w="14"/><text x="94.3958%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="94.1932%" y="37" width="0.2194%" height="15" fill="rgb(218,69,12)" fg:x="14599" fg:w="34"/><text x="94.4861%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="94.1932%" y="53" width="0.2323%" height="15" fill="rgb(212,87,7)" fg:x="14599" fg:w="36"/><text x="94.4861%" y="63.50"></text></g><g><title>memcpy (63 instructions, 0.41%)</title><rect x="94.4254%" y="53" width="0.4065%" height="15" fill="rgb(245,114,25)" fg:x="14635" fg:w="63"/><text x="94.7184%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.22%)</title><rect x="94.8319%" y="37" width="0.2194%" height="15" fill="rgb(210,61,42)" fg:x="14698" fg:w="34"/><text x="95.1249%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.23%)</title><rect x="94.8319%" y="53" width="0.2323%" height="15" fill="rgb(211,52,33)" fg:x="14698" fg:w="36"/><text x="95.1249%" y="63.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.03%)</title><rect x="95.0642%" y="53" width="0.0258%" height="15" fill="rgb(234,58,33)" fg:x="14734" fg:w="4"/><text x="95.3572%" y="63.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 1.39%)</title><rect x="94.1028%" y="69" width="1.3936%" height="15" fill="rgb(220,115,36)" fg:x="14585" fg:w="216"/><text x="94.3958%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.19%)</title><rect x="95.4965%" y="69" width="0.1936%" height="15" fill="rgb(243,153,54)" fg:x="14801" fg:w="30"/><text x="95.7895%" y="79.50"></text></g><g><title>$lambda (251 instructions, 1.62%)</title><rect x="94.1028%" y="85" width="1.6195%" height="15" fill="rgb(251,47,18)" fg:x="14585" fg:w="251"/><text x="94.3958%" y="95.50"></text></g><g><title>$loop/1 (285 instructions, 1.84%)</title><rect x="94.1028%" y="101" width="1.8388%" height="15" fill="rgb(242,102,42)" fg:x="14585" fg:w="285"/><text x="94.3958%" y="111.50"></text></g><g><title>$k/15 (302 instructions, 1.95%)</title><rect x="94.1028%" y="117" width="1.9485%" height="15" fill="rgb(234,31,38)" fg:x="14585" fg:w="302"/><text x="94.3958%" y="127.50"></text></g><g><title>$lambda (309 instructions, 1.99%)</title><rect x="94.1028%" y="133" width="1.9937%" height="15" fill="rgb(221,117,51)" fg:x="14585" fg:w="309"/><text x="94.3958%" y="143.50"></text></g><g><title>anon-func-349.15 (335 instructions, 2.16%)</title><rect x="94.0835%" y="149" width="2.1614%" height="15" fill="rgb(212,20,18)" fg:x="14582" fg:w="335"/><text x="94.3765%" y="159.50">a..</text></g><g><title>fulfill (3,462 instructions, 22.34%)</title><rect x="74.2564%" y="165" width="22.3369%" height="15" fill="rgb(245,133,36)" fg:x="11509" fg:w="3462"/><text x="74.5494%" y="175.50">fulfill</text></g><g><title>$lambda (3,470 instructions, 22.39%)</title><rect x="74.2564%" y="181" width="22.3885%" height="15" fill="rgb(212,6,19)" fg:x="11509" fg:w="3470"/><text x="74.5494%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.32%)</title><rect x="96.6449%" y="181" width="0.3226%" height="15" fill="rgb(218,1,36)" fg:x="14979" fg:w="50"/><text x="96.9379%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.09%)</title><rect x="96.9675%" y="181" width="0.0903%" height="15" fill="rgb(246,84,54)" fg:x="15029" fg:w="14"/><text x="97.2605%" y="191.50"></text></g><g><title>all (15,499 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,110,6)" fg:x="0" fg:w="15499"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (4,528 instructions, 29.21%)</title><rect x="70.7852%" y="197" width="29.2148%" height="15" fill="rgb(214,47,5)" fg:x="10971" fg:w="4528"/><text x="71.0782%" y="207.50">@callback&lt;u&gt;</text></g></svg></svg>