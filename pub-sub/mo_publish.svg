<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="10530"><g><title>trans_state5 (8 instructions, 0.08%)</title><rect x="0.0000%" y="149" width="0.0760%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="8"/><text x="0.2930%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="0.0760%" y="149" width="0.3134%" height="15" fill="rgb(252,106,19)" fg:x="8" fg:w="33"/><text x="0.3689%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="0.3894%" y="133" width="0.4368%" height="15" fill="rgb(206,74,20)" fg:x="41" fg:w="46"/><text x="0.6823%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="0.8262%" y="133" width="0.3134%" height="15" fill="rgb(230,138,44)" fg:x="87" fg:w="33"/><text x="1.1192%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="1.1396%" y="133" width="0.5698%" height="15" fill="rgb(235,182,43)" fg:x="120" fg:w="60"/><text x="1.4326%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="1.7094%" y="133" width="0.4368%" height="15" fill="rgb(242,16,51)" fg:x="180" fg:w="46"/><text x="2.0024%" y="143.50"></text></g><g><title>leb128_decode (198 instructions, 1.88%)</title><rect x="2.1462%" y="133" width="1.8803%" height="15" fill="rgb(248,9,4)" fg:x="226" fg:w="198"/><text x="2.4392%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="4.0266%" y="133" width="0.5698%" height="15" fill="rgb(210,31,22)" fg:x="424" fg:w="60"/><text x="4.3196%" y="143.50"></text></g><g><title>leb128_decode (198 instructions, 1.88%)</title><rect x="4.5964%" y="133" width="1.8803%" height="15" fill="rgb(239,54,39)" fg:x="484" fg:w="198"/><text x="4.8894%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="6.4767%" y="133" width="0.5698%" height="15" fill="rgb(230,99,41)" fg:x="682" fg:w="60"/><text x="6.7697%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="7.0465%" y="133" width="0.5698%" height="15" fill="rgb(253,106,12)" fg:x="742" fg:w="60"/><text x="7.3395%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="7.6163%" y="133" width="0.4368%" height="15" fill="rgb(213,46,41)" fg:x="802" fg:w="46"/><text x="7.9093%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="8.0532%" y="133" width="0.5698%" height="15" fill="rgb(215,133,35)" fg:x="848" fg:w="60"/><text x="8.3462%" y="143.50"></text></g><g><title>parse_idl_header (1,106 instructions, 10.50%)</title><rect x="0.3894%" y="149" width="10.5033%" height="15" fill="rgb(213,28,5)" fg:x="41" fg:w="1106"/><text x="0.6823%" y="159.50">parse_idl_hea..</text></g><g><title>memset (38 instructions, 0.36%)</title><rect x="10.8927%" y="133" width="0.3609%" height="15" fill="rgb(215,77,49)" fg:x="1147" fg:w="38"/><text x="11.1857%" y="143.50"></text></g><g><title>idl_sub_buf_init (49 instructions, 0.47%)</title><rect x="10.8927%" y="149" width="0.4653%" height="15" fill="rgb(248,100,22)" fg:x="1147" fg:w="49"/><text x="11.1857%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="11.3580%" y="149" width="0.4368%" height="15" fill="rgb(208,67,9)" fg:x="1196" fg:w="46"/><text x="11.6510%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="11.7949%" y="149" width="0.5698%" height="15" fill="rgb(219,133,21)" fg:x="1242" fg:w="60"/><text x="12.0878%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="12.3647%" y="149" width="0.5698%" height="15" fill="rgb(246,46,29)" fg:x="1302" fg:w="60"/><text x="12.6576%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="12.9345%" y="149" width="0.4368%" height="15" fill="rgb(246,185,52)" fg:x="1362" fg:w="46"/><text x="13.2274%" y="159.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (15 instructions, 0.14%)</title><rect x="13.3713%" y="149" width="0.1425%" height="15" fill="rgb(252,136,11)" fg:x="1408" fg:w="15"/><text x="13.6643%" y="159.50"></text></g><g><title>leb128_decode (198 instructions, 1.88%)</title><rect x="13.5138%" y="133" width="1.8803%" height="15" fill="rgb(219,138,53)" fg:x="1423" fg:w="198"/><text x="13.8067%" y="143.50"></text></g><g><title>find_field (225 instructions, 2.14%)</title><rect x="13.5138%" y="149" width="2.1368%" height="15" fill="rgb(211,51,23)" fg:x="1423" fg:w="225"/><text x="13.8067%" y="159.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="15.6505%" y="149" width="0.5698%" height="15" fill="rgb(247,221,28)" fg:x="1648" fg:w="60"/><text x="15.9435%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="16.2203%" y="133" width="0.4368%" height="15" fill="rgb(251,222,45)" fg:x="1708" fg:w="46"/><text x="16.5133%" y="143.50"></text></g><g><title>utf8_validate (193 instructions, 1.83%)</title><rect x="16.6572%" y="133" width="1.8329%" height="15" fill="rgb(217,162,53)" fg:x="1754" fg:w="193"/><text x="16.9501%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="18.4900%" y="101" width="0.3134%" height="15" fill="rgb(229,93,14)" fg:x="1947" fg:w="33"/><text x="18.7830%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h0cc3b34fc06a6df0 (40 instructions, 0.38%)</title><rect x="18.4900%" y="117" width="0.3799%" height="15" fill="rgb(209,67,49)" fg:x="1947" fg:w="40"/><text x="18.7830%" y="127.50"></text></g><g><title>memcpy (110 instructions, 1.04%)</title><rect x="18.8699%" y="117" width="1.0446%" height="15" fill="rgb(213,87,29)" fg:x="1987" fg:w="110"/><text x="19.1629%" y="127.50"></text></g><g><title>text_of_ptr_size (160 instructions, 1.52%)</title><rect x="18.4900%" y="133" width="1.5195%" height="15" fill="rgb(205,151,52)" fg:x="1947" fg:w="160"/><text x="18.7830%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (435 instructions, 4.13%)</title><rect x="16.2203%" y="149" width="4.1311%" height="15" fill="rgb(253,215,39)" fg:x="1708" fg:w="435"/><text x="16.5133%" y="159.50">@de..</text></g><g><title>leb128_decode (198 instructions, 1.88%)</title><rect x="20.3514%" y="133" width="1.8803%" height="15" fill="rgb(221,220,41)" fg:x="2143" fg:w="198"/><text x="20.6443%" y="143.50"></text></g><g><title>find_field (225 instructions, 2.14%)</title><rect x="20.3514%" y="149" width="2.1368%" height="15" fill="rgb(218,133,21)" fg:x="2143" fg:w="225"/><text x="20.6443%" y="159.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.57%)</title><rect x="22.4881%" y="149" width="0.5698%" height="15" fill="rgb(221,193,43)" fg:x="2368" fg:w="60"/><text x="22.7811%" y="159.50"></text></g><g><title>skip_fields (4 instructions, 0.04%)</title><rect x="23.0579%" y="149" width="0.0380%" height="15" fill="rgb(240,128,52)" fg:x="2428" fg:w="4"/><text x="23.3509%" y="159.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="23.0959%" y="149" width="0.1425%" height="15" fill="rgb(253,114,12)" fg:x="2432" fg:w="15"/><text x="23.3889%" y="159.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="23.2384%" y="133" width="0.1425%" height="15" fill="rgb(215,223,47)" fg:x="2447" fg:w="15"/><text x="23.5313%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="23.3808%" y="133" width="0.1425%" height="15" fill="rgb(248,225,23)" fg:x="2462" fg:w="15"/><text x="23.6738%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="23.5233%" y="133" width="0.1425%" height="15" fill="rgb(250,108,0)" fg:x="2477" fg:w="15"/><text x="23.8162%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="23.6657%" y="133" width="0.1425%" height="15" fill="rgb(228,208,7)" fg:x="2492" fg:w="15"/><text x="23.9587%" y="143.50"></text></g><g><title>opt_project (18 instructions, 0.17%)</title><rect x="23.8082%" y="133" width="0.1709%" height="15" fill="rgb(244,45,10)" fg:x="2507" fg:w="18"/><text x="24.1011%" y="143.50"></text></g><g><title>B_add (24 instructions, 0.23%)</title><rect x="23.9791%" y="133" width="0.2279%" height="15" fill="rgb(207,125,25)" fg:x="2525" fg:w="24"/><text x="24.2721%" y="143.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="24.2070%" y="133" width="0.1425%" height="15" fill="rgb(210,195,18)" fg:x="2549" fg:w="15"/><text x="24.5000%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::h92f7e28353152162 (36 instructions, 0.34%)</title><rect x="24.3495%" y="133" width="0.3419%" height="15" fill="rgb(249,80,12)" fg:x="2564" fg:w="36"/><text x="24.6424%" y="143.50"></text></g><g><title>opt_project (18 instructions, 0.17%)</title><rect x="24.6914%" y="117" width="0.1709%" height="15" fill="rgb(221,65,9)" fg:x="2600" fg:w="18"/><text x="24.9843%" y="127.50"></text></g><g><title>opt_inject (18 instructions, 0.17%)</title><rect x="24.8623%" y="117" width="0.1709%" height="15" fill="rgb(235,49,36)" fg:x="2618" fg:w="18"/><text x="25.1553%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.14%)</title><rect x="25.0332%" y="101" width="0.1425%" height="15" fill="rgb(225,32,20)" fg:x="2636" fg:w="15"/><text x="25.3262%" y="111.50"></text></g><g><title>to_2_tuple (26 instructions, 0.25%)</title><rect x="25.0332%" y="117" width="0.2469%" height="15" fill="rgb(215,141,46)" fg:x="2636" fg:w="26"/><text x="25.3262%" y="127.50"></text></g><g><title>opt_project (18 instructions, 0.17%)</title><rect x="25.2802%" y="117" width="0.1709%" height="15" fill="rgb(250,160,47)" fg:x="2662" fg:w="18"/><text x="25.5731%" y="127.50"></text></g><g><title>anon-func-883.7 (131 instructions, 1.24%)</title><rect x="24.6914%" y="133" width="1.2441%" height="15" fill="rgb(216,222,40)" fg:x="2600" fg:w="131"/><text x="24.9843%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="25.9354%" y="133" width="0.1425%" height="15" fill="rgb(234,217,39)" fg:x="2731" fg:w="15"/><text x="26.2284%" y="143.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="26.0779%" y="117" width="0.1425%" height="15" fill="rgb(207,178,40)" fg:x="2746" fg:w="15"/><text x="26.3708%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="26.2203%" y="117" width="0.1425%" height="15" fill="rgb(221,136,13)" fg:x="2761" fg:w="15"/><text x="26.5133%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.15%)</title><rect x="26.3628%" y="117" width="0.1519%" height="15" fill="rgb(249,199,10)" fg:x="2776" fg:w="16"/><text x="26.6557%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.15%)</title><rect x="26.5147%" y="117" width="0.1519%" height="15" fill="rgb(249,222,13)" fg:x="2792" fg:w="16"/><text x="26.8077%" y="127.50"></text></g><g><title>motoko_rts::text::text_get_range::h83378183bec25b8f (14 instructions, 0.13%)</title><rect x="26.6667%" y="101" width="0.1330%" height="15" fill="rgb(244,185,38)" fg:x="2808" fg:w="14"/><text x="26.9596%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::h83378183bec25b8f (14 instructions, 0.13%)</title><rect x="26.7996%" y="101" width="0.1330%" height="15" fill="rgb(236,202,9)" fg:x="2822" fg:w="14"/><text x="27.0926%" y="111.50"></text></g><g><title>memcmp (131 instructions, 1.24%)</title><rect x="26.9326%" y="101" width="1.2441%" height="15" fill="rgb(250,229,37)" fg:x="2836" fg:w="131"/><text x="27.2255%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::h65e63f4c72d2101f (232 instructions, 2.20%)</title><rect x="26.6667%" y="117" width="2.2032%" height="15" fill="rgb(206,174,23)" fg:x="2808" fg:w="232"/><text x="26.9596%" y="127.50">m..</text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.15%)</title><rect x="28.8699%" y="117" width="0.1519%" height="15" fill="rgb(211,33,43)" fg:x="3040" fg:w="16"/><text x="29.1629%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="29.0218%" y="101" width="0.1425%" height="15" fill="rgb(245,58,50)" fg:x="3056" fg:w="15"/><text x="29.3148%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="29.1643%" y="101" width="0.1425%" height="15" fill="rgb(244,68,36)" fg:x="3071" fg:w="15"/><text x="29.4573%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.14%)</title><rect x="29.3067%" y="101" width="0.1425%" height="15" fill="rgb(232,229,15)" fg:x="3086" fg:w="15"/><text x="29.5997%" y="111.50"></text></g><g><title>B_eq (3 instructions, 0.03%)</title><rect x="29.4492%" y="101" width="0.0285%" height="15" fill="rgb(254,30,23)" fg:x="3101" fg:w="3"/><text x="29.7422%" y="111.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="29.4777%" y="101" width="0.1425%" height="15" fill="rgb(235,160,14)" fg:x="3104" fg:w="15"/><text x="29.7707%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="29.6201%" y="101" width="0.1425%" height="15" fill="rgb(212,155,44)" fg:x="3119" fg:w="15"/><text x="29.9131%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="29.7626%" y="101" width="0.1425%" height="15" fill="rgb(226,2,50)" fg:x="3134" fg:w="15"/><text x="30.0556%" y="111.50"></text></g><g><title>@new_async (176 instructions, 1.67%)</title><rect x="29.0218%" y="117" width="1.6714%" height="15" fill="rgb(234,177,6)" fg:x="3056" fg:w="176"/><text x="29.3148%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="30.6933%" y="117" width="0.1425%" height="15" fill="rgb(217,24,9)" fg:x="3232" fg:w="15"/><text x="30.9862%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="30.8357%" y="117" width="0.1425%" height="15" fill="rgb(220,13,46)" fg:x="3247" fg:w="15"/><text x="31.1287%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.14%)</title><rect x="30.9782%" y="117" width="0.1425%" height="15" fill="rgb(239,221,27)" fg:x="3262" fg:w="15"/><text x="31.2711%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_array::h92f7e28353152162 (36 instructions, 0.34%)</title><rect x="31.1206%" y="101" width="0.3419%" height="15" fill="rgb(222,198,25)" fg:x="3277" fg:w="36"/><text x="31.4136%" y="111.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h2a02f960a3e12eb4 (7 instructions, 0.07%)</title><rect x="31.4625%" y="101" width="0.0665%" height="15" fill="rgb(211,99,13)" fg:x="3313" fg:w="7"/><text x="31.7555%" y="111.50"></text></g><g><title>remember_continuation (3,699 instructions, 35.13%)</title><rect x="31.1206%" y="117" width="35.1282%" height="15" fill="rgb(232,111,31)" fg:x="3277" fg:w="3699"/><text x="31.4136%" y="127.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.15%)</title><rect x="66.2488%" y="117" width="0.1519%" height="15" fill="rgb(245,82,37)" fg:x="6976" fg:w="16"/><text x="66.5418%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.26%)</title><rect x="66.4008%" y="117" width="0.2564%" height="15" fill="rgb(227,149,46)" fg:x="6992" fg:w="27"/><text x="66.6937%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.28%)</title><rect x="66.6572%" y="117" width="0.2849%" height="15" fill="rgb(218,36,50)" fg:x="7019" fg:w="30"/><text x="66.9501%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="66.9421%" y="117" width="0.3134%" height="15" fill="rgb(226,80,48)" fg:x="7049" fg:w="33"/><text x="67.2350%" y="127.50"></text></g><g><title>memcpy (79 instructions, 0.75%)</title><rect x="67.2555%" y="117" width="0.7502%" height="15" fill="rgb(238,224,15)" fg:x="7082" fg:w="79"/><text x="67.5484%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="68.0057%" y="117" width="0.3134%" height="15" fill="rgb(241,136,10)" fg:x="7161" fg:w="33"/><text x="68.2987%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.15%)</title><rect x="68.3191%" y="117" width="0.1519%" height="15" fill="rgb(208,32,45)" fg:x="7194" fg:w="16"/><text x="68.6121%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.09%)</title><rect x="68.4710%" y="101" width="0.0855%" height="15" fill="rgb(207,135,9)" fg:x="7210" fg:w="9"/><text x="68.7640%" y="111.50"></text></g><g><title>memcpy (65 instructions, 0.62%)</title><rect x="68.5565%" y="85" width="0.6173%" height="15" fill="rgb(206,86,44)" fg:x="7219" fg:w="65"/><text x="68.8495%" y="95.50"></text></g><g><title>text_to_buf (86 instructions, 0.82%)</title><rect x="68.5565%" y="101" width="0.8167%" height="15" fill="rgb(245,177,15)" fg:x="7219" fg:w="86"/><text x="68.8495%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (122 instructions, 1.16%)</title><rect x="68.4710%" y="117" width="1.1586%" height="15" fill="rgb(206,64,50)" fg:x="7210" fg:w="122"/><text x="68.7640%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.28%)</title><rect x="69.6296%" y="117" width="0.2849%" height="15" fill="rgb(234,36,40)" fg:x="7332" fg:w="30"/><text x="69.9226%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.09%)</title><rect x="69.9145%" y="117" width="0.0855%" height="15" fill="rgb(213,64,8)" fg:x="7362" fg:w="9"/><text x="70.2075%" y="127.50"></text></g><g><title>B_eq (3 instructions, 0.03%)</title><rect x="70.0000%" y="101" width="0.0285%" height="15" fill="rgb(210,75,36)" fg:x="7371" fg:w="3"/><text x="70.2930%" y="111.50"></text></g><g><title>@add_cycles (13 instructions, 0.12%)</title><rect x="70.0000%" y="117" width="0.1235%" height="15" fill="rgb(229,88,21)" fg:x="7371" fg:w="13"/><text x="70.2930%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.14%)</title><rect x="70.1235%" y="101" width="0.1425%" height="15" fill="rgb(252,204,47)" fg:x="7384" fg:w="15"/><text x="70.4164%" y="111.50"></text></g><g><title>to_2_tuple (26 instructions, 0.25%)</title><rect x="70.1235%" y="117" width="0.2469%" height="15" fill="rgb(208,77,27)" fg:x="7384" fg:w="26"/><text x="70.4164%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="70.3704%" y="101" width="0.1425%" height="15" fill="rgb(221,76,26)" fg:x="7410" fg:w="15"/><text x="70.6633%" y="111.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="70.5128%" y="85" width="0.1425%" height="15" fill="rgb(225,139,18)" fg:x="7425" fg:w="15"/><text x="70.8058%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.14%)</title><rect x="70.6553%" y="85" width="0.1425%" height="15" fill="rgb(230,137,11)" fg:x="7440" fg:w="15"/><text x="70.9482%" y="95.50"></text></g><g><title>enqueue (84 instructions, 0.80%)</title><rect x="70.5128%" y="101" width="0.7977%" height="15" fill="rgb(212,28,1)" fg:x="7425" fg:w="84"/><text x="70.8058%" y="111.50"></text></g><g><title>$lambda.3 (118 instructions, 1.12%)</title><rect x="70.3704%" y="117" width="1.1206%" height="15" fill="rgb(248,164,17)" fg:x="7410" fg:w="118"/><text x="70.6633%" y="127.50"></text></g><g><title>$loop/1 (5,181 instructions, 49.20%)</title><rect x="26.0779%" y="133" width="49.2023%" height="15" fill="rgb(222,171,42)" fg:x="2746" fg:w="5181"/><text x="26.3708%" y="143.50">$loop/1</text></g><g><title>$lambda.1 (5,668 instructions, 53.83%)</title><rect x="23.2384%" y="149" width="53.8272%" height="15" fill="rgb(243,84,45)" fg:x="2447" fg:w="5668"/><text x="23.5313%" y="159.50">$lambda.1</text></g><g><title>schedule_copying_gc (45 instructions, 0.43%)</title><rect x="77.0655%" y="149" width="0.4274%" height="15" fill="rgb(252,49,23)" fg:x="8115" fg:w="45"/><text x="77.3585%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.12%)</title><rect x="77.4929%" y="149" width="0.1235%" height="15" fill="rgb(215,19,7)" fg:x="8160" fg:w="13"/><text x="77.7858%" y="159.50"></text></g><g><title>publish (9,134 instructions, 86.74%)</title><rect x="0.0000%" y="165" width="86.7426%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="9134"/><text x="0.2930%" y="175.50">publish</text></g><g><title>trans_state5 (8 instructions, 0.08%)</title><rect x="86.7426%" y="149" width="0.0760%" height="15" fill="rgb(210,199,37)" fg:x="9134" fg:w="8"/><text x="87.0356%" y="159.50"></text></g><g><title>recall_continuation (45 instructions, 0.43%)</title><rect x="86.8186%" y="149" width="0.4274%" height="15" fill="rgb(244,192,49)" fg:x="9142" fg:w="45"/><text x="87.1116%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="87.2460%" y="149" width="0.3134%" height="15" fill="rgb(226,211,11)" fg:x="9187" fg:w="33"/><text x="87.5389%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="87.5594%" y="117" width="0.4368%" height="15" fill="rgb(236,162,54)" fg:x="9220" fg:w="46"/><text x="87.8523%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="87.9962%" y="117" width="0.3134%" height="15" fill="rgb(220,229,9)" fg:x="9266" fg:w="33"/><text x="88.2892%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="88.3096%" y="117" width="0.4368%" height="15" fill="rgb(250,87,22)" fg:x="9299" fg:w="46"/><text x="88.6026%" y="127.50"></text></g><g><title>parse_idl_header (192 instructions, 1.82%)</title><rect x="87.5594%" y="133" width="1.8234%" height="15" fill="rgb(239,43,17)" fg:x="9220" fg:w="192"/><text x="87.8523%" y="143.50"></text></g><g><title>memset (3 instructions, 0.03%)</title><rect x="89.3827%" y="117" width="0.0285%" height="15" fill="rgb(231,177,25)" fg:x="9412" fg:w="3"/><text x="89.6757%" y="127.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.13%)</title><rect x="89.3827%" y="133" width="0.1330%" height="15" fill="rgb(219,179,1)" fg:x="9412" fg:w="14"/><text x="89.6757%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.44%)</title><rect x="89.5157%" y="133" width="0.4368%" height="15" fill="rgb(238,219,53)" fg:x="9426" fg:w="46"/><text x="89.8086%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (392 instructions, 3.72%)</title><rect x="87.5594%" y="149" width="3.7227%" height="15" fill="rgb(232,167,36)" fg:x="9220" fg:w="392"/><text x="87.8523%" y="159.50">@de..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.14%)</title><rect x="91.2821%" y="117" width="0.1425%" height="15" fill="rgb(244,19,51)" fg:x="9612" fg:w="15"/><text x="91.5750%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.14%)</title><rect x="91.4245%" y="101" width="0.1425%" height="15" fill="rgb(224,6,22)" fg:x="9627" fg:w="15"/><text x="91.7175%" y="111.50"></text></g><g><title>to_2_tuple (26 instructions, 0.25%)</title><rect x="91.4245%" y="117" width="0.2469%" height="15" fill="rgb(224,145,5)" fg:x="9627" fg:w="26"/><text x="91.7175%" y="127.50"></text></g><g><title>opt_inject (18 instructions, 0.17%)</title><rect x="91.6714%" y="117" width="0.1709%" height="15" fill="rgb(234,130,49)" fg:x="9653" fg:w="18"/><text x="91.9644%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="91.8424%" y="37" width="0.3134%" height="15" fill="rgb(254,6,2)" fg:x="9671" fg:w="33"/><text x="92.1353%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.58%)</title><rect x="92.1557%" y="37" width="0.5793%" height="15" fill="rgb(208,96,46)" fg:x="9704" fg:w="61"/><text x="92.4487%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hc1b2d7f75a6934cb (33 instructions, 0.31%)</title><rect x="92.7350%" y="37" width="0.3134%" height="15" fill="rgb(239,3,39)" fg:x="9765" fg:w="33"/><text x="93.0280%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.28%)</title><rect x="93.0484%" y="37" width="0.2849%" height="15" fill="rgb(233,210,1)" fg:x="9798" fg:w="30"/><text x="93.3414%" y="47.50"></text></g><g><title>anon_async (218 instructions, 2.07%)</title><rect x="91.8424%" y="53" width="2.0703%" height="15" fill="rgb(244,137,37)" fg:x="9671" fg:w="218"/><text x="92.1353%" y="63.50"></text></g><g><title>$loop/1 (246 instructions, 2.34%)</title><rect x="91.8424%" y="69" width="2.3362%" height="15" fill="rgb(240,136,2)" fg:x="9671" fg:w="246"/><text x="92.1353%" y="79.50">$..</text></g><g><title>$k/15 (262 instructions, 2.49%)</title><rect x="91.8424%" y="85" width="2.4881%" height="15" fill="rgb(239,18,37)" fg:x="9671" fg:w="262"/><text x="92.1353%" y="95.50">$..</text></g><g><title>$lambda.8 (268 instructions, 2.55%)</title><rect x="91.8424%" y="101" width="2.5451%" height="15" fill="rgb(218,185,22)" fg:x="9671" fg:w="268"/><text x="92.1353%" y="111.50">$..</text></g><g><title>anon-func-352.15 (290 instructions, 2.75%)</title><rect x="91.8424%" y="117" width="2.7540%" height="15" fill="rgb(225,218,4)" fg:x="9671" fg:w="290"/><text x="92.1353%" y="127.50">a..</text></g><g><title>fulfill (399 instructions, 3.79%)</title><rect x="91.2821%" y="133" width="3.7892%" height="15" fill="rgb(230,182,32)" fg:x="9612" fg:w="399"/><text x="91.5750%" y="143.50">ful..</text></g><g><title>$lambda.6 (406 instructions, 3.86%)</title><rect x="91.2821%" y="149" width="3.8557%" height="15" fill="rgb(242,56,43)" fg:x="9612" fg:w="406"/><text x="91.5750%" y="159.50">$la..</text></g><g><title>schedule_copying_gc (45 instructions, 0.43%)</title><rect x="95.1377%" y="149" width="0.4274%" height="15" fill="rgb(233,99,24)" fg:x="10018" fg:w="45"/><text x="95.4307%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.12%)</title><rect x="95.5651%" y="149" width="0.1235%" height="15" fill="rgb(234,209,42)" fg:x="10063" fg:w="13"/><text x="95.8580%" y="159.50"></text></g><g><title>all (10,530 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="10530"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,396 instructions, 13.26%)</title><rect x="86.7426%" y="165" width="13.2574%" height="15" fill="rgb(245,203,43)" fg:x="9134" fg:w="1396"/><text x="87.0356%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>