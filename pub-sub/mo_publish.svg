<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="22864"><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="0.0000%" y="149" width="0.0437%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="10"/><text x="0.2930%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="0.0437%" y="149" width="0.2449%" height="15" fill="rgb(249,21,11)" fg:x="10" fg:w="56"/><text x="0.3367%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="0.2887%" y="133" width="0.2187%" height="15" fill="rgb(222,201,40)" fg:x="66" fg:w="50"/><text x="0.5816%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="0.5073%" y="133" width="0.2449%" height="15" fill="rgb(235,61,29)" fg:x="116" fg:w="56"/><text x="0.8003%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="0.7523%" y="133" width="0.2799%" height="15" fill="rgb(219,207,3)" fg:x="172" fg:w="64"/><text x="1.0452%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="1.0322%" y="133" width="0.2187%" height="15" fill="rgb(222,56,46)" fg:x="236" fg:w="50"/><text x="1.3252%" y="143.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="1.2509%" y="133" width="0.9360%" height="15" fill="rgb(239,76,54)" fg:x="286" fg:w="214"/><text x="1.5438%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="2.1868%" y="133" width="0.2799%" height="15" fill="rgb(231,124,27)" fg:x="500" fg:w="64"/><text x="2.4798%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.05%)</title><rect x="2.4668%" y="133" width="0.0525%" height="15" fill="rgb(249,195,6)" fg:x="564" fg:w="12"/><text x="2.7597%" y="143.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="2.5192%" y="133" width="0.9360%" height="15" fill="rgb(237,174,47)" fg:x="576" fg:w="214"/><text x="2.8122%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.4552%" y="133" width="0.2799%" height="15" fill="rgb(206,201,31)" fg:x="790" fg:w="64"/><text x="3.7482%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.05%)</title><rect x="3.7351%" y="133" width="0.0525%" height="15" fill="rgb(231,57,52)" fg:x="854" fg:w="12"/><text x="4.0281%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.7876%" y="133" width="0.2799%" height="15" fill="rgb(248,177,22)" fg:x="866" fg:w="64"/><text x="4.0806%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="4.0675%" y="133" width="0.2187%" height="15" fill="rgb(215,211,37)" fg:x="930" fg:w="50"/><text x="4.3605%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="4.2862%" y="133" width="0.2799%" height="15" fill="rgb(241,128,51)" fg:x="980" fg:w="64"/><text x="4.5792%" y="143.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.05%)</title><rect x="4.5661%" y="133" width="0.0525%" height="15" fill="rgb(227,165,31)" fg:x="1044" fg:w="12"/><text x="4.8591%" y="143.50"></text></g><g><title>parse_idl_header (1,305 instructions, 5.71%)</title><rect x="0.2887%" y="149" width="5.7077%" height="15" fill="rgb(228,167,24)" fg:x="66" fg:w="1305"/><text x="0.5816%" y="159.50">parse_..</text></g><g><title>memset (43 instructions, 0.19%)</title><rect x="5.9963%" y="133" width="0.1881%" height="15" fill="rgb(228,143,12)" fg:x="1371" fg:w="43"/><text x="6.2893%" y="143.50"></text></g><g><title>idl_sub_buf_init (60 instructions, 0.26%)</title><rect x="5.9963%" y="149" width="0.2624%" height="15" fill="rgb(249,149,8)" fg:x="1371" fg:w="60"/><text x="6.2893%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="6.2587%" y="149" width="0.2187%" height="15" fill="rgb(243,35,44)" fg:x="1431" fg:w="50"/><text x="6.5517%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.4774%" y="149" width="0.2799%" height="15" fill="rgb(246,89,9)" fg:x="1481" fg:w="64"/><text x="6.7704%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.7573%" y="149" width="0.2799%" height="15" fill="rgb(233,213,13)" fg:x="1545" fg:w="64"/><text x="7.0503%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="7.0373%" y="149" width="0.2187%" height="15" fill="rgb(233,141,41)" fg:x="1609" fg:w="50"/><text x="7.3302%" y="159.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="7.2559%" y="133" width="0.9360%" height="15" fill="rgb(239,167,4)" fg:x="1659" fg:w="214"/><text x="7.5489%" y="143.50"></text></g><g><title>find_field (250 instructions, 1.09%)</title><rect x="7.2559%" y="149" width="1.0934%" height="15" fill="rgb(209,217,16)" fg:x="1659" fg:w="250"/><text x="7.5489%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="8.3494%" y="149" width="0.2799%" height="15" fill="rgb(219,88,35)" fg:x="1909" fg:w="64"/><text x="8.6423%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="8.6293%" y="133" width="0.2187%" height="15" fill="rgb(220,193,23)" fg:x="1973" fg:w="50"/><text x="8.9223%" y="143.50"></text></g><g><title>utf8_validate (220 instructions, 0.96%)</title><rect x="8.8480%" y="133" width="0.9622%" height="15" fill="rgb(230,90,52)" fg:x="2023" fg:w="220"/><text x="9.1409%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="9.8102%" y="101" width="0.2449%" height="15" fill="rgb(252,106,19)" fg:x="2243" fg:w="56"/><text x="10.1032%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hd6e8f4395e2210dc (69 instructions, 0.30%)</title><rect x="9.8102%" y="117" width="0.3018%" height="15" fill="rgb(206,74,20)" fg:x="2243" fg:w="69"/><text x="10.1032%" y="127.50"></text></g><g><title>memcpy (123 instructions, 0.54%)</title><rect x="10.1120%" y="117" width="0.5380%" height="15" fill="rgb(230,138,44)" fg:x="2312" fg:w="123"/><text x="10.4049%" y="127.50"></text></g><g><title>text_of_ptr_size (211 instructions, 0.92%)</title><rect x="9.8102%" y="133" width="0.9228%" height="15" fill="rgb(235,182,43)" fg:x="2243" fg:w="211"/><text x="10.1032%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (540 instructions, 2.36%)</title><rect x="8.6293%" y="149" width="2.3618%" height="15" fill="rgb(242,16,51)" fg:x="1973" fg:w="540"/><text x="8.9223%" y="159.50">@..</text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="10.9911%" y="133" width="0.9360%" height="15" fill="rgb(248,9,4)" fg:x="2513" fg:w="214"/><text x="11.2840%" y="143.50"></text></g><g><title>find_field (250 instructions, 1.09%)</title><rect x="10.9911%" y="149" width="1.0934%" height="15" fill="rgb(210,31,22)" fg:x="2513" fg:w="250"/><text x="11.2840%" y="159.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="12.0845%" y="149" width="0.2799%" height="15" fill="rgb(239,54,39)" fg:x="2763" fg:w="64"/><text x="12.3775%" y="159.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="12.3644%" y="149" width="0.0262%" height="15" fill="rgb(230,99,41)" fg:x="2827" fg:w="6"/><text x="12.6574%" y="159.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="12.3907%" y="133" width="0.1181%" height="15" fill="rgb(253,106,12)" fg:x="2833" fg:w="27"/><text x="12.6836%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::h70771860c5664387 (60 instructions, 0.26%)</title><rect x="12.5087%" y="133" width="0.2624%" height="15" fill="rgb(213,46,41)" fg:x="2860" fg:w="60"/><text x="12.8017%" y="143.50"></text></g><g><title>anon-func-883.7 (152 instructions, 0.66%)</title><rect x="12.7712%" y="133" width="0.6648%" height="15" fill="rgb(215,133,35)" fg:x="2920" fg:w="152"/><text x="13.0641%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="13.4360%" y="117" width="0.0744%" height="15" fill="rgb(213,28,5)" fg:x="3072" fg:w="17"/><text x="13.7289%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="13.5103%" y="117" width="0.0744%" height="15" fill="rgb(215,77,49)" fg:x="3089" fg:w="17"/><text x="13.8033%" y="127.50"></text></g><g><title>motoko_rts::text::text_get_range::h3713502fd252e3e1 (16 instructions, 0.07%)</title><rect x="13.5847%" y="101" width="0.0700%" height="15" fill="rgb(248,100,22)" fg:x="3106" fg:w="16"/><text x="13.8776%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::h3713502fd252e3e1 (16 instructions, 0.07%)</title><rect x="13.6547%" y="101" width="0.0700%" height="15" fill="rgb(208,67,9)" fg:x="3122" fg:w="16"/><text x="13.9476%" y="111.50"></text></g><g><title>memcmp (146 instructions, 0.64%)</title><rect x="13.7246%" y="101" width="0.6386%" height="15" fill="rgb(219,133,21)" fg:x="3138" fg:w="146"/><text x="14.0176%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::h372e07f28efa35b2 (271 instructions, 1.19%)</title><rect x="13.5847%" y="117" width="1.1853%" height="15" fill="rgb(246,46,29)" fg:x="3106" fg:w="271"/><text x="13.8776%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="14.7699%" y="117" width="0.0744%" height="15" fill="rgb(246,185,52)" fg:x="3377" fg:w="17"/><text x="15.0629%" y="127.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="14.8443%" y="101" width="0.0219%" height="15" fill="rgb(252,136,11)" fg:x="3394" fg:w="5"/><text x="15.1373%" y="111.50"></text></g><g><title>@new_async (194 instructions, 0.85%)</title><rect x="14.8443%" y="117" width="0.8485%" height="15" fill="rgb(219,138,53)" fg:x="3394" fg:w="194"/><text x="15.1373%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_array::h70771860c5664387 (60 instructions, 0.26%)</title><rect x="15.6928%" y="101" width="0.2624%" height="15" fill="rgb(211,51,23)" fg:x="3588" fg:w="60"/><text x="15.9858%" y="111.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h3e6b5954b9a0df32 (9 instructions, 0.04%)</title><rect x="15.9552%" y="101" width="0.0394%" height="15" fill="rgb(247,221,28)" fg:x="3648" fg:w="9"/><text x="16.2482%" y="111.50"></text></g><g><title>remember_continuation (3,993 instructions, 17.46%)</title><rect x="15.6928%" y="117" width="17.4641%" height="15" fill="rgb(251,222,45)" fg:x="3588" fg:w="3993"/><text x="15.9858%" y="127.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="33.1569%" y="117" width="0.0744%" height="15" fill="rgb(217,162,53)" fg:x="7581" fg:w="17"/><text x="33.4499%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.17%)</title><rect x="33.2313%" y="117" width="0.1749%" height="15" fill="rgb(229,93,14)" fg:x="7598" fg:w="40"/><text x="33.5242%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="33.4062%" y="117" width="0.1443%" height="15" fill="rgb(209,67,49)" fg:x="7638" fg:w="33"/><text x="33.6992%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="33.5506%" y="117" width="0.2449%" height="15" fill="rgb(213,87,29)" fg:x="7671" fg:w="56"/><text x="33.8435%" y="127.50"></text></g><g><title>memcpy (88 instructions, 0.38%)</title><rect x="33.7955%" y="117" width="0.3849%" height="15" fill="rgb(205,151,52)" fg:x="7727" fg:w="88"/><text x="34.0885%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="34.1804%" y="117" width="0.2449%" height="15" fill="rgb(253,215,39)" fg:x="7815" fg:w="56"/><text x="34.4733%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="34.4253%" y="117" width="0.0744%" height="15" fill="rgb(221,220,41)" fg:x="7871" fg:w="17"/><text x="34.7183%" y="127.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="34.4997%" y="101" width="0.0481%" height="15" fill="rgb(218,133,21)" fg:x="7888" fg:w="11"/><text x="34.7926%" y="111.50"></text></g><g><title>memcpy (74 instructions, 0.32%)</title><rect x="34.5478%" y="85" width="0.3237%" height="15" fill="rgb(221,193,43)" fg:x="7899" fg:w="74"/><text x="34.8407%" y="95.50"></text></g><g><title>text_to_buf (102 instructions, 0.45%)</title><rect x="34.5478%" y="101" width="0.4461%" height="15" fill="rgb(240,128,52)" fg:x="7899" fg:w="102"/><text x="34.8407%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (160 instructions, 0.70%)</title><rect x="34.4997%" y="117" width="0.6998%" height="15" fill="rgb(253,114,12)" fg:x="7888" fg:w="160"/><text x="34.7926%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="35.1994%" y="117" width="0.1443%" height="15" fill="rgb(215,223,47)" fg:x="8048" fg:w="33"/><text x="35.4924%" y="127.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="35.3438%" y="117" width="0.0481%" height="15" fill="rgb(248,225,23)" fg:x="8081" fg:w="11"/><text x="35.6367%" y="127.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="35.3919%" y="101" width="0.0219%" height="15" fill="rgb(250,108,0)" fg:x="8092" fg:w="5"/><text x="35.6849%" y="111.50"></text></g><g><title>@add_cycles (21 instructions, 0.09%)</title><rect x="35.3919%" y="117" width="0.0918%" height="15" fill="rgb(228,208,7)" fg:x="8092" fg:w="21"/><text x="35.6849%" y="127.50"></text></g><g><title>enqueue (90 instructions, 0.39%)</title><rect x="35.4837%" y="101" width="0.3936%" height="15" fill="rgb(244,45,10)" fg:x="8113" fg:w="90"/><text x="35.7767%" y="111.50"></text></g><g><title>$lambda.3 (136 instructions, 0.59%)</title><rect x="35.4837%" y="117" width="0.5948%" height="15" fill="rgb(207,125,25)" fg:x="8113" fg:w="136"/><text x="35.7767%" y="127.50"></text></g><g><title>$loop/1 (13,324 instructions, 58.28%)</title><rect x="13.4360%" y="133" width="58.2750%" height="15" fill="rgb(210,195,18)" fg:x="3072" fg:w="13324"/><text x="13.7289%" y="143.50">$loop/1</text></g><g><title>$lambda.2 (13,910 instructions, 60.84%)</title><rect x="12.3907%" y="149" width="60.8380%" height="15" fill="rgb(249,80,12)" fg:x="2833" fg:w="13910"/><text x="12.6836%" y="159.50">$lambda.2</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="73.2287%" y="149" width="0.4724%" height="15" fill="rgb(221,65,9)" fg:x="16743" fg:w="108"/><text x="73.5216%" y="159.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="73.7010%" y="149" width="0.0700%" height="15" fill="rgb(235,49,36)" fg:x="16851" fg:w="16"/><text x="73.9940%" y="159.50"></text></g><g><title>publish (19,070 instructions, 83.41%)</title><rect x="0.0000%" y="165" width="83.4062%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="19070"/><text x="0.2930%" y="175.50">publish</text></g><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="83.4062%" y="149" width="0.0437%" height="15" fill="rgb(215,141,46)" fg:x="19070" fg:w="10"/><text x="83.6992%" y="159.50"></text></g><g><title>recall_continuation (49 instructions, 0.21%)</title><rect x="83.4500%" y="149" width="0.2143%" height="15" fill="rgb(250,160,47)" fg:x="19080" fg:w="49"/><text x="83.7429%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="83.6643%" y="149" width="0.2449%" height="15" fill="rgb(216,222,40)" fg:x="19129" fg:w="56"/><text x="83.9572%" y="159.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="83.9092%" y="117" width="0.2187%" height="15" fill="rgb(234,217,39)" fg:x="19185" fg:w="50"/><text x="84.2022%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="84.1279%" y="117" width="0.2449%" height="15" fill="rgb(207,178,40)" fg:x="19235" fg:w="56"/><text x="84.4209%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="84.3728%" y="117" width="0.2187%" height="15" fill="rgb(221,136,13)" fg:x="19291" fg:w="50"/><text x="84.6658%" y="127.50"></text></g><g><title>parse_idl_header (245 instructions, 1.07%)</title><rect x="83.9092%" y="133" width="1.0716%" height="15" fill="rgb(249,199,10)" fg:x="19185" fg:w="245"/><text x="84.2022%" y="143.50"></text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="84.9808%" y="117" width="0.0262%" height="15" fill="rgb(249,222,13)" fg:x="19430" fg:w="6"/><text x="85.2737%" y="127.50"></text></g><g><title>idl_sub_buf_init (23 instructions, 0.10%)</title><rect x="84.9808%" y="133" width="0.1006%" height="15" fill="rgb(244,185,38)" fg:x="19430" fg:w="23"/><text x="85.2737%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="85.0814%" y="133" width="0.2187%" height="15" fill="rgb(236,202,9)" fg:x="19453" fg:w="50"/><text x="85.3743%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 2.23%)</title><rect x="83.9092%" y="149" width="2.2350%" height="15" fill="rgb(250,229,37)" fg:x="19185" fg:w="511"/><text x="84.2022%" y="159.50">@..</text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="86.1485%" y="37" width="0.2449%" height="15" fill="rgb(206,174,23)" fg:x="19697" fg:w="56"/><text x="86.4415%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.31%)</title><rect x="86.3935%" y="37" width="0.3062%" height="15" fill="rgb(211,33,43)" fg:x="19753" fg:w="70"/><text x="86.6864%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.24%)</title><rect x="86.6996%" y="37" width="0.2449%" height="15" fill="rgb(245,58,50)" fg:x="19823" fg:w="56"/><text x="86.9926%" y="47.50"></text></g><g><title>anon_async (1,285 instructions, 5.62%)</title><rect x="86.1485%" y="53" width="5.6202%" height="15" fill="rgb(244,68,36)" fg:x="19697" fg:w="1285"/><text x="86.4415%" y="63.50">anon_a..</text></g><g><title>$loop/1 (1,324 instructions, 5.79%)</title><rect x="86.1485%" y="69" width="5.7908%" height="15" fill="rgb(232,229,15)" fg:x="19697" fg:w="1324"/><text x="86.4415%" y="79.50">$loop/1</text></g><g><title>$k/15 (1,350 instructions, 5.90%)</title><rect x="86.1485%" y="85" width="5.9045%" height="15" fill="rgb(254,30,23)" fg:x="19697" fg:w="1350"/><text x="86.4415%" y="95.50">$k/15</text></g><g><title>$lambda.20 (1,366 instructions, 5.97%)</title><rect x="86.1485%" y="101" width="5.9745%" height="15" fill="rgb(235,160,14)" fg:x="19697" fg:w="1366"/><text x="86.4415%" y="111.50">$lambd..</text></g><g><title>anon-func-352.15 (1,408 instructions, 6.16%)</title><rect x="86.1442%" y="117" width="6.1582%" height="15" fill="rgb(212,155,44)" fg:x="19696" fg:w="1408"/><text x="86.4371%" y="127.50">anon-f..</text></g><g><title>fulfill (1,531 instructions, 6.70%)</title><rect x="86.1442%" y="133" width="6.6961%" height="15" fill="rgb(226,2,50)" fg:x="19696" fg:w="1531"/><text x="86.4371%" y="143.50">fulfill</text></g><g><title>$lambda.18 (1,548 instructions, 6.77%)</title><rect x="86.1442%" y="149" width="6.7705%" height="15" fill="rgb(234,177,6)" fg:x="19696" fg:w="1548"/><text x="86.4371%" y="159.50">$lambda..</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="92.9146%" y="149" width="0.4724%" height="15" fill="rgb(217,24,9)" fg:x="21244" fg:w="108"/><text x="93.2076%" y="159.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="93.3870%" y="149" width="0.0700%" height="15" fill="rgb(220,13,46)" fg:x="21352" fg:w="16"/><text x="93.6800%" y="159.50"></text></g><g><title>all (22,864 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="22864"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (3,794 instructions, 16.59%)</title><rect x="83.4062%" y="165" width="16.5938%" height="15" fill="rgb(222,198,25)" fg:x="19070" fg:w="3794"/><text x="83.6992%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>