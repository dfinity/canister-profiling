<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="214" onload="init(evt)" viewBox="0 0 1024 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="197.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="197.00"> </text><svg id="frames" x="10" width="1004" total_samples="22854"><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="0.0000%" y="133" width="0.0438%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="10"/><text x="0.2930%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="0.0438%" y="133" width="0.2450%" height="15" fill="rgb(249,21,11)" fg:x="10" fg:w="56"/><text x="0.3367%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="0.2888%" y="117" width="0.2188%" height="15" fill="rgb(222,201,40)" fg:x="66" fg:w="50"/><text x="0.5818%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="0.5076%" y="117" width="0.2450%" height="15" fill="rgb(235,61,29)" fg:x="116" fg:w="56"/><text x="0.8005%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="0.7526%" y="117" width="0.2800%" height="15" fill="rgb(219,207,3)" fg:x="172" fg:w="64"/><text x="1.0456%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="1.0326%" y="117" width="0.2188%" height="15" fill="rgb(222,56,46)" fg:x="236" fg:w="50"/><text x="1.3256%" y="127.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="1.2514%" y="117" width="0.9364%" height="15" fill="rgb(239,76,54)" fg:x="286" fg:w="214"/><text x="1.5444%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="2.1878%" y="117" width="0.2800%" height="15" fill="rgb(231,124,27)" fg:x="500" fg:w="64"/><text x="2.4808%" y="127.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.05%)</title><rect x="2.4678%" y="117" width="0.0525%" height="15" fill="rgb(249,195,6)" fg:x="564" fg:w="12"/><text x="2.7608%" y="127.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="2.5203%" y="117" width="0.9364%" height="15" fill="rgb(237,174,47)" fg:x="576" fg:w="214"/><text x="2.8133%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.4567%" y="117" width="0.2800%" height="15" fill="rgb(206,201,31)" fg:x="790" fg:w="64"/><text x="3.7497%" y="127.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.05%)</title><rect x="3.7368%" y="117" width="0.0525%" height="15" fill="rgb(231,57,52)" fg:x="854" fg:w="12"/><text x="4.0297%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="3.7893%" y="117" width="0.2800%" height="15" fill="rgb(248,177,22)" fg:x="866" fg:w="64"/><text x="4.0822%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="4.0693%" y="117" width="0.2188%" height="15" fill="rgb(215,211,37)" fg:x="930" fg:w="50"/><text x="4.3623%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="4.2881%" y="117" width="0.2800%" height="15" fill="rgb(241,128,51)" fg:x="980" fg:w="64"/><text x="4.5811%" y="127.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.05%)</title><rect x="4.5681%" y="117" width="0.0525%" height="15" fill="rgb(227,165,31)" fg:x="1044" fg:w="12"/><text x="4.8611%" y="127.50"></text></g><g><title>parse_idl_header (1,305 instructions, 5.71%)</title><rect x="0.2888%" y="133" width="5.7102%" height="15" fill="rgb(228,167,24)" fg:x="66" fg:w="1305"/><text x="0.5818%" y="143.50">parse_..</text></g><g><title>memset (43 instructions, 0.19%)</title><rect x="5.9989%" y="117" width="0.1882%" height="15" fill="rgb(228,143,12)" fg:x="1371" fg:w="43"/><text x="6.2919%" y="127.50"></text></g><g><title>idl_sub_buf_init (60 instructions, 0.26%)</title><rect x="5.9989%" y="133" width="0.2625%" height="15" fill="rgb(249,149,8)" fg:x="1371" fg:w="60"/><text x="6.2919%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="6.2615%" y="133" width="0.2188%" height="15" fill="rgb(243,35,44)" fg:x="1431" fg:w="50"/><text x="6.5545%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.4803%" y="133" width="0.2800%" height="15" fill="rgb(246,89,9)" fg:x="1481" fg:w="64"/><text x="6.7732%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="6.7603%" y="133" width="0.2800%" height="15" fill="rgb(233,213,13)" fg:x="1545" fg:w="64"/><text x="7.0533%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="7.0403%" y="133" width="0.2188%" height="15" fill="rgb(233,141,41)" fg:x="1609" fg:w="50"/><text x="7.3333%" y="143.50"></text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="7.2591%" y="117" width="0.9364%" height="15" fill="rgb(239,167,4)" fg:x="1659" fg:w="214"/><text x="7.5521%" y="127.50"></text></g><g><title>find_field (250 instructions, 1.09%)</title><rect x="7.2591%" y="133" width="1.0939%" height="15" fill="rgb(209,217,16)" fg:x="1659" fg:w="250"/><text x="7.5521%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="8.3530%" y="133" width="0.2800%" height="15" fill="rgb(219,88,35)" fg:x="1909" fg:w="64"/><text x="8.6460%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="8.6331%" y="117" width="0.2188%" height="15" fill="rgb(220,193,23)" fg:x="1973" fg:w="50"/><text x="8.9260%" y="127.50"></text></g><g><title>utf8_validate (220 instructions, 0.96%)</title><rect x="8.8518%" y="117" width="0.9626%" height="15" fill="rgb(230,90,52)" fg:x="2023" fg:w="220"/><text x="9.1448%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="9.8145%" y="85" width="0.2450%" height="15" fill="rgb(252,106,19)" fg:x="2243" fg:w="56"/><text x="10.1074%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.30%)</title><rect x="9.8145%" y="101" width="0.3019%" height="15" fill="rgb(206,74,20)" fg:x="2243" fg:w="69"/><text x="10.1074%" y="111.50"></text></g><g><title>memcpy (123 instructions, 0.54%)</title><rect x="10.1164%" y="101" width="0.5382%" height="15" fill="rgb(230,138,44)" fg:x="2312" fg:w="123"/><text x="10.4094%" y="111.50"></text></g><g><title>text_of_ptr_size (211 instructions, 0.92%)</title><rect x="9.8145%" y="117" width="0.9233%" height="15" fill="rgb(235,182,43)" fg:x="2243" fg:w="211"/><text x="10.1074%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (540 instructions, 2.36%)</title><rect x="8.6331%" y="133" width="2.3628%" height="15" fill="rgb(242,16,51)" fg:x="1973" fg:w="540"/><text x="8.9260%" y="143.50">@..</text></g><g><title>leb128_decode (214 instructions, 0.94%)</title><rect x="10.9959%" y="117" width="0.9364%" height="15" fill="rgb(248,9,4)" fg:x="2513" fg:w="214"/><text x="11.2889%" y="127.50"></text></g><g><title>find_field (250 instructions, 1.09%)</title><rect x="10.9959%" y="133" width="1.0939%" height="15" fill="rgb(210,31,22)" fg:x="2513" fg:w="250"/><text x="11.2889%" y="143.50"></text></g><g><title>sleb128_decode (64 instructions, 0.28%)</title><rect x="12.0898%" y="133" width="0.2800%" height="15" fill="rgb(239,54,39)" fg:x="2763" fg:w="64"/><text x="12.3828%" y="143.50"></text></g><g><title>int_from_i32 (13 instructions, 0.06%)</title><rect x="12.3698%" y="133" width="0.0569%" height="15" fill="rgb(230,99,41)" fg:x="2827" fg:w="13"/><text x="12.6628%" y="143.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="12.4267%" y="133" width="0.0263%" height="15" fill="rgb(253,106,12)" fg:x="2840" fg:w="6"/><text x="12.7197%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="12.4530%" y="117" width="0.1181%" height="15" fill="rgb(213,46,41)" fg:x="2846" fg:w="27"/><text x="12.7459%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_array::h817c463cc2b856af (60 instructions, 0.26%)</title><rect x="12.5711%" y="117" width="0.2625%" height="15" fill="rgb(215,133,35)" fg:x="2873" fg:w="60"/><text x="12.8641%" y="127.50"></text></g><g><title>@anon-func-885.7 (152 instructions, 0.67%)</title><rect x="12.8336%" y="117" width="0.6651%" height="15" fill="rgb(213,28,5)" fg:x="2933" fg:w="152"/><text x="13.1266%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="13.4987%" y="101" width="0.0744%" height="15" fill="rgb(215,77,49)" fg:x="3085" fg:w="17"/><text x="13.7917%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="13.5731%" y="101" width="0.0744%" height="15" fill="rgb(248,100,22)" fg:x="3102" fg:w="17"/><text x="13.8661%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::h98629e0076bd1984 (16 instructions, 0.07%)</title><rect x="13.6475%" y="85" width="0.0700%" height="15" fill="rgb(208,67,9)" fg:x="3119" fg:w="16"/><text x="13.9405%" y="95.50"></text></g><g><title>motoko_rts::text::text_get_range::h98629e0076bd1984 (16 instructions, 0.07%)</title><rect x="13.7175%" y="85" width="0.0700%" height="15" fill="rgb(219,133,21)" fg:x="3135" fg:w="16"/><text x="14.0105%" y="95.50"></text></g><g><title>memcmp (146 instructions, 0.64%)</title><rect x="13.7875%" y="85" width="0.6388%" height="15" fill="rgb(246,46,29)" fg:x="3151" fg:w="146"/><text x="14.0805%" y="95.50"></text></g><g><title>motoko_rts::text::text_compare_range::h2a5c77275214d54c (271 instructions, 1.19%)</title><rect x="13.6475%" y="101" width="1.1858%" height="15" fill="rgb(246,185,52)" fg:x="3119" fg:w="271"/><text x="13.9405%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="14.8333%" y="101" width="0.0744%" height="15" fill="rgb(252,136,11)" fg:x="3390" fg:w="17"/><text x="15.1263%" y="111.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="14.9077%" y="85" width="0.0219%" height="15" fill="rgb(219,138,53)" fg:x="3407" fg:w="5"/><text x="15.2006%" y="95.50"></text></g><g><title>@new_async (194 instructions, 0.85%)</title><rect x="14.9077%" y="101" width="0.8489%" height="15" fill="rgb(211,51,23)" fg:x="3407" fg:w="194"/><text x="15.2006%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_array::h817c463cc2b856af (60 instructions, 0.26%)</title><rect x="15.7565%" y="85" width="0.2625%" height="15" fill="rgb(247,221,28)" fg:x="3601" fg:w="60"/><text x="16.0495%" y="95.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h56833a827c874225 (9 instructions, 0.04%)</title><rect x="16.0191%" y="85" width="0.0394%" height="15" fill="rgb(251,222,45)" fg:x="3661" fg:w="9"/><text x="16.3120%" y="95.50"></text></g><g><title>remember_continuation (3,993 instructions, 17.47%)</title><rect x="15.7565%" y="101" width="17.4718%" height="15" fill="rgb(217,162,53)" fg:x="3601" fg:w="3993"/><text x="16.0495%" y="111.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="33.2283%" y="101" width="0.0744%" height="15" fill="rgb(229,93,14)" fg:x="7594" fg:w="17"/><text x="33.5213%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.18%)</title><rect x="33.3027%" y="101" width="0.1750%" height="15" fill="rgb(209,67,49)" fg:x="7611" fg:w="40"/><text x="33.5957%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="33.4777%" y="101" width="0.1444%" height="15" fill="rgb(213,87,29)" fg:x="7651" fg:w="33"/><text x="33.7707%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="33.6221%" y="101" width="0.2450%" height="15" fill="rgb(205,151,52)" fg:x="7684" fg:w="56"/><text x="33.9151%" y="111.50"></text></g><g><title>memcpy (88 instructions, 0.39%)</title><rect x="33.8672%" y="101" width="0.3851%" height="15" fill="rgb(253,215,39)" fg:x="7740" fg:w="88"/><text x="34.1601%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="34.2522%" y="101" width="0.2450%" height="15" fill="rgb(221,220,41)" fg:x="7828" fg:w="56"/><text x="34.5452%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="34.4972%" y="101" width="0.0744%" height="15" fill="rgb(218,133,21)" fg:x="7884" fg:w="17"/><text x="34.7902%" y="111.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="34.5716%" y="101" width="0.0481%" height="15" fill="rgb(221,193,43)" fg:x="7901" fg:w="11"/><text x="34.8646%" y="111.50"></text></g><g><title>memcpy (74 instructions, 0.32%)</title><rect x="34.6198%" y="85" width="0.3238%" height="15" fill="rgb(240,128,52)" fg:x="7912" fg:w="74"/><text x="34.9127%" y="95.50"></text></g><g><title>text_to_buf (102 instructions, 0.45%)</title><rect x="34.6198%" y="101" width="0.4463%" height="15" fill="rgb(253,114,12)" fg:x="7912" fg:w="102"/><text x="34.9127%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.14%)</title><rect x="35.0661%" y="101" width="0.1444%" height="15" fill="rgb(215,223,47)" fg:x="8014" fg:w="33"/><text x="35.3590%" y="111.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="35.2105%" y="101" width="0.0481%" height="15" fill="rgb(248,225,23)" fg:x="8047" fg:w="11"/><text x="35.5034%" y="111.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="35.2586%" y="85" width="0.0219%" height="15" fill="rgb(250,108,0)" fg:x="8058" fg:w="5"/><text x="35.5516%" y="95.50"></text></g><g><title>@add_cycles (21 instructions, 0.09%)</title><rect x="35.2586%" y="101" width="0.0919%" height="15" fill="rgb(228,208,7)" fg:x="8058" fg:w="21"/><text x="35.5516%" y="111.50"></text></g><g><title>enqueue (90 instructions, 0.39%)</title><rect x="35.3505%" y="85" width="0.3938%" height="15" fill="rgb(244,45,10)" fg:x="8079" fg:w="90"/><text x="35.6435%" y="95.50"></text></g><g><title>$lambda.3 (136 instructions, 0.60%)</title><rect x="35.3505%" y="101" width="0.5951%" height="15" fill="rgb(207,125,25)" fg:x="8079" fg:w="136"/><text x="35.6435%" y="111.50"></text></g><g><title>$loop/1 (13,323 instructions, 58.30%)</title><rect x="13.4987%" y="117" width="58.2961%" height="15" fill="rgb(210,195,18)" fg:x="3085" fg:w="13323"/><text x="13.7917%" y="127.50">$loop/1</text></g><g><title>$lambda.1 (13,917 instructions, 60.90%)</title><rect x="12.4530%" y="133" width="60.8952%" height="15" fill="rgb(249,80,12)" fg:x="2846" fg:w="13917"/><text x="12.7459%" y="143.50">$lambda.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="73.3482%" y="133" width="0.4726%" height="15" fill="rgb(221,65,9)" fg:x="16763" fg:w="108"/><text x="73.6412%" y="143.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="73.8208%" y="133" width="0.0700%" height="15" fill="rgb(235,49,36)" fg:x="16871" fg:w="16"/><text x="74.1137%" y="143.50"></text></g><g><title>publish (19,093 instructions, 83.54%)</title><rect x="0.0000%" y="149" width="83.5434%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="19093"/><text x="0.2930%" y="159.50">publish</text></g><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="83.5434%" y="133" width="0.0438%" height="15" fill="rgb(215,141,46)" fg:x="19093" fg:w="10"/><text x="83.8363%" y="143.50"></text></g><g><title>recall_continuation (49 instructions, 0.21%)</title><rect x="83.5871%" y="133" width="0.2144%" height="15" fill="rgb(250,160,47)" fg:x="19103" fg:w="49"/><text x="83.8801%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="83.8015%" y="133" width="0.2450%" height="15" fill="rgb(216,222,40)" fg:x="19152" fg:w="56"/><text x="84.0945%" y="143.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="84.0466%" y="101" width="0.2188%" height="15" fill="rgb(234,217,39)" fg:x="19208" fg:w="50"/><text x="84.3395%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="84.2653%" y="101" width="0.2450%" height="15" fill="rgb(207,178,40)" fg:x="19258" fg:w="56"/><text x="84.5583%" y="111.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="84.5104%" y="101" width="0.2188%" height="15" fill="rgb(221,136,13)" fg:x="19314" fg:w="50"/><text x="84.8033%" y="111.50"></text></g><g><title>parse_idl_header (245 instructions, 1.07%)</title><rect x="84.0466%" y="117" width="1.0720%" height="15" fill="rgb(249,199,10)" fg:x="19208" fg:w="245"/><text x="84.3395%" y="127.50"></text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="85.1186%" y="101" width="0.0263%" height="15" fill="rgb(249,222,13)" fg:x="19453" fg:w="6"/><text x="85.4115%" y="111.50"></text></g><g><title>idl_sub_buf_init (23 instructions, 0.10%)</title><rect x="85.1186%" y="117" width="0.1006%" height="15" fill="rgb(244,185,38)" fg:x="19453" fg:w="23"/><text x="85.4115%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.22%)</title><rect x="85.2192%" y="117" width="0.2188%" height="15" fill="rgb(236,202,9)" fg:x="19476" fg:w="50"/><text x="85.5122%" y="127.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 2.24%)</title><rect x="84.0466%" y="133" width="2.2359%" height="15" fill="rgb(250,229,37)" fg:x="19208" fg:w="511"/><text x="84.3395%" y="143.50">@..</text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="86.2869%" y="37" width="0.2450%" height="15" fill="rgb(206,174,23)" fg:x="19720" fg:w="56"/><text x="86.5798%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.31%)</title><rect x="86.5319%" y="37" width="0.3063%" height="15" fill="rgb(211,33,43)" fg:x="19776" fg:w="70"/><text x="86.8249%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.25%)</title><rect x="86.8382%" y="37" width="0.2450%" height="15" fill="rgb(245,58,50)" fg:x="19846" fg:w="56"/><text x="87.1312%" y="47.50"></text></g><g><title>anon_async (1,285 instructions, 5.62%)</title><rect x="86.2869%" y="53" width="5.6226%" height="15" fill="rgb(244,68,36)" fg:x="19720" fg:w="1285"/><text x="86.5798%" y="63.50">anon_a..</text></g><g><title>$k/14 (1,317 instructions, 5.76%)</title><rect x="86.2869%" y="69" width="5.7627%" height="15" fill="rgb(232,229,15)" fg:x="19720" fg:w="1317"/><text x="86.5798%" y="79.50">$k/14</text></g><g><title>$lambda.18 (1,333 instructions, 5.83%)</title><rect x="86.2869%" y="85" width="5.8327%" height="15" fill="rgb(254,30,23)" fg:x="19720" fg:w="1333"/><text x="86.5798%" y="95.50">$lambd..</text></g><g><title>@anon-func-352.15 (1,375 instructions, 6.02%)</title><rect x="86.2825%" y="101" width="6.0165%" height="15" fill="rgb(235,160,14)" fg:x="19719" fg:w="1375"/><text x="86.5755%" y="111.50">@anon-..</text></g><g><title>fulfill (1,498 instructions, 6.55%)</title><rect x="86.2825%" y="117" width="6.5547%" height="15" fill="rgb(212,155,44)" fg:x="19719" fg:w="1498"/><text x="86.5755%" y="127.50">fulfill</text></g><g><title>$lambda.16 (1,515 instructions, 6.63%)</title><rect x="86.2825%" y="133" width="6.6290%" height="15" fill="rgb(226,2,50)" fg:x="19719" fg:w="1515"/><text x="86.5755%" y="143.50">$lambda..</text></g><g><title>schedule_copying_gc (108 instructions, 0.47%)</title><rect x="92.9115%" y="133" width="0.4726%" height="15" fill="rgb(234,177,6)" fg:x="21234" fg:w="108"/><text x="93.2045%" y="143.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="93.3841%" y="133" width="0.0700%" height="15" fill="rgb(217,24,9)" fg:x="21342" fg:w="16"/><text x="93.6771%" y="143.50"></text></g><g><title>all (22,854 instructions, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="22854"/><text x="0.2930%" y="175.50"></text></g><g><title>@callback&lt;u&gt; (3,761 instructions, 16.46%)</title><rect x="83.5434%" y="149" width="16.4566%" height="15" fill="rgb(239,221,27)" fg:x="19093" fg:w="3761"/><text x="83.8363%" y="159.50">@callback&lt;u&gt;</text></g></svg></svg>