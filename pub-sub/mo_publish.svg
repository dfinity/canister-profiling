<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="12539"><g><title>trans_state5 (9 instructions, 0.07%)</title><rect x="0.0000%" y="181" width="0.0718%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="9"/><text x="0.2930%" y="191.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="0.0718%" y="181" width="0.0239%" height="15" fill="rgb(208,77,27)" fg:x="9" fg:w="3"/><text x="0.3647%" y="191.50"></text></g><g><title>@reset_refund (3 instructions, 0.02%)</title><rect x="0.0957%" y="181" width="0.0239%" height="15" fill="rgb(221,76,26)" fg:x="12" fg:w="3"/><text x="0.3887%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="0.1196%" y="165" width="0.2712%" height="15" fill="rgb(225,139,18)" fg:x="15" fg:w="34"/><text x="0.4126%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="0.1196%" y="181" width="0.2871%" height="15" fill="rgb(230,137,11)" fg:x="15" fg:w="36"/><text x="0.4126%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="0.4067%" y="149" width="0.4067%" height="15" fill="rgb(212,28,1)" fg:x="51" fg:w="51"/><text x="0.6997%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="0.8135%" y="149" width="0.2712%" height="15" fill="rgb(248,164,17)" fg:x="102" fg:w="34"/><text x="1.1064%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="1.0846%" y="149" width="0.5423%" height="15" fill="rgb(222,171,42)" fg:x="136" fg:w="68"/><text x="1.3776%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="1.6269%" y="133" width="0.4067%" height="15" fill="rgb(243,84,45)" fg:x="204" fg:w="51"/><text x="1.9199%" y="143.50"></text></g><g><title>leb128_decode (213 instructions, 1.70%)</title><rect x="2.0337%" y="133" width="1.6987%" height="15" fill="rgb(252,49,23)" fg:x="255" fg:w="213"/><text x="2.3266%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="3.7324%" y="133" width="0.5423%" height="15" fill="rgb(215,19,7)" fg:x="468" fg:w="68"/><text x="4.0253%" y="143.50"></text></g><g><title>leb128_decode (213 instructions, 1.70%)</title><rect x="4.2747%" y="133" width="1.6987%" height="15" fill="rgb(238,81,41)" fg:x="536" fg:w="213"/><text x="4.5676%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="5.9734%" y="133" width="0.5423%" height="15" fill="rgb(210,199,37)" fg:x="749" fg:w="68"/><text x="6.2663%" y="143.50"></text></g><g><title>motoko_rts::idl::parse_fields::h505d0c8155046473 (695 instructions, 5.54%)</title><rect x="1.6269%" y="149" width="5.5427%" height="15" fill="rgb(244,192,49)" fg:x="204" fg:w="695"/><text x="1.9199%" y="159.50">motoko..</text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="7.1696%" y="149" width="0.5423%" height="15" fill="rgb(226,211,11)" fg:x="899" fg:w="68"/><text x="7.4626%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="7.7119%" y="149" width="0.4067%" height="15" fill="rgb(236,162,54)" fg:x="967" fg:w="51"/><text x="8.0049%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="8.1187%" y="149" width="0.5423%" height="15" fill="rgb(220,229,9)" fg:x="1018" fg:w="68"/><text x="8.4116%" y="159.50"></text></g><g><title>parse_idl_header (1,190 instructions, 9.49%)</title><rect x="0.4067%" y="165" width="9.4904%" height="15" fill="rgb(250,87,22)" fg:x="51" fg:w="1190"/><text x="0.6997%" y="175.50">parse_idl_h..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.07%)</title><rect x="9.8971%" y="165" width="0.0718%" height="15" fill="rgb(239,43,17)" fg:x="1241" fg:w="9"/><text x="10.1901%" y="175.50"></text></g><g><title>memset (39 instructions, 0.31%)</title><rect x="9.9689%" y="149" width="0.3110%" height="15" fill="rgb(231,177,25)" fg:x="1250" fg:w="39"/><text x="10.2619%" y="159.50"></text></g><g><title>idl_sub_buf_init (54 instructions, 0.43%)</title><rect x="9.9689%" y="165" width="0.4307%" height="15" fill="rgb(219,179,1)" fg:x="1250" fg:w="54"/><text x="10.2619%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="10.3996%" y="165" width="0.4067%" height="15" fill="rgb(238,219,53)" fg:x="1304" fg:w="51"/><text x="10.6925%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="10.8063%" y="165" width="0.5423%" height="15" fill="rgb(232,167,36)" fg:x="1355" fg:w="68"/><text x="11.0993%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="11.3486%" y="165" width="0.0239%" height="15" fill="rgb(244,19,51)" fg:x="1423" fg:w="3"/><text x="11.6416%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="11.3725%" y="165" width="0.0239%" height="15" fill="rgb(224,6,22)" fg:x="1426" fg:w="3"/><text x="11.6655%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="11.3964%" y="165" width="0.0239%" height="15" fill="rgb(224,145,5)" fg:x="1429" fg:w="3"/><text x="11.6894%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="11.4204%" y="149" width="0.5423%" height="15" fill="rgb(234,130,49)" fg:x="1432" fg:w="68"/><text x="11.7133%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="11.9627%" y="149" width="0.4067%" height="15" fill="rgb(254,6,2)" fg:x="1500" fg:w="51"/><text x="12.2556%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="12.3694%" y="149" width="0.2074%" height="15" fill="rgb(208,96,46)" fg:x="1551" fg:w="26"/><text x="12.6624%" y="159.50"></text></g><g><title>leb128_decode (213 instructions, 1.70%)</title><rect x="12.5768%" y="133" width="1.6987%" height="15" fill="rgb(239,3,39)" fg:x="1577" fg:w="213"/><text x="12.8697%" y="143.50"></text></g><g><title>find_field (242 instructions, 1.93%)</title><rect x="12.5768%" y="149" width="1.9300%" height="15" fill="rgb(233,210,1)" fg:x="1577" fg:w="242"/><text x="12.8697%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="14.5067%" y="149" width="0.5423%" height="15" fill="rgb(244,137,37)" fg:x="1819" fg:w="68"/><text x="14.7997%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="15.0490%" y="149" width="0.0239%" height="15" fill="rgb(240,136,2)" fg:x="1887" fg:w="3"/><text x="15.3420%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="15.0730%" y="149" width="0.0239%" height="15" fill="rgb(239,18,37)" fg:x="1890" fg:w="3"/><text x="15.3659%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="15.0969%" y="149" width="0.0239%" height="15" fill="rgb(218,185,22)" fg:x="1893" fg:w="3"/><text x="15.3899%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="15.1208%" y="133" width="0.4067%" height="15" fill="rgb(225,218,4)" fg:x="1896" fg:w="51"/><text x="15.4138%" y="143.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (186 instructions, 1.48%)</title><rect x="15.5276%" y="117" width="1.4834%" height="15" fill="rgb(230,182,32)" fg:x="1947" fg:w="186"/><text x="15.8205%" y="127.50"></text></g><g><title>utf8_validate (203 instructions, 1.62%)</title><rect x="15.5276%" y="133" width="1.6189%" height="15" fill="rgb(242,56,43)" fg:x="1947" fg:w="203"/><text x="15.8205%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="17.1465%" y="101" width="0.2712%" height="15" fill="rgb(233,99,24)" fg:x="2150" fg:w="34"/><text x="17.4395%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 0.33%)</title><rect x="17.1465%" y="117" width="0.3270%" height="15" fill="rgb(234,209,42)" fg:x="2150" fg:w="41"/><text x="17.4395%" y="127.50"></text></g><g><title>memcpy (115 instructions, 0.92%)</title><rect x="17.4735%" y="117" width="0.9171%" height="15" fill="rgb(227,7,12)" fg:x="2191" fg:w="115"/><text x="17.7665%" y="127.50"></text></g><g><title>text_of_ptr_size (166 instructions, 1.32%)</title><rect x="17.1465%" y="133" width="1.3239%" height="15" fill="rgb(245,203,43)" fg:x="2150" fg:w="166"/><text x="17.4395%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (457 instructions, 3.64%)</title><rect x="15.1208%" y="149" width="3.6446%" height="15" fill="rgb(238,205,33)" fg:x="1896" fg:w="457"/><text x="15.4138%" y="159.50">@de..</text></g><g><title>leb128_decode (213 instructions, 1.70%)</title><rect x="18.7655%" y="133" width="1.6987%" height="15" fill="rgb(231,56,7)" fg:x="2353" fg:w="213"/><text x="19.0584%" y="143.50"></text></g><g><title>find_field (242 instructions, 1.93%)</title><rect x="18.7655%" y="149" width="1.9300%" height="15" fill="rgb(244,186,29)" fg:x="2353" fg:w="242"/><text x="19.0584%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.54%)</title><rect x="20.6954%" y="149" width="0.5423%" height="15" fill="rgb(234,111,31)" fg:x="2595" fg:w="68"/><text x="20.9884%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="21.2377%" y="149" width="0.0239%" height="15" fill="rgb(241,149,10)" fg:x="2663" fg:w="3"/><text x="21.5307%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="21.2617%" y="149" width="0.0239%" height="15" fill="rgb(249,206,44)" fg:x="2666" fg:w="3"/><text x="21.5546%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="21.2856%" y="149" width="0.0239%" height="15" fill="rgb(251,153,30)" fg:x="2669" fg:w="3"/><text x="21.5786%" y="159.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.29%)</title><rect x="21.3095%" y="133" width="0.2871%" height="15" fill="rgb(239,152,38)" fg:x="2672" fg:w="36"/><text x="21.6025%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 0.64%)</title><rect x="21.3095%" y="149" width="0.6380%" height="15" fill="rgb(249,139,47)" fg:x="2672" fg:w="80"/><text x="21.6025%" y="159.50"></text></g><g><title>skip_fields (5 instructions, 0.04%)</title><rect x="21.9475%" y="149" width="0.0399%" height="15" fill="rgb(244,64,35)" fg:x="2752" fg:w="5"/><text x="22.2405%" y="159.50"></text></g><g><title>@deserialize_go&lt;r(topic:t,value:N)&gt; (1,503 instructions, 11.99%)</title><rect x="11.4204%" y="165" width="11.9866%" height="15" fill="rgb(216,46,15)" fg:x="1432" fg:w="1503"/><text x="11.7133%" y="175.50">@deserialize_go..</text></g><g><title>@deserialize&lt;r(topic:t,value:N)&gt; (3,088 instructions, 24.63%)</title><rect x="0.4067%" y="181" width="24.6272%" height="15" fill="rgb(250,74,19)" fg:x="51" fg:w="3088"/><text x="0.6997%" y="191.50">@deserialize&lt;r(topic:t,value:N)&gt;</text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="25.0339%" y="181" width="0.2074%" height="15" fill="rgb(249,42,33)" fg:x="3139" fg:w="26"/><text x="25.3269%" y="191.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="25.2412%" y="165" width="0.2074%" height="15" fill="rgb(242,149,17)" fg:x="3165" fg:w="26"/><text x="25.5342%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="25.4486%" y="165" width="0.2074%" height="15" fill="rgb(244,29,21)" fg:x="3191" fg:w="26"/><text x="25.7416%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="25.6560%" y="165" width="0.2074%" height="15" fill="rgb(220,130,37)" fg:x="3217" fg:w="26"/><text x="25.9489%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="25.8633%" y="149" width="0.2074%" height="15" fill="rgb(211,67,2)" fg:x="3243" fg:w="26"/><text x="26.1563%" y="159.50"></text></g><g><title>opt_project (14 instructions, 0.11%)</title><rect x="26.0707%" y="117" width="0.1117%" height="15" fill="rgb(235,68,52)" fg:x="3269" fg:w="14"/><text x="26.3636%" y="127.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.06%)</title><rect x="26.1823%" y="101" width="0.0638%" height="15" fill="rgb(246,142,3)" fg:x="3283" fg:w="8"/><text x="26.4753%" y="111.50"></text></g><g><title>B_add (25 instructions, 0.20%)</title><rect x="26.1823%" y="117" width="0.1994%" height="15" fill="rgb(241,25,7)" fg:x="3283" fg:w="25"/><text x="26.4753%" y="127.50"></text></g><g><title>rec (96 instructions, 0.77%)</title><rect x="26.0707%" y="133" width="0.7656%" height="15" fill="rgb(242,119,39)" fg:x="3269" fg:w="96"/><text x="26.3636%" y="143.50"></text></g><g><title>size (100 instructions, 0.80%)</title><rect x="26.0707%" y="149" width="0.7975%" height="15" fill="rgb(241,98,45)" fg:x="3269" fg:w="100"/><text x="26.3636%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="26.8682%" y="149" width="0.2074%" height="15" fill="rgb(254,28,30)" fg:x="3369" fg:w="26"/><text x="27.1611%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.31%)</title><rect x="27.0755%" y="101" width="0.3110%" height="15" fill="rgb(241,142,54)" fg:x="3395" fg:w="39"/><text x="27.3685%" y="111.50"></text></g><g><title>alloc_array (41 instructions, 0.33%)</title><rect x="27.0755%" y="117" width="0.3270%" height="15" fill="rgb(222,85,15)" fg:x="3395" fg:w="41"/><text x="27.3685%" y="127.50"></text></g><g><title>opt_project (14 instructions, 0.11%)</title><rect x="27.4025%" y="85" width="0.1117%" height="15" fill="rgb(210,85,47)" fg:x="3436" fg:w="14"/><text x="27.6955%" y="95.50"></text></g><g><title>opt_inject (14 instructions, 0.11%)</title><rect x="27.5142%" y="85" width="0.1117%" height="15" fill="rgb(224,206,25)" fg:x="3450" fg:w="14"/><text x="27.8071%" y="95.50"></text></g><g><title>pop (58 instructions, 0.46%)</title><rect x="27.4025%" y="101" width="0.4626%" height="15" fill="rgb(243,201,19)" fg:x="3436" fg:w="58"/><text x="27.6955%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="27.8651%" y="85" width="0.2074%" height="15" fill="rgb(236,59,4)" fg:x="3494" fg:w="26"/><text x="28.1580%" y="95.50"></text></g><g><title>to_2_tuple (41 instructions, 0.33%)</title><rect x="27.8651%" y="101" width="0.3270%" height="15" fill="rgb(254,179,45)" fg:x="3494" fg:w="41"/><text x="28.1580%" y="111.50"></text></g><g><title>opt_project (14 instructions, 0.11%)</title><rect x="28.1920%" y="101" width="0.1117%" height="15" fill="rgb(226,14,10)" fg:x="3535" fg:w="14"/><text x="28.4850%" y="111.50"></text></g><g><title>anon-func-402.7 (151 instructions, 1.20%)</title><rect x="27.4025%" y="117" width="1.2042%" height="15" fill="rgb(244,27,41)" fg:x="3436" fg:w="151"/><text x="27.6955%" y="127.50"></text></g><g><title>Array_tabulate (250 instructions, 1.99%)</title><rect x="27.0755%" y="133" width="1.9938%" height="15" fill="rgb(235,35,32)" fg:x="3395" fg:w="250"/><text x="27.3685%" y="143.50"></text></g><g><title>tabulate (254 instructions, 2.03%)</title><rect x="27.0755%" y="149" width="2.0257%" height="15" fill="rgb(218,68,31)" fg:x="3395" fg:w="254"/><text x="27.3685%" y="159.50"></text></g><g><title>toArray (441 instructions, 3.52%)</title><rect x="25.8633%" y="165" width="3.5170%" height="15" fill="rgb(207,120,37)" fg:x="3243" fg:w="441"/><text x="26.1563%" y="175.50">toA..</text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="29.3803%" y="165" width="0.2074%" height="15" fill="rgb(227,98,0)" fg:x="3684" fg:w="26"/><text x="29.6733%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="29.5877%" y="165" width="0.2074%" height="15" fill="rgb(207,7,3)" fg:x="3710" fg:w="26"/><text x="29.8807%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="29.7950%" y="149" width="0.2074%" height="15" fill="rgb(206,98,19)" fg:x="3736" fg:w="26"/><text x="30.0880%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="30.0024%" y="149" width="0.2074%" height="15" fill="rgb(217,5,26)" fg:x="3762" fg:w="26"/><text x="30.2954%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.13%)</title><rect x="30.2097%" y="149" width="0.1276%" height="15" fill="rgb(235,190,38)" fg:x="3788" fg:w="16"/><text x="30.5027%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.13%)</title><rect x="30.3373%" y="149" width="0.1276%" height="15" fill="rgb(247,86,24)" fg:x="3804" fg:w="16"/><text x="30.6303%" y="159.50"></text></g><g><title>motoko_rts::text::text_get_range::hacc7c8aaa5b3cfbd (14 instructions, 0.11%)</title><rect x="30.4649%" y="101" width="0.1117%" height="15" fill="rgb(205,101,16)" fg:x="3820" fg:w="14"/><text x="30.7579%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::hacc7c8aaa5b3cfbd (14 instructions, 0.11%)</title><rect x="30.5766%" y="101" width="0.1117%" height="15" fill="rgb(246,168,33)" fg:x="3834" fg:w="14"/><text x="30.8696%" y="111.50"></text></g><g><title>memcmp (133 instructions, 1.06%)</title><rect x="30.6883%" y="101" width="1.0607%" height="15" fill="rgb(231,114,1)" fg:x="3848" fg:w="133"/><text x="30.9812%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::hf661208445698ca3 (234 instructions, 1.87%)</title><rect x="30.4649%" y="117" width="1.8662%" height="15" fill="rgb(207,184,53)" fg:x="3820" fg:w="234"/><text x="30.7579%" y="127.50"></text></g><g><title>text_compare (269 instructions, 2.15%)</title><rect x="30.4649%" y="133" width="2.1453%" height="15" fill="rgb(224,95,51)" fg:x="3820" fg:w="269"/><text x="30.7579%" y="143.50">t..</text></g><g><title>Text.compare_eq (273 instructions, 2.18%)</title><rect x="30.4649%" y="149" width="2.1772%" height="15" fill="rgb(212,188,45)" fg:x="3820" fg:w="273"/><text x="30.7579%" y="159.50">T..</text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.13%)</title><rect x="32.6422%" y="149" width="0.1276%" height="15" fill="rgb(223,154,38)" fg:x="4093" fg:w="16"/><text x="32.9351%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="32.7698%" y="133" width="0.2074%" height="15" fill="rgb(251,22,52)" fg:x="4109" fg:w="26"/><text x="33.0627%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="32.9771%" y="133" width="0.2074%" height="15" fill="rgb(229,209,22)" fg:x="4135" fg:w="26"/><text x="33.2701%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="33.1845%" y="133" width="0.2074%" height="15" fill="rgb(234,138,34)" fg:x="4161" fg:w="26"/><text x="33.4774%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="33.3918%" y="133" width="0.2074%" height="15" fill="rgb(212,95,11)" fg:x="4187" fg:w="26"/><text x="33.6848%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="33.5992%" y="133" width="0.2074%" height="15" fill="rgb(240,179,47)" fg:x="4213" fg:w="26"/><text x="33.8921%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="33.8065%" y="133" width="0.2074%" height="15" fill="rgb(240,163,11)" fg:x="4239" fg:w="26"/><text x="34.0995%" y="143.50"></text></g><g><title>@new_async (266 instructions, 2.12%)</title><rect x="32.7698%" y="149" width="2.1214%" height="15" fill="rgb(236,37,12)" fg:x="4109" fg:w="266"/><text x="33.0627%" y="159.50">@..</text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="34.8911%" y="149" width="0.2074%" height="15" fill="rgb(232,164,16)" fg:x="4375" fg:w="26"/><text x="35.1841%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="35.0985%" y="149" width="0.2074%" height="15" fill="rgb(244,205,15)" fg:x="4401" fg:w="26"/><text x="35.3915%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.06%)</title><rect x="35.3058%" y="149" width="0.0558%" height="15" fill="rgb(223,117,47)" fg:x="4427" fg:w="7"/><text x="35.5988%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.06%)</title><rect x="35.3617%" y="149" width="0.0558%" height="15" fill="rgb(244,107,35)" fg:x="4434" fg:w="7"/><text x="35.6546%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="35.4175%" y="149" width="0.2074%" height="15" fill="rgb(205,140,8)" fg:x="4441" fg:w="26"/><text x="35.7105%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.31%)</title><rect x="35.6249%" y="133" width="0.3110%" height="15" fill="rgb(228,84,46)" fg:x="4467" fg:w="39"/><text x="35.9178%" y="143.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.07%)</title><rect x="35.9359%" y="133" width="0.0718%" height="15" fill="rgb(254,188,9)" fg:x="4506" fg:w="9"/><text x="36.2288%" y="143.50"></text></g><g><title>remember_continuation (3,725 instructions, 29.71%)</title><rect x="35.6249%" y="149" width="29.7073%" height="15" fill="rgb(206,112,54)" fg:x="4467" fg:w="3725"/><text x="35.9178%" y="159.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.13%)</title><rect x="65.3322%" y="117" width="0.1276%" height="15" fill="rgb(216,84,49)" fg:x="8192" fg:w="16"/><text x="65.6251%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.03%)</title><rect x="65.4598%" y="101" width="0.0319%" height="15" fill="rgb(214,194,35)" fg:x="8208" fg:w="4"/><text x="65.7527%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.30%)</title><rect x="65.4598%" y="117" width="0.2951%" height="15" fill="rgb(249,28,3)" fg:x="8208" fg:w="37"/><text x="65.7527%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.24%)</title><rect x="65.7548%" y="117" width="0.2393%" height="15" fill="rgb(222,56,52)" fg:x="8245" fg:w="30"/><text x="66.0478%" y="127.50"></text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.26%)</title><rect x="65.9941%" y="117" width="0.2552%" height="15" fill="rgb(245,217,50)" fg:x="8275" fg:w="32"/><text x="66.2871%" y="127.50"></text></g><g><title>@buffer_size&lt;r(topic:t,value:N)&gt; (160 instructions, 1.28%)</title><rect x="65.3322%" y="133" width="1.2760%" height="15" fill="rgb(213,201,24)" fg:x="8192" fg:w="160"/><text x="65.6251%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="66.6082%" y="117" width="0.2712%" height="15" fill="rgb(248,116,28)" fg:x="8352" fg:w="34"/><text x="66.9012%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="66.6082%" y="133" width="0.2871%" height="15" fill="rgb(219,72,43)" fg:x="8352" fg:w="36"/><text x="66.9012%" y="143.50"></text></g><g><title>memcpy (81 instructions, 0.65%)</title><rect x="66.8953%" y="133" width="0.6460%" height="15" fill="rgb(209,138,14)" fg:x="8388" fg:w="81"/><text x="67.1883%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="67.5413%" y="117" width="0.2712%" height="15" fill="rgb(222,18,33)" fg:x="8469" fg:w="34"/><text x="67.8342%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="67.5413%" y="133" width="0.2871%" height="15" fill="rgb(213,199,7)" fg:x="8469" fg:w="36"/><text x="67.8342%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.13%)</title><rect x="67.8284%" y="117" width="0.1276%" height="15" fill="rgb(250,110,10)" fg:x="8505" fg:w="16"/><text x="68.1213%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.03%)</title><rect x="67.9560%" y="101" width="0.0319%" height="15" fill="rgb(248,123,6)" fg:x="8521" fg:w="4"/><text x="68.2489%" y="111.50"></text></g><g><title>leb128_encode (12 instructions, 0.10%)</title><rect x="67.9879%" y="101" width="0.0957%" height="15" fill="rgb(206,91,31)" fg:x="8525" fg:w="12"/><text x="68.2808%" y="111.50"></text></g><g><title>memcpy (68 instructions, 0.54%)</title><rect x="68.0836%" y="85" width="0.5423%" height="15" fill="rgb(211,154,13)" fg:x="8537" fg:w="68"/><text x="68.3765%" y="95.50"></text></g><g><title>text_to_buf (92 instructions, 0.73%)</title><rect x="68.0836%" y="101" width="0.7337%" height="15" fill="rgb(225,148,7)" fg:x="8537" fg:w="92"/><text x="68.3765%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (135 instructions, 1.08%)</title><rect x="67.9560%" y="117" width="1.0766%" height="15" fill="rgb(220,160,43)" fg:x="8521" fg:w="135"/><text x="68.2489%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.24%)</title><rect x="69.0326%" y="117" width="0.2393%" height="15" fill="rgb(213,52,39)" fg:x="8656" fg:w="30"/><text x="69.3256%" y="127.50"></text></g><g><title>leb128_encode (12 instructions, 0.10%)</title><rect x="69.2719%" y="101" width="0.0957%" height="15" fill="rgb(243,137,7)" fg:x="8686" fg:w="12"/><text x="69.5648%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.32%)</title><rect x="69.2719%" y="117" width="0.3190%" height="15" fill="rgb(230,79,13)" fg:x="8686" fg:w="40"/><text x="69.5648%" y="127.50"></text></g><g><title>@serialize_go&lt;r(topic:t,value:N)&gt; (246 instructions, 1.96%)</title><rect x="67.8284%" y="133" width="1.9619%" height="15" fill="rgb(247,105,23)" fg:x="8505" fg:w="246"/><text x="68.1213%" y="143.50"></text></g><g><title>@serialize&lt;r(topic:t,value:N)&gt; (622 instructions, 4.96%)</title><rect x="65.3322%" y="149" width="4.9605%" height="15" fill="rgb(223,179,41)" fg:x="8192" fg:w="622"/><text x="65.6251%" y="159.50">@seri..</text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="70.2927%" y="133" width="0.0239%" height="15" fill="rgb(218,9,34)" fg:x="8814" fg:w="3"/><text x="70.5857%" y="143.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.30%)</title><rect x="70.3166%" y="53" width="0.3031%" height="15" fill="rgb(222,106,8)" fg:x="8817" fg:w="38"/><text x="70.6096%" y="63.50"></text></g><g><title>memset (244 instructions, 1.95%)</title><rect x="70.6197%" y="53" width="1.9459%" height="15" fill="rgb(211,220,0)" fg:x="8855" fg:w="244"/><text x="70.9126%" y="63.50"></text></g><g><title>mp_calloc (308 instructions, 2.46%)</title><rect x="70.3166%" y="69" width="2.4563%" height="15" fill="rgb(229,52,16)" fg:x="8817" fg:w="308"/><text x="70.6096%" y="79.50">m..</text></g><g><title>mp_init (323 instructions, 2.58%)</title><rect x="70.3166%" y="85" width="2.5760%" height="15" fill="rgb(212,155,18)" fg:x="8817" fg:w="323"/><text x="70.6096%" y="95.50">m..</text></g><g><title>mp_set_u64 (480 instructions, 3.83%)</title><rect x="72.8926%" y="69" width="3.8281%" height="15" fill="rgb(242,21,14)" fg:x="9140" fg:w="480"/><text x="73.1855%" y="79.50">mp_..</text></g><g><title>mp_set_i64 (494 instructions, 3.94%)</title><rect x="72.8926%" y="85" width="3.9397%" height="15" fill="rgb(222,19,48)" fg:x="9140" fg:w="494"/><text x="73.1855%" y="95.50">mp_..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.25%)</title><rect x="76.8323%" y="85" width="0.2472%" height="15" fill="rgb(232,45,27)" fg:x="9634" fg:w="31"/><text x="77.1253%" y="95.50"></text></g><g><title>bigint_of_int64 (891 instructions, 7.11%)</title><rect x="70.3166%" y="101" width="7.1058%" height="15" fill="rgb(249,103,42)" fg:x="8817" fg:w="891"/><text x="70.6096%" y="111.50">bigint_o..</text></g><g><title>mp_cmp_mag (17 instructions, 0.14%)</title><rect x="77.4224%" y="69" width="0.1356%" height="15" fill="rgb(246,81,33)" fg:x="9708" fg:w="17"/><text x="77.7154%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.25%)</title><rect x="77.4224%" y="85" width="0.2472%" height="15" fill="rgb(252,33,42)" fg:x="9708" fg:w="31"/><text x="77.7154%" y="95.50"></text></g><g><title>bigint_lt (54 instructions, 0.43%)</title><rect x="77.4224%" y="101" width="0.4307%" height="15" fill="rgb(209,212,41)" fg:x="9708" fg:w="54"/><text x="77.7154%" y="111.50"></text></g><g><title>B_lt (963 instructions, 7.68%)</title><rect x="70.3166%" y="117" width="7.6800%" height="15" fill="rgb(207,154,6)" fg:x="8817" fg:w="963"/><text x="70.6096%" y="127.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.10%)</title><rect x="77.9967%" y="117" width="0.0957%" height="15" fill="rgb(223,64,47)" fg:x="9780" fg:w="12"/><text x="78.2896%" y="127.50"></text></g><g><title>cycle_add (999 instructions, 7.97%)</title><rect x="70.3166%" y="133" width="7.9671%" height="15" fill="rgb(211,161,38)" fg:x="8817" fg:w="999"/><text x="70.6096%" y="143.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 8.05%)</title><rect x="70.2927%" y="149" width="8.0469%" height="15" fill="rgb(219,138,40)" fg:x="8814" fg:w="1009"/><text x="70.5857%" y="159.50">@add_cycl..</text></g><g><title>@call_succeeded (2 instructions, 0.02%)</title><rect x="78.3396%" y="149" width="0.0160%" height="15" fill="rgb(241,228,46)" fg:x="9823" fg:w="2"/><text x="78.6325%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="78.3555%" y="133" width="0.2074%" height="15" fill="rgb(223,209,38)" fg:x="9825" fg:w="26"/><text x="78.6485%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.33%)</title><rect x="78.3555%" y="149" width="0.3270%" height="15" fill="rgb(236,164,45)" fg:x="9825" fg:w="41"/><text x="78.6485%" y="159.50"></text></g><g><title>from_2_tuple (6 instructions, 0.05%)</title><rect x="78.6825%" y="149" width="0.0479%" height="15" fill="rgb(231,15,5)" fg:x="9866" fg:w="6"/><text x="78.9755%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="78.7304%" y="133" width="0.2074%" height="15" fill="rgb(252,35,15)" fg:x="9872" fg:w="26"/><text x="79.0233%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="78.9377%" y="117" width="0.2074%" height="15" fill="rgb(248,181,18)" fg:x="9898" fg:w="26"/><text x="79.2307%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="79.1451%" y="117" width="0.2074%" height="15" fill="rgb(233,39,42)" fg:x="9924" fg:w="26"/><text x="79.4380%" y="127.50"></text></g><g><title>enqueue (118 instructions, 0.94%)</title><rect x="78.9377%" y="133" width="0.9411%" height="15" fill="rgb(238,110,33)" fg:x="9898" fg:w="118"/><text x="79.2307%" y="143.50"></text></g><g><title>$lambda (167 instructions, 1.33%)</title><rect x="78.7304%" y="149" width="1.3318%" height="15" fill="rgb(233,195,10)" fg:x="9872" fg:w="167"/><text x="79.0233%" y="159.50"></text></g><g><title>$loop/1 (6,568 instructions, 52.38%)</title><rect x="29.7950%" y="165" width="52.3806%" height="15" fill="rgb(254,105,3)" fg:x="3736" fg:w="6568"/><text x="30.0880%" y="175.50">$loop/1</text></g><g><title>$lambda (7,244 instructions, 57.77%)</title><rect x="25.2412%" y="181" width="57.7718%" height="15" fill="rgb(221,225,9)" fg:x="3165" fg:w="7244"/><text x="25.5342%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.40%)</title><rect x="83.0130%" y="181" width="0.3988%" height="15" fill="rgb(224,227,45)" fg:x="10409" fg:w="50"/><text x="83.3060%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.11%)</title><rect x="83.4118%" y="181" width="0.1117%" height="15" fill="rgb(229,198,43)" fg:x="10459" fg:w="14"/><text x="83.7047%" y="191.50"></text></g><g><title>publish (10,971 instructions, 87.50%)</title><rect x="0.0000%" y="197" width="87.4950%" height="15" fill="rgb(206,209,35)" fg:x="0" fg:w="10971"/><text x="0.2930%" y="207.50">publish</text></g><g><title>trans_state5 (9 instructions, 0.07%)</title><rect x="87.4950%" y="181" width="0.0718%" height="15" fill="rgb(245,195,53)" fg:x="10971" fg:w="9"/><text x="87.7880%" y="191.50"></text></g><g><title>recall_continuation (57 instructions, 0.45%)</title><rect x="87.5668%" y="181" width="0.4546%" height="15" fill="rgb(240,92,26)" fg:x="10980" fg:w="57"/><text x="87.8598%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="88.0214%" y="165" width="0.2712%" height="15" fill="rgb(207,40,23)" fg:x="11037" fg:w="34"/><text x="88.3143%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="88.0214%" y="181" width="0.2871%" height="15" fill="rgb(223,111,35)" fg:x="11037" fg:w="36"/><text x="88.3143%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="88.3085%" y="149" width="0.4067%" height="15" fill="rgb(229,147,28)" fg:x="11073" fg:w="51"/><text x="88.6014%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="88.7152%" y="149" width="0.2712%" height="15" fill="rgb(211,29,28)" fg:x="11124" fg:w="34"/><text x="89.0082%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="88.9864%" y="149" width="0.4067%" height="15" fill="rgb(228,72,33)" fg:x="11158" fg:w="51"/><text x="89.2793%" y="159.50"></text></g><g><title>parse_idl_header (207 instructions, 1.65%)</title><rect x="88.3085%" y="165" width="1.6508%" height="15" fill="rgb(205,214,31)" fg:x="11073" fg:w="207"/><text x="88.6014%" y="175.50"></text></g><g><title>idl_sub_buf_words (9 instructions, 0.07%)</title><rect x="89.9593%" y="165" width="0.0718%" height="15" fill="rgb(224,111,15)" fg:x="11280" fg:w="9"/><text x="90.2523%" y="175.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="90.0311%" y="149" width="0.0319%" height="15" fill="rgb(253,21,26)" fg:x="11289" fg:w="4"/><text x="90.3241%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.15%)</title><rect x="90.0311%" y="165" width="0.1515%" height="15" fill="rgb(245,139,43)" fg:x="11289" fg:w="19"/><text x="90.3241%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.41%)</title><rect x="90.1826%" y="165" width="0.4067%" height="15" fill="rgb(252,170,7)" fg:x="11308" fg:w="51"/><text x="90.4756%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 3.48%)</title><rect x="88.3085%" y="181" width="3.4772%" height="15" fill="rgb(231,118,14)" fg:x="11073" fg:w="436"/><text x="88.6014%" y="191.50">@de..</text></g><g><title>from_word128_ptr (17 instructions, 0.14%)</title><rect x="91.7856%" y="117" width="0.1356%" height="15" fill="rgb(238,83,0)" fg:x="11509" fg:w="17"/><text x="92.0786%" y="127.50"></text></g><g><title>cycle_refunded (30 instructions, 0.24%)</title><rect x="91.7856%" y="133" width="0.2393%" height="15" fill="rgb(221,39,39)" fg:x="11509" fg:w="30"/><text x="92.0786%" y="143.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.26%)</title><rect x="91.7856%" y="149" width="0.2552%" height="15" fill="rgb(222,119,46)" fg:x="11509" fg:w="32"/><text x="92.0786%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="92.0408%" y="149" width="0.2074%" height="15" fill="rgb(222,165,49)" fg:x="11541" fg:w="26"/><text x="92.3338%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.21%)</title><rect x="92.2482%" y="133" width="0.2074%" height="15" fill="rgb(219,113,52)" fg:x="11567" fg:w="26"/><text x="92.5412%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.33%)</title><rect x="92.2482%" y="149" width="0.3270%" height="15" fill="rgb(214,7,15)" fg:x="11567" fg:w="41"/><text x="92.5412%" y="159.50"></text></g><g><title>opt_inject (14 instructions, 0.11%)</title><rect x="92.5752%" y="149" width="0.1117%" height="15" fill="rgb(235,32,4)" fg:x="11608" fg:w="14"/><text x="92.8681%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="92.6868%" y="133" width="0.0239%" height="15" fill="rgb(238,90,54)" fg:x="11622" fg:w="3"/><text x="92.9798%" y="143.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.11%)</title><rect x="92.7107%" y="53" width="0.1117%" height="15" fill="rgb(213,208,19)" fg:x="11625" fg:w="14"/><text x="93.0037%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="92.8224%" y="37" width="0.2712%" height="15" fill="rgb(233,156,4)" fg:x="11639" fg:w="34"/><text x="93.1154%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="92.8224%" y="53" width="0.2871%" height="15" fill="rgb(207,194,5)" fg:x="11639" fg:w="36"/><text x="93.1154%" y="63.50"></text></g><g><title>memcpy (63 instructions, 0.50%)</title><rect x="93.1095%" y="53" width="0.5024%" height="15" fill="rgb(206,111,30)" fg:x="11675" fg:w="63"/><text x="93.4025%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.27%)</title><rect x="93.6119%" y="37" width="0.2712%" height="15" fill="rgb(243,70,54)" fg:x="11738" fg:w="34"/><text x="93.9049%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.29%)</title><rect x="93.6119%" y="53" width="0.2871%" height="15" fill="rgb(242,28,8)" fg:x="11738" fg:w="36"/><text x="93.9049%" y="63.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.03%)</title><rect x="93.8990%" y="53" width="0.0319%" height="15" fill="rgb(219,106,18)" fg:x="11774" fg:w="4"/><text x="94.1920%" y="63.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 1.72%)</title><rect x="92.7107%" y="69" width="1.7226%" height="15" fill="rgb(244,222,10)" fg:x="11625" fg:w="216"/><text x="93.0037%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.24%)</title><rect x="94.4334%" y="69" width="0.2393%" height="15" fill="rgb(236,179,52)" fg:x="11841" fg:w="30"/><text x="94.7263%" y="79.50"></text></g><g><title>$lambda (251 instructions, 2.00%)</title><rect x="92.7107%" y="85" width="2.0018%" height="15" fill="rgb(213,23,39)" fg:x="11625" fg:w="251"/><text x="93.0037%" y="95.50"></text></g><g><title>$loop/1 (285 instructions, 2.27%)</title><rect x="92.7107%" y="101" width="2.2729%" height="15" fill="rgb(238,48,10)" fg:x="11625" fg:w="285"/><text x="93.0037%" y="111.50">$..</text></g><g><title>$k/15 (302 instructions, 2.41%)</title><rect x="92.7107%" y="117" width="2.4085%" height="15" fill="rgb(251,196,23)" fg:x="11625" fg:w="302"/><text x="93.0037%" y="127.50">$..</text></g><g><title>$lambda (309 instructions, 2.46%)</title><rect x="92.7107%" y="133" width="2.4643%" height="15" fill="rgb(250,152,24)" fg:x="11625" fg:w="309"/><text x="93.0037%" y="143.50">$..</text></g><g><title>anon-func-349.15 (335 instructions, 2.67%)</title><rect x="92.6868%" y="149" width="2.6717%" height="15" fill="rgb(209,150,17)" fg:x="11622" fg:w="335"/><text x="92.9798%" y="159.50">a..</text></g><g><title>fulfill (502 instructions, 4.00%)</title><rect x="91.7856%" y="165" width="4.0035%" height="15" fill="rgb(234,202,34)" fg:x="11509" fg:w="502"/><text x="92.0786%" y="175.50">ful..</text></g><g><title>$lambda (510 instructions, 4.07%)</title><rect x="91.7856%" y="181" width="4.0673%" height="15" fill="rgb(253,148,53)" fg:x="11509" fg:w="510"/><text x="92.0786%" y="191.50">$la..</text></g><g><title>schedule_copying_gc (50 instructions, 0.40%)</title><rect x="95.8529%" y="181" width="0.3988%" height="15" fill="rgb(218,129,16)" fg:x="12019" fg:w="50"/><text x="96.1459%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.11%)</title><rect x="96.2517%" y="181" width="0.1117%" height="15" fill="rgb(216,85,19)" fg:x="12069" fg:w="14"/><text x="96.5447%" y="191.50"></text></g><g><title>all (12,539 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="12539"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,568 instructions, 12.50%)</title><rect x="87.4950%" y="197" width="12.5050%" height="15" fill="rgb(245,175,0)" fg:x="10971" fg:w="1568"/><text x="87.7880%" y="207.50">@callback&lt;u&gt;</text></g></svg></svg>