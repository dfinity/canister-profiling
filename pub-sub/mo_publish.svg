<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Publish Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="11737"><g><title>trans_state5 (8 instructions, 0.07%)</title><rect x="0.0000%" y="149" width="0.0682%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="8"/><text x="0.2930%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="0.0682%" y="149" width="0.2556%" height="15" fill="rgb(239,54,39)" fg:x="8" fg:w="30"/><text x="0.3611%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="0.3238%" y="133" width="0.3919%" height="15" fill="rgb(230,99,41)" fg:x="38" fg:w="46"/><text x="0.6167%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="0.7157%" y="133" width="0.2556%" height="15" fill="rgb(253,106,12)" fg:x="84" fg:w="30"/><text x="1.0087%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="0.9713%" y="133" width="0.5112%" height="15" fill="rgb(213,46,41)" fg:x="114" fg:w="60"/><text x="1.2643%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="1.4825%" y="133" width="0.3919%" height="15" fill="rgb(215,133,35)" fg:x="174" fg:w="46"/><text x="1.7755%" y="143.50"></text></g><g><title>leb128_decode (198 instructions, 1.69%)</title><rect x="1.8744%" y="133" width="1.6870%" height="15" fill="rgb(213,28,5)" fg:x="220" fg:w="198"/><text x="2.1674%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="3.5614%" y="133" width="0.5112%" height="15" fill="rgb(215,77,49)" fg:x="418" fg:w="60"/><text x="3.8544%" y="143.50"></text></g><g><title>leb128_decode (198 instructions, 1.69%)</title><rect x="4.0726%" y="133" width="1.6870%" height="15" fill="rgb(248,100,22)" fg:x="478" fg:w="198"/><text x="4.3656%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="5.7596%" y="133" width="0.5112%" height="15" fill="rgb(208,67,9)" fg:x="676" fg:w="60"/><text x="6.0525%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="6.2708%" y="133" width="0.5112%" height="15" fill="rgb(219,133,21)" fg:x="736" fg:w="60"/><text x="6.5637%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="6.7820%" y="133" width="0.3919%" height="15" fill="rgb(246,46,29)" fg:x="796" fg:w="46"/><text x="7.0749%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="7.1739%" y="133" width="0.5112%" height="15" fill="rgb(246,185,52)" fg:x="842" fg:w="60"/><text x="7.4669%" y="143.50"></text></g><g><title>parse_idl_header (1,103 instructions, 9.40%)</title><rect x="0.3238%" y="149" width="9.3976%" height="15" fill="rgb(252,136,11)" fg:x="38" fg:w="1103"/><text x="0.6167%" y="159.50">parse_idl_h..</text></g><g><title>memset (38 instructions, 0.32%)</title><rect x="9.7214%" y="133" width="0.3238%" height="15" fill="rgb(219,138,53)" fg:x="1141" fg:w="38"/><text x="10.0144%" y="143.50"></text></g><g><title>idl_sub_buf_init (49 instructions, 0.42%)</title><rect x="9.7214%" y="149" width="0.4175%" height="15" fill="rgb(211,51,23)" fg:x="1141" fg:w="49"/><text x="10.0144%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="10.1389%" y="149" width="0.3919%" height="15" fill="rgb(247,221,28)" fg:x="1190" fg:w="46"/><text x="10.4318%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="10.5308%" y="149" width="0.5112%" height="15" fill="rgb(251,222,45)" fg:x="1236" fg:w="60"/><text x="10.8238%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="11.0420%" y="149" width="0.5112%" height="15" fill="rgb(217,162,53)" fg:x="1296" fg:w="60"/><text x="11.3350%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="11.5532%" y="149" width="0.3919%" height="15" fill="rgb(229,93,14)" fg:x="1356" fg:w="46"/><text x="11.8462%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="11.9451%" y="149" width="0.1874%" height="15" fill="rgb(209,67,49)" fg:x="1402" fg:w="22"/><text x="12.2381%" y="159.50"></text></g><g><title>leb128_decode (198 instructions, 1.69%)</title><rect x="12.1326%" y="133" width="1.6870%" height="15" fill="rgb(213,87,29)" fg:x="1424" fg:w="198"/><text x="12.4255%" y="143.50"></text></g><g><title>find_field (225 instructions, 1.92%)</title><rect x="12.1326%" y="149" width="1.9170%" height="15" fill="rgb(205,151,52)" fg:x="1424" fg:w="225"/><text x="12.4255%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="14.0496%" y="149" width="0.5112%" height="15" fill="rgb(253,215,39)" fg:x="1649" fg:w="60"/><text x="14.3426%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="14.5608%" y="133" width="0.3919%" height="15" fill="rgb(221,220,41)" fg:x="1709" fg:w="46"/><text x="14.8538%" y="143.50"></text></g><g><title>utf8_validate (191 instructions, 1.63%)</title><rect x="14.9527%" y="133" width="1.6273%" height="15" fill="rgb(218,133,21)" fg:x="1755" fg:w="191"/><text x="15.2457%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="16.5800%" y="101" width="0.2556%" height="15" fill="rgb(221,193,43)" fg:x="1946" fg:w="30"/><text x="16.8730%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.32%)</title><rect x="16.5800%" y="117" width="0.3152%" height="15" fill="rgb(240,128,52)" fg:x="1946" fg:w="37"/><text x="16.8730%" y="127.50"></text></g><g><title>memcpy (110 instructions, 0.94%)</title><rect x="16.8953%" y="117" width="0.9372%" height="15" fill="rgb(253,114,12)" fg:x="1983" fg:w="110"/><text x="17.1883%" y="127.50"></text></g><g><title>text_of_ptr_size (157 instructions, 1.34%)</title><rect x="16.5800%" y="133" width="1.3377%" height="15" fill="rgb(215,223,47)" fg:x="1946" fg:w="157"/><text x="16.8730%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (430 instructions, 3.66%)</title><rect x="14.5608%" y="149" width="3.6636%" height="15" fill="rgb(248,225,23)" fg:x="1709" fg:w="430"/><text x="14.8538%" y="159.50">@de..</text></g><g><title>leb128_decode (198 instructions, 1.69%)</title><rect x="18.2244%" y="133" width="1.6870%" height="15" fill="rgb(250,108,0)" fg:x="2139" fg:w="198"/><text x="18.5174%" y="143.50"></text></g><g><title>find_field (225 instructions, 1.92%)</title><rect x="18.2244%" y="149" width="1.9170%" height="15" fill="rgb(228,208,7)" fg:x="2139" fg:w="225"/><text x="18.5174%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 0.51%)</title><rect x="20.1414%" y="149" width="0.5112%" height="15" fill="rgb(244,45,10)" fg:x="2364" fg:w="60"/><text x="20.4344%" y="159.50"></text></g><g><title>skip_fields (4 instructions, 0.03%)</title><rect x="20.6526%" y="149" width="0.0341%" height="15" fill="rgb(207,125,25)" fg:x="2424" fg:w="4"/><text x="20.9456%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="20.6867%" y="149" width="0.1874%" height="15" fill="rgb(210,195,18)" fg:x="2428" fg:w="22"/><text x="20.9797%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="20.8742%" y="133" width="0.1874%" height="15" fill="rgb(249,80,12)" fg:x="2450" fg:w="22"/><text x="21.1671%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="21.0616%" y="133" width="0.1874%" height="15" fill="rgb(221,65,9)" fg:x="2472" fg:w="22"/><text x="21.3546%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="21.2490%" y="133" width="0.1874%" height="15" fill="rgb(235,49,36)" fg:x="2494" fg:w="22"/><text x="21.5420%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="21.4365%" y="133" width="0.1874%" height="15" fill="rgb(225,32,20)" fg:x="2516" fg:w="22"/><text x="21.7295%" y="143.50"></text></g><g><title>opt_project (14 instructions, 0.12%)</title><rect x="21.6239%" y="133" width="0.1193%" height="15" fill="rgb(215,141,46)" fg:x="2538" fg:w="14"/><text x="21.9169%" y="143.50"></text></g><g><title>B_add (24 instructions, 0.20%)</title><rect x="21.7432%" y="133" width="0.2045%" height="15" fill="rgb(250,160,47)" fg:x="2552" fg:w="24"/><text x="22.0362%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="21.9477%" y="133" width="0.1874%" height="15" fill="rgb(216,222,40)" fg:x="2576" fg:w="22"/><text x="22.2407%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.30%)</title><rect x="22.1351%" y="133" width="0.2982%" height="15" fill="rgb(234,217,39)" fg:x="2598" fg:w="35"/><text x="22.4281%" y="143.50"></text></g><g><title>opt_project (14 instructions, 0.12%)</title><rect x="22.4333%" y="117" width="0.1193%" height="15" fill="rgb(207,178,40)" fg:x="2633" fg:w="14"/><text x="22.7263%" y="127.50"></text></g><g><title>opt_inject (14 instructions, 0.12%)</title><rect x="22.5526%" y="117" width="0.1193%" height="15" fill="rgb(221,136,13)" fg:x="2647" fg:w="14"/><text x="22.8456%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="22.6719%" y="101" width="0.1874%" height="15" fill="rgb(249,199,10)" fg:x="2661" fg:w="22"/><text x="22.9649%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.32%)</title><rect x="22.6719%" y="117" width="0.3152%" height="15" fill="rgb(249,222,13)" fg:x="2661" fg:w="37"/><text x="22.9649%" y="127.50"></text></g><g><title>opt_project (14 instructions, 0.12%)</title><rect x="22.9871%" y="117" width="0.1193%" height="15" fill="rgb(244,185,38)" fg:x="2698" fg:w="14"/><text x="23.2801%" y="127.50"></text></g><g><title>anon-func-402.7 (130 instructions, 1.11%)</title><rect x="22.4333%" y="133" width="1.1076%" height="15" fill="rgb(236,202,9)" fg:x="2633" fg:w="130"/><text x="22.7263%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="23.5409%" y="133" width="0.1874%" height="15" fill="rgb(250,229,37)" fg:x="2763" fg:w="22"/><text x="23.8339%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="23.7284%" y="133" width="0.1874%" height="15" fill="rgb(206,174,23)" fg:x="2785" fg:w="22"/><text x="24.0213%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="23.9158%" y="117" width="0.1874%" height="15" fill="rgb(211,33,43)" fg:x="2807" fg:w="22"/><text x="24.2088%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="24.1033%" y="117" width="0.1874%" height="15" fill="rgb(245,58,50)" fg:x="2829" fg:w="22"/><text x="24.3962%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.14%)</title><rect x="24.2907%" y="117" width="0.1363%" height="15" fill="rgb(244,68,36)" fg:x="2851" fg:w="16"/><text x="24.5837%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.14%)</title><rect x="24.4270%" y="117" width="0.1363%" height="15" fill="rgb(232,229,15)" fg:x="2867" fg:w="16"/><text x="24.7200%" y="127.50"></text></g><g><title>motoko_rts::text::text_get_range::hf3253fb1b86772bc (14 instructions, 0.12%)</title><rect x="24.5633%" y="101" width="0.1193%" height="15" fill="rgb(254,30,23)" fg:x="2883" fg:w="14"/><text x="24.8563%" y="111.50"></text></g><g><title>motoko_rts::text::text_get_range::hf3253fb1b86772bc (14 instructions, 0.12%)</title><rect x="24.6826%" y="101" width="0.1193%" height="15" fill="rgb(235,160,14)" fg:x="2897" fg:w="14"/><text x="24.9756%" y="111.50"></text></g><g><title>memcmp (131 instructions, 1.12%)</title><rect x="24.8019%" y="101" width="1.1161%" height="15" fill="rgb(212,155,44)" fg:x="2911" fg:w="131"/><text x="25.0949%" y="111.50"></text></g><g><title>motoko_rts::text::text_compare_range::ha4c502cafd109f9c (232 instructions, 1.98%)</title><rect x="24.5633%" y="117" width="1.9767%" height="15" fill="rgb(226,2,50)" fg:x="2883" fg:w="232"/><text x="24.8563%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.14%)</title><rect x="26.5400%" y="117" width="0.1363%" height="15" fill="rgb(234,177,6)" fg:x="3115" fg:w="16"/><text x="26.8330%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="26.6763%" y="101" width="0.1874%" height="15" fill="rgb(217,24,9)" fg:x="3131" fg:w="22"/><text x="26.9693%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="26.8638%" y="101" width="0.1874%" height="15" fill="rgb(220,13,46)" fg:x="3153" fg:w="22"/><text x="27.1567%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="27.0512%" y="101" width="0.1874%" height="15" fill="rgb(239,221,27)" fg:x="3175" fg:w="22"/><text x="27.3442%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="27.2386%" y="101" width="0.1874%" height="15" fill="rgb(222,198,25)" fg:x="3197" fg:w="22"/><text x="27.5316%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="27.4261%" y="101" width="0.1874%" height="15" fill="rgb(211,99,13)" fg:x="3219" fg:w="22"/><text x="27.7191%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="27.6135%" y="101" width="0.1874%" height="15" fill="rgb(232,111,31)" fg:x="3241" fg:w="22"/><text x="27.9065%" y="111.50"></text></g><g><title>@new_async (231 instructions, 1.97%)</title><rect x="26.6763%" y="117" width="1.9681%" height="15" fill="rgb(245,82,37)" fg:x="3131" fg:w="231"/><text x="26.9693%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="28.6445%" y="117" width="0.1874%" height="15" fill="rgb(227,149,46)" fg:x="3362" fg:w="22"/><text x="28.9374%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="28.8319%" y="117" width="0.1874%" height="15" fill="rgb(218,36,50)" fg:x="3384" fg:w="22"/><text x="29.1249%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="29.0193%" y="117" width="0.1874%" height="15" fill="rgb(226,80,48)" fg:x="3406" fg:w="22"/><text x="29.3123%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.30%)</title><rect x="29.2068%" y="101" width="0.2982%" height="15" fill="rgb(238,224,15)" fg:x="3428" fg:w="35"/><text x="29.4998%" y="111.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (7 instructions, 0.06%)</title><rect x="29.5050%" y="101" width="0.0596%" height="15" fill="rgb(241,136,10)" fg:x="3463" fg:w="7"/><text x="29.7980%" y="111.50"></text></g><g><title>remember_continuation (3,698 instructions, 31.51%)</title><rect x="29.2068%" y="117" width="31.5072%" height="15" fill="rgb(208,32,45)" fg:x="3428" fg:w="3698"/><text x="29.4998%" y="127.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.14%)</title><rect x="60.7140%" y="117" width="0.1363%" height="15" fill="rgb(207,135,9)" fg:x="7126" fg:w="16"/><text x="61.0070%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.23%)</title><rect x="60.8503%" y="117" width="0.2300%" height="15" fill="rgb(206,86,44)" fg:x="7142" fg:w="27"/><text x="61.1433%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.26%)</title><rect x="61.0803%" y="117" width="0.2556%" height="15" fill="rgb(245,177,15)" fg:x="7169" fg:w="30"/><text x="61.3733%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="61.3359%" y="117" width="0.2556%" height="15" fill="rgb(206,64,50)" fg:x="7199" fg:w="30"/><text x="61.6289%" y="127.50"></text></g><g><title>memcpy (79 instructions, 0.67%)</title><rect x="61.5915%" y="117" width="0.6731%" height="15" fill="rgb(234,36,40)" fg:x="7229" fg:w="79"/><text x="61.8845%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="62.2646%" y="117" width="0.2556%" height="15" fill="rgb(213,64,8)" fg:x="7308" fg:w="30"/><text x="62.5576%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.14%)</title><rect x="62.5202%" y="117" width="0.1363%" height="15" fill="rgb(210,75,36)" fg:x="7338" fg:w="16"/><text x="62.8132%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.08%)</title><rect x="62.6566%" y="101" width="0.0767%" height="15" fill="rgb(229,88,21)" fg:x="7354" fg:w="9"/><text x="62.9495%" y="111.50"></text></g><g><title>memcpy (65 instructions, 0.55%)</title><rect x="62.7332%" y="85" width="0.5538%" height="15" fill="rgb(252,204,47)" fg:x="7363" fg:w="65"/><text x="63.0262%" y="95.50"></text></g><g><title>text_to_buf (86 instructions, 0.73%)</title><rect x="62.7332%" y="101" width="0.7327%" height="15" fill="rgb(208,77,27)" fg:x="7363" fg:w="86"/><text x="63.0262%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (122 instructions, 1.04%)</title><rect x="62.6566%" y="117" width="1.0394%" height="15" fill="rgb(221,76,26)" fg:x="7354" fg:w="122"/><text x="62.9495%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.26%)</title><rect x="63.6960%" y="117" width="0.2556%" height="15" fill="rgb(225,139,18)" fg:x="7476" fg:w="30"/><text x="63.9890%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.08%)</title><rect x="63.9516%" y="117" width="0.0767%" height="15" fill="rgb(230,137,11)" fg:x="7506" fg:w="9"/><text x="64.2446%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (34 instructions, 0.29%)</title><rect x="64.0283%" y="37" width="0.2897%" height="15" fill="rgb(212,28,1)" fg:x="7515" fg:w="34"/><text x="64.3213%" y="47.50"></text></g><g><title>memset (233 instructions, 1.99%)</title><rect x="64.3180%" y="37" width="1.9852%" height="15" fill="rgb(248,164,17)" fg:x="7549" fg:w="233"/><text x="64.6109%" y="47.50"></text></g><g><title>mp_calloc (291 instructions, 2.48%)</title><rect x="64.0283%" y="53" width="2.4793%" height="15" fill="rgb(222,171,42)" fg:x="7515" fg:w="291"/><text x="64.3213%" y="63.50">m..</text></g><g><title>mp_init (306 instructions, 2.61%)</title><rect x="64.0283%" y="69" width="2.6071%" height="15" fill="rgb(243,84,45)" fg:x="7515" fg:w="306"/><text x="64.3213%" y="79.50">m..</text></g><g><title>mp_set_u64 (479 instructions, 4.08%)</title><rect x="66.6354%" y="69" width="4.0811%" height="15" fill="rgb(252,49,23)" fg:x="7821" fg:w="479"/><text x="66.9284%" y="79.50">mp_..</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (30 instructions, 0.26%)</title><rect x="70.7165%" y="69" width="0.2556%" height="15" fill="rgb(215,19,7)" fg:x="8300" fg:w="30"/><text x="71.0095%" y="79.50"></text></g><g><title>bigint_of_int64 (864 instructions, 7.36%)</title><rect x="64.0283%" y="85" width="7.3613%" height="15" fill="rgb(238,81,41)" fg:x="7515" fg:w="864"/><text x="64.3213%" y="95.50">bigint_o..</text></g><g><title>mp_cmp_mag (17 instructions, 0.14%)</title><rect x="71.3896%" y="85" width="0.1448%" height="15" fill="rgb(210,199,37)" fg:x="8379" fg:w="17"/><text x="71.6826%" y="95.50"></text></g><g><title>B_lt (935 instructions, 7.97%)</title><rect x="64.0283%" y="101" width="7.9663%" height="15" fill="rgb(244,192,49)" fg:x="7515" fg:w="935"/><text x="64.3213%" y="111.50">B_lt</text></g><g><title>@add_cycles (965 instructions, 8.22%)</title><rect x="64.0283%" y="117" width="8.2219%" height="15" fill="rgb(226,211,11)" fg:x="7515" fg:w="965"/><text x="64.3213%" y="127.50">@add_cycl..</text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="72.2501%" y="101" width="0.1874%" height="15" fill="rgb(236,162,54)" fg:x="8480" fg:w="22"/><text x="72.5431%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.32%)</title><rect x="72.2501%" y="117" width="0.3152%" height="15" fill="rgb(220,229,9)" fg:x="8480" fg:w="37"/><text x="72.5431%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="72.5654%" y="101" width="0.1874%" height="15" fill="rgb(250,87,22)" fg:x="8517" fg:w="22"/><text x="72.8584%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="72.7528%" y="85" width="0.1874%" height="15" fill="rgb(239,43,17)" fg:x="8539" fg:w="22"/><text x="73.0458%" y="95.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="72.9403%" y="85" width="0.1874%" height="15" fill="rgb(231,177,25)" fg:x="8561" fg:w="22"/><text x="73.2332%" y="95.50"></text></g><g><title>enqueue (106 instructions, 0.90%)</title><rect x="72.7528%" y="101" width="0.9031%" height="15" fill="rgb(219,179,1)" fg:x="8539" fg:w="106"/><text x="73.0458%" y="111.50"></text></g><g><title>$lambda.3 (151 instructions, 1.29%)</title><rect x="72.5654%" y="117" width="1.2865%" height="15" fill="rgb(238,219,53)" fg:x="8517" fg:w="151"/><text x="72.8584%" y="127.50"></text></g><g><title>$loop/1 (6,280 instructions, 53.51%)</title><rect x="23.9158%" y="133" width="53.5060%" height="15" fill="rgb(232,167,36)" fg:x="2807" fg:w="6280"/><text x="24.2088%" y="143.50">$loop/1</text></g><g><title>$lambda.1 (6,841 instructions, 58.29%)</title><rect x="20.8742%" y="149" width="58.2858%" height="15" fill="rgb(244,19,51)" fg:x="2450" fg:w="6841"/><text x="21.1671%" y="159.50">$lambda.1</text></g><g><title>schedule_copying_gc (43 instructions, 0.37%)</title><rect x="79.1599%" y="149" width="0.3664%" height="15" fill="rgb(224,6,22)" fg:x="9291" fg:w="43"/><text x="79.4529%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.11%)</title><rect x="79.5263%" y="149" width="0.1108%" height="15" fill="rgb(224,145,5)" fg:x="9334" fg:w="13"/><text x="79.8193%" y="159.50"></text></g><g><title>publish (10,316 instructions, 87.89%)</title><rect x="0.0000%" y="165" width="87.8930%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="10316"/><text x="0.2930%" y="175.50">publish</text></g><g><title>trans_state5 (8 instructions, 0.07%)</title><rect x="87.8930%" y="149" width="0.0682%" height="15" fill="rgb(254,6,2)" fg:x="10316" fg:w="8"/><text x="88.1860%" y="159.50"></text></g><g><title>recall_continuation (45 instructions, 0.38%)</title><rect x="87.9611%" y="149" width="0.3834%" height="15" fill="rgb(208,96,46)" fg:x="10324" fg:w="45"/><text x="88.2541%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="88.3446%" y="149" width="0.2556%" height="15" fill="rgb(239,3,39)" fg:x="10369" fg:w="30"/><text x="88.6375%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="88.6002%" y="117" width="0.3919%" height="15" fill="rgb(233,210,1)" fg:x="10399" fg:w="46"/><text x="88.8931%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="88.9921%" y="117" width="0.2556%" height="15" fill="rgb(244,137,37)" fg:x="10445" fg:w="30"/><text x="89.2850%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="89.2477%" y="117" width="0.3919%" height="15" fill="rgb(240,136,2)" fg:x="10475" fg:w="46"/><text x="89.5406%" y="127.50"></text></g><g><title>parse_idl_header (189 instructions, 1.61%)</title><rect x="88.6002%" y="133" width="1.6103%" height="15" fill="rgb(239,18,37)" fg:x="10399" fg:w="189"/><text x="88.8931%" y="143.50"></text></g><g><title>memset (3 instructions, 0.03%)</title><rect x="90.2104%" y="117" width="0.0256%" height="15" fill="rgb(218,185,22)" fg:x="10588" fg:w="3"/><text x="90.5034%" y="127.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.12%)</title><rect x="90.2104%" y="133" width="0.1193%" height="15" fill="rgb(225,218,4)" fg:x="10588" fg:w="14"/><text x="90.5034%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.39%)</title><rect x="90.3297%" y="133" width="0.3919%" height="15" fill="rgb(230,182,32)" fg:x="10602" fg:w="46"/><text x="90.6227%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (389 instructions, 3.31%)</title><rect x="88.6002%" y="149" width="3.3143%" height="15" fill="rgb(242,56,43)" fg:x="10399" fg:w="389"/><text x="88.8931%" y="159.50">@d..</text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="91.9145%" y="117" width="0.1874%" height="15" fill="rgb(233,99,24)" fg:x="10788" fg:w="22"/><text x="92.2074%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.19%)</title><rect x="92.1019%" y="101" width="0.1874%" height="15" fill="rgb(234,209,42)" fg:x="10810" fg:w="22"/><text x="92.3949%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.32%)</title><rect x="92.1019%" y="117" width="0.3152%" height="15" fill="rgb(227,7,12)" fg:x="10810" fg:w="37"/><text x="92.3949%" y="127.50"></text></g><g><title>opt_inject (14 instructions, 0.12%)</title><rect x="92.4171%" y="117" width="0.1193%" height="15" fill="rgb(245,203,43)" fg:x="10847" fg:w="14"/><text x="92.7101%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="92.5364%" y="37" width="0.2556%" height="15" fill="rgb(238,205,33)" fg:x="10861" fg:w="30"/><text x="92.8294%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.52%)</title><rect x="92.7920%" y="37" width="0.5197%" height="15" fill="rgb(231,56,7)" fg:x="10891" fg:w="61"/><text x="93.0850%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.26%)</title><rect x="93.3117%" y="37" width="0.2556%" height="15" fill="rgb(244,186,29)" fg:x="10952" fg:w="30"/><text x="93.6047%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.26%)</title><rect x="93.5674%" y="37" width="0.2556%" height="15" fill="rgb(234,111,31)" fg:x="10982" fg:w="30"/><text x="93.8603%" y="47.50"></text></g><g><title>anon_async (212 instructions, 1.81%)</title><rect x="92.5364%" y="53" width="1.8063%" height="15" fill="rgb(241,149,10)" fg:x="10861" fg:w="212"/><text x="92.8294%" y="63.50"></text></g><g><title>$loop/1 (240 instructions, 2.04%)</title><rect x="92.5364%" y="69" width="2.0448%" height="15" fill="rgb(249,206,44)" fg:x="10861" fg:w="240"/><text x="92.8294%" y="79.50"></text></g><g><title>$k/15 (256 instructions, 2.18%)</title><rect x="92.5364%" y="85" width="2.1811%" height="15" fill="rgb(251,153,30)" fg:x="10861" fg:w="256"/><text x="92.8294%" y="95.50">$..</text></g><g><title>$lambda.8 (262 instructions, 2.23%)</title><rect x="92.5364%" y="101" width="2.2323%" height="15" fill="rgb(239,152,38)" fg:x="10861" fg:w="262"/><text x="92.8294%" y="111.50">$..</text></g><g><title>anon-func-349.15 (284 instructions, 2.42%)</title><rect x="92.5364%" y="117" width="2.4197%" height="15" fill="rgb(249,139,47)" fg:x="10861" fg:w="284"/><text x="92.8294%" y="127.50">a..</text></g><g><title>fulfill (432 instructions, 3.68%)</title><rect x="91.9145%" y="133" width="3.6807%" height="15" fill="rgb(244,64,35)" fg:x="10788" fg:w="432"/><text x="92.2074%" y="143.50">ful..</text></g><g><title>$lambda.6 (439 instructions, 3.74%)</title><rect x="91.9145%" y="149" width="3.7403%" height="15" fill="rgb(216,46,15)" fg:x="10788" fg:w="439"/><text x="92.2074%" y="159.50">$la..</text></g><g><title>schedule_copying_gc (43 instructions, 0.37%)</title><rect x="95.6548%" y="149" width="0.3664%" height="15" fill="rgb(250,74,19)" fg:x="11227" fg:w="43"/><text x="95.9477%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.11%)</title><rect x="96.0211%" y="149" width="0.1108%" height="15" fill="rgb(249,42,33)" fg:x="11270" fg:w="13"/><text x="96.3141%" y="159.50"></text></g><g><title>all (11,737 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="11737"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,421 instructions, 12.11%)</title><rect x="87.8930%" y="165" width="12.1070%" height="15" fill="rgb(244,29,21)" fg:x="10316" fg:w="1421"/><text x="88.1860%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>