<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Subscribe Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="19605"><g><title>trans_state5 (9 instructions, 0.05%)</title><rect x="0.0000%" y="181" width="0.0459%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2930%" y="191.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="0.0459%" y="181" width="0.0153%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="3"/><text x="0.3389%" y="191.50"></text></g><g><title>@reset_refund (3 instructions, 0.02%)</title><rect x="0.0612%" y="181" width="0.0153%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="3"/><text x="0.3542%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="0.0765%" y="165" width="0.1734%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="34"/><text x="0.3695%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="0.0765%" y="181" width="0.1836%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="36"/><text x="0.3695%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="0.2601%" y="149" width="0.2601%" height="15" fill="rgb(232,128,0)" fg:x="51" fg:w="51"/><text x="0.5531%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="0.5203%" y="149" width="0.1734%" height="15" fill="rgb(207,160,47)" fg:x="102" fg:w="34"/><text x="0.8132%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="0.6937%" y="149" width="0.2601%" height="15" fill="rgb(228,23,34)" fg:x="136" fg:w="51"/><text x="0.9867%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.35%)</title><rect x="0.9538%" y="149" width="0.3469%" height="15" fill="rgb(218,30,26)" fg:x="187" fg:w="68"/><text x="1.2468%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.35%)</title><rect x="1.3007%" y="149" width="0.3469%" height="15" fill="rgb(220,122,19)" fg:x="255" fg:w="68"/><text x="1.5937%" y="159.50"></text></g><g><title>parse_idl_header (373 instructions, 1.90%)</title><rect x="0.2601%" y="165" width="1.9026%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="373"/><text x="0.5531%" y="175.50"></text></g><g><title>idl_sub_buf_words (9 instructions, 0.05%)</title><rect x="2.1627%" y="165" width="0.0459%" height="15" fill="rgb(240,193,28)" fg:x="424" fg:w="9"/><text x="2.4557%" y="175.50"></text></g><g><title>memset (4 instructions, 0.02%)</title><rect x="2.2086%" y="149" width="0.0204%" height="15" fill="rgb(216,20,37)" fg:x="433" fg:w="4"/><text x="2.5016%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.10%)</title><rect x="2.2086%" y="165" width="0.0969%" height="15" fill="rgb(206,188,39)" fg:x="433" fg:w="19"/><text x="2.5016%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="2.3055%" y="165" width="0.2601%" height="15" fill="rgb(217,207,13)" fg:x="452" fg:w="51"/><text x="2.5985%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.35%)</title><rect x="2.5657%" y="165" width="0.3469%" height="15" fill="rgb(231,73,38)" fg:x="503" fg:w="68"/><text x="2.8586%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="2.9125%" y="165" width="0.0153%" height="15" fill="rgb(225,20,46)" fg:x="571" fg:w="3"/><text x="3.2055%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="2.9278%" y="165" width="0.0153%" height="15" fill="rgb(210,31,41)" fg:x="574" fg:w="3"/><text x="3.2208%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="2.9431%" y="165" width="0.0153%" height="15" fill="rgb(221,200,47)" fg:x="577" fg:w="3"/><text x="3.2361%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="2.9584%" y="149" width="0.2601%" height="15" fill="rgb(226,26,5)" fg:x="580" fg:w="51"/><text x="3.2514%" y="159.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (225 instructions, 1.15%)</title><rect x="3.2186%" y="133" width="1.1477%" height="15" fill="rgb(249,33,26)" fg:x="631" fg:w="225"/><text x="3.5115%" y="143.50"></text></g><g><title>utf8_validate (242 instructions, 1.23%)</title><rect x="3.2186%" y="149" width="1.2344%" height="15" fill="rgb(235,183,28)" fg:x="631" fg:w="242"/><text x="3.5115%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="4.4529%" y="117" width="0.1734%" height="15" fill="rgb(221,5,38)" fg:x="873" fg:w="34"/><text x="4.7459%" y="127.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 0.21%)</title><rect x="4.4529%" y="133" width="0.2091%" height="15" fill="rgb(247,18,42)" fg:x="873" fg:w="41"/><text x="4.7459%" y="143.50"></text></g><g><title>memcpy (176 instructions, 0.90%)</title><rect x="4.6621%" y="133" width="0.8977%" height="15" fill="rgb(241,131,45)" fg:x="914" fg:w="176"/><text x="4.9550%" y="143.50"></text></g><g><title>text_of_ptr_size (227 instructions, 1.16%)</title><rect x="4.4529%" y="149" width="1.1579%" height="15" fill="rgb(249,31,29)" fg:x="873" fg:w="227"/><text x="4.7459%" y="159.50"></text></g><g><title>@deserialize_go&lt;t&gt; (557 instructions, 2.84%)</title><rect x="2.9584%" y="165" width="2.8411%" height="15" fill="rgb(225,111,53)" fg:x="580" fg:w="557"/><text x="3.2514%" y="175.50">@d..</text></g><g><title>sleb128_decode (68 instructions, 0.35%)</title><rect x="5.7995%" y="165" width="0.3469%" height="15" fill="rgb(238,160,17)" fg:x="1137" fg:w="68"/><text x="6.0925%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="6.1464%" y="165" width="0.0153%" height="15" fill="rgb(214,148,48)" fg:x="1205" fg:w="3"/><text x="6.4394%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="6.1617%" y="165" width="0.0153%" height="15" fill="rgb(232,36,49)" fg:x="1208" fg:w="3"/><text x="6.4547%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="6.1770%" y="165" width="0.0153%" height="15" fill="rgb(209,103,24)" fg:x="1211" fg:w="3"/><text x="6.4700%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="6.1923%" y="149" width="0.2601%" height="15" fill="rgb(229,88,8)" fg:x="1214" fg:w="51"/><text x="6.4853%" y="159.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (203 instructions, 1.04%)</title><rect x="6.4524%" y="133" width="1.0355%" height="15" fill="rgb(213,181,19)" fg:x="1265" fg:w="203"/><text x="6.7454%" y="143.50"></text></g><g><title>utf8_validate (220 instructions, 1.12%)</title><rect x="6.4524%" y="149" width="1.1222%" height="15" fill="rgb(254,191,54)" fg:x="1265" fg:w="220"/><text x="6.7454%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="7.5746%" y="117" width="0.1734%" height="15" fill="rgb(241,83,37)" fg:x="1485" fg:w="34"/><text x="7.8676%" y="127.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 0.21%)</title><rect x="7.5746%" y="133" width="0.2091%" height="15" fill="rgb(233,36,39)" fg:x="1485" fg:w="41"/><text x="7.8676%" y="143.50"></text></g><g><title>memcpy (152 instructions, 0.78%)</title><rect x="7.7837%" y="133" width="0.7753%" height="15" fill="rgb(226,3,54)" fg:x="1526" fg:w="152"/><text x="8.0767%" y="143.50"></text></g><g><title>text_of_ptr_size (203 instructions, 1.04%)</title><rect x="7.5746%" y="149" width="1.0355%" height="15" fill="rgb(245,192,40)" fg:x="1485" fg:w="203"/><text x="7.8676%" y="159.50"></text></g><g><title>@deserialize_go&lt;t&gt; (511 instructions, 2.61%)</title><rect x="6.1923%" y="165" width="2.6065%" height="15" fill="rgb(238,167,29)" fg:x="1214" fg:w="511"/><text x="6.4853%" y="175.50">@..</text></g><g><title>@deserialize&lt;tt&gt; (1,935 instructions, 9.87%)</title><rect x="0.2601%" y="181" width="9.8699%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="1935"/><text x="0.5531%" y="191.50">@deserialize..</text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="10.1301%" y="181" width="0.1326%" height="15" fill="rgb(231,60,39)" fg:x="1986" fg:w="26"/><text x="10.4230%" y="191.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="10.2627%" y="165" width="0.1326%" height="15" fill="rgb(208,69,12)" fg:x="2012" fg:w="26"/><text x="10.5557%" y="175.50"></text></g><g><title>motoko_rts::text::blob_of_text::hae557034d1e1588f (9 instructions, 0.05%)</title><rect x="10.3953%" y="149" width="0.0459%" height="15" fill="rgb(235,93,37)" fg:x="2038" fg:w="9"/><text x="10.6883%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="10.4412%" y="149" width="0.1734%" height="15" fill="rgb(213,116,39)" fg:x="2047" fg:w="34"/><text x="10.7342%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="10.6146%" y="149" width="0.1734%" height="15" fill="rgb(222,207,29)" fg:x="2081" fg:w="34"/><text x="10.9076%" y="159.50"></text></g><g><title>memcpy (63 instructions, 0.32%)</title><rect x="10.7881%" y="149" width="0.3213%" height="15" fill="rgb(206,96,30)" fg:x="2115" fg:w="63"/><text x="11.0810%" y="159.50"></text></g><g><title>compute_crc32 (291 instructions, 1.48%)</title><rect x="11.1094%" y="133" width="1.4843%" height="15" fill="rgb(218,138,4)" fg:x="2178" fg:w="291"/><text x="11.4024%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="12.5937%" y="133" width="0.1734%" height="15" fill="rgb(250,191,14)" fg:x="2469" fg:w="34"/><text x="12.8867%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="12.7672%" y="133" width="0.3877%" height="15" fill="rgb(239,60,40)" fg:x="2503" fg:w="76"/><text x="13.0601%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="13.1548%" y="133" width="0.5611%" height="15" fill="rgb(206,27,48)" fg:x="2579" fg:w="110"/><text x="13.4478%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="13.7159%" y="133" width="0.3877%" height="15" fill="rgb(225,35,8)" fg:x="2689" fg:w="76"/><text x="14.0089%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="14.1035%" y="133" width="0.5611%" height="15" fill="rgb(250,213,24)" fg:x="2765" fg:w="110"/><text x="14.3965%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="14.6646%" y="133" width="0.5611%" height="15" fill="rgb(247,123,22)" fg:x="2875" fg:w="110"/><text x="14.9576%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="15.2257%" y="133" width="0.3877%" height="15" fill="rgb(231,138,38)" fg:x="2985" fg:w="76"/><text x="15.5187%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="15.6134%" y="133" width="0.5611%" height="15" fill="rgb(231,145,46)" fg:x="3061" fg:w="110"/><text x="15.9063%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="16.1744%" y="133" width="0.3877%" height="15" fill="rgb(251,118,11)" fg:x="3171" fg:w="76"/><text x="16.4674%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="16.5621%" y="133" width="0.5611%" height="15" fill="rgb(217,147,25)" fg:x="3247" fg:w="110"/><text x="16.8551%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="17.1232%" y="133" width="0.5611%" height="15" fill="rgb(247,81,37)" fg:x="3357" fg:w="110"/><text x="17.4162%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="17.6843%" y="133" width="0.3877%" height="15" fill="rgb(209,12,38)" fg:x="3467" fg:w="76"/><text x="17.9772%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="18.0719%" y="133" width="0.5611%" height="15" fill="rgb(227,1,9)" fg:x="3543" fg:w="110"/><text x="18.3649%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (76 instructions, 0.39%)</title><rect x="18.6330%" y="133" width="0.3877%" height="15" fill="rgb(248,47,43)" fg:x="3653" fg:w="76"/><text x="18.9260%" y="143.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3b79855b826c7030 (110 instructions, 0.56%)</title><rect x="19.0207%" y="133" width="0.5611%" height="15" fill="rgb(221,10,30)" fg:x="3729" fg:w="110"/><text x="19.3136%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="19.5817%" y="133" width="0.1734%" height="15" fill="rgb(210,229,1)" fg:x="3839" fg:w="34"/><text x="19.8747%" y="143.50"></text></g><g><title>motoko_rts::principal_id::principal_of_blob::h22e30d3f0ba41cd8 (2,963 instructions, 15.11%)</title><rect x="11.1094%" y="149" width="15.1135%" height="15" fill="rgb(222,148,37)" fg:x="2178" fg:w="2963"/><text x="11.4024%" y="159.50">motoko_rts::princip..</text></g><g><title>memcmp (574 instructions, 2.93%)</title><rect x="26.2229%" y="149" width="2.9278%" height="15" fill="rgb(234,67,33)" fg:x="5141" fg:w="574"/><text x="26.5159%" y="159.50">me..</text></g><g><title>blob_of_principal (5,757 instructions, 29.36%)</title><rect x="10.3953%" y="165" width="29.3650%" height="15" fill="rgb(247,98,35)" fg:x="2038" fg:w="5757"/><text x="10.6883%" y="175.50">blob_of_principal</text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="39.7603%" y="149" width="0.1326%" height="15" fill="rgb(247,138,52)" fg:x="7795" fg:w="26"/><text x="40.0532%" y="159.50"></text></g><g><title>to_2_tuple (41 instructions, 0.21%)</title><rect x="39.7603%" y="165" width="0.2091%" height="15" fill="rgb(213,79,30)" fg:x="7795" fg:w="41"/><text x="40.0532%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="39.9694%" y="149" width="0.1326%" height="15" fill="rgb(246,177,23)" fg:x="7836" fg:w="26"/><text x="40.2624%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="40.1020%" y="149" width="0.1326%" height="15" fill="rgb(230,62,27)" fg:x="7862" fg:w="26"/><text x="40.3950%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="40.2346%" y="149" width="0.1326%" height="15" fill="rgb(216,154,8)" fg:x="7888" fg:w="26"/><text x="40.5276%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="40.3673%" y="149" width="0.1326%" height="15" fill="rgb(244,35,45)" fg:x="7914" fg:w="26"/><text x="40.6602%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="40.4999%" y="149" width="0.1326%" height="15" fill="rgb(251,115,12)" fg:x="7940" fg:w="26"/><text x="40.7928%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="40.6325%" y="149" width="0.1326%" height="15" fill="rgb(240,54,50)" fg:x="7966" fg:w="26"/><text x="40.9255%" y="159.50"></text></g><g><title>@new_async (266 instructions, 1.36%)</title><rect x="39.9694%" y="165" width="1.3568%" height="15" fill="rgb(233,84,52)" fg:x="7836" fg:w="266"/><text x="40.2624%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="41.3262%" y="165" width="0.1326%" height="15" fill="rgb(207,117,47)" fg:x="8102" fg:w="26"/><text x="41.6192%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="41.4588%" y="165" width="0.1326%" height="15" fill="rgb(249,43,39)" fg:x="8128" fg:w="26"/><text x="41.7518%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="41.5914%" y="133" width="0.1734%" height="15" fill="rgb(209,38,44)" fg:x="8154" fg:w="34"/><text x="41.8844%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="41.5914%" y="149" width="0.1836%" height="15" fill="rgb(236,212,23)" fg:x="8154" fg:w="36"/><text x="41.8844%" y="159.50"></text></g><g><title>canister_self (46 instructions, 0.23%)</title><rect x="41.5914%" y="165" width="0.2346%" height="15" fill="rgb(242,79,21)" fg:x="8154" fg:w="46"/><text x="41.8844%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="41.8261%" y="149" width="0.1326%" height="15" fill="rgb(211,96,35)" fg:x="8200" fg:w="26"/><text x="42.1190%" y="159.50"></text></g><g><title>to_2_tuple (41 instructions, 0.21%)</title><rect x="41.8261%" y="165" width="0.2091%" height="15" fill="rgb(253,215,40)" fg:x="8200" fg:w="41"/><text x="42.1190%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="42.0352%" y="165" width="0.1326%" height="15" fill="rgb(211,81,21)" fg:x="8241" fg:w="26"/><text x="42.3282%" y="175.50"></text></g><g><title>as_ptr_size (7 instructions, 0.04%)</title><rect x="42.1678%" y="165" width="0.0357%" height="15" fill="rgb(208,190,38)" fg:x="8267" fg:w="7"/><text x="42.4608%" y="175.50"></text></g><g><title>as_ptr_size (7 instructions, 0.04%)</title><rect x="42.2035%" y="165" width="0.0357%" height="15" fill="rgb(235,213,38)" fg:x="8274" fg:w="7"/><text x="42.4965%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="42.2392%" y="165" width="0.1326%" height="15" fill="rgb(237,122,38)" fg:x="8281" fg:w="26"/><text x="42.5322%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.20%)</title><rect x="42.3718%" y="149" width="0.1989%" height="15" fill="rgb(244,218,35)" fg:x="8307" fg:w="39"/><text x="42.6648%" y="159.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.05%)</title><rect x="42.5708%" y="149" width="0.0459%" height="15" fill="rgb(240,68,47)" fg:x="8346" fg:w="9"/><text x="42.8637%" y="159.50"></text></g><g><title>remember_continuation (3,725 instructions, 19.00%)</title><rect x="42.3718%" y="165" width="19.0003%" height="15" fill="rgb(210,16,53)" fg:x="8307" fg:w="3725"/><text x="42.6648%" y="175.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.08%)</title><rect x="61.3721%" y="133" width="0.0816%" height="15" fill="rgb(235,124,12)" fg:x="12032" fg:w="16"/><text x="61.6651%" y="143.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="61.4537%" y="117" width="0.0204%" height="15" fill="rgb(224,169,11)" fg:x="12048" fg:w="4"/><text x="61.7467%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.19%)</title><rect x="61.4537%" y="133" width="0.1887%" height="15" fill="rgb(250,166,2)" fg:x="12048" fg:w="37"/><text x="61.7467%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.15%)</title><rect x="61.6424%" y="133" width="0.1530%" height="15" fill="rgb(242,216,29)" fg:x="12085" fg:w="30"/><text x="61.9354%" y="143.50"></text></g><g><title>@buffer_size&lt;B&gt; (33 instructions, 0.17%)</title><rect x="61.7955%" y="101" width="0.1683%" height="15" fill="rgb(230,116,27)" fg:x="12115" fg:w="33"/><text x="62.0884%" y="111.50"></text></g><g><title>@buffer_size&lt;ra()&gt; (64 instructions, 0.33%)</title><rect x="61.7955%" y="117" width="0.3264%" height="15" fill="rgb(228,99,48)" fg:x="12115" fg:w="64"/><text x="62.0884%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="62.1219%" y="101" width="0.0204%" height="15" fill="rgb(253,11,6)" fg:x="12179" fg:w="4"/><text x="62.4149%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.19%)</title><rect x="62.1219%" y="117" width="0.1887%" height="15" fill="rgb(247,143,39)" fg:x="12179" fg:w="37"/><text x="62.4149%" y="127.50"></text></g><g><title>@buffer_size&lt;Fsr(r(topic:t,value:N))()&gt; (147 instructions, 0.75%)</title><rect x="61.7955%" y="133" width="0.7498%" height="15" fill="rgb(236,97,10)" fg:x="12115" fg:w="147"/><text x="62.0884%" y="143.50"></text></g><g><title>@buffer_size&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (275 instructions, 1.40%)</title><rect x="61.3721%" y="149" width="1.4027%" height="15" fill="rgb(233,208,19)" fg:x="12032" fg:w="275"/><text x="61.6651%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="62.7748%" y="133" width="0.1734%" height="15" fill="rgb(216,164,2)" fg:x="12307" fg:w="34"/><text x="63.0678%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="62.7748%" y="149" width="0.1836%" height="15" fill="rgb(220,129,5)" fg:x="12307" fg:w="36"/><text x="63.0678%" y="159.50"></text></g><g><title>memcpy (105 instructions, 0.54%)</title><rect x="62.9584%" y="149" width="0.5356%" height="15" fill="rgb(242,17,10)" fg:x="12343" fg:w="105"/><text x="63.2514%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="63.4940%" y="133" width="0.1734%" height="15" fill="rgb(242,107,0)" fg:x="12448" fg:w="34"/><text x="63.7870%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="63.4940%" y="149" width="0.1836%" height="15" fill="rgb(251,28,31)" fg:x="12448" fg:w="36"/><text x="63.7870%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.08%)</title><rect x="63.6776%" y="133" width="0.0816%" height="15" fill="rgb(233,223,10)" fg:x="12484" fg:w="16"/><text x="63.9706%" y="143.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="63.7592%" y="117" width="0.0204%" height="15" fill="rgb(215,21,27)" fg:x="12500" fg:w="4"/><text x="64.0522%" y="127.50"></text></g><g><title>leb128_encode (12 instructions, 0.06%)</title><rect x="63.7796%" y="117" width="0.0612%" height="15" fill="rgb(232,23,21)" fg:x="12504" fg:w="12"/><text x="64.0726%" y="127.50"></text></g><g><title>memcpy (68 instructions, 0.35%)</title><rect x="63.8409%" y="101" width="0.3469%" height="15" fill="rgb(244,5,23)" fg:x="12516" fg:w="68"/><text x="64.1338%" y="111.50"></text></g><g><title>text_to_buf (92 instructions, 0.47%)</title><rect x="63.8409%" y="117" width="0.4693%" height="15" fill="rgb(226,81,46)" fg:x="12516" fg:w="92"/><text x="64.1338%" y="127.50"></text></g><g><title>@serialize_go&lt;t&gt; (135 instructions, 0.69%)</title><rect x="63.7592%" y="133" width="0.6886%" height="15" fill="rgb(247,70,30)" fg:x="12500" fg:w="135"/><text x="64.0522%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.15%)</title><rect x="64.4478%" y="133" width="0.1530%" height="15" fill="rgb(212,68,19)" fg:x="12635" fg:w="30"/><text x="64.7408%" y="143.50"></text></g><g><title>leb128_encode (12 instructions, 0.06%)</title><rect x="64.6009%" y="85" width="0.0612%" height="15" fill="rgb(240,187,13)" fg:x="12665" fg:w="12"/><text x="64.8938%" y="95.50"></text></g><g><title>memcpy (68 instructions, 0.35%)</title><rect x="64.6621%" y="85" width="0.3469%" height="15" fill="rgb(223,113,26)" fg:x="12677" fg:w="68"/><text x="64.9550%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.56%)</title><rect x="64.6009%" y="101" width="0.5611%" height="15" fill="rgb(206,192,2)" fg:x="12665" fg:w="110"/><text x="64.8938%" y="111.50"></text></g><g><title>@serialize_go&lt;ra()&gt; (128 instructions, 0.65%)</title><rect x="64.6009%" y="117" width="0.6529%" height="15" fill="rgb(241,108,4)" fg:x="12665" fg:w="128"/><text x="64.8938%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="65.2538%" y="101" width="0.0204%" height="15" fill="rgb(247,173,49)" fg:x="12793" fg:w="4"/><text x="65.5467%" y="111.50"></text></g><g><title>leb128_encode (12 instructions, 0.06%)</title><rect x="65.2742%" y="101" width="0.0612%" height="15" fill="rgb(224,114,35)" fg:x="12797" fg:w="12"/><text x="65.5671%" y="111.50"></text></g><g><title>memcpy (72 instructions, 0.37%)</title><rect x="65.3354%" y="85" width="0.3673%" height="15" fill="rgb(245,159,27)" fg:x="12809" fg:w="72"/><text x="65.6283%" y="95.50"></text></g><g><title>text_to_buf (96 instructions, 0.49%)</title><rect x="65.3354%" y="101" width="0.4897%" height="15" fill="rgb(245,172,44)" fg:x="12809" fg:w="96"/><text x="65.6283%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (139 instructions, 0.71%)</title><rect x="65.2538%" y="117" width="0.7090%" height="15" fill="rgb(236,23,11)" fg:x="12793" fg:w="139"/><text x="65.5467%" y="127.50"></text></g><g><title>@serialize_go&lt;Fsr(r(topic:t,value:N))()&gt; (295 instructions, 1.50%)</title><rect x="64.6009%" y="133" width="1.5047%" height="15" fill="rgb(205,117,38)" fg:x="12665" fg:w="295"/><text x="64.8938%" y="143.50"></text></g><g><title>@serialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (501 instructions, 2.56%)</title><rect x="63.6776%" y="149" width="2.5555%" height="15" fill="rgb(237,72,25)" fg:x="12484" fg:w="501"/><text x="63.9706%" y="159.50">@..</text></g><g><title>@serialize&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (1,016 instructions, 5.18%)</title><rect x="61.3721%" y="165" width="5.1824%" height="15" fill="rgb(244,70,9)" fg:x="12032" fg:w="1016"/><text x="61.6651%" y="175.50">@seri..</text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="66.5545%" y="149" width="0.0153%" height="15" fill="rgb(217,125,39)" fg:x="13048" fg:w="3"/><text x="66.8474%" y="159.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.19%)</title><rect x="66.5698%" y="69" width="0.1938%" height="15" fill="rgb(235,36,10)" fg:x="13051" fg:w="38"/><text x="66.8627%" y="79.50"></text></g><g><title>memset (244 instructions, 1.24%)</title><rect x="66.7636%" y="69" width="1.2446%" height="15" fill="rgb(251,123,47)" fg:x="13089" fg:w="244"/><text x="67.0565%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 1.57%)</title><rect x="66.5698%" y="85" width="1.5710%" height="15" fill="rgb(221,13,13)" fg:x="13051" fg:w="308"/><text x="66.8627%" y="95.50"></text></g><g><title>mp_init (323 instructions, 1.65%)</title><rect x="66.5698%" y="101" width="1.6475%" height="15" fill="rgb(238,131,9)" fg:x="13051" fg:w="323"/><text x="66.8627%" y="111.50"></text></g><g><title>mp_set_u64 (480 instructions, 2.45%)</title><rect x="68.2173%" y="85" width="2.4484%" height="15" fill="rgb(211,50,8)" fg:x="13374" fg:w="480"/><text x="68.5103%" y="95.50">m..</text></g><g><title>mp_set_i64 (494 instructions, 2.52%)</title><rect x="68.2173%" y="101" width="2.5198%" height="15" fill="rgb(245,182,24)" fg:x="13374" fg:w="494"/><text x="68.5103%" y="111.50">m..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.16%)</title><rect x="70.7371%" y="101" width="0.1581%" height="15" fill="rgb(242,14,37)" fg:x="13868" fg:w="31"/><text x="71.0300%" y="111.50"></text></g><g><title>bigint_of_int64 (891 instructions, 4.54%)</title><rect x="66.5698%" y="117" width="4.5448%" height="15" fill="rgb(246,228,12)" fg:x="13051" fg:w="891"/><text x="66.8627%" y="127.50">bigi..</text></g><g><title>mp_cmp_mag (17 instructions, 0.09%)</title><rect x="71.1145%" y="85" width="0.0867%" height="15" fill="rgb(213,55,15)" fg:x="13942" fg:w="17"/><text x="71.4075%" y="95.50"></text></g><g><title>mp_cmp (31 instructions, 0.16%)</title><rect x="71.1145%" y="101" width="0.1581%" height="15" fill="rgb(209,9,3)" fg:x="13942" fg:w="31"/><text x="71.4075%" y="111.50"></text></g><g><title>bigint_lt (54 instructions, 0.28%)</title><rect x="71.1145%" y="117" width="0.2754%" height="15" fill="rgb(230,59,30)" fg:x="13942" fg:w="54"/><text x="71.4075%" y="127.50"></text></g><g><title>B_lt (963 instructions, 4.91%)</title><rect x="66.5698%" y="133" width="4.9120%" height="15" fill="rgb(209,121,21)" fg:x="13051" fg:w="963"/><text x="66.8627%" y="143.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.06%)</title><rect x="71.4818%" y="133" width="0.0612%" height="15" fill="rgb(220,109,13)" fg:x="14014" fg:w="12"/><text x="71.7747%" y="143.50"></text></g><g><title>cycle_add (999 instructions, 5.10%)</title><rect x="66.5698%" y="149" width="5.0956%" height="15" fill="rgb(232,18,1)" fg:x="13051" fg:w="999"/><text x="66.8627%" y="159.50">cycle..</text></g><g><title>@add_cycles (1,009 instructions, 5.15%)</title><rect x="66.5545%" y="165" width="5.1466%" height="15" fill="rgb(215,41,42)" fg:x="13048" fg:w="1009"/><text x="66.8474%" y="175.50">@add_..</text></g><g><title>@call_succeeded (2 instructions, 0.01%)</title><rect x="71.7011%" y="165" width="0.0102%" height="15" fill="rgb(224,123,36)" fg:x="14057" fg:w="2"/><text x="71.9941%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="71.7113%" y="149" width="0.1326%" height="15" fill="rgb(240,125,3)" fg:x="14059" fg:w="26"/><text x="72.0043%" y="159.50"></text></g><g><title>to_2_tuple (41 instructions, 0.21%)</title><rect x="71.7113%" y="165" width="0.2091%" height="15" fill="rgb(205,98,50)" fg:x="14059" fg:w="41"/><text x="72.0043%" y="175.50"></text></g><g><title>from_2_tuple (6 instructions, 0.03%)</title><rect x="71.9204%" y="165" width="0.0306%" height="15" fill="rgb(205,185,37)" fg:x="14100" fg:w="6"/><text x="72.2134%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="71.9510%" y="149" width="0.1326%" height="15" fill="rgb(238,207,15)" fg:x="14106" fg:w="26"/><text x="72.2440%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="72.0837%" y="133" width="0.1326%" height="15" fill="rgb(213,199,42)" fg:x="14132" fg:w="26"/><text x="72.3766%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="72.2163%" y="133" width="0.1326%" height="15" fill="rgb(235,201,11)" fg:x="14158" fg:w="26"/><text x="72.5092%" y="143.50"></text></g><g><title>enqueue (118 instructions, 0.60%)</title><rect x="72.0837%" y="149" width="0.6019%" height="15" fill="rgb(207,46,11)" fg:x="14132" fg:w="118"/><text x="72.3766%" y="159.50"></text></g><g><title>$lambda (167 instructions, 0.85%)</title><rect x="71.9510%" y="165" width="0.8518%" height="15" fill="rgb(241,35,35)" fg:x="14106" fg:w="167"/><text x="72.2440%" y="175.50"></text></g><g><title>$lambda (12,534 instructions, 63.93%)</title><rect x="10.2627%" y="181" width="63.9327%" height="15" fill="rgb(243,32,47)" fg:x="2012" fg:w="12534"/><text x="10.5557%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.26%)</title><rect x="74.1954%" y="181" width="0.2550%" height="15" fill="rgb(247,202,23)" fg:x="14546" fg:w="50"/><text x="74.4883%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.07%)</title><rect x="74.4504%" y="181" width="0.0714%" height="15" fill="rgb(219,102,11)" fg:x="14596" fg:w="14"/><text x="74.7434%" y="191.50"></text></g><g><title>init (15,128 instructions, 77.16%)</title><rect x="0.0000%" y="197" width="77.1640%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="15128"/><text x="0.2930%" y="207.50">init</text></g><g><title>trans_state5 (9 instructions, 0.05%)</title><rect x="77.1640%" y="181" width="0.0459%" height="15" fill="rgb(222,74,54)" fg:x="15128" fg:w="9"/><text x="77.4570%" y="191.50"></text></g><g><title>recall_continuation (57 instructions, 0.29%)</title><rect x="77.2099%" y="181" width="0.2907%" height="15" fill="rgb(216,99,12)" fg:x="15137" fg:w="57"/><text x="77.5029%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="77.5006%" y="165" width="0.1734%" height="15" fill="rgb(226,22,26)" fg:x="15194" fg:w="34"/><text x="77.7936%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="77.5006%" y="181" width="0.1836%" height="15" fill="rgb(217,163,10)" fg:x="15194" fg:w="36"/><text x="77.7936%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="77.6843%" y="149" width="0.2601%" height="15" fill="rgb(213,25,53)" fg:x="15230" fg:w="51"/><text x="77.9772%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="77.9444%" y="149" width="0.1734%" height="15" fill="rgb(252,105,26)" fg:x="15281" fg:w="34"/><text x="78.2374%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="78.1178%" y="149" width="0.2601%" height="15" fill="rgb(220,39,43)" fg:x="15315" fg:w="51"/><text x="78.4108%" y="159.50"></text></g><g><title>parse_idl_header (207 instructions, 1.06%)</title><rect x="77.6843%" y="165" width="1.0559%" height="15" fill="rgb(229,68,48)" fg:x="15230" fg:w="207"/><text x="77.9772%" y="175.50"></text></g><g><title>idl_sub_buf_words (9 instructions, 0.05%)</title><rect x="78.7401%" y="165" width="0.0459%" height="15" fill="rgb(252,8,32)" fg:x="15437" fg:w="9"/><text x="79.0331%" y="175.50"></text></g><g><title>memset (4 instructions, 0.02%)</title><rect x="78.7860%" y="149" width="0.0204%" height="15" fill="rgb(223,20,43)" fg:x="15446" fg:w="4"/><text x="79.0790%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.10%)</title><rect x="78.7860%" y="165" width="0.0969%" height="15" fill="rgb(229,81,49)" fg:x="15446" fg:w="19"/><text x="79.0790%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.26%)</title><rect x="78.8829%" y="165" width="0.2601%" height="15" fill="rgb(236,28,36)" fg:x="15465" fg:w="51"/><text x="79.1759%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 2.22%)</title><rect x="77.6843%" y="181" width="2.2239%" height="15" fill="rgb(249,185,26)" fg:x="15230" fg:w="436"/><text x="77.9772%" y="191.50">@..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.19%)</title><rect x="79.9082%" y="37" width="0.1938%" height="15" fill="rgb(249,174,33)" fg:x="15666" fg:w="38"/><text x="80.2012%" y="47.50"></text></g><g><title>memset (244 instructions, 1.24%)</title><rect x="80.1020%" y="37" width="1.2446%" height="15" fill="rgb(233,201,37)" fg:x="15704" fg:w="244"/><text x="80.3950%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.57%)</title><rect x="79.9082%" y="53" width="1.5710%" height="15" fill="rgb(221,78,26)" fg:x="15666" fg:w="308"/><text x="80.2012%" y="63.50"></text></g><g><title>mp_init (323 instructions, 1.65%)</title><rect x="79.9082%" y="69" width="1.6475%" height="15" fill="rgb(250,127,30)" fg:x="15666" fg:w="323"/><text x="80.2012%" y="79.50"></text></g><g><title>mp_set_u32 (480 instructions, 2.45%)</title><rect x="81.5557%" y="69" width="2.4484%" height="15" fill="rgb(230,49,44)" fg:x="15989" fg:w="480"/><text x="81.8487%" y="79.50">m..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.16%)</title><rect x="84.0041%" y="69" width="0.1581%" height="15" fill="rgb(229,67,23)" fg:x="16469" fg:w="31"/><text x="84.2970%" y="79.50"></text></g><g><title>bigint_of_word32 (877 instructions, 4.47%)</title><rect x="79.9082%" y="85" width="4.4733%" height="15" fill="rgb(249,83,47)" fg:x="15666" fg:w="877"/><text x="80.2012%" y="95.50">bigi..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.19%)</title><rect x="84.3815%" y="37" width="0.1938%" height="15" fill="rgb(215,43,3)" fg:x="16543" fg:w="38"/><text x="84.6745%" y="47.50"></text></g><g><title>memset (244 instructions, 1.24%)</title><rect x="84.5754%" y="37" width="1.2446%" height="15" fill="rgb(238,154,13)" fg:x="16581" fg:w="244"/><text x="84.8683%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.57%)</title><rect x="84.3815%" y="53" width="1.5710%" height="15" fill="rgb(219,56,2)" fg:x="16543" fg:w="308"/><text x="84.6745%" y="63.50"></text></g><g><title>mp_init (323 instructions, 1.65%)</title><rect x="84.3815%" y="69" width="1.6475%" height="15" fill="rgb(233,0,4)" fg:x="16543" fg:w="323"/><text x="84.6745%" y="79.50"></text></g><g><title>mp_copy (39 instructions, 0.20%)</title><rect x="86.0291%" y="53" width="0.1989%" height="15" fill="rgb(235,30,7)" fg:x="16866" fg:w="39"/><text x="86.3220%" y="63.50"></text></g><g><title>mp_lshd (12 instructions, 0.06%)</title><rect x="86.2280%" y="53" width="0.0612%" height="15" fill="rgb(250,79,13)" fg:x="16905" fg:w="12"/><text x="86.5210%" y="63.50"></text></g><g><title>mp_clamp (11 instructions, 0.06%)</title><rect x="86.2892%" y="53" width="0.0561%" height="15" fill="rgb(211,146,34)" fg:x="16917" fg:w="11"/><text x="86.5822%" y="63.50"></text></g><g><title>mp_mul_2d (110 instructions, 0.56%)</title><rect x="86.0291%" y="69" width="0.5611%" height="15" fill="rgb(228,22,38)" fg:x="16866" fg:w="110"/><text x="86.3220%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.16%)</title><rect x="86.5902%" y="69" width="0.1581%" height="15" fill="rgb(235,168,5)" fg:x="16976" fg:w="31"/><text x="86.8831%" y="79.50"></text></g><g><title>bigint_lsh (519 instructions, 2.65%)</title><rect x="84.3815%" y="85" width="2.6473%" height="15" fill="rgb(221,155,16)" fg:x="16543" fg:w="519"/><text x="84.6745%" y="95.50">b..</text></g><g><title>B_lsh (1,421 instructions, 7.25%)</title><rect x="79.9082%" y="101" width="7.2482%" height="15" fill="rgb(215,215,53)" fg:x="15666" fg:w="1421"/><text x="80.2012%" y="111.50">B_lsh</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.19%)</title><rect x="87.1563%" y="37" width="0.1938%" height="15" fill="rgb(223,4,10)" fg:x="17087" fg:w="38"/><text x="87.4493%" y="47.50"></text></g><g><title>memset (244 instructions, 1.24%)</title><rect x="87.3502%" y="37" width="1.2446%" height="15" fill="rgb(234,103,6)" fg:x="17125" fg:w="244"/><text x="87.6431%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.57%)</title><rect x="87.1563%" y="53" width="1.5710%" height="15" fill="rgb(227,97,0)" fg:x="17087" fg:w="308"/><text x="87.4493%" y="63.50"></text></g><g><title>mp_init (323 instructions, 1.65%)</title><rect x="87.1563%" y="69" width="1.6475%" height="15" fill="rgb(234,150,53)" fg:x="17087" fg:w="323"/><text x="87.4493%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 2.45%)</title><rect x="88.8039%" y="53" width="2.4484%" height="15" fill="rgb(228,201,54)" fg:x="17410" fg:w="480"/><text x="89.0968%" y="63.50">m..</text></g><g><title>mp_set_i64 (494 instructions, 2.52%)</title><rect x="88.8039%" y="69" width="2.5198%" height="15" fill="rgb(222,22,37)" fg:x="17410" fg:w="494"/><text x="89.0968%" y="79.50">m..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.16%)</title><rect x="91.3236%" y="69" width="0.1581%" height="15" fill="rgb(237,53,32)" fg:x="17904" fg:w="31"/><text x="91.6166%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 4.54%)</title><rect x="87.1563%" y="85" width="4.5448%" height="15" fill="rgb(233,25,53)" fg:x="17087" fg:w="891"/><text x="87.4493%" y="95.50">bigi..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.19%)</title><rect x="91.7011%" y="37" width="0.1938%" height="15" fill="rgb(210,40,34)" fg:x="17978" fg:w="38"/><text x="91.9941%" y="47.50"></text></g><g><title>memset (244 instructions, 1.24%)</title><rect x="91.8949%" y="37" width="1.2446%" height="15" fill="rgb(241,220,44)" fg:x="18016" fg:w="244"/><text x="92.1879%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.57%)</title><rect x="91.7011%" y="53" width="1.5710%" height="15" fill="rgb(235,28,35)" fg:x="17978" fg:w="308"/><text x="91.9941%" y="63.50"></text></g><g><title>mp_init (323 instructions, 1.65%)</title><rect x="91.7011%" y="69" width="1.6475%" height="15" fill="rgb(210,56,17)" fg:x="17978" fg:w="323"/><text x="91.9941%" y="79.50"></text></g><g><title>mp_clamp (42 instructions, 0.21%)</title><rect x="93.3486%" y="37" width="0.2142%" height="15" fill="rgb(224,130,29)" fg:x="18301" fg:w="42"/><text x="93.6416%" y="47.50"></text></g><g><title>s_mp_add (104 instructions, 0.53%)</title><rect x="93.3486%" y="53" width="0.5305%" height="15" fill="rgb(235,212,8)" fg:x="18301" fg:w="104"/><text x="93.6416%" y="63.50"></text></g><g><title>mp_add (120 instructions, 0.61%)</title><rect x="93.3486%" y="69" width="0.6121%" height="15" fill="rgb(223,33,50)" fg:x="18301" fg:w="120"/><text x="93.6416%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.16%)</title><rect x="93.9607%" y="69" width="0.1581%" height="15" fill="rgb(219,149,13)" fg:x="18421" fg:w="31"/><text x="94.2537%" y="79.50"></text></g><g><title>bigint_add (538 instructions, 2.74%)</title><rect x="91.7011%" y="85" width="2.7442%" height="15" fill="rgb(250,156,29)" fg:x="17978" fg:w="538"/><text x="91.9941%" y="95.50">b..</text></g><g><title>mp_count_bits (6 instructions, 0.03%)</title><rect x="94.4453%" y="69" width="0.0306%" height="15" fill="rgb(216,193,19)" fg:x="18516" fg:w="6"/><text x="94.7383%" y="79.50"></text></g><g><title>bigint_2complement_bits (39 instructions, 0.20%)</title><rect x="94.4453%" y="85" width="0.1989%" height="15" fill="rgb(216,135,14)" fg:x="18516" fg:w="39"/><text x="94.7383%" y="95.50"></text></g><g><title>mp_get_mag_u32 (12 instructions, 0.06%)</title><rect x="94.6442%" y="53" width="0.0612%" height="15" fill="rgb(241,47,5)" fg:x="18555" fg:w="12"/><text x="94.9372%" y="63.50"></text></g><g><title>mp_get_i32 (23 instructions, 0.12%)</title><rect x="94.6442%" y="69" width="0.1173%" height="15" fill="rgb(233,42,35)" fg:x="18555" fg:w="23"/><text x="94.9372%" y="79.50"></text></g><g><title>bigint_to_word32_wrap (34 instructions, 0.17%)</title><rect x="94.6442%" y="85" width="0.1734%" height="15" fill="rgb(231,13,6)" fg:x="18555" fg:w="34"/><text x="94.9372%" y="95.50"></text></g><g><title>B_add (1,529 instructions, 7.80%)</title><rect x="87.1563%" y="101" width="7.7990%" height="15" fill="rgb(207,181,40)" fg:x="17087" fg:w="1529"/><text x="87.4493%" y="111.50">B_add</text></g><g><title>from_word128_ptr (2,977 instructions, 15.18%)</title><rect x="79.9082%" y="117" width="15.1849%" height="15" fill="rgb(254,173,49)" fg:x="15666" fg:w="2977"/><text x="80.2012%" y="127.50">from_word128_ptr</text></g><g><title>cycle_refunded (2,990 instructions, 15.25%)</title><rect x="79.9082%" y="133" width="15.2512%" height="15" fill="rgb(221,1,38)" fg:x="15666" fg:w="2990"/><text x="80.2012%" y="143.50">cycle_refunded</text></g><g><title>@getSystemRefund (2,992 instructions, 15.26%)</title><rect x="79.9082%" y="149" width="15.2614%" height="15" fill="rgb(206,124,46)" fg:x="15666" fg:w="2992"/><text x="80.2012%" y="159.50">@getSystemRefund</text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="95.1696%" y="149" width="0.1326%" height="15" fill="rgb(249,21,11)" fg:x="18658" fg:w="26"/><text x="95.4626%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.13%)</title><rect x="95.3022%" y="133" width="0.1326%" height="15" fill="rgb(222,201,40)" fg:x="18684" fg:w="26"/><text x="95.5952%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.21%)</title><rect x="95.3022%" y="149" width="0.2091%" height="15" fill="rgb(235,61,29)" fg:x="18684" fg:w="41"/><text x="95.5952%" y="159.50"></text></g><g><title>opt_inject (14 instructions, 0.07%)</title><rect x="95.5113%" y="149" width="0.0714%" height="15" fill="rgb(219,207,3)" fg:x="18725" fg:w="14"/><text x="95.8043%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="95.5828%" y="133" width="0.0153%" height="15" fill="rgb(222,56,46)" fg:x="18739" fg:w="3"/><text x="95.8757%" y="143.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.07%)</title><rect x="95.5981%" y="85" width="0.0714%" height="15" fill="rgb(239,76,54)" fg:x="18742" fg:w="14"/><text x="95.8910%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="95.6695%" y="69" width="0.1734%" height="15" fill="rgb(231,124,27)" fg:x="18756" fg:w="34"/><text x="95.9624%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="95.6695%" y="85" width="0.1836%" height="15" fill="rgb(249,195,6)" fg:x="18756" fg:w="36"/><text x="95.9624%" y="95.50"></text></g><g><title>memcpy (63 instructions, 0.32%)</title><rect x="95.8531%" y="85" width="0.3213%" height="15" fill="rgb(237,174,47)" fg:x="18792" fg:w="63"/><text x="96.1461%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.17%)</title><rect x="96.1744%" y="69" width="0.1734%" height="15" fill="rgb(206,201,31)" fg:x="18855" fg:w="34"/><text x="96.4674%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.18%)</title><rect x="96.1744%" y="85" width="0.1836%" height="15" fill="rgb(231,57,52)" fg:x="18855" fg:w="36"/><text x="96.4674%" y="95.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.02%)</title><rect x="96.3581%" y="85" width="0.0204%" height="15" fill="rgb(248,177,22)" fg:x="18891" fg:w="4"/><text x="96.6510%" y="95.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 1.10%)</title><rect x="95.5981%" y="101" width="1.1018%" height="15" fill="rgb(215,211,37)" fg:x="18742" fg:w="216"/><text x="95.8910%" y="111.50"></text></g><g><title>reply_with_data (30 instructions, 0.15%)</title><rect x="96.6998%" y="101" width="0.1530%" height="15" fill="rgb(241,128,51)" fg:x="18958" fg:w="30"/><text x="96.9928%" y="111.50"></text></g><g><title>$lambda (251 instructions, 1.28%)</title><rect x="95.5981%" y="117" width="1.2803%" height="15" fill="rgb(227,165,31)" fg:x="18742" fg:w="251"/><text x="95.8910%" y="127.50"></text></g><g><title>$lambda (258 instructions, 1.32%)</title><rect x="95.5981%" y="133" width="1.3160%" height="15" fill="rgb(228,167,24)" fg:x="18742" fg:w="258"/><text x="95.8910%" y="143.50"></text></g><g><title>anon-func-349.15 (284 instructions, 1.45%)</title><rect x="95.5828%" y="149" width="1.4486%" height="15" fill="rgb(228,143,12)" fg:x="18739" fg:w="284"/><text x="95.8757%" y="159.50"></text></g><g><title>fulfill (3,411 instructions, 17.40%)</title><rect x="79.9082%" y="165" width="17.3986%" height="15" fill="rgb(249,149,8)" fg:x="15666" fg:w="3411"/><text x="80.2012%" y="175.50">fulfill</text></g><g><title>$lambda (3,419 instructions, 17.44%)</title><rect x="79.9082%" y="181" width="17.4394%" height="15" fill="rgb(243,35,44)" fg:x="15666" fg:w="3419"/><text x="80.2012%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.26%)</title><rect x="97.3476%" y="181" width="0.2550%" height="15" fill="rgb(246,89,9)" fg:x="19085" fg:w="50"/><text x="97.6406%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.07%)</title><rect x="97.6027%" y="181" width="0.0714%" height="15" fill="rgb(233,213,13)" fg:x="19135" fg:w="14"/><text x="97.8956%" y="191.50"></text></g><g><title>all (19,605 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="19605"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (4,477 instructions, 22.84%)</title><rect x="77.1640%" y="197" width="22.8360%" height="15" fill="rgb(239,167,4)" fg:x="15128" fg:w="4477"/><text x="77.4570%" y="207.50">@callback&lt;u&gt;</text></g></svg></svg>