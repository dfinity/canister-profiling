<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Subscribe Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="28593"><g><title>trans_state5 (10 instructions, 0.03%)</title><rect x="0.0000%" y="117" width="0.0350%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="0.0350%" y="117" width="0.1959%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="56"/><text x="0.3279%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="0.2308%" y="101" width="0.1749%" height="15" fill="rgb(221,193,54)" fg:x="66" fg:w="50"/><text x="0.5238%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="0.4057%" y="101" width="0.1959%" height="15" fill="rgb(248,212,6)" fg:x="116" fg:w="56"/><text x="0.6987%" y="111.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="0.6015%" y="101" width="0.1749%" height="15" fill="rgb(208,68,35)" fg:x="172" fg:w="50"/><text x="0.8945%" y="111.50"></text></g><g><title>sleb128_decode (64 instructions, 0.22%)</title><rect x="0.7764%" y="101" width="0.2238%" height="15" fill="rgb(232,128,0)" fg:x="222" fg:w="64"/><text x="1.0694%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="1.0002%" y="101" width="0.0420%" height="15" fill="rgb(207,160,47)" fg:x="286" fg:w="12"/><text x="1.2932%" y="111.50"></text></g><g><title>sleb128_decode (64 instructions, 0.22%)</title><rect x="1.0422%" y="101" width="0.2238%" height="15" fill="rgb(228,23,34)" fg:x="298" fg:w="64"/><text x="1.3352%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="1.2660%" y="101" width="0.0420%" height="15" fill="rgb(218,30,26)" fg:x="362" fg:w="12"/><text x="1.5590%" y="111.50"></text></g><g><title>parse_idl_header (435 instructions, 1.52%)</title><rect x="0.2308%" y="117" width="1.5214%" height="15" fill="rgb(220,122,19)" fg:x="66" fg:w="435"/><text x="0.5238%" y="127.50"></text></g><g><title>memset (6 instructions, 0.02%)</title><rect x="1.7522%" y="101" width="0.0210%" height="15" fill="rgb(250,228,42)" fg:x="501" fg:w="6"/><text x="2.0451%" y="111.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.05%)</title><rect x="1.7522%" y="117" width="0.0525%" height="15" fill="rgb(240,193,28)" fg:x="501" fg:w="15"/><text x="2.0451%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="1.8046%" y="117" width="0.1749%" height="15" fill="rgb(216,20,37)" fg:x="516" fg:w="50"/><text x="2.0976%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.22%)</title><rect x="1.9795%" y="117" width="0.2238%" height="15" fill="rgb(206,188,39)" fg:x="566" fg:w="64"/><text x="2.2725%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="2.2033%" y="101" width="0.1749%" height="15" fill="rgb(217,207,13)" fg:x="630" fg:w="50"/><text x="2.4963%" y="111.50"></text></g><g><title>utf8_validate (257 instructions, 0.90%)</title><rect x="2.3782%" y="101" width="0.8988%" height="15" fill="rgb(231,73,38)" fg:x="680" fg:w="257"/><text x="2.6712%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="3.2770%" y="85" width="0.1959%" height="15" fill="rgb(225,20,46)" fg:x="937" fg:w="56"/><text x="3.5700%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.24%)</title><rect x="3.2770%" y="101" width="0.2413%" height="15" fill="rgb(210,31,41)" fg:x="937" fg:w="69"/><text x="3.5700%" y="111.50"></text></g><g><title>memcpy (184 instructions, 0.64%)</title><rect x="3.5183%" y="101" width="0.6435%" height="15" fill="rgb(221,200,47)" fg:x="1006" fg:w="184"/><text x="3.8113%" y="111.50"></text></g><g><title>@deserialize_go&lt;t&gt; (629 instructions, 2.20%)</title><rect x="2.2033%" y="117" width="2.1998%" height="15" fill="rgb(226,26,5)" fg:x="630" fg:w="629"/><text x="2.4963%" y="127.50">@..</text></g><g><title>sleb128_decode (64 instructions, 0.22%)</title><rect x="4.4032%" y="117" width="0.2238%" height="15" fill="rgb(249,33,26)" fg:x="1259" fg:w="64"/><text x="4.6961%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="4.6270%" y="101" width="0.1749%" height="15" fill="rgb(235,183,28)" fg:x="1323" fg:w="50"/><text x="4.9200%" y="111.50"></text></g><g><title>utf8_validate (236 instructions, 0.83%)</title><rect x="4.8019%" y="101" width="0.8254%" height="15" fill="rgb(221,5,38)" fg:x="1373" fg:w="236"/><text x="5.0948%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="5.6273%" y="85" width="0.1959%" height="15" fill="rgb(247,18,42)" fg:x="1609" fg:w="56"/><text x="5.9202%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.24%)</title><rect x="5.6273%" y="101" width="0.2413%" height="15" fill="rgb(241,131,45)" fg:x="1609" fg:w="69"/><text x="5.9202%" y="111.50"></text></g><g><title>memcpy (160 instructions, 0.56%)</title><rect x="5.8686%" y="101" width="0.5596%" height="15" fill="rgb(249,31,29)" fg:x="1678" fg:w="160"/><text x="6.1615%" y="111.50"></text></g><g><title>@deserialize_go&lt;t&gt; (584 instructions, 2.04%)</title><rect x="4.6270%" y="117" width="2.0425%" height="15" fill="rgb(225,111,53)" fg:x="1323" fg:w="584"/><text x="4.9200%" y="127.50"></text></g><g><title>motoko_rts::text::blob_of_text::hab89cecbc07f3a4d (11 instructions, 0.04%)</title><rect x="6.6695%" y="85" width="0.0385%" height="15" fill="rgb(238,160,17)" fg:x="1907" fg:w="11"/><text x="6.9624%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="6.7079%" y="85" width="0.1959%" height="15" fill="rgb(214,148,48)" fg:x="1918" fg:w="56"/><text x="7.0009%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="6.9038%" y="85" width="0.1959%" height="15" fill="rgb(232,36,49)" fg:x="1974" fg:w="56"/><text x="7.1968%" y="95.50"></text></g><g><title>memcpy (70 instructions, 0.24%)</title><rect x="7.0996%" y="85" width="0.2448%" height="15" fill="rgb(209,103,24)" fg:x="2030" fg:w="70"/><text x="7.3926%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="7.3445%" y="85" width="0.1959%" height="15" fill="rgb(229,88,8)" fg:x="2100" fg:w="56"/><text x="7.6374%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="7.5403%" y="85" width="0.2693%" height="15" fill="rgb(213,181,19)" fg:x="2156" fg:w="77"/><text x="7.8333%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="7.8096%" y="85" width="0.3847%" height="15" fill="rgb(254,191,54)" fg:x="2233" fg:w="110"/><text x="8.1026%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="8.1943%" y="85" width="0.2693%" height="15" fill="rgb(241,83,37)" fg:x="2343" fg:w="77"/><text x="8.4873%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="8.4636%" y="85" width="0.3847%" height="15" fill="rgb(233,36,39)" fg:x="2420" fg:w="110"/><text x="8.7566%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="8.8483%" y="85" width="0.3847%" height="15" fill="rgb(226,3,54)" fg:x="2530" fg:w="110"/><text x="9.1413%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="9.2330%" y="85" width="0.2693%" height="15" fill="rgb(245,192,40)" fg:x="2640" fg:w="77"/><text x="9.5260%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="9.5023%" y="85" width="0.3847%" height="15" fill="rgb(238,167,29)" fg:x="2717" fg:w="110"/><text x="9.7953%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="9.8870%" y="85" width="0.2693%" height="15" fill="rgb(232,182,51)" fg:x="2827" fg:w="77"/><text x="10.1800%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="10.1563%" y="85" width="0.3847%" height="15" fill="rgb(231,60,39)" fg:x="2904" fg:w="110"/><text x="10.4493%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="10.5410%" y="85" width="0.3847%" height="15" fill="rgb(208,69,12)" fg:x="3014" fg:w="110"/><text x="10.8340%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="10.9258%" y="85" width="0.2693%" height="15" fill="rgb(235,93,37)" fg:x="3124" fg:w="77"/><text x="11.2187%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="11.1950%" y="85" width="0.3847%" height="15" fill="rgb(213,116,39)" fg:x="3201" fg:w="110"/><text x="11.4880%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (77 instructions, 0.27%)</title><rect x="11.5798%" y="85" width="0.2693%" height="15" fill="rgb(222,207,29)" fg:x="3311" fg:w="77"/><text x="11.8727%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h3fb60443f83d9965 (110 instructions, 0.38%)</title><rect x="11.8491%" y="85" width="0.3847%" height="15" fill="rgb(206,96,30)" fg:x="3388" fg:w="110"/><text x="12.1420%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="12.2338%" y="85" width="0.1959%" height="15" fill="rgb(218,138,4)" fg:x="3498" fg:w="56"/><text x="12.5267%" y="95.50"></text></g><g><title>memcmp (629 instructions, 2.20%)</title><rect x="12.4296%" y="85" width="2.1998%" height="15" fill="rgb(250,191,14)" fg:x="3554" fg:w="629"/><text x="12.7226%" y="95.50">m..</text></g><g><title>blob_of_principal (6,489 instructions, 22.69%)</title><rect x="6.6695%" y="101" width="22.6944%" height="15" fill="rgb(239,60,40)" fg:x="1907" fg:w="6489"/><text x="6.9624%" y="111.50">blob_of_principal</text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="29.3638%" y="85" width="0.0175%" height="15" fill="rgb(206,27,48)" fg:x="8396" fg:w="5"/><text x="29.6568%" y="95.50"></text></g><g><title>@new_async (194 instructions, 0.68%)</title><rect x="29.3638%" y="101" width="0.6785%" height="15" fill="rgb(225,35,8)" fg:x="8396" fg:w="194"/><text x="29.6568%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="30.0423%" y="101" width="0.1959%" height="15" fill="rgb(250,213,24)" fg:x="8590" fg:w="56"/><text x="30.3353%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_array::h817c463cc2b856af (60 instructions, 0.21%)</title><rect x="30.2382%" y="85" width="0.2098%" height="15" fill="rgb(247,123,22)" fg:x="8646" fg:w="60"/><text x="30.5311%" y="95.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h56833a827c874225 (9 instructions, 0.03%)</title><rect x="30.4480%" y="85" width="0.0315%" height="15" fill="rgb(231,138,38)" fg:x="8706" fg:w="9"/><text x="30.7410%" y="95.50"></text></g><g><title>remember_continuation (3,993 instructions, 13.96%)</title><rect x="30.2382%" y="101" width="13.9650%" height="15" fill="rgb(231,145,46)" fg:x="8646" fg:w="3993"/><text x="30.5311%" y="111.50">remember_continuat..</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="44.2031%" y="101" width="0.0595%" height="15" fill="rgb(251,118,11)" fg:x="12639" fg:w="17"/><text x="44.4961%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.14%)</title><rect x="44.2626%" y="101" width="0.1399%" height="15" fill="rgb(217,147,25)" fg:x="12656" fg:w="40"/><text x="44.5556%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.12%)</title><rect x="44.4025%" y="101" width="0.1154%" height="15" fill="rgb(247,81,37)" fg:x="12696" fg:w="33"/><text x="44.6954%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.14%)</title><rect x="44.5179%" y="101" width="0.1399%" height="15" fill="rgb(209,12,38)" fg:x="12729" fg:w="40"/><text x="44.8109%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="44.6578%" y="101" width="0.1959%" height="15" fill="rgb(227,1,9)" fg:x="12769" fg:w="56"/><text x="44.9508%" y="111.50"></text></g><g><title>memcpy (114 instructions, 0.40%)</title><rect x="44.8536%" y="101" width="0.3987%" height="15" fill="rgb(248,47,43)" fg:x="12825" fg:w="114"/><text x="45.1466%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="45.2523%" y="101" width="0.1959%" height="15" fill="rgb(221,10,30)" fg:x="12939" fg:w="56"/><text x="45.5453%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="45.4482%" y="101" width="0.0595%" height="15" fill="rgb(210,229,1)" fg:x="12995" fg:w="17"/><text x="45.7412%" y="111.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="45.5076%" y="85" width="0.0385%" height="15" fill="rgb(222,148,37)" fg:x="13012" fg:w="11"/><text x="45.8006%" y="95.50"></text></g><g><title>memcpy (74 instructions, 0.26%)</title><rect x="45.5461%" y="69" width="0.2588%" height="15" fill="rgb(234,67,33)" fg:x="13023" fg:w="74"/><text x="45.8391%" y="79.50"></text></g><g><title>text_to_buf (102 instructions, 0.36%)</title><rect x="45.5461%" y="85" width="0.3567%" height="15" fill="rgb(247,98,35)" fg:x="13023" fg:w="102"/><text x="45.8391%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (160 instructions, 0.56%)</title><rect x="45.5076%" y="101" width="0.5596%" height="15" fill="rgb(247,138,52)" fg:x="13012" fg:w="160"/><text x="45.8006%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.12%)</title><rect x="46.0672%" y="101" width="0.1154%" height="15" fill="rgb(213,79,30)" fg:x="13172" fg:w="33"/><text x="46.3602%" y="111.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="46.1826%" y="101" width="0.0385%" height="15" fill="rgb(246,177,23)" fg:x="13205" fg:w="11"/><text x="46.4756%" y="111.50"></text></g><g><title>memcpy (74 instructions, 0.26%)</title><rect x="46.2211%" y="101" width="0.2588%" height="15" fill="rgb(230,62,27)" fg:x="13216" fg:w="74"/><text x="46.5141%" y="111.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="46.4799%" y="85" width="0.0385%" height="15" fill="rgb(216,154,8)" fg:x="13290" fg:w="11"/><text x="46.7729%" y="95.50"></text></g><g><title>memcpy (78 instructions, 0.27%)</title><rect x="46.5184%" y="69" width="0.2728%" height="15" fill="rgb(244,35,45)" fg:x="13301" fg:w="78"/><text x="46.8113%" y="79.50"></text></g><g><title>text_to_buf (106 instructions, 0.37%)</title><rect x="46.5184%" y="85" width="0.3707%" height="15" fill="rgb(251,115,12)" fg:x="13301" fg:w="106"/><text x="46.8113%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (164 instructions, 0.57%)</title><rect x="46.4799%" y="101" width="0.5736%" height="15" fill="rgb(240,54,50)" fg:x="13290" fg:w="164"/><text x="46.7729%" y="111.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="47.0535%" y="85" width="0.0175%" height="15" fill="rgb(233,84,52)" fg:x="13454" fg:w="5"/><text x="47.3464%" y="95.50"></text></g><g><title>@add_cycles (21 instructions, 0.07%)</title><rect x="47.0535%" y="101" width="0.0734%" height="15" fill="rgb(207,117,47)" fg:x="13454" fg:w="21"/><text x="47.3464%" y="111.50"></text></g><g><title>enqueue (90 instructions, 0.31%)</title><rect x="47.1269%" y="85" width="0.3148%" height="15" fill="rgb(249,43,39)" fg:x="13475" fg:w="90"/><text x="47.4199%" y="95.50"></text></g><g><title>$lambda.3 (136 instructions, 0.48%)</title><rect x="47.1269%" y="101" width="0.4756%" height="15" fill="rgb(209,38,44)" fg:x="13475" fg:w="136"/><text x="47.4199%" y="111.50"></text></g><g><title>$lambda (20,987 instructions, 73.40%)</title><rect x="6.6695%" y="117" width="73.3991%" height="15" fill="rgb(236,212,23)" fg:x="1907" fg:w="20987"/><text x="6.9624%" y="127.50">$lambda</text></g><g><title>schedule_copying_gc (108 instructions, 0.38%)</title><rect x="80.0685%" y="117" width="0.3777%" height="15" fill="rgb(242,79,21)" fg:x="22894" fg:w="108"/><text x="80.3615%" y="127.50"></text></g><g><title>trans_state4 (16 instructions, 0.06%)</title><rect x="80.4463%" y="117" width="0.0560%" height="15" fill="rgb(211,96,35)" fg:x="23002" fg:w="16"/><text x="80.7392%" y="127.50"></text></g><g><title>init.1 (24,901 instructions, 87.09%)</title><rect x="0.0000%" y="133" width="87.0877%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="24901"/><text x="0.2930%" y="143.50">init.1</text></g><g><title>trans_state5 (10 instructions, 0.03%)</title><rect x="87.0877%" y="117" width="0.0350%" height="15" fill="rgb(211,81,21)" fg:x="24901" fg:w="10"/><text x="87.3807%" y="127.50"></text></g><g><title>recall_continuation (49 instructions, 0.17%)</title><rect x="87.1227%" y="117" width="0.1714%" height="15" fill="rgb(208,190,38)" fg:x="24911" fg:w="49"/><text x="87.4157%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="87.2941%" y="117" width="0.1959%" height="15" fill="rgb(235,213,38)" fg:x="24960" fg:w="56"/><text x="87.5871%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="87.4899%" y="85" width="0.1749%" height="15" fill="rgb(237,122,38)" fg:x="25016" fg:w="50"/><text x="87.7829%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="87.6648%" y="85" width="0.1959%" height="15" fill="rgb(244,218,35)" fg:x="25066" fg:w="56"/><text x="87.9578%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="87.8607%" y="85" width="0.1749%" height="15" fill="rgb(240,68,47)" fg:x="25122" fg:w="50"/><text x="88.1536%" y="95.50"></text></g><g><title>parse_idl_header (245 instructions, 0.86%)</title><rect x="87.4899%" y="101" width="0.8569%" height="15" fill="rgb(210,16,53)" fg:x="25016" fg:w="245"/><text x="87.7829%" y="111.50"></text></g><g><title>memset (6 instructions, 0.02%)</title><rect x="88.3468%" y="85" width="0.0210%" height="15" fill="rgb(235,124,12)" fg:x="25261" fg:w="6"/><text x="88.6398%" y="95.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.05%)</title><rect x="88.3468%" y="101" width="0.0525%" height="15" fill="rgb(224,169,11)" fg:x="25261" fg:w="15"/><text x="88.6398%" y="111.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="88.3993%" y="101" width="0.1749%" height="15" fill="rgb(250,166,2)" fg:x="25276" fg:w="50"/><text x="88.6922%" y="111.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 1.66%)</title><rect x="87.4899%" y="117" width="1.6577%" height="15" fill="rgb(242,216,29)" fg:x="25016" fg:w="474"/><text x="87.7829%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="89.1512%" y="37" width="0.1959%" height="15" fill="rgb(230,116,27)" fg:x="25491" fg:w="56"/><text x="89.4442%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.24%)</title><rect x="89.3470%" y="37" width="0.2448%" height="15" fill="rgb(228,99,48)" fg:x="25547" fg:w="70"/><text x="89.6400%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.20%)</title><rect x="89.5919%" y="37" width="0.1959%" height="15" fill="rgb(253,11,6)" fg:x="25617" fg:w="56"/><text x="89.8848%" y="47.50"></text></g><g><title>$lambda.14 (1,285 instructions, 4.49%)</title><rect x="89.1512%" y="53" width="4.4941%" height="15" fill="rgb(247,143,39)" fg:x="25491" fg:w="1285"/><text x="89.4442%" y="63.50">$lam..</text></g><g><title>$lambda.23 (1,301 instructions, 4.55%)</title><rect x="89.1512%" y="69" width="4.5501%" height="15" fill="rgb(236,97,10)" fg:x="25491" fg:w="1301"/><text x="89.4442%" y="79.50">$lam..</text></g><g><title>anon-func-352.15 (1,343 instructions, 4.70%)</title><rect x="89.1477%" y="85" width="4.6970%" height="15" fill="rgb(233,208,19)" fg:x="25490" fg:w="1343"/><text x="89.4407%" y="95.50">anon..</text></g><g><title>fulfill (1,466 instructions, 5.13%)</title><rect x="89.1477%" y="101" width="5.1271%" height="15" fill="rgb(216,164,2)" fg:x="25490" fg:w="1466"/><text x="89.4407%" y="111.50">fulfi..</text></g><g><title>$lambda.20 (1,483 instructions, 5.19%)</title><rect x="89.1477%" y="117" width="5.1866%" height="15" fill="rgb(220,129,5)" fg:x="25490" fg:w="1483"/><text x="89.4407%" y="127.50">$lamb..</text></g><g><title>schedule_copying_gc (108 instructions, 0.38%)</title><rect x="94.3343%" y="117" width="0.3777%" height="15" fill="rgb(242,17,10)" fg:x="26973" fg:w="108"/><text x="94.6272%" y="127.50"></text></g><g><title>trans_state4 (16 instructions, 0.06%)</title><rect x="94.7120%" y="117" width="0.0560%" height="15" fill="rgb(242,107,0)" fg:x="27081" fg:w="16"/><text x="95.0050%" y="127.50"></text></g><g><title>all (28,593 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="28593"/><text x="0.2930%" y="159.50"></text></g><g><title>@callback&lt;u&gt; (3,692 instructions, 12.91%)</title><rect x="87.0877%" y="133" width="12.9123%" height="15" fill="rgb(233,223,10)" fg:x="24901" fg:w="3692"/><text x="87.3807%" y="143.50">@callback&lt;u&gt;</text></g></svg></svg>