<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Subscribe Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="16644"><g><title>trans_state5 (9 instructions, 0.05%)</title><rect x="0.0000%" y="149" width="0.0541%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2930%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="0.0541%" y="149" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="3"/><text x="0.3470%" y="159.50"></text></g><g><title>@reset_refund (3 instructions, 0.02%)</title><rect x="0.0721%" y="149" width="0.0180%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="3"/><text x="0.3651%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="0.0901%" y="133" width="0.2043%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="34"/><text x="0.3831%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="0.0901%" y="149" width="0.2163%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="36"/><text x="0.3831%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="0.3064%" y="117" width="0.3064%" height="15" fill="rgb(232,128,0)" fg:x="51" fg:w="51"/><text x="0.5994%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="0.6128%" y="117" width="0.2043%" height="15" fill="rgb(207,160,47)" fg:x="102" fg:w="34"/><text x="0.9058%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="0.8171%" y="117" width="0.3064%" height="15" fill="rgb(228,23,34)" fg:x="136" fg:w="51"/><text x="1.1101%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.41%)</title><rect x="1.1235%" y="117" width="0.4086%" height="15" fill="rgb(218,30,26)" fg:x="187" fg:w="68"/><text x="1.4165%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.41%)</title><rect x="1.5321%" y="117" width="0.4086%" height="15" fill="rgb(220,122,19)" fg:x="255" fg:w="68"/><text x="1.8251%" y="127.50"></text></g><g><title>parse_idl_header (373 instructions, 2.24%)</title><rect x="0.3064%" y="133" width="2.2410%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="373"/><text x="0.5994%" y="143.50">p..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.05%)</title><rect x="2.5475%" y="133" width="0.0541%" height="15" fill="rgb(240,193,28)" fg:x="424" fg:w="9"/><text x="2.8404%" y="143.50"></text></g><g><title>memset (4 instructions, 0.02%)</title><rect x="2.6015%" y="117" width="0.0240%" height="15" fill="rgb(216,20,37)" fg:x="433" fg:w="4"/><text x="2.8945%" y="127.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.11%)</title><rect x="2.6015%" y="133" width="0.1142%" height="15" fill="rgb(206,188,39)" fg:x="433" fg:w="19"/><text x="2.8945%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="2.7157%" y="133" width="0.3064%" height="15" fill="rgb(217,207,13)" fg:x="452" fg:w="51"/><text x="3.0087%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.41%)</title><rect x="3.0221%" y="133" width="0.4086%" height="15" fill="rgb(231,73,38)" fg:x="503" fg:w="68"/><text x="3.3151%" y="143.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="3.4307%" y="133" width="0.0180%" height="15" fill="rgb(225,20,46)" fg:x="571" fg:w="3"/><text x="3.7236%" y="143.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="3.4487%" y="133" width="0.0180%" height="15" fill="rgb(210,31,41)" fg:x="574" fg:w="3"/><text x="3.7417%" y="143.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="3.4667%" y="133" width="0.0180%" height="15" fill="rgb(221,200,47)" fg:x="577" fg:w="3"/><text x="3.7597%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="3.4847%" y="117" width="0.3064%" height="15" fill="rgb(226,26,5)" fg:x="580" fg:w="51"/><text x="3.7777%" y="127.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (225 instructions, 1.35%)</title><rect x="3.7912%" y="101" width="1.3518%" height="15" fill="rgb(249,33,26)" fg:x="631" fg:w="225"/><text x="4.0841%" y="111.50"></text></g><g><title>utf8_validate (242 instructions, 1.45%)</title><rect x="3.7912%" y="117" width="1.4540%" height="15" fill="rgb(235,183,28)" fg:x="631" fg:w="242"/><text x="4.0841%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="5.2451%" y="85" width="0.2043%" height="15" fill="rgb(221,5,38)" fg:x="873" fg:w="34"/><text x="5.5381%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.25%)</title><rect x="5.2451%" y="101" width="0.2463%" height="15" fill="rgb(247,18,42)" fg:x="873" fg:w="41"/><text x="5.5381%" y="111.50"></text></g><g><title>memcpy (176 instructions, 1.06%)</title><rect x="5.4915%" y="101" width="1.0574%" height="15" fill="rgb(241,131,45)" fg:x="914" fg:w="176"/><text x="5.7844%" y="111.50"></text></g><g><title>text_of_ptr_size (227 instructions, 1.36%)</title><rect x="5.2451%" y="117" width="1.3639%" height="15" fill="rgb(249,31,29)" fg:x="873" fg:w="227"/><text x="5.5381%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (557 instructions, 3.35%)</title><rect x="3.4847%" y="133" width="3.3466%" height="15" fill="rgb(225,111,53)" fg:x="580" fg:w="557"/><text x="3.7777%" y="143.50">@d..</text></g><g><title>sleb128_decode (68 instructions, 0.41%)</title><rect x="6.8313%" y="133" width="0.4086%" height="15" fill="rgb(238,160,17)" fg:x="1137" fg:w="68"/><text x="7.1243%" y="143.50"></text></g><g><title>set_local %i0 (3 instructions, 0.02%)</title><rect x="7.2398%" y="133" width="0.0180%" height="15" fill="rgb(214,148,48)" fg:x="1205" fg:w="3"/><text x="7.5328%" y="143.50"></text></g><g><title>set_local %i1 (3 instructions, 0.02%)</title><rect x="7.2579%" y="133" width="0.0180%" height="15" fill="rgb(232,36,49)" fg:x="1208" fg:w="3"/><text x="7.5508%" y="143.50"></text></g><g><title>set_local %i2 (3 instructions, 0.02%)</title><rect x="7.2759%" y="133" width="0.0180%" height="15" fill="rgb(209,103,24)" fg:x="1211" fg:w="3"/><text x="7.5689%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="7.2939%" y="117" width="0.3064%" height="15" fill="rgb(229,88,8)" fg:x="1214" fg:w="51"/><text x="7.5869%" y="127.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (203 instructions, 1.22%)</title><rect x="7.6003%" y="101" width="1.2197%" height="15" fill="rgb(213,181,19)" fg:x="1265" fg:w="203"/><text x="7.8933%" y="111.50"></text></g><g><title>utf8_validate (220 instructions, 1.32%)</title><rect x="7.6003%" y="117" width="1.3218%" height="15" fill="rgb(254,191,54)" fg:x="1265" fg:w="220"/><text x="7.8933%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="8.9221%" y="85" width="0.2043%" height="15" fill="rgb(241,83,37)" fg:x="1485" fg:w="34"/><text x="9.2151%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.25%)</title><rect x="8.9221%" y="101" width="0.2463%" height="15" fill="rgb(233,36,39)" fg:x="1485" fg:w="41"/><text x="9.2151%" y="111.50"></text></g><g><title>memcpy (152 instructions, 0.91%)</title><rect x="9.1685%" y="101" width="0.9132%" height="15" fill="rgb(226,3,54)" fg:x="1526" fg:w="152"/><text x="9.4614%" y="111.50"></text></g><g><title>text_of_ptr_size (203 instructions, 1.22%)</title><rect x="8.9221%" y="117" width="1.2197%" height="15" fill="rgb(245,192,40)" fg:x="1485" fg:w="203"/><text x="9.2151%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (511 instructions, 3.07%)</title><rect x="7.2939%" y="133" width="3.0702%" height="15" fill="rgb(238,167,29)" fg:x="1214" fg:w="511"/><text x="7.5869%" y="143.50">@d..</text></g><g><title>@deserialize&lt;tt&gt; (1,935 instructions, 11.63%)</title><rect x="0.3064%" y="149" width="11.6258%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="1935"/><text x="0.5994%" y="159.50">@deserialize&lt;t..</text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="11.9322%" y="149" width="0.1562%" height="15" fill="rgb(231,60,39)" fg:x="1986" fg:w="26"/><text x="12.2252%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="12.0884%" y="133" width="0.1562%" height="15" fill="rgb(208,69,12)" fg:x="2012" fg:w="26"/><text x="12.3814%" y="143.50"></text></g><g><title>motoko_rts::text::blob_of_text::hbedf98d705bae9d6 (9 instructions, 0.05%)</title><rect x="12.2447%" y="117" width="0.0541%" height="15" fill="rgb(235,93,37)" fg:x="2038" fg:w="9"/><text x="12.5376%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="12.2987%" y="117" width="0.2043%" height="15" fill="rgb(213,116,39)" fg:x="2047" fg:w="34"/><text x="12.5917%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="12.5030%" y="117" width="0.2043%" height="15" fill="rgb(222,207,29)" fg:x="2081" fg:w="34"/><text x="12.7960%" y="127.50"></text></g><g><title>memcpy (63 instructions, 0.38%)</title><rect x="12.7073%" y="117" width="0.3785%" height="15" fill="rgb(206,96,30)" fg:x="2115" fg:w="63"/><text x="13.0003%" y="127.50"></text></g><g><title>compute_crc32 (291 instructions, 1.75%)</title><rect x="13.0858%" y="101" width="1.7484%" height="15" fill="rgb(218,138,4)" fg:x="2178" fg:w="291"/><text x="13.3788%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="14.8342%" y="101" width="0.2043%" height="15" fill="rgb(250,191,14)" fg:x="2469" fg:w="34"/><text x="15.1271%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="15.0385%" y="101" width="0.4566%" height="15" fill="rgb(239,60,40)" fg:x="2503" fg:w="76"/><text x="15.3314%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="15.4951%" y="101" width="0.6609%" height="15" fill="rgb(206,27,48)" fg:x="2579" fg:w="110"/><text x="15.7880%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="16.1560%" y="101" width="0.4566%" height="15" fill="rgb(225,35,8)" fg:x="2689" fg:w="76"/><text x="16.4489%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="16.6126%" y="101" width="0.6609%" height="15" fill="rgb(250,213,24)" fg:x="2765" fg:w="110"/><text x="16.9056%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="17.2735%" y="101" width="0.6609%" height="15" fill="rgb(247,123,22)" fg:x="2875" fg:w="110"/><text x="17.5665%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="17.9344%" y="101" width="0.4566%" height="15" fill="rgb(231,138,38)" fg:x="2985" fg:w="76"/><text x="18.2274%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="18.3910%" y="101" width="0.6609%" height="15" fill="rgb(231,145,46)" fg:x="3061" fg:w="110"/><text x="18.6840%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="19.0519%" y="101" width="0.4566%" height="15" fill="rgb(251,118,11)" fg:x="3171" fg:w="76"/><text x="19.3449%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="19.5085%" y="101" width="0.6609%" height="15" fill="rgb(217,147,25)" fg:x="3247" fg:w="110"/><text x="19.8015%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="20.1694%" y="101" width="0.6609%" height="15" fill="rgb(247,81,37)" fg:x="3357" fg:w="110"/><text x="20.4624%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="20.8303%" y="101" width="0.4566%" height="15" fill="rgb(209,12,38)" fg:x="3467" fg:w="76"/><text x="21.1233%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="21.2870%" y="101" width="0.6609%" height="15" fill="rgb(227,1,9)" fg:x="3543" fg:w="110"/><text x="21.5799%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (76 instructions, 0.46%)</title><rect x="21.9478%" y="101" width="0.4566%" height="15" fill="rgb(248,47,43)" fg:x="3653" fg:w="76"/><text x="22.2408%" y="111.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (110 instructions, 0.66%)</title><rect x="22.4045%" y="101" width="0.6609%" height="15" fill="rgb(221,10,30)" fg:x="3729" fg:w="110"/><text x="22.6974%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="23.0654%" y="101" width="0.2043%" height="15" fill="rgb(210,229,1)" fg:x="3839" fg:w="34"/><text x="23.3583%" y="111.50"></text></g><g><title>motoko_rts::principal_id::principal_of_blob::h82817579bc445a3b (2,963 instructions, 17.80%)</title><rect x="13.0858%" y="117" width="17.8022%" height="15" fill="rgb(222,148,37)" fg:x="2178" fg:w="2963"/><text x="13.3788%" y="127.50">motoko_rts::principal_i..</text></g><g><title>memcmp (574 instructions, 3.45%)</title><rect x="30.8880%" y="117" width="3.4487%" height="15" fill="rgb(234,67,33)" fg:x="5141" fg:w="574"/><text x="31.1810%" y="127.50">me..</text></g><g><title>blob_of_principal (5,757 instructions, 34.59%)</title><rect x="12.2447%" y="133" width="34.5890%" height="15" fill="rgb(247,98,35)" fg:x="2038" fg:w="5757"/><text x="12.5376%" y="143.50">blob_of_principal</text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="46.8337%" y="117" width="0.1562%" height="15" fill="rgb(247,138,52)" fg:x="7795" fg:w="26"/><text x="47.1267%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.25%)</title><rect x="46.8337%" y="133" width="0.2463%" height="15" fill="rgb(213,79,30)" fg:x="7795" fg:w="41"/><text x="47.1267%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.0800%" y="117" width="0.1562%" height="15" fill="rgb(246,177,23)" fg:x="7836" fg:w="26"/><text x="47.3730%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.2362%" y="117" width="0.1562%" height="15" fill="rgb(230,62,27)" fg:x="7862" fg:w="26"/><text x="47.5292%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.3925%" y="117" width="0.1562%" height="15" fill="rgb(216,154,8)" fg:x="7888" fg:w="26"/><text x="47.6854%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.5487%" y="117" width="0.1562%" height="15" fill="rgb(244,35,45)" fg:x="7914" fg:w="26"/><text x="47.8416%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.7049%" y="117" width="0.1562%" height="15" fill="rgb(251,115,12)" fg:x="7940" fg:w="26"/><text x="47.9978%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="47.8611%" y="117" width="0.1562%" height="15" fill="rgb(240,54,50)" fg:x="7966" fg:w="26"/><text x="48.1541%" y="127.50"></text></g><g><title>@new_async (266 instructions, 1.60%)</title><rect x="47.0800%" y="133" width="1.5982%" height="15" fill="rgb(233,84,52)" fg:x="7836" fg:w="266"/><text x="47.3730%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="48.6782%" y="133" width="0.1562%" height="15" fill="rgb(207,117,47)" fg:x="8102" fg:w="26"/><text x="48.9712%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="48.8344%" y="133" width="0.1562%" height="15" fill="rgb(249,43,39)" fg:x="8128" fg:w="26"/><text x="49.1274%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="48.9906%" y="101" width="0.2043%" height="15" fill="rgb(209,38,44)" fg:x="8154" fg:w="34"/><text x="49.2836%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="48.9906%" y="117" width="0.2163%" height="15" fill="rgb(236,212,23)" fg:x="8154" fg:w="36"/><text x="49.2836%" y="127.50"></text></g><g><title>canister_self (46 instructions, 0.28%)</title><rect x="48.9906%" y="133" width="0.2764%" height="15" fill="rgb(242,79,21)" fg:x="8154" fg:w="46"/><text x="49.2836%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="49.2670%" y="117" width="0.1562%" height="15" fill="rgb(211,96,35)" fg:x="8200" fg:w="26"/><text x="49.5600%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.25%)</title><rect x="49.2670%" y="133" width="0.2463%" height="15" fill="rgb(253,215,40)" fg:x="8200" fg:w="41"/><text x="49.5600%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="49.5133%" y="133" width="0.1562%" height="15" fill="rgb(211,81,21)" fg:x="8241" fg:w="26"/><text x="49.8063%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.04%)</title><rect x="49.6696%" y="133" width="0.0421%" height="15" fill="rgb(208,190,38)" fg:x="8267" fg:w="7"/><text x="49.9625%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.04%)</title><rect x="49.7116%" y="133" width="0.0421%" height="15" fill="rgb(235,213,38)" fg:x="8274" fg:w="7"/><text x="50.0046%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="49.7537%" y="133" width="0.1562%" height="15" fill="rgb(237,122,38)" fg:x="8281" fg:w="26"/><text x="50.0466%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (39 instructions, 0.23%)</title><rect x="49.9099%" y="117" width="0.2343%" height="15" fill="rgb(244,218,35)" fg:x="8307" fg:w="39"/><text x="50.2028%" y="127.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (9 instructions, 0.05%)</title><rect x="50.1442%" y="117" width="0.0541%" height="15" fill="rgb(240,68,47)" fg:x="8346" fg:w="9"/><text x="50.4372%" y="127.50"></text></g><g><title>remember_continuation (3,725 instructions, 22.38%)</title><rect x="49.9099%" y="133" width="22.3804%" height="15" fill="rgb(210,16,53)" fg:x="8307" fg:w="3725"/><text x="50.2028%" y="143.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="72.2903%" y="101" width="0.0961%" height="15" fill="rgb(235,124,12)" fg:x="12032" fg:w="16"/><text x="72.5833%" y="111.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="72.3864%" y="85" width="0.0240%" height="15" fill="rgb(224,169,11)" fg:x="12048" fg:w="4"/><text x="72.6794%" y="95.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.22%)</title><rect x="72.3864%" y="101" width="0.2223%" height="15" fill="rgb(250,166,2)" fg:x="12048" fg:w="37"/><text x="72.6794%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.18%)</title><rect x="72.6087%" y="101" width="0.1802%" height="15" fill="rgb(242,216,29)" fg:x="12085" fg:w="30"/><text x="72.9017%" y="111.50"></text></g><g><title>@buffer_size&lt;B&gt; (33 instructions, 0.20%)</title><rect x="72.7890%" y="69" width="0.1983%" height="15" fill="rgb(230,116,27)" fg:x="12115" fg:w="33"/><text x="73.0820%" y="79.50"></text></g><g><title>@buffer_size&lt;ra()&gt; (64 instructions, 0.38%)</title><rect x="72.7890%" y="85" width="0.3845%" height="15" fill="rgb(228,99,48)" fg:x="12115" fg:w="64"/><text x="73.0820%" y="95.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="73.1735%" y="69" width="0.0240%" height="15" fill="rgb(253,11,6)" fg:x="12179" fg:w="4"/><text x="73.4665%" y="79.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.22%)</title><rect x="73.1735%" y="85" width="0.2223%" height="15" fill="rgb(247,143,39)" fg:x="12179" fg:w="37"/><text x="73.4665%" y="95.50"></text></g><g><title>@buffer_size&lt;Fsr(r(topic:t,value:N))()&gt; (147 instructions, 0.88%)</title><rect x="72.7890%" y="101" width="0.8832%" height="15" fill="rgb(236,97,10)" fg:x="12115" fg:w="147"/><text x="73.0820%" y="111.50"></text></g><g><title>@buffer_size&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (275 instructions, 1.65%)</title><rect x="72.2903%" y="117" width="1.6522%" height="15" fill="rgb(233,208,19)" fg:x="12032" fg:w="275"/><text x="72.5833%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="73.9426%" y="101" width="0.2043%" height="15" fill="rgb(216,164,2)" fg:x="12307" fg:w="34"/><text x="74.2355%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="73.9426%" y="117" width="0.2163%" height="15" fill="rgb(220,129,5)" fg:x="12307" fg:w="36"/><text x="74.2355%" y="127.50"></text></g><g><title>memcpy (105 instructions, 0.63%)</title><rect x="74.1589%" y="117" width="0.6309%" height="15" fill="rgb(242,17,10)" fg:x="12343" fg:w="105"/><text x="74.4518%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="74.7897%" y="101" width="0.2043%" height="15" fill="rgb(242,107,0)" fg:x="12448" fg:w="34"/><text x="75.0827%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="74.7897%" y="117" width="0.2163%" height="15" fill="rgb(251,28,31)" fg:x="12448" fg:w="36"/><text x="75.0827%" y="127.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.10%)</title><rect x="75.0060%" y="101" width="0.0961%" height="15" fill="rgb(233,223,10)" fg:x="12484" fg:w="16"/><text x="75.2990%" y="111.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="75.1021%" y="85" width="0.0240%" height="15" fill="rgb(215,21,27)" fg:x="12500" fg:w="4"/><text x="75.3951%" y="95.50"></text></g><g><title>leb128_encode (12 instructions, 0.07%)</title><rect x="75.1262%" y="85" width="0.0721%" height="15" fill="rgb(232,23,21)" fg:x="12504" fg:w="12"/><text x="75.4191%" y="95.50"></text></g><g><title>memcpy (68 instructions, 0.41%)</title><rect x="75.1983%" y="69" width="0.4086%" height="15" fill="rgb(244,5,23)" fg:x="12516" fg:w="68"/><text x="75.4912%" y="79.50"></text></g><g><title>text_to_buf (92 instructions, 0.55%)</title><rect x="75.1983%" y="85" width="0.5528%" height="15" fill="rgb(226,81,46)" fg:x="12516" fg:w="92"/><text x="75.4912%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (135 instructions, 0.81%)</title><rect x="75.1021%" y="101" width="0.8111%" height="15" fill="rgb(247,70,30)" fg:x="12500" fg:w="135"/><text x="75.3951%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.18%)</title><rect x="75.9132%" y="101" width="0.1802%" height="15" fill="rgb(212,68,19)" fg:x="12635" fg:w="30"/><text x="76.2062%" y="111.50"></text></g><g><title>leb128_encode (12 instructions, 0.07%)</title><rect x="76.0935%" y="53" width="0.0721%" height="15" fill="rgb(240,187,13)" fg:x="12665" fg:w="12"/><text x="76.3865%" y="63.50"></text></g><g><title>memcpy (68 instructions, 0.41%)</title><rect x="76.1656%" y="53" width="0.4086%" height="15" fill="rgb(223,113,26)" fg:x="12677" fg:w="68"/><text x="76.4586%" y="63.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.66%)</title><rect x="76.0935%" y="69" width="0.6609%" height="15" fill="rgb(206,192,2)" fg:x="12665" fg:w="110"/><text x="76.3865%" y="79.50"></text></g><g><title>@serialize_go&lt;ra()&gt; (128 instructions, 0.77%)</title><rect x="76.0935%" y="85" width="0.7690%" height="15" fill="rgb(241,108,4)" fg:x="12665" fg:w="128"/><text x="76.3865%" y="95.50"></text></g><g><title>text_size (4 instructions, 0.02%)</title><rect x="76.8625%" y="69" width="0.0240%" height="15" fill="rgb(247,173,49)" fg:x="12793" fg:w="4"/><text x="77.1555%" y="79.50"></text></g><g><title>leb128_encode (12 instructions, 0.07%)</title><rect x="76.8866%" y="69" width="0.0721%" height="15" fill="rgb(224,114,35)" fg:x="12797" fg:w="12"/><text x="77.1795%" y="79.50"></text></g><g><title>memcpy (72 instructions, 0.43%)</title><rect x="76.9587%" y="53" width="0.4326%" height="15" fill="rgb(245,159,27)" fg:x="12809" fg:w="72"/><text x="77.2516%" y="63.50"></text></g><g><title>text_to_buf (96 instructions, 0.58%)</title><rect x="76.9587%" y="69" width="0.5768%" height="15" fill="rgb(245,172,44)" fg:x="12809" fg:w="96"/><text x="77.2516%" y="79.50"></text></g><g><title>@serialize_go&lt;t&gt; (139 instructions, 0.84%)</title><rect x="76.8625%" y="85" width="0.8351%" height="15" fill="rgb(236,23,11)" fg:x="12793" fg:w="139"/><text x="77.1555%" y="95.50"></text></g><g><title>@serialize_go&lt;Fsr(r(topic:t,value:N))()&gt; (295 instructions, 1.77%)</title><rect x="76.0935%" y="101" width="1.7724%" height="15" fill="rgb(205,117,38)" fg:x="12665" fg:w="295"/><text x="76.3865%" y="111.50"></text></g><g><title>@serialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (501 instructions, 3.01%)</title><rect x="75.0060%" y="117" width="3.0101%" height="15" fill="rgb(237,72,25)" fg:x="12484" fg:w="501"/><text x="75.2990%" y="127.50">@s..</text></g><g><title>@serialize&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (1,016 instructions, 6.10%)</title><rect x="72.2903%" y="133" width="6.1043%" height="15" fill="rgb(244,70,9)" fg:x="12032" fg:w="1016"/><text x="72.5833%" y="143.50">@seria..</text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="78.3946%" y="117" width="0.0180%" height="15" fill="rgb(217,125,39)" fg:x="13048" fg:w="3"/><text x="78.6876%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (38 instructions, 0.23%)</title><rect x="78.4126%" y="37" width="0.2283%" height="15" fill="rgb(235,36,10)" fg:x="13051" fg:w="38"/><text x="78.7056%" y="47.50"></text></g><g><title>memset (244 instructions, 1.47%)</title><rect x="78.6410%" y="37" width="1.4660%" height="15" fill="rgb(251,123,47)" fg:x="13089" fg:w="244"/><text x="78.9339%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 1.85%)</title><rect x="78.4126%" y="53" width="1.8505%" height="15" fill="rgb(221,13,13)" fg:x="13051" fg:w="308"/><text x="78.7056%" y="63.50"></text></g><g><title>mp_init (323 instructions, 1.94%)</title><rect x="78.4126%" y="69" width="1.9406%" height="15" fill="rgb(238,131,9)" fg:x="13051" fg:w="323"/><text x="78.7056%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 2.88%)</title><rect x="80.3533%" y="53" width="2.8839%" height="15" fill="rgb(211,50,8)" fg:x="13374" fg:w="480"/><text x="80.6462%" y="63.50">mp..</text></g><g><title>mp_set_i64 (494 instructions, 2.97%)</title><rect x="80.3533%" y="69" width="2.9680%" height="15" fill="rgb(245,182,24)" fg:x="13374" fg:w="494"/><text x="80.6462%" y="79.50">mp..</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (31 instructions, 0.19%)</title><rect x="83.3213%" y="69" width="0.1863%" height="15" fill="rgb(242,14,37)" fg:x="13868" fg:w="31"/><text x="83.6143%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 5.35%)</title><rect x="78.4126%" y="85" width="5.3533%" height="15" fill="rgb(246,228,12)" fg:x="13051" fg:w="891"/><text x="78.7056%" y="95.50">bigin..</text></g><g><title>mp_cmp_mag (17 instructions, 0.10%)</title><rect x="83.7659%" y="53" width="0.1021%" height="15" fill="rgb(213,55,15)" fg:x="13942" fg:w="17"/><text x="84.0589%" y="63.50"></text></g><g><title>mp_cmp (31 instructions, 0.19%)</title><rect x="83.7659%" y="69" width="0.1863%" height="15" fill="rgb(209,9,3)" fg:x="13942" fg:w="31"/><text x="84.0589%" y="79.50"></text></g><g><title>bigint_lt (54 instructions, 0.32%)</title><rect x="83.7659%" y="85" width="0.3244%" height="15" fill="rgb(230,59,30)" fg:x="13942" fg:w="54"/><text x="84.0589%" y="95.50"></text></g><g><title>B_lt (963 instructions, 5.79%)</title><rect x="78.4126%" y="101" width="5.7859%" height="15" fill="rgb(209,121,21)" fg:x="13051" fg:w="963"/><text x="78.7056%" y="111.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.07%)</title><rect x="84.1985%" y="101" width="0.0721%" height="15" fill="rgb(220,109,13)" fg:x="14014" fg:w="12"/><text x="84.4915%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 6.00%)</title><rect x="78.4126%" y="117" width="6.0022%" height="15" fill="rgb(232,18,1)" fg:x="13051" fg:w="999"/><text x="78.7056%" y="127.50">cycle_..</text></g><g><title>@add_cycles (1,009 instructions, 6.06%)</title><rect x="78.3946%" y="133" width="6.0622%" height="15" fill="rgb(215,41,42)" fg:x="13048" fg:w="1009"/><text x="78.6876%" y="143.50">@add_c..</text></g><g><title>@call_succeeded (2 instructions, 0.01%)</title><rect x="84.4569%" y="133" width="0.0120%" height="15" fill="rgb(224,123,36)" fg:x="14057" fg:w="2"/><text x="84.7498%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="84.4689%" y="117" width="0.1562%" height="15" fill="rgb(240,125,3)" fg:x="14059" fg:w="26"/><text x="84.7618%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.25%)</title><rect x="84.4689%" y="133" width="0.2463%" height="15" fill="rgb(205,98,50)" fg:x="14059" fg:w="41"/><text x="84.7618%" y="143.50"></text></g><g><title>from_2_tuple (6 instructions, 0.04%)</title><rect x="84.7152%" y="133" width="0.0360%" height="15" fill="rgb(205,185,37)" fg:x="14100" fg:w="6"/><text x="85.0082%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="84.7513%" y="117" width="0.1562%" height="15" fill="rgb(238,207,15)" fg:x="14106" fg:w="26"/><text x="85.0442%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="84.9075%" y="101" width="0.1562%" height="15" fill="rgb(213,199,42)" fg:x="14132" fg:w="26"/><text x="85.2004%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="85.0637%" y="101" width="0.1562%" height="15" fill="rgb(235,201,11)" fg:x="14158" fg:w="26"/><text x="85.3567%" y="111.50"></text></g><g><title>enqueue (118 instructions, 0.71%)</title><rect x="84.9075%" y="117" width="0.7090%" height="15" fill="rgb(207,46,11)" fg:x="14132" fg:w="118"/><text x="85.2004%" y="127.50"></text></g><g><title>$lambda (167 instructions, 1.00%)</title><rect x="84.7513%" y="133" width="1.0034%" height="15" fill="rgb(241,35,35)" fg:x="14106" fg:w="167"/><text x="85.0442%" y="143.50"></text></g><g><title>$lambda (12,533 instructions, 75.30%)</title><rect x="12.0884%" y="149" width="75.3004%" height="15" fill="rgb(243,32,47)" fg:x="2012" fg:w="12533"/><text x="12.3814%" y="159.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.30%)</title><rect x="87.3888%" y="149" width="0.3004%" height="15" fill="rgb(247,202,23)" fg:x="14545" fg:w="50"/><text x="87.6818%" y="159.50"></text></g><g><title>trans_state4 (14 instructions, 0.08%)</title><rect x="87.6893%" y="149" width="0.0841%" height="15" fill="rgb(219,102,11)" fg:x="14595" fg:w="14"/><text x="87.9822%" y="159.50"></text></g><g><title>init (15,127 instructions, 90.89%)</title><rect x="0.0000%" y="165" width="90.8856%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="15127"/><text x="0.2930%" y="175.50">init</text></g><g><title>trans_state5 (9 instructions, 0.05%)</title><rect x="90.8856%" y="149" width="0.0541%" height="15" fill="rgb(222,74,54)" fg:x="15127" fg:w="9"/><text x="91.1786%" y="159.50"></text></g><g><title>recall_continuation (57 instructions, 0.34%)</title><rect x="90.9397%" y="149" width="0.3425%" height="15" fill="rgb(216,99,12)" fg:x="15136" fg:w="57"/><text x="91.2326%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="91.2821%" y="133" width="0.2043%" height="15" fill="rgb(226,22,26)" fg:x="15193" fg:w="34"/><text x="91.5751%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="91.2821%" y="149" width="0.2163%" height="15" fill="rgb(217,163,10)" fg:x="15193" fg:w="36"/><text x="91.5751%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="91.4984%" y="117" width="0.3064%" height="15" fill="rgb(213,25,53)" fg:x="15229" fg:w="51"/><text x="91.7914%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="91.8049%" y="117" width="0.2043%" height="15" fill="rgb(252,105,26)" fg:x="15280" fg:w="34"/><text x="92.0978%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="92.0091%" y="117" width="0.3064%" height="15" fill="rgb(220,39,43)" fg:x="15314" fg:w="51"/><text x="92.3021%" y="127.50"></text></g><g><title>parse_idl_header (207 instructions, 1.24%)</title><rect x="91.4984%" y="133" width="1.2437%" height="15" fill="rgb(229,68,48)" fg:x="15229" fg:w="207"/><text x="91.7914%" y="143.50"></text></g><g><title>idl_sub_buf_words (9 instructions, 0.05%)</title><rect x="92.7421%" y="133" width="0.0541%" height="15" fill="rgb(252,8,32)" fg:x="15436" fg:w="9"/><text x="93.0351%" y="143.50"></text></g><g><title>memset (4 instructions, 0.02%)</title><rect x="92.7962%" y="117" width="0.0240%" height="15" fill="rgb(223,20,43)" fg:x="15445" fg:w="4"/><text x="93.0892%" y="127.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.11%)</title><rect x="92.7962%" y="133" width="0.1142%" height="15" fill="rgb(229,81,49)" fg:x="15445" fg:w="19"/><text x="93.0892%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.31%)</title><rect x="92.9104%" y="133" width="0.3064%" height="15" fill="rgb(236,28,36)" fg:x="15464" fg:w="51"/><text x="93.2033%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 2.62%)</title><rect x="91.4984%" y="149" width="2.6196%" height="15" fill="rgb(249,185,26)" fg:x="15229" fg:w="436"/><text x="91.7914%" y="159.50">@..</text></g><g><title>from_word128_ptr (17 instructions, 0.10%)</title><rect x="94.1180%" y="85" width="0.1021%" height="15" fill="rgb(249,174,33)" fg:x="15665" fg:w="17"/><text x="94.4110%" y="95.50"></text></g><g><title>cycle_refunded (30 instructions, 0.18%)</title><rect x="94.1180%" y="101" width="0.1802%" height="15" fill="rgb(233,201,37)" fg:x="15665" fg:w="30"/><text x="94.4110%" y="111.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.19%)</title><rect x="94.1180%" y="117" width="0.1923%" height="15" fill="rgb(221,78,26)" fg:x="15665" fg:w="32"/><text x="94.4110%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="94.3103%" y="117" width="0.1562%" height="15" fill="rgb(250,127,30)" fg:x="15697" fg:w="26"/><text x="94.6032%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.16%)</title><rect x="94.4665%" y="101" width="0.1562%" height="15" fill="rgb(230,49,44)" fg:x="15723" fg:w="26"/><text x="94.7594%" y="111.50"></text></g><g><title>to_2_tuple (41 instructions, 0.25%)</title><rect x="94.4665%" y="117" width="0.2463%" height="15" fill="rgb(229,67,23)" fg:x="15723" fg:w="41"/><text x="94.7594%" y="127.50"></text></g><g><title>opt_inject (14 instructions, 0.08%)</title><rect x="94.7128%" y="117" width="0.0841%" height="15" fill="rgb(249,83,47)" fg:x="15764" fg:w="14"/><text x="95.0058%" y="127.50"></text></g><g><title>@reset_cycles (3 instructions, 0.02%)</title><rect x="94.7969%" y="101" width="0.0180%" height="15" fill="rgb(215,43,3)" fg:x="15778" fg:w="3"/><text x="95.0899%" y="111.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.08%)</title><rect x="94.8149%" y="53" width="0.0841%" height="15" fill="rgb(238,154,13)" fg:x="15781" fg:w="14"/><text x="95.1079%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="94.8991%" y="37" width="0.2043%" height="15" fill="rgb(219,56,2)" fg:x="15795" fg:w="34"/><text x="95.1920%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="94.8991%" y="53" width="0.2163%" height="15" fill="rgb(233,0,4)" fg:x="15795" fg:w="36"/><text x="95.1920%" y="63.50"></text></g><g><title>memcpy (63 instructions, 0.38%)</title><rect x="95.1154%" y="53" width="0.3785%" height="15" fill="rgb(235,30,7)" fg:x="15831" fg:w="63"/><text x="95.4083%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.20%)</title><rect x="95.4939%" y="37" width="0.2043%" height="15" fill="rgb(250,79,13)" fg:x="15894" fg:w="34"/><text x="95.7868%" y="47.50"></text></g><g><title>alloc_blob (36 instructions, 0.22%)</title><rect x="95.4939%" y="53" width="0.2163%" height="15" fill="rgb(211,146,34)" fg:x="15894" fg:w="36"/><text x="95.7868%" y="63.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.02%)</title><rect x="95.7102%" y="53" width="0.0240%" height="15" fill="rgb(228,22,38)" fg:x="15930" fg:w="4"/><text x="96.0031%" y="63.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 1.30%)</title><rect x="94.8149%" y="69" width="1.2978%" height="15" fill="rgb(235,168,5)" fg:x="15781" fg:w="216"/><text x="95.1079%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.18%)</title><rect x="96.1127%" y="69" width="0.1802%" height="15" fill="rgb(221,155,16)" fg:x="15997" fg:w="30"/><text x="96.4057%" y="79.50"></text></g><g><title>$lambda (251 instructions, 1.51%)</title><rect x="94.8149%" y="85" width="1.5081%" height="15" fill="rgb(215,215,53)" fg:x="15781" fg:w="251"/><text x="95.1079%" y="95.50"></text></g><g><title>$lambda (258 instructions, 1.55%)</title><rect x="94.8149%" y="101" width="1.5501%" height="15" fill="rgb(223,4,10)" fg:x="15781" fg:w="258"/><text x="95.1079%" y="111.50"></text></g><g><title>anon-func-349.15 (284 instructions, 1.71%)</title><rect x="94.7969%" y="117" width="1.7063%" height="15" fill="rgb(234,103,6)" fg:x="15778" fg:w="284"/><text x="95.0899%" y="127.50"></text></g><g><title>fulfill (451 instructions, 2.71%)</title><rect x="94.1180%" y="133" width="2.7097%" height="15" fill="rgb(227,97,0)" fg:x="15665" fg:w="451"/><text x="94.4110%" y="143.50">f..</text></g><g><title>$lambda (459 instructions, 2.76%)</title><rect x="94.1180%" y="149" width="2.7578%" height="15" fill="rgb(234,150,53)" fg:x="15665" fg:w="459"/><text x="94.4110%" y="159.50">$..</text></g><g><title>schedule_copying_gc (50 instructions, 0.30%)</title><rect x="96.8758%" y="149" width="0.3004%" height="15" fill="rgb(228,201,54)" fg:x="16124" fg:w="50"/><text x="97.1687%" y="159.50"></text></g><g><title>trans_state4 (14 instructions, 0.08%)</title><rect x="97.1762%" y="149" width="0.0841%" height="15" fill="rgb(222,22,37)" fg:x="16174" fg:w="14"/><text x="97.4691%" y="159.50"></text></g><g><title>all (16,644 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="16644"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,517 instructions, 9.11%)</title><rect x="90.8856%" y="165" width="9.1144%" height="15" fill="rgb(233,25,53)" fg:x="15127" fg:w="1517"/><text x="91.1786%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>