<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Subscribe Apples</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="14651"><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="0.0000%" y="117" width="0.0546%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2930%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="0.0546%" y="117" width="0.2252%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="33"/><text x="0.3476%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="0.2798%" y="101" width="0.3140%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="46"/><text x="0.5728%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="0.5938%" y="101" width="0.2252%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="33"/><text x="0.8868%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="0.8191%" y="101" width="0.3140%" height="15" fill="rgb(208,68,35)" fg:x="120" fg:w="46"/><text x="1.1120%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.41%)</title><rect x="1.1330%" y="101" width="0.4095%" height="15" fill="rgb(232,128,0)" fg:x="166" fg:w="60"/><text x="1.4260%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.06%)</title><rect x="1.5426%" y="101" width="0.0614%" height="15" fill="rgb(207,160,47)" fg:x="226" fg:w="9"/><text x="1.8355%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.41%)</title><rect x="1.6040%" y="101" width="0.4095%" height="15" fill="rgb(228,23,34)" fg:x="235" fg:w="60"/><text x="1.8970%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.06%)</title><rect x="2.0135%" y="101" width="0.0614%" height="15" fill="rgb(218,30,26)" fg:x="295" fg:w="9"/><text x="2.3065%" y="111.50"></text></g><g><title>parse_idl_header (348 instructions, 2.38%)</title><rect x="0.2798%" y="117" width="2.3753%" height="15" fill="rgb(220,122,19)" fg:x="41" fg:w="348"/><text x="0.5728%" y="127.50">p..</text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="2.6551%" y="101" width="0.0273%" height="15" fill="rgb(250,228,42)" fg:x="389" fg:w="4"/><text x="2.9481%" y="111.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="2.6551%" y="117" width="0.0546%" height="15" fill="rgb(240,193,28)" fg:x="389" fg:w="8"/><text x="2.9481%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="2.7097%" y="117" width="0.3140%" height="15" fill="rgb(216,20,37)" fg:x="397" fg:w="46"/><text x="3.0027%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 0.41%)</title><rect x="3.0237%" y="117" width="0.4095%" height="15" fill="rgb(206,188,39)" fg:x="443" fg:w="60"/><text x="3.3167%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="3.4332%" y="101" width="0.3140%" height="15" fill="rgb(217,207,13)" fg:x="503" fg:w="46"/><text x="3.7262%" y="111.50"></text></g><g><title>utf8_validate (228 instructions, 1.56%)</title><rect x="3.7472%" y="101" width="1.5562%" height="15" fill="rgb(231,73,38)" fg:x="549" fg:w="228"/><text x="4.0402%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="5.3034%" y="85" width="0.2252%" height="15" fill="rgb(225,20,46)" fg:x="777" fg:w="33"/><text x="5.5964%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (40 instructions, 0.27%)</title><rect x="5.3034%" y="101" width="0.2730%" height="15" fill="rgb(210,31,41)" fg:x="777" fg:w="40"/><text x="5.5964%" y="111.50"></text></g><g><title>memcpy (169 instructions, 1.15%)</title><rect x="5.5764%" y="101" width="1.1535%" height="15" fill="rgb(221,200,47)" fg:x="817" fg:w="169"/><text x="5.8694%" y="111.50"></text></g><g><title>@deserialize_go&lt;t&gt; (525 instructions, 3.58%)</title><rect x="3.4332%" y="117" width="3.5834%" height="15" fill="rgb(226,26,5)" fg:x="503" fg:w="525"/><text x="3.7262%" y="127.50">@de..</text></g><g><title>sleb128_decode (60 instructions, 0.41%)</title><rect x="7.0166%" y="117" width="0.4095%" height="15" fill="rgb(249,33,26)" fg:x="1028" fg:w="60"/><text x="7.3096%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="7.4261%" y="101" width="0.3140%" height="15" fill="rgb(235,183,28)" fg:x="1088" fg:w="46"/><text x="7.7191%" y="111.50"></text></g><g><title>utf8_validate (207 instructions, 1.41%)</title><rect x="7.7401%" y="101" width="1.4129%" height="15" fill="rgb(221,5,38)" fg:x="1134" fg:w="207"/><text x="8.0331%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="9.1530%" y="85" width="0.2252%" height="15" fill="rgb(247,18,42)" fg:x="1341" fg:w="33"/><text x="9.4459%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (40 instructions, 0.27%)</title><rect x="9.1530%" y="101" width="0.2730%" height="15" fill="rgb(241,131,45)" fg:x="1341" fg:w="40"/><text x="9.4459%" y="111.50"></text></g><g><title>memcpy (145 instructions, 0.99%)</title><rect x="9.4260%" y="101" width="0.9897%" height="15" fill="rgb(249,31,29)" fg:x="1381" fg:w="145"/><text x="9.7189%" y="111.50"></text></g><g><title>@deserialize_go&lt;t&gt; (480 instructions, 3.28%)</title><rect x="7.4261%" y="117" width="3.2762%" height="15" fill="rgb(225,111,53)" fg:x="1088" fg:w="480"/><text x="7.7191%" y="127.50">@d..</text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="10.7023%" y="117" width="0.1024%" height="15" fill="rgb(238,160,17)" fg:x="1568" fg:w="15"/><text x="10.9953%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="10.8047%" y="101" width="0.1024%" height="15" fill="rgb(214,148,48)" fg:x="1583" fg:w="15"/><text x="11.0977%" y="111.50"></text></g><g><title>motoko_rts::text::blob_of_text::hdd21d574b5967f29 (9 instructions, 0.06%)</title><rect x="10.9071%" y="85" width="0.0614%" height="15" fill="rgb(232,36,49)" fg:x="1598" fg:w="9"/><text x="11.2001%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="10.9685%" y="85" width="0.2252%" height="15" fill="rgb(209,103,24)" fg:x="1607" fg:w="33"/><text x="11.2615%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="11.1938%" y="85" width="0.2252%" height="15" fill="rgb(229,88,8)" fg:x="1640" fg:w="33"/><text x="11.4867%" y="95.50"></text></g><g><title>memcpy (61 instructions, 0.42%)</title><rect x="11.4190%" y="85" width="0.4164%" height="15" fill="rgb(213,181,19)" fg:x="1673" fg:w="61"/><text x="11.7120%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="11.8354%" y="85" width="0.2252%" height="15" fill="rgb(254,191,54)" fg:x="1734" fg:w="33"/><text x="12.1283%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="12.0606%" y="85" width="0.5051%" height="15" fill="rgb(241,83,37)" fg:x="1767" fg:w="74"/><text x="12.3536%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="12.5657%" y="85" width="0.7235%" height="15" fill="rgb(233,36,39)" fg:x="1841" fg:w="106"/><text x="12.8587%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="13.2892%" y="85" width="0.5051%" height="15" fill="rgb(226,3,54)" fg:x="1947" fg:w="74"/><text x="13.5822%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="13.7943%" y="85" width="0.7235%" height="15" fill="rgb(245,192,40)" fg:x="2021" fg:w="106"/><text x="14.0872%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="14.5178%" y="85" width="0.7235%" height="15" fill="rgb(238,167,29)" fg:x="2127" fg:w="106"/><text x="14.8107%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="15.2413%" y="85" width="0.5051%" height="15" fill="rgb(232,182,51)" fg:x="2233" fg:w="74"/><text x="15.5342%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="15.7464%" y="85" width="0.7235%" height="15" fill="rgb(231,60,39)" fg:x="2307" fg:w="106"/><text x="16.0393%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="16.4699%" y="85" width="0.5051%" height="15" fill="rgb(208,69,12)" fg:x="2413" fg:w="74"/><text x="16.7628%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="16.9750%" y="85" width="0.7235%" height="15" fill="rgb(235,93,37)" fg:x="2487" fg:w="106"/><text x="17.2679%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="17.6985%" y="85" width="0.7235%" height="15" fill="rgb(213,116,39)" fg:x="2593" fg:w="106"/><text x="17.9914%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="18.4220%" y="85" width="0.5051%" height="15" fill="rgb(222,207,29)" fg:x="2699" fg:w="74"/><text x="18.7149%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="18.9270%" y="85" width="0.7235%" height="15" fill="rgb(206,96,30)" fg:x="2773" fg:w="106"/><text x="19.2200%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (74 instructions, 0.51%)</title><rect x="19.6505%" y="85" width="0.5051%" height="15" fill="rgb(218,138,4)" fg:x="2879" fg:w="74"/><text x="19.9435%" y="95.50"></text></g><g><title>motoko_rts::principal_id::enc_stash::h8783d07484042fc3 (106 instructions, 0.72%)</title><rect x="20.1556%" y="85" width="0.7235%" height="15" fill="rgb(250,191,14)" fg:x="2953" fg:w="106"/><text x="20.4486%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="20.8791%" y="85" width="0.2252%" height="15" fill="rgb(239,60,40)" fg:x="3059" fg:w="33"/><text x="21.1721%" y="95.50"></text></g><g><title>memcmp (572 instructions, 3.90%)</title><rect x="21.1044%" y="85" width="3.9042%" height="15" fill="rgb(206,27,48)" fg:x="3092" fg:w="572"/><text x="21.3973%" y="95.50">mem..</text></g><g><title>blob_of_principal (5,665 instructions, 38.67%)</title><rect x="10.9071%" y="101" width="38.6663%" height="15" fill="rgb(225,35,8)" fg:x="1598" fg:w="5665"/><text x="11.2001%" y="111.50">blob_of_principal</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="49.5734%" y="85" width="0.1024%" height="15" fill="rgb(250,213,24)" fg:x="7263" fg:w="15"/><text x="49.8664%" y="95.50"></text></g><g><title>to_2_tuple (26 instructions, 0.18%)</title><rect x="49.5734%" y="101" width="0.1775%" height="15" fill="rgb(247,123,22)" fg:x="7263" fg:w="26"/><text x="49.8664%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="49.7509%" y="85" width="0.1024%" height="15" fill="rgb(231,138,38)" fg:x="7289" fg:w="15"/><text x="50.0438%" y="95.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="49.8533%" y="85" width="0.1024%" height="15" fill="rgb(231,145,46)" fg:x="7304" fg:w="15"/><text x="50.1462%" y="95.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="49.9556%" y="85" width="0.1024%" height="15" fill="rgb(251,118,11)" fg:x="7319" fg:w="15"/><text x="50.2486%" y="95.50"></text></g><g><title>B_eq (3 instructions, 0.02%)</title><rect x="50.0580%" y="85" width="0.0205%" height="15" fill="rgb(217,147,25)" fg:x="7334" fg:w="3"/><text x="50.3510%" y="95.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.0785%" y="85" width="0.1024%" height="15" fill="rgb(247,81,37)" fg:x="7337" fg:w="15"/><text x="50.3715%" y="95.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.1809%" y="85" width="0.1024%" height="15" fill="rgb(209,12,38)" fg:x="7352" fg:w="15"/><text x="50.4738%" y="95.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.2833%" y="85" width="0.1024%" height="15" fill="rgb(227,1,9)" fg:x="7367" fg:w="15"/><text x="50.5762%" y="95.50"></text></g><g><title>@new_async (176 instructions, 1.20%)</title><rect x="49.7509%" y="101" width="1.2013%" height="15" fill="rgb(248,47,43)" fg:x="7289" fg:w="176"/><text x="50.0438%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.9522%" y="101" width="0.1024%" height="15" fill="rgb(221,10,30)" fg:x="7465" fg:w="15"/><text x="51.2451%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="51.0545%" y="101" width="0.1024%" height="15" fill="rgb(210,229,1)" fg:x="7480" fg:w="15"/><text x="51.3475%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="51.1569%" y="85" width="0.2252%" height="15" fill="rgb(222,148,37)" fg:x="7495" fg:w="33"/><text x="51.4499%" y="95.50"></text></g><g><title>canister_self (43 instructions, 0.29%)</title><rect x="51.1569%" y="101" width="0.2935%" height="15" fill="rgb(234,67,33)" fg:x="7495" fg:w="43"/><text x="51.4499%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="51.4504%" y="85" width="0.1024%" height="15" fill="rgb(247,98,35)" fg:x="7538" fg:w="15"/><text x="51.7434%" y="95.50"></text></g><g><title>to_2_tuple (26 instructions, 0.18%)</title><rect x="51.4504%" y="101" width="0.1775%" height="15" fill="rgb(247,138,52)" fg:x="7538" fg:w="26"/><text x="51.7434%" y="111.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (15 instructions, 0.10%)</title><rect x="51.6279%" y="101" width="0.1024%" height="15" fill="rgb(213,79,30)" fg:x="7564" fg:w="15"/><text x="51.9208%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="51.7303%" y="101" width="0.1024%" height="15" fill="rgb(246,177,23)" fg:x="7579" fg:w="15"/><text x="52.0232%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (36 instructions, 0.25%)</title><rect x="51.8326%" y="85" width="0.2457%" height="15" fill="rgb(230,62,27)" fg:x="7594" fg:w="36"/><text x="52.1256%" y="95.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (7 instructions, 0.05%)</title><rect x="52.0784%" y="85" width="0.0478%" height="15" fill="rgb(216,154,8)" fg:x="7630" fg:w="7"/><text x="52.3713%" y="95.50"></text></g><g><title>remember_continuation (3,699 instructions, 25.25%)</title><rect x="51.8326%" y="101" width="25.2474%" height="15" fill="rgb(244,35,45)" fg:x="7594" fg:w="3699"/><text x="52.1256%" y="111.50">remember_continuation</text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.11%)</title><rect x="77.0801%" y="101" width="0.1092%" height="15" fill="rgb(251,115,12)" fg:x="11293" fg:w="16"/><text x="77.3730%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.18%)</title><rect x="77.1893%" y="101" width="0.1843%" height="15" fill="rgb(240,54,50)" fg:x="11309" fg:w="27"/><text x="77.4822%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.20%)</title><rect x="77.3736%" y="101" width="0.2048%" height="15" fill="rgb(233,84,52)" fg:x="11336" fg:w="30"/><text x="77.6665%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.18%)</title><rect x="77.5783%" y="101" width="0.1843%" height="15" fill="rgb(207,117,47)" fg:x="11366" fg:w="27"/><text x="77.8713%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="77.7626%" y="101" width="0.2252%" height="15" fill="rgb(249,43,39)" fg:x="11393" fg:w="33"/><text x="78.0556%" y="111.50"></text></g><g><title>memcpy (103 instructions, 0.70%)</title><rect x="77.9879%" y="101" width="0.7030%" height="15" fill="rgb(209,38,44)" fg:x="11426" fg:w="103"/><text x="78.2808%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="78.6909%" y="101" width="0.2252%" height="15" fill="rgb(236,212,23)" fg:x="11529" fg:w="33"/><text x="78.9838%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.11%)</title><rect x="78.9161%" y="101" width="0.1092%" height="15" fill="rgb(242,79,21)" fg:x="11562" fg:w="16"/><text x="79.2091%" y="111.50"></text></g><g><title>leb128_encode (9 instructions, 0.06%)</title><rect x="79.0253%" y="85" width="0.0614%" height="15" fill="rgb(211,96,35)" fg:x="11578" fg:w="9"/><text x="79.3183%" y="95.50"></text></g><g><title>memcpy (65 instructions, 0.44%)</title><rect x="79.0868%" y="69" width="0.4437%" height="15" fill="rgb(253,215,40)" fg:x="11587" fg:w="65"/><text x="79.3797%" y="79.50"></text></g><g><title>text_to_buf (86 instructions, 0.59%)</title><rect x="79.0868%" y="85" width="0.5870%" height="15" fill="rgb(211,81,21)" fg:x="11587" fg:w="86"/><text x="79.3797%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (122 instructions, 0.83%)</title><rect x="79.0253%" y="101" width="0.8327%" height="15" fill="rgb(208,190,38)" fg:x="11578" fg:w="122"/><text x="79.3183%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.20%)</title><rect x="79.8580%" y="101" width="0.2048%" height="15" fill="rgb(235,213,38)" fg:x="11700" fg:w="30"/><text x="80.1510%" y="111.50"></text></g><g><title>leb128_encode (9 instructions, 0.06%)</title><rect x="80.0628%" y="101" width="0.0614%" height="15" fill="rgb(237,122,38)" fg:x="11730" fg:w="9"/><text x="80.3558%" y="111.50"></text></g><g><title>memcpy (65 instructions, 0.44%)</title><rect x="80.1242%" y="101" width="0.4437%" height="15" fill="rgb(244,218,35)" fg:x="11739" fg:w="65"/><text x="80.4172%" y="111.50"></text></g><g><title>leb128_encode (9 instructions, 0.06%)</title><rect x="80.5679%" y="85" width="0.0614%" height="15" fill="rgb(240,68,47)" fg:x="11804" fg:w="9"/><text x="80.8608%" y="95.50"></text></g><g><title>memcpy (69 instructions, 0.47%)</title><rect x="80.6293%" y="69" width="0.4710%" height="15" fill="rgb(210,16,53)" fg:x="11813" fg:w="69"/><text x="80.9223%" y="79.50"></text></g><g><title>text_to_buf (90 instructions, 0.61%)</title><rect x="80.6293%" y="85" width="0.6143%" height="15" fill="rgb(235,124,12)" fg:x="11813" fg:w="90"/><text x="80.9223%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (126 instructions, 0.86%)</title><rect x="80.5679%" y="101" width="0.8600%" height="15" fill="rgb(224,169,11)" fg:x="11804" fg:w="126"/><text x="80.8608%" y="111.50"></text></g><g><title>B_eq (3 instructions, 0.02%)</title><rect x="81.4279%" y="85" width="0.0205%" height="15" fill="rgb(250,166,2)" fg:x="11930" fg:w="3"/><text x="81.7209%" y="95.50"></text></g><g><title>@add_cycles (13 instructions, 0.09%)</title><rect x="81.4279%" y="101" width="0.0887%" height="15" fill="rgb(242,216,29)" fg:x="11930" fg:w="13"/><text x="81.7209%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="81.5166%" y="85" width="0.1024%" height="15" fill="rgb(230,116,27)" fg:x="11943" fg:w="15"/><text x="81.8096%" y="95.50"></text></g><g><title>to_2_tuple (26 instructions, 0.18%)</title><rect x="81.5166%" y="101" width="0.1775%" height="15" fill="rgb(228,99,48)" fg:x="11943" fg:w="26"/><text x="81.8096%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="81.6941%" y="85" width="0.1024%" height="15" fill="rgb(253,11,6)" fg:x="11969" fg:w="15"/><text x="81.9871%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="81.7965%" y="69" width="0.1024%" height="15" fill="rgb(247,143,39)" fg:x="11984" fg:w="15"/><text x="82.0894%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="81.8988%" y="69" width="0.1024%" height="15" fill="rgb(236,97,10)" fg:x="11999" fg:w="15"/><text x="82.1918%" y="79.50"></text></g><g><title>enqueue (84 instructions, 0.57%)</title><rect x="81.7965%" y="85" width="0.5733%" height="15" fill="rgb(233,208,19)" fg:x="11984" fg:w="84"/><text x="82.0894%" y="95.50"></text></g><g><title>$lambda.3 (118 instructions, 0.81%)</title><rect x="81.6941%" y="101" width="0.8054%" height="15" fill="rgb(216,164,2)" fg:x="11969" fg:w="118"/><text x="81.9871%" y="111.50"></text></g><g><title>$lambda (10,950 instructions, 74.74%)</title><rect x="10.8047%" y="117" width="74.7389%" height="15" fill="rgb(220,129,5)" fg:x="1583" fg:w="10950"/><text x="11.0977%" y="127.50">$lambda</text></g><g><title>schedule_copying_gc (45 instructions, 0.31%)</title><rect x="85.5436%" y="117" width="0.3071%" height="15" fill="rgb(242,17,10)" fg:x="12533" fg:w="45"/><text x="85.8366%" y="127.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="85.8508%" y="117" width="0.0887%" height="15" fill="rgb(242,107,0)" fg:x="12578" fg:w="13"/><text x="86.1438%" y="127.50"></text></g><g><title>init.1 (13,328 instructions, 90.97%)</title><rect x="0.0000%" y="133" width="90.9699%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="13328"/><text x="0.2930%" y="143.50">init.1</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="90.9699%" y="117" width="0.0546%" height="15" fill="rgb(233,223,10)" fg:x="13328" fg:w="8"/><text x="91.2629%" y="127.50"></text></g><g><title>recall_continuation (45 instructions, 0.31%)</title><rect x="91.0245%" y="117" width="0.3071%" height="15" fill="rgb(215,21,27)" fg:x="13336" fg:w="45"/><text x="91.3175%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="91.3316%" y="117" width="0.2252%" height="15" fill="rgb(232,23,21)" fg:x="13381" fg:w="33"/><text x="91.6246%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="91.5569%" y="85" width="0.3140%" height="15" fill="rgb(244,5,23)" fg:x="13414" fg:w="46"/><text x="91.8499%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="91.8709%" y="85" width="0.2252%" height="15" fill="rgb(226,81,46)" fg:x="13460" fg:w="33"/><text x="92.1638%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="92.0961%" y="85" width="0.3140%" height="15" fill="rgb(247,70,30)" fg:x="13493" fg:w="46"/><text x="92.3891%" y="95.50"></text></g><g><title>parse_idl_header (192 instructions, 1.31%)</title><rect x="91.5569%" y="101" width="1.3105%" height="15" fill="rgb(212,68,19)" fg:x="13414" fg:w="192"/><text x="91.8499%" y="111.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="92.8674%" y="85" width="0.0273%" height="15" fill="rgb(240,187,13)" fg:x="13606" fg:w="4"/><text x="93.1603%" y="95.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="92.8674%" y="101" width="0.0546%" height="15" fill="rgb(223,113,26)" fg:x="13606" fg:w="8"/><text x="93.1603%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.31%)</title><rect x="92.9220%" y="101" width="0.3140%" height="15" fill="rgb(206,192,2)" fg:x="13614" fg:w="46"/><text x="93.2150%" y="111.50"></text></g><g><title>@deserialize&lt;&gt; (363 instructions, 2.48%)</title><rect x="91.5569%" y="117" width="2.4776%" height="15" fill="rgb(241,108,4)" fg:x="13414" fg:w="363"/><text x="91.8499%" y="127.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="94.0345%" y="85" width="0.1024%" height="15" fill="rgb(247,173,49)" fg:x="13777" fg:w="15"/><text x="94.3275%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="94.1369%" y="69" width="0.1024%" height="15" fill="rgb(224,114,35)" fg:x="13792" fg:w="15"/><text x="94.4299%" y="79.50"></text></g><g><title>to_2_tuple (26 instructions, 0.18%)</title><rect x="94.1369%" y="85" width="0.1775%" height="15" fill="rgb(245,159,27)" fg:x="13792" fg:w="26"/><text x="94.4299%" y="95.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="94.3144%" y="85" width="0.1229%" height="15" fill="rgb(245,172,44)" fg:x="13818" fg:w="18"/><text x="94.6074%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="94.4372%" y="37" width="0.2252%" height="15" fill="rgb(236,23,11)" fg:x="13836" fg:w="33"/><text x="94.7302%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.42%)</title><rect x="94.6625%" y="37" width="0.4164%" height="15" fill="rgb(205,117,38)" fg:x="13869" fg:w="61"/><text x="94.9554%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.23%)</title><rect x="95.0788%" y="37" width="0.2252%" height="15" fill="rgb(237,72,25)" fg:x="13930" fg:w="33"/><text x="95.3718%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.20%)</title><rect x="95.3041%" y="37" width="0.2048%" height="15" fill="rgb(244,70,9)" fg:x="13963" fg:w="30"/><text x="95.5970%" y="47.50"></text></g><g><title>$lambda.20 (218 instructions, 1.49%)</title><rect x="94.4372%" y="53" width="1.4880%" height="15" fill="rgb(217,125,39)" fg:x="13836" fg:w="218"/><text x="94.7302%" y="63.50"></text></g><g><title>$lambda.12 (224 instructions, 1.53%)</title><rect x="94.4372%" y="69" width="1.5289%" height="15" fill="rgb(235,36,10)" fg:x="13836" fg:w="224"/><text x="94.7302%" y="79.50"></text></g><g><title>anon-func-352.15 (246 instructions, 1.68%)</title><rect x="94.4372%" y="85" width="1.6791%" height="15" fill="rgb(251,123,47)" fg:x="13836" fg:w="246"/><text x="94.7302%" y="95.50"></text></g><g><title>fulfill (355 instructions, 2.42%)</title><rect x="94.0345%" y="101" width="2.4230%" height="15" fill="rgb(221,13,13)" fg:x="13777" fg:w="355"/><text x="94.3275%" y="111.50">f..</text></g><g><title>$lambda.6 (362 instructions, 2.47%)</title><rect x="94.0345%" y="117" width="2.4708%" height="15" fill="rgb(238,131,9)" fg:x="13777" fg:w="362"/><text x="94.3275%" y="127.50">$..</text></g><g><title>schedule_copying_gc (45 instructions, 0.31%)</title><rect x="96.5054%" y="117" width="0.3071%" height="15" fill="rgb(211,50,8)" fg:x="14139" fg:w="45"/><text x="96.7983%" y="127.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="96.8125%" y="117" width="0.0887%" height="15" fill="rgb(245,182,24)" fg:x="14184" fg:w="13"/><text x="97.1055%" y="127.50"></text></g><g><title>all (14,651 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="14651"/><text x="0.2930%" y="159.50"></text></g><g><title>@callback&lt;u&gt; (1,323 instructions, 9.03%)</title><rect x="90.9699%" y="133" width="9.0301%" height="15" fill="rgb(246,228,12)" fg:x="13328" fg:w="1323"/><text x="91.2629%" y="143.50">@callback&lt;u&gt;</text></g></svg></svg>