<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Register subscriber (called by sub canister)</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="9145"><g><title>trans_state5 (9 instructions, 0.10%)</title><rect x="0.0000%" y="149" width="0.0984%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="9"/><text x="0.2930%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.03%)</title><rect x="0.0984%" y="149" width="0.0328%" height="15" fill="rgb(241,220,44)" fg:x="9" fg:w="3"/><text x="0.3914%" y="159.50"></text></g><g><title>@reset_refund (3 instructions, 0.03%)</title><rect x="0.1312%" y="149" width="0.0328%" height="15" fill="rgb(235,28,35)" fg:x="12" fg:w="3"/><text x="0.4242%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="0.1640%" y="133" width="0.3718%" height="15" fill="rgb(210,56,17)" fg:x="15" fg:w="34"/><text x="0.4570%" y="143.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="0.1640%" y="149" width="0.3937%" height="15" fill="rgb(224,130,29)" fg:x="15" fg:w="36"/><text x="0.4570%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="0.5577%" y="117" width="0.5577%" height="15" fill="rgb(235,212,8)" fg:x="51" fg:w="51"/><text x="0.8507%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="1.1154%" y="117" width="0.3718%" height="15" fill="rgb(223,33,50)" fg:x="102" fg:w="34"/><text x="1.4083%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="1.4872%" y="117" width="0.7436%" height="15" fill="rgb(219,149,13)" fg:x="136" fg:w="68"/><text x="1.7801%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="2.2307%" y="101" width="0.5577%" height="15" fill="rgb(250,156,29)" fg:x="204" fg:w="51"/><text x="2.5237%" y="111.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="2.7884%" y="101" width="2.3291%" height="15" fill="rgb(216,193,19)" fg:x="255" fg:w="213"/><text x="3.0814%" y="111.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="5.1176%" y="101" width="0.7436%" height="15" fill="rgb(216,135,14)" fg:x="468" fg:w="68"/><text x="5.4105%" y="111.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="5.8611%" y="101" width="2.3291%" height="15" fill="rgb(241,47,5)" fg:x="536" fg:w="213"/><text x="6.1541%" y="111.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="8.1903%" y="101" width="0.7436%" height="15" fill="rgb(233,42,35)" fg:x="749" fg:w="68"/><text x="8.4832%" y="111.50"></text></g><g><title>motoko_rts::idl::parse_fields::h81c9d86bd5bcf94b (695 instructions, 7.60%)</title><rect x="2.2307%" y="117" width="7.5998%" height="15" fill="rgb(231,13,6)" fg:x="204" fg:w="695"/><text x="2.5237%" y="127.50">motoko_r..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="9.8305%" y="117" width="0.7436%" height="15" fill="rgb(207,181,40)" fg:x="899" fg:w="68"/><text x="10.1235%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="10.5741%" y="117" width="0.5577%" height="15" fill="rgb(254,173,49)" fg:x="967" fg:w="51"/><text x="10.8671%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="11.1318%" y="117" width="0.7436%" height="15" fill="rgb(221,1,38)" fg:x="1018" fg:w="68"/><text x="11.4247%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="11.8753%" y="117" width="0.5577%" height="15" fill="rgb(206,124,46)" fg:x="1086" fg:w="51"/><text x="12.1683%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="12.4330%" y="117" width="0.5577%" height="15" fill="rgb(249,21,11)" fg:x="1137" fg:w="51"/><text x="12.7260%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="12.9907%" y="117" width="0.7436%" height="15" fill="rgb(222,201,40)" fg:x="1188" fg:w="68"/><text x="13.2837%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="13.7343%" y="101" width="0.5577%" height="15" fill="rgb(235,61,29)" fg:x="1256" fg:w="51"/><text x="14.0272%" y="111.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="14.2920%" y="101" width="2.3291%" height="15" fill="rgb(219,207,3)" fg:x="1307" fg:w="213"/><text x="14.5849%" y="111.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="16.6211%" y="101" width="0.7436%" height="15" fill="rgb(222,56,46)" fg:x="1520" fg:w="68"/><text x="16.9141%" y="111.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="17.3647%" y="101" width="2.3291%" height="15" fill="rgb(239,76,54)" fg:x="1588" fg:w="213"/><text x="17.6576%" y="111.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="19.6938%" y="101" width="0.7436%" height="15" fill="rgb(231,124,27)" fg:x="1801" fg:w="68"/><text x="19.9868%" y="111.50"></text></g><g><title>motoko_rts::idl::parse_fields::h81c9d86bd5bcf94b (695 instructions, 7.60%)</title><rect x="13.7343%" y="117" width="7.5998%" height="15" fill="rgb(249,195,6)" fg:x="1256" fg:w="695"/><text x="14.0272%" y="127.50">motoko_r..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="21.3341%" y="117" width="0.7436%" height="15" fill="rgb(237,174,47)" fg:x="1951" fg:w="68"/><text x="21.6270%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="22.0776%" y="117" width="0.7436%" height="15" fill="rgb(206,201,31)" fg:x="2019" fg:w="68"/><text x="22.3706%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="22.8212%" y="117" width="0.7436%" height="15" fill="rgb(231,57,52)" fg:x="2087" fg:w="68"/><text x="23.1142%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="23.5648%" y="117" width="0.5577%" height="15" fill="rgb(248,177,22)" fg:x="2155" fg:w="51"/><text x="23.8578%" y="127.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="24.1225%" y="117" width="0.7436%" height="15" fill="rgb(215,211,37)" fg:x="2206" fg:w="68"/><text x="24.4154%" y="127.50"></text></g><g><title>parse_idl_header (2,541 instructions, 27.79%)</title><rect x="0.5577%" y="133" width="27.7857%" height="15" fill="rgb(241,128,51)" fg:x="51" fg:w="2541"/><text x="0.8507%" y="143.50">parse_idl_header</text></g><g><title>idl_sub_buf_words (9 instructions, 0.10%)</title><rect x="28.3434%" y="133" width="0.0984%" height="15" fill="rgb(227,165,31)" fg:x="2592" fg:w="9"/><text x="28.6363%" y="143.50"></text></g><g><title>memset (39 instructions, 0.43%)</title><rect x="28.4418%" y="117" width="0.4265%" height="15" fill="rgb(228,167,24)" fg:x="2601" fg:w="39"/><text x="28.7347%" y="127.50"></text></g><g><title>idl_sub_buf_init (54 instructions, 0.59%)</title><rect x="28.4418%" y="133" width="0.5905%" height="15" fill="rgb(228,143,12)" fg:x="2601" fg:w="54"/><text x="28.7347%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="29.0323%" y="133" width="0.5577%" height="15" fill="rgb(249,149,8)" fg:x="2655" fg:w="51"/><text x="29.3252%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="29.5899%" y="133" width="0.7436%" height="15" fill="rgb(243,35,44)" fg:x="2706" fg:w="68"/><text x="29.8829%" y="143.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="30.3335%" y="133" width="0.0328%" height="15" fill="rgb(246,89,9)" fg:x="2774" fg:w="3"/><text x="30.6265%" y="143.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="30.3663%" y="133" width="0.0328%" height="15" fill="rgb(233,213,13)" fg:x="2777" fg:w="3"/><text x="30.6593%" y="143.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="30.3991%" y="133" width="0.0328%" height="15" fill="rgb(233,141,41)" fg:x="2780" fg:w="3"/><text x="30.6921%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="30.4319%" y="117" width="0.7436%" height="15" fill="rgb(239,167,4)" fg:x="2783" fg:w="68"/><text x="30.7249%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="31.1755%" y="117" width="0.5577%" height="15" fill="rgb(209,217,16)" fg:x="2851" fg:w="51"/><text x="31.4685%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="31.7332%" y="117" width="0.2843%" height="15" fill="rgb(219,88,35)" fg:x="2902" fg:w="26"/><text x="32.0262%" y="127.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="32.0175%" y="101" width="2.3291%" height="15" fill="rgb(220,193,23)" fg:x="2928" fg:w="213"/><text x="32.3105%" y="111.50">l..</text></g><g><title>find_field (242 instructions, 2.65%)</title><rect x="32.0175%" y="117" width="2.6463%" height="15" fill="rgb(230,90,52)" fg:x="2928" fg:w="242"/><text x="32.3105%" y="127.50">f..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="34.6638%" y="117" width="0.7436%" height="15" fill="rgb(252,106,19)" fg:x="3170" fg:w="68"/><text x="34.9567%" y="127.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="35.4073%" y="117" width="0.0328%" height="15" fill="rgb(206,74,20)" fg:x="3238" fg:w="3"/><text x="35.7003%" y="127.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="35.4401%" y="117" width="0.0328%" height="15" fill="rgb(230,138,44)" fg:x="3241" fg:w="3"/><text x="35.7331%" y="127.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="35.4729%" y="117" width="0.0328%" height="15" fill="rgb(235,182,43)" fg:x="3244" fg:w="3"/><text x="35.7659%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="35.5057%" y="101" width="0.5577%" height="15" fill="rgb(242,16,51)" fg:x="3247" fg:w="51"/><text x="35.7987%" y="111.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (203 instructions, 2.22%)</title><rect x="36.0634%" y="85" width="2.2198%" height="15" fill="rgb(248,9,4)" fg:x="3298" fg:w="203"/><text x="36.3564%" y="95.50">c..</text></g><g><title>utf8_validate (220 instructions, 2.41%)</title><rect x="36.0634%" y="101" width="2.4057%" height="15" fill="rgb(210,31,22)" fg:x="3298" fg:w="220"/><text x="36.3564%" y="111.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="38.4691%" y="69" width="0.3718%" height="15" fill="rgb(239,54,39)" fg:x="3518" fg:w="34"/><text x="38.7621%" y="79.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.45%)</title><rect x="38.4691%" y="85" width="0.4483%" height="15" fill="rgb(230,99,41)" fg:x="3518" fg:w="41"/><text x="38.7621%" y="95.50"></text></g><g><title>memcpy (152 instructions, 1.66%)</title><rect x="38.9174%" y="85" width="1.6621%" height="15" fill="rgb(253,106,12)" fg:x="3559" fg:w="152"/><text x="39.2104%" y="95.50"></text></g><g><title>text_of_ptr_size (203 instructions, 2.22%)</title><rect x="38.4691%" y="101" width="2.2198%" height="15" fill="rgb(213,46,41)" fg:x="3518" fg:w="203"/><text x="38.7621%" y="111.50">t..</text></g><g><title>@deserialize_go&lt;t&gt; (511 instructions, 5.59%)</title><rect x="35.5057%" y="117" width="5.5878%" height="15" fill="rgb(215,133,35)" fg:x="3247" fg:w="511"/><text x="35.7987%" y="127.50">@deser..</text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="41.0935%" y="101" width="2.3291%" height="15" fill="rgb(213,28,5)" fg:x="3758" fg:w="213"/><text x="41.3865%" y="111.50">l..</text></g><g><title>find_field (242 instructions, 2.65%)</title><rect x="41.0935%" y="117" width="2.6463%" height="15" fill="rgb(215,77,49)" fg:x="3758" fg:w="242"/><text x="41.3865%" y="127.50">f..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="43.7397%" y="117" width="0.7436%" height="15" fill="rgb(248,100,22)" fg:x="4000" fg:w="68"/><text x="44.0327%" y="127.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="44.4833%" y="117" width="0.0328%" height="15" fill="rgb(208,67,9)" fg:x="4068" fg:w="3"/><text x="44.7763%" y="127.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="44.5161%" y="117" width="0.0328%" height="15" fill="rgb(219,133,21)" fg:x="4071" fg:w="3"/><text x="44.8091%" y="127.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="44.5489%" y="117" width="0.0328%" height="15" fill="rgb(246,46,29)" fg:x="4074" fg:w="3"/><text x="44.8419%" y="127.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.45%)</title><rect x="44.5817%" y="53" width="0.4483%" height="15" fill="rgb(246,185,52)" fg:x="4077" fg:w="41"/><text x="44.8747%" y="63.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.45%)</title><rect x="45.0301%" y="53" width="0.4483%" height="15" fill="rgb(252,136,11)" fg:x="4118" fg:w="41"/><text x="45.3230%" y="63.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="45.4784%" y="53" width="0.7436%" height="15" fill="rgb(219,138,53)" fg:x="4159" fg:w="68"/><text x="45.7714%" y="63.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="46.2220%" y="53" width="0.7436%" height="15" fill="rgb(211,51,23)" fg:x="4227" fg:w="68"/><text x="46.5149%" y="63.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="46.9656%" y="53" width="0.5577%" height="15" fill="rgb(247,221,28)" fg:x="4295" fg:w="51"/><text x="47.2585%" y="63.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="47.5232%" y="53" width="0.5577%" height="15" fill="rgb(251,222,45)" fg:x="4346" fg:w="51"/><text x="47.8162%" y="63.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="48.0809%" y="53" width="0.7436%" height="15" fill="rgb(217,162,53)" fg:x="4397" fg:w="68"/><text x="48.3739%" y="63.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="48.8245%" y="53" width="0.7436%" height="15" fill="rgb(229,93,14)" fg:x="4465" fg:w="68"/><text x="49.1175%" y="63.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.45%)</title><rect x="49.5681%" y="37" width="0.4483%" height="15" fill="rgb(209,67,49)" fg:x="4533" fg:w="41"/><text x="49.8610%" y="47.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.45%)</title><rect x="50.0164%" y="37" width="0.4483%" height="15" fill="rgb(213,87,29)" fg:x="4574" fg:w="41"/><text x="50.3094%" y="47.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="50.4647%" y="37" width="0.7436%" height="15" fill="rgb(205,151,52)" fg:x="4615" fg:w="68"/><text x="50.7577%" y="47.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="51.2083%" y="37" width="0.7436%" height="15" fill="rgb(253,215,39)" fg:x="4683" fg:w="68"/><text x="51.5013%" y="47.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="51.9519%" y="37" width="0.5577%" height="15" fill="rgb(221,220,41)" fg:x="4751" fg:w="51"/><text x="52.2449%" y="47.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="52.5096%" y="37" width="0.5577%" height="15" fill="rgb(218,133,21)" fg:x="4802" fg:w="51"/><text x="52.8025%" y="47.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="53.0672%" y="37" width="2.3291%" height="15" fill="rgb(221,193,43)" fg:x="4853" fg:w="213"/><text x="53.3602%" y="47.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="55.3964%" y="37" width="0.7436%" height="15" fill="rgb(240,128,52)" fg:x="5066" fg:w="68"/><text x="55.6894%" y="47.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="56.1400%" y="37" width="2.3291%" height="15" fill="rgb(253,114,12)" fg:x="5134" fg:w="213"/><text x="56.4329%" y="47.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="58.4691%" y="37" width="0.7436%" height="15" fill="rgb(215,223,47)" fg:x="5347" fg:w="68"/><text x="58.7621%" y="47.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (49 instructions, 0.54%)</title><rect x="59.2127%" y="37" width="0.5358%" height="15" fill="rgb(248,225,23)" fg:x="5415" fg:w="49"/><text x="59.5057%" y="47.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="59.7485%" y="37" width="2.3291%" height="15" fill="rgb(250,108,0)" fg:x="5464" fg:w="213"/><text x="60.0415%" y="47.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="62.0776%" y="37" width="0.7436%" height="15" fill="rgb(228,208,7)" fg:x="5677" fg:w="68"/><text x="62.3706%" y="47.50"></text></g><g><title>leb128_decode (213 instructions, 2.33%)</title><rect x="62.8212%" y="37" width="2.3291%" height="15" fill="rgb(244,45,10)" fg:x="5745" fg:w="213"/><text x="63.1142%" y="47.50">l..</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="65.1504%" y="37" width="0.7436%" height="15" fill="rgb(207,125,25)" fg:x="5958" fg:w="68"/><text x="65.4433%" y="47.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (49 instructions, 0.54%)</title><rect x="65.8939%" y="37" width="0.5358%" height="15" fill="rgb(210,195,18)" fg:x="6026" fg:w="49"/><text x="66.1869%" y="47.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,833 instructions, 20.04%)</title><rect x="49.5681%" y="53" width="20.0437%" height="15" fill="rgb(249,80,12)" fg:x="4533" fg:w="1833"/><text x="49.8610%" y="63.50">motoko_rts::idl::sub::h919..</text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="69.6118%" y="53" width="0.5577%" height="15" fill="rgb(221,65,9)" fg:x="6366" fg:w="51"/><text x="69.9048%" y="63.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="70.1695%" y="53" width="0.5577%" height="15" fill="rgb(235,49,36)" fg:x="6417" fg:w="51"/><text x="70.4625%" y="63.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="70.7272%" y="53" width="0.5577%" height="15" fill="rgb(225,32,20)" fg:x="6468" fg:w="51"/><text x="71.0201%" y="63.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="71.2849%" y="53" width="0.5577%" height="15" fill="rgb(215,141,46)" fg:x="6519" fg:w="51"/><text x="71.5778%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (2,752 instructions, 30.09%)</title><rect x="44.5817%" y="69" width="30.0929%" height="15" fill="rgb(250,160,47)" fg:x="4077" fg:w="2752"/><text x="44.8747%" y="79.50">motoko_rts::idl::sub::h919c13e12b209aa0</text></g><g><title>idl_sub (2,796 instructions, 30.57%)</title><rect x="44.5817%" y="85" width="30.5741%" height="15" fill="rgb(216,222,40)" fg:x="4077" fg:w="2796"/><text x="44.8747%" y="95.50">idl_sub</text></g><g><title>idl_sub (2,808 instructions, 30.71%)</title><rect x="44.5817%" y="101" width="30.7053%" height="15" fill="rgb(234,217,39)" fg:x="4077" fg:w="2808"/><text x="44.8747%" y="111.50">idl_sub</text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="75.2870%" y="101" width="0.7436%" height="15" fill="rgb(207,178,40)" fg:x="6885" fg:w="68"/><text x="75.5800%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="76.0306%" y="101" width="0.5577%" height="15" fill="rgb(221,136,13)" fg:x="6953" fg:w="51"/><text x="76.3236%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="76.5883%" y="85" width="0.3718%" height="15" fill="rgb(249,199,10)" fg:x="7004" fg:w="34"/><text x="76.8813%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="76.5883%" y="101" width="0.3937%" height="15" fill="rgb(249,222,13)" fg:x="7004" fg:w="36"/><text x="76.8813%" y="111.50"></text></g><g><title>memcpy (115 instructions, 1.26%)</title><rect x="76.9820%" y="101" width="1.2575%" height="15" fill="rgb(244,185,38)" fg:x="7040" fg:w="115"/><text x="77.2749%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="78.2395%" y="101" width="0.5577%" height="15" fill="rgb(236,202,9)" fg:x="7155" fg:w="51"/><text x="78.5324%" y="111.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (185 instructions, 2.02%)</title><rect x="78.7972%" y="85" width="2.0230%" height="15" fill="rgb(250,229,37)" fg:x="7206" fg:w="185"/><text x="79.0901%" y="95.50"></text></g><g><title>utf8_validate (202 instructions, 2.21%)</title><rect x="78.7972%" y="101" width="2.2089%" height="15" fill="rgb(206,174,23)" fg:x="7206" fg:w="202"/><text x="79.0901%" y="111.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="81.0060%" y="69" width="0.3718%" height="15" fill="rgb(211,33,43)" fg:x="7408" fg:w="34"/><text x="81.2990%" y="79.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.45%)</title><rect x="81.0060%" y="85" width="0.4483%" height="15" fill="rgb(245,58,50)" fg:x="7408" fg:w="41"/><text x="81.2990%" y="95.50"></text></g><g><title>memcpy (148 instructions, 1.62%)</title><rect x="81.4543%" y="85" width="1.6184%" height="15" fill="rgb(244,68,36)" fg:x="7449" fg:w="148"/><text x="81.7473%" y="95.50"></text></g><g><title>text_of_ptr_size (199 instructions, 2.18%)</title><rect x="81.0060%" y="101" width="2.1761%" height="15" fill="rgb(232,229,15)" fg:x="7408" fg:w="199"/><text x="81.2990%" y="111.50">t..</text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="83.1821%" y="85" width="0.2843%" height="15" fill="rgb(254,30,23)" fg:x="7607" fg:w="26"/><text x="83.4750%" y="95.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="83.1821%" y="101" width="0.4483%" height="15" fill="rgb(235,160,14)" fg:x="7607" fg:w="41"/><text x="83.4750%" y="111.50"></text></g><g><title>@deserialize_go&lt;Fsr(r(topic:t,value:N))()&gt; (3,725 instructions, 40.73%)</title><rect x="44.5817%" y="117" width="40.7326%" height="15" fill="rgb(212,155,44)" fg:x="4077" fg:w="3725"/><text x="44.8747%" y="127.50">@deserialize_go&lt;Fsr(r(topic:t,value:N))()&gt;</text></g><g><title>skip_fields (5 instructions, 0.05%)</title><rect x="85.3144%" y="117" width="0.0547%" height="15" fill="rgb(226,2,50)" fg:x="7802" fg:w="5"/><text x="85.6073%" y="127.50"></text></g><g><title>@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (5,202 instructions, 56.88%)</title><rect x="30.4319%" y="133" width="56.8835%" height="15" fill="rgb(234,177,6)" fg:x="2783" fg:w="5202"/><text x="30.7249%" y="143.50">@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt;</text></g><g><title>@deserialize&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (8,138 instructions, 88.99%)</title><rect x="0.5577%" y="149" width="88.9885%" height="15" fill="rgb(217,24,9)" fg:x="51" fg:w="8138"/><text x="0.8507%" y="159.50">@deserialize&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt;</text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="89.5462%" y="149" width="0.2843%" height="15" fill="rgb(220,13,46)" fg:x="8189" fg:w="26"/><text x="89.8392%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="89.8305%" y="101" width="0.2843%" height="15" fill="rgb(239,221,27)" fg:x="8215" fg:w="26"/><text x="90.1235%" y="111.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="89.8305%" y="117" width="0.4483%" height="15" fill="rgb(222,198,25)" fg:x="8215" fg:w="41"/><text x="90.1235%" y="127.50"></text></g><g><title>opt_inject (14 instructions, 0.15%)</title><rect x="90.2788%" y="117" width="0.1531%" height="15" fill="rgb(211,99,13)" fg:x="8256" fg:w="14"/><text x="90.5718%" y="127.50"></text></g><g><title>push (59 instructions, 0.65%)</title><rect x="89.8305%" y="133" width="0.6452%" height="15" fill="rgb(232,111,31)" fg:x="8215" fg:w="59"/><text x="90.1235%" y="143.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.15%)</title><rect x="90.4757%" y="101" width="0.1531%" height="15" fill="rgb(245,82,37)" fg:x="8274" fg:w="14"/><text x="90.7686%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="90.6288%" y="85" width="0.3718%" height="15" fill="rgb(227,149,46)" fg:x="8288" fg:w="34"/><text x="90.9217%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="90.6288%" y="101" width="0.3937%" height="15" fill="rgb(218,36,50)" fg:x="8288" fg:w="36"/><text x="90.9217%" y="111.50"></text></g><g><title>memcpy (63 instructions, 0.69%)</title><rect x="91.0224%" y="101" width="0.6889%" height="15" fill="rgb(226,80,48)" fg:x="8324" fg:w="63"/><text x="91.3154%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.37%)</title><rect x="91.7113%" y="85" width="0.3718%" height="15" fill="rgb(238,224,15)" fg:x="8387" fg:w="34"/><text x="92.0043%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="91.7113%" y="101" width="0.3937%" height="15" fill="rgb(241,136,10)" fg:x="8387" fg:w="36"/><text x="92.0043%" y="111.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.04%)</title><rect x="92.1050%" y="101" width="0.0437%" height="15" fill="rgb(208,32,45)" fg:x="8423" fg:w="4"/><text x="92.3979%" y="111.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 2.36%)</title><rect x="90.4757%" y="117" width="2.3619%" height="15" fill="rgb(207,135,9)" fg:x="8274" fg:w="216"/><text x="90.7686%" y="127.50">@..</text></g><g><title>reply_with_data (30 instructions, 0.33%)</title><rect x="92.8376%" y="117" width="0.3280%" height="15" fill="rgb(206,86,44)" fg:x="8490" fg:w="30"/><text x="93.1306%" y="127.50"></text></g><g><title>$lambda (251 instructions, 2.74%)</title><rect x="90.4757%" y="133" width="2.7447%" height="15" fill="rgb(245,177,15)" fg:x="8274" fg:w="251"/><text x="90.7686%" y="143.50">$..</text></g><g><title>$lambda (325 instructions, 3.55%)</title><rect x="89.8305%" y="149" width="3.5539%" height="15" fill="rgb(206,64,50)" fg:x="8215" fg:w="325"/><text x="90.1235%" y="159.50">$la..</text></g><g><title>schedule_copying_gc (50 instructions, 0.55%)</title><rect x="93.3844%" y="149" width="0.5467%" height="15" fill="rgb(234,36,40)" fg:x="8540" fg:w="50"/><text x="93.6773%" y="159.50"></text></g><g><title>trans_state4 (14 instructions, 0.15%)</title><rect x="93.9311%" y="149" width="0.1531%" height="15" fill="rgb(213,64,8)" fg:x="8590" fg:w="14"/><text x="94.2241%" y="159.50"></text></g><g><title>all (9,145 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="9145"/><text x="0.2930%" y="191.50"></text></g><g><title>subscribe (9,145 instructions, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="9145"/><text x="0.2930%" y="175.50">subscribe</text></g></svg></svg>