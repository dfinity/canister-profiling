<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="182" onload="init(evt)" viewBox="0 0 1024 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Register subscriber (called by sub canister)</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="165.00"> </text><svg id="frames" x="10" width="1004" total_samples="8489"><g><title>trans_state5 (8 instructions, 0.09%)</title><rect x="0.0000%" y="101" width="0.0942%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="8"/><text x="0.2930%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="0.0942%" y="101" width="0.3534%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="30"/><text x="0.3872%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="0.4476%" y="85" width="0.5419%" height="15" fill="rgb(224,123,36)" fg:x="38" fg:w="46"/><text x="0.7406%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="0.9895%" y="85" width="0.3534%" height="15" fill="rgb(240,125,3)" fg:x="84" fg:w="30"/><text x="1.2825%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="1.3429%" y="85" width="0.7068%" height="15" fill="rgb(205,98,50)" fg:x="114" fg:w="60"/><text x="1.6359%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="2.0497%" y="85" width="0.5419%" height="15" fill="rgb(205,185,37)" fg:x="174" fg:w="46"/><text x="2.3427%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="2.5916%" y="85" width="2.3324%" height="15" fill="rgb(238,207,15)" fg:x="220" fg:w="198"/><text x="2.8846%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="4.9240%" y="85" width="0.7068%" height="15" fill="rgb(213,199,42)" fg:x="418" fg:w="60"/><text x="5.2170%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="5.6308%" y="85" width="2.3324%" height="15" fill="rgb(235,201,11)" fg:x="478" fg:w="198"/><text x="5.9238%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="7.9632%" y="85" width="0.7068%" height="15" fill="rgb(207,46,11)" fg:x="676" fg:w="60"/><text x="8.2562%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="8.6700%" y="85" width="0.7068%" height="15" fill="rgb(241,35,35)" fg:x="736" fg:w="60"/><text x="8.9630%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="9.3768%" y="85" width="0.5419%" height="15" fill="rgb(243,32,47)" fg:x="796" fg:w="46"/><text x="9.6698%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="9.9187%" y="85" width="0.7068%" height="15" fill="rgb(247,202,23)" fg:x="842" fg:w="60"/><text x="10.2117%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="10.6255%" y="85" width="0.5419%" height="15" fill="rgb(219,102,11)" fg:x="902" fg:w="46"/><text x="10.9185%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="11.1674%" y="85" width="0.5419%" height="15" fill="rgb(243,110,44)" fg:x="948" fg:w="46"/><text x="11.4604%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="11.7093%" y="85" width="0.7068%" height="15" fill="rgb(222,74,54)" fg:x="994" fg:w="60"/><text x="12.0022%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="12.4161%" y="85" width="0.5419%" height="15" fill="rgb(216,99,12)" fg:x="1054" fg:w="46"/><text x="12.7090%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="12.9579%" y="85" width="2.3324%" height="15" fill="rgb(226,22,26)" fg:x="1100" fg:w="198"/><text x="13.2509%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="15.2904%" y="85" width="0.7068%" height="15" fill="rgb(217,163,10)" fg:x="1298" fg:w="60"/><text x="15.5833%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="15.9972%" y="85" width="2.3324%" height="15" fill="rgb(213,25,53)" fg:x="1358" fg:w="198"/><text x="16.2901%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="18.3296%" y="85" width="0.7068%" height="15" fill="rgb(252,105,26)" fg:x="1556" fg:w="60"/><text x="18.6226%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="19.0364%" y="85" width="0.7068%" height="15" fill="rgb(220,39,43)" fg:x="1616" fg:w="60"/><text x="19.3294%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="19.7432%" y="85" width="0.7068%" height="15" fill="rgb(229,68,48)" fg:x="1676" fg:w="60"/><text x="20.0362%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="20.4500%" y="85" width="0.7068%" height="15" fill="rgb(252,8,32)" fg:x="1736" fg:w="60"/><text x="20.7430%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="21.1568%" y="85" width="0.5419%" height="15" fill="rgb(223,20,43)" fg:x="1796" fg:w="46"/><text x="21.4498%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="21.6987%" y="85" width="0.7068%" height="15" fill="rgb(229,81,49)" fg:x="1842" fg:w="60"/><text x="21.9916%" y="95.50"></text></g><g><title>parse_idl_header (2,360 instructions, 27.80%)</title><rect x="0.4476%" y="101" width="27.8007%" height="15" fill="rgb(236,28,36)" fg:x="38" fg:w="2360"/><text x="0.7406%" y="111.50">parse_idl_header</text></g><g><title>memset (38 instructions, 0.45%)</title><rect x="28.2483%" y="85" width="0.4476%" height="15" fill="rgb(249,185,26)" fg:x="2398" fg:w="38"/><text x="28.5413%" y="95.50"></text></g><g><title>idl_sub_buf_init (49 instructions, 0.58%)</title><rect x="28.2483%" y="101" width="0.5772%" height="15" fill="rgb(249,174,33)" fg:x="2398" fg:w="49"/><text x="28.5413%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="28.8255%" y="101" width="0.5419%" height="15" fill="rgb(233,201,37)" fg:x="2447" fg:w="46"/><text x="29.1185%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="29.3674%" y="101" width="0.7068%" height="15" fill="rgb(221,78,26)" fg:x="2493" fg:w="60"/><text x="29.6604%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="30.0742%" y="85" width="0.7068%" height="15" fill="rgb(250,127,30)" fg:x="2553" fg:w="60"/><text x="30.3672%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="30.7810%" y="85" width="0.5419%" height="15" fill="rgb(230,49,44)" fg:x="2613" fg:w="46"/><text x="31.0740%" y="95.50"></text></g><g><title>alloc_words (22 instructions, 0.26%)</title><rect x="31.3229%" y="85" width="0.2592%" height="15" fill="rgb(229,67,23)" fg:x="2659" fg:w="22"/><text x="31.6159%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="31.5820%" y="69" width="2.3324%" height="15" fill="rgb(249,83,47)" fg:x="2681" fg:w="198"/><text x="31.8750%" y="79.50">l..</text></g><g><title>find_field (225 instructions, 2.65%)</title><rect x="31.5820%" y="85" width="2.6505%" height="15" fill="rgb(215,43,3)" fg:x="2681" fg:w="225"/><text x="31.8750%" y="95.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="34.2325%" y="85" width="0.7068%" height="15" fill="rgb(238,154,13)" fg:x="2906" fg:w="60"/><text x="34.5255%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="34.9393%" y="69" width="0.5419%" height="15" fill="rgb(219,56,2)" fg:x="2966" fg:w="46"/><text x="35.2323%" y="79.50"></text></g><g><title>utf8_validate (205 instructions, 2.41%)</title><rect x="35.4812%" y="69" width="2.4149%" height="15" fill="rgb(233,0,4)" fg:x="3012" fg:w="205"/><text x="35.7742%" y="79.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="37.8961%" y="37" width="0.3534%" height="15" fill="rgb(235,30,7)" fg:x="3217" fg:w="30"/><text x="38.1891%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.44%)</title><rect x="37.8961%" y="53" width="0.4359%" height="15" fill="rgb(250,79,13)" fg:x="3217" fg:w="37"/><text x="38.1891%" y="63.50"></text></g><g><title>memcpy (145 instructions, 1.71%)</title><rect x="38.3320%" y="53" width="1.7081%" height="15" fill="rgb(211,146,34)" fg:x="3254" fg:w="145"/><text x="38.6249%" y="63.50"></text></g><g><title>text_of_ptr_size (192 instructions, 2.26%)</title><rect x="37.8961%" y="69" width="2.2618%" height="15" fill="rgb(228,22,38)" fg:x="3217" fg:w="192"/><text x="38.1891%" y="79.50">t..</text></g><g><title>@deserialize_go&lt;t&gt; (479 instructions, 5.64%)</title><rect x="34.9393%" y="85" width="5.6426%" height="15" fill="rgb(235,168,5)" fg:x="2966" fg:w="479"/><text x="35.2323%" y="95.50">@deser..</text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="40.5819%" y="69" width="2.3324%" height="15" fill="rgb(221,155,16)" fg:x="3445" fg:w="198"/><text x="40.8749%" y="79.50">l..</text></g><g><title>find_field (225 instructions, 2.65%)</title><rect x="40.5819%" y="85" width="2.6505%" height="15" fill="rgb(215,215,53)" fg:x="3445" fg:w="225"/><text x="40.8749%" y="95.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="43.2324%" y="85" width="0.7068%" height="15" fill="rgb(223,4,10)" fg:x="3670" fg:w="60"/><text x="43.5254%" y="95.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.48%)</title><rect x="43.9392%" y="69" width="0.4830%" height="15" fill="rgb(234,103,6)" fg:x="3730" fg:w="41"/><text x="44.2322%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.48%)</title><rect x="44.4222%" y="69" width="0.4830%" height="15" fill="rgb(227,97,0)" fg:x="3771" fg:w="41"/><text x="44.7152%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="44.9052%" y="69" width="0.7068%" height="15" fill="rgb(234,150,53)" fg:x="3812" fg:w="60"/><text x="45.1981%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="45.6120%" y="69" width="0.7068%" height="15" fill="rgb(228,201,54)" fg:x="3872" fg:w="60"/><text x="45.9049%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="46.3188%" y="69" width="0.5419%" height="15" fill="rgb(222,22,37)" fg:x="3932" fg:w="46"/><text x="46.6117%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="46.8606%" y="69" width="0.5419%" height="15" fill="rgb(237,53,32)" fg:x="3978" fg:w="46"/><text x="47.1536%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="47.4025%" y="69" width="0.7068%" height="15" fill="rgb(233,25,53)" fg:x="4024" fg:w="60"/><text x="47.6955%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="48.1093%" y="69" width="0.7068%" height="15" fill="rgb(210,40,34)" fg:x="4084" fg:w="60"/><text x="48.4023%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.48%)</title><rect x="48.8161%" y="53" width="0.4830%" height="15" fill="rgb(241,220,44)" fg:x="4144" fg:w="41"/><text x="49.1091%" y="63.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::hdde3a72b792c5216 (41 instructions, 0.48%)</title><rect x="49.2991%" y="53" width="0.4830%" height="15" fill="rgb(235,28,35)" fg:x="4185" fg:w="41"/><text x="49.5921%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="49.7821%" y="53" width="0.7068%" height="15" fill="rgb(210,56,17)" fg:x="4226" fg:w="60"/><text x="50.0750%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="50.4889%" y="53" width="0.7068%" height="15" fill="rgb(224,130,29)" fg:x="4286" fg:w="60"/><text x="50.7818%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="51.1957%" y="53" width="0.5419%" height="15" fill="rgb(235,212,8)" fg:x="4346" fg:w="46"/><text x="51.4886%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="51.7375%" y="53" width="0.5419%" height="15" fill="rgb(223,33,50)" fg:x="4392" fg:w="46"/><text x="52.0305%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="52.2794%" y="53" width="2.3324%" height="15" fill="rgb(219,149,13)" fg:x="4438" fg:w="198"/><text x="52.5724%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="54.6119%" y="53" width="0.7068%" height="15" fill="rgb(250,156,29)" fg:x="4636" fg:w="60"/><text x="54.9048%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="55.3186%" y="53" width="2.3324%" height="15" fill="rgb(216,193,19)" fg:x="4696" fg:w="198"/><text x="55.6116%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="57.6511%" y="53" width="0.7068%" height="15" fill="rgb(216,135,14)" fg:x="4894" fg:w="60"/><text x="57.9440%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (51 instructions, 0.60%)</title><rect x="58.3579%" y="53" width="0.6008%" height="15" fill="rgb(241,47,5)" fg:x="4954" fg:w="51"/><text x="58.6508%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="58.9587%" y="53" width="2.3324%" height="15" fill="rgb(233,42,35)" fg:x="5005" fg:w="198"/><text x="59.2516%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="61.2911%" y="53" width="0.7068%" height="15" fill="rgb(231,13,6)" fg:x="5203" fg:w="60"/><text x="61.5841%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.33%)</title><rect x="61.9979%" y="53" width="2.3324%" height="15" fill="rgb(207,181,40)" fg:x="5263" fg:w="198"/><text x="62.2908%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="64.3303%" y="53" width="0.7068%" height="15" fill="rgb(254,173,49)" fg:x="5461" fg:w="60"/><text x="64.6233%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (51 instructions, 0.60%)</title><rect x="65.0371%" y="53" width="0.6008%" height="15" fill="rgb(221,1,38)" fg:x="5521" fg:w="51"/><text x="65.3301%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,710 instructions, 20.14%)</title><rect x="48.8161%" y="69" width="20.1437%" height="15" fill="rgb(206,124,46)" fg:x="4144" fg:w="1710"/><text x="49.1091%" y="79.50">motoko_rts::idl::sub::h919c..</text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="68.9598%" y="69" width="0.5419%" height="15" fill="rgb(249,21,11)" fg:x="5854" fg:w="46"/><text x="69.2528%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="69.5017%" y="69" width="0.5419%" height="15" fill="rgb(222,201,40)" fg:x="5900" fg:w="46"/><text x="69.7947%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="70.0436%" y="69" width="0.5419%" height="15" fill="rgb(235,61,29)" fg:x="5946" fg:w="46"/><text x="70.3366%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="70.5855%" y="69" width="0.5419%" height="15" fill="rgb(219,207,3)" fg:x="5992" fg:w="46"/><text x="70.8784%" y="79.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (2,563 instructions, 30.19%)</title><rect x="43.9392%" y="85" width="30.1920%" height="15" fill="rgb(222,56,46)" fg:x="3730" fg:w="2563"/><text x="44.2322%" y="95.50">motoko_rts::idl::sub::h919c13e12b209aa0</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="74.1312%" y="85" width="0.7068%" height="15" fill="rgb(239,76,54)" fg:x="6293" fg:w="60"/><text x="74.4242%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="74.8380%" y="85" width="0.5419%" height="15" fill="rgb(231,124,27)" fg:x="6353" fg:w="46"/><text x="75.1310%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="75.3799%" y="85" width="0.3534%" height="15" fill="rgb(249,195,6)" fg:x="6399" fg:w="30"/><text x="75.6729%" y="95.50"></text></g><g><title>memcpy (110 instructions, 1.30%)</title><rect x="75.7333%" y="85" width="1.2958%" height="15" fill="rgb(237,174,47)" fg:x="6429" fg:w="110"/><text x="76.0263%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="77.0291%" y="85" width="0.5419%" height="15" fill="rgb(206,201,31)" fg:x="6539" fg:w="46"/><text x="77.3221%" y="95.50"></text></g><g><title>utf8_validate (187 instructions, 2.20%)</title><rect x="77.5710%" y="85" width="2.2029%" height="15" fill="rgb(231,57,52)" fg:x="6585" fg:w="187"/><text x="77.8639%" y="95.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="79.7738%" y="53" width="0.3534%" height="15" fill="rgb(248,177,22)" fg:x="6772" fg:w="30"/><text x="80.0668%" y="63.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.44%)</title><rect x="79.7738%" y="69" width="0.4359%" height="15" fill="rgb(215,211,37)" fg:x="6772" fg:w="37"/><text x="80.0668%" y="79.50"></text></g><g><title>memcpy (141 instructions, 1.66%)</title><rect x="80.2097%" y="69" width="1.6610%" height="15" fill="rgb(241,128,51)" fg:x="6809" fg:w="141"/><text x="80.5027%" y="79.50"></text></g><g><title>text_of_ptr_size (188 instructions, 2.21%)</title><rect x="79.7738%" y="85" width="2.2146%" height="15" fill="rgb(227,165,31)" fg:x="6772" fg:w="188"/><text x="80.0668%" y="95.50">t..</text></g><g><title>alloc_words (22 instructions, 0.26%)</title><rect x="81.9885%" y="69" width="0.2592%" height="15" fill="rgb(228,167,24)" fg:x="6960" fg:w="22"/><text x="82.2814%" y="79.50"></text></g><g><title>to_2_tuple (37 instructions, 0.44%)</title><rect x="81.9885%" y="85" width="0.4359%" height="15" fill="rgb(228,143,12)" fg:x="6960" fg:w="37"/><text x="82.2814%" y="95.50"></text></g><g><title>skip_fields (4 instructions, 0.05%)</title><rect x="82.4243%" y="85" width="0.0471%" height="15" fill="rgb(249,149,8)" fg:x="6997" fg:w="4"/><text x="82.7173%" y="95.50"></text></g><g><title>@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (4,850 instructions, 57.13%)</title><rect x="30.0742%" y="101" width="57.1328%" height="15" fill="rgb(243,35,44)" fg:x="2553" fg:w="4850"/><text x="30.3672%" y="111.50">@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt;</text></g><g><title>alloc_words (22 instructions, 0.26%)</title><rect x="87.2070%" y="101" width="0.2592%" height="15" fill="rgb(246,89,9)" fg:x="7403" fg:w="22"/><text x="87.4999%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.26%)</title><rect x="87.4661%" y="69" width="0.2592%" height="15" fill="rgb(233,213,13)" fg:x="7425" fg:w="22"/><text x="87.7591%" y="79.50"></text></g><g><title>to_2_tuple (37 instructions, 0.44%)</title><rect x="87.4661%" y="85" width="0.4359%" height="15" fill="rgb(233,141,41)" fg:x="7425" fg:w="37"/><text x="87.7591%" y="95.50"></text></g><g><title>opt_inject (14 instructions, 0.16%)</title><rect x="87.9020%" y="85" width="0.1649%" height="15" fill="rgb(239,167,4)" fg:x="7462" fg:w="14"/><text x="88.1950%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="88.0669%" y="69" width="0.3534%" height="15" fill="rgb(209,217,16)" fg:x="7476" fg:w="30"/><text x="88.3599%" y="79.50"></text></g><g><title>memcpy (61 instructions, 0.72%)</title><rect x="88.4203%" y="69" width="0.7186%" height="15" fill="rgb(219,88,35)" fg:x="7506" fg:w="61"/><text x="88.7133%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.35%)</title><rect x="89.1389%" y="69" width="0.3534%" height="15" fill="rgb(220,193,23)" fg:x="7567" fg:w="30"/><text x="89.4319%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.35%)</title><rect x="89.4923%" y="69" width="0.3534%" height="15" fill="rgb(230,90,52)" fg:x="7597" fg:w="30"/><text x="89.7853%" y="79.50"></text></g><g><title>anon_async (212 instructions, 2.50%)</title><rect x="88.0669%" y="85" width="2.4973%" height="15" fill="rgb(252,106,19)" fg:x="7476" fg:w="212"/><text x="88.3599%" y="95.50">a..</text></g><g><title>$lambda.5 (275 instructions, 3.24%)</title><rect x="87.4661%" y="101" width="3.2395%" height="15" fill="rgb(206,74,20)" fg:x="7425" fg:w="275"/><text x="87.7591%" y="111.50">$l..</text></g><g><title>schedule_copying_gc (43 instructions, 0.51%)</title><rect x="90.7056%" y="101" width="0.5065%" height="15" fill="rgb(230,138,44)" fg:x="7700" fg:w="43"/><text x="90.9986%" y="111.50"></text></g><g><title>trans_state4 (13 instructions, 0.15%)</title><rect x="91.2122%" y="101" width="0.1531%" height="15" fill="rgb(235,182,43)" fg:x="7743" fg:w="13"/><text x="91.5051%" y="111.50"></text></g><g><title>all (8,489 instructions, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="8489"/><text x="0.2930%" y="143.50"></text></g><g><title>subscribe (8,489 instructions, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="8489"/><text x="0.2930%" y="127.50">subscribe</text></g></svg></svg>