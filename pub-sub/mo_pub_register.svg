<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="182" onload="init(evt)" viewBox="0 0 1024 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Register subscriber (called by sub canister)</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="165.00"> </text><svg id="frames" x="10" width="1004" total_samples="12200"><g><title>trans_state5 (10 instructions, 0.08%)</title><rect x="0.0000%" y="101" width="0.0820%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="10"/><text x="0.2930%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="0.0820%" y="85" width="0.4672%" height="15" fill="rgb(244,64,35)" fg:x="10" fg:w="57"/><text x="0.3749%" y="95.50"></text></g><g><title>alloc_blob (65 instructions, 0.53%)</title><rect x="0.0820%" y="101" width="0.5328%" height="15" fill="rgb(216,46,15)" fg:x="10" fg:w="65"/><text x="0.3749%" y="111.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="0.6148%" y="85" width="0.3934%" height="15" fill="rgb(250,74,19)" fg:x="75" fg:w="48"/><text x="0.9077%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="1.0082%" y="85" width="0.4672%" height="15" fill="rgb(249,42,33)" fg:x="123" fg:w="57"/><text x="1.3012%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="1.4754%" y="85" width="0.5246%" height="15" fill="rgb(242,149,17)" fg:x="180" fg:w="64"/><text x="1.7684%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="2.0000%" y="85" width="0.3934%" height="15" fill="rgb(244,29,21)" fg:x="244" fg:w="48"/><text x="2.2930%" y="95.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="2.3934%" y="85" width="1.8689%" height="15" fill="rgb(220,130,37)" fg:x="292" fg:w="228"/><text x="2.6864%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="4.2623%" y="85" width="0.5246%" height="15" fill="rgb(211,67,2)" fg:x="520" fg:w="64"/><text x="4.5553%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="4.7869%" y="85" width="0.0984%" height="15" fill="rgb(235,68,52)" fg:x="584" fg:w="12"/><text x="5.0799%" y="95.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="4.8852%" y="85" width="1.8689%" height="15" fill="rgb(246,142,3)" fg:x="596" fg:w="228"/><text x="5.1782%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="6.7541%" y="85" width="0.5246%" height="15" fill="rgb(241,25,7)" fg:x="824" fg:w="64"/><text x="7.0471%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="7.2787%" y="85" width="0.0984%" height="15" fill="rgb(242,119,39)" fg:x="888" fg:w="12"/><text x="7.5717%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="7.3770%" y="85" width="0.5246%" height="15" fill="rgb(241,98,45)" fg:x="900" fg:w="64"/><text x="7.6700%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="7.9016%" y="85" width="0.3934%" height="15" fill="rgb(254,28,30)" fg:x="964" fg:w="48"/><text x="8.1946%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="8.2951%" y="85" width="0.5246%" height="15" fill="rgb(241,142,54)" fg:x="1012" fg:w="64"/><text x="8.5881%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="8.8197%" y="85" width="0.0984%" height="15" fill="rgb(222,85,15)" fg:x="1076" fg:w="12"/><text x="9.1126%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="8.9180%" y="85" width="0.3934%" height="15" fill="rgb(210,85,47)" fg:x="1088" fg:w="48"/><text x="9.2110%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="9.3115%" y="85" width="0.3934%" height="15" fill="rgb(224,206,25)" fg:x="1136" fg:w="48"/><text x="9.6044%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="9.7049%" y="85" width="0.5246%" height="15" fill="rgb(243,201,19)" fg:x="1184" fg:w="64"/><text x="9.9979%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="10.2295%" y="85" width="0.3934%" height="15" fill="rgb(236,59,4)" fg:x="1248" fg:w="48"/><text x="10.5225%" y="95.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="10.6230%" y="85" width="1.8689%" height="15" fill="rgb(254,179,45)" fg:x="1296" fg:w="228"/><text x="10.9159%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="12.4918%" y="85" width="0.5246%" height="15" fill="rgb(226,14,10)" fg:x="1524" fg:w="64"/><text x="12.7848%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="13.0164%" y="85" width="0.0984%" height="15" fill="rgb(244,27,41)" fg:x="1588" fg:w="12"/><text x="13.3094%" y="95.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="13.1148%" y="85" width="1.8689%" height="15" fill="rgb(235,35,32)" fg:x="1600" fg:w="228"/><text x="13.4077%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="14.9836%" y="85" width="0.5246%" height="15" fill="rgb(218,68,31)" fg:x="1828" fg:w="64"/><text x="15.2766%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="15.5082%" y="85" width="0.0984%" height="15" fill="rgb(207,120,37)" fg:x="1892" fg:w="12"/><text x="15.8012%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="15.6066%" y="85" width="0.5246%" height="15" fill="rgb(227,98,0)" fg:x="1904" fg:w="64"/><text x="15.8995%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="16.1311%" y="85" width="0.5246%" height="15" fill="rgb(207,7,3)" fg:x="1968" fg:w="64"/><text x="16.4241%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="16.6557%" y="85" width="0.5246%" height="15" fill="rgb(206,98,19)" fg:x="2032" fg:w="64"/><text x="16.9487%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="17.1803%" y="85" width="0.3934%" height="15" fill="rgb(217,5,26)" fg:x="2096" fg:w="48"/><text x="17.4733%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="17.5738%" y="85" width="0.5246%" height="15" fill="rgb(235,190,38)" fg:x="2144" fg:w="64"/><text x="17.8667%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.10%)</title><rect x="18.0984%" y="85" width="0.0984%" height="15" fill="rgb(247,86,24)" fg:x="2208" fg:w="12"/><text x="18.3913%" y="95.50"></text></g><g><title>parse_idl_header (2,807 instructions, 23.01%)</title><rect x="0.6148%" y="101" width="23.0082%" height="15" fill="rgb(205,101,16)" fg:x="75" fg:w="2807"/><text x="0.9077%" y="111.50">parse_idl_header</text></g><g><title>memset (43 instructions, 0.35%)</title><rect x="23.6230%" y="85" width="0.3525%" height="15" fill="rgb(246,168,33)" fg:x="2882" fg:w="43"/><text x="23.9159%" y="95.50"></text></g><g><title>idl_sub_buf_init (60 instructions, 0.49%)</title><rect x="23.6230%" y="101" width="0.4918%" height="15" fill="rgb(231,114,1)" fg:x="2882" fg:w="60"/><text x="23.9159%" y="111.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="24.1148%" y="101" width="0.3934%" height="15" fill="rgb(207,184,53)" fg:x="2942" fg:w="48"/><text x="24.4077%" y="111.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="24.5082%" y="101" width="0.5246%" height="15" fill="rgb(224,95,51)" fg:x="2990" fg:w="64"/><text x="24.8012%" y="111.50"></text></g><g><title>idl_limit_check (20 instructions, 0.16%)</title><rect x="25.0328%" y="85" width="0.1639%" height="15" fill="rgb(212,188,45)" fg:x="3054" fg:w="20"/><text x="25.3258%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="25.1967%" y="85" width="0.5246%" height="15" fill="rgb(223,154,38)" fg:x="3074" fg:w="64"/><text x="25.4897%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="25.7213%" y="85" width="0.3934%" height="15" fill="rgb(251,22,52)" fg:x="3138" fg:w="48"/><text x="26.0143%" y="95.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="26.1148%" y="69" width="1.8689%" height="15" fill="rgb(229,209,22)" fg:x="3186" fg:w="228"/><text x="26.4077%" y="79.50"></text></g><g><title>find_field (264 instructions, 2.16%)</title><rect x="26.1148%" y="85" width="2.1639%" height="15" fill="rgb(234,138,34)" fg:x="3186" fg:w="264"/><text x="26.4077%" y="95.50">f..</text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="28.2787%" y="85" width="0.5246%" height="15" fill="rgb(212,95,11)" fg:x="3450" fg:w="64"/><text x="28.5717%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.16%)</title><rect x="28.8033%" y="69" width="0.1639%" height="15" fill="rgb(240,179,47)" fg:x="3514" fg:w="20"/><text x="29.0962%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="28.9672%" y="69" width="0.3934%" height="15" fill="rgb(240,163,11)" fg:x="3534" fg:w="48"/><text x="29.2602%" y="79.50"></text></g><g><title>utf8_validate (236 instructions, 1.93%)</title><rect x="29.3607%" y="69" width="1.9344%" height="15" fill="rgb(236,37,12)" fg:x="3582" fg:w="236"/><text x="29.6536%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="31.2951%" y="37" width="0.4672%" height="15" fill="rgb(232,164,16)" fg:x="3818" fg:w="57"/><text x="31.5881%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h7c2cb1fa940479f2 (71 instructions, 0.58%)</title><rect x="31.2951%" y="53" width="0.5820%" height="15" fill="rgb(244,205,15)" fg:x="3818" fg:w="71"/><text x="31.5881%" y="63.50"></text></g><g><title>memcpy (160 instructions, 1.31%)</title><rect x="31.8770%" y="53" width="1.3115%" height="15" fill="rgb(223,117,47)" fg:x="3889" fg:w="160"/><text x="32.1700%" y="63.50"></text></g><g><title>text_of_ptr_size (250 instructions, 2.05%)</title><rect x="31.2951%" y="69" width="2.0492%" height="15" fill="rgb(244,107,35)" fg:x="3818" fg:w="250"/><text x="31.5881%" y="79.50"></text></g><g><title>@deserialize_go&lt;t&gt; (622 instructions, 5.10%)</title><rect x="28.8033%" y="85" width="5.0984%" height="15" fill="rgb(205,140,8)" fg:x="3514" fg:w="622"/><text x="29.0962%" y="95.50">@dese..</text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="33.9016%" y="69" width="1.8689%" height="15" fill="rgb(228,84,46)" fg:x="4136" fg:w="228"/><text x="34.1946%" y="79.50"></text></g><g><title>find_field (264 instructions, 2.16%)</title><rect x="33.9016%" y="85" width="2.1639%" height="15" fill="rgb(254,188,9)" fg:x="4136" fg:w="264"/><text x="34.1946%" y="95.50">f..</text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="36.0656%" y="85" width="0.5246%" height="15" fill="rgb(206,112,54)" fg:x="4400" fg:w="64"/><text x="36.3585%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.16%)</title><rect x="36.5902%" y="85" width="0.1639%" height="15" fill="rgb(216,84,49)" fg:x="4464" fg:w="20"/><text x="36.8831%" y="95.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h5be714b7f890d115 (43 instructions, 0.35%)</title><rect x="36.7541%" y="69" width="0.3525%" height="15" fill="rgb(214,194,35)" fg:x="4484" fg:w="43"/><text x="37.0471%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h5be714b7f890d115 (43 instructions, 0.35%)</title><rect x="37.1066%" y="69" width="0.3525%" height="15" fill="rgb(249,28,3)" fg:x="4527" fg:w="43"/><text x="37.3995%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="37.4590%" y="69" width="0.5246%" height="15" fill="rgb(222,56,52)" fg:x="4570" fg:w="64"/><text x="37.7520%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="37.9836%" y="69" width="0.5246%" height="15" fill="rgb(245,217,50)" fg:x="4634" fg:w="64"/><text x="38.2766%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="38.5082%" y="69" width="0.3934%" height="15" fill="rgb(213,201,24)" fg:x="4698" fg:w="48"/><text x="38.8012%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="38.9016%" y="69" width="0.3934%" height="15" fill="rgb(248,116,28)" fg:x="4746" fg:w="48"/><text x="39.1946%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="39.2951%" y="69" width="0.5246%" height="15" fill="rgb(219,72,43)" fg:x="4794" fg:w="64"/><text x="39.5881%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="39.8197%" y="69" width="0.5246%" height="15" fill="rgb(209,138,14)" fg:x="4858" fg:w="64"/><text x="40.1126%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h5be714b7f890d115 (43 instructions, 0.35%)</title><rect x="40.3443%" y="53" width="0.3525%" height="15" fill="rgb(222,18,33)" fg:x="4922" fg:w="43"/><text x="40.6372%" y="63.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h5be714b7f890d115 (43 instructions, 0.35%)</title><rect x="40.6967%" y="53" width="0.3525%" height="15" fill="rgb(213,199,7)" fg:x="4965" fg:w="43"/><text x="40.9897%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="41.0492%" y="53" width="0.5246%" height="15" fill="rgb(250,110,10)" fg:x="5008" fg:w="64"/><text x="41.3421%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="41.5738%" y="53" width="0.5246%" height="15" fill="rgb(248,123,6)" fg:x="5072" fg:w="64"/><text x="41.8667%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="42.0984%" y="53" width="0.3934%" height="15" fill="rgb(206,91,31)" fg:x="5136" fg:w="48"/><text x="42.3913%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="42.4918%" y="53" width="0.3934%" height="15" fill="rgb(211,154,13)" fg:x="5184" fg:w="48"/><text x="42.7848%" y="63.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="42.8852%" y="53" width="1.8689%" height="15" fill="rgb(225,148,7)" fg:x="5232" fg:w="228"/><text x="43.1782%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="44.7541%" y="53" width="0.5246%" height="15" fill="rgb(220,160,43)" fg:x="5460" fg:w="64"/><text x="45.0471%" y="63.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="45.2787%" y="53" width="1.8689%" height="15" fill="rgb(213,52,39)" fg:x="5524" fg:w="228"/><text x="45.5717%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="47.1475%" y="53" width="0.5246%" height="15" fill="rgb(243,137,7)" fg:x="5752" fg:w="64"/><text x="47.4405%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h26bd6edda70af9d7 (59 instructions, 0.48%)</title><rect x="47.6721%" y="53" width="0.4836%" height="15" fill="rgb(230,79,13)" fg:x="5816" fg:w="59"/><text x="47.9651%" y="63.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="48.1557%" y="53" width="1.8689%" height="15" fill="rgb(247,105,23)" fg:x="5875" fg:w="228"/><text x="48.4487%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="50.0246%" y="53" width="0.5246%" height="15" fill="rgb(223,179,41)" fg:x="6103" fg:w="64"/><text x="50.3176%" y="63.50"></text></g><g><title>leb128_decode (228 instructions, 1.87%)</title><rect x="50.5492%" y="53" width="1.8689%" height="15" fill="rgb(218,9,34)" fg:x="6167" fg:w="228"/><text x="50.8421%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="52.4180%" y="53" width="0.5246%" height="15" fill="rgb(222,106,8)" fg:x="6395" fg:w="64"/><text x="52.7110%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h26bd6edda70af9d7 (59 instructions, 0.48%)</title><rect x="52.9426%" y="53" width="0.4836%" height="15" fill="rgb(211,220,0)" fg:x="6459" fg:w="59"/><text x="53.2356%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h26bd6edda70af9d7 (1,956 instructions, 16.03%)</title><rect x="40.3443%" y="69" width="16.0328%" height="15" fill="rgb(229,52,16)" fg:x="4922" fg:w="1956"/><text x="40.6372%" y="79.50">motoko_rts::idl::sub:..</text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="56.3770%" y="69" width="0.3934%" height="15" fill="rgb(212,155,18)" fg:x="6878" fg:w="48"/><text x="56.6700%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="56.7705%" y="69" width="0.3934%" height="15" fill="rgb(242,21,14)" fg:x="6926" fg:w="48"/><text x="57.0635%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="57.1639%" y="69" width="0.3934%" height="15" fill="rgb(222,19,48)" fg:x="6974" fg:w="48"/><text x="57.4569%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="57.5574%" y="69" width="0.3934%" height="15" fill="rgb(232,45,27)" fg:x="7022" fg:w="48"/><text x="57.8503%" y="79.50"></text></g><g><title>motoko_rts::idl::sub::h26bd6edda70af9d7 (2,914 instructions, 23.89%)</title><rect x="36.7541%" y="85" width="23.8852%" height="15" fill="rgb(249,103,42)" fg:x="4484" fg:w="2914"/><text x="37.0471%" y="95.50">motoko_rts::idl::sub::h26bd6edda..</text></g><g><title>sleb128_decode (64 instructions, 0.52%)</title><rect x="60.6393%" y="85" width="0.5246%" height="15" fill="rgb(246,81,33)" fg:x="7398" fg:w="64"/><text x="60.9323%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="61.1639%" y="85" width="0.3934%" height="15" fill="rgb(252,33,42)" fg:x="7462" fg:w="48"/><text x="61.4569%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="61.5574%" y="69" width="0.4672%" height="15" fill="rgb(209,212,41)" fg:x="7510" fg:w="57"/><text x="61.8503%" y="79.50"></text></g><g><title>alloc_blob (65 instructions, 0.53%)</title><rect x="61.5574%" y="85" width="0.5328%" height="15" fill="rgb(207,154,6)" fg:x="7510" fg:w="65"/><text x="61.8503%" y="95.50"></text></g><g><title>memcpy (123 instructions, 1.01%)</title><rect x="62.0902%" y="85" width="1.0082%" height="15" fill="rgb(223,64,47)" fg:x="7575" fg:w="123"/><text x="62.3831%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.39%)</title><rect x="63.0984%" y="85" width="0.3934%" height="15" fill="rgb(211,161,38)" fg:x="7698" fg:w="48"/><text x="63.3913%" y="95.50"></text></g><g><title>utf8_validate (213 instructions, 1.75%)</title><rect x="63.4918%" y="85" width="1.7459%" height="15" fill="rgb(219,138,40)" fg:x="7746" fg:w="213"/><text x="63.7848%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="65.2377%" y="53" width="0.4672%" height="15" fill="rgb(241,228,46)" fg:x="7959" fg:w="57"/><text x="65.5307%" y="63.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h7c2cb1fa940479f2 (71 instructions, 0.58%)</title><rect x="65.2377%" y="69" width="0.5820%" height="15" fill="rgb(223,209,38)" fg:x="7959" fg:w="71"/><text x="65.5307%" y="79.50"></text></g><g><title>memcpy (156 instructions, 1.28%)</title><rect x="65.8197%" y="69" width="1.2787%" height="15" fill="rgb(236,164,45)" fg:x="8030" fg:w="156"/><text x="66.1126%" y="79.50"></text></g><g><title>text_of_ptr_size (246 instructions, 2.02%)</title><rect x="65.2377%" y="85" width="2.0164%" height="15" fill="rgb(231,15,5)" fg:x="7959" fg:w="246"/><text x="65.5307%" y="95.50"></text></g><g><title>skip_fields (6 instructions, 0.05%)</title><rect x="67.2541%" y="85" width="0.0492%" height="15" fill="rgb(252,35,15)" fg:x="8205" fg:w="6"/><text x="67.5471%" y="95.50"></text></g><g><title>@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (5,782 instructions, 47.39%)</title><rect x="25.0328%" y="101" width="47.3934%" height="15" fill="rgb(248,181,18)" fg:x="3054" fg:w="5782"/><text x="25.3258%" y="111.50">@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt;</text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="72.4262%" y="53" width="0.4672%" height="15" fill="rgb(233,39,42)" fg:x="8836" fg:w="57"/><text x="72.7192%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.53%)</title><rect x="72.4262%" y="69" width="0.5328%" height="15" fill="rgb(238,110,33)" fg:x="8836" fg:w="65"/><text x="72.7192%" y="79.50"></text></g><g><title>memcpy (70 instructions, 0.57%)</title><rect x="72.9590%" y="69" width="0.5738%" height="15" fill="rgb(233,195,10)" fg:x="8901" fg:w="70"/><text x="73.2520%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.47%)</title><rect x="73.5328%" y="53" width="0.4672%" height="15" fill="rgb(254,105,3)" fg:x="8971" fg:w="57"/><text x="73.8258%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.53%)</title><rect x="73.5328%" y="69" width="0.5328%" height="15" fill="rgb(221,225,9)" fg:x="8971" fg:w="65"/><text x="73.8258%" y="79.50"></text></g><g><title>anon_async (1,305 instructions, 10.70%)</title><rect x="72.4262%" y="85" width="10.6967%" height="15" fill="rgb(224,227,45)" fg:x="8836" fg:w="1305"/><text x="72.7192%" y="95.50">anon_async</text></g><g><title>$lambda.6 (1,375 instructions, 11.27%)</title><rect x="72.4262%" y="101" width="11.2705%" height="15" fill="rgb(229,198,43)" fg:x="8836" fg:w="1375"/><text x="72.7192%" y="111.50">$lambda.6</text></g><g><title>schedule_copying_gc (108 instructions, 0.89%)</title><rect x="83.6967%" y="101" width="0.8852%" height="15" fill="rgb(206,209,35)" fg:x="10211" fg:w="108"/><text x="83.9897%" y="111.50"></text></g><g><title>trans_state4 (11 instructions, 0.09%)</title><rect x="84.5820%" y="101" width="0.0902%" height="15" fill="rgb(245,195,53)" fg:x="10319" fg:w="11"/><text x="84.8749%" y="111.50"></text></g><g><title>all (12,200 instructions, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(240,92,26)" fg:x="0" fg:w="12200"/><text x="0.2930%" y="143.50"></text></g><g><title>subscribe (12,200 instructions, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(207,40,23)" fg:x="0" fg:w="12200"/><text x="0.2930%" y="127.50">subscribe</text></g></svg></svg>