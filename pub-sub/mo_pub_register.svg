<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="182" onload="init(evt)" viewBox="0 0 1024 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Register subscriber (called by sub canister)</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="165.00"> </text><svg id="frames" x="10" width="1004" total_samples="8456"><g><title>trans_state5 (8 instructions, 0.09%)</title><rect x="0.0000%" y="101" width="0.0946%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="8"/><text x="0.2930%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="0.0946%" y="101" width="0.3903%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="33"/><text x="0.3876%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="0.4849%" y="85" width="0.5440%" height="15" fill="rgb(230,59,30)" fg:x="41" fg:w="46"/><text x="0.7778%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="1.0289%" y="85" width="0.3903%" height="15" fill="rgb(209,121,21)" fg:x="87" fg:w="33"/><text x="1.3218%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="1.4191%" y="85" width="0.7096%" height="15" fill="rgb(220,109,13)" fg:x="120" fg:w="60"/><text x="1.7121%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="2.1287%" y="85" width="0.5440%" height="15" fill="rgb(232,18,1)" fg:x="180" fg:w="46"/><text x="2.4216%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="2.6727%" y="85" width="2.3415%" height="15" fill="rgb(215,41,42)" fg:x="226" fg:w="198"/><text x="2.9656%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="5.0142%" y="85" width="0.7096%" height="15" fill="rgb(224,123,36)" fg:x="424" fg:w="60"/><text x="5.3072%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="5.7237%" y="85" width="0.1064%" height="15" fill="rgb(240,125,3)" fg:x="484" fg:w="9"/><text x="6.0167%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="5.8302%" y="85" width="2.3415%" height="15" fill="rgb(205,98,50)" fg:x="493" fg:w="198"/><text x="6.1231%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="8.1717%" y="85" width="0.7096%" height="15" fill="rgb(205,185,37)" fg:x="691" fg:w="60"/><text x="8.4647%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="8.8813%" y="85" width="0.1064%" height="15" fill="rgb(238,207,15)" fg:x="751" fg:w="9"/><text x="9.1742%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="8.9877%" y="85" width="0.7096%" height="15" fill="rgb(213,199,42)" fg:x="760" fg:w="60"/><text x="9.2807%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="9.6973%" y="85" width="0.5440%" height="15" fill="rgb(235,201,11)" fg:x="820" fg:w="46"/><text x="9.9902%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="10.2412%" y="85" width="0.7096%" height="15" fill="rgb(207,46,11)" fg:x="866" fg:w="60"/><text x="10.5342%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="10.9508%" y="85" width="0.1064%" height="15" fill="rgb(241,35,35)" fg:x="926" fg:w="9"/><text x="11.2438%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="11.0572%" y="85" width="0.5440%" height="15" fill="rgb(243,32,47)" fg:x="935" fg:w="46"/><text x="11.3502%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="11.6012%" y="85" width="0.5440%" height="15" fill="rgb(247,202,23)" fg:x="981" fg:w="46"/><text x="11.8942%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="12.1452%" y="85" width="0.7096%" height="15" fill="rgb(219,102,11)" fg:x="1027" fg:w="60"/><text x="12.4382%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="12.8548%" y="85" width="0.5440%" height="15" fill="rgb(243,110,44)" fg:x="1087" fg:w="46"/><text x="13.1477%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="13.3988%" y="85" width="2.3415%" height="15" fill="rgb(222,74,54)" fg:x="1133" fg:w="198"/><text x="13.6917%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="15.7403%" y="85" width="0.7096%" height="15" fill="rgb(216,99,12)" fg:x="1331" fg:w="60"/><text x="16.0333%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="16.4499%" y="85" width="0.1064%" height="15" fill="rgb(226,22,26)" fg:x="1391" fg:w="9"/><text x="16.7428%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="16.5563%" y="85" width="2.3415%" height="15" fill="rgb(217,163,10)" fg:x="1400" fg:w="198"/><text x="16.8493%" y="95.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="18.8978%" y="85" width="0.7096%" height="15" fill="rgb(213,25,53)" fg:x="1598" fg:w="60"/><text x="19.1908%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="19.6074%" y="85" width="0.1064%" height="15" fill="rgb(252,105,26)" fg:x="1658" fg:w="9"/><text x="19.9003%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="19.7138%" y="85" width="0.7096%" height="15" fill="rgb(220,39,43)" fg:x="1667" fg:w="60"/><text x="20.0068%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="20.4234%" y="85" width="0.7096%" height="15" fill="rgb(229,68,48)" fg:x="1727" fg:w="60"/><text x="20.7163%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="21.1329%" y="85" width="0.7096%" height="15" fill="rgb(252,8,32)" fg:x="1787" fg:w="60"/><text x="21.4259%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="21.8425%" y="85" width="0.5440%" height="15" fill="rgb(223,20,43)" fg:x="1847" fg:w="46"/><text x="22.1354%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="22.3865%" y="85" width="0.7096%" height="15" fill="rgb(229,81,49)" fg:x="1893" fg:w="60"/><text x="22.6794%" y="95.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.11%)</title><rect x="23.0960%" y="85" width="0.1064%" height="15" fill="rgb(236,28,36)" fg:x="1953" fg:w="9"/><text x="23.3890%" y="95.50"></text></g><g><title>parse_idl_header (2,366 instructions, 27.98%)</title><rect x="0.4849%" y="101" width="27.9801%" height="15" fill="rgb(249,185,26)" fg:x="41" fg:w="2366"/><text x="0.7778%" y="111.50">parse_idl_header</text></g><g><title>memset (39 instructions, 0.46%)</title><rect x="28.4650%" y="85" width="0.4612%" height="15" fill="rgb(249,174,33)" fg:x="2407" fg:w="39"/><text x="28.7580%" y="95.50"></text></g><g><title>idl_sub_buf_init (51 instructions, 0.60%)</title><rect x="28.4650%" y="101" width="0.6031%" height="15" fill="rgb(233,201,37)" fg:x="2407" fg:w="51"/><text x="28.7580%" y="111.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="29.0681%" y="101" width="0.5440%" height="15" fill="rgb(221,78,26)" fg:x="2458" fg:w="46"/><text x="29.3611%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="29.6121%" y="101" width="0.7096%" height="15" fill="rgb(250,127,30)" fg:x="2504" fg:w="60"/><text x="29.9051%" y="111.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="30.3217%" y="85" width="0.7096%" height="15" fill="rgb(230,49,44)" fg:x="2564" fg:w="60"/><text x="30.6146%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="31.0312%" y="85" width="0.5440%" height="15" fill="rgb(229,67,23)" fg:x="2624" fg:w="46"/><text x="31.3242%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (15 instructions, 0.18%)</title><rect x="31.5752%" y="85" width="0.1774%" height="15" fill="rgb(249,83,47)" fg:x="2670" fg:w="15"/><text x="31.8682%" y="95.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="31.7526%" y="69" width="2.3415%" height="15" fill="rgb(215,43,3)" fg:x="2685" fg:w="198"/><text x="32.0456%" y="79.50">l..</text></g><g><title>find_field (225 instructions, 2.66%)</title><rect x="31.7526%" y="85" width="2.6608%" height="15" fill="rgb(238,154,13)" fg:x="2685" fg:w="225"/><text x="32.0456%" y="95.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="34.4134%" y="85" width="0.7096%" height="15" fill="rgb(219,56,2)" fg:x="2910" fg:w="60"/><text x="34.7064%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="35.1230%" y="69" width="0.5440%" height="15" fill="rgb(233,0,4)" fg:x="2970" fg:w="46"/><text x="35.4160%" y="79.50"></text></g><g><title>utf8_validate (207 instructions, 2.45%)</title><rect x="35.6670%" y="69" width="2.4480%" height="15" fill="rgb(235,30,7)" fg:x="3016" fg:w="207"/><text x="35.9600%" y="79.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="38.1149%" y="37" width="0.3903%" height="15" fill="rgb(250,79,13)" fg:x="3223" fg:w="33"/><text x="38.4079%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (40 instructions, 0.47%)</title><rect x="38.1149%" y="53" width="0.4730%" height="15" fill="rgb(211,146,34)" fg:x="3223" fg:w="40"/><text x="38.4079%" y="63.50"></text></g><g><title>memcpy (145 instructions, 1.71%)</title><rect x="38.5880%" y="53" width="1.7148%" height="15" fill="rgb(228,22,38)" fg:x="3263" fg:w="145"/><text x="38.8810%" y="63.50"></text></g><g><title>text_of_ptr_size (195 instructions, 2.31%)</title><rect x="38.1149%" y="69" width="2.3061%" height="15" fill="rgb(235,168,5)" fg:x="3223" fg:w="195"/><text x="38.4079%" y="79.50">t..</text></g><g><title>@deserialize_go&lt;t&gt; (484 instructions, 5.72%)</title><rect x="35.1230%" y="85" width="5.7237%" height="15" fill="rgb(221,155,16)" fg:x="2970" fg:w="484"/><text x="35.4160%" y="95.50">@deser..</text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="40.8467%" y="69" width="2.3415%" height="15" fill="rgb(215,215,53)" fg:x="3454" fg:w="198"/><text x="41.1397%" y="79.50">l..</text></g><g><title>find_field (225 instructions, 2.66%)</title><rect x="40.8467%" y="85" width="2.6608%" height="15" fill="rgb(223,4,10)" fg:x="3454" fg:w="225"/><text x="41.1397%" y="95.50">f..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="43.5076%" y="85" width="0.7096%" height="15" fill="rgb(234,103,6)" fg:x="3679" fg:w="60"/><text x="43.8005%" y="95.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h3c24546a3e3ed8fb (41 instructions, 0.48%)</title><rect x="44.2171%" y="69" width="0.4849%" height="15" fill="rgb(227,97,0)" fg:x="3739" fg:w="41"/><text x="44.5101%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h3c24546a3e3ed8fb (41 instructions, 0.48%)</title><rect x="44.7020%" y="69" width="0.4849%" height="15" fill="rgb(234,150,53)" fg:x="3780" fg:w="41"/><text x="44.9950%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="45.1868%" y="69" width="0.7096%" height="15" fill="rgb(228,201,54)" fg:x="3821" fg:w="60"/><text x="45.4798%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="45.8964%" y="69" width="0.7096%" height="15" fill="rgb(222,22,37)" fg:x="3881" fg:w="60"/><text x="46.1894%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="46.6060%" y="69" width="0.5440%" height="15" fill="rgb(237,53,32)" fg:x="3941" fg:w="46"/><text x="46.8989%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="47.1500%" y="69" width="0.5440%" height="15" fill="rgb(233,25,53)" fg:x="3987" fg:w="46"/><text x="47.4429%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="47.6939%" y="69" width="0.7096%" height="15" fill="rgb(210,40,34)" fg:x="4033" fg:w="60"/><text x="47.9869%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="48.4035%" y="69" width="0.7096%" height="15" fill="rgb(241,220,44)" fg:x="4093" fg:w="60"/><text x="48.6965%" y="79.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h3c24546a3e3ed8fb (41 instructions, 0.48%)</title><rect x="49.1131%" y="53" width="0.4849%" height="15" fill="rgb(235,28,35)" fg:x="4153" fg:w="41"/><text x="49.4060%" y="63.50"></text></g><g><title>motoko_rts::bitrel::BitRel::locate_ptr_bit::h3c24546a3e3ed8fb (41 instructions, 0.48%)</title><rect x="49.5979%" y="53" width="0.4849%" height="15" fill="rgb(210,56,17)" fg:x="4194" fg:w="41"/><text x="49.8909%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="50.0828%" y="53" width="0.7096%" height="15" fill="rgb(224,130,29)" fg:x="4235" fg:w="60"/><text x="50.3758%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="50.7923%" y="53" width="0.7096%" height="15" fill="rgb(235,212,8)" fg:x="4295" fg:w="60"/><text x="51.0853%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="51.5019%" y="53" width="0.5440%" height="15" fill="rgb(223,33,50)" fg:x="4355" fg:w="46"/><text x="51.7949%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="52.0459%" y="53" width="0.5440%" height="15" fill="rgb(219,149,13)" fg:x="4401" fg:w="46"/><text x="52.3389%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="52.5899%" y="53" width="2.3415%" height="15" fill="rgb(250,156,29)" fg:x="4447" fg:w="198"/><text x="52.8828%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="54.9314%" y="53" width="0.7096%" height="15" fill="rgb(216,193,19)" fg:x="4645" fg:w="60"/><text x="55.2244%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="55.6410%" y="53" width="2.3415%" height="15" fill="rgb(216,135,14)" fg:x="4705" fg:w="198"/><text x="55.9339%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="57.9825%" y="53" width="0.7096%" height="15" fill="rgb(241,47,5)" fg:x="4903" fg:w="60"/><text x="58.2755%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (50 instructions, 0.59%)</title><rect x="58.6921%" y="53" width="0.5913%" height="15" fill="rgb(233,42,35)" fg:x="4963" fg:w="50"/><text x="58.9850%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="59.2833%" y="53" width="2.3415%" height="15" fill="rgb(231,13,6)" fg:x="5013" fg:w="198"/><text x="59.5763%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="61.6249%" y="53" width="0.7096%" height="15" fill="rgb(207,181,40)" fg:x="5211" fg:w="60"/><text x="61.9179%" y="63.50"></text></g><g><title>leb128_decode (198 instructions, 2.34%)</title><rect x="62.3344%" y="53" width="2.3415%" height="15" fill="rgb(254,173,49)" fg:x="5271" fg:w="198"/><text x="62.6274%" y="63.50">l..</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="64.6760%" y="53" width="0.7096%" height="15" fill="rgb(221,1,38)" fg:x="5469" fg:w="60"/><text x="64.9689%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (50 instructions, 0.59%)</title><rect x="65.3855%" y="53" width="0.5913%" height="15" fill="rgb(206,124,46)" fg:x="5529" fg:w="50"/><text x="65.6785%" y="63.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (1,692 instructions, 20.01%)</title><rect x="49.1131%" y="69" width="20.0095%" height="15" fill="rgb(249,21,11)" fg:x="4153" fg:w="1692"/><text x="49.4060%" y="79.50">motoko_rts::idl::sub::h0b2..</text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="69.1225%" y="69" width="0.5440%" height="15" fill="rgb(222,201,40)" fg:x="5845" fg:w="46"/><text x="69.4155%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="69.6665%" y="69" width="0.5440%" height="15" fill="rgb(235,61,29)" fg:x="5891" fg:w="46"/><text x="69.9595%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="70.2105%" y="69" width="0.5440%" height="15" fill="rgb(219,207,3)" fg:x="5937" fg:w="46"/><text x="70.5035%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="70.7545%" y="69" width="0.5440%" height="15" fill="rgb(222,56,46)" fg:x="5983" fg:w="46"/><text x="71.0475%" y="79.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (2,539 instructions, 30.03%)</title><rect x="44.2171%" y="85" width="30.0260%" height="15" fill="rgb(239,76,54)" fg:x="3739" fg:w="2539"/><text x="44.5101%" y="95.50">motoko_rts::idl::sub::h0b22968d95269211</text></g><g><title>sleb128_decode (60 instructions, 0.71%)</title><rect x="74.2431%" y="85" width="0.7096%" height="15" fill="rgb(231,124,27)" fg:x="6278" fg:w="60"/><text x="74.5361%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="74.9527%" y="85" width="0.5440%" height="15" fill="rgb(249,195,6)" fg:x="6338" fg:w="46"/><text x="75.2457%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="75.4967%" y="85" width="0.3903%" height="15" fill="rgb(237,174,47)" fg:x="6384" fg:w="33"/><text x="75.7897%" y="95.50"></text></g><g><title>memcpy (110 instructions, 1.30%)</title><rect x="75.8869%" y="85" width="1.3009%" height="15" fill="rgb(206,201,31)" fg:x="6417" fg:w="110"/><text x="76.1799%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.54%)</title><rect x="77.1878%" y="85" width="0.5440%" height="15" fill="rgb(231,57,52)" fg:x="6527" fg:w="46"/><text x="77.4808%" y="95.50"></text></g><g><title>utf8_validate (188 instructions, 2.22%)</title><rect x="77.7318%" y="85" width="2.2233%" height="15" fill="rgb(248,177,22)" fg:x="6573" fg:w="188"/><text x="78.0248%" y="95.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="79.9551%" y="53" width="0.3903%" height="15" fill="rgb(215,211,37)" fg:x="6761" fg:w="33"/><text x="80.2480%" y="63.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (40 instructions, 0.47%)</title><rect x="79.9551%" y="69" width="0.4730%" height="15" fill="rgb(241,128,51)" fg:x="6761" fg:w="40"/><text x="80.2480%" y="79.50"></text></g><g><title>memcpy (141 instructions, 1.67%)</title><rect x="80.4281%" y="69" width="1.6675%" height="15" fill="rgb(227,165,31)" fg:x="6801" fg:w="141"/><text x="80.7211%" y="79.50"></text></g><g><title>text_of_ptr_size (191 instructions, 2.26%)</title><rect x="79.9551%" y="85" width="2.2588%" height="15" fill="rgb(228,167,24)" fg:x="6761" fg:w="191"/><text x="80.2480%" y="95.50">t..</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.18%)</title><rect x="82.2138%" y="69" width="0.1774%" height="15" fill="rgb(228,143,12)" fg:x="6952" fg:w="15"/><text x="82.5068%" y="79.50"></text></g><g><title>to_2_tuple (26 instructions, 0.31%)</title><rect x="82.2138%" y="85" width="0.3075%" height="15" fill="rgb(249,149,8)" fg:x="6952" fg:w="26"/><text x="82.5068%" y="95.50"></text></g><g><title>skip_fields (4 instructions, 0.05%)</title><rect x="82.5213%" y="85" width="0.0473%" height="15" fill="rgb(243,35,44)" fg:x="6978" fg:w="4"/><text x="82.8143%" y="95.50"></text></g><g><title>@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt; (4,816 instructions, 56.95%)</title><rect x="30.3217%" y="101" width="56.9536%" height="15" fill="rgb(246,89,9)" fg:x="2564" fg:w="4816"/><text x="30.6146%" y="111.50">@deserialize_go&lt;r(callback:Fsr(r(topic:t,value:N))(),topic:t)&gt;</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.18%)</title><rect x="87.2753%" y="101" width="0.1774%" height="15" fill="rgb(233,213,13)" fg:x="7380" fg:w="15"/><text x="87.5683%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.18%)</title><rect x="87.4527%" y="69" width="0.1774%" height="15" fill="rgb(233,141,41)" fg:x="7395" fg:w="15"/><text x="87.7457%" y="79.50"></text></g><g><title>to_2_tuple (26 instructions, 0.31%)</title><rect x="87.4527%" y="85" width="0.3075%" height="15" fill="rgb(239,167,4)" fg:x="7395" fg:w="26"/><text x="87.7457%" y="95.50"></text></g><g><title>opt_inject (18 instructions, 0.21%)</title><rect x="87.7602%" y="85" width="0.2129%" height="15" fill="rgb(209,217,16)" fg:x="7421" fg:w="18"/><text x="88.0531%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="87.9730%" y="69" width="0.3903%" height="15" fill="rgb(219,88,35)" fg:x="7439" fg:w="33"/><text x="88.2660%" y="79.50"></text></g><g><title>memcpy (61 instructions, 0.72%)</title><rect x="88.3633%" y="69" width="0.7214%" height="15" fill="rgb(220,193,23)" fg:x="7472" fg:w="61"/><text x="88.6563%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.39%)</title><rect x="89.0847%" y="69" width="0.3903%" height="15" fill="rgb(230,90,52)" fg:x="7533" fg:w="33"/><text x="89.3776%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.35%)</title><rect x="89.4749%" y="69" width="0.3548%" height="15" fill="rgb(252,106,19)" fg:x="7566" fg:w="30"/><text x="89.7679%" y="79.50"></text></g><g><title>anon_async (218 instructions, 2.58%)</title><rect x="87.9730%" y="85" width="2.5781%" height="15" fill="rgb(206,74,20)" fg:x="7439" fg:w="218"/><text x="88.2660%" y="95.50">a..</text></g><g><title>$lambda.5 (274 instructions, 3.24%)</title><rect x="87.4527%" y="101" width="3.2403%" height="15" fill="rgb(230,138,44)" fg:x="7395" fg:w="274"/><text x="87.7457%" y="111.50">$l..</text></g><g><title>schedule_copying_gc (45 instructions, 0.53%)</title><rect x="90.6930%" y="101" width="0.5322%" height="15" fill="rgb(235,182,43)" fg:x="7669" fg:w="45"/><text x="90.9860%" y="111.50"></text></g><g><title>trans_state4 (13 instructions, 0.15%)</title><rect x="91.2252%" y="101" width="0.1537%" height="15" fill="rgb(242,16,51)" fg:x="7714" fg:w="13"/><text x="91.5181%" y="111.50"></text></g><g><title>all (8,456 instructions, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="8456"/><text x="0.2930%" y="143.50"></text></g><g><title>subscribe (8,456 instructions, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="8456"/><text x="0.2930%" y="127.50">subscribe</text></g></svg></svg>