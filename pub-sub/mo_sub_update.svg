<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Update subscriber (callback from pub canister)</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="4001"><g><title>trans_state5 (9 instructions, 0.22%)</title><rect x="0.0000%" y="117" width="0.2249%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="9"/><text x="0.2930%" y="127.50"></text></g><g><title>@reset_cycles (3 instructions, 0.07%)</title><rect x="0.2249%" y="117" width="0.0750%" height="15" fill="rgb(246,171,24)" fg:x="9" fg:w="3"/><text x="0.5179%" y="127.50"></text></g><g><title>@reset_refund (3 instructions, 0.07%)</title><rect x="0.2999%" y="117" width="0.0750%" height="15" fill="rgb(215,142,24)" fg:x="12" fg:w="3"/><text x="0.5929%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.85%)</title><rect x="0.3749%" y="101" width="0.8498%" height="15" fill="rgb(250,187,7)" fg:x="15" fg:w="34"/><text x="0.6679%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.90%)</title><rect x="0.3749%" y="117" width="0.8998%" height="15" fill="rgb(228,66,33)" fg:x="15" fg:w="36"/><text x="0.6679%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="1.2747%" y="85" width="1.2747%" height="15" fill="rgb(234,215,21)" fg:x="51" fg:w="51"/><text x="1.5677%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.85%)</title><rect x="2.5494%" y="85" width="0.8498%" height="15" fill="rgb(222,191,20)" fg:x="102" fg:w="34"/><text x="2.8423%" y="95.50"></text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="3.3992%" y="85" width="1.6996%" height="15" fill="rgb(245,79,54)" fg:x="136" fg:w="68"/><text x="3.6921%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="5.0987%" y="69" width="1.2747%" height="15" fill="rgb(240,10,37)" fg:x="204" fg:w="51"/><text x="5.3917%" y="79.50"></text></g><g><title>leb128_decode (213 instructions, 5.32%)</title><rect x="6.3734%" y="69" width="5.3237%" height="15" fill="rgb(214,192,32)" fg:x="255" fg:w="213"/><text x="6.6664%" y="79.50">leb12..</text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="11.6971%" y="69" width="1.6996%" height="15" fill="rgb(209,36,54)" fg:x="468" fg:w="68"/><text x="11.9900%" y="79.50"></text></g><g><title>leb128_decode (213 instructions, 5.32%)</title><rect x="13.3967%" y="69" width="5.3237%" height="15" fill="rgb(220,10,11)" fg:x="536" fg:w="213"/><text x="13.6896%" y="79.50">leb12..</text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="18.7203%" y="69" width="1.6996%" height="15" fill="rgb(221,106,17)" fg:x="749" fg:w="68"/><text x="19.0133%" y="79.50"></text></g><g><title>motoko_rts::idl::parse_fields::h505d0c8155046473 (695 instructions, 17.37%)</title><rect x="5.0987%" y="85" width="17.3707%" height="15" fill="rgb(251,142,44)" fg:x="204" fg:w="695"/><text x="5.3917%" y="95.50">motoko_rts::idl::parse_..</text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="22.4694%" y="85" width="1.6996%" height="15" fill="rgb(238,13,15)" fg:x="899" fg:w="68"/><text x="22.7624%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="24.1690%" y="85" width="1.2747%" height="15" fill="rgb(208,107,27)" fg:x="967" fg:w="51"/><text x="24.4619%" y="95.50"></text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="25.4436%" y="85" width="1.6996%" height="15" fill="rgb(205,136,37)" fg:x="1018" fg:w="68"/><text x="25.7366%" y="95.50"></text></g><g><title>parse_idl_header (1,190 instructions, 29.74%)</title><rect x="1.2747%" y="101" width="29.7426%" height="15" fill="rgb(250,205,27)" fg:x="51" fg:w="1190"/><text x="1.5677%" y="111.50">parse_idl_header</text></g><g><title>idl_sub_buf_words (9 instructions, 0.22%)</title><rect x="31.0172%" y="101" width="0.2249%" height="15" fill="rgb(210,80,43)" fg:x="1241" fg:w="9"/><text x="31.3102%" y="111.50"></text></g><g><title>memset (4 instructions, 0.10%)</title><rect x="31.2422%" y="85" width="0.1000%" height="15" fill="rgb(247,160,36)" fg:x="1250" fg:w="4"/><text x="31.5352%" y="95.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.47%)</title><rect x="31.2422%" y="101" width="0.4749%" height="15" fill="rgb(234,13,49)" fg:x="1250" fg:w="19"/><text x="31.5352%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="31.7171%" y="101" width="1.2747%" height="15" fill="rgb(234,122,0)" fg:x="1269" fg:w="51"/><text x="32.0100%" y="111.50"></text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="32.9918%" y="101" width="1.6996%" height="15" fill="rgb(207,146,38)" fg:x="1320" fg:w="68"/><text x="33.2847%" y="111.50"></text></g><g><title>set_local %i0 (3 instructions, 0.07%)</title><rect x="34.6913%" y="101" width="0.0750%" height="15" fill="rgb(207,177,25)" fg:x="1388" fg:w="3"/><text x="34.9843%" y="111.50"></text></g><g><title>set_local %i1 (3 instructions, 0.07%)</title><rect x="34.7663%" y="101" width="0.0750%" height="15" fill="rgb(211,178,42)" fg:x="1391" fg:w="3"/><text x="35.0593%" y="111.50"></text></g><g><title>set_local %i2 (3 instructions, 0.07%)</title><rect x="34.8413%" y="101" width="0.0750%" height="15" fill="rgb(230,69,54)" fg:x="1394" fg:w="3"/><text x="35.1343%" y="111.50"></text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="34.9163%" y="85" width="1.6996%" height="15" fill="rgb(214,135,41)" fg:x="1397" fg:w="68"/><text x="35.2092%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="36.6158%" y="85" width="1.2747%" height="15" fill="rgb(237,67,25)" fg:x="1465" fg:w="51"/><text x="36.9088%" y="95.50"></text></g><g><title>alloc_words (26 instructions, 0.65%)</title><rect x="37.8905%" y="85" width="0.6498%" height="15" fill="rgb(222,189,50)" fg:x="1516" fg:w="26"/><text x="38.1835%" y="95.50"></text></g><g><title>leb128_decode (213 instructions, 5.32%)</title><rect x="38.5404%" y="69" width="5.3237%" height="15" fill="rgb(245,148,34)" fg:x="1542" fg:w="213"/><text x="38.8333%" y="79.50">leb12..</text></g><g><title>find_field (242 instructions, 6.05%)</title><rect x="38.5404%" y="85" width="6.0485%" height="15" fill="rgb(222,29,6)" fg:x="1542" fg:w="242"/><text x="38.8333%" y="95.50">find_f..</text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="44.5889%" y="85" width="1.6996%" height="15" fill="rgb(221,189,43)" fg:x="1784" fg:w="68"/><text x="44.8818%" y="95.50"></text></g><g><title>set_local %i0 (3 instructions, 0.07%)</title><rect x="46.2884%" y="85" width="0.0750%" height="15" fill="rgb(207,36,27)" fg:x="1852" fg:w="3"/><text x="46.5814%" y="95.50"></text></g><g><title>set_local %i1 (3 instructions, 0.07%)</title><rect x="46.3634%" y="85" width="0.0750%" height="15" fill="rgb(217,90,24)" fg:x="1855" fg:w="3"/><text x="46.6564%" y="95.50"></text></g><g><title>set_local %i2 (3 instructions, 0.07%)</title><rect x="46.4384%" y="85" width="0.0750%" height="15" fill="rgb(224,66,35)" fg:x="1858" fg:w="3"/><text x="46.7314%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 1.27%)</title><rect x="46.5134%" y="69" width="1.2747%" height="15" fill="rgb(221,13,50)" fg:x="1861" fg:w="51"/><text x="46.8063%" y="79.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (186 instructions, 4.65%)</title><rect x="47.7881%" y="53" width="4.6488%" height="15" fill="rgb(236,68,49)" fg:x="1912" fg:w="186"/><text x="48.0810%" y="63.50">core..</text></g><g><title>utf8_validate (203 instructions, 5.07%)</title><rect x="47.7881%" y="69" width="5.0737%" height="15" fill="rgb(229,146,28)" fg:x="1912" fg:w="203"/><text x="48.0810%" y="79.50">utf8_..</text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.85%)</title><rect x="52.8618%" y="37" width="0.8498%" height="15" fill="rgb(225,31,38)" fg:x="2115" fg:w="34"/><text x="53.1548%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 1.02%)</title><rect x="52.8618%" y="53" width="1.0247%" height="15" fill="rgb(250,208,3)" fg:x="2115" fg:w="41"/><text x="53.1548%" y="63.50"></text></g><g><title>memcpy (115 instructions, 2.87%)</title><rect x="53.8865%" y="53" width="2.8743%" height="15" fill="rgb(246,54,23)" fg:x="2156" fg:w="115"/><text x="54.1795%" y="63.50">me..</text></g><g><title>text_of_ptr_size (166 instructions, 4.15%)</title><rect x="52.8618%" y="69" width="4.1490%" height="15" fill="rgb(243,76,11)" fg:x="2115" fg:w="166"/><text x="53.1548%" y="79.50">text..</text></g><g><title>@deserialize_go&lt;t&gt; (457 instructions, 11.42%)</title><rect x="46.5134%" y="85" width="11.4221%" height="15" fill="rgb(245,21,50)" fg:x="1861" fg:w="457"/><text x="46.8063%" y="95.50">@deserialize_g..</text></g><g><title>leb128_decode (213 instructions, 5.32%)</title><rect x="57.9355%" y="69" width="5.3237%" height="15" fill="rgb(228,9,43)" fg:x="2318" fg:w="213"/><text x="58.2285%" y="79.50">leb12..</text></g><g><title>find_field (242 instructions, 6.05%)</title><rect x="57.9355%" y="85" width="6.0485%" height="15" fill="rgb(208,100,47)" fg:x="2318" fg:w="242"/><text x="58.2285%" y="95.50">find_f..</text></g><g><title>sleb128_decode (68 instructions, 1.70%)</title><rect x="63.9840%" y="85" width="1.6996%" height="15" fill="rgb(232,26,8)" fg:x="2560" fg:w="68"/><text x="64.2770%" y="95.50"></text></g><g><title>set_local %i0 (3 instructions, 0.07%)</title><rect x="65.6836%" y="85" width="0.0750%" height="15" fill="rgb(216,166,38)" fg:x="2628" fg:w="3"/><text x="65.9765%" y="95.50"></text></g><g><title>set_local %i1 (3 instructions, 0.07%)</title><rect x="65.7586%" y="85" width="0.0750%" height="15" fill="rgb(251,202,51)" fg:x="2631" fg:w="3"/><text x="66.0515%" y="95.50"></text></g><g><title>set_local %i2 (3 instructions, 0.07%)</title><rect x="65.8335%" y="85" width="0.0750%" height="15" fill="rgb(254,216,34)" fg:x="2634" fg:w="3"/><text x="66.1265%" y="95.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.90%)</title><rect x="65.9085%" y="69" width="0.8998%" height="15" fill="rgb(251,32,27)" fg:x="2637" fg:w="36"/><text x="66.2015%" y="79.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 2.00%)</title><rect x="65.9085%" y="85" width="1.9995%" height="15" fill="rgb(208,127,28)" fg:x="2637" fg:w="80"/><text x="66.2015%" y="95.50"></text></g><g><title>skip_fields (5 instructions, 0.12%)</title><rect x="67.9080%" y="85" width="0.1250%" height="15" fill="rgb(224,137,22)" fg:x="2717" fg:w="5"/><text x="68.2010%" y="95.50"></text></g><g><title>@deserialize_go&lt;r(topic:t,value:N)&gt; (1,503 instructions, 37.57%)</title><rect x="34.9163%" y="101" width="37.5656%" height="15" fill="rgb(254,70,32)" fg:x="1397" fg:w="1503"/><text x="35.2092%" y="111.50">@deserialize_go&lt;r(topic:t,value:N)&gt;</text></g><g><title>@deserialize&lt;r(topic:t,value:N)&gt; (3,053 instructions, 76.31%)</title><rect x="1.2747%" y="117" width="76.3059%" height="15" fill="rgb(229,75,37)" fg:x="51" fg:w="3053"/><text x="1.5677%" y="127.50">@deserialize&lt;r(topic:t,value:N)&gt;</text></g><g><title>alloc_words (26 instructions, 0.65%)</title><rect x="77.5806%" y="117" width="0.6498%" height="15" fill="rgb(252,64,23)" fg:x="3104" fg:w="26"/><text x="77.8736%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.40%)</title><rect x="78.2304%" y="101" width="0.3999%" height="15" fill="rgb(232,162,48)" fg:x="3130" fg:w="16"/><text x="78.5234%" y="111.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.20%)</title><rect x="78.6303%" y="85" width="0.2000%" height="15" fill="rgb(246,160,12)" fg:x="3146" fg:w="8"/><text x="78.9233%" y="95.50"></text></g><g><title>B_add (25 instructions, 0.62%)</title><rect x="78.6303%" y="101" width="0.6248%" height="15" fill="rgb(247,166,0)" fg:x="3146" fg:w="25"/><text x="78.9233%" y="111.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.35%)</title><rect x="79.2552%" y="69" width="0.3499%" height="15" fill="rgb(249,219,21)" fg:x="3171" fg:w="14"/><text x="79.5482%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.85%)</title><rect x="79.6051%" y="53" width="0.8498%" height="15" fill="rgb(205,209,3)" fg:x="3185" fg:w="34"/><text x="79.8981%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.90%)</title><rect x="79.6051%" y="69" width="0.8998%" height="15" fill="rgb(243,44,1)" fg:x="3185" fg:w="36"/><text x="79.8981%" y="79.50"></text></g><g><title>memcpy (63 instructions, 1.57%)</title><rect x="80.5049%" y="69" width="1.5746%" height="15" fill="rgb(206,159,16)" fg:x="3221" fg:w="63"/><text x="80.7978%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.85%)</title><rect x="82.0795%" y="53" width="0.8498%" height="15" fill="rgb(244,77,30)" fg:x="3284" fg:w="34"/><text x="82.3724%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.90%)</title><rect x="82.0795%" y="69" width="0.8998%" height="15" fill="rgb(218,69,12)" fg:x="3284" fg:w="36"/><text x="82.3724%" y="79.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.10%)</title><rect x="82.9793%" y="69" width="0.1000%" height="15" fill="rgb(212,87,7)" fg:x="3320" fg:w="4"/><text x="83.2722%" y="79.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 5.40%)</title><rect x="79.2552%" y="85" width="5.3987%" height="15" fill="rgb(245,114,25)" fg:x="3171" fg:w="216"/><text x="79.5482%" y="95.50">@seri..</text></g><g><title>reply_with_data (30 instructions, 0.75%)</title><rect x="84.6538%" y="85" width="0.7498%" height="15" fill="rgb(210,61,42)" fg:x="3387" fg:w="30"/><text x="84.9468%" y="95.50"></text></g><g><title>$lambda (251 instructions, 6.27%)</title><rect x="79.2552%" y="101" width="6.2734%" height="15" fill="rgb(211,52,33)" fg:x="3171" fg:w="251"/><text x="79.5482%" y="111.50">$lambda</text></g><g><title>$lambda (309 instructions, 7.72%)</title><rect x="78.2304%" y="117" width="7.7231%" height="15" fill="rgb(234,58,33)" fg:x="3130" fg:w="309"/><text x="78.5234%" y="127.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 1.25%)</title><rect x="85.9535%" y="117" width="1.2497%" height="15" fill="rgb(220,115,36)" fg:x="3439" fg:w="50"/><text x="86.2465%" y="127.50"></text></g><g><title>trans_state4 (14 instructions, 0.35%)</title><rect x="87.2032%" y="117" width="0.3499%" height="15" fill="rgb(243,153,54)" fg:x="3489" fg:w="14"/><text x="87.4962%" y="127.50"></text></g><g><title>all (4,001 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(251,47,18)" fg:x="0" fg:w="4001"/><text x="0.2930%" y="159.50"></text></g><g><title>updateCount (4,001 instructions, 100.00%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(242,102,42)" fg:x="0" fg:w="4001"/><text x="0.2930%" y="143.50">updateCount</text></g></svg></svg>