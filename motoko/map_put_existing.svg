<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(5, &quot;Test5&quot;) (no new instantiation)</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="16296"><g><title>trans_state5 (10 instructions, 0.06%)</title><rect x="0.0000%" y="117" width="0.0614%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="10"/><text x="0.2930%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="0.0614%" y="117" width="0.3436%" height="15" fill="rgb(233,42,35)" fg:x="10" fg:w="56"/><text x="0.3543%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="0.4050%" y="101" width="0.3068%" height="15" fill="rgb(231,13,6)" fg:x="66" fg:w="50"/><text x="0.6980%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="0.7118%" y="101" width="0.3436%" height="15" fill="rgb(207,181,40)" fg:x="116" fg:w="56"/><text x="1.0048%" y="111.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="1.0555%" y="101" width="0.3068%" height="15" fill="rgb(254,173,49)" fg:x="172" fg:w="50"/><text x="1.3484%" y="111.50"></text></g><g><title>sleb128_decode (64 instructions, 0.39%)</title><rect x="1.3623%" y="101" width="0.3927%" height="15" fill="rgb(221,1,38)" fg:x="222" fg:w="64"/><text x="1.6553%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.07%)</title><rect x="1.7550%" y="101" width="0.0736%" height="15" fill="rgb(206,124,46)" fg:x="286" fg:w="12"/><text x="2.0480%" y="111.50"></text></g><g><title>sleb128_decode (64 instructions, 0.39%)</title><rect x="1.8287%" y="101" width="0.3927%" height="15" fill="rgb(249,21,11)" fg:x="298" fg:w="64"/><text x="2.1216%" y="111.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.07%)</title><rect x="2.2214%" y="101" width="0.0736%" height="15" fill="rgb(222,201,40)" fg:x="362" fg:w="12"/><text x="2.5144%" y="111.50"></text></g><g><title>parse_idl_header (433 instructions, 2.66%)</title><rect x="0.4050%" y="117" width="2.6571%" height="15" fill="rgb(235,61,29)" fg:x="66" fg:w="433"/><text x="0.6980%" y="127.50">p..</text></g><g><title>memset (6 instructions, 0.04%)</title><rect x="3.0621%" y="101" width="0.0368%" height="15" fill="rgb(219,207,3)" fg:x="499" fg:w="6"/><text x="3.3551%" y="111.50"></text></g><g><title>idl_sub_buf_init (23 instructions, 0.14%)</title><rect x="3.0621%" y="117" width="0.1411%" height="15" fill="rgb(222,56,46)" fg:x="499" fg:w="23"/><text x="3.3551%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="3.2032%" y="117" width="0.3068%" height="15" fill="rgb(239,76,54)" fg:x="522" fg:w="50"/><text x="3.4962%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.39%)</title><rect x="3.5101%" y="117" width="0.3927%" height="15" fill="rgb(231,124,27)" fg:x="572" fg:w="64"/><text x="3.8030%" y="127.50"></text></g><g><title>@deserialize_go&lt;N&gt; (94 instructions, 0.58%)</title><rect x="3.9028%" y="117" width="0.5768%" height="15" fill="rgb(249,195,6)" fg:x="636" fg:w="94"/><text x="4.1958%" y="127.50"></text></g><g><title>sleb128_decode (64 instructions, 0.39%)</title><rect x="4.4796%" y="117" width="0.3927%" height="15" fill="rgb(237,174,47)" fg:x="730" fg:w="64"/><text x="4.7726%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="4.8724%" y="101" width="0.3068%" height="15" fill="rgb(206,201,31)" fg:x="794" fg:w="50"/><text x="5.1653%" y="111.50"></text></g><g><title>utf8_validate (204 instructions, 1.25%)</title><rect x="5.1792%" y="101" width="1.2518%" height="15" fill="rgb(231,57,52)" fg:x="844" fg:w="204"/><text x="5.4722%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="6.4310%" y="85" width="0.3436%" height="15" fill="rgb(248,177,22)" fg:x="1048" fg:w="56"/><text x="6.7240%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.42%)</title><rect x="6.4310%" y="101" width="0.4234%" height="15" fill="rgb(215,211,37)" fg:x="1048" fg:w="69"/><text x="6.7240%" y="111.50"></text></g><g><title>memcpy (127 instructions, 0.78%)</title><rect x="6.8544%" y="101" width="0.7793%" height="15" fill="rgb(241,128,51)" fg:x="1117" fg:w="127"/><text x="7.1474%" y="111.50"></text></g><g><title>@deserialize_go&lt;t&gt; (519 instructions, 3.18%)</title><rect x="4.8724%" y="117" width="3.1848%" height="15" fill="rgb(227,165,31)" fg:x="794" fg:w="519"/><text x="5.1653%" y="127.50">@d..</text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="8.0572%" y="117" width="0.1227%" height="15" fill="rgb(228,167,24)" fg:x="1313" fg:w="20"/><text x="8.3502%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.12%)</title><rect x="8.1799%" y="101" width="0.1227%" height="15" fill="rgb(228,143,12)" fg:x="1333" fg:w="20"/><text x="8.4729%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.12%)</title><rect x="8.3027%" y="101" width="0.1227%" height="15" fill="rgb(249,149,8)" fg:x="1353" fg:w="20"/><text x="8.5956%" y="111.50"></text></g><g><title>B_rem (26 instructions, 0.16%)</title><rect x="8.4254%" y="101" width="0.1595%" height="15" fill="rgb(243,35,44)" fg:x="1373" fg:w="26"/><text x="8.7183%" y="111.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.13%)</title><rect x="8.5849%" y="101" width="0.1289%" height="15" fill="rgb(246,89,9)" fg:x="1399" fg:w="21"/><text x="8.8779%" y="111.50"></text></g><g><title>opt_project (23 instructions, 0.14%)</title><rect x="8.7138%" y="101" width="0.1411%" height="15" fill="rgb(233,213,13)" fg:x="1420" fg:w="23"/><text x="9.0068%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.12%)</title><rect x="8.8549%" y="69" width="0.1227%" height="15" fill="rgb(233,141,41)" fg:x="1443" fg:w="20"/><text x="9.1479%" y="79.50"></text></g><g><title>to_2_tuple (36 instructions, 0.22%)</title><rect x="8.8549%" y="85" width="0.2209%" height="15" fill="rgb(239,167,4)" fg:x="1443" fg:w="36"/><text x="9.1479%" y="95.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.12%)</title><rect x="9.0758%" y="69" width="0.1227%" height="15" fill="rgb(209,217,16)" fg:x="1479" fg:w="20"/><text x="9.3688%" y="79.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.12%)</title><rect x="9.1986%" y="69" width="0.1227%" height="15" fill="rgb(219,88,35)" fg:x="1499" fg:w="20"/><text x="9.4915%" y="79.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.12%)</title><rect x="9.3213%" y="69" width="0.1227%" height="15" fill="rgb(220,193,23)" fg:x="1519" fg:w="20"/><text x="9.6143%" y="79.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="9.4440%" y="69" width="0.0307%" height="15" fill="rgb(230,90,52)" fg:x="1539" fg:w="5"/><text x="9.7370%" y="79.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="9.4747%" y="69" width="0.1227%" height="15" fill="rgb(252,106,19)" fg:x="1544" fg:w="20"/><text x="9.7677%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="9.5974%" y="69" width="0.1227%" height="15" fill="rgb(206,74,20)" fg:x="1564" fg:w="20"/><text x="9.8904%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="9.7202%" y="69" width="0.1227%" height="15" fill="rgb(230,138,44)" fg:x="1584" fg:w="20"/><text x="10.0131%" y="79.50"></text></g><g><title>@new_async (240 instructions, 1.47%)</title><rect x="9.0758%" y="85" width="1.4728%" height="15" fill="rgb(235,182,43)" fg:x="1479" fg:w="240"/><text x="9.3688%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="10.5486%" y="85" width="0.1227%" height="15" fill="rgb(242,16,51)" fg:x="1719" fg:w="20"/><text x="10.8416%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="10.6713%" y="85" width="0.1227%" height="15" fill="rgb(248,9,4)" fg:x="1739" fg:w="20"/><text x="10.9643%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.12%)</title><rect x="10.7941%" y="69" width="0.1227%" height="15" fill="rgb(210,31,22)" fg:x="1759" fg:w="20"/><text x="11.0870%" y="79.50"></text></g><g><title>to_2_tuple (36 instructions, 0.22%)</title><rect x="10.7941%" y="85" width="0.2209%" height="15" fill="rgb(239,54,39)" fg:x="1759" fg:w="36"/><text x="11.0870%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.12%)</title><rect x="11.0150%" y="85" width="0.1227%" height="15" fill="rgb(230,99,41)" fg:x="1795" fg:w="20"/><text x="11.3079%" y="95.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (9 instructions, 0.06%)</title><rect x="11.1377%" y="69" width="0.0552%" height="15" fill="rgb(253,106,12)" fg:x="1815" fg:w="9"/><text x="11.4307%" y="79.50"></text></g><g><title>remember_continuation (68 instructions, 0.42%)</title><rect x="11.1377%" y="85" width="0.4173%" height="15" fill="rgb(213,46,41)" fg:x="1815" fg:w="68"/><text x="11.4307%" y="95.50"></text></g><g><title>@buffer_size&lt;N&gt; (41 instructions, 0.25%)</title><rect x="11.5550%" y="85" width="0.2516%" height="15" fill="rgb(215,133,35)" fg:x="1883" fg:w="41"/><text x="11.8480%" y="95.50"></text></g><g><title>@buffer_size&lt;t&gt; (40 instructions, 0.25%)</title><rect x="11.8066%" y="85" width="0.2455%" height="15" fill="rgb(213,28,5)" fg:x="1924" fg:w="40"/><text x="12.0995%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="12.0520%" y="85" width="0.3436%" height="15" fill="rgb(215,77,49)" fg:x="1964" fg:w="56"/><text x="12.3450%" y="95.50"></text></g><g><title>memcpy (58 instructions, 0.36%)</title><rect x="12.3957%" y="85" width="0.3559%" height="15" fill="rgb(248,100,22)" fg:x="2020" fg:w="58"/><text x="12.6886%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="12.7516%" y="85" width="0.3436%" height="15" fill="rgb(208,67,9)" fg:x="2078" fg:w="56"/><text x="13.0446%" y="95.50"></text></g><g><title>leb128_encode (11 instructions, 0.07%)</title><rect x="13.0952%" y="69" width="0.0675%" height="15" fill="rgb(219,133,21)" fg:x="2134" fg:w="11"/><text x="13.3882%" y="79.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.31%)</title><rect x="13.0952%" y="85" width="0.3130%" height="15" fill="rgb(246,46,29)" fg:x="2134" fg:w="51"/><text x="13.3882%" y="95.50"></text></g><g><title>leb128_encode (11 instructions, 0.07%)</title><rect x="13.4082%" y="69" width="0.0675%" height="15" fill="rgb(246,185,52)" fg:x="2185" fg:w="11"/><text x="13.7012%" y="79.50"></text></g><g><title>memcpy (66 instructions, 0.41%)</title><rect x="13.4757%" y="53" width="0.4050%" height="15" fill="rgb(252,136,11)" fg:x="2196" fg:w="66"/><text x="13.7687%" y="63.50"></text></g><g><title>text_to_buf (94 instructions, 0.58%)</title><rect x="13.4757%" y="69" width="0.5768%" height="15" fill="rgb(219,138,53)" fg:x="2196" fg:w="94"/><text x="13.7687%" y="79.50"></text></g><g><title>@serialize_go&lt;t&gt; (152 instructions, 0.93%)</title><rect x="13.4082%" y="85" width="0.9327%" height="15" fill="rgb(211,51,23)" fg:x="2185" fg:w="152"/><text x="13.7012%" y="95.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="14.3409%" y="69" width="0.0307%" height="15" fill="rgb(247,221,28)" fg:x="2337" fg:w="5"/><text x="14.6339%" y="79.50"></text></g><g><title>@add_cycles (21 instructions, 0.13%)</title><rect x="14.3409%" y="85" width="0.1289%" height="15" fill="rgb(251,222,45)" fg:x="2337" fg:w="21"/><text x="14.6339%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.12%)</title><rect x="14.4698%" y="69" width="0.1227%" height="15" fill="rgb(217,162,53)" fg:x="2358" fg:w="20"/><text x="14.7628%" y="79.50"></text></g><g><title>to_2_tuple (36 instructions, 0.22%)</title><rect x="14.4698%" y="85" width="0.2209%" height="15" fill="rgb(229,93,14)" fg:x="2358" fg:w="36"/><text x="14.7628%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="14.6907%" y="69" width="0.1227%" height="15" fill="rgb(209,67,49)" fg:x="2394" fg:w="20"/><text x="14.9837%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="14.8135%" y="53" width="0.1227%" height="15" fill="rgb(213,87,29)" fg:x="2414" fg:w="20"/><text x="15.1064%" y="63.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.12%)</title><rect x="14.9362%" y="53" width="0.1227%" height="15" fill="rgb(205,151,52)" fg:x="2434" fg:w="20"/><text x="15.2291%" y="63.50"></text></g><g><title>enqueue (104 instructions, 0.64%)</title><rect x="14.8135%" y="69" width="0.6382%" height="15" fill="rgb(253,215,39)" fg:x="2414" fg:w="104"/><text x="15.1064%" y="79.50"></text></g><g><title>$lambda.7 (157 instructions, 0.96%)</title><rect x="14.6907%" y="85" width="0.9634%" height="15" fill="rgb(221,220,41)" fg:x="2394" fg:w="157"/><text x="14.9837%" y="95.50"></text></g><g><title>$k/37 (8,973 instructions, 55.06%)</title><rect x="8.8549%" y="101" width="55.0626%" height="15" fill="rgb(218,133,21)" fg:x="1443" fg:w="8973"/><text x="9.1479%" y="111.50">$k/37</text></g><g><title>$lambda.1 (9,199 instructions, 56.45%)</title><rect x="8.1799%" y="117" width="56.4494%" height="15" fill="rgb(221,193,43)" fg:x="1333" fg:w="9199"/><text x="8.4729%" y="127.50">$lambda.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.66%)</title><rect x="64.6294%" y="117" width="0.6627%" height="15" fill="rgb(240,128,52)" fg:x="10532" fg:w="108"/><text x="64.9223%" y="127.50"></text></g><g><title>trans_state4 (16 instructions, 0.10%)</title><rect x="65.2921%" y="117" width="0.0982%" height="15" fill="rgb(253,114,12)" fg:x="10640" fg:w="16"/><text x="65.5851%" y="127.50"></text></g><g><title>put (12,540 instructions, 76.95%)</title><rect x="0.0000%" y="133" width="76.9514%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="12540"/><text x="0.2930%" y="143.50">put</text></g><g><title>trans_state5 (10 instructions, 0.06%)</title><rect x="76.9514%" y="117" width="0.0614%" height="15" fill="rgb(248,225,23)" fg:x="12540" fg:w="10"/><text x="77.2444%" y="127.50"></text></g><g><title>recall_continuation (49 instructions, 0.30%)</title><rect x="77.0128%" y="117" width="0.3007%" height="15" fill="rgb(250,108,0)" fg:x="12550" fg:w="49"/><text x="77.3057%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="77.3135%" y="117" width="0.3436%" height="15" fill="rgb(228,208,7)" fg:x="12599" fg:w="56"/><text x="77.6064%" y="127.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="77.6571%" y="85" width="0.3068%" height="15" fill="rgb(244,45,10)" fg:x="12655" fg:w="50"/><text x="77.9501%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="77.9639%" y="85" width="0.3436%" height="15" fill="rgb(207,125,25)" fg:x="12705" fg:w="56"/><text x="78.2569%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="78.3076%" y="85" width="0.3068%" height="15" fill="rgb(210,195,18)" fg:x="12761" fg:w="50"/><text x="78.6005%" y="95.50"></text></g><g><title>parse_idl_header (245 instructions, 1.50%)</title><rect x="77.6571%" y="101" width="1.5034%" height="15" fill="rgb(249,80,12)" fg:x="12655" fg:w="245"/><text x="77.9501%" y="111.50"></text></g><g><title>memset (6 instructions, 0.04%)</title><rect x="79.1605%" y="85" width="0.0368%" height="15" fill="rgb(221,65,9)" fg:x="12900" fg:w="6"/><text x="79.4535%" y="95.50"></text></g><g><title>idl_sub_buf_init (23 instructions, 0.14%)</title><rect x="79.1605%" y="101" width="0.1411%" height="15" fill="rgb(235,49,36)" fg:x="12900" fg:w="23"/><text x="79.4535%" y="111.50"></text></g><g><title>leb128_decode (50 instructions, 0.31%)</title><rect x="79.3017%" y="101" width="0.3068%" height="15" fill="rgb(225,32,20)" fg:x="12923" fg:w="50"/><text x="79.5946%" y="111.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 3.14%)</title><rect x="77.6571%" y="117" width="3.1357%" height="15" fill="rgb(215,141,46)" fg:x="12655" fg:w="511"/><text x="77.9501%" y="127.50">@d..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.12%)</title><rect x="80.7928%" y="85" width="0.1227%" height="15" fill="rgb(250,160,47)" fg:x="13166" fg:w="20"/><text x="81.0858%" y="95.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (20 instructions, 0.12%)</title><rect x="80.9156%" y="69" width="0.1227%" height="15" fill="rgb(216,222,40)" fg:x="13186" fg:w="20"/><text x="81.2085%" y="79.50"></text></g><g><title>to_2_tuple (36 instructions, 0.22%)</title><rect x="80.9156%" y="85" width="0.2209%" height="15" fill="rgb(234,217,39)" fg:x="13186" fg:w="36"/><text x="81.2085%" y="95.50"></text></g><g><title>opt_inject (23 instructions, 0.14%)</title><rect x="81.1365%" y="85" width="0.1411%" height="15" fill="rgb(207,178,40)" fg:x="13222" fg:w="23"/><text x="81.4294%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="81.2838%" y="37" width="0.3436%" height="15" fill="rgb(221,136,13)" fg:x="13246" fg:w="56"/><text x="81.5767%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.43%)</title><rect x="81.6274%" y="37" width="0.4296%" height="15" fill="rgb(249,199,10)" fg:x="13302" fg:w="70"/><text x="81.9204%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.34%)</title><rect x="82.0569%" y="37" width="0.3436%" height="15" fill="rgb(249,222,13)" fg:x="13372" fg:w="56"/><text x="82.3499%" y="47.50"></text></g><g><title>reply_with_data (1,019 instructions, 6.25%)</title><rect x="82.4006%" y="37" width="6.2531%" height="15" fill="rgb(244,185,38)" fg:x="13428" fg:w="1019"/><text x="82.6936%" y="47.50">reply_w..</text></g><g><title>anon_async.1 (1,293 instructions, 7.93%)</title><rect x="81.2838%" y="53" width="7.9345%" height="15" fill="rgb(236,202,9)" fg:x="13246" fg:w="1293"/><text x="81.5767%" y="63.50">anon_asyn..</text></g><g><title>$lambda.16 (1,309 instructions, 8.03%)</title><rect x="81.2838%" y="69" width="8.0326%" height="15" fill="rgb(250,229,37)" fg:x="13246" fg:w="1309"/><text x="81.5767%" y="79.50">$lambda.16</text></g><g><title>anon-func-352.15 (1,351 instructions, 8.29%)</title><rect x="81.2776%" y="85" width="8.2904%" height="15" fill="rgb(206,174,23)" fg:x="13245" fg:w="1351"/><text x="81.5706%" y="95.50">anon-func..</text></g><g><title>fulfill (1,505 instructions, 9.24%)</title><rect x="80.7928%" y="101" width="9.2354%" height="15" fill="rgb(211,33,43)" fg:x="13166" fg:w="1505"/><text x="81.0858%" y="111.50">fulfill</text></g><g><title>$lambda.10 (1,522 instructions, 9.34%)</title><rect x="80.7928%" y="117" width="9.3397%" height="15" fill="rgb(245,58,50)" fg:x="13166" fg:w="1522"/><text x="81.0858%" y="127.50">$lambda.10</text></g><g><title>schedule_copying_gc (108 instructions, 0.66%)</title><rect x="90.1325%" y="117" width="0.6627%" height="15" fill="rgb(244,68,36)" fg:x="14688" fg:w="108"/><text x="90.4255%" y="127.50"></text></g><g><title>trans_state4 (16 instructions, 0.10%)</title><rect x="90.7953%" y="117" width="0.0982%" height="15" fill="rgb(232,229,15)" fg:x="14796" fg:w="16"/><text x="91.0883%" y="127.50"></text></g><g><title>all (16,296 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="16296"/><text x="0.2930%" y="159.50"></text></g><g><title>@callback&lt;u&gt; (3,756 instructions, 23.05%)</title><rect x="76.9514%" y="133" width="23.0486%" height="15" fill="rgb(235,160,14)" fg:x="12540" fg:w="3756"/><text x="77.2444%" y="143.50">@callback&lt;u&gt;</text></g></svg></svg>