<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="230" onload="init(evt)" viewBox="0 0 1024 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(5, &quot;Test5&quot;) (no new instantiation)</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="213.00"> </text><svg id="frames" x="10" width="1004" total_samples="5609"><g><title>trans_state5 (8 instructions, 0.14%)</title><rect x="0.0000%" y="149" width="0.1426%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="8"/><text x="0.2930%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="0.1426%" y="149" width="0.5349%" height="15" fill="rgb(249,174,33)" fg:x="8" fg:w="30"/><text x="0.4356%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="0.6775%" y="133" width="0.8201%" height="15" fill="rgb(233,201,37)" fg:x="38" fg:w="46"/><text x="0.9705%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="1.4976%" y="133" width="0.5349%" height="15" fill="rgb(221,78,26)" fg:x="84" fg:w="30"/><text x="1.7906%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="2.0324%" y="133" width="0.8201%" height="15" fill="rgb(250,127,30)" fg:x="114" fg:w="46"/><text x="2.3254%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.07%)</title><rect x="2.8526%" y="133" width="1.0697%" height="15" fill="rgb(230,49,44)" fg:x="160" fg:w="60"/><text x="3.1455%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.07%)</title><rect x="3.9223%" y="133" width="1.0697%" height="15" fill="rgb(229,67,23)" fg:x="220" fg:w="60"/><text x="4.2152%" y="143.50"></text></g><g><title>parse_idl_header (339 instructions, 6.04%)</title><rect x="0.6775%" y="149" width="6.0439%" height="15" fill="rgb(249,83,47)" fg:x="38" fg:w="339"/><text x="0.9705%" y="159.50">parse_..</text></g><g><title>memset (3 instructions, 0.05%)</title><rect x="6.7213%" y="133" width="0.0535%" height="15" fill="rgb(215,43,3)" fg:x="377" fg:w="3"/><text x="7.0143%" y="143.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.25%)</title><rect x="6.7213%" y="149" width="0.2496%" height="15" fill="rgb(238,154,13)" fg:x="377" fg:w="14"/><text x="7.0143%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="6.9709%" y="149" width="0.8201%" height="15" fill="rgb(219,56,2)" fg:x="391" fg:w="46"/><text x="7.2639%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 1.07%)</title><rect x="7.7911%" y="149" width="1.0697%" height="15" fill="rgb(233,0,4)" fg:x="437" fg:w="60"/><text x="8.0840%" y="159.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 1.41%)</title><rect x="8.8608%" y="149" width="1.4085%" height="15" fill="rgb(235,30,7)" fg:x="497" fg:w="79"/><text x="9.1537%" y="159.50"></text></g><g><title>sleb128_decode (60 instructions, 1.07%)</title><rect x="10.2692%" y="149" width="1.0697%" height="15" fill="rgb(250,79,13)" fg:x="576" fg:w="60"/><text x="10.5622%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="11.3389%" y="133" width="0.8201%" height="15" fill="rgb(211,146,34)" fg:x="636" fg:w="46"/><text x="11.6319%" y="143.50"></text></g><g><title>utf8_validate (177 instructions, 3.16%)</title><rect x="12.1590%" y="133" width="3.1556%" height="15" fill="rgb(228,22,38)" fg:x="682" fg:w="177"/><text x="12.4520%" y="143.50">ut..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="15.3147%" y="117" width="0.5349%" height="15" fill="rgb(235,168,5)" fg:x="859" fg:w="30"/><text x="15.6076%" y="127.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.66%)</title><rect x="15.3147%" y="133" width="0.6597%" height="15" fill="rgb(221,155,16)" fg:x="859" fg:w="37"/><text x="15.6076%" y="143.50"></text></g><g><title>memcpy (114 instructions, 2.03%)</title><rect x="15.9743%" y="133" width="2.0324%" height="15" fill="rgb(215,215,53)" fg:x="896" fg:w="114"/><text x="16.2673%" y="143.50"></text></g><g><title>@deserialize_go&lt;t&gt; (416 instructions, 7.42%)</title><rect x="11.3389%" y="149" width="7.4167%" height="15" fill="rgb(223,4,10)" fg:x="636" fg:w="416"/><text x="11.6319%" y="159.50">@deseria..</text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="18.7556%" y="149" width="0.3922%" height="15" fill="rgb(234,103,6)" fg:x="1052" fg:w="22"/><text x="19.0485%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="19.1478%" y="133" width="0.3922%" height="15" fill="rgb(227,97,0)" fg:x="1074" fg:w="22"/><text x="19.4408%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="19.5400%" y="133" width="0.3922%" height="15" fill="rgb(234,150,53)" fg:x="1096" fg:w="22"/><text x="19.8330%" y="143.50"></text></g><g><title>B_rem (23 instructions, 0.41%)</title><rect x="19.9323%" y="133" width="0.4101%" height="15" fill="rgb(228,201,54)" fg:x="1118" fg:w="23"/><text x="20.2252%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="20.3423%" y="133" width="0.3922%" height="15" fill="rgb(222,22,37)" fg:x="1141" fg:w="22"/><text x="20.6353%" y="143.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.32%)</title><rect x="20.7345%" y="133" width="0.3209%" height="15" fill="rgb(237,53,32)" fg:x="1163" fg:w="18"/><text x="21.0275%" y="143.50"></text></g><g><title>opt_project (14 instructions, 0.25%)</title><rect x="21.0554%" y="133" width="0.2496%" height="15" fill="rgb(233,25,53)" fg:x="1181" fg:w="14"/><text x="21.3484%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="21.3050%" y="101" width="0.3922%" height="15" fill="rgb(210,40,34)" fg:x="1195" fg:w="22"/><text x="21.5980%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.66%)</title><rect x="21.3050%" y="117" width="0.6597%" height="15" fill="rgb(241,220,44)" fg:x="1195" fg:w="37"/><text x="21.5980%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="21.9647%" y="101" width="0.3922%" height="15" fill="rgb(235,28,35)" fg:x="1232" fg:w="22"/><text x="22.2577%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="22.3569%" y="101" width="0.3922%" height="15" fill="rgb(210,56,17)" fg:x="1254" fg:w="22"/><text x="22.6499%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="22.7492%" y="101" width="0.3922%" height="15" fill="rgb(224,130,29)" fg:x="1276" fg:w="22"/><text x="23.0421%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="23.1414%" y="101" width="0.3922%" height="15" fill="rgb(235,212,8)" fg:x="1298" fg:w="22"/><text x="23.4343%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="23.5336%" y="101" width="0.3922%" height="15" fill="rgb(223,33,50)" fg:x="1320" fg:w="22"/><text x="23.8266%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="23.9258%" y="101" width="0.3922%" height="15" fill="rgb(219,149,13)" fg:x="1342" fg:w="22"/><text x="24.2188%" y="111.50"></text></g><g><title>@new_async (231 instructions, 4.12%)</title><rect x="21.9647%" y="117" width="4.1184%" height="15" fill="rgb(250,156,29)" fg:x="1232" fg:w="231"/><text x="22.2577%" y="127.50">@ne..</text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="26.0831%" y="117" width="0.3922%" height="15" fill="rgb(216,193,19)" fg:x="1463" fg:w="22"/><text x="26.3760%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="26.4753%" y="117" width="0.3922%" height="15" fill="rgb(216,135,14)" fg:x="1485" fg:w="22"/><text x="26.7683%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="26.8675%" y="101" width="0.3922%" height="15" fill="rgb(241,47,5)" fg:x="1507" fg:w="22"/><text x="27.1605%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.66%)</title><rect x="26.8675%" y="117" width="0.6597%" height="15" fill="rgb(233,42,35)" fg:x="1507" fg:w="37"/><text x="27.1605%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="27.5272%" y="117" width="0.3922%" height="15" fill="rgb(231,13,6)" fg:x="1544" fg:w="22"/><text x="27.8202%" y="127.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (7 instructions, 0.12%)</title><rect x="27.9194%" y="101" width="0.1248%" height="15" fill="rgb(207,181,40)" fg:x="1566" fg:w="7"/><text x="28.2124%" y="111.50"></text></g><g><title>remember_continuation (58 instructions, 1.03%)</title><rect x="27.9194%" y="117" width="1.0341%" height="15" fill="rgb(254,173,49)" fg:x="1566" fg:w="58"/><text x="28.2124%" y="127.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.46%)</title><rect x="28.9535%" y="117" width="0.4635%" height="15" fill="rgb(221,1,38)" fg:x="1624" fg:w="26"/><text x="29.2464%" y="127.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.48%)</title><rect x="29.4170%" y="117" width="0.4814%" height="15" fill="rgb(206,124,46)" fg:x="1650" fg:w="27"/><text x="29.7100%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="29.8984%" y="117" width="0.5349%" height="15" fill="rgb(249,21,11)" fg:x="1677" fg:w="30"/><text x="30.1913%" y="127.50"></text></g><g><title>memcpy (49 instructions, 0.87%)</title><rect x="30.4332%" y="117" width="0.8736%" height="15" fill="rgb(222,201,40)" fg:x="1707" fg:w="49"/><text x="30.7262%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="31.3068%" y="117" width="0.5349%" height="15" fill="rgb(235,61,29)" fg:x="1756" fg:w="30"/><text x="31.5998%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.16%)</title><rect x="31.8417%" y="101" width="0.1605%" height="15" fill="rgb(219,207,3)" fg:x="1786" fg:w="9"/><text x="32.1347%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.57%)</title><rect x="31.8417%" y="117" width="0.5705%" height="15" fill="rgb(222,56,46)" fg:x="1786" fg:w="32"/><text x="32.1347%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.16%)</title><rect x="32.4122%" y="101" width="0.1605%" height="15" fill="rgb(239,76,54)" fg:x="1818" fg:w="9"/><text x="32.7052%" y="111.50"></text></g><g><title>memcpy (57 instructions, 1.02%)</title><rect x="32.5727%" y="85" width="1.0162%" height="15" fill="rgb(231,124,27)" fg:x="1827" fg:w="57"/><text x="32.8656%" y="95.50"></text></g><g><title>text_to_buf (78 instructions, 1.39%)</title><rect x="32.5727%" y="101" width="1.3906%" height="15" fill="rgb(249,195,6)" fg:x="1827" fg:w="78"/><text x="32.8656%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 2.03%)</title><rect x="32.4122%" y="117" width="2.0324%" height="15" fill="rgb(237,174,47)" fg:x="1818" fg:w="114"/><text x="32.7052%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (34 instructions, 0.61%)</title><rect x="34.4446%" y="37" width="0.6062%" height="15" fill="rgb(206,201,31)" fg:x="1932" fg:w="34"/><text x="34.7376%" y="47.50"></text></g><g><title>memset (233 instructions, 4.15%)</title><rect x="35.0508%" y="37" width="4.1540%" height="15" fill="rgb(231,57,52)" fg:x="1966" fg:w="233"/><text x="35.3438%" y="47.50">mems..</text></g><g><title>mp_calloc (291 instructions, 5.19%)</title><rect x="34.4446%" y="53" width="5.1881%" height="15" fill="rgb(248,177,22)" fg:x="1932" fg:w="291"/><text x="34.7376%" y="63.50">mp_ca..</text></g><g><title>mp_init (306 instructions, 5.46%)</title><rect x="34.4446%" y="69" width="5.4555%" height="15" fill="rgb(215,211,37)" fg:x="1932" fg:w="306"/><text x="34.7376%" y="79.50">mp_in..</text></g><g><title>mp_set_u64 (479 instructions, 8.54%)</title><rect x="39.9002%" y="69" width="8.5398%" height="15" fill="rgb(241,128,51)" fg:x="2238" fg:w="479"/><text x="40.1931%" y="79.50">mp_set_u64</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (30 instructions, 0.53%)</title><rect x="48.4400%" y="69" width="0.5349%" height="15" fill="rgb(227,165,31)" fg:x="2717" fg:w="30"/><text x="48.7330%" y="79.50"></text></g><g><title>bigint_of_int64 (864 instructions, 15.40%)</title><rect x="34.4446%" y="85" width="15.4038%" height="15" fill="rgb(228,167,24)" fg:x="1932" fg:w="864"/><text x="34.7376%" y="95.50">bigint_of_int64</text></g><g><title>mp_cmp_mag (17 instructions, 0.30%)</title><rect x="49.8485%" y="69" width="0.3031%" height="15" fill="rgb(228,143,12)" fg:x="2796" fg:w="17"/><text x="50.1414%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.55%)</title><rect x="49.8485%" y="85" width="0.5527%" height="15" fill="rgb(249,149,8)" fg:x="2796" fg:w="31"/><text x="50.1414%" y="95.50"></text></g><g><title>B_lt (935 instructions, 16.67%)</title><rect x="34.4446%" y="101" width="16.6696%" height="15" fill="rgb(243,35,44)" fg:x="1932" fg:w="935"/><text x="34.7376%" y="111.50">B_lt</text></g><g><title>B_rsh (4 instructions, 0.07%)</title><rect x="51.1143%" y="101" width="0.0713%" height="15" fill="rgb(246,89,9)" fg:x="2867" fg:w="4"/><text x="51.4072%" y="111.50"></text></g><g><title>@add_cycles (967 instructions, 17.24%)</title><rect x="34.4446%" y="117" width="17.2401%" height="15" fill="rgb(233,213,13)" fg:x="1932" fg:w="967"/><text x="34.7376%" y="127.50">@add_cycles</text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="51.6848%" y="101" width="0.3922%" height="15" fill="rgb(233,141,41)" fg:x="2899" fg:w="22"/><text x="51.9778%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.66%)</title><rect x="51.6848%" y="117" width="0.6597%" height="15" fill="rgb(239,167,4)" fg:x="2899" fg:w="37"/><text x="51.9778%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="52.3444%" y="101" width="0.3922%" height="15" fill="rgb(209,217,16)" fg:x="2936" fg:w="22"/><text x="52.6374%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="52.7367%" y="85" width="0.3922%" height="15" fill="rgb(219,88,35)" fg:x="2958" fg:w="22"/><text x="53.0296%" y="95.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="53.1289%" y="85" width="0.3922%" height="15" fill="rgb(220,193,23)" fg:x="2980" fg:w="22"/><text x="53.4219%" y="95.50"></text></g><g><title>enqueue (106 instructions, 1.89%)</title><rect x="52.7367%" y="101" width="1.8898%" height="15" fill="rgb(230,90,52)" fg:x="2958" fg:w="106"/><text x="53.0296%" y="111.50"></text></g><g><title>$lambda.7 (151 instructions, 2.69%)</title><rect x="52.3444%" y="117" width="2.6921%" height="15" fill="rgb(252,106,19)" fg:x="2936" fg:w="151"/><text x="52.6374%" y="127.50">$..</text></g><g><title>$k/37 (2,155 instructions, 38.42%)</title><rect x="21.3050%" y="133" width="38.4204%" height="15" fill="rgb(206,74,20)" fg:x="1195" fg:w="2155"/><text x="21.5980%" y="143.50">$k/37</text></g><g><title>$lambda.1 (2,355 instructions, 41.99%)</title><rect x="19.1478%" y="149" width="41.9861%" height="15" fill="rgb(230,138,44)" fg:x="1074" fg:w="2355"/><text x="19.4408%" y="159.50">$lambda.1</text></g><g><title>schedule_copying_gc (43 instructions, 0.77%)</title><rect x="61.1339%" y="149" width="0.7666%" height="15" fill="rgb(235,182,43)" fg:x="3429" fg:w="43"/><text x="61.4269%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.23%)</title><rect x="61.9005%" y="149" width="0.2318%" height="15" fill="rgb(242,16,51)" fg:x="3472" fg:w="13"/><text x="62.1935%" y="159.50"></text></g><g><title>put (4,229 instructions, 75.40%)</title><rect x="0.0000%" y="165" width="75.3967%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="4229"/><text x="0.2930%" y="175.50">put</text></g><g><title>trans_state5 (8 instructions, 0.14%)</title><rect x="75.3967%" y="149" width="0.1426%" height="15" fill="rgb(210,31,22)" fg:x="4229" fg:w="8"/><text x="75.6897%" y="159.50"></text></g><g><title>recall_continuation (45 instructions, 0.80%)</title><rect x="75.5393%" y="149" width="0.8023%" height="15" fill="rgb(239,54,39)" fg:x="4237" fg:w="45"/><text x="75.8323%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="76.3416%" y="149" width="0.5349%" height="15" fill="rgb(230,99,41)" fg:x="4282" fg:w="30"/><text x="76.6346%" y="159.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="76.8764%" y="117" width="0.8201%" height="15" fill="rgb(253,106,12)" fg:x="4312" fg:w="46"/><text x="77.1694%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="77.6966%" y="117" width="0.5349%" height="15" fill="rgb(213,46,41)" fg:x="4358" fg:w="30"/><text x="77.9895%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="78.2314%" y="117" width="0.8201%" height="15" fill="rgb(215,133,35)" fg:x="4388" fg:w="46"/><text x="78.5244%" y="127.50"></text></g><g><title>parse_idl_header (189 instructions, 3.37%)</title><rect x="76.8764%" y="133" width="3.3696%" height="15" fill="rgb(213,28,5)" fg:x="4312" fg:w="189"/><text x="77.1694%" y="143.50">pa..</text></g><g><title>memset (3 instructions, 0.05%)</title><rect x="80.2460%" y="117" width="0.0535%" height="15" fill="rgb(215,77,49)" fg:x="4501" fg:w="3"/><text x="80.5390%" y="127.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.25%)</title><rect x="80.2460%" y="133" width="0.2496%" height="15" fill="rgb(248,100,22)" fg:x="4501" fg:w="14"/><text x="80.5390%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.82%)</title><rect x="80.4956%" y="133" width="0.8201%" height="15" fill="rgb(208,67,9)" fg:x="4515" fg:w="46"/><text x="80.7886%" y="143.50"></text></g><g><title>@deserialize&lt;&gt; (389 instructions, 6.94%)</title><rect x="76.8764%" y="149" width="6.9353%" height="15" fill="rgb(219,133,21)" fg:x="4312" fg:w="389"/><text x="77.1694%" y="159.50">@deseria..</text></g><g><title>from_word128_ptr (17 instructions, 0.30%)</title><rect x="83.8117%" y="117" width="0.3031%" height="15" fill="rgb(246,46,29)" fg:x="4701" fg:w="17"/><text x="84.1047%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="84.1148%" y="117" width="0.3922%" height="15" fill="rgb(246,185,52)" fg:x="4718" fg:w="22"/><text x="84.4078%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.39%)</title><rect x="84.5070%" y="101" width="0.3922%" height="15" fill="rgb(252,136,11)" fg:x="4740" fg:w="22"/><text x="84.8000%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.66%)</title><rect x="84.5070%" y="117" width="0.6597%" height="15" fill="rgb(219,138,53)" fg:x="4740" fg:w="37"/><text x="84.8000%" y="127.50"></text></g><g><title>opt_inject (14 instructions, 0.25%)</title><rect x="85.1667%" y="117" width="0.2496%" height="15" fill="rgb(211,51,23)" fg:x="4777" fg:w="14"/><text x="85.4597%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="85.4163%" y="69" width="0.5349%" height="15" fill="rgb(247,221,28)" fg:x="4791" fg:w="30"/><text x="85.7093%" y="79.50"></text></g><g><title>memcpy (61 instructions, 1.09%)</title><rect x="85.9511%" y="69" width="1.0875%" height="15" fill="rgb(251,222,45)" fg:x="4821" fg:w="61"/><text x="86.2441%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.53%)</title><rect x="87.0387%" y="69" width="0.5349%" height="15" fill="rgb(217,162,53)" fg:x="4882" fg:w="30"/><text x="87.3317%" y="79.50"></text></g><g><title>reply_with_data (30 instructions, 0.53%)</title><rect x="87.5735%" y="69" width="0.5349%" height="15" fill="rgb(229,93,14)" fg:x="4912" fg:w="30"/><text x="87.8665%" y="79.50"></text></g><g><title>anon_async.1 (212 instructions, 3.78%)</title><rect x="85.4163%" y="85" width="3.7796%" height="15" fill="rgb(209,67,49)" fg:x="4791" fg:w="212"/><text x="85.7093%" y="95.50">ano..</text></g><g><title>$lambda.16 (218 instructions, 3.89%)</title><rect x="85.4163%" y="101" width="3.8866%" height="15" fill="rgb(213,87,29)" fg:x="4791" fg:w="218"/><text x="85.7093%" y="111.50">$la..</text></g><g><title>anon-func-349.15 (240 instructions, 4.28%)</title><rect x="85.4163%" y="117" width="4.2788%" height="15" fill="rgb(205,151,52)" fg:x="4791" fg:w="240"/><text x="85.7093%" y="127.50">anon..</text></g><g><title>fulfill (391 instructions, 6.97%)</title><rect x="83.8117%" y="133" width="6.9709%" height="15" fill="rgb(253,215,39)" fg:x="4701" fg:w="391"/><text x="84.1047%" y="143.50">fulfill</text></g><g><title>$lambda.10 (398 instructions, 7.10%)</title><rect x="83.8117%" y="149" width="7.0957%" height="15" fill="rgb(221,220,41)" fg:x="4701" fg:w="398"/><text x="84.1047%" y="159.50">$lambda...</text></g><g><title>schedule_copying_gc (43 instructions, 0.77%)</title><rect x="90.9075%" y="149" width="0.7666%" height="15" fill="rgb(218,133,21)" fg:x="5099" fg:w="43"/><text x="91.2004%" y="159.50"></text></g><g><title>trans_state4 (13 instructions, 0.23%)</title><rect x="91.6741%" y="149" width="0.2318%" height="15" fill="rgb(221,193,43)" fg:x="5142" fg:w="13"/><text x="91.9671%" y="159.50"></text></g><g><title>all (5,609 instructions, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="5609"/><text x="0.2930%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,380 instructions, 24.60%)</title><rect x="75.3967%" y="165" width="24.6033%" height="15" fill="rgb(253,114,12)" fg:x="4229" fg:w="1380"/><text x="75.6897%" y="175.50">@callback&lt;u&gt;</text></g></svg></svg>