<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(5, &quot;Test5&quot;) (no new instantiation)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="9149"><g><title>trans_state5 (9 instructions, 0.10%)</title><rect x="0.0000%" y="181" width="0.0984%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="9"/><text x="0.2930%" y="191.50"></text></g><g><title>@reset_cycles (3 instructions, 0.03%)</title><rect x="0.0984%" y="181" width="0.0328%" height="15" fill="rgb(234,111,31)" fg:x="9" fg:w="3"/><text x="0.3913%" y="191.50"></text></g><g><title>@reset_refund (3 instructions, 0.03%)</title><rect x="0.1312%" y="181" width="0.0328%" height="15" fill="rgb(241,149,10)" fg:x="12" fg:w="3"/><text x="0.4241%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="0.1640%" y="165" width="0.3716%" height="15" fill="rgb(249,206,44)" fg:x="15" fg:w="34"/><text x="0.4569%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="0.1640%" y="181" width="0.3935%" height="15" fill="rgb(251,153,30)" fg:x="15" fg:w="36"/><text x="0.4569%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="0.5574%" y="149" width="0.5574%" height="15" fill="rgb(239,152,38)" fg:x="51" fg:w="51"/><text x="0.8504%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="1.1149%" y="149" width="0.3716%" height="15" fill="rgb(249,139,47)" fg:x="102" fg:w="34"/><text x="1.4078%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="1.4865%" y="149" width="0.5574%" height="15" fill="rgb(244,64,35)" fg:x="136" fg:w="51"/><text x="1.7795%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="2.0439%" y="149" width="0.7433%" height="15" fill="rgb(216,46,15)" fg:x="187" fg:w="68"/><text x="2.3369%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="2.7872%" y="149" width="0.7433%" height="15" fill="rgb(250,74,19)" fg:x="255" fg:w="68"/><text x="3.0802%" y="159.50"></text></g><g><title>parse_idl_header (373 instructions, 4.08%)</title><rect x="0.5574%" y="165" width="4.0769%" height="15" fill="rgb(249,42,33)" fg:x="51" fg:w="373"/><text x="0.8504%" y="175.50">par..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.10%)</title><rect x="4.6344%" y="165" width="0.0984%" height="15" fill="rgb(242,149,17)" fg:x="424" fg:w="9"/><text x="4.9274%" y="175.50"></text></g><g><title>memset (4 instructions, 0.04%)</title><rect x="4.7328%" y="149" width="0.0437%" height="15" fill="rgb(244,29,21)" fg:x="433" fg:w="4"/><text x="5.0257%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.21%)</title><rect x="4.7328%" y="165" width="0.2077%" height="15" fill="rgb(220,130,37)" fg:x="433" fg:w="19"/><text x="5.0257%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="4.9404%" y="165" width="0.5574%" height="15" fill="rgb(211,67,2)" fg:x="452" fg:w="51"/><text x="5.2334%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="5.4979%" y="165" width="0.7433%" height="15" fill="rgb(235,68,52)" fg:x="503" fg:w="68"/><text x="5.7908%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="6.2411%" y="165" width="0.0328%" height="15" fill="rgb(246,142,3)" fg:x="571" fg:w="3"/><text x="6.5341%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="6.2739%" y="165" width="0.0328%" height="15" fill="rgb(241,25,7)" fg:x="574" fg:w="3"/><text x="6.5669%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="6.3067%" y="165" width="0.0328%" height="15" fill="rgb(242,119,39)" fg:x="577" fg:w="3"/><text x="6.5997%" y="175.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.39%)</title><rect x="6.3395%" y="149" width="0.3935%" height="15" fill="rgb(241,98,45)" fg:x="580" fg:w="36"/><text x="6.6325%" y="159.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 0.87%)</title><rect x="6.3395%" y="165" width="0.8744%" height="15" fill="rgb(254,28,30)" fg:x="580" fg:w="80"/><text x="6.6325%" y="175.50"></text></g><g><title>sleb128_decode (68 instructions, 0.74%)</title><rect x="7.2139%" y="165" width="0.7433%" height="15" fill="rgb(241,142,54)" fg:x="660" fg:w="68"/><text x="7.5069%" y="175.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="7.9572%" y="165" width="0.0328%" height="15" fill="rgb(222,85,15)" fg:x="728" fg:w="3"/><text x="8.2501%" y="175.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="7.9899%" y="165" width="0.0328%" height="15" fill="rgb(210,85,47)" fg:x="731" fg:w="3"/><text x="8.2829%" y="175.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="8.0227%" y="165" width="0.0328%" height="15" fill="rgb(224,206,25)" fg:x="734" fg:w="3"/><text x="8.3157%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="8.0555%" y="149" width="0.5574%" height="15" fill="rgb(243,201,19)" fg:x="737" fg:w="51"/><text x="8.3485%" y="159.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (172 instructions, 1.88%)</title><rect x="8.6130%" y="133" width="1.8800%" height="15" fill="rgb(236,59,4)" fg:x="788" fg:w="172"/><text x="8.9059%" y="143.50"></text></g><g><title>utf8_validate (189 instructions, 2.07%)</title><rect x="8.6130%" y="149" width="2.0658%" height="15" fill="rgb(254,179,45)" fg:x="788" fg:w="189"/><text x="8.9059%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="10.6788%" y="117" width="0.3716%" height="15" fill="rgb(226,14,10)" fg:x="977" fg:w="34"/><text x="10.9717%" y="127.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hb405b8650fbedba0 (41 instructions, 0.45%)</title><rect x="10.6788%" y="133" width="0.4481%" height="15" fill="rgb(244,27,41)" fg:x="977" fg:w="41"/><text x="10.9717%" y="143.50"></text></g><g><title>memcpy (119 instructions, 1.30%)</title><rect x="11.1269%" y="133" width="1.3007%" height="15" fill="rgb(235,35,32)" fg:x="1018" fg:w="119"/><text x="11.4199%" y="143.50"></text></g><g><title>text_of_ptr_size (170 instructions, 1.86%)</title><rect x="10.6788%" y="149" width="1.8581%" height="15" fill="rgb(218,68,31)" fg:x="977" fg:w="170"/><text x="10.9717%" y="159.50"></text></g><g><title>@deserialize_go&lt;t&gt; (447 instructions, 4.89%)</title><rect x="8.0555%" y="165" width="4.8858%" height="15" fill="rgb(207,120,37)" fg:x="737" fg:w="447"/><text x="8.3485%" y="175.50">@dese..</text></g><g><title>@deserialize&lt;Nt&gt; (1,394 instructions, 15.24%)</title><rect x="0.5574%" y="181" width="15.2366%" height="15" fill="rgb(227,98,0)" fg:x="51" fg:w="1394"/><text x="0.8504%" y="191.50">@deserialize&lt;Nt&gt;</text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="15.7941%" y="181" width="0.2842%" height="15" fill="rgb(207,7,3)" fg:x="1445" fg:w="26"/><text x="16.0870%" y="191.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="16.0783%" y="165" width="0.2842%" height="15" fill="rgb(206,98,19)" fg:x="1471" fg:w="26"/><text x="16.3712%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="16.3624%" y="165" width="0.2842%" height="15" fill="rgb(217,5,26)" fg:x="1497" fg:w="26"/><text x="16.6554%" y="175.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.09%)</title><rect x="16.6466%" y="149" width="0.0874%" height="15" fill="rgb(235,190,38)" fg:x="1523" fg:w="8"/><text x="16.9396%" y="159.50"></text></g><g><title>B_rem (25 instructions, 0.27%)</title><rect x="16.6466%" y="165" width="0.2733%" height="15" fill="rgb(247,86,24)" fg:x="1523" fg:w="25"/><text x="16.9396%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="16.9199%" y="165" width="0.2842%" height="15" fill="rgb(205,101,16)" fg:x="1548" fg:w="26"/><text x="17.2129%" y="175.50"></text></g><g><title>Array.idx (12 instructions, 0.13%)</title><rect x="17.2041%" y="149" width="0.1312%" height="15" fill="rgb(246,168,33)" fg:x="1574" fg:w="12"/><text x="17.4970%" y="159.50"></text></g><g><title>Array.idx_bigint (23 instructions, 0.25%)</title><rect x="17.2041%" y="165" width="0.2514%" height="15" fill="rgb(231,114,1)" fg:x="1574" fg:w="23"/><text x="17.4970%" y="175.50"></text></g><g><title>opt_project (14 instructions, 0.15%)</title><rect x="17.4555%" y="165" width="0.1530%" height="15" fill="rgb(207,184,53)" fg:x="1597" fg:w="14"/><text x="17.7484%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="17.6085%" y="133" width="0.2842%" height="15" fill="rgb(224,95,51)" fg:x="1611" fg:w="26"/><text x="17.9015%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="17.6085%" y="149" width="0.4481%" height="15" fill="rgb(212,188,45)" fg:x="1611" fg:w="41"/><text x="17.9015%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="18.0566%" y="133" width="0.2842%" height="15" fill="rgb(223,154,38)" fg:x="1652" fg:w="26"/><text x="18.3496%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="18.3408%" y="133" width="0.2842%" height="15" fill="rgb(251,22,52)" fg:x="1678" fg:w="26"/><text x="18.6338%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="18.6250%" y="133" width="0.2842%" height="15" fill="rgb(229,209,22)" fg:x="1704" fg:w="26"/><text x="18.9180%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="18.9092%" y="133" width="0.2842%" height="15" fill="rgb(234,138,34)" fg:x="1730" fg:w="26"/><text x="19.2021%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="19.1934%" y="133" width="0.2842%" height="15" fill="rgb(212,95,11)" fg:x="1756" fg:w="26"/><text x="19.4863%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="19.4775%" y="133" width="0.2842%" height="15" fill="rgb(240,179,47)" fg:x="1782" fg:w="26"/><text x="19.7705%" y="143.50"></text></g><g><title>@new_async (266 instructions, 2.91%)</title><rect x="18.0566%" y="149" width="2.9074%" height="15" fill="rgb(240,163,11)" fg:x="1652" fg:w="266"/><text x="18.3496%" y="159.50">@n..</text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="20.9640%" y="149" width="0.2842%" height="15" fill="rgb(236,37,12)" fg:x="1918" fg:w="26"/><text x="21.2570%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="21.2482%" y="149" width="0.2842%" height="15" fill="rgb(232,164,16)" fg:x="1944" fg:w="26"/><text x="21.5412%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="21.5324%" y="133" width="0.2842%" height="15" fill="rgb(244,205,15)" fg:x="1970" fg:w="26"/><text x="21.8254%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="21.5324%" y="149" width="0.4481%" height="15" fill="rgb(223,117,47)" fg:x="1970" fg:w="41"/><text x="21.8254%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.08%)</title><rect x="21.9805%" y="149" width="0.0765%" height="15" fill="rgb(244,107,35)" fg:x="2011" fg:w="7"/><text x="22.2735%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.08%)</title><rect x="22.0571%" y="149" width="0.0765%" height="15" fill="rgb(205,140,8)" fg:x="2018" fg:w="7"/><text x="22.3500%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="22.1336%" y="149" width="0.2842%" height="15" fill="rgb(228,84,46)" fg:x="2025" fg:w="26"/><text x="22.4265%" y="159.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.10%)</title><rect x="22.4178%" y="133" width="0.0984%" height="15" fill="rgb(254,188,9)" fg:x="2051" fg:w="9"/><text x="22.7107%" y="143.50"></text></g><g><title>remember_continuation (71 instructions, 0.78%)</title><rect x="22.4178%" y="149" width="0.7760%" height="15" fill="rgb(206,112,54)" fg:x="2051" fg:w="71"/><text x="22.7107%" y="159.50"></text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.35%)</title><rect x="23.1938%" y="117" width="0.3498%" height="15" fill="rgb(216,84,49)" fg:x="2122" fg:w="32"/><text x="23.4868%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.04%)</title><rect x="23.5436%" y="101" width="0.0437%" height="15" fill="rgb(214,194,35)" fg:x="2154" fg:w="4"/><text x="23.8365%" y="111.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.40%)</title><rect x="23.5436%" y="117" width="0.4044%" height="15" fill="rgb(249,28,3)" fg:x="2154" fg:w="37"/><text x="23.8365%" y="127.50"></text></g><g><title>@buffer_size&lt;(Nt)&gt; (110 instructions, 1.20%)</title><rect x="23.1938%" y="133" width="1.2023%" height="15" fill="rgb(222,56,52)" fg:x="2122" fg:w="110"/><text x="23.4868%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="24.3961%" y="117" width="0.3716%" height="15" fill="rgb(245,217,50)" fg:x="2232" fg:w="34"/><text x="24.6891%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="24.3961%" y="133" width="0.3935%" height="15" fill="rgb(213,201,24)" fg:x="2232" fg:w="36"/><text x="24.6891%" y="143.50"></text></g><g><title>memcpy (51 instructions, 0.56%)</title><rect x="24.7896%" y="133" width="0.5574%" height="15" fill="rgb(248,116,28)" fg:x="2268" fg:w="51"/><text x="25.0826%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="25.3470%" y="117" width="0.3716%" height="15" fill="rgb(219,72,43)" fg:x="2319" fg:w="34"/><text x="25.6400%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="25.3470%" y="133" width="0.3935%" height="15" fill="rgb(209,138,14)" fg:x="2319" fg:w="36"/><text x="25.6400%" y="143.50"></text></g><g><title>leb128_encode (12 instructions, 0.13%)</title><rect x="25.7405%" y="101" width="0.1312%" height="15" fill="rgb(222,18,33)" fg:x="2355" fg:w="12"/><text x="26.0335%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.44%)</title><rect x="25.7405%" y="117" width="0.4372%" height="15" fill="rgb(213,199,7)" fg:x="2355" fg:w="40"/><text x="26.0335%" y="127.50"></text></g><g><title>text_size (4 instructions, 0.04%)</title><rect x="26.1777%" y="101" width="0.0437%" height="15" fill="rgb(250,110,10)" fg:x="2395" fg:w="4"/><text x="26.4707%" y="111.50"></text></g><g><title>leb128_encode (12 instructions, 0.13%)</title><rect x="26.2214%" y="101" width="0.1312%" height="15" fill="rgb(248,123,6)" fg:x="2399" fg:w="12"/><text x="26.5144%" y="111.50"></text></g><g><title>memcpy (60 instructions, 0.66%)</title><rect x="26.3526%" y="85" width="0.6558%" height="15" fill="rgb(206,91,31)" fg:x="2411" fg:w="60"/><text x="26.6456%" y="95.50"></text></g><g><title>text_to_buf (84 instructions, 0.92%)</title><rect x="26.3526%" y="101" width="0.9181%" height="15" fill="rgb(211,154,13)" fg:x="2411" fg:w="84"/><text x="26.6456%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (127 instructions, 1.39%)</title><rect x="26.1777%" y="117" width="1.3881%" height="15" fill="rgb(225,148,7)" fg:x="2395" fg:w="127"/><text x="26.4707%" y="127.50"></text></g><g><title>@serialize_go&lt;(Nt)&gt; (188 instructions, 2.05%)</title><rect x="25.7405%" y="133" width="2.0549%" height="15" fill="rgb(220,160,43)" fg:x="2355" fg:w="188"/><text x="26.0335%" y="143.50"></text></g><g><title>@serialize&lt;Nt&gt; (484 instructions, 5.29%)</title><rect x="23.1938%" y="149" width="5.2902%" height="15" fill="rgb(213,52,39)" fg:x="2122" fg:w="484"/><text x="23.4868%" y="159.50">@seri..</text></g><g><title>@reset_cycles (3 instructions, 0.03%)</title><rect x="28.4840%" y="133" width="0.0328%" height="15" fill="rgb(243,137,7)" fg:x="2606" fg:w="3"/><text x="28.7770%" y="143.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="28.5168%" y="53" width="0.4153%" height="15" fill="rgb(230,79,13)" fg:x="2609" fg:w="38"/><text x="28.8097%" y="63.50"></text></g><g><title>memset (244 instructions, 2.67%)</title><rect x="28.9321%" y="53" width="2.6670%" height="15" fill="rgb(247,105,23)" fg:x="2647" fg:w="244"/><text x="29.2251%" y="63.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.37%)</title><rect x="28.5168%" y="69" width="3.3665%" height="15" fill="rgb(223,179,41)" fg:x="2609" fg:w="308"/><text x="28.8097%" y="79.50">mp..</text></g><g><title>mp_init (323 instructions, 3.53%)</title><rect x="28.5168%" y="85" width="3.5304%" height="15" fill="rgb(218,9,34)" fg:x="2609" fg:w="323"/><text x="28.8097%" y="95.50">mp_..</text></g><g><title>mp_set_u64 (480 instructions, 5.25%)</title><rect x="32.0472%" y="69" width="5.2465%" height="15" fill="rgb(222,106,8)" fg:x="2932" fg:w="480"/><text x="32.3402%" y="79.50">mp_se..</text></g><g><title>mp_set_i64 (494 instructions, 5.40%)</title><rect x="32.0472%" y="85" width="5.3995%" height="15" fill="rgb(211,220,0)" fg:x="2932" fg:w="494"/><text x="32.3402%" y="95.50">mp_se..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.34%)</title><rect x="37.4467%" y="85" width="0.3388%" height="15" fill="rgb(229,52,16)" fg:x="3426" fg:w="31"/><text x="37.7397%" y="95.50"></text></g><g><title>bigint_of_int64 (891 instructions, 9.74%)</title><rect x="28.5168%" y="101" width="9.7388%" height="15" fill="rgb(212,155,18)" fg:x="2609" fg:w="891"/><text x="28.8097%" y="111.50">bigint_of_in..</text></g><g><title>mp_cmp_mag (17 instructions, 0.19%)</title><rect x="38.2555%" y="69" width="0.1858%" height="15" fill="rgb(242,21,14)" fg:x="3500" fg:w="17"/><text x="38.5485%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.34%)</title><rect x="38.2555%" y="85" width="0.3388%" height="15" fill="rgb(222,19,48)" fg:x="3500" fg:w="31"/><text x="38.5485%" y="95.50"></text></g><g><title>bigint_lt (54 instructions, 0.59%)</title><rect x="38.2555%" y="101" width="0.5902%" height="15" fill="rgb(232,45,27)" fg:x="3500" fg:w="54"/><text x="38.5485%" y="111.50"></text></g><g><title>B_lt (963 instructions, 10.53%)</title><rect x="28.5168%" y="117" width="10.5257%" height="15" fill="rgb(249,103,42)" fg:x="2609" fg:w="963"/><text x="28.8097%" y="127.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.13%)</title><rect x="39.0425%" y="117" width="0.1312%" height="15" fill="rgb(246,81,33)" fg:x="3572" fg:w="12"/><text x="39.3355%" y="127.50"></text></g><g><title>cycle_add (999 instructions, 10.92%)</title><rect x="28.5168%" y="133" width="10.9192%" height="15" fill="rgb(252,33,42)" fg:x="2609" fg:w="999"/><text x="28.8097%" y="143.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 11.03%)</title><rect x="28.4840%" y="149" width="11.0285%" height="15" fill="rgb(209,212,41)" fg:x="2606" fg:w="1009"/><text x="28.7770%" y="159.50">@add_cycles</text></g><g><title>@call_succeeded (2 instructions, 0.02%)</title><rect x="39.5125%" y="149" width="0.0219%" height="15" fill="rgb(207,154,6)" fg:x="3615" fg:w="2"/><text x="39.8055%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="39.5344%" y="133" width="0.2842%" height="15" fill="rgb(223,64,47)" fg:x="3617" fg:w="26"/><text x="39.8273%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="39.5344%" y="149" width="0.4481%" height="15" fill="rgb(211,161,38)" fg:x="3617" fg:w="41"/><text x="39.8273%" y="159.50"></text></g><g><title>from_2_tuple (6 instructions, 0.07%)</title><rect x="39.9825%" y="149" width="0.0656%" height="15" fill="rgb(219,138,40)" fg:x="3658" fg:w="6"/><text x="40.2755%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="40.0481%" y="133" width="0.2842%" height="15" fill="rgb(241,228,46)" fg:x="3664" fg:w="26"/><text x="40.3411%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="40.3323%" y="117" width="0.2842%" height="15" fill="rgb(223,209,38)" fg:x="3690" fg:w="26"/><text x="40.6252%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="40.6165%" y="117" width="0.2842%" height="15" fill="rgb(236,164,45)" fg:x="3716" fg:w="26"/><text x="40.9094%" y="127.50"></text></g><g><title>enqueue (118 instructions, 1.29%)</title><rect x="40.3323%" y="133" width="1.2898%" height="15" fill="rgb(231,15,5)" fg:x="3690" fg:w="118"/><text x="40.6252%" y="143.50"></text></g><g><title>$lambda (167 instructions, 1.83%)</title><rect x="40.0481%" y="149" width="1.8253%" height="15" fill="rgb(252,35,15)" fg:x="3664" fg:w="167"/><text x="40.3411%" y="159.50"></text></g><g><title>$k/37 (2,412 instructions, 26.36%)</title><rect x="17.6085%" y="165" width="26.3635%" height="15" fill="rgb(248,181,18)" fg:x="1611" fg:w="2412"/><text x="17.9015%" y="175.50">$k/37</text></g><g><title>$lambda (2,647 instructions, 28.93%)</title><rect x="16.0783%" y="181" width="28.9321%" height="15" fill="rgb(233,39,42)" fg:x="1471" fg:w="2647"/><text x="16.3712%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.55%)</title><rect x="45.0104%" y="181" width="0.5465%" height="15" fill="rgb(238,110,33)" fg:x="4118" fg:w="50"/><text x="45.3034%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.15%)</title><rect x="45.5569%" y="181" width="0.1530%" height="15" fill="rgb(233,195,10)" fg:x="4168" fg:w="14"/><text x="45.8499%" y="191.50"></text></g><g><title>put (4,672 instructions, 51.07%)</title><rect x="0.0000%" y="197" width="51.0657%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="4672"/><text x="0.2930%" y="207.50">put</text></g><g><title>trans_state5 (9 instructions, 0.10%)</title><rect x="51.0657%" y="181" width="0.0984%" height="15" fill="rgb(221,225,9)" fg:x="4672" fg:w="9"/><text x="51.3587%" y="191.50"></text></g><g><title>recall_continuation (57 instructions, 0.62%)</title><rect x="51.1641%" y="181" width="0.6230%" height="15" fill="rgb(224,227,45)" fg:x="4681" fg:w="57"/><text x="51.4570%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="51.7871%" y="165" width="0.3716%" height="15" fill="rgb(229,198,43)" fg:x="4738" fg:w="34"/><text x="52.0800%" y="175.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="51.7871%" y="181" width="0.3935%" height="15" fill="rgb(206,209,35)" fg:x="4738" fg:w="36"/><text x="52.0800%" y="191.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="52.1806%" y="149" width="0.5574%" height="15" fill="rgb(245,195,53)" fg:x="4774" fg:w="51"/><text x="52.4735%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="52.7380%" y="149" width="0.3716%" height="15" fill="rgb(240,92,26)" fg:x="4825" fg:w="34"/><text x="53.0310%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="53.1096%" y="149" width="0.5574%" height="15" fill="rgb(207,40,23)" fg:x="4859" fg:w="51"/><text x="53.4026%" y="159.50"></text></g><g><title>parse_idl_header (207 instructions, 2.26%)</title><rect x="52.1806%" y="165" width="2.2625%" height="15" fill="rgb(223,111,35)" fg:x="4774" fg:w="207"/><text x="52.4735%" y="175.50">p..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.10%)</title><rect x="54.4431%" y="165" width="0.0984%" height="15" fill="rgb(229,147,28)" fg:x="4981" fg:w="9"/><text x="54.7361%" y="175.50"></text></g><g><title>memset (4 instructions, 0.04%)</title><rect x="54.5415%" y="149" width="0.0437%" height="15" fill="rgb(211,29,28)" fg:x="4990" fg:w="4"/><text x="54.8344%" y="159.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.21%)</title><rect x="54.5415%" y="165" width="0.2077%" height="15" fill="rgb(228,72,33)" fg:x="4990" fg:w="19"/><text x="54.8344%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.56%)</title><rect x="54.7492%" y="165" width="0.5574%" height="15" fill="rgb(205,214,31)" fg:x="5009" fg:w="51"/><text x="55.0421%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 4.77%)</title><rect x="52.1806%" y="181" width="4.7655%" height="15" fill="rgb(224,111,15)" fg:x="4774" fg:w="436"/><text x="52.4735%" y="191.50">@des..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="56.9461%" y="37" width="0.4153%" height="15" fill="rgb(253,21,26)" fg:x="5210" fg:w="38"/><text x="57.2391%" y="47.50"></text></g><g><title>memset (244 instructions, 2.67%)</title><rect x="57.3615%" y="37" width="2.6670%" height="15" fill="rgb(245,139,43)" fg:x="5248" fg:w="244"/><text x="57.6544%" y="47.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.37%)</title><rect x="56.9461%" y="53" width="3.3665%" height="15" fill="rgb(252,170,7)" fg:x="5210" fg:w="308"/><text x="57.2391%" y="63.50">mp..</text></g><g><title>mp_init (323 instructions, 3.53%)</title><rect x="56.9461%" y="69" width="3.5304%" height="15" fill="rgb(231,118,14)" fg:x="5210" fg:w="323"/><text x="57.2391%" y="79.50">mp_..</text></g><g><title>mp_set_u32 (480 instructions, 5.25%)</title><rect x="60.4766%" y="69" width="5.2465%" height="15" fill="rgb(238,83,0)" fg:x="5533" fg:w="480"/><text x="60.7695%" y="79.50">mp_se..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.34%)</title><rect x="65.7230%" y="69" width="0.3388%" height="15" fill="rgb(221,39,39)" fg:x="6013" fg:w="31"/><text x="66.0160%" y="79.50"></text></g><g><title>bigint_of_word32 (877 instructions, 9.59%)</title><rect x="56.9461%" y="85" width="9.5857%" height="15" fill="rgb(222,119,46)" fg:x="5210" fg:w="877"/><text x="57.2391%" y="95.50">bigint_of_w..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="66.5319%" y="37" width="0.4153%" height="15" fill="rgb(222,165,49)" fg:x="6087" fg:w="38"/><text x="66.8248%" y="47.50"></text></g><g><title>memset (244 instructions, 2.67%)</title><rect x="66.9472%" y="37" width="2.6670%" height="15" fill="rgb(219,113,52)" fg:x="6125" fg:w="244"/><text x="67.2402%" y="47.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.37%)</title><rect x="66.5319%" y="53" width="3.3665%" height="15" fill="rgb(214,7,15)" fg:x="6087" fg:w="308"/><text x="66.8248%" y="63.50">mp..</text></g><g><title>mp_init (323 instructions, 3.53%)</title><rect x="66.5319%" y="69" width="3.5304%" height="15" fill="rgb(235,32,4)" fg:x="6087" fg:w="323"/><text x="66.8248%" y="79.50">mp_..</text></g><g><title>mp_copy (39 instructions, 0.43%)</title><rect x="70.0623%" y="53" width="0.4263%" height="15" fill="rgb(238,90,54)" fg:x="6410" fg:w="39"/><text x="70.3553%" y="63.50"></text></g><g><title>mp_lshd (12 instructions, 0.13%)</title><rect x="70.4886%" y="53" width="0.1312%" height="15" fill="rgb(213,208,19)" fg:x="6449" fg:w="12"/><text x="70.7815%" y="63.50"></text></g><g><title>mp_clamp (11 instructions, 0.12%)</title><rect x="70.6197%" y="53" width="0.1202%" height="15" fill="rgb(233,156,4)" fg:x="6461" fg:w="11"/><text x="70.9127%" y="63.50"></text></g><g><title>mp_mul_2d (110 instructions, 1.20%)</title><rect x="70.0623%" y="69" width="1.2023%" height="15" fill="rgb(207,194,5)" fg:x="6410" fg:w="110"/><text x="70.3553%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.34%)</title><rect x="71.2646%" y="69" width="0.3388%" height="15" fill="rgb(206,111,30)" fg:x="6520" fg:w="31"/><text x="71.5576%" y="79.50"></text></g><g><title>bigint_lsh (519 instructions, 5.67%)</title><rect x="66.5319%" y="85" width="5.6728%" height="15" fill="rgb(243,70,54)" fg:x="6087" fg:w="519"/><text x="66.8248%" y="95.50">bigint..</text></g><g><title>B_lsh (1,421 instructions, 15.53%)</title><rect x="56.9461%" y="101" width="15.5318%" height="15" fill="rgb(242,28,8)" fg:x="5210" fg:w="1421"/><text x="57.2391%" y="111.50">B_lsh</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="72.4779%" y="37" width="0.4153%" height="15" fill="rgb(219,106,18)" fg:x="6631" fg:w="38"/><text x="72.7708%" y="47.50"></text></g><g><title>memset (244 instructions, 2.67%)</title><rect x="72.8932%" y="37" width="2.6670%" height="15" fill="rgb(244,222,10)" fg:x="6669" fg:w="244"/><text x="73.1862%" y="47.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.37%)</title><rect x="72.4779%" y="53" width="3.3665%" height="15" fill="rgb(236,179,52)" fg:x="6631" fg:w="308"/><text x="72.7708%" y="63.50">mp..</text></g><g><title>mp_init (323 instructions, 3.53%)</title><rect x="72.4779%" y="69" width="3.5304%" height="15" fill="rgb(213,23,39)" fg:x="6631" fg:w="323"/><text x="72.7708%" y="79.50">mp_..</text></g><g><title>mp_set_u64 (480 instructions, 5.25%)</title><rect x="76.0083%" y="53" width="5.2465%" height="15" fill="rgb(238,48,10)" fg:x="6954" fg:w="480"/><text x="76.3013%" y="63.50">mp_se..</text></g><g><title>mp_set_i64 (494 instructions, 5.40%)</title><rect x="76.0083%" y="69" width="5.3995%" height="15" fill="rgb(251,196,23)" fg:x="6954" fg:w="494"/><text x="76.3013%" y="79.50">mp_se..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.34%)</title><rect x="81.4078%" y="69" width="0.3388%" height="15" fill="rgb(250,152,24)" fg:x="7448" fg:w="31"/><text x="81.7008%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 9.74%)</title><rect x="72.4779%" y="85" width="9.7388%" height="15" fill="rgb(209,150,17)" fg:x="6631" fg:w="891"/><text x="72.7708%" y="95.50">bigint_of_in..</text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="82.2166%" y="37" width="0.4153%" height="15" fill="rgb(234,202,34)" fg:x="7522" fg:w="38"/><text x="82.5096%" y="47.50"></text></g><g><title>memset (244 instructions, 2.67%)</title><rect x="82.6320%" y="37" width="2.6670%" height="15" fill="rgb(253,148,53)" fg:x="7560" fg:w="244"/><text x="82.9250%" y="47.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.37%)</title><rect x="82.2166%" y="53" width="3.3665%" height="15" fill="rgb(218,129,16)" fg:x="7522" fg:w="308"/><text x="82.5096%" y="63.50">mp..</text></g><g><title>mp_init (323 instructions, 3.53%)</title><rect x="82.2166%" y="69" width="3.5304%" height="15" fill="rgb(216,85,19)" fg:x="7522" fg:w="323"/><text x="82.5096%" y="79.50">mp_..</text></g><g><title>mp_clamp (42 instructions, 0.46%)</title><rect x="85.7471%" y="37" width="0.4591%" height="15" fill="rgb(235,228,7)" fg:x="7845" fg:w="42"/><text x="86.0400%" y="47.50"></text></g><g><title>s_mp_add (104 instructions, 1.14%)</title><rect x="85.7471%" y="53" width="1.1367%" height="15" fill="rgb(245,175,0)" fg:x="7845" fg:w="104"/><text x="86.0400%" y="63.50"></text></g><g><title>mp_add (120 instructions, 1.31%)</title><rect x="85.7471%" y="69" width="1.3116%" height="15" fill="rgb(208,168,36)" fg:x="7845" fg:w="120"/><text x="86.0400%" y="79.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.34%)</title><rect x="87.0587%" y="69" width="0.3388%" height="15" fill="rgb(246,171,24)" fg:x="7965" fg:w="31"/><text x="87.3517%" y="79.50"></text></g><g><title>bigint_add (538 instructions, 5.88%)</title><rect x="82.2166%" y="85" width="5.8804%" height="15" fill="rgb(215,142,24)" fg:x="7522" fg:w="538"/><text x="82.5096%" y="95.50">bigint..</text></g><g><title>mp_count_bits (6 instructions, 0.07%)</title><rect x="88.0971%" y="69" width="0.0656%" height="15" fill="rgb(250,187,7)" fg:x="8060" fg:w="6"/><text x="88.3900%" y="79.50"></text></g><g><title>bigint_2complement_bits (39 instructions, 0.43%)</title><rect x="88.0971%" y="85" width="0.4263%" height="15" fill="rgb(228,66,33)" fg:x="8060" fg:w="39"/><text x="88.3900%" y="95.50"></text></g><g><title>mp_get_mag_u32 (12 instructions, 0.13%)</title><rect x="88.5233%" y="53" width="0.1312%" height="15" fill="rgb(234,215,21)" fg:x="8099" fg:w="12"/><text x="88.8163%" y="63.50"></text></g><g><title>mp_get_i32 (23 instructions, 0.25%)</title><rect x="88.5233%" y="69" width="0.2514%" height="15" fill="rgb(222,191,20)" fg:x="8099" fg:w="23"/><text x="88.8163%" y="79.50"></text></g><g><title>bigint_to_word32_wrap (34 instructions, 0.37%)</title><rect x="88.5233%" y="85" width="0.3716%" height="15" fill="rgb(245,79,54)" fg:x="8099" fg:w="34"/><text x="88.8163%" y="95.50"></text></g><g><title>B_add (1,529 instructions, 16.71%)</title><rect x="72.4779%" y="101" width="16.7122%" height="15" fill="rgb(240,10,37)" fg:x="6631" fg:w="1529"/><text x="72.7708%" y="111.50">B_add</text></g><g><title>from_word128_ptr (2,977 instructions, 32.54%)</title><rect x="56.9461%" y="117" width="32.5391%" height="15" fill="rgb(214,192,32)" fg:x="5210" fg:w="2977"/><text x="57.2391%" y="127.50">from_word128_ptr</text></g><g><title>cycle_refunded (2,990 instructions, 32.68%)</title><rect x="56.9461%" y="133" width="32.6812%" height="15" fill="rgb(209,36,54)" fg:x="5210" fg:w="2990"/><text x="57.2391%" y="143.50">cycle_refunded</text></g><g><title>@getSystemRefund (2,992 instructions, 32.70%)</title><rect x="56.9461%" y="149" width="32.7030%" height="15" fill="rgb(220,10,11)" fg:x="5210" fg:w="2992"/><text x="57.2391%" y="159.50">@getSystemRefund</text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="89.6491%" y="149" width="0.2842%" height="15" fill="rgb(221,106,17)" fg:x="8202" fg:w="26"/><text x="89.9421%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.28%)</title><rect x="89.9333%" y="133" width="0.2842%" height="15" fill="rgb(251,142,44)" fg:x="8228" fg:w="26"/><text x="90.2263%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.45%)</title><rect x="89.9333%" y="149" width="0.4481%" height="15" fill="rgb(238,13,15)" fg:x="8228" fg:w="41"/><text x="90.2263%" y="159.50"></text></g><g><title>opt_inject (14 instructions, 0.15%)</title><rect x="90.3815%" y="149" width="0.1530%" height="15" fill="rgb(208,107,27)" fg:x="8269" fg:w="14"/><text x="90.6744%" y="159.50"></text></g><g><title>@reset_cycles (3 instructions, 0.03%)</title><rect x="90.5345%" y="133" width="0.0328%" height="15" fill="rgb(205,136,37)" fg:x="8283" fg:w="3"/><text x="90.8275%" y="143.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.15%)</title><rect x="90.5673%" y="85" width="0.1530%" height="15" fill="rgb(250,205,27)" fg:x="8286" fg:w="14"/><text x="90.8602%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="90.7203%" y="69" width="0.3716%" height="15" fill="rgb(210,80,43)" fg:x="8300" fg:w="34"/><text x="91.0133%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="90.7203%" y="85" width="0.3935%" height="15" fill="rgb(247,160,36)" fg:x="8300" fg:w="36"/><text x="91.0133%" y="95.50"></text></g><g><title>memcpy (63 instructions, 0.69%)</title><rect x="91.1138%" y="85" width="0.6886%" height="15" fill="rgb(234,13,49)" fg:x="8336" fg:w="63"/><text x="91.4068%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.37%)</title><rect x="91.8024%" y="69" width="0.3716%" height="15" fill="rgb(234,122,0)" fg:x="8399" fg:w="34"/><text x="92.0954%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.39%)</title><rect x="91.8024%" y="85" width="0.3935%" height="15" fill="rgb(207,146,38)" fg:x="8399" fg:w="36"/><text x="92.0954%" y="95.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.04%)</title><rect x="92.1959%" y="85" width="0.0437%" height="15" fill="rgb(207,177,25)" fg:x="8435" fg:w="4"/><text x="92.4888%" y="95.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 2.36%)</title><rect x="90.5673%" y="101" width="2.3609%" height="15" fill="rgb(211,178,42)" fg:x="8286" fg:w="216"/><text x="90.8602%" y="111.50">@..</text></g><g><title>reply_with_data (30 instructions, 0.33%)</title><rect x="92.9282%" y="101" width="0.3279%" height="15" fill="rgb(230,69,54)" fg:x="8502" fg:w="30"/><text x="93.2212%" y="111.50"></text></g><g><title>$lambda (251 instructions, 2.74%)</title><rect x="90.5673%" y="117" width="2.7435%" height="15" fill="rgb(214,135,41)" fg:x="8286" fg:w="251"/><text x="90.8602%" y="127.50">$..</text></g><g><title>$lambda (258 instructions, 2.82%)</title><rect x="90.5673%" y="133" width="2.8200%" height="15" fill="rgb(237,67,25)" fg:x="8286" fg:w="258"/><text x="90.8602%" y="143.50">$l..</text></g><g><title>anon-func-349.15 (284 instructions, 3.10%)</title><rect x="90.5345%" y="149" width="3.1042%" height="15" fill="rgb(222,189,50)" fg:x="8283" fg:w="284"/><text x="90.8275%" y="159.50">an..</text></g><g><title>fulfill (3,411 instructions, 37.28%)</title><rect x="56.9461%" y="165" width="37.2828%" height="15" fill="rgb(245,148,34)" fg:x="5210" fg:w="3411"/><text x="57.2391%" y="175.50">fulfill</text></g><g><title>$lambda (3,419 instructions, 37.37%)</title><rect x="56.9461%" y="181" width="37.3702%" height="15" fill="rgb(222,29,6)" fg:x="5210" fg:w="3419"/><text x="57.2391%" y="191.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.55%)</title><rect x="94.3163%" y="181" width="0.5465%" height="15" fill="rgb(221,189,43)" fg:x="8629" fg:w="50"/><text x="94.6093%" y="191.50"></text></g><g><title>trans_state4 (14 instructions, 0.15%)</title><rect x="94.8628%" y="181" width="0.1530%" height="15" fill="rgb(207,36,27)" fg:x="8679" fg:w="14"/><text x="95.1558%" y="191.50"></text></g><g><title>all (9,149 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,90,24)" fg:x="0" fg:w="9149"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (4,477 instructions, 48.93%)</title><rect x="51.0657%" y="197" width="48.9343%" height="15" fill="rgb(224,66,35)" fg:x="4672" fg:w="4477"/><text x="51.3587%" y="207.50">@callback&lt;u&gt;</text></g></svg></svg>