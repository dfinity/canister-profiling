<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="246" onload="init(evt)" viewBox="0 0 1024 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(5, &quot;Test5&quot;) (no new instantiation)</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="229.00"> </text><svg id="frames" x="10" width="1004" total_samples="6188"><g><title>trans_state5 (9 instructions, 0.15%)</title><rect x="0.0000%" y="165" width="0.1454%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="9"/><text x="0.2930%" y="175.50"></text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="0.1454%" y="165" width="0.0485%" height="15" fill="rgb(235,61,29)" fg:x="9" fg:w="3"/><text x="0.4384%" y="175.50"></text></g><g><title>@reset_refund (3 instructions, 0.05%)</title><rect x="0.1939%" y="165" width="0.0485%" height="15" fill="rgb(219,207,3)" fg:x="12" fg:w="3"/><text x="0.4869%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="0.2424%" y="149" width="0.5495%" height="15" fill="rgb(222,56,46)" fg:x="15" fg:w="34"/><text x="0.5354%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="0.2424%" y="165" width="0.5818%" height="15" fill="rgb(239,76,54)" fg:x="15" fg:w="36"/><text x="0.5354%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="0.8242%" y="133" width="0.8242%" height="15" fill="rgb(231,124,27)" fg:x="51" fg:w="51"/><text x="1.1171%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="1.6484%" y="133" width="0.5495%" height="15" fill="rgb(249,195,6)" fg:x="102" fg:w="34"/><text x="1.9413%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="2.1978%" y="133" width="0.8242%" height="15" fill="rgb(237,174,47)" fg:x="136" fg:w="51"/><text x="2.4908%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.10%)</title><rect x="3.0220%" y="133" width="1.0989%" height="15" fill="rgb(206,201,31)" fg:x="187" fg:w="68"/><text x="3.3149%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.10%)</title><rect x="4.1209%" y="133" width="1.0989%" height="15" fill="rgb(231,57,52)" fg:x="255" fg:w="68"/><text x="4.4138%" y="143.50"></text></g><g><title>parse_idl_header (373 instructions, 6.03%)</title><rect x="0.8242%" y="149" width="6.0278%" height="15" fill="rgb(248,177,22)" fg:x="51" fg:w="373"/><text x="1.1171%" y="159.50">parse_..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.15%)</title><rect x="6.8520%" y="149" width="0.1454%" height="15" fill="rgb(215,211,37)" fg:x="424" fg:w="9"/><text x="7.1449%" y="159.50"></text></g><g><title>memset (4 instructions, 0.06%)</title><rect x="6.9974%" y="133" width="0.0646%" height="15" fill="rgb(241,128,51)" fg:x="433" fg:w="4"/><text x="7.2904%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.31%)</title><rect x="6.9974%" y="149" width="0.3070%" height="15" fill="rgb(227,165,31)" fg:x="433" fg:w="19"/><text x="7.2904%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="7.3045%" y="149" width="0.8242%" height="15" fill="rgb(228,167,24)" fg:x="452" fg:w="51"/><text x="7.5974%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.10%)</title><rect x="8.1286%" y="149" width="1.0989%" height="15" fill="rgb(228,143,12)" fg:x="503" fg:w="68"/><text x="8.4216%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.05%)</title><rect x="9.2275%" y="149" width="0.0485%" height="15" fill="rgb(249,149,8)" fg:x="571" fg:w="3"/><text x="9.5205%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.05%)</title><rect x="9.2760%" y="149" width="0.0485%" height="15" fill="rgb(243,35,44)" fg:x="574" fg:w="3"/><text x="9.5690%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.05%)</title><rect x="9.3245%" y="149" width="0.0485%" height="15" fill="rgb(246,89,9)" fg:x="577" fg:w="3"/><text x="9.6175%" y="159.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.58%)</title><rect x="9.3730%" y="133" width="0.5818%" height="15" fill="rgb(233,213,13)" fg:x="580" fg:w="36"/><text x="9.6659%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 1.29%)</title><rect x="9.3730%" y="149" width="1.2928%" height="15" fill="rgb(233,141,41)" fg:x="580" fg:w="80"/><text x="9.6659%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.10%)</title><rect x="10.6658%" y="149" width="1.0989%" height="15" fill="rgb(239,167,4)" fg:x="660" fg:w="68"/><text x="10.9588%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.05%)</title><rect x="11.7647%" y="149" width="0.0485%" height="15" fill="rgb(209,217,16)" fg:x="728" fg:w="3"/><text x="12.0577%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.05%)</title><rect x="11.8132%" y="149" width="0.0485%" height="15" fill="rgb(219,88,35)" fg:x="731" fg:w="3"/><text x="12.1062%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.05%)</title><rect x="11.8617%" y="149" width="0.0485%" height="15" fill="rgb(220,193,23)" fg:x="734" fg:w="3"/><text x="12.1546%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="11.9101%" y="133" width="0.8242%" height="15" fill="rgb(230,90,52)" fg:x="737" fg:w="51"/><text x="12.2031%" y="143.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (172 instructions, 2.78%)</title><rect x="12.7343%" y="117" width="2.7796%" height="15" fill="rgb(252,106,19)" fg:x="788" fg:w="172"/><text x="13.0273%" y="127.50">co..</text></g><g><title>utf8_validate (189 instructions, 3.05%)</title><rect x="12.7343%" y="133" width="3.0543%" height="15" fill="rgb(206,74,20)" fg:x="788" fg:w="189"/><text x="13.0273%" y="143.50">ut..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="15.7886%" y="101" width="0.5495%" height="15" fill="rgb(230,138,44)" fg:x="977" fg:w="34"/><text x="16.0816%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.66%)</title><rect x="15.7886%" y="117" width="0.6626%" height="15" fill="rgb(235,182,43)" fg:x="977" fg:w="41"/><text x="16.0816%" y="127.50"></text></g><g><title>memcpy (119 instructions, 1.92%)</title><rect x="16.4512%" y="117" width="1.9231%" height="15" fill="rgb(242,16,51)" fg:x="1018" fg:w="119"/><text x="16.7442%" y="127.50"></text></g><g><title>text_of_ptr_size (170 instructions, 2.75%)</title><rect x="15.7886%" y="133" width="2.7473%" height="15" fill="rgb(248,9,4)" fg:x="977" fg:w="170"/><text x="16.0816%" y="143.50">t..</text></g><g><title>@deserialize_go&lt;t&gt; (447 instructions, 7.22%)</title><rect x="11.9101%" y="149" width="7.2237%" height="15" fill="rgb(210,31,22)" fg:x="737" fg:w="447"/><text x="12.2031%" y="159.50">@deseria..</text></g><g><title>@deserialize&lt;Nt&gt; (1,394 instructions, 22.53%)</title><rect x="0.8242%" y="165" width="22.5275%" height="15" fill="rgb(239,54,39)" fg:x="51" fg:w="1394"/><text x="1.1171%" y="175.50">@deserialize&lt;Nt&gt;</text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="23.3516%" y="165" width="0.4202%" height="15" fill="rgb(230,99,41)" fg:x="1445" fg:w="26"/><text x="23.6446%" y="175.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="23.7718%" y="149" width="0.4202%" height="15" fill="rgb(253,106,12)" fg:x="1471" fg:w="26"/><text x="24.0648%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="24.1920%" y="149" width="0.4202%" height="15" fill="rgb(213,46,41)" fg:x="1497" fg:w="26"/><text x="24.4850%" y="159.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.13%)</title><rect x="24.6122%" y="133" width="0.1293%" height="15" fill="rgb(215,133,35)" fg:x="1523" fg:w="8"/><text x="24.9051%" y="143.50"></text></g><g><title>B_rem (25 instructions, 0.40%)</title><rect x="24.6122%" y="149" width="0.4040%" height="15" fill="rgb(213,28,5)" fg:x="1523" fg:w="25"/><text x="24.9051%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="25.0162%" y="149" width="0.4202%" height="15" fill="rgb(215,77,49)" fg:x="1548" fg:w="26"/><text x="25.3091%" y="159.50"></text></g><g><title>Array.idx (12 instructions, 0.19%)</title><rect x="25.4363%" y="133" width="0.1939%" height="15" fill="rgb(248,100,22)" fg:x="1574" fg:w="12"/><text x="25.7293%" y="143.50"></text></g><g><title>Array.idx_bigint (23 instructions, 0.37%)</title><rect x="25.4363%" y="149" width="0.3717%" height="15" fill="rgb(208,67,9)" fg:x="1574" fg:w="23"/><text x="25.7293%" y="159.50"></text></g><g><title>opt_project (14 instructions, 0.23%)</title><rect x="25.8080%" y="149" width="0.2262%" height="15" fill="rgb(219,133,21)" fg:x="1597" fg:w="14"/><text x="26.1010%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="26.0343%" y="117" width="0.4202%" height="15" fill="rgb(246,46,29)" fg:x="1611" fg:w="26"/><text x="26.3272%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.66%)</title><rect x="26.0343%" y="133" width="0.6626%" height="15" fill="rgb(246,185,52)" fg:x="1611" fg:w="41"/><text x="26.3272%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="26.6968%" y="117" width="0.4202%" height="15" fill="rgb(252,136,11)" fg:x="1652" fg:w="26"/><text x="26.9898%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="27.1170%" y="117" width="0.4202%" height="15" fill="rgb(219,138,53)" fg:x="1678" fg:w="26"/><text x="27.4100%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="27.5372%" y="117" width="0.4202%" height="15" fill="rgb(211,51,23)" fg:x="1704" fg:w="26"/><text x="27.8301%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="27.9573%" y="117" width="0.4202%" height="15" fill="rgb(247,221,28)" fg:x="1730" fg:w="26"/><text x="28.2503%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="28.3775%" y="117" width="0.4202%" height="15" fill="rgb(251,222,45)" fg:x="1756" fg:w="26"/><text x="28.6705%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="28.7977%" y="117" width="0.4202%" height="15" fill="rgb(217,162,53)" fg:x="1782" fg:w="26"/><text x="29.0906%" y="127.50"></text></g><g><title>@new_async (266 instructions, 4.30%)</title><rect x="26.6968%" y="133" width="4.2986%" height="15" fill="rgb(229,93,14)" fg:x="1652" fg:w="266"/><text x="26.9898%" y="143.50">@new..</text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="30.9955%" y="133" width="0.4202%" height="15" fill="rgb(209,67,49)" fg:x="1918" fg:w="26"/><text x="31.2884%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="31.4156%" y="133" width="0.4202%" height="15" fill="rgb(213,87,29)" fg:x="1944" fg:w="26"/><text x="31.7086%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="31.8358%" y="117" width="0.4202%" height="15" fill="rgb(205,151,52)" fg:x="1970" fg:w="26"/><text x="32.1288%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.66%)</title><rect x="31.8358%" y="133" width="0.6626%" height="15" fill="rgb(253,215,39)" fg:x="1970" fg:w="41"/><text x="32.1288%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.11%)</title><rect x="32.4984%" y="133" width="0.1131%" height="15" fill="rgb(221,220,41)" fg:x="2011" fg:w="7"/><text x="32.7914%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.11%)</title><rect x="32.6115%" y="133" width="0.1131%" height="15" fill="rgb(218,133,21)" fg:x="2018" fg:w="7"/><text x="32.9045%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="32.7246%" y="133" width="0.4202%" height="15" fill="rgb(221,193,43)" fg:x="2025" fg:w="26"/><text x="33.0176%" y="143.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (9 instructions, 0.15%)</title><rect x="33.1448%" y="117" width="0.1454%" height="15" fill="rgb(240,128,52)" fg:x="2051" fg:w="9"/><text x="33.4378%" y="127.50"></text></g><g><title>remember_continuation (71 instructions, 1.15%)</title><rect x="33.1448%" y="133" width="1.1474%" height="15" fill="rgb(253,114,12)" fg:x="2051" fg:w="71"/><text x="33.4378%" y="143.50"></text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.52%)</title><rect x="34.2922%" y="101" width="0.5171%" height="15" fill="rgb(215,223,47)" fg:x="2122" fg:w="32"/><text x="34.5851%" y="111.50"></text></g><g><title>text_size (4 instructions, 0.06%)</title><rect x="34.8093%" y="85" width="0.0646%" height="15" fill="rgb(248,225,23)" fg:x="2154" fg:w="4"/><text x="35.1023%" y="95.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.60%)</title><rect x="34.8093%" y="101" width="0.5979%" height="15" fill="rgb(250,108,0)" fg:x="2154" fg:w="37"/><text x="35.1023%" y="111.50"></text></g><g><title>@buffer_size&lt;(Nt)&gt; (110 instructions, 1.78%)</title><rect x="34.2922%" y="117" width="1.7776%" height="15" fill="rgb(228,208,7)" fg:x="2122" fg:w="110"/><text x="34.5851%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="36.0698%" y="101" width="0.5495%" height="15" fill="rgb(244,45,10)" fg:x="2232" fg:w="34"/><text x="36.3628%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="36.0698%" y="117" width="0.5818%" height="15" fill="rgb(207,125,25)" fg:x="2232" fg:w="36"/><text x="36.3628%" y="127.50"></text></g><g><title>memcpy (51 instructions, 0.82%)</title><rect x="36.6516%" y="117" width="0.8242%" height="15" fill="rgb(210,195,18)" fg:x="2268" fg:w="51"/><text x="36.9446%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="37.4758%" y="101" width="0.5495%" height="15" fill="rgb(249,80,12)" fg:x="2319" fg:w="34"/><text x="37.7687%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="37.4758%" y="117" width="0.5818%" height="15" fill="rgb(221,65,9)" fg:x="2319" fg:w="36"/><text x="37.7687%" y="127.50"></text></g><g><title>leb128_encode (12 instructions, 0.19%)</title><rect x="38.0575%" y="85" width="0.1939%" height="15" fill="rgb(235,49,36)" fg:x="2355" fg:w="12"/><text x="38.3505%" y="95.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.65%)</title><rect x="38.0575%" y="101" width="0.6464%" height="15" fill="rgb(225,32,20)" fg:x="2355" fg:w="40"/><text x="38.3505%" y="111.50"></text></g><g><title>text_size (4 instructions, 0.06%)</title><rect x="38.7039%" y="85" width="0.0646%" height="15" fill="rgb(215,141,46)" fg:x="2395" fg:w="4"/><text x="38.9969%" y="95.50"></text></g><g><title>leb128_encode (12 instructions, 0.19%)</title><rect x="38.7686%" y="85" width="0.1939%" height="15" fill="rgb(250,160,47)" fg:x="2399" fg:w="12"/><text x="39.0616%" y="95.50"></text></g><g><title>memcpy (60 instructions, 0.97%)</title><rect x="38.9625%" y="69" width="0.9696%" height="15" fill="rgb(216,222,40)" fg:x="2411" fg:w="60"/><text x="39.2555%" y="79.50"></text></g><g><title>text_to_buf (84 instructions, 1.36%)</title><rect x="38.9625%" y="85" width="1.3575%" height="15" fill="rgb(234,217,39)" fg:x="2411" fg:w="84"/><text x="39.2555%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (127 instructions, 2.05%)</title><rect x="38.7039%" y="101" width="2.0524%" height="15" fill="rgb(207,178,40)" fg:x="2395" fg:w="127"/><text x="38.9969%" y="111.50"></text></g><g><title>@serialize_go&lt;(Nt)&gt; (188 instructions, 3.04%)</title><rect x="38.0575%" y="117" width="3.0381%" height="15" fill="rgb(221,136,13)" fg:x="2355" fg:w="188"/><text x="38.3505%" y="127.50">@s..</text></g><g><title>@serialize&lt;Nt&gt; (484 instructions, 7.82%)</title><rect x="34.2922%" y="133" width="7.8216%" height="15" fill="rgb(249,199,10)" fg:x="2122" fg:w="484"/><text x="34.5851%" y="143.50">@serializ..</text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="42.1138%" y="117" width="0.0485%" height="15" fill="rgb(249,222,13)" fg:x="2606" fg:w="3"/><text x="42.4067%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (38 instructions, 0.61%)</title><rect x="42.1622%" y="37" width="0.6141%" height="15" fill="rgb(244,185,38)" fg:x="2609" fg:w="38"/><text x="42.4552%" y="47.50"></text></g><g><title>memset (244 instructions, 3.94%)</title><rect x="42.7763%" y="37" width="3.9431%" height="15" fill="rgb(236,202,9)" fg:x="2647" fg:w="244"/><text x="43.0693%" y="47.50">mem..</text></g><g><title>mp_calloc (308 instructions, 4.98%)</title><rect x="42.1622%" y="53" width="4.9774%" height="15" fill="rgb(250,229,37)" fg:x="2609" fg:w="308"/><text x="42.4552%" y="63.50">mp_ca..</text></g><g><title>mp_init (323 instructions, 5.22%)</title><rect x="42.1622%" y="69" width="5.2198%" height="15" fill="rgb(206,174,23)" fg:x="2609" fg:w="323"/><text x="42.4552%" y="79.50">mp_in..</text></g><g><title>mp_set_u64 (480 instructions, 7.76%)</title><rect x="47.3820%" y="53" width="7.7569%" height="15" fill="rgb(211,33,43)" fg:x="2932" fg:w="480"/><text x="47.6750%" y="63.50">mp_set_u64</text></g><g><title>mp_set_i64 (494 instructions, 7.98%)</title><rect x="47.3820%" y="69" width="7.9832%" height="15" fill="rgb(245,58,50)" fg:x="2932" fg:w="494"/><text x="47.6750%" y="79.50">mp_set_i64</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (31 instructions, 0.50%)</title><rect x="55.3652%" y="69" width="0.5010%" height="15" fill="rgb(244,68,36)" fg:x="3426" fg:w="31"/><text x="55.6582%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 14.40%)</title><rect x="42.1622%" y="85" width="14.3988%" height="15" fill="rgb(232,229,15)" fg:x="2609" fg:w="891"/><text x="42.4552%" y="95.50">bigint_of_int64</text></g><g><title>mp_cmp_mag (17 instructions, 0.27%)</title><rect x="56.5611%" y="53" width="0.2747%" height="15" fill="rgb(254,30,23)" fg:x="3500" fg:w="17"/><text x="56.8541%" y="63.50"></text></g><g><title>mp_cmp (31 instructions, 0.50%)</title><rect x="56.5611%" y="69" width="0.5010%" height="15" fill="rgb(235,160,14)" fg:x="3500" fg:w="31"/><text x="56.8541%" y="79.50"></text></g><g><title>bigint_lt (54 instructions, 0.87%)</title><rect x="56.5611%" y="85" width="0.8727%" height="15" fill="rgb(212,155,44)" fg:x="3500" fg:w="54"/><text x="56.8541%" y="95.50"></text></g><g><title>B_lt (963 instructions, 15.56%)</title><rect x="42.1622%" y="101" width="15.5624%" height="15" fill="rgb(226,2,50)" fg:x="2609" fg:w="963"/><text x="42.4552%" y="111.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.19%)</title><rect x="57.7246%" y="101" width="0.1939%" height="15" fill="rgb(234,177,6)" fg:x="3572" fg:w="12"/><text x="58.0176%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 16.14%)</title><rect x="42.1622%" y="117" width="16.1441%" height="15" fill="rgb(217,24,9)" fg:x="2609" fg:w="999"/><text x="42.4552%" y="127.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 16.31%)</title><rect x="42.1138%" y="133" width="16.3058%" height="15" fill="rgb(220,13,46)" fg:x="2606" fg:w="1009"/><text x="42.4067%" y="143.50">@add_cycles</text></g><g><title>@call_succeeded (2 instructions, 0.03%)</title><rect x="58.4195%" y="133" width="0.0323%" height="15" fill="rgb(239,221,27)" fg:x="3615" fg:w="2"/><text x="58.7125%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="58.4518%" y="117" width="0.4202%" height="15" fill="rgb(222,198,25)" fg:x="3617" fg:w="26"/><text x="58.7448%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.66%)</title><rect x="58.4518%" y="133" width="0.6626%" height="15" fill="rgb(211,99,13)" fg:x="3617" fg:w="41"/><text x="58.7448%" y="143.50"></text></g><g><title>from_2_tuple (6 instructions, 0.10%)</title><rect x="59.1144%" y="133" width="0.0970%" height="15" fill="rgb(232,111,31)" fg:x="3658" fg:w="6"/><text x="59.4074%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="59.2114%" y="117" width="0.4202%" height="15" fill="rgb(245,82,37)" fg:x="3664" fg:w="26"/><text x="59.5043%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="59.6315%" y="101" width="0.4202%" height="15" fill="rgb(227,149,46)" fg:x="3690" fg:w="26"/><text x="59.9245%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="60.0517%" y="101" width="0.4202%" height="15" fill="rgb(218,36,50)" fg:x="3716" fg:w="26"/><text x="60.3447%" y="111.50"></text></g><g><title>enqueue (118 instructions, 1.91%)</title><rect x="59.6315%" y="117" width="1.9069%" height="15" fill="rgb(226,80,48)" fg:x="3690" fg:w="118"/><text x="59.9245%" y="127.50"></text></g><g><title>$lambda (167 instructions, 2.70%)</title><rect x="59.2114%" y="133" width="2.6988%" height="15" fill="rgb(238,224,15)" fg:x="3664" fg:w="167"/><text x="59.5043%" y="143.50">$..</text></g><g><title>$k/37 (2,411 instructions, 38.96%)</title><rect x="26.0343%" y="149" width="38.9625%" height="15" fill="rgb(241,136,10)" fg:x="1611" fg:w="2411"/><text x="26.3272%" y="159.50">$k/37</text></g><g><title>$lambda (2,646 instructions, 42.76%)</title><rect x="23.7718%" y="165" width="42.7602%" height="15" fill="rgb(208,32,45)" fg:x="1471" fg:w="2646"/><text x="24.0648%" y="175.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.81%)</title><rect x="66.5320%" y="165" width="0.8080%" height="15" fill="rgb(207,135,9)" fg:x="4117" fg:w="50"/><text x="66.8250%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.23%)</title><rect x="67.3400%" y="165" width="0.2262%" height="15" fill="rgb(206,86,44)" fg:x="4167" fg:w="14"/><text x="67.6330%" y="175.50"></text></g><g><title>put (4,671 instructions, 75.48%)</title><rect x="0.0000%" y="181" width="75.4848%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="4671"/><text x="0.2930%" y="191.50">put</text></g><g><title>trans_state5 (9 instructions, 0.15%)</title><rect x="75.4848%" y="165" width="0.1454%" height="15" fill="rgb(206,64,50)" fg:x="4671" fg:w="9"/><text x="75.7778%" y="175.50"></text></g><g><title>recall_continuation (57 instructions, 0.92%)</title><rect x="75.6303%" y="165" width="0.9211%" height="15" fill="rgb(234,36,40)" fg:x="4680" fg:w="57"/><text x="75.9232%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="76.5514%" y="149" width="0.5495%" height="15" fill="rgb(213,64,8)" fg:x="4737" fg:w="34"/><text x="76.8444%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="76.5514%" y="165" width="0.5818%" height="15" fill="rgb(210,75,36)" fg:x="4737" fg:w="36"/><text x="76.8444%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="77.1332%" y="133" width="0.8242%" height="15" fill="rgb(229,88,21)" fg:x="4773" fg:w="51"/><text x="77.4261%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="77.9573%" y="133" width="0.5495%" height="15" fill="rgb(252,204,47)" fg:x="4824" fg:w="34"/><text x="78.2503%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="78.5068%" y="133" width="0.8242%" height="15" fill="rgb(208,77,27)" fg:x="4858" fg:w="51"/><text x="78.7998%" y="143.50"></text></g><g><title>parse_idl_header (207 instructions, 3.35%)</title><rect x="77.1332%" y="149" width="3.3452%" height="15" fill="rgb(221,76,26)" fg:x="4773" fg:w="207"/><text x="77.4261%" y="159.50">pa..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.15%)</title><rect x="80.4783%" y="149" width="0.1454%" height="15" fill="rgb(225,139,18)" fg:x="4980" fg:w="9"/><text x="80.7713%" y="159.50"></text></g><g><title>memset (4 instructions, 0.06%)</title><rect x="80.6238%" y="133" width="0.0646%" height="15" fill="rgb(230,137,11)" fg:x="4989" fg:w="4"/><text x="80.9168%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.31%)</title><rect x="80.6238%" y="149" width="0.3070%" height="15" fill="rgb(212,28,1)" fg:x="4989" fg:w="19"/><text x="80.9168%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.82%)</title><rect x="80.9308%" y="149" width="0.8242%" height="15" fill="rgb(248,164,17)" fg:x="5008" fg:w="51"/><text x="81.2238%" y="159.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 7.05%)</title><rect x="77.1332%" y="165" width="7.0459%" height="15" fill="rgb(222,171,42)" fg:x="4773" fg:w="436"/><text x="77.4261%" y="175.50">@deseria..</text></g><g><title>from_word128_ptr (17 instructions, 0.27%)</title><rect x="84.1791%" y="101" width="0.2747%" height="15" fill="rgb(243,84,45)" fg:x="5209" fg:w="17"/><text x="84.4720%" y="111.50"></text></g><g><title>cycle_refunded (30 instructions, 0.48%)</title><rect x="84.1791%" y="117" width="0.4848%" height="15" fill="rgb(252,49,23)" fg:x="5209" fg:w="30"/><text x="84.4720%" y="127.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.52%)</title><rect x="84.1791%" y="133" width="0.5171%" height="15" fill="rgb(215,19,7)" fg:x="5209" fg:w="32"/><text x="84.4720%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="84.6962%" y="133" width="0.4202%" height="15" fill="rgb(238,81,41)" fg:x="5241" fg:w="26"/><text x="84.9892%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.42%)</title><rect x="85.1164%" y="117" width="0.4202%" height="15" fill="rgb(210,199,37)" fg:x="5267" fg:w="26"/><text x="85.4093%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.66%)</title><rect x="85.1164%" y="133" width="0.6626%" height="15" fill="rgb(244,192,49)" fg:x="5267" fg:w="41"/><text x="85.4093%" y="143.50"></text></g><g><title>opt_inject (14 instructions, 0.23%)</title><rect x="85.7789%" y="133" width="0.2262%" height="15" fill="rgb(226,211,11)" fg:x="5308" fg:w="14"/><text x="86.0719%" y="143.50"></text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="86.0052%" y="117" width="0.0485%" height="15" fill="rgb(236,162,54)" fg:x="5322" fg:w="3"/><text x="86.2981%" y="127.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.23%)</title><rect x="86.0537%" y="69" width="0.2262%" height="15" fill="rgb(220,229,9)" fg:x="5325" fg:w="14"/><text x="86.3466%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="86.2799%" y="53" width="0.5495%" height="15" fill="rgb(250,87,22)" fg:x="5339" fg:w="34"/><text x="86.5729%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="86.2799%" y="69" width="0.5818%" height="15" fill="rgb(239,43,17)" fg:x="5339" fg:w="36"/><text x="86.5729%" y="79.50"></text></g><g><title>memcpy (63 instructions, 1.02%)</title><rect x="86.8617%" y="69" width="1.0181%" height="15" fill="rgb(231,177,25)" fg:x="5375" fg:w="63"/><text x="87.1546%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.55%)</title><rect x="87.8798%" y="53" width="0.5495%" height="15" fill="rgb(219,179,1)" fg:x="5438" fg:w="34"/><text x="88.1727%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.58%)</title><rect x="87.8798%" y="69" width="0.5818%" height="15" fill="rgb(238,219,53)" fg:x="5438" fg:w="36"/><text x="88.1727%" y="79.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.06%)</title><rect x="88.4615%" y="69" width="0.0646%" height="15" fill="rgb(232,167,36)" fg:x="5474" fg:w="4"/><text x="88.7545%" y="79.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 3.49%)</title><rect x="86.0537%" y="85" width="3.4906%" height="15" fill="rgb(244,19,51)" fg:x="5325" fg:w="216"/><text x="86.3466%" y="95.50">@se..</text></g><g><title>reply_with_data (30 instructions, 0.48%)</title><rect x="89.5443%" y="85" width="0.4848%" height="15" fill="rgb(224,6,22)" fg:x="5541" fg:w="30"/><text x="89.8372%" y="95.50"></text></g><g><title>$lambda (251 instructions, 4.06%)</title><rect x="86.0537%" y="101" width="4.0562%" height="15" fill="rgb(224,145,5)" fg:x="5325" fg:w="251"/><text x="86.3466%" y="111.50">$la..</text></g><g><title>$lambda (258 instructions, 4.17%)</title><rect x="86.0537%" y="117" width="4.1694%" height="15" fill="rgb(234,130,49)" fg:x="5325" fg:w="258"/><text x="86.3466%" y="127.50">$lam..</text></g><g><title>anon-func-349.15 (284 instructions, 4.59%)</title><rect x="86.0052%" y="133" width="4.5895%" height="15" fill="rgb(254,6,2)" fg:x="5322" fg:w="284"/><text x="86.2981%" y="143.50">anon..</text></g><g><title>fulfill (451 instructions, 7.29%)</title><rect x="84.1791%" y="149" width="7.2883%" height="15" fill="rgb(208,96,46)" fg:x="5209" fg:w="451"/><text x="84.4720%" y="159.50">fulfill</text></g><g><title>$lambda (459 instructions, 7.42%)</title><rect x="84.1791%" y="165" width="7.4176%" height="15" fill="rgb(239,3,39)" fg:x="5209" fg:w="459"/><text x="84.4720%" y="175.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.81%)</title><rect x="91.5966%" y="165" width="0.8080%" height="15" fill="rgb(233,210,1)" fg:x="5668" fg:w="50"/><text x="91.8896%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.23%)</title><rect x="92.4047%" y="165" width="0.2262%" height="15" fill="rgb(244,137,37)" fg:x="5718" fg:w="14"/><text x="92.6976%" y="175.50"></text></g><g><title>all (6,188 instructions, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="6188"/><text x="0.2930%" y="207.50"></text></g><g><title>@callback&lt;u&gt; (1,517 instructions, 24.52%)</title><rect x="75.4848%" y="181" width="24.5152%" height="15" fill="rgb(239,18,37)" fg:x="4671" fg:w="1517"/><text x="75.7778%" y="191.50">@callback&lt;u&gt;</text></g></svg></svg>