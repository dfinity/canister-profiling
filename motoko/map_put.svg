<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="757684"><g><title>parse_idl_header (433 instructions, 0.06%)</title><rect x="0.0099%" y="181" width="0.0571%" height="15" fill="rgb(227,0,7)" fg:x="75" fg:w="433"/><text x="0.3029%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (137 instructions, 0.02%)</title><rect x="0.0849%" y="181" width="0.0181%" height="15" fill="rgb(217,0,24)" fg:x="643" fg:w="137"/><text x="0.3778%" y="191.50"></text></g><g><title>utf8_validate (204 instructions, 0.03%)</title><rect x="0.1204%" y="165" width="0.0269%" height="15" fill="rgb(221,193,54)" fg:x="912" fg:w="204"/><text x="0.4133%" y="175.50"></text></g><g><title>memcpy (127 instructions, 0.02%)</title><rect x="0.1567%" y="165" width="0.0168%" height="15" fill="rgb(248,212,6)" fg:x="1187" fg:w="127"/><text x="0.4496%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (547 instructions, 0.07%)</title><rect x="0.1114%" y="181" width="0.0722%" height="15" fill="rgb(208,68,35)" fg:x="844" fg:w="547"/><text x="0.4044%" y="191.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.1951%" y="101" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="1478" fg:w="106"/><text x="0.4880%" y="111.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="0.1870%" y="117" width="0.0268%" height="15" fill="rgb(207,160,47)" fg:x="1417" fg:w="203"/><text x="0.4800%" y="127.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="0.1870%" y="133" width="0.0296%" height="15" fill="rgb(228,23,34)" fg:x="1417" fg:w="224"/><text x="0.4800%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.2166%" y="133" width="0.0124%" height="15" fill="rgb(218,30,26)" fg:x="1641" fg:w="94"/><text x="0.5095%" y="143.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="0.1870%" y="149" width="0.0552%" height="15" fill="rgb(220,122,19)" fg:x="1417" fg:w="418"/><text x="0.4800%" y="159.50"></text></g><g><title>B_eq (497 instructions, 0.07%)</title><rect x="0.1870%" y="165" width="0.0656%" height="15" fill="rgb(250,228,42)" fg:x="1417" fg:w="497"/><text x="0.4800%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.2607%" y="101" width="0.0140%" height="15" fill="rgb(240,193,28)" fg:x="1975" fg:w="106"/><text x="0.5536%" y="111.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="0.2526%" y="117" width="0.0268%" height="15" fill="rgb(216,20,37)" fg:x="1914" fg:w="203"/><text x="0.5456%" y="127.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="0.2526%" y="133" width="0.0296%" height="15" fill="rgb(206,188,39)" fg:x="1914" fg:w="224"/><text x="0.5456%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.2822%" y="133" width="0.0124%" height="15" fill="rgb(217,207,13)" fg:x="2138" fg:w="94"/><text x="0.5751%" y="143.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="0.2526%" y="149" width="0.0552%" height="15" fill="rgb(231,73,38)" fg:x="1914" fg:w="418"/><text x="0.5456%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.3158%" y="117" width="0.0140%" height="15" fill="rgb(225,20,46)" fg:x="2393" fg:w="106"/><text x="0.6088%" y="127.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="0.3078%" y="133" width="0.0268%" height="15" fill="rgb(210,31,41)" fg:x="2332" fg:w="203"/><text x="0.6007%" y="143.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="0.3078%" y="149" width="0.0296%" height="15" fill="rgb(221,200,47)" fg:x="2332" fg:w="224"/><text x="0.6007%" y="159.50"></text></g><g><title>s_mp_add (187 instructions, 0.02%)</title><rect x="0.3373%" y="133" width="0.0247%" height="15" fill="rgb(226,26,5)" fg:x="2556" fg:w="187"/><text x="0.6303%" y="143.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="0.3373%" y="149" width="0.0276%" height="15" fill="rgb(249,33,26)" fg:x="2556" fg:w="209"/><text x="0.6303%" y="159.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="0.3693%" y="133" width="0.0325%" height="15" fill="rgb(235,183,28)" fg:x="2798" fg:w="246"/><text x="0.6623%" y="143.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="0.3693%" y="149" width="0.0380%" height="15" fill="rgb(221,5,38)" fg:x="2798" fg:w="288"/><text x="0.6623%" y="159.50"></text></g><g><title>B_add (1,285 instructions, 0.17%)</title><rect x="0.2526%" y="165" width="0.1696%" height="15" fill="rgb(247,18,42)" fg:x="1914" fg:w="1285"/><text x="0.5456%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.4357%" y="85" width="0.0140%" height="15" fill="rgb(241,131,45)" fg:x="3301" fg:w="106"/><text x="0.7286%" y="95.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="0.4276%" y="101" width="0.0268%" height="15" fill="rgb(249,31,29)" fg:x="3240" fg:w="203"/><text x="0.7206%" y="111.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="0.4276%" y="117" width="0.0296%" height="15" fill="rgb(225,111,53)" fg:x="3240" fg:w="224"/><text x="0.7206%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.4572%" y="117" width="0.0124%" height="15" fill="rgb(238,160,17)" fg:x="3464" fg:w="94"/><text x="0.7502%" y="127.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="0.4276%" y="133" width="0.0552%" height="15" fill="rgb(214,148,48)" fg:x="3240" fg:w="418"/><text x="0.7206%" y="143.50"></text></g><g><title>B_eq (497 instructions, 0.07%)</title><rect x="0.4276%" y="149" width="0.0656%" height="15" fill="rgb(232,36,49)" fg:x="3240" fg:w="497"/><text x="0.7206%" y="159.50"></text></g><g><title>@new_async (745 instructions, 0.10%)</title><rect x="0.4276%" y="165" width="0.0983%" height="15" fill="rgb(209,103,24)" fg:x="3240" fg:w="745"/><text x="0.7206%" y="175.50"></text></g><g><title>alloc_blob (130 instructions, 0.02%)</title><rect x="0.5259%" y="165" width="0.0172%" height="15" fill="rgb(229,88,8)" fg:x="3985" fg:w="130"/><text x="0.8189%" y="175.50"></text></g><g><title>remember_continuation (7,833 instructions, 1.03%)</title><rect x="0.5431%" y="165" width="1.0338%" height="15" fill="rgb(213,181,19)" fg:x="4115" fg:w="7833"/><text x="0.8361%" y="175.50"></text></g><g><title>@serialize&lt;n32&gt; (301 instructions, 0.04%)</title><rect x="1.5769%" y="165" width="0.0397%" height="15" fill="rgb(254,191,54)" fg:x="11948" fg:w="301"/><text x="1.8699%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.6247%" y="85" width="0.0140%" height="15" fill="rgb(241,83,37)" fg:x="12310" fg:w="106"/><text x="1.9177%" y="95.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="1.6166%" y="101" width="0.0268%" height="15" fill="rgb(233,36,39)" fg:x="12249" fg:w="203"/><text x="1.9096%" y="111.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="1.6166%" y="117" width="0.0296%" height="15" fill="rgb(226,3,54)" fg:x="12249" fg:w="224"/><text x="1.9096%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="1.6462%" y="117" width="0.0124%" height="15" fill="rgb(245,192,40)" fg:x="12473" fg:w="94"/><text x="1.9392%" y="127.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="1.6166%" y="133" width="0.0552%" height="15" fill="rgb(238,167,29)" fg:x="12249" fg:w="418"/><text x="1.9096%" y="143.50"></text></g><g><title>B_eq (497 instructions, 0.07%)</title><rect x="1.6166%" y="149" width="0.0656%" height="15" fill="rgb(232,182,51)" fg:x="12249" fg:w="497"/><text x="1.9096%" y="159.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="1.6822%" y="149" width="0.0110%" height="15" fill="rgb(231,60,39)" fg:x="12746" fg:w="83"/><text x="1.9752%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.7012%" y="101" width="0.0140%" height="15" fill="rgb(208,69,12)" fg:x="12890" fg:w="106"/><text x="1.9942%" y="111.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="1.6932%" y="117" width="0.0268%" height="15" fill="rgb(235,93,37)" fg:x="12829" fg:w="203"/><text x="1.9862%" y="127.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="1.6932%" y="133" width="0.0296%" height="15" fill="rgb(213,116,39)" fg:x="12829" fg:w="224"/><text x="1.9862%" y="143.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="1.7227%" y="117" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="13053" fg:w="88"/><text x="2.0157%" y="127.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="1.7344%" y="101" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="13141" fg:w="81"/><text x="2.0273%" y="111.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="1.7344%" y="117" width="0.0132%" height="15" fill="rgb(218,138,4)" fg:x="13141" fg:w="100"/><text x="2.0273%" y="127.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="1.7227%" y="133" width="0.0362%" height="15" fill="rgb(250,191,14)" fg:x="13053" fg:w="274"/><text x="2.0157%" y="143.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="1.6932%" y="149" width="0.0938%" height="15" fill="rgb(239,60,40)" fg:x="12829" fg:w="711"/><text x="1.9862%" y="159.50"></text></g><g><title>@add_cycles (1,920 instructions, 0.25%)</title><rect x="1.6166%" y="165" width="0.2534%" height="15" fill="rgb(206,27,48)" fg:x="12249" fg:w="1920"/><text x="1.9096%" y="175.50"></text></g><g><title>enqueue (96 instructions, 0.01%)</title><rect x="1.8700%" y="165" width="0.0127%" height="15" fill="rgb(225,35,8)" fg:x="14169" fg:w="96"/><text x="2.1630%" y="175.50"></text></g><g><title>$lambda.1 (23,012 instructions, 3.04%)</title><rect x="0.1836%" y="181" width="3.0372%" height="15" fill="rgb(250,213,24)" fg:x="1391" fg:w="23012"/><text x="0.4766%" y="191.50">$l..</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="3.2207%" y="181" width="0.0143%" height="15" fill="rgb(247,123,22)" fg:x="24403" fg:w="108"/><text x="3.5137%" y="191.50"></text></g><g><title>put (26,418 instructions, 3.49%)</title><rect x="0.0000%" y="197" width="3.4867%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="26418"/><text x="0.2930%" y="207.50">put</text></g><g><title>memcmp (238 instructions, 0.03%)</title><rect x="3.4880%" y="181" width="0.0314%" height="15" fill="rgb(231,145,46)" fg:x="26428" fg:w="238"/><text x="3.7810%" y="191.50"></text></g><g><title>parse_idl_header (338 instructions, 0.04%)</title><rect x="3.5280%" y="181" width="0.0446%" height="15" fill="rgb(251,118,11)" fg:x="26731" fg:w="338"/><text x="3.8210%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (102 instructions, 0.01%)</title><rect x="3.6287%" y="149" width="0.0135%" height="15" fill="rgb(217,147,25)" fg:x="27494" fg:w="102"/><text x="3.9217%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.6680%" y="69" width="0.0140%" height="15" fill="rgb(247,81,37)" fg:x="27792" fg:w="106"/><text x="3.9610%" y="79.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="3.6600%" y="85" width="0.0268%" height="15" fill="rgb(209,12,38)" fg:x="27731" fg:w="203"/><text x="3.9529%" y="95.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="3.6600%" y="101" width="0.0296%" height="15" fill="rgb(227,1,9)" fg:x="27731" fg:w="224"/><text x="3.9529%" y="111.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.01%)</title><rect x="3.6895%" y="101" width="0.0148%" height="15" fill="rgb(248,47,43)" fg:x="27955" fg:w="112"/><text x="3.9825%" y="111.50"></text></g><g><title>bigint_of_word64 (424 instructions, 0.06%)</title><rect x="3.6600%" y="117" width="0.0560%" height="15" fill="rgb(221,10,30)" fg:x="27731" fg:w="424"/><text x="3.9529%" y="127.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="3.7159%" y="117" width="0.0110%" height="15" fill="rgb(210,229,1)" fg:x="28155" fg:w="83"/><text x="4.0089%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.7349%" y="69" width="0.0140%" height="15" fill="rgb(222,148,37)" fg:x="28299" fg:w="106"/><text x="4.0279%" y="79.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="3.7269%" y="85" width="0.0268%" height="15" fill="rgb(234,67,33)" fg:x="28238" fg:w="203"/><text x="4.0199%" y="95.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="3.7269%" y="101" width="0.0296%" height="15" fill="rgb(247,98,35)" fg:x="28238" fg:w="224"/><text x="4.0199%" y="111.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="3.7564%" y="85" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="28462" fg:w="88"/><text x="4.0494%" y="95.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="3.7681%" y="69" width="0.0107%" height="15" fill="rgb(213,79,30)" fg:x="28550" fg:w="81"/><text x="4.0610%" y="79.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="3.7681%" y="85" width="0.0132%" height="15" fill="rgb(246,177,23)" fg:x="28550" fg:w="100"/><text x="4.0610%" y="95.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="3.7564%" y="101" width="0.0362%" height="15" fill="rgb(230,62,27)" fg:x="28462" fg:w="274"/><text x="4.0494%" y="111.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="3.7269%" y="117" width="0.0938%" height="15" fill="rgb(216,154,8)" fg:x="28238" fg:w="711"/><text x="4.0199%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.8385%" y="69" width="0.0140%" height="15" fill="rgb(244,35,45)" fg:x="29084" fg:w="106"/><text x="4.1315%" y="79.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="3.8305%" y="85" width="0.0268%" height="15" fill="rgb(251,115,12)" fg:x="29023" fg:w="203"/><text x="4.1235%" y="95.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="3.8305%" y="101" width="0.0296%" height="15" fill="rgb(240,54,50)" fg:x="29023" fg:w="224"/><text x="4.1235%" y="111.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.01%)</title><rect x="3.8601%" y="101" width="0.0148%" height="15" fill="rgb(233,84,52)" fg:x="29247" fg:w="112"/><text x="4.1530%" y="111.50"></text></g><g><title>bigint_of_word64 (424 instructions, 0.06%)</title><rect x="3.8305%" y="117" width="0.0560%" height="15" fill="rgb(207,117,47)" fg:x="29023" fg:w="424"/><text x="4.1235%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.8945%" y="53" width="0.0140%" height="15" fill="rgb(249,43,39)" fg:x="29508" fg:w="106"/><text x="4.1875%" y="63.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="3.8864%" y="69" width="0.0268%" height="15" fill="rgb(209,38,44)" fg:x="29447" fg:w="203"/><text x="4.1794%" y="79.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="3.8864%" y="85" width="0.0296%" height="15" fill="rgb(236,212,23)" fg:x="29447" fg:w="224"/><text x="4.1794%" y="95.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.9160%" y="85" width="0.0124%" height="15" fill="rgb(242,79,21)" fg:x="29671" fg:w="94"/><text x="4.2090%" y="95.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="3.8864%" y="101" width="0.0552%" height="15" fill="rgb(211,96,35)" fg:x="29447" fg:w="418"/><text x="4.1794%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.9497%" y="69" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="29926" fg:w="106"/><text x="4.2426%" y="79.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="3.9416%" y="85" width="0.0268%" height="15" fill="rgb(211,81,21)" fg:x="29865" fg:w="203"/><text x="4.2346%" y="95.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="3.9416%" y="101" width="0.0296%" height="15" fill="rgb(208,190,38)" fg:x="29865" fg:w="224"/><text x="4.2346%" y="111.50"></text></g><g><title>s_mp_add (187 instructions, 0.02%)</title><rect x="3.9712%" y="85" width="0.0247%" height="15" fill="rgb(235,213,38)" fg:x="30089" fg:w="187"/><text x="4.2641%" y="95.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="3.9712%" y="101" width="0.0276%" height="15" fill="rgb(237,122,38)" fg:x="30089" fg:w="209"/><text x="4.2641%" y="111.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="4.0031%" y="85" width="0.0325%" height="15" fill="rgb(244,218,35)" fg:x="30331" fg:w="246"/><text x="4.2961%" y="95.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="4.0031%" y="101" width="0.0380%" height="15" fill="rgb(240,68,47)" fg:x="30331" fg:w="288"/><text x="4.2961%" y="111.50"></text></g><g><title>B_add (1,285 instructions, 0.17%)</title><rect x="3.8864%" y="117" width="0.1696%" height="15" fill="rgb(210,16,53)" fg:x="29447" fg:w="1285"/><text x="4.1794%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="4.0641%" y="37" width="0.0140%" height="15" fill="rgb(235,124,12)" fg:x="30793" fg:w="106"/><text x="4.3571%" y="47.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="4.0560%" y="53" width="0.0268%" height="15" fill="rgb(224,169,11)" fg:x="30732" fg:w="203"/><text x="4.3490%" y="63.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="4.0560%" y="69" width="0.0296%" height="15" fill="rgb(250,166,2)" fg:x="30732" fg:w="224"/><text x="4.3490%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="4.0856%" y="69" width="0.0124%" height="15" fill="rgb(242,216,29)" fg:x="30956" fg:w="94"/><text x="4.3786%" y="79.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="4.0560%" y="85" width="0.0552%" height="15" fill="rgb(230,116,27)" fg:x="30732" fg:w="418"/><text x="4.3490%" y="95.50"></text></g><g><title>B_eq (497 instructions, 0.07%)</title><rect x="4.0560%" y="101" width="0.0656%" height="15" fill="rgb(228,99,48)" fg:x="30732" fg:w="497"/><text x="4.3490%" y="111.50"></text></g><g><title>@new_async (745 instructions, 0.10%)</title><rect x="4.0560%" y="117" width="0.0983%" height="15" fill="rgb(253,11,6)" fg:x="30732" fg:w="745"/><text x="4.3490%" y="127.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="4.1856%" y="117" width="0.0187%" height="15" fill="rgb(247,143,39)" fg:x="31714" fg:w="142"/><text x="4.4786%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="4.2336%" y="37" width="0.0140%" height="15" fill="rgb(236,97,10)" fg:x="32077" fg:w="106"/><text x="4.5265%" y="47.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="4.2255%" y="53" width="0.0268%" height="15" fill="rgb(233,208,19)" fg:x="32016" fg:w="203"/><text x="4.5185%" y="63.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="4.2255%" y="69" width="0.0296%" height="15" fill="rgb(216,164,2)" fg:x="32016" fg:w="224"/><text x="4.5185%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="4.2551%" y="69" width="0.0124%" height="15" fill="rgb(220,129,5)" fg:x="32240" fg:w="94"/><text x="4.5480%" y="79.50"></text></g><g><title>bigint_of_int64 (418 instructions, 0.06%)</title><rect x="4.2255%" y="85" width="0.0552%" height="15" fill="rgb(242,17,10)" fg:x="32016" fg:w="418"/><text x="4.5185%" y="95.50"></text></g><g><title>B_eq (497 instructions, 0.07%)</title><rect x="4.2255%" y="101" width="0.0656%" height="15" fill="rgb(242,107,0)" fg:x="32016" fg:w="497"/><text x="4.5185%" y="111.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="4.2911%" y="101" width="0.0110%" height="15" fill="rgb(251,28,31)" fg:x="32513" fg:w="83"/><text x="4.5841%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="4.3101%" y="53" width="0.0140%" height="15" fill="rgb(233,223,10)" fg:x="32657" fg:w="106"/><text x="4.6031%" y="63.50"></text></g><g><title>mp_calloc (203 instructions, 0.03%)</title><rect x="4.3021%" y="69" width="0.0268%" height="15" fill="rgb(215,21,27)" fg:x="32596" fg:w="203"/><text x="4.5950%" y="79.50"></text></g><g><title>mp_init (224 instructions, 0.03%)</title><rect x="4.3021%" y="85" width="0.0296%" height="15" fill="rgb(232,23,21)" fg:x="32596" fg:w="224"/><text x="4.5950%" y="95.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="4.3316%" y="69" width="0.0116%" height="15" fill="rgb(244,5,23)" fg:x="32820" fg:w="88"/><text x="4.6246%" y="79.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="4.3432%" y="53" width="0.0107%" height="15" fill="rgb(226,81,46)" fg:x="32908" fg:w="81"/><text x="4.6362%" y="63.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="4.3432%" y="69" width="0.0132%" height="15" fill="rgb(247,70,30)" fg:x="32908" fg:w="100"/><text x="4.6362%" y="79.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="4.3316%" y="85" width="0.0362%" height="15" fill="rgb(212,68,19)" fg:x="32820" fg:w="274"/><text x="4.6246%" y="95.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="4.3021%" y="101" width="0.0938%" height="15" fill="rgb(240,187,13)" fg:x="32596" fg:w="711"/><text x="4.5950%" y="111.50"></text></g><g><title>@add_cycles (1,920 instructions, 0.25%)</title><rect x="4.2255%" y="117" width="0.2534%" height="15" fill="rgb(223,113,26)" fg:x="32016" fg:w="1920"/><text x="4.5185%" y="127.50"></text></g><g><title>enqueue (96 instructions, 0.01%)</title><rect x="4.4789%" y="117" width="0.0127%" height="15" fill="rgb(206,192,2)" fg:x="33936" fg:w="96"/><text x="4.7719%" y="127.50"></text></g><g><title>$lambda (16,244 instructions, 2.14%)</title><rect x="3.6600%" y="133" width="2.1439%" height="15" fill="rgb(241,108,4)" fg:x="27731" fg:w="16244"/><text x="3.9529%" y="143.50">$..</text></g><g><title>$lambda.7 (16,309 instructions, 2.15%)</title><rect x="3.6600%" y="149" width="2.1525%" height="15" fill="rgb(247,173,49)" fg:x="27731" fg:w="16309"/><text x="3.9529%" y="159.50">$..</text></g><g><title>$lambda.6 (17,113 instructions, 2.26%)</title><rect x="3.5931%" y="165" width="2.2586%" height="15" fill="rgb(224,114,35)" fg:x="27224" fg:w="17113"/><text x="3.8860%" y="175.50">$..</text></g><g><title>anon_async (17,166 instructions, 2.27%)</title><rect x="3.5931%" y="181" width="2.2656%" height="15" fill="rgb(245,159,27)" fg:x="27224" fg:w="17166"/><text x="3.8860%" y="191.50">a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="5.8586%" y="181" width="0.0143%" height="15" fill="rgb(245,172,44)" fg:x="44390" fg:w="108"/><text x="6.1516%" y="191.50"></text></g><g><title>__motoko_async_helper (22,089 instructions, 2.92%)</title><rect x="3.4867%" y="197" width="2.9153%" height="15" fill="rgb(236,23,11)" fg:x="26418" fg:w="22089"/><text x="3.7796%" y="207.50">__..</text></g><g><title>leb128_decode (228 instructions, 0.03%)</title><rect x="6.4494%" y="165" width="0.0301%" height="15" fill="rgb(205,117,38)" fg:x="48866" fg:w="228"/><text x="6.7424%" y="175.50"></text></g><g><title>parse_idl_header (979 instructions, 0.13%)</title><rect x="6.4208%" y="181" width="0.1292%" height="15" fill="rgb(237,72,25)" fg:x="48649" fg:w="979"/><text x="6.7137%" y="191.50"></text></g><g><title>leb128_decode (228 instructions, 0.03%)</title><rect x="6.5901%" y="181" width="0.0301%" height="15" fill="rgb(244,70,9)" fg:x="49932" fg:w="228"/><text x="6.8831%" y="191.50"></text></g><g><title>memcpy (172 instructions, 0.02%)</title><rect x="6.6462%" y="181" width="0.0227%" height="15" fill="rgb(217,125,39)" fg:x="50357" fg:w="172"/><text x="6.9391%" y="191.50"></text></g><g><title>@new_async (253 instructions, 0.03%)</title><rect x="6.6720%" y="101" width="0.0334%" height="15" fill="rgb(235,36,10)" fg:x="50553" fg:w="253"/><text x="6.9650%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (81 instructions, 0.01%)</title><rect x="6.7545%" y="101" width="0.0107%" height="15" fill="rgb(251,123,47)" fg:x="51178" fg:w="81"/><text x="7.0475%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (411 instructions, 0.05%)</title><rect x="6.7701%" y="85" width="0.0542%" height="15" fill="rgb(221,13,13)" fg:x="51296" fg:w="411"/><text x="7.0631%" y="95.50"></text></g><g><title>alloc_blob (419 instructions, 0.06%)</title><rect x="6.7701%" y="101" width="0.0553%" height="15" fill="rgb(238,131,9)" fg:x="51296" fg:w="419"/><text x="7.0631%" y="111.50"></text></g><g><title>memcpy (210 instructions, 0.03%)</title><rect x="6.8254%" y="101" width="0.0277%" height="15" fill="rgb(211,50,8)" fg:x="51715" fg:w="210"/><text x="7.1184%" y="111.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="6.8639%" y="101" width="0.0177%" height="15" fill="rgb(245,182,24)" fg:x="52007" fg:w="134"/><text x="7.1569%" y="111.50"></text></g><g><title>memcpy (423,150 instructions, 55.85%)</title><rect x="6.8925%" y="85" width="55.8478%" height="15" fill="rgb(242,14,37)" fg:x="52223" fg:w="423150"/><text x="7.1854%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (423,248 instructions, 55.86%)</title><rect x="6.8860%" y="101" width="55.8608%" height="15" fill="rgb(246,228,12)" fg:x="52174" fg:w="423248"/><text x="7.1790%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="62.7632%" y="85" width="0.0177%" height="15" fill="rgb(213,55,15)" fg:x="475547" fg:w="134"/><text x="63.0562%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (148 instructions, 0.02%)</title><rect x="62.7632%" y="101" width="0.0195%" height="15" fill="rgb(209,9,3)" fg:x="475547" fg:w="148"/><text x="63.0562%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (81 instructions, 0.01%)</title><rect x="62.7828%" y="101" width="0.0107%" height="15" fill="rgb(230,59,30)" fg:x="475695" fg:w="81"/><text x="63.0757%" y="111.50"></text></g><g><title>enqueue (96 instructions, 0.01%)</title><rect x="62.8022%" y="85" width="0.0127%" height="15" fill="rgb(209,121,21)" fg:x="475842" fg:w="96"/><text x="63.0951%" y="95.50"></text></g><g><title>$lambda.10 (143 instructions, 0.02%)</title><rect x="62.8022%" y="101" width="0.0189%" height="15" fill="rgb(220,109,13)" fg:x="475842" fg:w="143"/><text x="63.0951%" y="111.50"></text></g><g><title>$k/21 (676,138 instructions, 89.24%)</title><rect x="6.6720%" y="117" width="89.2375%" height="15" fill="rgb(232,18,1)" fg:x="50553" fg:w="676138"/><text x="6.9650%" y="127.50">$k/21</text></g><g><title>$k/22 (676,187 instructions, 89.24%)</title><rect x="6.6698%" y="133" width="89.2439%" height="15" fill="rgb(215,41,42)" fg:x="50536" fg:w="676187"/><text x="6.9628%" y="143.50">$k/22</text></g><g><title>@anon-func-365.15 (676,229 instructions, 89.25%)</title><rect x="6.6697%" y="149" width="89.2495%" height="15" fill="rgb(224,123,36)" fg:x="50535" fg:w="676229"/><text x="6.9626%" y="159.50">@anon-func-365.15</text></g><g><title>fulfill (676,892 instructions, 89.34%)</title><rect x="6.6697%" y="165" width="89.3370%" height="15" fill="rgb(240,125,3)" fg:x="50535" fg:w="676892"/><text x="6.9626%" y="175.50">fulfill</text></g><g><title>$lambda.27 (676,909 instructions, 89.34%)</title><rect x="6.6697%" y="181" width="89.3392%" height="15" fill="rgb(205,98,50)" fg:x="50535" fg:w="676909"/><text x="6.9626%" y="191.50">$lambda.27</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="96.0089%" y="181" width="0.0143%" height="15" fill="rgb(205,185,37)" fg:x="727444" fg:w="108"/><text x="96.3019%" y="191.50"></text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (681,225 instructions, 89.91%)</title><rect x="6.4020%" y="197" width="89.9089%" height="15" fill="rgb(238,207,15)" fg:x="48507" fg:w="681225"/><text x="6.6950%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (243 instructions, 0.03%)</title><rect x="96.3296%" y="165" width="0.0321%" height="15" fill="rgb(213,199,42)" fg:x="729874" fg:w="243"/><text x="96.6226%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (542 instructions, 0.07%)</title><rect x="96.3296%" y="181" width="0.0715%" height="15" fill="rgb(235,201,11)" fg:x="729874" fg:w="542"/><text x="96.6226%" y="191.50"></text></g><g><title>memcpy (104 instructions, 0.01%)</title><rect x="96.4183%" y="69" width="0.0137%" height="15" fill="rgb(207,46,11)" fg:x="730546" fg:w="104"/><text x="96.7113%" y="79.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="96.4406%" y="53" width="0.0177%" height="15" fill="rgb(241,35,35)" fg:x="730715" fg:w="134"/><text x="96.7336%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (148 instructions, 0.02%)</title><rect x="96.4406%" y="69" width="0.0195%" height="15" fill="rgb(243,32,47)" fg:x="730715" fg:w="148"/><text x="96.7336%" y="79.50"></text></g><g><title>$lambda.21 (1,598 instructions, 0.21%)</title><rect x="96.4013%" y="85" width="0.2109%" height="15" fill="rgb(247,202,23)" fg:x="730417" fg:w="1598"/><text x="96.6942%" y="95.50"></text></g><g><title>$k/30 (1,622 instructions, 0.21%)</title><rect x="96.4013%" y="101" width="0.2141%" height="15" fill="rgb(219,102,11)" fg:x="730417" fg:w="1622"/><text x="96.6942%" y="111.50"></text></g><g><title>$k/20 (1,641 instructions, 0.22%)</title><rect x="96.4013%" y="117" width="0.2166%" height="15" fill="rgb(243,110,44)" fg:x="730417" fg:w="1641"/><text x="96.6942%" y="127.50"></text></g><g><title>$lambda.34 (1,657 instructions, 0.22%)</title><rect x="96.4013%" y="133" width="0.2187%" height="15" fill="rgb(222,74,54)" fg:x="730417" fg:w="1657"/><text x="96.6942%" y="143.50"></text></g><g><title>@anon-func-365.15 (1,699 instructions, 0.22%)</title><rect x="96.4011%" y="149" width="0.2242%" height="15" fill="rgb(216,99,12)" fg:x="730416" fg:w="1699"/><text x="96.6941%" y="159.50"></text></g><g><title>fulfill (1,822 instructions, 0.24%)</title><rect x="96.4011%" y="165" width="0.2405%" height="15" fill="rgb(226,22,26)" fg:x="730416" fg:w="1822"/><text x="96.6941%" y="175.50"></text></g><g><title>$lambda.25 (1,839 instructions, 0.24%)</title><rect x="96.4011%" y="181" width="0.2427%" height="15" fill="rgb(217,163,10)" fg:x="730416" fg:w="1839"/><text x="96.6941%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="96.6439%" y="181" width="0.0143%" height="15" fill="rgb(213,25,53)" fg:x="732255" fg:w="108"/><text x="96.9368%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (4,139 instructions, 0.55%)</title><rect x="96.3109%" y="197" width="0.5463%" height="15" fill="rgb(252,105,26)" fg:x="729732" fg:w="4139"/><text x="96.6038%" y="207.50"></text></g><g><title>utf8_validate (140 instructions, 0.02%)</title><rect x="96.9108%" y="165" width="0.0185%" height="15" fill="rgb(220,39,43)" fg:x="734278" fg:w="140"/><text x="97.2038%" y="175.50"></text></g><g><title>utf8_validate (153 instructions, 0.02%)</title><rect x="96.9457%" y="165" width="0.0202%" height="15" fill="rgb(229,68,48)" fg:x="734542" fg:w="153"/><text x="97.2387%" y="175.50"></text></g><g><title>parse_idl_header (3,330 instructions, 0.44%)</title><rect x="96.8759%" y="181" width="0.4395%" height="15" fill="rgb(252,8,32)" fg:x="734013" fg:w="3330"/><text x="97.1688%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.01%)</title><rect x="97.4129%" y="165" width="0.0102%" height="15" fill="rgb(223,20,43)" fg:x="738082" fg:w="77"/><text x="97.7059%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hd08a9b6c14ff7ac3 (364 instructions, 0.05%)</title><rect x="97.5182%" y="149" width="0.0480%" height="15" fill="rgb(229,81,49)" fg:x="738880" fg:w="364"/><text x="97.8112%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::hd08a9b6c14ff7ac3 (1,555 instructions, 0.21%)</title><rect x="97.4231%" y="165" width="0.2052%" height="15" fill="rgb(236,28,36)" fg:x="738159" fg:w="1555"/><text x="97.7160%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.01%)</title><rect x="97.6579%" y="165" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="739938" fg:w="77"/><text x="97.9508%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hd08a9b6c14ff7ac3 (1,250 instructions, 0.16%)</title><rect x="97.6680%" y="165" width="0.1650%" height="15" fill="rgb(249,174,33)" fg:x="740015" fg:w="1250"/><text x="97.9610%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hd08a9b6c14ff7ac3 (4,155 instructions, 0.55%)</title><rect x="97.3424%" y="181" width="0.5484%" height="15" fill="rgb(233,201,37)" fg:x="737548" fg:w="4155"/><text x="97.6354%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="97.9142%" y="181" width="0.0124%" height="15" fill="rgb(221,78,26)" fg:x="741880" fg:w="94"/><text x="98.2071%" y="191.50"></text></g><g><title>@new_async (253 instructions, 0.03%)</title><rect x="97.9267%" y="101" width="0.0334%" height="15" fill="rgb(250,127,30)" fg:x="741975" fg:w="253"/><text x="98.2197%" y="111.50"></text></g><g><title>text_to_buf (94 instructions, 0.01%)</title><rect x="98.0128%" y="85" width="0.0124%" height="15" fill="rgb(230,49,44)" fg:x="742627" fg:w="94"/><text x="98.3057%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (152 instructions, 0.02%)</title><rect x="98.0113%" y="101" width="0.0201%" height="15" fill="rgb(229,67,23)" fg:x="742616" fg:w="152"/><text x="98.3043%" y="111.50"></text></g><g><title>enqueue (96 instructions, 0.01%)</title><rect x="98.0341%" y="85" width="0.0127%" height="15" fill="rgb(249,83,47)" fg:x="742789" fg:w="96"/><text x="98.3271%" y="95.50"></text></g><g><title>$lambda.8 (143 instructions, 0.02%)</title><rect x="98.0341%" y="101" width="0.0189%" height="15" fill="rgb(215,43,3)" fg:x="742789" fg:w="143"/><text x="98.3271%" y="111.50"></text></g><g><title>$k/37 (8,939 instructions, 1.18%)</title><rect x="97.9267%" y="117" width="1.1798%" height="15" fill="rgb(238,154,13)" fg:x="741975" fg:w="8939"/><text x="98.2197%" y="127.50"></text></g><g><title>$k/38 (9,015 instructions, 1.19%)</title><rect x="97.9267%" y="133" width="1.1898%" height="15" fill="rgb(219,56,2)" fg:x="741975" fg:w="9015"/><text x="98.2197%" y="143.50"></text></g><g><title>@anon-func-365.15 (9,057 instructions, 1.20%)</title><rect x="97.9266%" y="149" width="1.1954%" height="15" fill="rgb(233,0,4)" fg:x="741974" fg:w="9057"/><text x="98.2195%" y="159.50"></text></g><g><title>fulfill (9,720 instructions, 1.28%)</title><rect x="97.9266%" y="165" width="1.2829%" height="15" fill="rgb(235,30,7)" fg:x="741974" fg:w="9720"/><text x="98.2195%" y="175.50"></text></g><g><title>$lambda.27 (9,737 instructions, 1.29%)</title><rect x="97.9266%" y="181" width="1.2851%" height="15" fill="rgb(250,79,13)" fg:x="741974" fg:w="9737"/><text x="98.2195%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="99.2117%" y="181" width="0.0143%" height="15" fill="rgb(211,146,34)" fg:x="751711" fg:w="108"/><text x="99.5046%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (20,010 instructions, 2.64%)</title><rect x="96.8571%" y="197" width="2.6409%" height="15" fill="rgb(228,22,38)" fg:x="733871" fg:w="20010"/><text x="97.1501%" y="207.50">@..</text></g><g><title>parse_idl_header (243 instructions, 0.03%)</title><rect x="99.5168%" y="165" width="0.0321%" height="15" fill="rgb(235,168,5)" fg:x="754023" fg:w="243"/><text x="99.8098%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (542 instructions, 0.07%)</title><rect x="99.5168%" y="181" width="0.0715%" height="15" fill="rgb(221,155,16)" fg:x="754023" fg:w="542"/><text x="99.8098%" y="191.50"></text></g><g><title>anon_async.1 (1,305 instructions, 0.17%)</title><rect x="99.5885%" y="117" width="0.1722%" height="15" fill="rgb(215,215,53)" fg:x="754566" fg:w="1305"/><text x="99.8815%" y="127.50"></text></g><g><title>$lambda.34 (1,321 instructions, 0.17%)</title><rect x="99.5885%" y="133" width="0.1743%" height="15" fill="rgb(223,4,10)" fg:x="754566" fg:w="1321"/><text x="99.8815%" y="143.50"></text></g><g><title>@anon-func-365.15 (1,363 instructions, 0.18%)</title><rect x="99.5884%" y="149" width="0.1799%" height="15" fill="rgb(234,103,6)" fg:x="754565" fg:w="1363"/><text x="99.8813%" y="159.50"></text></g><g><title>fulfill (1,486 instructions, 0.20%)</title><rect x="99.5884%" y="165" width="0.1961%" height="15" fill="rgb(227,97,0)" fg:x="754565" fg:w="1486"/><text x="99.8813%" y="175.50"></text></g><g><title>$lambda.25 (1,503 instructions, 0.20%)</title><rect x="99.5884%" y="181" width="0.1984%" height="15" fill="rgb(234,150,53)" fg:x="754565" fg:w="1503"/><text x="99.8813%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="99.7867%" y="181" width="0.0143%" height="15" fill="rgb(228,201,54)" fg:x="756068" fg:w="108"/><text x="100.0797%" y="191.50"></text></g><g><title>all (757,684 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="757684"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (3,803 instructions, 0.50%)</title><rect x="99.4981%" y="197" width="0.5019%" height="15" fill="rgb(237,53,32)" fg:x="753881" fg:w="3803"/><text x="99.7910%" y="207.50"></text></g></svg></svg>