<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="748768"><g><title>parse_idl_header (339 instructions, 0.05%)</title><rect x="0.0051%" y="197" width="0.0453%" height="15" fill="rgb(227,0,7)" fg:x="38" fg:w="339"/><text x="0.2980%" y="207.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 0.01%)</title><rect x="0.0664%" y="197" width="0.0106%" height="15" fill="rgb(217,0,24)" fg:x="497" fg:w="79"/><text x="0.3593%" y="207.50"></text></g><g><title>utf8_validate (177 instructions, 0.02%)</title><rect x="0.0911%" y="181" width="0.0236%" height="15" fill="rgb(221,193,54)" fg:x="682" fg:w="177"/><text x="0.3841%" y="191.50"></text></g><g><title>memcpy (114 instructions, 0.02%)</title><rect x="0.1197%" y="181" width="0.0152%" height="15" fill="rgb(248,212,6)" fg:x="896" fg:w="114"/><text x="0.4126%" y="191.50"></text></g><g><title>@deserialize_go&lt;t&gt; (416 instructions, 0.06%)</title><rect x="0.0849%" y="197" width="0.0556%" height="15" fill="rgb(208,68,35)" fg:x="636" fg:w="416"/><text x="0.3779%" y="207.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="0.1652%" y="133" width="0.0311%" height="15" fill="rgb(232,128,0)" fg:x="1237" fg:w="233"/><text x="0.4582%" y="143.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="0.1607%" y="149" width="0.0389%" height="15" fill="rgb(207,160,47)" fg:x="1203" fg:w="291"/><text x="0.4536%" y="159.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="0.1607%" y="165" width="0.0409%" height="15" fill="rgb(228,23,34)" fg:x="1203" fg:w="306"/><text x="0.4536%" y="175.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.06%)</title><rect x="0.2015%" y="165" width="0.0640%" height="15" fill="rgb(218,30,26)" fg:x="1509" fg:w="479"/><text x="0.4945%" y="175.50"></text></g><g><title>bigint_of_int64 (864 instructions, 0.12%)</title><rect x="0.1607%" y="181" width="0.1154%" height="15" fill="rgb(220,122,19)" fg:x="1203" fg:w="864"/><text x="0.4536%" y="191.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="0.2839%" y="117" width="0.0311%" height="15" fill="rgb(250,228,42)" fg:x="2126" fg:w="233"/><text x="0.5769%" y="127.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="0.2794%" y="133" width="0.0389%" height="15" fill="rgb(240,193,28)" fg:x="2092" fg:w="291"/><text x="0.5724%" y="143.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="0.2794%" y="149" width="0.0409%" height="15" fill="rgb(216,20,37)" fg:x="2092" fg:w="306"/><text x="0.5724%" y="159.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.06%)</title><rect x="0.3203%" y="149" width="0.0640%" height="15" fill="rgb(206,188,39)" fg:x="2398" fg:w="479"/><text x="0.6132%" y="159.50"></text></g><g><title>bigint_of_int64 (864 instructions, 0.12%)</title><rect x="0.2794%" y="165" width="0.1154%" height="15" fill="rgb(217,207,13)" fg:x="2092" fg:w="864"/><text x="0.5724%" y="175.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="0.3993%" y="133" width="0.0311%" height="15" fill="rgb(231,73,38)" fg:x="2990" fg:w="233"/><text x="0.6923%" y="143.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="0.3948%" y="149" width="0.0389%" height="15" fill="rgb(225,20,46)" fg:x="2956" fg:w="291"/><text x="0.6878%" y="159.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="0.3948%" y="165" width="0.0409%" height="15" fill="rgb(210,31,41)" fg:x="2956" fg:w="306"/><text x="0.6878%" y="175.50"></text></g><g><title>s_mp_add (170 instructions, 0.02%)</title><rect x="0.4356%" y="149" width="0.0227%" height="15" fill="rgb(221,200,47)" fg:x="3262" fg:w="170"/><text x="0.7286%" y="159.50"></text></g><g><title>mp_add (186 instructions, 0.02%)</title><rect x="0.4356%" y="165" width="0.0248%" height="15" fill="rgb(226,26,5)" fg:x="3262" fg:w="186"/><text x="0.7286%" y="175.50"></text></g><g><title>mp_count_bits (226 instructions, 0.03%)</title><rect x="0.4645%" y="149" width="0.0302%" height="15" fill="rgb(249,33,26)" fg:x="3478" fg:w="226"/><text x="0.7575%" y="159.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.03%)</title><rect x="0.4645%" y="165" width="0.0346%" height="15" fill="rgb(235,183,28)" fg:x="3478" fg:w="259"/><text x="0.7575%" y="175.50"></text></g><g><title>B_add (1,729 instructions, 0.23%)</title><rect x="0.2794%" y="181" width="0.2309%" height="15" fill="rgb(221,5,38)" fg:x="2092" fg:w="1729"/><text x="0.5724%" y="191.50"></text></g><g><title>@new_async (231 instructions, 0.03%)</title><rect x="0.5174%" y="181" width="0.0309%" height="15" fill="rgb(247,18,42)" fg:x="3874" fg:w="231"/><text x="0.8104%" y="191.50"></text></g><g><title>remember_continuation (3,698 instructions, 0.49%)</title><rect x="0.5776%" y="181" width="0.4939%" height="15" fill="rgb(241,131,45)" fg:x="4325" fg:w="3698"/><text x="0.8706%" y="191.50"></text></g><g><title>@serialize&lt;n32&gt; (195 instructions, 0.03%)</title><rect x="1.0727%" y="181" width="0.0260%" height="15" fill="rgb(249,31,29)" fg:x="8032" fg:w="195"/><text x="1.3657%" y="191.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="1.1120%" y="117" width="0.0311%" height="15" fill="rgb(225,111,53)" fg:x="8326" fg:w="233"/><text x="1.4049%" y="127.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="1.1074%" y="133" width="0.0389%" height="15" fill="rgb(238,160,17)" fg:x="8292" fg:w="291"/><text x="1.4004%" y="143.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="1.1074%" y="149" width="0.0409%" height="15" fill="rgb(214,148,48)" fg:x="8292" fg:w="306"/><text x="1.4004%" y="159.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.1483%" y="133" width="0.0108%" height="15" fill="rgb(232,36,49)" fg:x="8598" fg:w="81"/><text x="1.4413%" y="143.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.1591%" y="117" width="0.0624%" height="15" fill="rgb(209,103,24)" fg:x="8679" fg:w="467"/><text x="1.4521%" y="127.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.1591%" y="133" width="0.0640%" height="15" fill="rgb(229,88,8)" fg:x="8679" fg:w="479"/><text x="1.4521%" y="143.50"></text></g><g><title>mp_div_2d (607 instructions, 0.08%)</title><rect x="1.1483%" y="149" width="0.0811%" height="15" fill="rgb(213,181,19)" fg:x="8598" fg:w="607"/><text x="1.4413%" y="159.50"></text></g><g><title>B_rsh (1,078 instructions, 0.14%)</title><rect x="1.1074%" y="165" width="0.1440%" height="15" fill="rgb(254,191,54)" fg:x="8292" fg:w="1078"/><text x="1.4004%" y="175.50"></text></g><g><title>@add_cycles (1,236 instructions, 0.17%)</title><rect x="1.0987%" y="181" width="0.1651%" height="15" fill="rgb(241,83,37)" fg:x="8227" fg:w="1236"/><text x="1.3917%" y="191.50"></text></g><g><title>enqueue (106 instructions, 0.01%)</title><rect x="1.2688%" y="181" width="0.0142%" height="15" fill="rgb(233,36,39)" fg:x="9500" fg:w="106"/><text x="1.5617%" y="191.50"></text></g><g><title>$lambda.1 (8,860 instructions, 1.18%)</title><rect x="0.1434%" y="197" width="1.1833%" height="15" fill="rgb(226,3,54)" fg:x="1074" fg:w="8860"/><text x="0.4364%" y="207.50"></text></g><g><title>put (10,734 instructions, 1.43%)</title><rect x="0.0000%" y="213" width="1.4336%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="10734"/><text x="0.2930%" y="223.50"></text></g><g><title>memcmp (215 instructions, 0.03%)</title><rect x="1.4426%" y="197" width="0.0287%" height="15" fill="rgb(238,167,29)" fg:x="10802" fg:w="215"/><text x="1.7356%" y="207.50"></text></g><g><title>parse_idl_header (264 instructions, 0.04%)</title><rect x="1.4754%" y="197" width="0.0353%" height="15" fill="rgb(232,182,51)" fg:x="11047" fg:w="264"/><text x="1.7683%" y="207.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="1.6118%" y="69" width="0.0311%" height="15" fill="rgb(231,60,39)" fg:x="12069" fg:w="233"/><text x="1.9048%" y="79.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="1.6073%" y="85" width="0.0389%" height="15" fill="rgb(208,69,12)" fg:x="12035" fg:w="291"/><text x="1.9003%" y="95.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="1.6073%" y="101" width="0.0409%" height="15" fill="rgb(235,93,37)" fg:x="12035" fg:w="306"/><text x="1.9003%" y="111.50"></text></g><g><title>mp_set_u64 (497 instructions, 0.07%)</title><rect x="1.6482%" y="101" width="0.0664%" height="15" fill="rgb(213,116,39)" fg:x="12341" fg:w="497"/><text x="1.9411%" y="111.50"></text></g><g><title>bigint_of_word64 (871 instructions, 0.12%)</title><rect x="1.6073%" y="117" width="0.1163%" height="15" fill="rgb(222,207,29)" fg:x="12035" fg:w="871"/><text x="1.9003%" y="127.50"></text></g><g><title>from_word128_ptr (886 instructions, 0.12%)</title><rect x="1.6073%" y="133" width="0.1183%" height="15" fill="rgb(206,96,30)" fg:x="12035" fg:w="886"/><text x="1.9003%" y="143.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="1.7389%" y="85" width="0.0311%" height="15" fill="rgb(218,138,4)" fg:x="13020" fg:w="233"/><text x="2.0318%" y="95.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="1.7343%" y="101" width="0.0389%" height="15" fill="rgb(250,191,14)" fg:x="12986" fg:w="291"/><text x="2.0273%" y="111.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="1.7343%" y="117" width="0.0409%" height="15" fill="rgb(239,60,40)" fg:x="12986" fg:w="306"/><text x="2.0273%" y="127.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.7752%" y="101" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="13292" fg:w="81"/><text x="2.0682%" y="111.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.7860%" y="85" width="0.0624%" height="15" fill="rgb(225,35,8)" fg:x="13373" fg:w="467"/><text x="2.0790%" y="95.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.7860%" y="101" width="0.0640%" height="15" fill="rgb(250,213,24)" fg:x="13373" fg:w="479"/><text x="2.0790%" y="111.50"></text></g><g><title>mp_div_2d (607 instructions, 0.08%)</title><rect x="1.7752%" y="117" width="0.0811%" height="15" fill="rgb(247,123,22)" fg:x="13292" fg:w="607"/><text x="2.0682%" y="127.50"></text></g><g><title>B_rsh (1,078 instructions, 0.14%)</title><rect x="1.7343%" y="133" width="0.1440%" height="15" fill="rgb(231,138,38)" fg:x="12986" fg:w="1078"/><text x="2.0273%" y="143.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="1.8918%" y="69" width="0.0311%" height="15" fill="rgb(231,145,46)" fg:x="14165" fg:w="233"/><text x="2.1847%" y="79.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="1.8872%" y="85" width="0.0389%" height="15" fill="rgb(251,118,11)" fg:x="14131" fg:w="291"/><text x="2.1802%" y="95.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="1.8872%" y="101" width="0.0409%" height="15" fill="rgb(217,147,25)" fg:x="14131" fg:w="306"/><text x="2.1802%" y="111.50"></text></g><g><title>mp_set_u64 (497 instructions, 0.07%)</title><rect x="1.9281%" y="101" width="0.0664%" height="15" fill="rgb(247,81,37)" fg:x="14437" fg:w="497"/><text x="2.2211%" y="111.50"></text></g><g><title>bigint_of_word64 (871 instructions, 0.12%)</title><rect x="1.8872%" y="117" width="0.1163%" height="15" fill="rgb(209,12,38)" fg:x="14131" fg:w="871"/><text x="2.1802%" y="127.50"></text></g><g><title>from_word128_ptr (886 instructions, 0.12%)</title><rect x="1.8872%" y="133" width="0.1183%" height="15" fill="rgb(227,1,9)" fg:x="14131" fg:w="886"/><text x="2.1802%" y="143.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="2.0101%" y="69" width="0.0311%" height="15" fill="rgb(248,47,43)" fg:x="15051" fg:w="233"/><text x="2.3031%" y="79.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="2.0056%" y="85" width="0.0389%" height="15" fill="rgb(221,10,30)" fg:x="15017" fg:w="291"/><text x="2.2985%" y="95.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="2.0056%" y="101" width="0.0409%" height="15" fill="rgb(210,229,1)" fg:x="15017" fg:w="306"/><text x="2.2985%" y="111.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.06%)</title><rect x="2.0464%" y="101" width="0.0640%" height="15" fill="rgb(222,148,37)" fg:x="15323" fg:w="479"/><text x="2.3394%" y="111.50"></text></g><g><title>bigint_of_int64 (864 instructions, 0.12%)</title><rect x="2.0056%" y="117" width="0.1154%" height="15" fill="rgb(234,67,33)" fg:x="15017" fg:w="864"/><text x="2.2985%" y="127.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="2.1255%" y="85" width="0.0311%" height="15" fill="rgb(247,98,35)" fg:x="15915" fg:w="233"/><text x="2.4185%" y="95.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="2.1210%" y="101" width="0.0389%" height="15" fill="rgb(247,138,52)" fg:x="15881" fg:w="291"/><text x="2.4139%" y="111.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="2.1210%" y="117" width="0.0409%" height="15" fill="rgb(213,79,30)" fg:x="15881" fg:w="306"/><text x="2.4139%" y="127.50"></text></g><g><title>s_mp_add (170 instructions, 0.02%)</title><rect x="2.1618%" y="101" width="0.0227%" height="15" fill="rgb(246,177,23)" fg:x="16187" fg:w="170"/><text x="2.4548%" y="111.50"></text></g><g><title>mp_add (186 instructions, 0.02%)</title><rect x="2.1618%" y="117" width="0.0248%" height="15" fill="rgb(230,62,27)" fg:x="16187" fg:w="186"/><text x="2.4548%" y="127.50"></text></g><g><title>mp_count_bits (226 instructions, 0.03%)</title><rect x="2.1907%" y="101" width="0.0302%" height="15" fill="rgb(216,154,8)" fg:x="16403" fg:w="226"/><text x="2.4836%" y="111.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.03%)</title><rect x="2.1907%" y="117" width="0.0346%" height="15" fill="rgb(244,35,45)" fg:x="16403" fg:w="259"/><text x="2.4836%" y="127.50"></text></g><g><title>B_add (1,729 instructions, 0.23%)</title><rect x="2.0056%" y="133" width="0.2309%" height="15" fill="rgb(251,115,12)" fg:x="15017" fg:w="1729"/><text x="2.2985%" y="143.50"></text></g><g><title>@new_async (231 instructions, 0.03%)</title><rect x="2.2444%" y="133" width="0.0309%" height="15" fill="rgb(240,54,50)" fg:x="16805" fg:w="231"/><text x="2.5373%" y="143.50"></text></g><g><title>memcpy (118 instructions, 0.02%)</title><rect x="2.2950%" y="133" width="0.0158%" height="15" fill="rgb(233,84,52)" fg:x="17184" fg:w="118"/><text x="2.5879%" y="143.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="2.3301%" y="69" width="0.0311%" height="15" fill="rgb(207,117,47)" fg:x="17447" fg:w="233"/><text x="2.6231%" y="79.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="2.3256%" y="85" width="0.0389%" height="15" fill="rgb(249,43,39)" fg:x="17413" fg:w="291"/><text x="2.6185%" y="95.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="2.3256%" y="101" width="0.0409%" height="15" fill="rgb(209,38,44)" fg:x="17413" fg:w="306"/><text x="2.6185%" y="111.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="2.3664%" y="85" width="0.0108%" height="15" fill="rgb(236,212,23)" fg:x="17719" fg:w="81"/><text x="2.6594%" y="95.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="2.3772%" y="69" width="0.0624%" height="15" fill="rgb(242,79,21)" fg:x="17800" fg:w="467"/><text x="2.6702%" y="79.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="2.3772%" y="85" width="0.0640%" height="15" fill="rgb(211,96,35)" fg:x="17800" fg:w="479"/><text x="2.6702%" y="95.50"></text></g><g><title>mp_div_2d (607 instructions, 0.08%)</title><rect x="2.3664%" y="101" width="0.0811%" height="15" fill="rgb(253,215,40)" fg:x="17719" fg:w="607"/><text x="2.6594%" y="111.50"></text></g><g><title>B_rsh (1,078 instructions, 0.14%)</title><rect x="2.3256%" y="117" width="0.1440%" height="15" fill="rgb(211,81,21)" fg:x="17413" fg:w="1078"/><text x="2.6185%" y="127.50"></text></g><g><title>@add_cycles (1,236 instructions, 0.17%)</title><rect x="2.3169%" y="133" width="0.1651%" height="15" fill="rgb(208,190,38)" fg:x="17348" fg:w="1236"/><text x="2.6098%" y="143.50"></text></g><g><title>enqueue (106 instructions, 0.01%)</title><rect x="2.4869%" y="133" width="0.0142%" height="15" fill="rgb(235,213,38)" fg:x="18621" fg:w="106"/><text x="2.7799%" y="143.50"></text></g><g><title>$lambda (7,280 instructions, 0.97%)</title><rect x="1.5897%" y="149" width="0.9723%" height="15" fill="rgb(237,122,38)" fg:x="11903" fg:w="7280"/><text x="1.8826%" y="159.50"></text></g><g><title>$lambda.6 (7,337 instructions, 0.98%)</title><rect x="1.5867%" y="165" width="0.9799%" height="15" fill="rgb(244,218,35)" fg:x="11881" fg:w="7337"/><text x="1.8797%" y="175.50"></text></g><g><title>$lambda.5 (7,916 instructions, 1.06%)</title><rect x="1.5308%" y="181" width="1.0572%" height="15" fill="rgb(240,68,47)" fg:x="11462" fg:w="7916"/><text x="1.8237%" y="191.50"></text></g><g><title>anon_async (7,967 instructions, 1.06%)</title><rect x="1.5278%" y="197" width="1.0640%" height="15" fill="rgb(210,16,53)" fg:x="11440" fg:w="7967"/><text x="1.8208%" y="207.50"></text></g><g><title>__motoko_async_helper (9,488 instructions, 1.27%)</title><rect x="1.4336%" y="213" width="1.2671%" height="15" fill="rgb(235,124,12)" fg:x="10734" fg:w="9488"/><text x="1.7265%" y="223.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.7361%" y="181" width="0.0264%" height="15" fill="rgb(224,169,11)" fg:x="20487" fg:w="198"/><text x="3.0291%" y="191.50"></text></g><g><title>parse_idl_header (808 instructions, 0.11%)</title><rect x="2.7118%" y="197" width="0.1079%" height="15" fill="rgb(250,166,2)" fg:x="20305" fg:w="808"/><text x="3.0048%" y="207.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.8575%" y="197" width="0.0264%" height="15" fill="rgb(242,216,29)" fg:x="21396" fg:w="198"/><text x="3.1505%" y="207.50"></text></g><g><title>memcpy (157 instructions, 0.02%)</title><rect x="2.9021%" y="197" width="0.0210%" height="15" fill="rgb(230,116,27)" fg:x="21730" fg:w="157"/><text x="3.1951%" y="207.50"></text></g><g><title>@new_async (231 instructions, 0.03%)</title><rect x="2.9506%" y="117" width="0.0309%" height="15" fill="rgb(228,99,48)" fg:x="22093" fg:w="231"/><text x="3.2435%" y="127.50"></text></g><g><title>memcpy (130 instructions, 0.02%)</title><rect x="3.0401%" y="117" width="0.0174%" height="15" fill="rgb(253,11,6)" fg:x="22763" fg:w="130"/><text x="3.3330%" y="127.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.01%)</title><rect x="3.0636%" y="117" width="0.0138%" height="15" fill="rgb(247,143,39)" fg:x="22939" fg:w="103"/><text x="3.3565%" y="127.50"></text></g><g><title>memcpy (584,637 instructions, 78.08%)</title><rect x="3.0873%" y="101" width="78.0799%" height="15" fill="rgb(236,97,10)" fg:x="23117" fg:w="584637"/><text x="3.3803%" y="111.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (584,711 instructions, 78.09%)</title><rect x="3.0813%" y="117" width="78.0897%" height="15" fill="rgb(233,208,19)" fg:x="23072" fg:w="584711"/><text x="3.3743%" y="127.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (99 instructions, 0.01%)</title><rect x="81.1859%" y="101" width="0.0132%" height="15" fill="rgb(216,164,2)" fg:x="607894" fg:w="99"/><text x="81.4789%" y="111.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (108 instructions, 0.01%)</title><rect x="81.1859%" y="117" width="0.0144%" height="15" fill="rgb(220,129,5)" fg:x="607894" fg:w="108"/><text x="81.4789%" y="127.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="81.2049%" y="37" width="0.0311%" height="15" fill="rgb(242,17,10)" fg:x="608036" fg:w="233"/><text x="81.4978%" y="47.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="81.2003%" y="53" width="0.0389%" height="15" fill="rgb(242,107,0)" fg:x="608002" fg:w="291"/><text x="81.4933%" y="63.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="81.2003%" y="69" width="0.0409%" height="15" fill="rgb(251,28,31)" fg:x="608002" fg:w="306"/><text x="81.4933%" y="79.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.06%)</title><rect x="81.2412%" y="69" width="0.0640%" height="15" fill="rgb(233,223,10)" fg:x="608308" fg:w="479"/><text x="81.5342%" y="79.50"></text></g><g><title>bigint_of_int64 (864 instructions, 0.12%)</title><rect x="81.2003%" y="85" width="0.1154%" height="15" fill="rgb(215,21,27)" fg:x="608002" fg:w="864"/><text x="81.4933%" y="95.50"></text></g><g><title>B_lt (935 instructions, 0.12%)</title><rect x="81.2003%" y="101" width="0.1249%" height="15" fill="rgb(232,23,21)" fg:x="608002" fg:w="935"/><text x="81.4933%" y="111.50"></text></g><g><title>@add_cycles (967 instructions, 0.13%)</title><rect x="81.2003%" y="117" width="0.1291%" height="15" fill="rgb(244,5,23)" fg:x="608002" fg:w="967"/><text x="81.4933%" y="127.50"></text></g><g><title>enqueue (106 instructions, 0.01%)</title><rect x="81.3373%" y="101" width="0.0142%" height="15" fill="rgb(226,81,46)" fg:x="609028" fg:w="106"/><text x="81.6303%" y="111.50"></text></g><g><title>$lambda.9 (151 instructions, 0.02%)</title><rect x="81.3344%" y="117" width="0.0202%" height="15" fill="rgb(247,70,30)" fg:x="609006" fg:w="151"/><text x="81.6274%" y="127.50"></text></g><g><title>$k/21 (712,387 instructions, 95.14%)</title><rect x="2.9378%" y="133" width="95.1412%" height="15" fill="rgb(212,68,19)" fg:x="21997" fg:w="712387"/><text x="3.2307%" y="143.50">$k/21</text></g><g><title>$k/22 (712,421 instructions, 95.15%)</title><rect x="2.9356%" y="149" width="95.1458%" height="15" fill="rgb(240,187,13)" fg:x="21981" fg:w="712421"/><text x="3.2286%" y="159.50">$k/22</text></g><g><title>anon-func-349.15 (712,443 instructions, 95.15%)</title><rect x="2.9356%" y="165" width="95.1487%" height="15" fill="rgb(223,113,26)" fg:x="21981" fg:w="712443"/><text x="3.2286%" y="175.50">anon-func-349.15</text></g><g><title>fulfill (712,594 instructions, 95.17%)</title><rect x="2.9236%" y="181" width="95.1689%" height="15" fill="rgb(206,192,2)" fg:x="21891" fg:w="712594"/><text x="3.2166%" y="191.50">fulfill</text></g><g><title>$lambda.11 (712,601 instructions, 95.17%)</title><rect x="2.9236%" y="197" width="95.1698%" height="15" fill="rgb(241,108,4)" fg:x="21891" fg:w="712601"/><text x="3.2166%" y="207.50">$lambda.11</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (715,242 instructions, 95.52%)</title><rect x="2.7007%" y="213" width="95.5225%" height="15" fill="rgb(247,173,49)" fg:x="20222" fg:w="715242"/><text x="2.9937%" y="223.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (189 instructions, 0.03%)</title><rect x="98.2343%" y="181" width="0.0252%" height="15" fill="rgb(224,114,35)" fg:x="735547" fg:w="189"/><text x="98.5273%" y="191.50"></text></g><g><title>@deserialize&lt;&gt; (389 instructions, 0.05%)</title><rect x="98.2343%" y="197" width="0.0520%" height="15" fill="rgb(245,159,27)" fg:x="735547" fg:w="389"/><text x="98.5273%" y="207.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="98.3078%" y="85" width="0.0126%" height="15" fill="rgb(245,172,44)" fg:x="736097" fg:w="94"/><text x="98.6007%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.01%)</title><rect x="98.3243%" y="69" width="0.0138%" height="15" fill="rgb(236,23,11)" fg:x="736221" fg:w="103"/><text x="98.6173%" y="79.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.01%)</title><rect x="98.3243%" y="85" width="0.0150%" height="15" fill="rgb(205,117,38)" fg:x="736221" fg:w="112"/><text x="98.6173%" y="95.50"></text></g><g><title>$lambda.30 (439 instructions, 0.06%)</title><rect x="98.2983%" y="101" width="0.0586%" height="15" fill="rgb(237,72,25)" fg:x="736026" fg:w="439"/><text x="98.5912%" y="111.50"></text></g><g><title>$k/30 (453 instructions, 0.06%)</title><rect x="98.2983%" y="117" width="0.0605%" height="15" fill="rgb(244,70,9)" fg:x="736026" fg:w="453"/><text x="98.5912%" y="127.50"></text></g><g><title>$k/20 (462 instructions, 0.06%)</title><rect x="98.2983%" y="133" width="0.0617%" height="15" fill="rgb(217,125,39)" fg:x="736026" fg:w="462"/><text x="98.5912%" y="143.50"></text></g><g><title>$lambda.16 (468 instructions, 0.06%)</title><rect x="98.2983%" y="149" width="0.0625%" height="15" fill="rgb(235,36,10)" fg:x="736026" fg:w="468"/><text x="98.5912%" y="159.50"></text></g><g><title>anon-func-349.15 (490 instructions, 0.07%)</title><rect x="98.2983%" y="165" width="0.0654%" height="15" fill="rgb(251,123,47)" fg:x="736026" fg:w="490"/><text x="98.5912%" y="175.50"></text></g><g><title>fulfill (641 instructions, 0.09%)</title><rect x="98.2863%" y="181" width="0.0856%" height="15" fill="rgb(221,13,13)" fg:x="735936" fg:w="641"/><text x="98.5792%" y="191.50"></text></g><g><title>$lambda.10 (648 instructions, 0.09%)</title><rect x="98.2863%" y="197" width="0.0865%" height="15" fill="rgb(238,131,9)" fg:x="735936" fg:w="648"/><text x="98.5792%" y="207.50"></text></g><g><title>@callback&lt;u&gt; (1,630 instructions, 0.22%)</title><rect x="98.2232%" y="213" width="0.2177%" height="15" fill="rgb(211,50,8)" fg:x="735464" fg:w="1630"/><text x="98.5162%" y="223.50"></text></g><g><title>utf8_validate (121 instructions, 0.02%)</title><rect x="98.4824%" y="181" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="737405" fg:w="121"/><text x="98.7754%" y="191.50"></text></g><g><title>utf8_validate (135 instructions, 0.02%)</title><rect x="98.5128%" y="181" width="0.0180%" height="15" fill="rgb(242,14,37)" fg:x="737632" fg:w="135"/><text x="98.8057%" y="191.50"></text></g><g><title>parse_idl_header (2,813 instructions, 0.38%)</title><rect x="98.4520%" y="197" width="0.3757%" height="15" fill="rgb(246,228,12)" fg:x="737177" fg:w="2813"/><text x="98.7450%" y="207.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (339 instructions, 0.05%)</title><rect x="99.0171%" y="165" width="0.0453%" height="15" fill="rgb(213,55,15)" fg:x="741408" fg:w="339"/><text x="99.3100%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,394 instructions, 0.19%)</title><rect x="98.9266%" y="181" width="0.1862%" height="15" fill="rgb(209,9,3)" fg:x="740731" fg:w="1394"/><text x="99.2196%" y="191.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,106 instructions, 0.15%)</title><rect x="99.1502%" y="181" width="0.1477%" height="15" fill="rgb(230,59,30)" fg:x="742405" fg:w="1106"/><text x="99.4432%" y="191.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (3,709 instructions, 0.50%)</title><rect x="98.8500%" y="197" width="0.4953%" height="15" fill="rgb(209,121,21)" fg:x="740157" fg:w="3709"/><text x="99.1429%" y="207.50"></text></g><g><title>memcpy (83 instructions, 0.01%)</title><rect x="99.3635%" y="197" width="0.0111%" height="15" fill="rgb(220,109,13)" fg:x="744002" fg:w="83"/><text x="99.6565%" y="207.50"></text></g><g><title>@new_async (231 instructions, 0.03%)</title><rect x="99.3958%" y="117" width="0.0309%" height="15" fill="rgb(232,18,1)" fg:x="744244" fg:w="231"/><text x="99.6888%" y="127.50"></text></g><g><title>text_to_buf (78 instructions, 0.01%)</title><rect x="99.4753%" y="101" width="0.0104%" height="15" fill="rgb(215,41,42)" fg:x="744839" fg:w="78"/><text x="99.7682%" y="111.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 0.02%)</title><rect x="99.4741%" y="117" width="0.0152%" height="15" fill="rgb(224,123,36)" fg:x="744830" fg:w="114"/><text x="99.7670%" y="127.50"></text></g><g><title>memset (233 instructions, 0.03%)</title><rect x="99.4938%" y="37" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="744978" fg:w="233"/><text x="99.7868%" y="47.50"></text></g><g><title>mp_calloc (291 instructions, 0.04%)</title><rect x="99.4893%" y="53" width="0.0389%" height="15" fill="rgb(205,98,50)" fg:x="744944" fg:w="291"/><text x="99.7823%" y="63.50"></text></g><g><title>mp_init (306 instructions, 0.04%)</title><rect x="99.4893%" y="69" width="0.0409%" height="15" fill="rgb(205,185,37)" fg:x="744944" fg:w="306"/><text x="99.7823%" y="79.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.06%)</title><rect x="99.5302%" y="69" width="0.0640%" height="15" fill="rgb(238,207,15)" fg:x="745250" fg:w="479"/><text x="99.8231%" y="79.50"></text></g><g><title>bigint_of_int64 (864 instructions, 0.12%)</title><rect x="99.4893%" y="85" width="0.1154%" height="15" fill="rgb(213,199,42)" fg:x="744944" fg:w="864"/><text x="99.7823%" y="95.50"></text></g><g><title>B_lt (935 instructions, 0.12%)</title><rect x="99.4893%" y="101" width="0.1249%" height="15" fill="rgb(235,201,11)" fg:x="744944" fg:w="935"/><text x="99.7823%" y="111.50"></text></g><g><title>@add_cycles (967 instructions, 0.13%)</title><rect x="99.4893%" y="117" width="0.1291%" height="15" fill="rgb(207,46,11)" fg:x="744944" fg:w="967"/><text x="99.7823%" y="127.50"></text></g><g><title>enqueue (106 instructions, 0.01%)</title><rect x="99.6263%" y="101" width="0.0142%" height="15" fill="rgb(241,35,35)" fg:x="745970" fg:w="106"/><text x="99.9193%" y="111.50"></text></g><g><title>$lambda.7 (151 instructions, 0.02%)</title><rect x="99.6234%" y="117" width="0.0202%" height="15" fill="rgb(243,32,47)" fg:x="745948" fg:w="151"/><text x="99.9164%" y="127.50"></text></g><g><title>$k/37 (2,155 instructions, 0.29%)</title><rect x="99.3909%" y="133" width="0.2878%" height="15" fill="rgb(247,202,23)" fg:x="744207" fg:w="2155"/><text x="99.6838%" y="143.50"></text></g><g><title>$k/38 (2,213 instructions, 0.30%)</title><rect x="99.3866%" y="149" width="0.2956%" height="15" fill="rgb(219,102,11)" fg:x="744175" fg:w="2213"/><text x="99.6796%" y="159.50"></text></g><g><title>anon-func-349.15 (2,235 instructions, 0.30%)</title><rect x="99.3866%" y="165" width="0.2985%" height="15" fill="rgb(243,110,44)" fg:x="744175" fg:w="2235"/><text x="99.6796%" y="175.50"></text></g><g><title>fulfill (2,386 instructions, 0.32%)</title><rect x="99.3746%" y="181" width="0.3187%" height="15" fill="rgb(222,74,54)" fg:x="744085" fg:w="2386"/><text x="99.6675%" y="191.50"></text></g><g><title>$lambda.11 (2,393 instructions, 0.32%)</title><rect x="99.3746%" y="197" width="0.3196%" height="15" fill="rgb(216,99,12)" fg:x="744085" fg:w="2393"/><text x="99.6675%" y="207.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (10,294 instructions, 1.37%)</title><rect x="98.4409%" y="213" width="1.3748%" height="15" fill="rgb(226,22,26)" fg:x="737094" fg:w="10294"/><text x="98.7339%" y="223.50"></text></g><g><title>parse_idl_header (189 instructions, 0.03%)</title><rect x="99.8268%" y="181" width="0.0252%" height="15" fill="rgb(217,163,10)" fg:x="747471" fg:w="189"/><text x="100.1198%" y="191.50"></text></g><g><title>@deserialize&lt;&gt; (389 instructions, 0.05%)</title><rect x="99.8268%" y="197" width="0.0520%" height="15" fill="rgb(213,25,53)" fg:x="747471" fg:w="389"/><text x="100.1198%" y="207.50"></text></g><g><title>anon_async.1 (212 instructions, 0.03%)</title><rect x="99.8908%" y="133" width="0.0283%" height="15" fill="rgb(252,105,26)" fg:x="747950" fg:w="212"/><text x="100.1837%" y="143.50"></text></g><g><title>$lambda.16 (218 instructions, 0.03%)</title><rect x="99.8908%" y="149" width="0.0291%" height="15" fill="rgb(220,39,43)" fg:x="747950" fg:w="218"/><text x="100.1837%" y="159.50"></text></g><g><title>anon-func-349.15 (240 instructions, 0.03%)</title><rect x="99.8908%" y="165" width="0.0321%" height="15" fill="rgb(229,68,48)" fg:x="747950" fg:w="240"/><text x="100.1837%" y="175.50"></text></g><g><title>fulfill (391 instructions, 0.05%)</title><rect x="99.8787%" y="181" width="0.0522%" height="15" fill="rgb(252,8,32)" fg:x="747860" fg:w="391"/><text x="100.1717%" y="191.50"></text></g><g><title>$lambda.10 (398 instructions, 0.05%)</title><rect x="99.8787%" y="197" width="0.0532%" height="15" fill="rgb(223,20,43)" fg:x="747860" fg:w="398"/><text x="100.1717%" y="207.50"></text></g><g><title>all (748,768 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="748768"/><text x="0.2930%" y="239.50"></text></g><g><title>@callback&lt;u&gt; (1,380 instructions, 0.18%)</title><rect x="99.8157%" y="213" width="0.1843%" height="15" fill="rgb(236,28,36)" fg:x="747388" fg:w="1380"/><text x="100.1087%" y="223.50"></text></g></svg></svg>