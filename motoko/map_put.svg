<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="816032"><g><title>parse_idl_header (435 instructions, 0.05%)</title><rect x="0.0081%" y="181" width="0.0533%" height="15" fill="rgb(227,0,7)" fg:x="66" fg:w="435"/><text x="0.3011%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (94 instructions, 0.01%)</title><rect x="0.0782%" y="181" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="638" fg:w="94"/><text x="0.3712%" y="191.50"></text></g><g><title>utf8_validate (204 instructions, 0.02%)</title><rect x="0.1037%" y="165" width="0.0250%" height="15" fill="rgb(221,193,54)" fg:x="846" fg:w="204"/><text x="0.3966%" y="175.50"></text></g><g><title>memcpy (127 instructions, 0.02%)</title><rect x="0.1371%" y="165" width="0.0156%" height="15" fill="rgb(248,212,6)" fg:x="1119" fg:w="127"/><text x="0.4301%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (519 instructions, 0.06%)</title><rect x="0.0975%" y="181" width="0.0636%" height="15" fill="rgb(208,68,35)" fg:x="796" fg:w="519"/><text x="0.3905%" y="191.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.1717%" y="101" width="0.0130%" height="15" fill="rgb(232,128,0)" fg:x="1401" fg:w="106"/><text x="0.4647%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="0.1643%" y="117" width="0.0248%" height="15" fill="rgb(207,160,47)" fg:x="1341" fg:w="202"/><text x="0.4573%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.1643%" y="133" width="0.0273%" height="15" fill="rgb(228,23,34)" fg:x="1341" fg:w="223"/><text x="0.4573%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.1917%" y="133" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="1564" fg:w="94"/><text x="0.4846%" y="143.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="0.1643%" y="149" width="0.0511%" height="15" fill="rgb(220,122,19)" fg:x="1341" fg:w="417"/><text x="0.4573%" y="159.50"></text></g><g><title>B_eq (496 instructions, 0.06%)</title><rect x="0.1643%" y="165" width="0.0608%" height="15" fill="rgb(250,228,42)" fg:x="1341" fg:w="496"/><text x="0.4573%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.2325%" y="101" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="1897" fg:w="106"/><text x="0.5254%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="0.2251%" y="117" width="0.0248%" height="15" fill="rgb(216,20,37)" fg:x="1837" fg:w="202"/><text x="0.5181%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.2251%" y="133" width="0.0273%" height="15" fill="rgb(206,188,39)" fg:x="1837" fg:w="223"/><text x="0.5181%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.2524%" y="133" width="0.0115%" height="15" fill="rgb(217,207,13)" fg:x="2060" fg:w="94"/><text x="0.5454%" y="143.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="0.2251%" y="149" width="0.0511%" height="15" fill="rgb(231,73,38)" fg:x="1837" fg:w="417"/><text x="0.5181%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.2836%" y="117" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="2314" fg:w="106"/><text x="0.5765%" y="127.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="0.2762%" y="133" width="0.0248%" height="15" fill="rgb(210,31,41)" fg:x="2254" fg:w="202"/><text x="0.5692%" y="143.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.2762%" y="149" width="0.0273%" height="15" fill="rgb(221,200,47)" fg:x="2254" fg:w="223"/><text x="0.5692%" y="159.50"></text></g><g><title>s_mp_add (187 instructions, 0.02%)</title><rect x="0.3035%" y="133" width="0.0229%" height="15" fill="rgb(226,26,5)" fg:x="2477" fg:w="187"/><text x="0.5965%" y="143.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="0.3035%" y="149" width="0.0256%" height="15" fill="rgb(249,33,26)" fg:x="2477" fg:w="209"/><text x="0.5965%" y="159.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="0.3332%" y="133" width="0.0301%" height="15" fill="rgb(235,183,28)" fg:x="2719" fg:w="246"/><text x="0.6262%" y="143.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="0.3332%" y="149" width="0.0353%" height="15" fill="rgb(221,5,38)" fg:x="2719" fg:w="288"/><text x="0.6262%" y="159.50"></text></g><g><title>B_add (1,284 instructions, 0.16%)</title><rect x="0.2251%" y="165" width="0.1573%" height="15" fill="rgb(247,18,42)" fg:x="1837" fg:w="1284"/><text x="0.5181%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.3948%" y="85" width="0.0130%" height="15" fill="rgb(241,131,45)" fg:x="3222" fg:w="106"/><text x="0.6878%" y="95.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="0.3875%" y="101" width="0.0248%" height="15" fill="rgb(249,31,29)" fg:x="3162" fg:w="202"/><text x="0.6805%" y="111.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.3875%" y="117" width="0.0273%" height="15" fill="rgb(225,111,53)" fg:x="3162" fg:w="223"/><text x="0.6805%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.4148%" y="117" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="3385" fg:w="94"/><text x="0.7078%" y="127.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="0.3875%" y="133" width="0.0511%" height="15" fill="rgb(214,148,48)" fg:x="3162" fg:w="417"/><text x="0.6805%" y="143.50"></text></g><g><title>B_eq (496 instructions, 0.06%)</title><rect x="0.3875%" y="149" width="0.0608%" height="15" fill="rgb(232,36,49)" fg:x="3162" fg:w="496"/><text x="0.6805%" y="159.50"></text></g><g><title>@new_async (685 instructions, 0.08%)</title><rect x="0.3875%" y="165" width="0.0839%" height="15" fill="rgb(209,103,24)" fg:x="3162" fg:w="685"/><text x="0.6805%" y="175.50"></text></g><g><title>remember_continuation (3,993 instructions, 0.49%)</title><rect x="0.4852%" y="165" width="0.4893%" height="15" fill="rgb(229,88,8)" fg:x="3959" fg:w="3993"/><text x="0.7781%" y="175.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.03%)</title><rect x="0.9745%" y="165" width="0.0344%" height="15" fill="rgb(213,181,19)" fg:x="7952" fg:w="281"/><text x="1.2674%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.0163%" y="85" width="0.0130%" height="15" fill="rgb(254,191,54)" fg:x="8293" fg:w="106"/><text x="1.3092%" y="95.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="1.0089%" y="101" width="0.0248%" height="15" fill="rgb(241,83,37)" fg:x="8233" fg:w="202"/><text x="1.3019%" y="111.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="1.0089%" y="117" width="0.0273%" height="15" fill="rgb(233,36,39)" fg:x="8233" fg:w="223"/><text x="1.3019%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="1.0362%" y="117" width="0.0115%" height="15" fill="rgb(226,3,54)" fg:x="8456" fg:w="94"/><text x="1.3292%" y="127.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="1.0089%" y="133" width="0.0511%" height="15" fill="rgb(245,192,40)" fg:x="8233" fg:w="417"/><text x="1.3019%" y="143.50"></text></g><g><title>B_eq (496 instructions, 0.06%)</title><rect x="1.0089%" y="149" width="0.0608%" height="15" fill="rgb(238,167,29)" fg:x="8233" fg:w="496"/><text x="1.3019%" y="159.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="1.0697%" y="149" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="8729" fg:w="83"/><text x="1.3627%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.0872%" y="101" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="8872" fg:w="106"/><text x="1.3802%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="1.0799%" y="117" width="0.0248%" height="15" fill="rgb(208,69,12)" fg:x="8812" fg:w="202"/><text x="1.3728%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="1.0799%" y="133" width="0.0273%" height="15" fill="rgb(235,93,37)" fg:x="8812" fg:w="223"/><text x="1.3728%" y="143.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="1.1072%" y="117" width="0.0108%" height="15" fill="rgb(213,116,39)" fg:x="9035" fg:w="88"/><text x="1.4002%" y="127.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="1.1180%" y="117" width="0.0123%" height="15" fill="rgb(222,207,29)" fg:x="9123" fg:w="100"/><text x="1.4109%" y="127.50"></text></g><g><title>mp_div_2d (274 instructions, 0.03%)</title><rect x="1.1072%" y="133" width="0.0336%" height="15" fill="rgb(206,96,30)" fg:x="9035" fg:w="274"/><text x="1.4002%" y="143.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="1.0799%" y="149" width="0.0871%" height="15" fill="rgb(218,138,4)" fg:x="8812" fg:w="711"/><text x="1.3728%" y="159.50"></text></g><g><title>@add_cycles (1,919 instructions, 0.24%)</title><rect x="1.0089%" y="165" width="0.2352%" height="15" fill="rgb(250,191,14)" fg:x="8233" fg:w="1919"/><text x="1.3019%" y="175.50"></text></g><g><title>enqueue (90 instructions, 0.01%)</title><rect x="1.2441%" y="165" width="0.0110%" height="15" fill="rgb(239,60,40)" fg:x="10152" fg:w="90"/><text x="1.5370%" y="175.50"></text></g><g><title>$lambda.1 (19,051 instructions, 2.33%)</title><rect x="0.1611%" y="181" width="2.3346%" height="15" fill="rgb(206,27,48)" fg:x="1315" fg:w="19051"/><text x="0.4541%" y="191.50">$..</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="2.4957%" y="181" width="0.0132%" height="15" fill="rgb(225,35,8)" fg:x="20366" fg:w="108"/><text x="2.7887%" y="191.50"></text></g><g><title>put (22,386 instructions, 2.74%)</title><rect x="0.0000%" y="197" width="2.7433%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="22386"/><text x="0.2930%" y="207.50">p..</text></g><g><title>memcmp (238 instructions, 0.03%)</title><rect x="2.7445%" y="181" width="0.0292%" height="15" fill="rgb(247,123,22)" fg:x="22396" fg:w="238"/><text x="3.0375%" y="191.50"></text></g><g><title>parse_idl_header (340 instructions, 0.04%)</title><rect x="2.7805%" y="181" width="0.0417%" height="15" fill="rgb(231,138,38)" fg:x="22690" fg:w="340"/><text x="3.0735%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (102 instructions, 0.01%)</title><rect x="2.8699%" y="149" width="0.0125%" height="15" fill="rgb(231,145,46)" fg:x="23419" fg:w="102"/><text x="3.1628%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="2.9052%" y="69" width="0.0130%" height="15" fill="rgb(251,118,11)" fg:x="23707" fg:w="106"/><text x="3.1981%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="2.8978%" y="85" width="0.0248%" height="15" fill="rgb(217,147,25)" fg:x="23647" fg:w="202"/><text x="3.1908%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="2.8978%" y="101" width="0.0273%" height="15" fill="rgb(247,81,37)" fg:x="23647" fg:w="223"/><text x="3.1908%" y="111.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.01%)</title><rect x="2.9251%" y="101" width="0.0137%" height="15" fill="rgb(209,12,38)" fg:x="23870" fg:w="112"/><text x="3.2181%" y="111.50"></text></g><g><title>bigint_of_word64 (423 instructions, 0.05%)</title><rect x="2.8978%" y="117" width="0.0518%" height="15" fill="rgb(227,1,9)" fg:x="23647" fg:w="423"/><text x="3.1908%" y="127.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="2.9496%" y="117" width="0.0102%" height="15" fill="rgb(248,47,43)" fg:x="24070" fg:w="83"/><text x="3.2426%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="2.9672%" y="69" width="0.0130%" height="15" fill="rgb(221,10,30)" fg:x="24213" fg:w="106"/><text x="3.2601%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="2.9598%" y="85" width="0.0248%" height="15" fill="rgb(210,229,1)" fg:x="24153" fg:w="202"/><text x="3.2528%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="2.9598%" y="101" width="0.0273%" height="15" fill="rgb(222,148,37)" fg:x="24153" fg:w="223"/><text x="3.2528%" y="111.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="2.9871%" y="85" width="0.0108%" height="15" fill="rgb(234,67,33)" fg:x="24376" fg:w="88"/><text x="3.2801%" y="95.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="2.9979%" y="85" width="0.0123%" height="15" fill="rgb(247,98,35)" fg:x="24464" fg:w="100"/><text x="3.2909%" y="95.50"></text></g><g><title>mp_div_2d (274 instructions, 0.03%)</title><rect x="2.9871%" y="101" width="0.0336%" height="15" fill="rgb(247,138,52)" fg:x="24376" fg:w="274"/><text x="3.2801%" y="111.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="2.9598%" y="117" width="0.0871%" height="15" fill="rgb(213,79,30)" fg:x="24153" fg:w="711"/><text x="3.2528%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.0634%" y="69" width="0.0130%" height="15" fill="rgb(246,177,23)" fg:x="24998" fg:w="106"/><text x="3.3563%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.0560%" y="85" width="0.0248%" height="15" fill="rgb(230,62,27)" fg:x="24938" fg:w="202"/><text x="3.3490%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.0560%" y="101" width="0.0273%" height="15" fill="rgb(216,154,8)" fg:x="24938" fg:w="223"/><text x="3.3490%" y="111.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.01%)</title><rect x="3.0833%" y="101" width="0.0137%" height="15" fill="rgb(244,35,45)" fg:x="25161" fg:w="112"/><text x="3.3763%" y="111.50"></text></g><g><title>bigint_of_word64 (423 instructions, 0.05%)</title><rect x="3.0560%" y="117" width="0.0518%" height="15" fill="rgb(251,115,12)" fg:x="24938" fg:w="423"/><text x="3.3490%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.1152%" y="53" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="25421" fg:w="106"/><text x="3.4082%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.1078%" y="69" width="0.0248%" height="15" fill="rgb(233,84,52)" fg:x="25361" fg:w="202"/><text x="3.4008%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.1078%" y="85" width="0.0273%" height="15" fill="rgb(207,117,47)" fg:x="25361" fg:w="223"/><text x="3.4008%" y="95.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.1352%" y="85" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="25584" fg:w="94"/><text x="3.4281%" y="95.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="3.1078%" y="101" width="0.0511%" height="15" fill="rgb(209,38,44)" fg:x="25361" fg:w="417"/><text x="3.4008%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.1663%" y="69" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="25838" fg:w="106"/><text x="3.4593%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.1589%" y="85" width="0.0248%" height="15" fill="rgb(242,79,21)" fg:x="25778" fg:w="202"/><text x="3.4519%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.1589%" y="101" width="0.0273%" height="15" fill="rgb(211,96,35)" fg:x="25778" fg:w="223"/><text x="3.4519%" y="111.50"></text></g><g><title>s_mp_add (187 instructions, 0.02%)</title><rect x="3.1863%" y="85" width="0.0229%" height="15" fill="rgb(253,215,40)" fg:x="26001" fg:w="187"/><text x="3.4792%" y="95.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="3.1863%" y="101" width="0.0256%" height="15" fill="rgb(211,81,21)" fg:x="26001" fg:w="209"/><text x="3.4792%" y="111.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="3.2159%" y="85" width="0.0301%" height="15" fill="rgb(208,190,38)" fg:x="26243" fg:w="246"/><text x="3.5089%" y="95.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="3.2159%" y="101" width="0.0353%" height="15" fill="rgb(235,213,38)" fg:x="26243" fg:w="288"/><text x="3.5089%" y="111.50"></text></g><g><title>B_add (1,284 instructions, 0.16%)</title><rect x="3.1078%" y="117" width="0.1573%" height="15" fill="rgb(237,122,38)" fg:x="25361" fg:w="1284"/><text x="3.4008%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.2725%" y="37" width="0.0130%" height="15" fill="rgb(244,218,35)" fg:x="26705" fg:w="106"/><text x="3.5655%" y="47.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.2652%" y="53" width="0.0248%" height="15" fill="rgb(240,68,47)" fg:x="26645" fg:w="202"/><text x="3.5582%" y="63.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.2652%" y="69" width="0.0273%" height="15" fill="rgb(210,16,53)" fg:x="26645" fg:w="223"/><text x="3.5582%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.2925%" y="69" width="0.0115%" height="15" fill="rgb(235,124,12)" fg:x="26868" fg:w="94"/><text x="3.5855%" y="79.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="3.2652%" y="85" width="0.0511%" height="15" fill="rgb(224,169,11)" fg:x="26645" fg:w="417"/><text x="3.5582%" y="95.50"></text></g><g><title>B_eq (496 instructions, 0.06%)</title><rect x="3.2652%" y="101" width="0.0608%" height="15" fill="rgb(250,166,2)" fg:x="26645" fg:w="496"/><text x="3.5582%" y="111.50"></text></g><g><title>@new_async (685 instructions, 0.08%)</title><rect x="3.2652%" y="117" width="0.0839%" height="15" fill="rgb(242,216,29)" fg:x="26645" fg:w="685"/><text x="3.5582%" y="127.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="3.3771%" y="117" width="0.0174%" height="15" fill="rgb(230,116,27)" fg:x="27558" fg:w="142"/><text x="3.6700%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.4203%" y="37" width="0.0130%" height="15" fill="rgb(228,99,48)" fg:x="27911" fg:w="106"/><text x="3.7133%" y="47.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.4130%" y="53" width="0.0248%" height="15" fill="rgb(253,11,6)" fg:x="27851" fg:w="202"/><text x="3.7059%" y="63.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.4130%" y="69" width="0.0273%" height="15" fill="rgb(247,143,39)" fg:x="27851" fg:w="223"/><text x="3.7059%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.4403%" y="69" width="0.0115%" height="15" fill="rgb(236,97,10)" fg:x="28074" fg:w="94"/><text x="3.7333%" y="79.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.05%)</title><rect x="3.4130%" y="85" width="0.0511%" height="15" fill="rgb(233,208,19)" fg:x="27851" fg:w="417"/><text x="3.7059%" y="95.50"></text></g><g><title>B_eq (496 instructions, 0.06%)</title><rect x="3.4130%" y="101" width="0.0608%" height="15" fill="rgb(216,164,2)" fg:x="27851" fg:w="496"/><text x="3.7059%" y="111.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="3.4738%" y="101" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="28347" fg:w="83"/><text x="3.7667%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.4913%" y="53" width="0.0130%" height="15" fill="rgb(242,17,10)" fg:x="28490" fg:w="106"/><text x="3.7843%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.02%)</title><rect x="3.4839%" y="69" width="0.0248%" height="15" fill="rgb(242,107,0)" fg:x="28430" fg:w="202"/><text x="3.7769%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.4839%" y="85" width="0.0273%" height="15" fill="rgb(251,28,31)" fg:x="28430" fg:w="223"/><text x="3.7769%" y="95.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="3.5113%" y="69" width="0.0108%" height="15" fill="rgb(233,223,10)" fg:x="28653" fg:w="88"/><text x="3.8042%" y="79.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="3.5220%" y="69" width="0.0123%" height="15" fill="rgb(215,21,27)" fg:x="28741" fg:w="100"/><text x="3.8150%" y="79.50"></text></g><g><title>mp_div_2d (274 instructions, 0.03%)</title><rect x="3.5113%" y="85" width="0.0336%" height="15" fill="rgb(232,23,21)" fg:x="28653" fg:w="274"/><text x="3.8042%" y="95.50"></text></g><g><title>B_rsh (711 instructions, 0.09%)</title><rect x="3.4839%" y="101" width="0.0871%" height="15" fill="rgb(244,5,23)" fg:x="28430" fg:w="711"/><text x="3.7769%" y="111.50"></text></g><g><title>@add_cycles (1,919 instructions, 0.24%)</title><rect x="3.4130%" y="117" width="0.2352%" height="15" fill="rgb(226,81,46)" fg:x="27851" fg:w="1919"/><text x="3.7059%" y="127.50"></text></g><g><title>enqueue (90 instructions, 0.01%)</title><rect x="3.6481%" y="117" width="0.0110%" height="15" fill="rgb(247,70,30)" fg:x="29770" fg:w="90"/><text x="3.9411%" y="127.50"></text></g><g><title>$lambda (16,141 instructions, 1.98%)</title><rect x="2.8978%" y="133" width="1.9780%" height="15" fill="rgb(212,68,19)" fg:x="23647" fg:w="16141"/><text x="3.1908%" y="143.50"></text></g><g><title>$lambda.6 (16,199 instructions, 1.99%)</title><rect x="2.8978%" y="149" width="1.9851%" height="15" fill="rgb(240,187,13)" fg:x="23647" fg:w="16199"/><text x="3.1908%" y="159.50"></text></g><g><title>$lambda.5 (16,969 instructions, 2.08%)</title><rect x="2.8390%" y="165" width="2.0795%" height="15" fill="rgb(223,113,26)" fg:x="23167" fg:w="16969"/><text x="3.1320%" y="175.50">$..</text></g><g><title>anon_async (17,021 instructions, 2.09%)</title><rect x="2.8390%" y="181" width="2.0858%" height="15" fill="rgb(206,192,2)" fg:x="23167" fg:w="17021"/><text x="3.1320%" y="191.50">a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="4.9248%" y="181" width="0.0132%" height="15" fill="rgb(241,108,4)" fg:x="40188" fg:w="108"/><text x="5.2178%" y="191.50"></text></g><g><title>__motoko_async_helper (21,906 instructions, 2.68%)</title><rect x="2.7433%" y="197" width="2.6845%" height="15" fill="rgb(247,173,49)" fg:x="22386" fg:w="21906"/><text x="3.0362%" y="207.50">_..</text></g><g><title>leb128_decode (214 instructions, 0.03%)</title><rect x="5.4688%" y="165" width="0.0262%" height="15" fill="rgb(224,114,35)" fg:x="44627" fg:w="214"/><text x="5.7617%" y="175.50"></text></g><g><title>parse_idl_header (969 instructions, 0.12%)</title><rect x="5.4418%" y="181" width="0.1187%" height="15" fill="rgb(245,159,27)" fg:x="44407" fg:w="969"/><text x="5.7348%" y="191.50"></text></g><g><title>leb128_decode (214 instructions, 0.03%)</title><rect x="5.5959%" y="181" width="0.0262%" height="15" fill="rgb(245,172,44)" fg:x="45664" fg:w="214"/><text x="5.8888%" y="191.50"></text></g><g><title>memcpy (172 instructions, 0.02%)</title><rect x="5.6429%" y="181" width="0.0211%" height="15" fill="rgb(236,23,11)" fg:x="46048" fg:w="172"/><text x="5.9359%" y="191.50"></text></g><g><title>@new_async (194 instructions, 0.02%)</title><rect x="5.6669%" y="101" width="0.0238%" height="15" fill="rgb(205,117,38)" fg:x="46244" fg:w="194"/><text x="5.9599%" y="111.50"></text></g><g><title>motoko_rts::memory::ic::linear_memory::_$LT$impl$u20$motoko_rts..memory..Memory$u20$for$u20$motoko_rts..memory..ic..IcMemory$GT$::grow_memory::hd88d914dc8216959 (356 instructions, 0.04%)</title><rect x="5.7508%" y="85" width="0.0436%" height="15" fill="rgb(237,72,25)" fg:x="46928" fg:w="356"/><text x="6.0437%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (418 instructions, 0.05%)</title><rect x="5.7508%" y="101" width="0.0512%" height="15" fill="rgb(244,70,9)" fg:x="46928" fg:w="418"/><text x="6.0437%" y="111.50"></text></g><g><title>memcpy (154 instructions, 0.02%)</title><rect x="5.8020%" y="101" width="0.0189%" height="15" fill="rgb(217,125,39)" fg:x="47346" fg:w="154"/><text x="6.0949%" y="111.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="5.8298%" y="101" width="0.0164%" height="15" fill="rgb(235,36,10)" fg:x="47573" fg:w="134"/><text x="6.1228%" y="111.50"></text></g><g><title>memcpy (601,426 instructions, 73.70%)</title><rect x="5.8563%" y="85" width="73.7013%" height="15" fill="rgb(251,123,47)" fg:x="47789" fg:w="601426"/><text x="6.1492%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (601,524 instructions, 73.71%)</title><rect x="5.8503%" y="101" width="73.7133%" height="15" fill="rgb(221,13,13)" fg:x="47740" fg:w="601524"/><text x="6.1432%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (130 instructions, 0.02%)</title><rect x="79.5789%" y="85" width="0.0159%" height="15" fill="rgb(238,131,9)" fg:x="649389" fg:w="130"/><text x="79.8718%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (144 instructions, 0.02%)</title><rect x="79.5789%" y="101" width="0.0176%" height="15" fill="rgb(211,50,8)" fg:x="649389" fg:w="144"/><text x="79.8718%" y="111.50"></text></g><g><title>enqueue (90 instructions, 0.01%)</title><rect x="79.6145%" y="85" width="0.0110%" height="15" fill="rgb(245,182,24)" fg:x="649680" fg:w="90"/><text x="79.9075%" y="95.50"></text></g><g><title>$lambda.9 (136 instructions, 0.02%)</title><rect x="79.6145%" y="101" width="0.0167%" height="15" fill="rgb(242,14,37)" fg:x="649680" fg:w="136"/><text x="79.9075%" y="111.50"></text></g><g><title>$k/21 (739,080 instructions, 90.57%)</title><rect x="5.6669%" y="117" width="90.5700%" height="15" fill="rgb(246,228,12)" fg:x="46244" fg:w="739080"/><text x="5.9599%" y="127.50">$k/21</text></g><g><title>$k/22 (739,129 instructions, 90.58%)</title><rect x="5.6649%" y="133" width="90.5760%" height="15" fill="rgb(213,55,15)" fg:x="46227" fg:w="739129"/><text x="5.9578%" y="143.50">$k/22</text></g><g><title>anon-func-352.15 (739,171 instructions, 90.58%)</title><rect x="5.6647%" y="149" width="90.5811%" height="15" fill="rgb(209,9,3)" fg:x="46226" fg:w="739171"/><text x="5.9577%" y="159.50">anon-func-352.15</text></g><g><title>fulfill (739,833 instructions, 90.66%)</title><rect x="5.6647%" y="165" width="90.6623%" height="15" fill="rgb(230,59,30)" fg:x="46226" fg:w="739833"/><text x="5.9577%" y="175.50">fulfill</text></g><g><title>$lambda.23 (739,850 instructions, 90.66%)</title><rect x="5.6647%" y="181" width="90.6643%" height="15" fill="rgb(209,121,21)" fg:x="46226" fg:w="739850"/><text x="5.9577%" y="191.50">$lambda.23</text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="96.3291%" y="181" width="0.0132%" height="15" fill="rgb(220,109,13)" fg:x="786076" fg:w="108"/><text x="96.6220%" y="191.50"></text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (744,049 instructions, 91.18%)</title><rect x="5.4277%" y="197" width="91.1789%" height="15" fill="rgb(232,18,1)" fg:x="44292" fg:w="744049"/><text x="5.7207%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (245 instructions, 0.03%)</title><rect x="96.6207%" y="165" width="0.0300%" height="15" fill="rgb(215,41,42)" fg:x="788456" fg:w="245"/><text x="96.9137%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 0.06%)</title><rect x="96.6207%" y="181" width="0.0626%" height="15" fill="rgb(224,123,36)" fg:x="788456" fg:w="511"/><text x="96.9137%" y="191.50"></text></g><g><title>memcpy (104 instructions, 0.01%)</title><rect x="96.6982%" y="69" width="0.0127%" height="15" fill="rgb(240,125,3)" fg:x="789088" fg:w="104"/><text x="96.9911%" y="79.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="96.7178%" y="53" width="0.0164%" height="15" fill="rgb(205,98,50)" fg:x="789248" fg:w="134"/><text x="97.0107%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (148 instructions, 0.02%)</title><rect x="96.7178%" y="69" width="0.0181%" height="15" fill="rgb(205,185,37)" fg:x="789248" fg:w="148"/><text x="97.0107%" y="79.50"></text></g><g><title>$lambda.20 (1,578 instructions, 0.19%)</title><rect x="96.6835%" y="85" width="0.1934%" height="15" fill="rgb(238,207,15)" fg:x="788968" fg:w="1578"/><text x="96.9764%" y="95.50"></text></g><g><title>$k/30 (1,602 instructions, 0.20%)</title><rect x="96.6835%" y="101" width="0.1963%" height="15" fill="rgb(213,199,42)" fg:x="788968" fg:w="1602"/><text x="96.9764%" y="111.50"></text></g><g><title>$k/20 (1,621 instructions, 0.20%)</title><rect x="96.6835%" y="117" width="0.1986%" height="15" fill="rgb(235,201,11)" fg:x="788968" fg:w="1621"/><text x="96.9764%" y="127.50"></text></g><g><title>$lambda.28 (1,637 instructions, 0.20%)</title><rect x="96.6835%" y="133" width="0.2006%" height="15" fill="rgb(207,46,11)" fg:x="788968" fg:w="1637"/><text x="96.9764%" y="143.50"></text></g><g><title>anon-func-352.15 (1,679 instructions, 0.21%)</title><rect x="96.6833%" y="149" width="0.2058%" height="15" fill="rgb(241,35,35)" fg:x="788967" fg:w="1679"/><text x="96.9763%" y="159.50"></text></g><g><title>fulfill (1,802 instructions, 0.22%)</title><rect x="96.6833%" y="165" width="0.2208%" height="15" fill="rgb(243,32,47)" fg:x="788967" fg:w="1802"/><text x="96.9763%" y="175.50"></text></g><g><title>$lambda.22 (1,819 instructions, 0.22%)</title><rect x="96.6833%" y="181" width="0.2229%" height="15" fill="rgb(247,202,23)" fg:x="788967" fg:w="1819"/><text x="96.9763%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="96.9062%" y="181" width="0.0132%" height="15" fill="rgb(219,102,11)" fg:x="790786" fg:w="108"/><text x="97.1992%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (4,065 instructions, 0.50%)</title><rect x="96.6066%" y="197" width="0.4981%" height="15" fill="rgb(243,110,44)" fg:x="788341" fg:w="4065"/><text x="96.8996%" y="207.50"></text></g><g><title>utf8_validate (140 instructions, 0.02%)</title><rect x="97.1519%" y="165" width="0.0172%" height="15" fill="rgb(222,74,54)" fg:x="792791" fg:w="140"/><text x="97.4449%" y="175.50"></text></g><g><title>utf8_validate (153 instructions, 0.02%)</title><rect x="97.1845%" y="165" width="0.0187%" height="15" fill="rgb(216,99,12)" fg:x="793057" fg:w="153"/><text x="97.4775%" y="175.50"></text></g><g><title>parse_idl_header (3,356 instructions, 0.41%)</title><rect x="97.1189%" y="181" width="0.4113%" height="15" fill="rgb(226,22,26)" fg:x="792521" fg:w="3356"/><text x="97.4118%" y="191.50"></text></g><g><title>motoko_rts::idl::sub::heb9201048f6eb259 (362 instructions, 0.04%)</title><rect x="97.7182%" y="149" width="0.0444%" height="15" fill="rgb(217,163,10)" fg:x="797412" fg:w="362"/><text x="98.0112%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::heb9201048f6eb259 (1,563 instructions, 0.19%)</title><rect x="97.6289%" y="165" width="0.1915%" height="15" fill="rgb(213,25,53)" fg:x="796683" fg:w="1563"/><text x="97.9219%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::heb9201048f6eb259 (1,260 instructions, 0.15%)</title><rect x="97.8578%" y="165" width="0.1544%" height="15" fill="rgb(252,105,26)" fg:x="798551" fg:w="1260"/><text x="98.1508%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::heb9201048f6eb259 (4,189 instructions, 0.51%)</title><rect x="97.5530%" y="181" width="0.5133%" height="15" fill="rgb(220,39,43)" fg:x="796064" fg:w="4189"/><text x="97.8460%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="98.0872%" y="181" width="0.0115%" height="15" fill="rgb(229,68,48)" fg:x="800423" fg:w="94"/><text x="98.3802%" y="191.50"></text></g><g><title>@new_async (194 instructions, 0.02%)</title><rect x="98.0988%" y="101" width="0.0238%" height="15" fill="rgb(252,8,32)" fg:x="800518" fg:w="194"/><text x="98.3918%" y="111.50"></text></g><g><title>text_to_buf (94 instructions, 0.01%)</title><rect x="98.1693%" y="85" width="0.0115%" height="15" fill="rgb(223,20,43)" fg:x="801093" fg:w="94"/><text x="98.4623%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (152 instructions, 0.02%)</title><rect x="98.1680%" y="101" width="0.0186%" height="15" fill="rgb(229,81,49)" fg:x="801082" fg:w="152"/><text x="98.4609%" y="111.50"></text></g><g><title>enqueue (90 instructions, 0.01%)</title><rect x="98.1892%" y="85" width="0.0110%" height="15" fill="rgb(236,28,36)" fg:x="801255" fg:w="90"/><text x="98.4821%" y="95.50"></text></g><g><title>$lambda.7 (136 instructions, 0.02%)</title><rect x="98.1892%" y="101" width="0.0167%" height="15" fill="rgb(249,185,26)" fg:x="801255" fg:w="136"/><text x="98.4821%" y="111.50"></text></g><g><title>$k/37 (8,835 instructions, 1.08%)</title><rect x="98.0988%" y="117" width="1.0827%" height="15" fill="rgb(249,174,33)" fg:x="800518" fg:w="8835"/><text x="98.3918%" y="127.50"></text></g><g><title>$k/38 (8,911 instructions, 1.09%)</title><rect x="98.0988%" y="133" width="1.0920%" height="15" fill="rgb(233,201,37)" fg:x="800518" fg:w="8911"/><text x="98.3918%" y="143.50"></text></g><g><title>anon-func-352.15 (8,953 instructions, 1.10%)</title><rect x="98.0987%" y="149" width="1.0971%" height="15" fill="rgb(221,78,26)" fg:x="800517" fg:w="8953"/><text x="98.3917%" y="159.50"></text></g><g><title>fulfill (9,615 instructions, 1.18%)</title><rect x="98.0987%" y="165" width="1.1783%" height="15" fill="rgb(250,127,30)" fg:x="800517" fg:w="9615"/><text x="98.3917%" y="175.50"></text></g><g><title>$lambda.23 (9,632 instructions, 1.18%)</title><rect x="98.0987%" y="181" width="1.1803%" height="15" fill="rgb(230,49,44)" fg:x="800517" fg:w="9632"/><text x="98.3917%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="99.2791%" y="181" width="0.0132%" height="15" fill="rgb(229,67,23)" fg:x="810149" fg:w="108"/><text x="99.5720%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (19,897 instructions, 2.44%)</title><rect x="97.1048%" y="197" width="2.4383%" height="15" fill="rgb(249,83,47)" fg:x="792406" fg:w="19897"/><text x="97.3977%" y="207.50">@..</text></g><g><title>parse_idl_header (245 instructions, 0.03%)</title><rect x="99.5571%" y="165" width="0.0300%" height="15" fill="rgb(215,43,3)" fg:x="812418" fg:w="245"/><text x="99.8501%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 0.06%)</title><rect x="99.5571%" y="181" width="0.0626%" height="15" fill="rgb(238,154,13)" fg:x="812418" fg:w="511"/><text x="99.8501%" y="191.50"></text></g><g><title>anon_async.1 (1,285 instructions, 0.16%)</title><rect x="99.6199%" y="117" width="0.1575%" height="15" fill="rgb(219,56,2)" fg:x="812930" fg:w="1285"/><text x="99.9128%" y="127.50"></text></g><g><title>$lambda.28 (1,301 instructions, 0.16%)</title><rect x="99.6199%" y="133" width="0.1594%" height="15" fill="rgb(233,0,4)" fg:x="812930" fg:w="1301"/><text x="99.9128%" y="143.50"></text></g><g><title>anon-func-352.15 (1,343 instructions, 0.16%)</title><rect x="99.6197%" y="149" width="0.1646%" height="15" fill="rgb(235,30,7)" fg:x="812929" fg:w="1343"/><text x="99.9127%" y="159.50"></text></g><g><title>fulfill (1,466 instructions, 0.18%)</title><rect x="99.6197%" y="165" width="0.1796%" height="15" fill="rgb(250,79,13)" fg:x="812929" fg:w="1466"/><text x="99.9127%" y="175.50"></text></g><g><title>$lambda.22 (1,483 instructions, 0.18%)</title><rect x="99.6197%" y="181" width="0.1817%" height="15" fill="rgb(211,146,34)" fg:x="812929" fg:w="1483"/><text x="99.9127%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.01%)</title><rect x="99.8015%" y="181" width="0.0132%" height="15" fill="rgb(228,22,38)" fg:x="814412" fg:w="108"/><text x="100.0944%" y="191.50"></text></g><g><title>all (816,032 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="816032"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (3,729 instructions, 0.46%)</title><rect x="99.5430%" y="197" width="0.4570%" height="15" fill="rgb(221,155,16)" fg:x="812303" fg:w="3729"/><text x="99.8360%" y="207.50"></text></g></svg></svg>