<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="715767"><g><title>parse_idl_header (433 instructions, 0.06%)</title><rect x="0.0092%" y="181" width="0.0605%" height="15" fill="rgb(227,0,7)" fg:x="66" fg:w="433"/><text x="0.3022%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (94 instructions, 0.01%)</title><rect x="0.0889%" y="181" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="636" fg:w="94"/><text x="0.3818%" y="191.50"></text></g><g><title>utf8_validate (204 instructions, 0.03%)</title><rect x="0.1179%" y="165" width="0.0285%" height="15" fill="rgb(221,193,54)" fg:x="844" fg:w="204"/><text x="0.4109%" y="175.50"></text></g><g><title>memcpy (127 instructions, 0.02%)</title><rect x="0.1561%" y="165" width="0.0177%" height="15" fill="rgb(248,212,6)" fg:x="1117" fg:w="127"/><text x="0.4490%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (519 instructions, 0.07%)</title><rect x="0.1109%" y="181" width="0.0725%" height="15" fill="rgb(208,68,35)" fg:x="794" fg:w="519"/><text x="0.4039%" y="191.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.2096%" y="101" width="0.0148%" height="15" fill="rgb(232,128,0)" fg:x="1500" fg:w="106"/><text x="0.5025%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="0.2012%" y="117" width="0.0282%" height="15" fill="rgb(207,160,47)" fg:x="1440" fg:w="202"/><text x="0.4942%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.2012%" y="133" width="0.0312%" height="15" fill="rgb(228,23,34)" fg:x="1440" fg:w="223"/><text x="0.4942%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.2323%" y="133" width="0.0131%" height="15" fill="rgb(218,30,26)" fg:x="1663" fg:w="94"/><text x="0.5253%" y="143.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="0.2012%" y="149" width="0.0583%" height="15" fill="rgb(220,122,19)" fg:x="1440" fg:w="417"/><text x="0.4942%" y="159.50"></text></g><g><title>B_eq (496 instructions, 0.07%)</title><rect x="0.2012%" y="165" width="0.0693%" height="15" fill="rgb(250,228,42)" fg:x="1440" fg:w="496"/><text x="0.4942%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.2789%" y="101" width="0.0148%" height="15" fill="rgb(240,193,28)" fg:x="1996" fg:w="106"/><text x="0.5718%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="0.2705%" y="117" width="0.0282%" height="15" fill="rgb(216,20,37)" fg:x="1936" fg:w="202"/><text x="0.5634%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.2705%" y="133" width="0.0312%" height="15" fill="rgb(206,188,39)" fg:x="1936" fg:w="223"/><text x="0.5634%" y="143.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.3016%" y="133" width="0.0131%" height="15" fill="rgb(217,207,13)" fg:x="2159" fg:w="94"/><text x="0.5946%" y="143.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="0.2705%" y="149" width="0.0583%" height="15" fill="rgb(231,73,38)" fg:x="1936" fg:w="417"/><text x="0.5634%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.3371%" y="117" width="0.0148%" height="15" fill="rgb(225,20,46)" fg:x="2413" fg:w="106"/><text x="0.6301%" y="127.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="0.3287%" y="133" width="0.0282%" height="15" fill="rgb(210,31,41)" fg:x="2353" fg:w="202"/><text x="0.6217%" y="143.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.3287%" y="149" width="0.0312%" height="15" fill="rgb(221,200,47)" fg:x="2353" fg:w="223"/><text x="0.6217%" y="159.50"></text></g><g><title>s_mp_add (187 instructions, 0.03%)</title><rect x="0.3599%" y="133" width="0.0261%" height="15" fill="rgb(226,26,5)" fg:x="2576" fg:w="187"/><text x="0.6529%" y="143.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="0.3599%" y="149" width="0.0292%" height="15" fill="rgb(249,33,26)" fg:x="2576" fg:w="209"/><text x="0.6529%" y="159.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="0.3937%" y="133" width="0.0344%" height="15" fill="rgb(235,183,28)" fg:x="2818" fg:w="246"/><text x="0.6867%" y="143.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="0.3937%" y="149" width="0.0402%" height="15" fill="rgb(221,5,38)" fg:x="2818" fg:w="288"/><text x="0.6867%" y="159.50"></text></g><g><title>B_add (1,284 instructions, 0.18%)</title><rect x="0.2705%" y="165" width="0.1794%" height="15" fill="rgb(247,18,42)" fg:x="1936" fg:w="1284"/><text x="0.5634%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="0.4752%" y="85" width="0.0148%" height="15" fill="rgb(241,131,45)" fg:x="3401" fg:w="106"/><text x="0.7681%" y="95.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="0.4668%" y="101" width="0.0282%" height="15" fill="rgb(249,31,29)" fg:x="3341" fg:w="202"/><text x="0.7597%" y="111.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="0.4668%" y="117" width="0.0312%" height="15" fill="rgb(225,111,53)" fg:x="3341" fg:w="223"/><text x="0.7597%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="0.4979%" y="117" width="0.0131%" height="15" fill="rgb(238,160,17)" fg:x="3564" fg:w="94"/><text x="0.7909%" y="127.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="0.4668%" y="133" width="0.0583%" height="15" fill="rgb(214,148,48)" fg:x="3341" fg:w="417"/><text x="0.7597%" y="143.50"></text></g><g><title>B_eq (496 instructions, 0.07%)</title><rect x="0.4668%" y="149" width="0.0693%" height="15" fill="rgb(232,36,49)" fg:x="3341" fg:w="496"/><text x="0.7597%" y="159.50"></text></g><g><title>@new_async (731 instructions, 0.10%)</title><rect x="0.4584%" y="165" width="0.1021%" height="15" fill="rgb(209,103,24)" fg:x="3281" fg:w="731"/><text x="0.7514%" y="175.50"></text></g><g><title>canister_self (1,089 instructions, 0.15%)</title><rect x="0.5661%" y="165" width="0.1521%" height="15" fill="rgb(229,88,8)" fg:x="4052" fg:w="1089"/><text x="0.8591%" y="175.50"></text></g><g><title>canister_self (1,089 instructions, 0.15%)</title><rect x="0.7233%" y="165" width="0.1521%" height="15" fill="rgb(213,181,19)" fg:x="5177" fg:w="1089"/><text x="1.0162%" y="175.50"></text></g><g><title>remember_continuation (3,993 instructions, 0.56%)</title><rect x="0.8832%" y="165" width="0.5579%" height="15" fill="rgb(254,191,54)" fg:x="6322" fg:w="3993"/><text x="1.1762%" y="175.50"></text></g><g><title>memcpy (72 instructions, 0.01%)</title><rect x="1.4505%" y="149" width="0.0101%" height="15" fill="rgb(241,83,37)" fg:x="10382" fg:w="72"/><text x="1.7434%" y="159.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.04%)</title><rect x="1.4426%" y="165" width="0.0393%" height="15" fill="rgb(233,36,39)" fg:x="10326" fg:w="281"/><text x="1.7356%" y="175.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.4903%" y="85" width="0.0148%" height="15" fill="rgb(226,3,54)" fg:x="10667" fg:w="106"/><text x="1.7833%" y="95.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="1.4819%" y="101" width="0.0282%" height="15" fill="rgb(245,192,40)" fg:x="10607" fg:w="202"/><text x="1.7749%" y="111.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="1.4819%" y="117" width="0.0312%" height="15" fill="rgb(238,167,29)" fg:x="10607" fg:w="223"/><text x="1.7749%" y="127.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="1.5131%" y="117" width="0.0131%" height="15" fill="rgb(232,182,51)" fg:x="10830" fg:w="94"/><text x="1.8060%" y="127.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="1.4819%" y="133" width="0.0583%" height="15" fill="rgb(231,60,39)" fg:x="10607" fg:w="417"/><text x="1.7749%" y="143.50"></text></g><g><title>B_eq (496 instructions, 0.07%)</title><rect x="1.4819%" y="149" width="0.0693%" height="15" fill="rgb(208,69,12)" fg:x="10607" fg:w="496"/><text x="1.7749%" y="159.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="1.5512%" y="149" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="11103" fg:w="83"/><text x="1.8442%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="1.5712%" y="101" width="0.0148%" height="15" fill="rgb(213,116,39)" fg:x="11246" fg:w="106"/><text x="1.8642%" y="111.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="1.5628%" y="117" width="0.0282%" height="15" fill="rgb(222,207,29)" fg:x="11186" fg:w="202"/><text x="1.8558%" y="127.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="1.5628%" y="133" width="0.0312%" height="15" fill="rgb(206,96,30)" fg:x="11186" fg:w="223"/><text x="1.8558%" y="143.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="1.5940%" y="117" width="0.0123%" height="15" fill="rgb(218,138,4)" fg:x="11409" fg:w="88"/><text x="1.8869%" y="127.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="1.6062%" y="101" width="0.0113%" height="15" fill="rgb(250,191,14)" fg:x="11497" fg:w="81"/><text x="1.8992%" y="111.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="1.6062%" y="117" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="11497" fg:w="100"/><text x="1.8992%" y="127.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="1.5940%" y="133" width="0.0383%" height="15" fill="rgb(206,27,48)" fg:x="11409" fg:w="274"/><text x="1.8869%" y="143.50"></text></g><g><title>B_rsh (711 instructions, 0.10%)</title><rect x="1.5628%" y="149" width="0.0993%" height="15" fill="rgb(225,35,8)" fg:x="11186" fg:w="711"/><text x="1.8558%" y="159.50"></text></g><g><title>bigint_to_word64_wrap (74 instructions, 0.01%)</title><rect x="1.6621%" y="149" width="0.0103%" height="15" fill="rgb(250,213,24)" fg:x="11897" fg:w="74"/><text x="1.9551%" y="159.50"></text></g><g><title>@add_cycles (1,919 instructions, 0.27%)</title><rect x="1.4819%" y="165" width="0.2681%" height="15" fill="rgb(247,123,22)" fg:x="10607" fg:w="1919"/><text x="1.7749%" y="175.50"></text></g><g><title>enqueue (104 instructions, 0.01%)</title><rect x="1.7550%" y="165" width="0.0145%" height="15" fill="rgb(231,138,38)" fg:x="12562" fg:w="104"/><text x="2.0480%" y="175.50"></text></g><g><title>$lambda.1 (19,236 instructions, 2.69%)</title><rect x="0.1862%" y="181" width="2.6875%" height="15" fill="rgb(231,145,46)" fg:x="1333" fg:w="19236"/><text x="0.4792%" y="191.50">$..</text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="2.8737%" y="181" width="0.0151%" height="15" fill="rgb(251,118,11)" fg:x="20569" fg:w="108"/><text x="3.1667%" y="191.50"></text></g><g><title>put (22,577 instructions, 3.15%)</title><rect x="0.0000%" y="197" width="3.1542%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="22577"/><text x="0.2930%" y="207.50">put</text></g><g><title>memcmp (238 instructions, 0.03%)</title><rect x="3.1713%" y="181" width="0.0333%" height="15" fill="rgb(247,81,37)" fg:x="22699" fg:w="238"/><text x="3.4643%" y="191.50"></text></g><g><title>parse_idl_header (339 instructions, 0.05%)</title><rect x="3.2124%" y="181" width="0.0474%" height="15" fill="rgb(209,12,38)" fg:x="22993" fg:w="339"/><text x="3.5053%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (102 instructions, 0.01%)</title><rect x="3.3290%" y="149" width="0.0143%" height="15" fill="rgb(227,1,9)" fg:x="23828" fg:w="102"/><text x="3.6220%" y="159.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.3944%" y="53" width="0.0148%" height="15" fill="rgb(248,47,43)" fg:x="24296" fg:w="106"/><text x="3.6874%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.3860%" y="69" width="0.0282%" height="15" fill="rgb(221,10,30)" fg:x="24236" fg:w="202"/><text x="3.6790%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.3860%" y="85" width="0.0312%" height="15" fill="rgb(210,229,1)" fg:x="24236" fg:w="223"/><text x="3.6790%" y="95.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.02%)</title><rect x="3.4172%" y="85" width="0.0156%" height="15" fill="rgb(222,148,37)" fg:x="24459" fg:w="112"/><text x="3.7101%" y="95.50"></text></g><g><title>bigint_of_word64 (423 instructions, 0.06%)</title><rect x="3.3860%" y="101" width="0.0591%" height="15" fill="rgb(234,67,33)" fg:x="24236" fg:w="423"/><text x="3.6790%" y="111.50"></text></g><g><title>from_word128_ptr (445 instructions, 0.06%)</title><rect x="3.3860%" y="117" width="0.0622%" height="15" fill="rgb(247,98,35)" fg:x="24236" fg:w="445"/><text x="3.6790%" y="127.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="3.4482%" y="117" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="24681" fg:w="83"/><text x="3.7412%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.4682%" y="69" width="0.0148%" height="15" fill="rgb(213,79,30)" fg:x="24824" fg:w="106"/><text x="3.7611%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.4598%" y="85" width="0.0282%" height="15" fill="rgb(246,177,23)" fg:x="24764" fg:w="202"/><text x="3.7528%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.4598%" y="101" width="0.0312%" height="15" fill="rgb(230,62,27)" fg:x="24764" fg:w="223"/><text x="3.7528%" y="111.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="3.4909%" y="85" width="0.0123%" height="15" fill="rgb(216,154,8)" fg:x="24987" fg:w="88"/><text x="3.7839%" y="95.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="3.5032%" y="69" width="0.0113%" height="15" fill="rgb(244,35,45)" fg:x="25075" fg:w="81"/><text x="3.7962%" y="79.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="3.5032%" y="85" width="0.0140%" height="15" fill="rgb(251,115,12)" fg:x="25075" fg:w="100"/><text x="3.7962%" y="95.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="3.4909%" y="101" width="0.0383%" height="15" fill="rgb(240,54,50)" fg:x="24987" fg:w="274"/><text x="3.7839%" y="111.50"></text></g><g><title>B_rsh (711 instructions, 0.10%)</title><rect x="3.4598%" y="117" width="0.0993%" height="15" fill="rgb(233,84,52)" fg:x="24764" fg:w="711"/><text x="3.7528%" y="127.50"></text></g><g><title>bigint_to_word64_wrap (74 instructions, 0.01%)</title><rect x="3.5591%" y="117" width="0.0103%" height="15" fill="rgb(207,117,47)" fg:x="25475" fg:w="74"/><text x="3.8521%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.5778%" y="53" width="0.0148%" height="15" fill="rgb(249,43,39)" fg:x="25609" fg:w="106"/><text x="3.8708%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.5695%" y="69" width="0.0282%" height="15" fill="rgb(209,38,44)" fg:x="25549" fg:w="202"/><text x="3.8624%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.5695%" y="85" width="0.0312%" height="15" fill="rgb(236,212,23)" fg:x="25549" fg:w="223"/><text x="3.8624%" y="95.50"></text></g><g><title>mp_set_u64 (112 instructions, 0.02%)</title><rect x="3.6006%" y="85" width="0.0156%" height="15" fill="rgb(242,79,21)" fg:x="25772" fg:w="112"/><text x="3.8936%" y="95.50"></text></g><g><title>bigint_of_word64 (423 instructions, 0.06%)</title><rect x="3.5695%" y="101" width="0.0591%" height="15" fill="rgb(211,96,35)" fg:x="25549" fg:w="423"/><text x="3.8624%" y="111.50"></text></g><g><title>from_word128_ptr (445 instructions, 0.06%)</title><rect x="3.5695%" y="117" width="0.0622%" height="15" fill="rgb(253,215,40)" fg:x="25549" fg:w="445"/><text x="3.8624%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.6429%" y="53" width="0.0148%" height="15" fill="rgb(211,81,21)" fg:x="26075" fg:w="106"/><text x="3.9359%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.6346%" y="69" width="0.0282%" height="15" fill="rgb(208,190,38)" fg:x="26015" fg:w="202"/><text x="3.9275%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.6346%" y="85" width="0.0312%" height="15" fill="rgb(235,213,38)" fg:x="26015" fg:w="223"/><text x="3.9275%" y="95.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.6657%" y="85" width="0.0131%" height="15" fill="rgb(237,122,38)" fg:x="26238" fg:w="94"/><text x="3.9587%" y="95.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="3.6346%" y="101" width="0.0583%" height="15" fill="rgb(244,218,35)" fg:x="26015" fg:w="417"/><text x="3.9275%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.7012%" y="69" width="0.0148%" height="15" fill="rgb(240,68,47)" fg:x="26492" fg:w="106"/><text x="3.9942%" y="79.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.6928%" y="85" width="0.0282%" height="15" fill="rgb(210,16,53)" fg:x="26432" fg:w="202"/><text x="3.9858%" y="95.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.6928%" y="101" width="0.0312%" height="15" fill="rgb(235,124,12)" fg:x="26432" fg:w="223"/><text x="3.9858%" y="111.50"></text></g><g><title>s_mp_add (187 instructions, 0.03%)</title><rect x="3.7240%" y="85" width="0.0261%" height="15" fill="rgb(224,169,11)" fg:x="26655" fg:w="187"/><text x="4.0169%" y="95.50"></text></g><g><title>mp_add (209 instructions, 0.03%)</title><rect x="3.7240%" y="101" width="0.0292%" height="15" fill="rgb(250,166,2)" fg:x="26655" fg:w="209"/><text x="4.0169%" y="111.50"></text></g><g><title>mp_count_bits (246 instructions, 0.03%)</title><rect x="3.7578%" y="85" width="0.0344%" height="15" fill="rgb(242,216,29)" fg:x="26897" fg:w="246"/><text x="4.0508%" y="95.50"></text></g><g><title>bigint_2complement_bits (288 instructions, 0.04%)</title><rect x="3.7578%" y="101" width="0.0402%" height="15" fill="rgb(230,116,27)" fg:x="26897" fg:w="288"/><text x="4.0508%" y="111.50"></text></g><g><title>B_add (1,284 instructions, 0.18%)</title><rect x="3.6346%" y="117" width="0.1794%" height="15" fill="rgb(228,99,48)" fg:x="26015" fg:w="1284"/><text x="3.9275%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="3.8385%" y="37" width="0.0148%" height="15" fill="rgb(253,11,6)" fg:x="27475" fg:w="106"/><text x="4.1315%" y="47.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="3.8302%" y="53" width="0.0282%" height="15" fill="rgb(247,143,39)" fg:x="27415" fg:w="202"/><text x="4.1231%" y="63.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="3.8302%" y="69" width="0.0312%" height="15" fill="rgb(236,97,10)" fg:x="27415" fg:w="223"/><text x="4.1231%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="3.8613%" y="69" width="0.0131%" height="15" fill="rgb(233,208,19)" fg:x="27638" fg:w="94"/><text x="4.1543%" y="79.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="3.8302%" y="85" width="0.0583%" height="15" fill="rgb(216,164,2)" fg:x="27415" fg:w="417"/><text x="4.1231%" y="95.50"></text></g><g><title>B_eq (496 instructions, 0.07%)</title><rect x="3.8302%" y="101" width="0.0693%" height="15" fill="rgb(220,129,5)" fg:x="27415" fg:w="496"/><text x="4.1231%" y="111.50"></text></g><g><title>@new_async (731 instructions, 0.10%)</title><rect x="3.8218%" y="117" width="0.1021%" height="15" fill="rgb(242,17,10)" fg:x="27355" fg:w="731"/><text x="4.1147%" y="127.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="3.9623%" y="117" width="0.0198%" height="15" fill="rgb(242,107,0)" fg:x="28361" fg:w="142"/><text x="4.2553%" y="127.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="4.0126%" y="37" width="0.0148%" height="15" fill="rgb(251,28,31)" fg:x="28721" fg:w="106"/><text x="4.3056%" y="47.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="4.0042%" y="53" width="0.0282%" height="15" fill="rgb(233,223,10)" fg:x="28661" fg:w="202"/><text x="4.2972%" y="63.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="4.0042%" y="69" width="0.0312%" height="15" fill="rgb(215,21,27)" fg:x="28661" fg:w="223"/><text x="4.2972%" y="79.50"></text></g><g><title>mp_set_u64 (94 instructions, 0.01%)</title><rect x="4.0354%" y="69" width="0.0131%" height="15" fill="rgb(232,23,21)" fg:x="28884" fg:w="94"/><text x="4.3284%" y="79.50"></text></g><g><title>bigint_of_int64 (417 instructions, 0.06%)</title><rect x="4.0042%" y="85" width="0.0583%" height="15" fill="rgb(244,5,23)" fg:x="28661" fg:w="417"/><text x="4.2972%" y="95.50"></text></g><g><title>B_eq (496 instructions, 0.07%)</title><rect x="4.0042%" y="101" width="0.0693%" height="15" fill="rgb(226,81,46)" fg:x="28661" fg:w="496"/><text x="4.2972%" y="111.50"></text></g><g><title>B_lt (83 instructions, 0.01%)</title><rect x="4.0735%" y="101" width="0.0116%" height="15" fill="rgb(247,70,30)" fg:x="29157" fg:w="83"/><text x="4.3665%" y="111.50"></text></g><g><title>memset (106 instructions, 0.01%)</title><rect x="4.0935%" y="53" width="0.0148%" height="15" fill="rgb(212,68,19)" fg:x="29300" fg:w="106"/><text x="4.3865%" y="63.50"></text></g><g><title>mp_calloc (202 instructions, 0.03%)</title><rect x="4.0851%" y="69" width="0.0282%" height="15" fill="rgb(240,187,13)" fg:x="29240" fg:w="202"/><text x="4.3781%" y="79.50"></text></g><g><title>mp_init (223 instructions, 0.03%)</title><rect x="4.0851%" y="85" width="0.0312%" height="15" fill="rgb(223,113,26)" fg:x="29240" fg:w="223"/><text x="4.3781%" y="95.50"></text></g><g><title>mp_copy (88 instructions, 0.01%)</title><rect x="4.1163%" y="69" width="0.0123%" height="15" fill="rgb(206,192,2)" fg:x="29463" fg:w="88"/><text x="4.4093%" y="79.50"></text></g><g><title>mp_zero (81 instructions, 0.01%)</title><rect x="4.1286%" y="53" width="0.0113%" height="15" fill="rgb(241,108,4)" fg:x="29551" fg:w="81"/><text x="4.4215%" y="63.50"></text></g><g><title>mp_rshd (100 instructions, 0.01%)</title><rect x="4.1286%" y="69" width="0.0140%" height="15" fill="rgb(247,173,49)" fg:x="29551" fg:w="100"/><text x="4.4215%" y="79.50"></text></g><g><title>mp_div_2d (274 instructions, 0.04%)</title><rect x="4.1163%" y="85" width="0.0383%" height="15" fill="rgb(224,114,35)" fg:x="29463" fg:w="274"/><text x="4.4093%" y="95.50"></text></g><g><title>B_rsh (711 instructions, 0.10%)</title><rect x="4.0851%" y="101" width="0.0993%" height="15" fill="rgb(245,159,27)" fg:x="29240" fg:w="711"/><text x="4.3781%" y="111.50"></text></g><g><title>bigint_to_word64_wrap (74 instructions, 0.01%)</title><rect x="4.1845%" y="101" width="0.0103%" height="15" fill="rgb(245,172,44)" fg:x="29951" fg:w="74"/><text x="4.4774%" y="111.50"></text></g><g><title>@add_cycles (1,919 instructions, 0.27%)</title><rect x="4.0042%" y="117" width="0.2681%" height="15" fill="rgb(236,23,11)" fg:x="28661" fg:w="1919"/><text x="4.2972%" y="127.50"></text></g><g><title>enqueue (104 instructions, 0.01%)</title><rect x="4.2774%" y="117" width="0.0145%" height="15" fill="rgb(205,117,38)" fg:x="30616" fg:w="104"/><text x="4.5703%" y="127.50"></text></g><g><title>$lambda (16,344 instructions, 2.28%)</title><rect x="3.3665%" y="133" width="2.2834%" height="15" fill="rgb(237,72,25)" fg:x="24096" fg:w="16344"/><text x="3.6594%" y="143.50">$..</text></g><g><title>$lambda.6 (16,409 instructions, 2.29%)</title><rect x="3.3637%" y="149" width="2.2925%" height="15" fill="rgb(244,70,9)" fg:x="24076" fg:w="16409"/><text x="3.6566%" y="159.50">$..</text></g><g><title>$lambda.5 (17,216 instructions, 2.41%)</title><rect x="3.2832%" y="165" width="2.4053%" height="15" fill="rgb(217,125,39)" fg:x="23500" fg:w="17216"/><text x="3.5762%" y="175.50">$..</text></g><g><title>anon_async (17,275 instructions, 2.41%)</title><rect x="3.2804%" y="181" width="2.4135%" height="15" fill="rgb(235,36,10)" fg:x="23480" fg:w="17275"/><text x="3.5734%" y="191.50">a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="5.6939%" y="181" width="0.0151%" height="15" fill="rgb(251,123,47)" fg:x="40755" fg:w="108"/><text x="5.9869%" y="191.50"></text></g><g><title>__motoko_async_helper (22,229 instructions, 3.11%)</title><rect x="3.1542%" y="197" width="3.1056%" height="15" fill="rgb(221,13,13)" fg:x="22577" fg:w="22229"/><text x="3.4472%" y="207.50">__..</text></g><g><title>leb128_decode (214 instructions, 0.03%)</title><rect x="6.3067%" y="165" width="0.0299%" height="15" fill="rgb(238,131,9)" fg:x="45141" fg:w="214"/><text x="6.5996%" y="175.50"></text></g><g><title>parse_idl_header (960 instructions, 0.13%)</title><rect x="6.2759%" y="181" width="0.1341%" height="15" fill="rgb(211,50,8)" fg:x="44921" fg:w="960"/><text x="6.5689%" y="191.50"></text></g><g><title>leb128_decode (214 instructions, 0.03%)</title><rect x="6.4531%" y="181" width="0.0299%" height="15" fill="rgb(245,182,24)" fg:x="46189" fg:w="214"/><text x="6.7460%" y="191.50"></text></g><g><title>memcpy (172 instructions, 0.02%)</title><rect x="6.5067%" y="181" width="0.0240%" height="15" fill="rgb(242,14,37)" fg:x="46573" fg:w="172"/><text x="6.7997%" y="191.50"></text></g><g><title>@new_async (240 instructions, 0.03%)</title><rect x="6.5608%" y="101" width="0.0335%" height="15" fill="rgb(246,228,12)" fg:x="46960" fg:w="240"/><text x="6.8538%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (81 instructions, 0.01%)</title><rect x="6.6576%" y="101" width="0.0113%" height="15" fill="rgb(213,55,15)" fg:x="47653" fg:w="81"/><text x="6.9506%" y="111.50"></text></g><g><title>motoko_rts::memory::ic::linear_memory::_$LT$impl$u20$motoko_rts..memory..Memory$u20$for$u20$motoko_rts..memory..ic..IcMemory$GT$::grow_memory::habf473c787c5de9c (345 instructions, 0.05%)</title><rect x="6.6751%" y="85" width="0.0482%" height="15" fill="rgb(209,9,3)" fg:x="47778" fg:w="345"/><text x="6.9680%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (407 instructions, 0.06%)</title><rect x="6.6751%" y="101" width="0.0569%" height="15" fill="rgb(230,59,30)" fg:x="47778" fg:w="407"/><text x="6.9680%" y="111.50"></text></g><g><title>memcpy (154 instructions, 0.02%)</title><rect x="6.7319%" y="101" width="0.0215%" height="15" fill="rgb(209,121,21)" fg:x="48185" fg:w="154"/><text x="7.0249%" y="111.50"></text></g><g><title>memcpy (74 instructions, 0.01%)</title><rect x="6.7652%" y="85" width="0.0103%" height="15" fill="rgb(220,109,13)" fg:x="48423" fg:w="74"/><text x="7.0582%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="6.7637%" y="101" width="0.0187%" height="15" fill="rgb(232,18,1)" fg:x="48412" fg:w="134"/><text x="7.0566%" y="111.50"></text></g><g><title>memcpy (517,886 instructions, 72.35%)</title><rect x="6.7938%" y="85" width="72.3540%" height="15" fill="rgb(215,41,42)" fg:x="48628" fg:w="517886"/><text x="7.0868%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (517,984 instructions, 72.37%)</title><rect x="6.7870%" y="101" width="72.3677%" height="15" fill="rgb(224,123,36)" fg:x="48579" fg:w="517984"/><text x="7.0800%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (130 instructions, 0.02%)</title><rect x="79.1721%" y="85" width="0.0182%" height="15" fill="rgb(240,125,3)" fg:x="566688" fg:w="130"/><text x="79.4651%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (144 instructions, 0.02%)</title><rect x="79.1721%" y="101" width="0.0201%" height="15" fill="rgb(205,98,50)" fg:x="566688" fg:w="144"/><text x="79.4651%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (81 instructions, 0.01%)</title><rect x="79.1923%" y="101" width="0.0113%" height="15" fill="rgb(205,185,37)" fg:x="566832" fg:w="81"/><text x="79.4852%" y="111.50"></text></g><g><title>enqueue (104 instructions, 0.01%)</title><rect x="79.2216%" y="85" width="0.0145%" height="15" fill="rgb(238,207,15)" fg:x="567042" fg:w="104"/><text x="79.5146%" y="95.50"></text></g><g><title>$lambda.9 (157 instructions, 0.02%)</title><rect x="79.2188%" y="101" width="0.0219%" height="15" fill="rgb(213,199,42)" fg:x="567022" fg:w="157"/><text x="79.5118%" y="111.50"></text></g><g><title>$k/21 (638,104 instructions, 89.15%)</title><rect x="6.5479%" y="117" width="89.1497%" height="15" fill="rgb(235,201,11)" fg:x="46868" fg:w="638104"/><text x="6.8409%" y="127.50">$k/21</text></g><g><title>$k/22 (638,153 instructions, 89.16%)</title><rect x="6.5456%" y="133" width="89.1565%" height="15" fill="rgb(207,46,11)" fg:x="46851" fg:w="638153"/><text x="6.8385%" y="143.50">$k/22</text></g><g><title>anon-func-352.15 (638,195 instructions, 89.16%)</title><rect x="6.5454%" y="149" width="89.1624%" height="15" fill="rgb(241,35,35)" fg:x="46850" fg:w="638195"/><text x="6.8384%" y="159.50">anon-func-352.15</text></g><g><title>fulfill (638,894 instructions, 89.26%)</title><rect x="6.5316%" y="165" width="89.2601%" height="15" fill="rgb(243,32,47)" fg:x="46751" fg:w="638894"/><text x="6.8246%" y="175.50">fulfill</text></g><g><title>$lambda.11 (638,911 instructions, 89.26%)</title><rect x="6.5316%" y="181" width="89.2624%" height="15" fill="rgb(247,202,23)" fg:x="46751" fg:w="638911"/><text x="6.8246%" y="191.50">$lambda.11</text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="95.7940%" y="181" width="0.0151%" height="15" fill="rgb(219,102,11)" fg:x="685662" fg:w="108"/><text x="96.0870%" y="191.50"></text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (643,097 instructions, 89.85%)</title><rect x="6.2599%" y="197" width="89.8473%" height="15" fill="rgb(243,110,44)" fg:x="44806" fg:w="643097"/><text x="6.5528%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (245 instructions, 0.03%)</title><rect x="96.1232%" y="165" width="0.0342%" height="15" fill="rgb(222,74,54)" fg:x="688018" fg:w="245"/><text x="96.4161%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 0.07%)</title><rect x="96.1232%" y="181" width="0.0714%" height="15" fill="rgb(216,99,12)" fg:x="688018" fg:w="511"/><text x="96.4161%" y="191.50"></text></g><g><title>memcpy (104 instructions, 0.01%)</title><rect x="96.2225%" y="69" width="0.0145%" height="15" fill="rgb(226,22,26)" fg:x="688729" fg:w="104"/><text x="96.5155%" y="79.50"></text></g><g><title>memcpy (74 instructions, 0.01%)</title><rect x="96.2464%" y="37" width="0.0103%" height="15" fill="rgb(217,163,10)" fg:x="688900" fg:w="74"/><text x="96.5394%" y="47.50"></text></g><g><title>@serialize_go&lt;B&gt; (134 instructions, 0.02%)</title><rect x="96.2449%" y="53" width="0.0187%" height="15" fill="rgb(213,25,53)" fg:x="688889" fg:w="134"/><text x="96.5378%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (148 instructions, 0.02%)</title><rect x="96.2449%" y="69" width="0.0207%" height="15" fill="rgb(252,105,26)" fg:x="688889" fg:w="148"/><text x="96.5378%" y="79.50"></text></g><g><title>reply_with_data (1,058 instructions, 0.15%)</title><rect x="96.2655%" y="69" width="0.1478%" height="15" fill="rgb(220,39,43)" fg:x="689037" fg:w="1058"/><text x="96.5585%" y="79.50"></text></g><g><title>$lambda.30 (1,586 instructions, 0.22%)</title><rect x="96.2057%" y="85" width="0.2216%" height="15" fill="rgb(229,68,48)" fg:x="688609" fg:w="1586"/><text x="96.4987%" y="95.50"></text></g><g><title>$k/30 (1,610 instructions, 0.22%)</title><rect x="96.2057%" y="101" width="0.2249%" height="15" fill="rgb(252,8,32)" fg:x="688609" fg:w="1610"/><text x="96.4987%" y="111.50"></text></g><g><title>$k/20 (1,629 instructions, 0.23%)</title><rect x="96.2057%" y="117" width="0.2276%" height="15" fill="rgb(223,20,43)" fg:x="688609" fg:w="1629"/><text x="96.4987%" y="127.50"></text></g><g><title>$lambda.16 (1,645 instructions, 0.23%)</title><rect x="96.2057%" y="133" width="0.2298%" height="15" fill="rgb(229,81,49)" fg:x="688609" fg:w="1645"/><text x="96.4987%" y="143.50"></text></g><g><title>anon-func-352.15 (1,687 instructions, 0.24%)</title><rect x="96.2056%" y="149" width="0.2357%" height="15" fill="rgb(236,28,36)" fg:x="688608" fg:w="1687"/><text x="96.4986%" y="159.50"></text></g><g><title>fulfill (1,841 instructions, 0.26%)</title><rect x="96.1946%" y="165" width="0.2572%" height="15" fill="rgb(249,185,26)" fg:x="688529" fg:w="1841"/><text x="96.4875%" y="175.50"></text></g><g><title>$lambda.10 (1,858 instructions, 0.26%)</title><rect x="96.1946%" y="181" width="0.2596%" height="15" fill="rgb(249,174,33)" fg:x="688529" fg:w="1858"/><text x="96.4875%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="96.4542%" y="181" width="0.0151%" height="15" fill="rgb(233,201,37)" fg:x="690387" fg:w="108"/><text x="96.7471%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (4,092 instructions, 0.57%)</title><rect x="96.1071%" y="197" width="0.5717%" height="15" fill="rgb(221,78,26)" fg:x="687903" fg:w="4092"/><text x="96.4001%" y="207.50"></text></g><g><title>utf8_validate (140 instructions, 0.02%)</title><rect x="96.7326%" y="165" width="0.0196%" height="15" fill="rgb(250,127,30)" fg:x="692380" fg:w="140"/><text x="97.0256%" y="175.50"></text></g><g><title>utf8_validate (153 instructions, 0.02%)</title><rect x="96.7698%" y="165" width="0.0214%" height="15" fill="rgb(230,49,44)" fg:x="692646" fg:w="153"/><text x="97.0627%" y="175.50"></text></g><g><title>parse_idl_header (3,300 instructions, 0.46%)</title><rect x="96.6949%" y="181" width="0.4610%" height="15" fill="rgb(229,67,23)" fg:x="692110" fg:w="3300"/><text x="96.9878%" y="191.50"></text></g><g><title>idl_sub_buf_init (73 instructions, 0.01%)</title><rect x="97.1559%" y="181" width="0.0102%" height="15" fill="rgb(249,83,47)" fg:x="695410" fg:w="73"/><text x="97.4489%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.01%)</title><rect x="97.2578%" y="165" width="0.0108%" height="15" fill="rgb(215,43,3)" fg:x="696139" fg:w="77"/><text x="97.5507%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (362 instructions, 0.05%)</title><rect x="97.3704%" y="149" width="0.0506%" height="15" fill="rgb(238,154,13)" fg:x="696945" fg:w="362"/><text x="97.6633%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (1,563 instructions, 0.22%)</title><rect x="97.2685%" y="165" width="0.2184%" height="15" fill="rgb(219,56,2)" fg:x="696216" fg:w="1563"/><text x="97.5615%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.01%)</title><rect x="97.5187%" y="165" width="0.0108%" height="15" fill="rgb(233,0,4)" fg:x="698007" fg:w="77"/><text x="97.8117%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (1,260 instructions, 0.18%)</title><rect x="97.5295%" y="165" width="0.1760%" height="15" fill="rgb(235,30,7)" fg:x="698084" fg:w="1260"/><text x="97.8225%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h0b22968d95269211 (4,189 instructions, 0.59%)</title><rect x="97.1820%" y="181" width="0.5852%" height="15" fill="rgb(250,79,13)" fg:x="695597" fg:w="4189"/><text x="97.4750%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="97.7910%" y="181" width="0.0131%" height="15" fill="rgb(211,146,34)" fg:x="699956" fg:w="94"/><text x="98.0840%" y="191.50"></text></g><g><title>@new_async (240 instructions, 0.03%)</title><rect x="97.8293%" y="101" width="0.0335%" height="15" fill="rgb(228,22,38)" fg:x="700230" fg:w="240"/><text x="98.1223%" y="111.50"></text></g><g><title>text_to_buf (94 instructions, 0.01%)</title><rect x="97.9295%" y="85" width="0.0131%" height="15" fill="rgb(235,168,5)" fg:x="700947" fg:w="94"/><text x="98.2225%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (152 instructions, 0.02%)</title><rect x="97.9280%" y="101" width="0.0212%" height="15" fill="rgb(221,155,16)" fg:x="700936" fg:w="152"/><text x="98.2209%" y="111.50"></text></g><g><title>enqueue (104 instructions, 0.01%)</title><rect x="97.9600%" y="85" width="0.0145%" height="15" fill="rgb(215,215,53)" fg:x="701165" fg:w="104"/><text x="98.2529%" y="95.50"></text></g><g><title>$lambda.7 (157 instructions, 0.02%)</title><rect x="97.9572%" y="101" width="0.0219%" height="15" fill="rgb(223,4,10)" fg:x="701145" fg:w="157"/><text x="98.2501%" y="111.50"></text></g><g><title>$k/37 (8,973 instructions, 1.25%)</title><rect x="97.8243%" y="117" width="1.2536%" height="15" fill="rgb(234,103,6)" fg:x="700194" fg:w="8973"/><text x="98.1173%" y="127.50"></text></g><g><title>$k/38 (9,061 instructions, 1.27%)</title><rect x="97.8181%" y="133" width="1.2659%" height="15" fill="rgb(227,97,0)" fg:x="700150" fg:w="9061"/><text x="98.1111%" y="143.50"></text></g><g><title>anon-func-352.15 (9,103 instructions, 1.27%)</title><rect x="97.8180%" y="149" width="1.2718%" height="15" fill="rgb(234,150,53)" fg:x="700149" fg:w="9103"/><text x="98.1110%" y="159.50"></text></g><g><title>fulfill (9,802 instructions, 1.37%)</title><rect x="97.8042%" y="165" width="1.3694%" height="15" fill="rgb(228,201,54)" fg:x="700050" fg:w="9802"/><text x="98.0971%" y="175.50"></text></g><g><title>$lambda.11 (9,819 instructions, 1.37%)</title><rect x="97.8042%" y="181" width="1.3718%" height="15" fill="rgb(222,22,37)" fg:x="700050" fg:w="9819"/><text x="98.0971%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="99.1760%" y="181" width="0.0151%" height="15" fill="rgb(237,53,32)" fg:x="709869" fg:w="108"/><text x="99.4690%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (20,016 instructions, 2.80%)</title><rect x="96.6788%" y="197" width="2.7964%" height="15" fill="rgb(233,25,53)" fg:x="691995" fg:w="20016"/><text x="96.9718%" y="207.50">@c..</text></g><g><title>parse_idl_header (245 instructions, 0.03%)</title><rect x="99.4913%" y="165" width="0.0342%" height="15" fill="rgb(210,40,34)" fg:x="712126" fg:w="245"/><text x="99.7843%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (511 instructions, 0.07%)</title><rect x="99.4913%" y="181" width="0.0714%" height="15" fill="rgb(241,220,44)" fg:x="712126" fg:w="511"/><text x="99.7843%" y="191.50"></text></g><g><title>reply_with_data (1,019 instructions, 0.14%)</title><rect x="99.5993%" y="101" width="0.1424%" height="15" fill="rgb(235,28,35)" fg:x="712899" fg:w="1019"/><text x="99.8923%" y="111.50"></text></g><g><title>anon_async.1 (1,293 instructions, 0.18%)</title><rect x="99.5739%" y="117" width="0.1806%" height="15" fill="rgb(210,56,17)" fg:x="712717" fg:w="1293"/><text x="99.8669%" y="127.50"></text></g><g><title>$lambda.16 (1,309 instructions, 0.18%)</title><rect x="99.5739%" y="133" width="0.1829%" height="15" fill="rgb(224,130,29)" fg:x="712717" fg:w="1309"/><text x="99.8669%" y="143.50"></text></g><g><title>anon-func-352.15 (1,351 instructions, 0.19%)</title><rect x="99.5737%" y="149" width="0.1887%" height="15" fill="rgb(235,212,8)" fg:x="712716" fg:w="1351"/><text x="99.8667%" y="159.50"></text></g><g><title>fulfill (1,505 instructions, 0.21%)</title><rect x="99.5627%" y="165" width="0.2103%" height="15" fill="rgb(223,33,50)" fg:x="712637" fg:w="1505"/><text x="99.8557%" y="175.50"></text></g><g><title>$lambda.10 (1,522 instructions, 0.21%)</title><rect x="99.5627%" y="181" width="0.2126%" height="15" fill="rgb(219,149,13)" fg:x="712637" fg:w="1522"/><text x="99.8557%" y="191.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.02%)</title><rect x="99.7753%" y="181" width="0.0151%" height="15" fill="rgb(250,156,29)" fg:x="714159" fg:w="108"/><text x="100.0683%" y="191.50"></text></g><g><title>all (715,767 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="715767"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (3,756 instructions, 0.52%)</title><rect x="99.4752%" y="197" width="0.5248%" height="15" fill="rgb(216,135,14)" fg:x="712011" fg:w="3756"/><text x="99.7682%" y="207.50"></text></g></svg></svg>