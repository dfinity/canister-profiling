<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="294" onload="init(evt)" viewBox="0 0 1024 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="277.00"> </text><svg id="frames" x="10" width="1004" total_samples="833599"><g><title>parse_idl_header (373 instructions, 0.04%)</title><rect x="0.0061%" y="197" width="0.0447%" height="15" fill="rgb(227,0,7)" fg:x="51" fg:w="373"/><text x="0.2991%" y="207.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (172 instructions, 0.02%)</title><rect x="0.0945%" y="165" width="0.0206%" height="15" fill="rgb(217,0,24)" fg:x="788" fg:w="172"/><text x="0.3875%" y="175.50"></text></g><g><title>utf8_validate (189 instructions, 0.02%)</title><rect x="0.0945%" y="181" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="788" fg:w="189"/><text x="0.3875%" y="191.50"></text></g><g><title>memcpy (119 instructions, 0.01%)</title><rect x="0.1221%" y="165" width="0.0143%" height="15" fill="rgb(248,212,6)" fg:x="1018" fg:w="119"/><text x="0.4151%" y="175.50"></text></g><g><title>text_of_ptr_size (170 instructions, 0.02%)</title><rect x="0.1172%" y="181" width="0.0204%" height="15" fill="rgb(208,68,35)" fg:x="977" fg:w="170"/><text x="0.4102%" y="191.50"></text></g><g><title>@deserialize_go&lt;t&gt; (447 instructions, 0.05%)</title><rect x="0.0884%" y="197" width="0.0536%" height="15" fill="rgb(232,128,0)" fg:x="737" fg:w="447"/><text x="0.3814%" y="207.50"></text></g><g><title>@deserialize&lt;Nt&gt; (1,394 instructions, 0.17%)</title><rect x="0.0061%" y="213" width="0.1672%" height="15" fill="rgb(207,160,47)" fg:x="51" fg:w="1394"/><text x="0.2991%" y="223.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.1993%" y="117" width="0.0293%" height="15" fill="rgb(228,23,34)" fg:x="1661" fg:w="244"/><text x="0.4922%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.1947%" y="133" width="0.0369%" height="15" fill="rgb(218,30,26)" fg:x="1623" fg:w="308"/><text x="0.4877%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.1947%" y="149" width="0.0387%" height="15" fill="rgb(220,122,19)" fg:x="1623" fg:w="323"/><text x="0.4877%" y="159.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="0.2334%" y="133" width="0.0576%" height="15" fill="rgb(250,228,42)" fg:x="1946" fg:w="480"/><text x="0.5264%" y="143.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="0.2334%" y="149" width="0.0593%" height="15" fill="rgb(240,193,28)" fg:x="1946" fg:w="494"/><text x="0.5264%" y="159.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="0.1947%" y="165" width="0.1069%" height="15" fill="rgb(216,20,37)" fg:x="1623" fg:w="891"/><text x="0.4877%" y="175.50"></text></g><g><title>B_eq (960 instructions, 0.12%)</title><rect x="0.1947%" y="181" width="0.1152%" height="15" fill="rgb(206,188,39)" fg:x="1623" fg:w="960"/><text x="0.4877%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.3144%" y="117" width="0.0293%" height="15" fill="rgb(217,207,13)" fg:x="2621" fg:w="244"/><text x="0.6074%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.3099%" y="133" width="0.0369%" height="15" fill="rgb(231,73,38)" fg:x="2583" fg:w="308"/><text x="0.6028%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.3099%" y="149" width="0.0387%" height="15" fill="rgb(225,20,46)" fg:x="2583" fg:w="323"/><text x="0.6028%" y="159.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="0.3486%" y="133" width="0.0576%" height="15" fill="rgb(210,31,41)" fg:x="2906" fg:w="480"/><text x="0.6416%" y="143.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="0.3486%" y="149" width="0.0593%" height="15" fill="rgb(221,200,47)" fg:x="2906" fg:w="494"/><text x="0.6416%" y="159.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="0.3099%" y="165" width="0.1069%" height="15" fill="rgb(226,26,5)" fg:x="2583" fg:w="891"/><text x="0.6028%" y="175.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.4213%" y="117" width="0.0293%" height="15" fill="rgb(249,33,26)" fg:x="3512" fg:w="244"/><text x="0.7143%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.4167%" y="133" width="0.0369%" height="15" fill="rgb(235,183,28)" fg:x="3474" fg:w="308"/><text x="0.7097%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.4167%" y="149" width="0.0387%" height="15" fill="rgb(221,5,38)" fg:x="3474" fg:w="323"/><text x="0.7097%" y="159.50"></text></g><g><title>s_mp_add (173 instructions, 0.02%)</title><rect x="0.4555%" y="133" width="0.0208%" height="15" fill="rgb(247,18,42)" fg:x="3797" fg:w="173"/><text x="0.7485%" y="143.50"></text></g><g><title>mp_add (189 instructions, 0.02%)</title><rect x="0.4555%" y="149" width="0.0227%" height="15" fill="rgb(241,131,45)" fg:x="3797" fg:w="189"/><text x="0.7485%" y="159.50"></text></g><g><title>bigint_add (607 instructions, 0.07%)</title><rect x="0.4167%" y="165" width="0.0728%" height="15" fill="rgb(249,31,29)" fg:x="3474" fg:w="607"/><text x="0.7097%" y="175.50"></text></g><g><title>mp_count_bits (260 instructions, 0.03%)</title><rect x="0.4896%" y="149" width="0.0312%" height="15" fill="rgb(225,111,53)" fg:x="4081" fg:w="260"/><text x="0.7825%" y="159.50"></text></g><g><title>bigint_2complement_bits (293 instructions, 0.04%)</title><rect x="0.4896%" y="165" width="0.0351%" height="15" fill="rgb(238,160,17)" fg:x="4081" fg:w="293"/><text x="0.7825%" y="175.50"></text></g><g><title>B_add (1,815 instructions, 0.22%)</title><rect x="0.3099%" y="181" width="0.2177%" height="15" fill="rgb(214,148,48)" fg:x="2583" fg:w="1815"/><text x="0.6028%" y="191.50"></text></g><g><title>cyclesAdd (2,858 instructions, 0.34%)</title><rect x="0.1947%" y="197" width="0.3429%" height="15" fill="rgb(232,36,49)" fg:x="1623" fg:w="2858"/><text x="0.4877%" y="207.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="0.5407%" y="181" width="0.0319%" height="15" fill="rgb(209,103,24)" fg:x="4507" fg:w="266"/><text x="0.8336%" y="191.50"></text></g><g><title>remember_continuation (3,725 instructions, 0.45%)</title><rect x="0.6045%" y="181" width="0.4469%" height="15" fill="rgb(229,88,8)" fg:x="5039" fg:w="3725"/><text x="0.8975%" y="191.50"></text></g><g><title>@serialize&lt;n32&gt; (236 instructions, 0.03%)</title><rect x="1.0524%" y="181" width="0.0283%" height="15" fill="rgb(213,181,19)" fg:x="8773" fg:w="236"/><text x="1.3454%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.0938%" y="85" width="0.0293%" height="15" fill="rgb(254,191,54)" fg:x="9118" fg:w="244"/><text x="1.3868%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.0893%" y="101" width="0.0369%" height="15" fill="rgb(241,83,37)" fg:x="9080" fg:w="308"/><text x="1.3822%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.0893%" y="117" width="0.0387%" height="15" fill="rgb(233,36,39)" fg:x="9080" fg:w="323"/><text x="1.3822%" y="127.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.1380%" y="85" width="0.0560%" height="15" fill="rgb(226,3,54)" fg:x="9486" fg:w="467"/><text x="1.4309%" y="95.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.1380%" y="101" width="0.0575%" height="15" fill="rgb(245,192,40)" fg:x="9486" fg:w="479"/><text x="1.4309%" y="111.50"></text></g><g><title>mp_div_2d (612 instructions, 0.07%)</title><rect x="1.1280%" y="117" width="0.0734%" height="15" fill="rgb(238,167,29)" fg:x="9403" fg:w="612"/><text x="1.4210%" y="127.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.12%)</title><rect x="1.0893%" y="133" width="0.1226%" height="15" fill="rgb(232,182,51)" fg:x="9080" fg:w="1022"/><text x="1.3822%" y="143.50"></text></g><g><title>B_rsh (1,110 instructions, 0.13%)</title><rect x="1.0893%" y="149" width="0.1332%" height="15" fill="rgb(231,60,39)" fg:x="9080" fg:w="1110"/><text x="1.3822%" y="159.50"></text></g><g><title>cycle_add (1,272 instructions, 0.15%)</title><rect x="1.0811%" y="165" width="0.1526%" height="15" fill="rgb(208,69,12)" fg:x="9012" fg:w="1272"/><text x="1.3741%" y="175.50"></text></g><g><title>@add_cycles (1,282 instructions, 0.15%)</title><rect x="1.0807%" y="181" width="0.1538%" height="15" fill="rgb(235,93,37)" fg:x="9009" fg:w="1282"/><text x="1.3737%" y="191.50"></text></g><g><title>Bucket (5,923 instructions, 0.71%)</title><rect x="0.5407%" y="197" width="0.7105%" height="15" fill="rgb(213,116,39)" fg:x="4507" fg:w="5923"/><text x="0.8336%" y="207.50"></text></g><g><title>enqueue (118 instructions, 0.01%)</title><rect x="1.2571%" y="197" width="0.0142%" height="15" fill="rgb(222,207,29)" fg:x="10479" fg:w="118"/><text x="1.5500%" y="207.50"></text></g><g><title>$lambda (9,270 instructions, 1.11%)</title><rect x="0.1765%" y="213" width="1.1120%" height="15" fill="rgb(206,96,30)" fg:x="1471" fg:w="9270"/><text x="0.4694%" y="223.50"></text></g><g><title>put (11,295 instructions, 1.35%)</title><rect x="0.0000%" y="229" width="1.3550%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="11295"/><text x="0.2930%" y="239.50"></text></g><g><title>memcmp (217 instructions, 0.03%)</title><rect x="1.3647%" y="213" width="0.0260%" height="15" fill="rgb(250,191,14)" fg:x="11376" fg:w="217"/><text x="1.6577%" y="223.50"></text></g><g><title>parse_idl_header (290 instructions, 0.03%)</title><rect x="1.3950%" y="197" width="0.0348%" height="15" fill="rgb(239,60,40)" fg:x="11629" fg:w="290"/><text x="1.6880%" y="207.50"></text></g><g><title>@deserialize&lt;n32&gt; (696 instructions, 0.08%)</title><rect x="1.3950%" y="213" width="0.0835%" height="15" fill="rgb(206,27,48)" fg:x="11629" fg:w="696"/><text x="1.6880%" y="223.50"></text></g><g><title>@buffer_size&lt;(NN)&gt; (105 instructions, 0.01%)</title><rect x="1.4978%" y="165" width="0.0126%" height="15" fill="rgb(225,35,8)" fg:x="12486" fg:w="105"/><text x="1.7908%" y="175.50"></text></g><g><title>@serialize_go&lt;(NN)&gt; (101 instructions, 0.01%)</title><rect x="1.5252%" y="165" width="0.0121%" height="15" fill="rgb(250,213,24)" fg:x="12714" fg:w="101"/><text x="1.8182%" y="175.50"></text></g><g><title>@serialize&lt;NN&gt; (392 instructions, 0.05%)</title><rect x="1.4978%" y="181" width="0.0470%" height="15" fill="rgb(247,123,22)" fg:x="12486" fg:w="392"/><text x="1.7908%" y="191.50"></text></g><g><title>blob_of_ptr_size (109 instructions, 0.01%)</title><rect x="1.5449%" y="181" width="0.0131%" height="15" fill="rgb(231,138,38)" fg:x="12878" fg:w="109"/><text x="1.8378%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.5900%" y="69" width="0.0293%" height="15" fill="rgb(231,145,46)" fg:x="13254" fg:w="244"/><text x="1.8829%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.5854%" y="85" width="0.0369%" height="15" fill="rgb(251,118,11)" fg:x="13216" fg:w="308"/><text x="1.8784%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.5854%" y="101" width="0.0387%" height="15" fill="rgb(217,147,25)" fg:x="13216" fg:w="323"/><text x="1.8784%" y="111.50"></text></g><g><title>mp_set_u64 (504 instructions, 0.06%)</title><rect x="1.6242%" y="101" width="0.0605%" height="15" fill="rgb(247,81,37)" fg:x="13539" fg:w="504"/><text x="1.9171%" y="111.50"></text></g><g><title>bigint_of_word64 (901 instructions, 0.11%)</title><rect x="1.5854%" y="117" width="0.1081%" height="15" fill="rgb(209,12,38)" fg:x="13216" fg:w="901"/><text x="1.8784%" y="127.50"></text></g><g><title>from_word128_ptr (916 instructions, 0.11%)</title><rect x="1.5854%" y="133" width="0.1099%" height="15" fill="rgb(227,1,9)" fg:x="13216" fg:w="916"/><text x="1.8784%" y="143.50"></text></g><g><title>cycle_available (929 instructions, 0.11%)</title><rect x="1.5854%" y="149" width="0.1114%" height="15" fill="rgb(248,47,43)" fg:x="13216" fg:w="929"/><text x="1.8784%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.7096%" y="69" width="0.0293%" height="15" fill="rgb(221,10,30)" fg:x="14251" fg:w="244"/><text x="2.0025%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.7050%" y="85" width="0.0369%" height="15" fill="rgb(210,229,1)" fg:x="14213" fg:w="308"/><text x="1.9980%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.7050%" y="101" width="0.0387%" height="15" fill="rgb(222,148,37)" fg:x="14213" fg:w="323"/><text x="1.9980%" y="111.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.7537%" y="69" width="0.0560%" height="15" fill="rgb(234,67,33)" fg:x="14619" fg:w="467"/><text x="2.0467%" y="79.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.7537%" y="85" width="0.0575%" height="15" fill="rgb(247,98,35)" fg:x="14619" fg:w="479"/><text x="2.0467%" y="95.50"></text></g><g><title>mp_div_2d (612 instructions, 0.07%)</title><rect x="1.7438%" y="101" width="0.0734%" height="15" fill="rgb(247,138,52)" fg:x="14536" fg:w="612"/><text x="2.0367%" y="111.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.12%)</title><rect x="1.7050%" y="117" width="0.1226%" height="15" fill="rgb(213,79,30)" fg:x="14213" fg:w="1022"/><text x="1.9980%" y="127.50"></text></g><g><title>B_rsh (1,110 instructions, 0.13%)</title><rect x="1.7050%" y="133" width="0.1332%" height="15" fill="rgb(246,177,23)" fg:x="14213" fg:w="1110"/><text x="1.9980%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.8514%" y="69" width="0.0293%" height="15" fill="rgb(230,62,27)" fg:x="15433" fg:w="244"/><text x="2.1443%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.8468%" y="85" width="0.0369%" height="15" fill="rgb(216,154,8)" fg:x="15395" fg:w="308"/><text x="2.1398%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.8468%" y="101" width="0.0387%" height="15" fill="rgb(244,35,45)" fg:x="15395" fg:w="323"/><text x="2.1398%" y="111.50"></text></g><g><title>mp_set_u64 (504 instructions, 0.06%)</title><rect x="1.8856%" y="101" width="0.0605%" height="15" fill="rgb(251,115,12)" fg:x="15718" fg:w="504"/><text x="2.1785%" y="111.50"></text></g><g><title>bigint_of_word64 (901 instructions, 0.11%)</title><rect x="1.8468%" y="117" width="0.1081%" height="15" fill="rgb(240,54,50)" fg:x="15395" fg:w="901"/><text x="2.1398%" y="127.50"></text></g><g><title>from_word128_ptr (916 instructions, 0.11%)</title><rect x="1.8468%" y="133" width="0.1099%" height="15" fill="rgb(233,84,52)" fg:x="15395" fg:w="916"/><text x="2.1398%" y="143.50"></text></g><g><title>cycle_accept (2,201 instructions, 0.26%)</title><rect x="1.6969%" y="149" width="0.2640%" height="15" fill="rgb(207,117,47)" fg:x="14145" fg:w="2201"/><text x="1.9898%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.9655%" y="85" width="0.0293%" height="15" fill="rgb(249,43,39)" fg:x="16384" fg:w="244"/><text x="2.2584%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.9609%" y="101" width="0.0369%" height="15" fill="rgb(209,38,44)" fg:x="16346" fg:w="308"/><text x="2.2539%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.9609%" y="117" width="0.0387%" height="15" fill="rgb(236,212,23)" fg:x="16346" fg:w="323"/><text x="2.2539%" y="127.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="1.9996%" y="101" width="0.0576%" height="15" fill="rgb(242,79,21)" fg:x="16669" fg:w="480"/><text x="2.2926%" y="111.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="1.9996%" y="117" width="0.0593%" height="15" fill="rgb(211,96,35)" fg:x="16669" fg:w="494"/><text x="2.2926%" y="127.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="1.9609%" y="133" width="0.1069%" height="15" fill="rgb(253,215,40)" fg:x="16346" fg:w="891"/><text x="2.2539%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.0723%" y="85" width="0.0293%" height="15" fill="rgb(211,81,21)" fg:x="17275" fg:w="244"/><text x="2.3653%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.0678%" y="101" width="0.0369%" height="15" fill="rgb(208,190,38)" fg:x="17237" fg:w="308"/><text x="2.3607%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.0678%" y="117" width="0.0387%" height="15" fill="rgb(235,213,38)" fg:x="17237" fg:w="323"/><text x="2.3607%" y="127.50"></text></g><g><title>s_mp_add (173 instructions, 0.02%)</title><rect x="2.1065%" y="101" width="0.0208%" height="15" fill="rgb(237,122,38)" fg:x="17560" fg:w="173"/><text x="2.3995%" y="111.50"></text></g><g><title>mp_add (189 instructions, 0.02%)</title><rect x="2.1065%" y="117" width="0.0227%" height="15" fill="rgb(244,218,35)" fg:x="17560" fg:w="189"/><text x="2.3995%" y="127.50"></text></g><g><title>bigint_add (607 instructions, 0.07%)</title><rect x="2.0678%" y="133" width="0.0728%" height="15" fill="rgb(240,68,47)" fg:x="17237" fg:w="607"/><text x="2.3607%" y="143.50"></text></g><g><title>mp_count_bits (260 instructions, 0.03%)</title><rect x="2.1406%" y="117" width="0.0312%" height="15" fill="rgb(210,16,53)" fg:x="17844" fg:w="260"/><text x="2.4336%" y="127.50"></text></g><g><title>bigint_2complement_bits (293 instructions, 0.04%)</title><rect x="2.1406%" y="133" width="0.0351%" height="15" fill="rgb(235,124,12)" fg:x="17844" fg:w="293"/><text x="2.4336%" y="143.50"></text></g><g><title>B_add (1,815 instructions, 0.22%)</title><rect x="1.9609%" y="149" width="0.2177%" height="15" fill="rgb(224,169,11)" fg:x="16346" fg:w="1815"/><text x="2.2539%" y="159.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="2.1867%" y="149" width="0.0319%" height="15" fill="rgb(250,166,2)" fg:x="18228" fg:w="266"/><text x="2.4796%" y="159.50"></text></g><g><title>memcpy (120 instructions, 0.01%)</title><rect x="2.2475%" y="133" width="0.0144%" height="15" fill="rgb(242,216,29)" fg:x="18735" fg:w="120"/><text x="2.5405%" y="143.50"></text></g><g><title>@serialize&lt;r(settings:?r(compute_allocation:3=?N,controllers:?vP,freezing_threshold:!3,memory_allocation:!3))&gt; (368 instructions, 0.04%)</title><rect x="2.2350%" y="149" width="0.0441%" height="15" fill="rgb(230,116,27)" fg:x="18631" fg:w="368"/><text x="2.5280%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.2922%" y="53" width="0.0293%" height="15" fill="rgb(228,99,48)" fg:x="19108" fg:w="244"/><text x="2.5852%" y="63.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.2877%" y="69" width="0.0369%" height="15" fill="rgb(253,11,6)" fg:x="19070" fg:w="308"/><text x="2.5806%" y="79.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.2877%" y="85" width="0.0387%" height="15" fill="rgb(247,143,39)" fg:x="19070" fg:w="323"/><text x="2.5806%" y="95.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="2.3364%" y="53" width="0.0560%" height="15" fill="rgb(236,97,10)" fg:x="19476" fg:w="467"/><text x="2.6293%" y="63.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="2.3364%" y="69" width="0.0575%" height="15" fill="rgb(233,208,19)" fg:x="19476" fg:w="479"/><text x="2.6293%" y="79.50"></text></g><g><title>mp_div_2d (612 instructions, 0.07%)</title><rect x="2.3264%" y="85" width="0.0734%" height="15" fill="rgb(216,164,2)" fg:x="19393" fg:w="612"/><text x="2.6194%" y="95.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.12%)</title><rect x="2.2877%" y="101" width="0.1226%" height="15" fill="rgb(220,129,5)" fg:x="19070" fg:w="1022"/><text x="2.5806%" y="111.50"></text></g><g><title>B_rsh (1,110 instructions, 0.13%)</title><rect x="2.2877%" y="117" width="0.1332%" height="15" fill="rgb(242,17,10)" fg:x="19070" fg:w="1110"/><text x="2.5806%" y="127.50"></text></g><g><title>cycle_add (1,272 instructions, 0.15%)</title><rect x="2.2795%" y="133" width="0.1526%" height="15" fill="rgb(242,107,0)" fg:x="19002" fg:w="1272"/><text x="2.5725%" y="143.50"></text></g><g><title>@add_cycles (1,282 instructions, 0.15%)</title><rect x="2.2792%" y="149" width="0.1538%" height="15" fill="rgb(251,28,31)" fg:x="18999" fg:w="1282"/><text x="2.5721%" y="159.50"></text></g><g><title>enqueue (118 instructions, 0.01%)</title><rect x="2.4388%" y="149" width="0.0142%" height="15" fill="rgb(233,223,10)" fg:x="20330" fg:w="118"/><text x="2.7318%" y="159.50"></text></g><g><title>$lambda (7,719 instructions, 0.93%)</title><rect x="1.5667%" y="165" width="0.9260%" height="15" fill="rgb(215,21,27)" fg:x="13060" fg:w="7719"/><text x="1.8597%" y="175.50"></text></g><g><title>$lambda (7,781 instructions, 0.93%)</title><rect x="1.5636%" y="181" width="0.9334%" height="15" fill="rgb(232,23,21)" fg:x="13034" fg:w="7781"/><text x="1.8566%" y="191.50"></text></g><g><title>$lambda (8,474 instructions, 1.02%)</title><rect x="1.4867%" y="197" width="1.0166%" height="15" fill="rgb(244,5,23)" fg:x="12393" fg:w="8474"/><text x="1.7797%" y="207.50"></text></g><g><title>anon_async (8,530 instructions, 1.02%)</title><rect x="1.4836%" y="213" width="1.0233%" height="15" fill="rgb(226,81,46)" fg:x="12367" fg:w="8530"/><text x="1.7765%" y="223.50"></text></g><g><title>__motoko_async_helper (10,155 instructions, 1.22%)</title><rect x="1.3550%" y="229" width="1.2182%" height="15" fill="rgb(247,70,30)" fg:x="11295" fg:w="10155"/><text x="1.6479%" y="239.50"></text></g><g><title>leb128_decode (213 instructions, 0.03%)</title><rect x="2.6099%" y="165" width="0.0256%" height="15" fill="rgb(212,68,19)" fg:x="21756" fg:w="213"/><text x="2.9029%" y="175.50"></text></g><g><title>motoko_rts::idl::parse_fields::h81c9d86bd5bcf94b (381 instructions, 0.05%)</title><rect x="2.6038%" y="181" width="0.0457%" height="15" fill="rgb(240,187,13)" fg:x="21705" fg:w="381"/><text x="2.8967%" y="191.50"></text></g><g><title>parse_idl_header (876 instructions, 0.11%)</title><rect x="2.5854%" y="197" width="0.1051%" height="15" fill="rgb(223,113,26)" fg:x="21552" fg:w="876"/><text x="2.8784%" y="207.50"></text></g><g><title>leb128_decode (213 instructions, 0.03%)</title><rect x="2.7308%" y="165" width="0.0256%" height="15" fill="rgb(206,192,2)" fg:x="22764" fg:w="213"/><text x="3.0238%" y="175.50"></text></g><g><title>find_field (242 instructions, 0.03%)</title><rect x="2.7308%" y="181" width="0.0290%" height="15" fill="rgb(241,108,4)" fg:x="22764" fg:w="242"/><text x="3.0238%" y="191.50"></text></g><g><title>memcpy (164 instructions, 0.02%)</title><rect x="2.7795%" y="165" width="0.0197%" height="15" fill="rgb(247,173,49)" fg:x="23170" fg:w="164"/><text x="3.0725%" y="175.50"></text></g><g><title>@deserialize_go&lt;P&gt; (324 instructions, 0.04%)</title><rect x="2.7691%" y="181" width="0.0389%" height="15" fill="rgb(224,114,35)" fg:x="23083" fg:w="324"/><text x="3.0620%" y="191.50"></text></g><g><title>@deserialize_go&lt;r(canister_id:P)&gt; (922 instructions, 0.11%)</title><rect x="2.7134%" y="197" width="0.1106%" height="15" fill="rgb(245,159,27)" fg:x="22619" fg:w="922"/><text x="3.0064%" y="207.50"></text></g><g><title>@deserialize&lt;r(canister_id:P)&gt; (2,193 instructions, 0.26%)</title><rect x="2.5854%" y="213" width="0.2631%" height="15" fill="rgb(245,172,44)" fg:x="21552" fg:w="2193"/><text x="2.8784%" y="223.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="2.8780%" y="133" width="0.0319%" height="15" fill="rgb(236,23,11)" fg:x="23991" fg:w="266"/><text x="3.1710%" y="143.50"></text></g><g><title>@buffer_size&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (426 instructions, 0.05%)</title><rect x="2.9326%" y="117" width="0.0511%" height="15" fill="rgb(205,117,38)" fg:x="24446" fg:w="426"/><text x="3.2256%" y="127.50"></text></g><g><title>memcpy (132 instructions, 0.02%)</title><rect x="2.9909%" y="117" width="0.0158%" height="15" fill="rgb(237,72,25)" fg:x="24932" fg:w="132"/><text x="3.2839%" y="127.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.01%)</title><rect x="3.0130%" y="101" width="0.0132%" height="15" fill="rgb(244,70,9)" fg:x="25116" fg:w="110"/><text x="3.3059%" y="111.50"></text></g><g><title>memcpy (652,077 instructions, 78.22%)</title><rect x="3.0359%" y="85" width="78.2243%" height="15" fill="rgb(217,125,39)" fg:x="25307" fg:w="652077"/><text x="3.3288%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (652,158 instructions, 78.23%)</title><rect x="3.0298%" y="101" width="78.2340%" height="15" fill="rgb(235,36,10)" fg:x="25256" fg:w="652158"/><text x="3.3227%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.01%)</title><rect x="81.2831%" y="85" width="0.0132%" height="15" fill="rgb(251,123,47)" fg:x="677575" fg:w="110"/><text x="81.5761%" y="95.50"></text></g><g><title>@serialize_go&lt;P&gt; (128 instructions, 0.02%)</title><rect x="81.2831%" y="101" width="0.0154%" height="15" fill="rgb(221,13,13)" fg:x="677575" fg:w="128"/><text x="81.5761%" y="111.50"></text></g><g><title>@serialize_go&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (652,650 instructions, 78.29%)</title><rect x="3.0110%" y="117" width="78.2930%" height="15" fill="rgb(238,131,9)" fg:x="25100" fg:w="652650"/><text x="3.3040%" y="127.50">@serialize_go&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt;</text></g><g><title>@serialize&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (653,367 instructions, 78.38%)</title><rect x="2.9326%" y="133" width="78.3791%" height="15" fill="rgb(211,50,8)" fg:x="24446" fg:w="653367"/><text x="3.2256%" y="143.50">@serialize&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt;</text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="81.3166%" y="37" width="0.0293%" height="15" fill="rgb(245,182,24)" fg:x="677854" fg:w="244"/><text x="81.6095%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="81.3120%" y="53" width="0.0369%" height="15" fill="rgb(242,14,37)" fg:x="677816" fg:w="308"/><text x="81.6050%" y="63.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="81.3120%" y="69" width="0.0387%" height="15" fill="rgb(246,228,12)" fg:x="677816" fg:w="323"/><text x="81.6050%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="81.3507%" y="53" width="0.0576%" height="15" fill="rgb(213,55,15)" fg:x="678139" fg:w="480"/><text x="81.6437%" y="63.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="81.3507%" y="69" width="0.0593%" height="15" fill="rgb(209,9,3)" fg:x="678139" fg:w="494"/><text x="81.6437%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="81.3120%" y="85" width="0.1069%" height="15" fill="rgb(230,59,30)" fg:x="677816" fg:w="891"/><text x="81.6050%" y="95.50"></text></g><g><title>B_lt (963 instructions, 0.12%)</title><rect x="81.3120%" y="101" width="0.1155%" height="15" fill="rgb(209,121,21)" fg:x="677816" fg:w="963"/><text x="81.6050%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 0.12%)</title><rect x="81.3120%" y="117" width="0.1198%" height="15" fill="rgb(220,109,13)" fg:x="677816" fg:w="999"/><text x="81.6050%" y="127.50"></text></g><g><title>@add_cycles (1,009 instructions, 0.12%)</title><rect x="81.3116%" y="133" width="0.1210%" height="15" fill="rgb(232,18,1)" fg:x="677813" fg:w="1009"/><text x="81.6046%" y="143.50"></text></g><g><title>enqueue (118 instructions, 0.01%)</title><rect x="81.4417%" y="117" width="0.0142%" height="15" fill="rgb(215,41,42)" fg:x="678897" fg:w="118"/><text x="81.7346%" y="127.50"></text></g><g><title>$lambda (167 instructions, 0.02%)</title><rect x="81.4386%" y="133" width="0.0200%" height="15" fill="rgb(224,123,36)" fg:x="678871" fg:w="167"/><text x="81.7315%" y="143.50"></text></g><g><title>$k/21 (794,574 instructions, 95.32%)</title><rect x="2.8643%" y="149" width="95.3185%" height="15" fill="rgb(240,125,3)" fg:x="23877" fg:w="794574"/><text x="3.1573%" y="159.50">$k/21</text></g><g><title>$k/22 (794,613 instructions, 95.32%)</title><rect x="2.8624%" y="165" width="95.3232%" height="15" fill="rgb(205,98,50)" fg:x="23861" fg:w="794613"/><text x="3.1554%" y="175.50">$k/22</text></g><g><title>anon-func-349.15 (794,639 instructions, 95.33%)</title><rect x="2.8620%" y="181" width="95.3263%" height="15" fill="rgb(205,185,37)" fg:x="23858" fg:w="794639"/><text x="3.1550%" y="191.50">anon-func-349.15</text></g><g><title>fulfill (794,806 instructions, 95.35%)</title><rect x="2.8485%" y="197" width="95.3463%" height="15" fill="rgb(238,207,15)" fg:x="23745" fg:w="794806"/><text x="3.1415%" y="207.50">fulfill</text></g><g><title>$lambda (794,814 instructions, 95.35%)</title><rect x="2.8485%" y="213" width="95.3473%" height="15" fill="rgb(213,199,42)" fg:x="23745" fg:w="794814"/><text x="3.1415%" y="223.50">$lambda</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (797,650 instructions, 95.69%)</title><rect x="2.5732%" y="229" width="95.6875%" height="15" fill="rgb(235,201,11)" fg:x="21450" fg:w="797650"/><text x="2.8661%" y="239.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (207 instructions, 0.02%)</title><rect x="98.2729%" y="197" width="0.0248%" height="15" fill="rgb(207,46,11)" fg:x="819202" fg:w="207"/><text x="98.5659%" y="207.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 0.05%)</title><rect x="98.2729%" y="213" width="0.0523%" height="15" fill="rgb(241,35,35)" fg:x="819202" fg:w="436"/><text x="98.5659%" y="223.50"></text></g><g><title>memcpy (96 instructions, 0.01%)</title><rect x="98.3511%" y="85" width="0.0115%" height="15" fill="rgb(243,32,47)" fg:x="819854" fg:w="96"/><text x="98.6441%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.01%)</title><rect x="98.3670%" y="69" width="0.0132%" height="15" fill="rgb(247,202,23)" fg:x="819986" fg:w="110"/><text x="98.6599%" y="79.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (128 instructions, 0.02%)</title><rect x="98.3670%" y="85" width="0.0154%" height="15" fill="rgb(219,102,11)" fg:x="819986" fg:w="128"/><text x="98.6599%" y="95.50"></text></g><g><title>@serialize&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (423 instructions, 0.05%)</title><rect x="98.3391%" y="101" width="0.0507%" height="15" fill="rgb(243,110,44)" fg:x="819754" fg:w="423"/><text x="98.6321%" y="111.50"></text></g><g><title>$lambda (497 instructions, 0.06%)</title><rect x="98.3391%" y="117" width="0.0596%" height="15" fill="rgb(222,74,54)" fg:x="819754" fg:w="497"/><text x="98.6321%" y="127.50"></text></g><g><title>$k/30 (515 instructions, 0.06%)</title><rect x="98.3391%" y="133" width="0.0618%" height="15" fill="rgb(216,99,12)" fg:x="819754" fg:w="515"/><text x="98.6321%" y="143.50"></text></g><g><title>$k/20 (528 instructions, 0.06%)</title><rect x="98.3391%" y="149" width="0.0633%" height="15" fill="rgb(226,22,26)" fg:x="819754" fg:w="528"/><text x="98.6321%" y="159.50"></text></g><g><title>$lambda (535 instructions, 0.06%)</title><rect x="98.3391%" y="165" width="0.0642%" height="15" fill="rgb(217,163,10)" fg:x="819754" fg:w="535"/><text x="98.6321%" y="175.50"></text></g><g><title>anon-func-349.15 (561 instructions, 0.07%)</title><rect x="98.3388%" y="181" width="0.0673%" height="15" fill="rgb(213,25,53)" fg:x="819751" fg:w="561"/><text x="98.6317%" y="191.50"></text></g><g><title>fulfill (728 instructions, 0.09%)</title><rect x="98.3252%" y="197" width="0.0873%" height="15" fill="rgb(252,105,26)" fg:x="819638" fg:w="728"/><text x="98.6182%" y="207.50"></text></g><g><title>$lambda (736 instructions, 0.09%)</title><rect x="98.3252%" y="213" width="0.0883%" height="15" fill="rgb(220,39,43)" fg:x="819638" fg:w="736"/><text x="98.6182%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,794 instructions, 0.22%)</title><rect x="98.2607%" y="229" width="0.2152%" height="15" fill="rgb(229,68,48)" fg:x="819100" fg:w="1794"/><text x="98.5536%" y="239.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (110 instructions, 0.01%)</title><rect x="98.5187%" y="165" width="0.0132%" height="15" fill="rgb(252,8,32)" fg:x="821251" fg:w="110"/><text x="98.8117%" y="175.50"></text></g><g><title>utf8_validate (127 instructions, 0.02%)</title><rect x="98.5187%" y="181" width="0.0152%" height="15" fill="rgb(223,20,43)" fg:x="821251" fg:w="127"/><text x="98.8117%" y="191.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (130 instructions, 0.02%)</title><rect x="98.5482%" y="165" width="0.0156%" height="15" fill="rgb(229,81,49)" fg:x="821497" fg:w="130"/><text x="98.8412%" y="175.50"></text></g><g><title>utf8_validate (147 instructions, 0.02%)</title><rect x="98.5482%" y="181" width="0.0176%" height="15" fill="rgb(236,28,36)" fg:x="821497" fg:w="147"/><text x="98.8412%" y="191.50"></text></g><g><title>parse_idl_header (3,061 instructions, 0.37%)</title><rect x="98.4881%" y="197" width="0.3672%" height="15" fill="rgb(249,185,26)" fg:x="820996" fg:w="3061"/><text x="98.7811%" y="207.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (356 instructions, 0.04%)</title><rect x="99.0441%" y="117" width="0.0427%" height="15" fill="rgb(249,174,33)" fg:x="825631" fg:w="356"/><text x="99.3371%" y="127.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,490 instructions, 0.18%)</title><rect x="98.9550%" y="133" width="0.1787%" height="15" fill="rgb(233,201,37)" fg:x="824888" fg:w="1490"/><text x="99.2480%" y="143.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (1,183 instructions, 0.14%)</title><rect x="99.1707%" y="133" width="0.1419%" height="15" fill="rgb(221,78,26)" fg:x="826686" fg:w="1183"/><text x="99.4637%" y="143.50"></text></g><g><title>motoko_rts::idl::sub::h919c13e12b209aa0 (3,971 instructions, 0.48%)</title><rect x="98.8797%" y="149" width="0.4764%" height="15" fill="rgb(250,127,30)" fg:x="824260" fg:w="3971"/><text x="99.1726%" y="159.50"></text></g><g><title>idl_sub (4,015 instructions, 0.48%)</title><rect x="98.8797%" y="165" width="0.4816%" height="15" fill="rgb(230,49,44)" fg:x="824260" fg:w="4015"/><text x="99.1726%" y="175.50"></text></g><g><title>idl_sub (4,027 instructions, 0.48%)</title><rect x="98.8797%" y="181" width="0.4831%" height="15" fill="rgb(229,67,23)" fg:x="824260" fg:w="4027"/><text x="99.1726%" y="191.50"></text></g><g><title>memcpy (86 instructions, 0.01%)</title><rect x="99.3814%" y="181" width="0.0103%" height="15" fill="rgb(249,83,47)" fg:x="828442" fg:w="86"/><text x="99.6743%" y="191.50"></text></g><g><title>@deserialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (4,380 instructions, 0.53%)</title><rect x="98.8797%" y="197" width="0.5254%" height="15" fill="rgb(215,43,3)" fg:x="824260" fg:w="4380"/><text x="99.1726%" y="207.50"></text></g><g><title>@deserialize&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (7,848 instructions, 0.94%)</title><rect x="98.4881%" y="213" width="0.9415%" height="15" fill="rgb(238,154,13)" fg:x="820996" fg:w="7848"/><text x="98.7811%" y="223.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="99.4529%" y="133" width="0.0319%" height="15" fill="rgb(219,56,2)" fg:x="829038" fg:w="266"/><text x="99.7458%" y="143.50"></text></g><g><title>@buffer_size&lt;(Nt)&gt; (110 instructions, 0.01%)</title><rect x="99.5092%" y="117" width="0.0132%" height="15" fill="rgb(233,0,4)" fg:x="829508" fg:w="110"/><text x="99.8022%" y="127.50"></text></g><g><title>text_to_buf (84 instructions, 0.01%)</title><rect x="99.5439%" y="85" width="0.0101%" height="15" fill="rgb(235,30,7)" fg:x="829797" fg:w="84"/><text x="99.8369%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (127 instructions, 0.02%)</title><rect x="99.5420%" y="101" width="0.0152%" height="15" fill="rgb(250,79,13)" fg:x="829781" fg:w="127"/><text x="99.8350%" y="111.50"></text></g><g><title>@serialize_go&lt;(Nt)&gt; (188 instructions, 0.02%)</title><rect x="99.5372%" y="117" width="0.0226%" height="15" fill="rgb(211,146,34)" fg:x="829741" fg:w="188"/><text x="99.8302%" y="127.50"></text></g><g><title>@serialize&lt;Nt&gt; (484 instructions, 0.06%)</title><rect x="99.5092%" y="133" width="0.0581%" height="15" fill="rgb(228,22,38)" fg:x="829508" fg:w="484"/><text x="99.8022%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="99.5722%" y="37" width="0.0293%" height="15" fill="rgb(235,168,5)" fg:x="830033" fg:w="244"/><text x="99.8652%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="99.5677%" y="53" width="0.0369%" height="15" fill="rgb(221,155,16)" fg:x="829995" fg:w="308"/><text x="99.8606%" y="63.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="99.5677%" y="69" width="0.0387%" height="15" fill="rgb(215,215,53)" fg:x="829995" fg:w="323"/><text x="99.8606%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="99.6064%" y="53" width="0.0576%" height="15" fill="rgb(223,4,10)" fg:x="830318" fg:w="480"/><text x="99.8994%" y="63.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="99.6064%" y="69" width="0.0593%" height="15" fill="rgb(234,103,6)" fg:x="830318" fg:w="494"/><text x="99.8994%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="99.5677%" y="85" width="0.1069%" height="15" fill="rgb(227,97,0)" fg:x="829995" fg:w="891"/><text x="99.8606%" y="95.50"></text></g><g><title>B_lt (963 instructions, 0.12%)</title><rect x="99.5677%" y="101" width="0.1155%" height="15" fill="rgb(234,150,53)" fg:x="829995" fg:w="963"/><text x="99.8606%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 0.12%)</title><rect x="99.5677%" y="117" width="0.1198%" height="15" fill="rgb(228,201,54)" fg:x="829995" fg:w="999"/><text x="99.8606%" y="127.50"></text></g><g><title>@add_cycles (1,009 instructions, 0.12%)</title><rect x="99.5673%" y="133" width="0.1210%" height="15" fill="rgb(222,22,37)" fg:x="829992" fg:w="1009"/><text x="99.8603%" y="143.50"></text></g><g><title>enqueue (118 instructions, 0.01%)</title><rect x="99.6973%" y="117" width="0.0142%" height="15" fill="rgb(237,53,32)" fg:x="831076" fg:w="118"/><text x="99.9903%" y="127.50"></text></g><g><title>$lambda (167 instructions, 0.02%)</title><rect x="99.6942%" y="133" width="0.0200%" height="15" fill="rgb(233,25,53)" fg:x="831050" fg:w="167"/><text x="99.9872%" y="143.50"></text></g><g><title>$k/37 (2,411 instructions, 0.29%)</title><rect x="99.4479%" y="149" width="0.2892%" height="15" fill="rgb(210,40,34)" fg:x="828997" fg:w="2411"/><text x="99.7409%" y="159.50"></text></g><g><title>$k/38 (2,478 instructions, 0.30%)</title><rect x="99.4435%" y="165" width="0.2973%" height="15" fill="rgb(241,220,44)" fg:x="828960" fg:w="2478"/><text x="99.7365%" y="175.50"></text></g><g><title>anon-func-349.15 (2,504 instructions, 0.30%)</title><rect x="99.4431%" y="181" width="0.3004%" height="15" fill="rgb(235,28,35)" fg:x="828957" fg:w="2504"/><text x="99.7361%" y="191.50"></text></g><g><title>fulfill (2,671 instructions, 0.32%)</title><rect x="99.4296%" y="197" width="0.3204%" height="15" fill="rgb(210,56,17)" fg:x="828844" fg:w="2671"/><text x="99.7226%" y="207.50"></text></g><g><title>$lambda (2,679 instructions, 0.32%)</title><rect x="99.4296%" y="213" width="0.3214%" height="15" fill="rgb(224,130,29)" fg:x="828844" fg:w="2679"/><text x="99.7226%" y="223.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (11,188 instructions, 1.34%)</title><rect x="98.4759%" y="229" width="1.3421%" height="15" fill="rgb(235,212,8)" fg:x="820894" fg:w="11188"/><text x="98.7689%" y="239.50"></text></g><g><title>parse_idl_header (207 instructions, 0.02%)</title><rect x="99.8303%" y="197" width="0.0248%" height="15" fill="rgb(223,33,50)" fg:x="832184" fg:w="207"/><text x="100.1232%" y="207.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 0.05%)</title><rect x="99.8303%" y="213" width="0.0523%" height="15" fill="rgb(219,149,13)" fg:x="832184" fg:w="436"/><text x="100.1232%" y="223.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 0.03%)</title><rect x="99.8965%" y="133" width="0.0259%" height="15" fill="rgb(250,156,29)" fg:x="832736" fg:w="216"/><text x="100.1894%" y="143.50"></text></g><g><title>$lambda (251 instructions, 0.03%)</title><rect x="99.8965%" y="149" width="0.0301%" height="15" fill="rgb(216,193,19)" fg:x="832736" fg:w="251"/><text x="100.1894%" y="159.50"></text></g><g><title>$lambda (258 instructions, 0.03%)</title><rect x="99.8965%" y="165" width="0.0310%" height="15" fill="rgb(216,135,14)" fg:x="832736" fg:w="258"/><text x="100.1894%" y="175.50"></text></g><g><title>anon-func-349.15 (284 instructions, 0.03%)</title><rect x="99.8961%" y="181" width="0.0341%" height="15" fill="rgb(241,47,5)" fg:x="832733" fg:w="284"/><text x="100.1891%" y="191.50"></text></g><g><title>fulfill (451 instructions, 0.05%)</title><rect x="99.8826%" y="197" width="0.0541%" height="15" fill="rgb(233,42,35)" fg:x="832620" fg:w="451"/><text x="100.1755%" y="207.50"></text></g><g><title>$lambda (459 instructions, 0.06%)</title><rect x="99.8826%" y="213" width="0.0551%" height="15" fill="rgb(231,13,6)" fg:x="832620" fg:w="459"/><text x="100.1755%" y="223.50"></text></g><g><title>all (833,599 instructions, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="833599"/><text x="0.2930%" y="255.50"></text></g><g><title>@callback&lt;u&gt; (1,517 instructions, 0.18%)</title><rect x="99.8180%" y="229" width="0.1820%" height="15" fill="rgb(254,173,49)" fg:x="832082" fg:w="1517"/><text x="100.1110%" y="239.50"></text></g></svg></svg>