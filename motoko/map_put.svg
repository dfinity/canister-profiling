<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="656047"><g><title>parse_idl_header (348 instructions, 0.05%)</title><rect x="0.0062%" y="181" width="0.0530%" height="15" fill="rgb(227,0,7)" fg:x="41" fg:w="348"/><text x="0.2992%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 0.01%)</title><rect x="0.0779%" y="181" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="511" fg:w="79"/><text x="0.3709%" y="191.50"></text></g><g><title>utf8_validate (179 instructions, 0.03%)</title><rect x="0.1061%" y="165" width="0.0273%" height="15" fill="rgb(221,193,54)" fg:x="696" fg:w="179"/><text x="0.3991%" y="175.50"></text></g><g><title>memcpy (114 instructions, 0.02%)</title><rect x="0.1395%" y="165" width="0.0174%" height="15" fill="rgb(248,212,6)" fg:x="915" fg:w="114"/><text x="0.4324%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (421 instructions, 0.06%)</title><rect x="0.0991%" y="181" width="0.0642%" height="15" fill="rgb(208,68,35)" fg:x="650" fg:w="421"/><text x="0.3920%" y="191.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="0.1843%" y="101" width="0.0151%" height="15" fill="rgb(232,128,0)" fg:x="1209" fg:w="99"/><text x="0.4773%" y="111.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="0.1786%" y="117" width="0.0245%" height="15" fill="rgb(207,160,47)" fg:x="1172" fg:w="161"/><text x="0.4716%" y="127.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="0.1786%" y="133" width="0.0268%" height="15" fill="rgb(228,23,34)" fg:x="1172" fg:w="176"/><text x="0.4716%" y="143.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.2055%" y="133" width="0.0133%" height="15" fill="rgb(218,30,26)" fg:x="1348" fg:w="87"/><text x="0.4984%" y="143.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="0.1786%" y="149" width="0.0521%" height="15" fill="rgb(220,122,19)" fg:x="1172" fg:w="342"/><text x="0.4716%" y="159.50"></text></g><g><title>B_eq (400 instructions, 0.06%)</title><rect x="0.1786%" y="165" width="0.0610%" height="15" fill="rgb(250,228,42)" fg:x="1172" fg:w="400"/><text x="0.4716%" y="175.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="0.2453%" y="101" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="1609" fg:w="99"/><text x="0.5382%" y="111.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="0.2396%" y="117" width="0.0245%" height="15" fill="rgb(216,20,37)" fg:x="1572" fg:w="161"/><text x="0.5326%" y="127.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="0.2396%" y="133" width="0.0268%" height="15" fill="rgb(206,188,39)" fg:x="1572" fg:w="176"/><text x="0.5326%" y="143.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.2664%" y="133" width="0.0133%" height="15" fill="rgb(217,207,13)" fg:x="1748" fg:w="87"/><text x="0.5594%" y="143.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="0.2396%" y="149" width="0.0521%" height="15" fill="rgb(231,73,38)" fg:x="1572" fg:w="342"/><text x="0.5326%" y="159.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="0.2974%" y="117" width="0.0151%" height="15" fill="rgb(225,20,46)" fg:x="1951" fg:w="99"/><text x="0.5904%" y="127.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="0.2917%" y="133" width="0.0245%" height="15" fill="rgb(210,31,41)" fg:x="1914" fg:w="161"/><text x="0.5847%" y="143.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="0.2917%" y="149" width="0.0268%" height="15" fill="rgb(221,200,47)" fg:x="1914" fg:w="176"/><text x="0.5847%" y="159.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="0.3186%" y="133" width="0.0259%" height="15" fill="rgb(226,26,5)" fg:x="2090" fg:w="170"/><text x="0.6115%" y="143.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="0.3186%" y="149" width="0.0284%" height="15" fill="rgb(249,33,26)" fg:x="2090" fg:w="186"/><text x="0.6115%" y="159.50"></text></g><g><title>mp_count_bits (226 instructions, 0.03%)</title><rect x="0.3515%" y="133" width="0.0344%" height="15" fill="rgb(235,183,28)" fg:x="2306" fg:w="226"/><text x="0.6445%" y="143.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="0.3515%" y="149" width="0.0395%" height="15" fill="rgb(221,5,38)" fg:x="2306" fg:w="259"/><text x="0.6445%" y="159.50"></text></g><g><title>B_add (1,077 instructions, 0.16%)</title><rect x="0.2396%" y="165" width="0.1642%" height="15" fill="rgb(247,18,42)" fg:x="1572" fg:w="1077"/><text x="0.5326%" y="175.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="0.4233%" y="85" width="0.0151%" height="15" fill="rgb(241,131,45)" fg:x="2777" fg:w="99"/><text x="0.7163%" y="95.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="0.4177%" y="101" width="0.0245%" height="15" fill="rgb(249,31,29)" fg:x="2740" fg:w="161"/><text x="0.7106%" y="111.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="0.4177%" y="117" width="0.0268%" height="15" fill="rgb(225,111,53)" fg:x="2740" fg:w="176"/><text x="0.7106%" y="127.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.4445%" y="117" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="2916" fg:w="87"/><text x="0.7374%" y="127.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="0.4177%" y="133" width="0.0521%" height="15" fill="rgb(214,148,48)" fg:x="2740" fg:w="342"/><text x="0.7106%" y="143.50"></text></g><g><title>B_eq (400 instructions, 0.06%)</title><rect x="0.4177%" y="149" width="0.0610%" height="15" fill="rgb(232,36,49)" fg:x="2740" fg:w="400"/><text x="0.7106%" y="159.50"></text></g><g><title>@new_async (573 instructions, 0.09%)</title><rect x="0.4108%" y="165" width="0.0873%" height="15" fill="rgb(209,103,24)" fg:x="2695" fg:w="573"/><text x="0.7038%" y="175.50"></text></g><g><title>remember_continuation (3,699 instructions, 0.56%)</title><rect x="0.5260%" y="165" width="0.5638%" height="15" fill="rgb(229,88,8)" fg:x="3451" fg:w="3699"/><text x="0.8190%" y="175.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 0.03%)</title><rect x="1.0912%" y="165" width="0.0306%" height="15" fill="rgb(213,181,19)" fg:x="7159" fg:w="201"/><text x="1.3842%" y="175.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.1275%" y="85" width="0.0151%" height="15" fill="rgb(254,191,54)" fg:x="7397" fg:w="99"/><text x="1.4205%" y="95.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.1219%" y="101" width="0.0245%" height="15" fill="rgb(241,83,37)" fg:x="7360" fg:w="161"/><text x="1.4148%" y="111.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.1219%" y="117" width="0.0268%" height="15" fill="rgb(233,36,39)" fg:x="7360" fg:w="176"/><text x="1.4148%" y="127.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="1.1487%" y="117" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="7536" fg:w="87"/><text x="1.4417%" y="127.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="1.1219%" y="133" width="0.0521%" height="15" fill="rgb(245,192,40)" fg:x="7360" fg:w="342"/><text x="1.4148%" y="143.50"></text></g><g><title>B_eq (400 instructions, 0.06%)</title><rect x="1.1219%" y="149" width="0.0610%" height="15" fill="rgb(238,167,29)" fg:x="7360" fg:w="400"/><text x="1.4148%" y="159.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.1984%" y="101" width="0.0151%" height="15" fill="rgb(232,182,51)" fg:x="7862" fg:w="99"/><text x="1.4914%" y="111.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.1927%" y="117" width="0.0245%" height="15" fill="rgb(231,60,39)" fg:x="7825" fg:w="161"/><text x="1.4857%" y="127.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.1927%" y="133" width="0.0268%" height="15" fill="rgb(208,69,12)" fg:x="7825" fg:w="176"/><text x="1.4857%" y="143.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.2196%" y="117" width="0.0123%" height="15" fill="rgb(235,93,37)" fg:x="8001" fg:w="81"/><text x="1.5125%" y="127.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="1.2319%" y="101" width="0.0114%" height="15" fill="rgb(213,116,39)" fg:x="8082" fg:w="75"/><text x="1.5249%" y="111.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="1.2319%" y="117" width="0.0133%" height="15" fill="rgb(222,207,29)" fg:x="8082" fg:w="87"/><text x="1.5249%" y="127.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="1.2196%" y="133" width="0.0328%" height="15" fill="rgb(206,96,30)" fg:x="8001" fg:w="215"/><text x="1.5125%" y="143.50"></text></g><g><title>B_rsh (556 instructions, 0.08%)</title><rect x="1.1927%" y="149" width="0.0848%" height="15" fill="rgb(218,138,4)" fg:x="7825" fg:w="556"/><text x="1.4857%" y="159.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="1.2775%" y="149" width="0.0108%" height="15" fill="rgb(250,191,14)" fg:x="8381" fg:w="71"/><text x="1.5705%" y="159.50"></text></g><g><title>@add_cycles (1,122 instructions, 0.17%)</title><rect x="1.1219%" y="165" width="0.1710%" height="15" fill="rgb(239,60,40)" fg:x="7360" fg:w="1122"/><text x="1.4148%" y="175.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="1.2969%" y="165" width="0.0128%" height="15" fill="rgb(206,27,48)" fg:x="8508" fg:w="84"/><text x="1.5898%" y="175.50"></text></g><g><title>$lambda.1 (7,782 instructions, 1.19%)</title><rect x="0.1655%" y="181" width="1.1862%" height="15" fill="rgb(225,35,8)" fg:x="1086" fg:w="7782"/><text x="0.4585%" y="191.50"></text></g><g><title>put (9,666 instructions, 1.47%)</title><rect x="0.0000%" y="197" width="1.4734%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="9666"/><text x="0.2930%" y="207.50"></text></g><g><title>memcmp (215 instructions, 0.03%)</title><rect x="1.4846%" y="181" width="0.0328%" height="15" fill="rgb(247,123,22)" fg:x="9740" fg:w="215"/><text x="1.7776%" y="191.50"></text></g><g><title>parse_idl_header (270 instructions, 0.04%)</title><rect x="1.5225%" y="181" width="0.0412%" height="15" fill="rgb(231,138,38)" fg:x="9988" fg:w="270"/><text x="1.8154%" y="191.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.6702%" y="53" width="0.0151%" height="15" fill="rgb(231,145,46)" fg:x="10957" fg:w="99"/><text x="1.9631%" y="63.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.6645%" y="69" width="0.0245%" height="15" fill="rgb(251,118,11)" fg:x="10920" fg:w="161"/><text x="1.9575%" y="79.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.6645%" y="85" width="0.0268%" height="15" fill="rgb(217,147,25)" fg:x="10920" fg:w="176"/><text x="1.9575%" y="95.50"></text></g><g><title>mp_set_u64 (105 instructions, 0.02%)</title><rect x="1.6913%" y="85" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="11096" fg:w="105"/><text x="1.9843%" y="95.50"></text></g><g><title>bigint_of_word64 (349 instructions, 0.05%)</title><rect x="1.6645%" y="101" width="0.0532%" height="15" fill="rgb(209,12,38)" fg:x="10920" fg:w="349"/><text x="1.9575%" y="111.50"></text></g><g><title>from_word128_ptr (364 instructions, 0.06%)</title><rect x="1.6645%" y="117" width="0.0555%" height="15" fill="rgb(227,1,9)" fg:x="10920" fg:w="364"/><text x="1.9575%" y="127.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.7355%" y="69" width="0.0151%" height="15" fill="rgb(248,47,43)" fg:x="11386" fg:w="99"/><text x="2.0285%" y="79.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.7299%" y="85" width="0.0245%" height="15" fill="rgb(221,10,30)" fg:x="11349" fg:w="161"/><text x="2.0229%" y="95.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.7299%" y="101" width="0.0268%" height="15" fill="rgb(210,229,1)" fg:x="11349" fg:w="176"/><text x="2.0229%" y="111.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.7567%" y="85" width="0.0123%" height="15" fill="rgb(222,148,37)" fg:x="11525" fg:w="81"/><text x="2.0497%" y="95.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="1.7691%" y="69" width="0.0114%" height="15" fill="rgb(234,67,33)" fg:x="11606" fg:w="75"/><text x="2.0620%" y="79.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="1.7691%" y="85" width="0.0133%" height="15" fill="rgb(247,98,35)" fg:x="11606" fg:w="87"/><text x="2.0620%" y="95.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="1.7567%" y="101" width="0.0328%" height="15" fill="rgb(247,138,52)" fg:x="11525" fg:w="215"/><text x="2.0497%" y="111.50"></text></g><g><title>B_rsh (556 instructions, 0.08%)</title><rect x="1.7299%" y="117" width="0.0848%" height="15" fill="rgb(213,79,30)" fg:x="11349" fg:w="556"/><text x="2.0229%" y="127.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="1.8147%" y="117" width="0.0108%" height="15" fill="rgb(246,177,23)" fg:x="11905" fg:w="71"/><text x="2.1076%" y="127.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.8311%" y="53" width="0.0151%" height="15" fill="rgb(230,62,27)" fg:x="12013" fg:w="99"/><text x="2.1241%" y="63.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.8255%" y="69" width="0.0245%" height="15" fill="rgb(216,154,8)" fg:x="11976" fg:w="161"/><text x="2.1184%" y="79.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.8255%" y="85" width="0.0268%" height="15" fill="rgb(244,35,45)" fg:x="11976" fg:w="176"/><text x="2.1184%" y="95.50"></text></g><g><title>mp_set_u64 (105 instructions, 0.02%)</title><rect x="1.8523%" y="85" width="0.0160%" height="15" fill="rgb(251,115,12)" fg:x="12152" fg:w="105"/><text x="2.1453%" y="95.50"></text></g><g><title>bigint_of_word64 (349 instructions, 0.05%)</title><rect x="1.8255%" y="101" width="0.0532%" height="15" fill="rgb(240,54,50)" fg:x="11976" fg:w="349"/><text x="2.1184%" y="111.50"></text></g><g><title>from_word128_ptr (364 instructions, 0.06%)</title><rect x="1.8255%" y="117" width="0.0555%" height="15" fill="rgb(233,84,52)" fg:x="11976" fg:w="364"/><text x="2.1184%" y="127.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.8892%" y="53" width="0.0151%" height="15" fill="rgb(207,117,47)" fg:x="12394" fg:w="99"/><text x="2.1822%" y="63.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.8836%" y="69" width="0.0245%" height="15" fill="rgb(249,43,39)" fg:x="12357" fg:w="161"/><text x="2.1765%" y="79.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.8836%" y="85" width="0.0268%" height="15" fill="rgb(209,38,44)" fg:x="12357" fg:w="176"/><text x="2.1765%" y="95.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="1.9104%" y="85" width="0.0133%" height="15" fill="rgb(236,212,23)" fg:x="12533" fg:w="87"/><text x="2.2034%" y="95.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="1.8836%" y="101" width="0.0521%" height="15" fill="rgb(242,79,21)" fg:x="12357" fg:w="342"/><text x="2.1765%" y="111.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="1.9413%" y="69" width="0.0151%" height="15" fill="rgb(211,96,35)" fg:x="12736" fg:w="99"/><text x="2.2343%" y="79.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="1.9357%" y="85" width="0.0245%" height="15" fill="rgb(253,215,40)" fg:x="12699" fg:w="161"/><text x="2.2287%" y="95.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="1.9357%" y="101" width="0.0268%" height="15" fill="rgb(211,81,21)" fg:x="12699" fg:w="176"/><text x="2.2287%" y="111.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="1.9625%" y="85" width="0.0259%" height="15" fill="rgb(208,190,38)" fg:x="12875" fg:w="170"/><text x="2.2555%" y="95.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="1.9625%" y="101" width="0.0284%" height="15" fill="rgb(235,213,38)" fg:x="12875" fg:w="186"/><text x="2.2555%" y="111.50"></text></g><g><title>mp_count_bits (226 instructions, 0.03%)</title><rect x="1.9954%" y="85" width="0.0344%" height="15" fill="rgb(237,122,38)" fg:x="13091" fg:w="226"/><text x="2.2884%" y="95.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="1.9954%" y="101" width="0.0395%" height="15" fill="rgb(244,218,35)" fg:x="13091" fg:w="259"/><text x="2.2884%" y="111.50"></text></g><g><title>B_add (1,077 instructions, 0.16%)</title><rect x="1.8836%" y="117" width="0.1642%" height="15" fill="rgb(240,68,47)" fg:x="12357" fg:w="1077"/><text x="2.1765%" y="127.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="2.0665%" y="37" width="0.0151%" height="15" fill="rgb(210,16,53)" fg:x="13557" fg:w="99"/><text x="2.3594%" y="47.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="2.0608%" y="53" width="0.0245%" height="15" fill="rgb(235,124,12)" fg:x="13520" fg:w="161"/><text x="2.3538%" y="63.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="2.0608%" y="69" width="0.0268%" height="15" fill="rgb(224,169,11)" fg:x="13520" fg:w="176"/><text x="2.3538%" y="79.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="2.0877%" y="69" width="0.0133%" height="15" fill="rgb(250,166,2)" fg:x="13696" fg:w="87"/><text x="2.3806%" y="79.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="2.0608%" y="85" width="0.0521%" height="15" fill="rgb(242,216,29)" fg:x="13520" fg:w="342"/><text x="2.3538%" y="95.50"></text></g><g><title>B_eq (400 instructions, 0.06%)</title><rect x="2.0608%" y="101" width="0.0610%" height="15" fill="rgb(230,116,27)" fg:x="13520" fg:w="400"/><text x="2.3538%" y="111.50"></text></g><g><title>@new_async (573 instructions, 0.09%)</title><rect x="2.0540%" y="117" width="0.0873%" height="15" fill="rgb(228,99,48)" fg:x="13475" fg:w="573"/><text x="2.3469%" y="127.50"></text></g><g><title>memcpy (130 instructions, 0.02%)</title><rect x="2.1739%" y="117" width="0.0198%" height="15" fill="rgb(253,11,6)" fg:x="14262" fg:w="130"/><text x="2.4669%" y="127.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="2.2171%" y="37" width="0.0151%" height="15" fill="rgb(247,143,39)" fg:x="14545" fg:w="99"/><text x="2.5100%" y="47.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="2.2114%" y="53" width="0.0245%" height="15" fill="rgb(236,97,10)" fg:x="14508" fg:w="161"/><text x="2.5044%" y="63.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="2.2114%" y="69" width="0.0268%" height="15" fill="rgb(233,208,19)" fg:x="14508" fg:w="176"/><text x="2.5044%" y="79.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="2.2383%" y="69" width="0.0133%" height="15" fill="rgb(216,164,2)" fg:x="14684" fg:w="87"/><text x="2.5312%" y="79.50"></text></g><g><title>bigint_of_int64 (342 instructions, 0.05%)</title><rect x="2.2114%" y="85" width="0.0521%" height="15" fill="rgb(220,129,5)" fg:x="14508" fg:w="342"/><text x="2.5044%" y="95.50"></text></g><g><title>B_eq (400 instructions, 0.06%)</title><rect x="2.2114%" y="101" width="0.0610%" height="15" fill="rgb(242,17,10)" fg:x="14508" fg:w="400"/><text x="2.5044%" y="111.50"></text></g><g><title>memset (99 instructions, 0.02%)</title><rect x="2.2879%" y="53" width="0.0151%" height="15" fill="rgb(242,107,0)" fg:x="15010" fg:w="99"/><text x="2.5809%" y="63.50"></text></g><g><title>mp_calloc (161 instructions, 0.02%)</title><rect x="2.2823%" y="69" width="0.0245%" height="15" fill="rgb(251,28,31)" fg:x="14973" fg:w="161"/><text x="2.5753%" y="79.50"></text></g><g><title>mp_init (176 instructions, 0.03%)</title><rect x="2.2823%" y="85" width="0.0268%" height="15" fill="rgb(233,223,10)" fg:x="14973" fg:w="176"/><text x="2.5753%" y="95.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="2.3091%" y="69" width="0.0123%" height="15" fill="rgb(215,21,27)" fg:x="15149" fg:w="81"/><text x="2.6021%" y="79.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="2.3215%" y="53" width="0.0114%" height="15" fill="rgb(232,23,21)" fg:x="15230" fg:w="75"/><text x="2.6144%" y="63.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="2.3215%" y="69" width="0.0133%" height="15" fill="rgb(244,5,23)" fg:x="15230" fg:w="87"/><text x="2.6144%" y="79.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="2.3091%" y="85" width="0.0328%" height="15" fill="rgb(226,81,46)" fg:x="15149" fg:w="215"/><text x="2.6021%" y="95.50"></text></g><g><title>B_rsh (556 instructions, 0.08%)</title><rect x="2.2823%" y="101" width="0.0848%" height="15" fill="rgb(247,70,30)" fg:x="14973" fg:w="556"/><text x="2.5753%" y="111.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="2.3671%" y="101" width="0.0108%" height="15" fill="rgb(212,68,19)" fg:x="15529" fg:w="71"/><text x="2.6600%" y="111.50"></text></g><g><title>@add_cycles (1,122 instructions, 0.17%)</title><rect x="2.2114%" y="117" width="0.1710%" height="15" fill="rgb(240,187,13)" fg:x="14508" fg:w="1122"/><text x="2.5044%" y="127.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="2.3864%" y="117" width="0.0128%" height="15" fill="rgb(223,113,26)" fg:x="15656" fg:w="84"/><text x="2.6794%" y="127.50"></text></g><g><title>$lambda (5,427 instructions, 0.83%)</title><rect x="1.6485%" y="133" width="0.8272%" height="15" fill="rgb(206,192,2)" fg:x="10815" fg:w="5427"/><text x="1.9415%" y="143.50"></text></g><g><title>$lambda.6 (5,473 instructions, 0.83%)</title><rect x="1.6462%" y="149" width="0.8342%" height="15" fill="rgb(241,108,4)" fg:x="10800" fg:w="5473"/><text x="1.9392%" y="159.50"></text></g><g><title>$lambda.5 (6,017 instructions, 0.92%)</title><rect x="1.5859%" y="165" width="0.9172%" height="15" fill="rgb(247,173,49)" fg:x="10404" fg:w="6017"/><text x="1.8788%" y="175.50"></text></g><g><title>anon_async (6,057 instructions, 0.92%)</title><rect x="1.5836%" y="181" width="0.9233%" height="15" fill="rgb(224,114,35)" fg:x="10389" fg:w="6057"/><text x="1.8765%" y="191.50"></text></g><g><title>__motoko_async_helper (7,597 instructions, 1.16%)</title><rect x="1.4734%" y="197" width="1.1580%" height="15" fill="rgb(245,159,27)" fg:x="9666" fg:w="7597"/><text x="1.7663%" y="207.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.6727%" y="165" width="0.0302%" height="15" fill="rgb(245,172,44)" fg:x="17534" fg:w="198"/><text x="2.9656%" y="175.50"></text></g><g><title>parse_idl_header (817 instructions, 0.12%)</title><rect x="2.6445%" y="181" width="0.1245%" height="15" fill="rgb(236,23,11)" fg:x="17349" fg:w="817"/><text x="2.9374%" y="191.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.8114%" y="181" width="0.0302%" height="15" fill="rgb(205,117,38)" fg:x="18444" fg:w="198"/><text x="3.1044%" y="191.50"></text></g><g><title>memcpy (157 instructions, 0.02%)</title><rect x="2.8628%" y="181" width="0.0239%" height="15" fill="rgb(237,72,25)" fg:x="18781" fg:w="157"/><text x="3.1557%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="2.9115%" y="101" width="0.0268%" height="15" fill="rgb(244,70,9)" fg:x="19101" fg:w="176"/><text x="3.2045%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="2.9931%" y="101" width="0.0110%" height="15" fill="rgb(217,125,39)" fg:x="19636" fg:w="72"/><text x="3.2860%" y="111.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="3.0176%" y="101" width="0.0216%" height="15" fill="rgb(235,36,10)" fg:x="19797" fg:w="142"/><text x="3.3106%" y="111.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="3.0467%" y="101" width="0.0157%" height="15" fill="rgb(251,123,47)" fg:x="19988" fg:w="103"/><text x="3.3397%" y="111.50"></text></g><g><title>memcpy (512,333 instructions, 78.09%)</title><rect x="3.0739%" y="85" width="78.0939%" height="15" fill="rgb(221,13,13)" fg:x="20166" fg:w="512333"/><text x="3.3668%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (512,407 instructions, 78.11%)</title><rect x="3.0670%" y="101" width="78.1052%" height="15" fill="rgb(238,131,9)" fg:x="20121" fg:w="512407"/><text x="3.3600%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="81.1892%" y="85" width="0.0157%" height="15" fill="rgb(211,50,8)" fg:x="532639" fg:w="103"/><text x="81.4821%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="81.1892%" y="101" width="0.0171%" height="15" fill="rgb(245,182,24)" fg:x="532639" fg:w="112"/><text x="81.4821%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="81.2062%" y="101" width="0.0110%" height="15" fill="rgb(242,14,37)" fg:x="532751" fg:w="72"/><text x="81.4992%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="81.2311%" y="85" width="0.0128%" height="15" fill="rgb(246,228,12)" fg:x="532914" fg:w="84"/><text x="81.5240%" y="95.50"></text></g><g><title>$lambda.9 (118 instructions, 0.02%)</title><rect x="81.2288%" y="101" width="0.0180%" height="15" fill="rgb(213,55,15)" fg:x="532899" fg:w="118"/><text x="81.5218%" y="111.50"></text></g><g><title>$k/21 (623,820 instructions, 95.09%)</title><rect x="2.9013%" y="117" width="95.0877%" height="15" fill="rgb(209,9,3)" fg:x="19034" fg:w="623820"/><text x="3.1943%" y="127.50">$k/21</text></g><g><title>$k/22 (623,854 instructions, 95.09%)</title><rect x="2.8989%" y="133" width="95.0929%" height="15" fill="rgb(230,59,30)" fg:x="19018" fg:w="623854"/><text x="3.1918%" y="143.50">$k/22</text></g><g><title>anon-func-352.15 (623,876 instructions, 95.10%)</title><rect x="2.8989%" y="149" width="95.0962%" height="15" fill="rgb(209,121,21)" fg:x="19018" fg:w="623876"/><text x="3.1918%" y="159.50">anon-func-352.15</text></g><g><title>fulfill (624,014 instructions, 95.12%)</title><rect x="2.8873%" y="165" width="95.1173%" height="15" fill="rgb(220,109,13)" fg:x="18942" fg:w="624014"/><text x="3.1803%" y="175.50">fulfill</text></g><g><title>$lambda.11 (624,021 instructions, 95.12%)</title><rect x="2.8873%" y="181" width="95.1183%" height="15" fill="rgb(232,18,1)" fg:x="18942" fg:w="624021"/><text x="3.1803%" y="191.50">$lambda.11</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (626,670 instructions, 95.52%)</title><rect x="2.6314%" y="197" width="95.5221%" height="15" fill="rgb(215,41,42)" fg:x="17263" fg:w="626670"/><text x="2.9243%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="98.1666%" y="165" width="0.0293%" height="15" fill="rgb(224,123,36)" fg:x="644019" fg:w="192"/><text x="98.4596%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (394 instructions, 0.06%)</title><rect x="98.1666%" y="181" width="0.0601%" height="15" fill="rgb(240,125,3)" fg:x="644019" fg:w="394"/><text x="98.4596%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="98.2469%" y="69" width="0.0143%" height="15" fill="rgb(205,98,50)" fg:x="644546" fg:w="94"/><text x="98.5399%" y="79.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="98.2663%" y="53" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="644673" fg:w="103"/><text x="98.5593%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="98.2663%" y="69" width="0.0171%" height="15" fill="rgb(238,207,15)" fg:x="644673" fg:w="112"/><text x="98.5593%" y="79.50"></text></g><g><title>reply_with_data (69 instructions, 0.01%)</title><rect x="98.2834%" y="69" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="644785" fg:w="69"/><text x="98.5763%" y="79.50"></text></g><g><title>$lambda.30 (445 instructions, 0.07%)</title><rect x="98.2356%" y="85" width="0.0678%" height="15" fill="rgb(235,201,11)" fg:x="644472" fg:w="445"/><text x="98.5286%" y="95.50"></text></g><g><title>$k/30 (459 instructions, 0.07%)</title><rect x="98.2356%" y="101" width="0.0700%" height="15" fill="rgb(207,46,11)" fg:x="644472" fg:w="459"/><text x="98.5286%" y="111.50"></text></g><g><title>$k/20 (468 instructions, 0.07%)</title><rect x="98.2356%" y="117" width="0.0713%" height="15" fill="rgb(241,35,35)" fg:x="644472" fg:w="468"/><text x="98.5286%" y="127.50"></text></g><g><title>$lambda.16 (474 instructions, 0.07%)</title><rect x="98.2356%" y="133" width="0.0723%" height="15" fill="rgb(243,32,47)" fg:x="644472" fg:w="474"/><text x="98.5286%" y="143.50"></text></g><g><title>anon-func-352.15 (496 instructions, 0.08%)</title><rect x="98.2356%" y="149" width="0.0756%" height="15" fill="rgb(247,202,23)" fg:x="644472" fg:w="496"/><text x="98.5286%" y="159.50"></text></g><g><title>fulfill (605 instructions, 0.09%)</title><rect x="98.2267%" y="165" width="0.0922%" height="15" fill="rgb(219,102,11)" fg:x="644413" fg:w="605"/><text x="98.5196%" y="175.50"></text></g><g><title>$lambda.10 (612 instructions, 0.09%)</title><rect x="98.2267%" y="181" width="0.0933%" height="15" fill="rgb(243,110,44)" fg:x="644413" fg:w="612"/><text x="98.5196%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,604 instructions, 0.24%)</title><rect x="98.1535%" y="197" width="0.2445%" height="15" fill="rgb(222,74,54)" fg:x="643933" fg:w="1604"/><text x="98.4465%" y="207.50"></text></g><g><title>utf8_validate (123 instructions, 0.02%)</title><rect x="98.4463%" y="165" width="0.0187%" height="15" fill="rgb(216,99,12)" fg:x="645854" fg:w="123"/><text x="98.7393%" y="175.50"></text></g><g><title>utf8_validate (136 instructions, 0.02%)</title><rect x="98.4826%" y="165" width="0.0207%" height="15" fill="rgb(226,22,26)" fg:x="646092" fg:w="136"/><text x="98.7755%" y="175.50"></text></g><g><title>parse_idl_header (2,823 instructions, 0.43%)</title><rect x="98.4111%" y="181" width="0.4303%" height="15" fill="rgb(217,163,10)" fg:x="645623" fg:w="2823"/><text x="98.7041%" y="191.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="98.9443%" y="165" width="0.0104%" height="15" fill="rgb(213,25,53)" fg:x="649121" fg:w="68"/><text x="99.2373%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h229037cc44670687 (323 instructions, 0.05%)</title><rect x="99.0577%" y="149" width="0.0492%" height="15" fill="rgb(252,105,26)" fg:x="649865" fg:w="323"/><text x="99.3507%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::h229037cc44670687 (1,371 instructions, 0.21%)</title><rect x="98.9546%" y="165" width="0.2090%" height="15" fill="rgb(220,39,43)" fg:x="649189" fg:w="1371"/><text x="99.2476%" y="175.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="99.1959%" y="165" width="0.0104%" height="15" fill="rgb(229,68,48)" fg:x="650772" fg:w="68"/><text x="99.4889%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h229037cc44670687 (1,098 instructions, 0.17%)</title><rect x="99.2063%" y="165" width="0.1674%" height="15" fill="rgb(252,8,32)" fg:x="650840" fg:w="1098"/><text x="99.4993%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h229037cc44670687 (3,662 instructions, 0.56%)</title><rect x="98.8672%" y="181" width="0.5582%" height="15" fill="rgb(223,20,43)" fg:x="648615" fg:w="3662"/><text x="99.1601%" y="191.50"></text></g><g><title>memcpy (83 instructions, 0.01%)</title><rect x="99.4465%" y="181" width="0.0127%" height="15" fill="rgb(229,81,49)" fg:x="652416" fg:w="83"/><text x="99.7395%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="99.4802%" y="101" width="0.0268%" height="15" fill="rgb(236,28,36)" fg:x="652637" fg:w="176"/><text x="99.7732%" y="111.50"></text></g><g><title>text_to_buf (78 instructions, 0.01%)</title><rect x="99.5586%" y="85" width="0.0119%" height="15" fill="rgb(249,185,26)" fg:x="653151" fg:w="78"/><text x="99.8515%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 0.02%)</title><rect x="99.5572%" y="101" width="0.0174%" height="15" fill="rgb(249,174,33)" fg:x="653142" fg:w="114"/><text x="99.8502%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="99.5828%" y="85" width="0.0128%" height="15" fill="rgb(233,201,37)" fg:x="653310" fg:w="84"/><text x="99.8758%" y="95.50"></text></g><g><title>$lambda.7 (118 instructions, 0.02%)</title><rect x="99.5805%" y="101" width="0.0180%" height="15" fill="rgb(221,78,26)" fg:x="653295" fg:w="118"/><text x="99.8735%" y="111.50"></text></g><g><title>$k/37 (1,053 instructions, 0.16%)</title><rect x="99.4763%" y="117" width="0.1605%" height="15" fill="rgb(250,127,30)" fg:x="652611" fg:w="1053"/><text x="99.7692%" y="127.50"></text></g><g><title>$k/38 (1,115 instructions, 0.17%)</title><rect x="99.4708%" y="133" width="0.1700%" height="15" fill="rgb(230,49,44)" fg:x="652575" fg:w="1115"/><text x="99.7637%" y="143.50"></text></g><g><title>anon-func-352.15 (1,137 instructions, 0.17%)</title><rect x="99.4708%" y="149" width="0.1733%" height="15" fill="rgb(229,67,23)" fg:x="652575" fg:w="1137"/><text x="99.7637%" y="159.50"></text></g><g><title>fulfill (1,275 instructions, 0.19%)</title><rect x="99.4592%" y="165" width="0.1943%" height="15" fill="rgb(249,83,47)" fg:x="652499" fg:w="1275"/><text x="99.7522%" y="175.50"></text></g><g><title>$lambda.11 (1,282 instructions, 0.20%)</title><rect x="99.4592%" y="181" width="0.1954%" height="15" fill="rgb(215,43,3)" fg:x="652499" fg:w="1282"/><text x="99.7522%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (9,156 instructions, 1.40%)</title><rect x="98.3980%" y="197" width="1.3956%" height="15" fill="rgb(238,154,13)" fg:x="645537" fg:w="9156"/><text x="98.6909%" y="207.50"></text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="99.8067%" y="165" width="0.0293%" height="15" fill="rgb(219,56,2)" fg:x="654779" fg:w="192"/><text x="100.0997%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (394 instructions, 0.06%)</title><rect x="99.8067%" y="181" width="0.0601%" height="15" fill="rgb(233,0,4)" fg:x="654779" fg:w="394"/><text x="100.0997%" y="191.50"></text></g><g><title>anon_async.1 (218 instructions, 0.03%)</title><rect x="99.8758%" y="117" width="0.0332%" height="15" fill="rgb(235,30,7)" fg:x="655232" fg:w="218"/><text x="100.1687%" y="127.50"></text></g><g><title>$lambda.16 (224 instructions, 0.03%)</title><rect x="99.8758%" y="133" width="0.0341%" height="15" fill="rgb(250,79,13)" fg:x="655232" fg:w="224"/><text x="100.1687%" y="143.50"></text></g><g><title>anon-func-352.15 (246 instructions, 0.04%)</title><rect x="99.8758%" y="149" width="0.0375%" height="15" fill="rgb(211,146,34)" fg:x="655232" fg:w="246"/><text x="100.1687%" y="159.50"></text></g><g><title>fulfill (355 instructions, 0.05%)</title><rect x="99.8668%" y="165" width="0.0541%" height="15" fill="rgb(228,22,38)" fg:x="655173" fg:w="355"/><text x="100.1597%" y="175.50"></text></g><g><title>$lambda.10 (362 instructions, 0.06%)</title><rect x="99.8668%" y="181" width="0.0552%" height="15" fill="rgb(235,168,5)" fg:x="655173" fg:w="362"/><text x="100.1597%" y="191.50"></text></g><g><title>all (656,047 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="656047"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,354 instructions, 0.21%)</title><rect x="99.7936%" y="197" width="0.2064%" height="15" fill="rgb(215,215,53)" fg:x="654693" fg:w="1354"/><text x="100.0866%" y="207.50"></text></g></svg></svg>