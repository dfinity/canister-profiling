<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="294" onload="init(evt)" viewBox="0 0 1024 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="277.00"> </text><svg id="frames" x="10" width="1004" total_samples="778563"><g><title>parse_idl_header (373 instructions, 0.05%)</title><rect x="0.0066%" y="197" width="0.0479%" height="15" fill="rgb(227,0,7)" fg:x="51" fg:w="373"/><text x="0.2995%" y="207.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 0.01%)</title><rect x="0.0745%" y="197" width="0.0103%" height="15" fill="rgb(217,0,24)" fg:x="580" fg:w="80"/><text x="0.3675%" y="207.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (172 instructions, 0.02%)</title><rect x="0.1012%" y="165" width="0.0221%" height="15" fill="rgb(221,193,54)" fg:x="788" fg:w="172"/><text x="0.3942%" y="175.50"></text></g><g><title>utf8_validate (189 instructions, 0.02%)</title><rect x="0.1012%" y="181" width="0.0243%" height="15" fill="rgb(248,212,6)" fg:x="788" fg:w="189"/><text x="0.3942%" y="191.50"></text></g><g><title>memcpy (119 instructions, 0.02%)</title><rect x="0.1308%" y="165" width="0.0153%" height="15" fill="rgb(208,68,35)" fg:x="1018" fg:w="119"/><text x="0.4237%" y="175.50"></text></g><g><title>text_of_ptr_size (170 instructions, 0.02%)</title><rect x="0.1255%" y="181" width="0.0218%" height="15" fill="rgb(232,128,0)" fg:x="977" fg:w="170"/><text x="0.4185%" y="191.50"></text></g><g><title>@deserialize_go&lt;t&gt; (447 instructions, 0.06%)</title><rect x="0.0947%" y="197" width="0.0574%" height="15" fill="rgb(207,160,47)" fg:x="737" fg:w="447"/><text x="0.3876%" y="207.50"></text></g><g><title>@deserialize&lt;Nt&gt; (1,394 instructions, 0.18%)</title><rect x="0.0066%" y="213" width="0.1790%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="1394"/><text x="0.2995%" y="223.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.2133%" y="117" width="0.0313%" height="15" fill="rgb(218,30,26)" fg:x="1661" fg:w="244"/><text x="0.5063%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.2085%" y="133" width="0.0396%" height="15" fill="rgb(220,122,19)" fg:x="1623" fg:w="308"/><text x="0.5014%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.2085%" y="149" width="0.0415%" height="15" fill="rgb(250,228,42)" fg:x="1623" fg:w="323"/><text x="0.5014%" y="159.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="0.2499%" y="133" width="0.0617%" height="15" fill="rgb(240,193,28)" fg:x="1946" fg:w="480"/><text x="0.5429%" y="143.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="0.2499%" y="149" width="0.0635%" height="15" fill="rgb(216,20,37)" fg:x="1946" fg:w="494"/><text x="0.5429%" y="159.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="0.2085%" y="165" width="0.1144%" height="15" fill="rgb(206,188,39)" fg:x="1623" fg:w="891"/><text x="0.5014%" y="175.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.3278%" y="117" width="0.0313%" height="15" fill="rgb(217,207,13)" fg:x="2552" fg:w="244"/><text x="0.6208%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.3229%" y="133" width="0.0396%" height="15" fill="rgb(231,73,38)" fg:x="2514" fg:w="308"/><text x="0.6159%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.3229%" y="149" width="0.0415%" height="15" fill="rgb(225,20,46)" fg:x="2514" fg:w="323"/><text x="0.6159%" y="159.50"></text></g><g><title>s_mp_add (173 instructions, 0.02%)</title><rect x="0.3644%" y="133" width="0.0222%" height="15" fill="rgb(210,31,41)" fg:x="2837" fg:w="173"/><text x="0.6574%" y="143.50"></text></g><g><title>mp_add (189 instructions, 0.02%)</title><rect x="0.3644%" y="149" width="0.0243%" height="15" fill="rgb(221,200,47)" fg:x="2837" fg:w="189"/><text x="0.6574%" y="159.50"></text></g><g><title>bigint_add (607 instructions, 0.08%)</title><rect x="0.3229%" y="165" width="0.0780%" height="15" fill="rgb(226,26,5)" fg:x="2514" fg:w="607"/><text x="0.6159%" y="175.50"></text></g><g><title>mp_count_bits (260 instructions, 0.03%)</title><rect x="0.4009%" y="149" width="0.0334%" height="15" fill="rgb(249,33,26)" fg:x="3121" fg:w="260"/><text x="0.6938%" y="159.50"></text></g><g><title>bigint_2complement_bits (293 instructions, 0.04%)</title><rect x="0.4009%" y="165" width="0.0376%" height="15" fill="rgb(235,183,28)" fg:x="3121" fg:w="293"/><text x="0.6938%" y="175.50"></text></g><g><title>B_add (1,815 instructions, 0.23%)</title><rect x="0.2085%" y="181" width="0.2331%" height="15" fill="rgb(221,5,38)" fg:x="1623" fg:w="1815"/><text x="0.5014%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.4552%" y="117" width="0.0313%" height="15" fill="rgb(247,18,42)" fg:x="3544" fg:w="244"/><text x="0.7482%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.4503%" y="133" width="0.0396%" height="15" fill="rgb(241,131,45)" fg:x="3506" fg:w="308"/><text x="0.7433%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.4503%" y="149" width="0.0415%" height="15" fill="rgb(249,31,29)" fg:x="3506" fg:w="323"/><text x="0.7433%" y="159.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="0.4918%" y="133" width="0.0617%" height="15" fill="rgb(225,111,53)" fg:x="3829" fg:w="480"/><text x="0.7848%" y="143.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="0.4918%" y="149" width="0.0635%" height="15" fill="rgb(238,160,17)" fg:x="3829" fg:w="494"/><text x="0.7848%" y="159.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="0.4503%" y="165" width="0.1144%" height="15" fill="rgb(214,148,48)" fg:x="3506" fg:w="891"/><text x="0.7433%" y="175.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="0.5696%" y="117" width="0.0313%" height="15" fill="rgb(232,36,49)" fg:x="4435" fg:w="244"/><text x="0.8626%" y="127.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="0.5648%" y="133" width="0.0396%" height="15" fill="rgb(209,103,24)" fg:x="4397" fg:w="308"/><text x="0.8577%" y="143.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="0.5648%" y="149" width="0.0415%" height="15" fill="rgb(229,88,8)" fg:x="4397" fg:w="323"/><text x="0.8577%" y="159.50"></text></g><g><title>s_mp_add (173 instructions, 0.02%)</title><rect x="0.6062%" y="133" width="0.0222%" height="15" fill="rgb(213,181,19)" fg:x="4720" fg:w="173"/><text x="0.8992%" y="143.50"></text></g><g><title>mp_add (189 instructions, 0.02%)</title><rect x="0.6062%" y="149" width="0.0243%" height="15" fill="rgb(254,191,54)" fg:x="4720" fg:w="189"/><text x="0.8992%" y="159.50"></text></g><g><title>bigint_add (607 instructions, 0.08%)</title><rect x="0.5648%" y="165" width="0.0780%" height="15" fill="rgb(241,83,37)" fg:x="4397" fg:w="607"/><text x="0.8577%" y="175.50"></text></g><g><title>mp_count_bits (260 instructions, 0.03%)</title><rect x="0.6427%" y="149" width="0.0334%" height="15" fill="rgb(233,36,39)" fg:x="5004" fg:w="260"/><text x="0.9357%" y="159.50"></text></g><g><title>bigint_2complement_bits (293 instructions, 0.04%)</title><rect x="0.6427%" y="165" width="0.0376%" height="15" fill="rgb(226,3,54)" fg:x="5004" fg:w="293"/><text x="0.9357%" y="175.50"></text></g><g><title>B_add (1,815 instructions, 0.23%)</title><rect x="0.4503%" y="181" width="0.2331%" height="15" fill="rgb(245,192,40)" fg:x="3506" fg:w="1815"/><text x="0.7433%" y="191.50"></text></g><g><title>cyclesAdd (3,711 instructions, 0.48%)</title><rect x="0.2085%" y="197" width="0.4766%" height="15" fill="rgb(238,167,29)" fg:x="1623" fg:w="3711"/><text x="0.5014%" y="207.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="0.6884%" y="181" width="0.0342%" height="15" fill="rgb(232,182,51)" fg:x="5360" fg:w="266"/><text x="0.9814%" y="191.50"></text></g><g><title>remember_continuation (3,725 instructions, 0.48%)</title><rect x="0.7568%" y="181" width="0.4784%" height="15" fill="rgb(231,60,39)" fg:x="5892" fg:w="3725"/><text x="1.0497%" y="191.50"></text></g><g><title>@serialize&lt;n32&gt; (236 instructions, 0.03%)</title><rect x="1.2364%" y="181" width="0.0303%" height="15" fill="rgb(208,69,12)" fg:x="9626" fg:w="236"/><text x="1.5293%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.2807%" y="85" width="0.0313%" height="15" fill="rgb(235,93,37)" fg:x="9971" fg:w="244"/><text x="1.5737%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.2758%" y="101" width="0.0396%" height="15" fill="rgb(213,116,39)" fg:x="9933" fg:w="308"/><text x="1.5688%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.2758%" y="117" width="0.0415%" height="15" fill="rgb(222,207,29)" fg:x="9933" fg:w="323"/><text x="1.5688%" y="127.50"></text></g><g><title>mp_copy (83 instructions, 0.01%)</title><rect x="1.3173%" y="101" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="10256" fg:w="83"/><text x="1.6103%" y="111.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.3280%" y="85" width="0.0600%" height="15" fill="rgb(218,138,4)" fg:x="10339" fg:w="467"/><text x="1.6209%" y="95.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.3280%" y="101" width="0.0615%" height="15" fill="rgb(250,191,14)" fg:x="10339" fg:w="479"/><text x="1.6209%" y="111.50"></text></g><g><title>mp_div_2d (612 instructions, 0.08%)</title><rect x="1.3173%" y="117" width="0.0786%" height="15" fill="rgb(239,60,40)" fg:x="10256" fg:w="612"/><text x="1.6103%" y="127.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.13%)</title><rect x="1.2758%" y="133" width="0.1313%" height="15" fill="rgb(206,27,48)" fg:x="9933" fg:w="1022"/><text x="1.5688%" y="143.50"></text></g><g><title>B_rsh (1,110 instructions, 0.14%)</title><rect x="1.2758%" y="149" width="0.1426%" height="15" fill="rgb(225,35,8)" fg:x="9933" fg:w="1110"/><text x="1.5688%" y="159.50"></text></g><g><title>cycle_add (1,272 instructions, 0.16%)</title><rect x="1.2671%" y="165" width="0.1634%" height="15" fill="rgb(250,213,24)" fg:x="9865" fg:w="1272"/><text x="1.5600%" y="175.50"></text></g><g><title>@add_cycles (1,282 instructions, 0.16%)</title><rect x="1.2667%" y="181" width="0.1647%" height="15" fill="rgb(247,123,22)" fg:x="9862" fg:w="1282"/><text x="1.5597%" y="191.50"></text></g><g><title>Bucket (5,923 instructions, 0.76%)</title><rect x="0.6884%" y="197" width="0.7608%" height="15" fill="rgb(231,138,38)" fg:x="5360" fg:w="5923"/><text x="0.9814%" y="207.50"></text></g><g><title>enqueue (118 instructions, 0.02%)</title><rect x="1.4555%" y="197" width="0.0152%" height="15" fill="rgb(231,145,46)" fg:x="11332" fg:w="118"/><text x="1.7485%" y="207.50"></text></g><g><title>$lambda (10,124 instructions, 1.30%)</title><rect x="0.1889%" y="213" width="1.3003%" height="15" fill="rgb(251,118,11)" fg:x="1471" fg:w="10124"/><text x="0.4819%" y="223.50"></text></g><g><title>put (12,149 instructions, 1.56%)</title><rect x="0.0000%" y="229" width="1.5604%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="12149"/><text x="0.2930%" y="239.50"></text></g><g><title>memcmp (217 instructions, 0.03%)</title><rect x="1.5708%" y="213" width="0.0279%" height="15" fill="rgb(247,81,37)" fg:x="12230" fg:w="217"/><text x="1.8638%" y="223.50"></text></g><g><title>parse_idl_header (290 instructions, 0.04%)</title><rect x="1.6033%" y="197" width="0.0372%" height="15" fill="rgb(209,12,38)" fg:x="12483" fg:w="290"/><text x="1.8963%" y="207.50"></text></g><g><title>@deserialize&lt;n32&gt; (696 instructions, 0.09%)</title><rect x="1.6033%" y="213" width="0.0894%" height="15" fill="rgb(227,1,9)" fg:x="12483" fg:w="696"/><text x="1.8963%" y="223.50"></text></g><g><title>@buffer_size&lt;(NN)&gt; (105 instructions, 0.01%)</title><rect x="1.7134%" y="165" width="0.0135%" height="15" fill="rgb(248,47,43)" fg:x="13340" fg:w="105"/><text x="2.0064%" y="175.50"></text></g><g><title>@serialize_go&lt;N&gt; (80 instructions, 0.01%)</title><rect x="1.7427%" y="149" width="0.0103%" height="15" fill="rgb(221,10,30)" fg:x="13568" fg:w="80"/><text x="2.0357%" y="159.50"></text></g><g><title>@serialize_go&lt;(NN)&gt; (101 instructions, 0.01%)</title><rect x="1.7427%" y="165" width="0.0130%" height="15" fill="rgb(210,229,1)" fg:x="13568" fg:w="101"/><text x="2.0357%" y="175.50"></text></g><g><title>@serialize&lt;NN&gt; (392 instructions, 0.05%)</title><rect x="1.7134%" y="181" width="0.0503%" height="15" fill="rgb(222,148,37)" fg:x="13340" fg:w="392"/><text x="2.0064%" y="191.50"></text></g><g><title>blob_of_ptr_size (109 instructions, 0.01%)</title><rect x="1.7638%" y="181" width="0.0140%" height="15" fill="rgb(234,67,33)" fg:x="13732" fg:w="109"/><text x="2.0567%" y="191.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.8121%" y="69" width="0.0313%" height="15" fill="rgb(247,98,35)" fg:x="14108" fg:w="244"/><text x="2.1050%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.8072%" y="85" width="0.0396%" height="15" fill="rgb(247,138,52)" fg:x="14070" fg:w="308"/><text x="2.1001%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.8072%" y="101" width="0.0415%" height="15" fill="rgb(213,79,30)" fg:x="14070" fg:w="323"/><text x="2.1001%" y="111.50"></text></g><g><title>mp_set_u64 (504 instructions, 0.06%)</title><rect x="1.8487%" y="101" width="0.0647%" height="15" fill="rgb(246,177,23)" fg:x="14393" fg:w="504"/><text x="2.1416%" y="111.50"></text></g><g><title>bigint_of_word64 (901 instructions, 0.12%)</title><rect x="1.8072%" y="117" width="0.1157%" height="15" fill="rgb(230,62,27)" fg:x="14070" fg:w="901"/><text x="2.1001%" y="127.50"></text></g><g><title>from_word128_ptr (916 instructions, 0.12%)</title><rect x="1.8072%" y="133" width="0.1177%" height="15" fill="rgb(216,154,8)" fg:x="14070" fg:w="916"/><text x="2.1001%" y="143.50"></text></g><g><title>cycle_available (929 instructions, 0.12%)</title><rect x="1.8072%" y="149" width="0.1193%" height="15" fill="rgb(244,35,45)" fg:x="14070" fg:w="929"/><text x="2.1001%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="1.9401%" y="69" width="0.0313%" height="15" fill="rgb(251,115,12)" fg:x="15105" fg:w="244"/><text x="2.2331%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="1.9352%" y="85" width="0.0396%" height="15" fill="rgb(240,54,50)" fg:x="15067" fg:w="308"/><text x="2.2282%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="1.9352%" y="101" width="0.0415%" height="15" fill="rgb(233,84,52)" fg:x="15067" fg:w="323"/><text x="2.2282%" y="111.50"></text></g><g><title>mp_copy (83 instructions, 0.01%)</title><rect x="1.9767%" y="85" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="15390" fg:w="83"/><text x="2.2697%" y="95.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="1.9874%" y="69" width="0.0600%" height="15" fill="rgb(249,43,39)" fg:x="15473" fg:w="467"/><text x="2.2803%" y="79.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="1.9874%" y="85" width="0.0615%" height="15" fill="rgb(209,38,44)" fg:x="15473" fg:w="479"/><text x="2.2803%" y="95.50"></text></g><g><title>mp_div_2d (612 instructions, 0.08%)</title><rect x="1.9767%" y="101" width="0.0786%" height="15" fill="rgb(236,212,23)" fg:x="15390" fg:w="612"/><text x="2.2697%" y="111.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.13%)</title><rect x="1.9352%" y="117" width="0.1313%" height="15" fill="rgb(242,79,21)" fg:x="15067" fg:w="1022"/><text x="2.2282%" y="127.50"></text></g><g><title>B_rsh (1,110 instructions, 0.14%)</title><rect x="1.9352%" y="133" width="0.1426%" height="15" fill="rgb(211,96,35)" fg:x="15067" fg:w="1110"/><text x="2.2282%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.0919%" y="69" width="0.0313%" height="15" fill="rgb(253,215,40)" fg:x="16287" fg:w="244"/><text x="2.3849%" y="79.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.0871%" y="85" width="0.0396%" height="15" fill="rgb(211,81,21)" fg:x="16249" fg:w="308"/><text x="2.3800%" y="95.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.0871%" y="101" width="0.0415%" height="15" fill="rgb(208,190,38)" fg:x="16249" fg:w="323"/><text x="2.3800%" y="111.50"></text></g><g><title>mp_set_u64 (504 instructions, 0.06%)</title><rect x="2.1285%" y="101" width="0.0647%" height="15" fill="rgb(235,213,38)" fg:x="16572" fg:w="504"/><text x="2.4215%" y="111.50"></text></g><g><title>bigint_of_word64 (901 instructions, 0.12%)</title><rect x="2.0871%" y="117" width="0.1157%" height="15" fill="rgb(237,122,38)" fg:x="16249" fg:w="901"/><text x="2.3800%" y="127.50"></text></g><g><title>from_word128_ptr (916 instructions, 0.12%)</title><rect x="2.0871%" y="133" width="0.1177%" height="15" fill="rgb(244,218,35)" fg:x="16249" fg:w="916"/><text x="2.3800%" y="143.50"></text></g><g><title>cycle_accept (2,201 instructions, 0.28%)</title><rect x="1.9265%" y="149" width="0.2827%" height="15" fill="rgb(240,68,47)" fg:x="14999" fg:w="2201"/><text x="2.2195%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.2141%" y="85" width="0.0313%" height="15" fill="rgb(210,16,53)" fg:x="17238" fg:w="244"/><text x="2.5070%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.2092%" y="101" width="0.0396%" height="15" fill="rgb(235,124,12)" fg:x="17200" fg:w="308"/><text x="2.5022%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.2092%" y="117" width="0.0415%" height="15" fill="rgb(224,169,11)" fg:x="17200" fg:w="323"/><text x="2.5022%" y="127.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="2.2507%" y="101" width="0.0617%" height="15" fill="rgb(250,166,2)" fg:x="17523" fg:w="480"/><text x="2.5437%" y="111.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="2.2507%" y="117" width="0.0635%" height="15" fill="rgb(242,216,29)" fg:x="17523" fg:w="494"/><text x="2.5437%" y="127.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="2.2092%" y="133" width="0.1144%" height="15" fill="rgb(230,116,27)" fg:x="17200" fg:w="891"/><text x="2.5022%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.3285%" y="85" width="0.0313%" height="15" fill="rgb(228,99,48)" fg:x="18129" fg:w="244"/><text x="2.6215%" y="95.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.3236%" y="101" width="0.0396%" height="15" fill="rgb(253,11,6)" fg:x="18091" fg:w="308"/><text x="2.6166%" y="111.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.3236%" y="117" width="0.0415%" height="15" fill="rgb(247,143,39)" fg:x="18091" fg:w="323"/><text x="2.6166%" y="127.50"></text></g><g><title>s_mp_add (173 instructions, 0.02%)</title><rect x="2.3651%" y="101" width="0.0222%" height="15" fill="rgb(236,97,10)" fg:x="18414" fg:w="173"/><text x="2.6581%" y="111.50"></text></g><g><title>mp_add (189 instructions, 0.02%)</title><rect x="2.3651%" y="117" width="0.0243%" height="15" fill="rgb(233,208,19)" fg:x="18414" fg:w="189"/><text x="2.6581%" y="127.50"></text></g><g><title>bigint_add (607 instructions, 0.08%)</title><rect x="2.3236%" y="133" width="0.0780%" height="15" fill="rgb(216,164,2)" fg:x="18091" fg:w="607"/><text x="2.6166%" y="143.50"></text></g><g><title>mp_count_bits (260 instructions, 0.03%)</title><rect x="2.4016%" y="117" width="0.0334%" height="15" fill="rgb(220,129,5)" fg:x="18698" fg:w="260"/><text x="2.6946%" y="127.50"></text></g><g><title>bigint_2complement_bits (293 instructions, 0.04%)</title><rect x="2.4016%" y="133" width="0.0376%" height="15" fill="rgb(242,17,10)" fg:x="18698" fg:w="293"/><text x="2.6946%" y="143.50"></text></g><g><title>B_add (1,815 instructions, 0.23%)</title><rect x="2.2092%" y="149" width="0.2331%" height="15" fill="rgb(242,107,0)" fg:x="17200" fg:w="1815"/><text x="2.5022%" y="159.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="2.4509%" y="149" width="0.0342%" height="15" fill="rgb(251,28,31)" fg:x="19082" fg:w="266"/><text x="2.7439%" y="159.50"></text></g><g><title>memcpy (120 instructions, 0.02%)</title><rect x="2.5160%" y="133" width="0.0154%" height="15" fill="rgb(233,223,10)" fg:x="19589" fg:w="120"/><text x="2.8090%" y="143.50"></text></g><g><title>@serialize&lt;r(settings:?r(compute_allocation:3=?N,controllers:?vP,freezing_threshold:!3,memory_allocation:!3))&gt; (368 instructions, 0.05%)</title><rect x="2.5027%" y="149" width="0.0473%" height="15" fill="rgb(215,21,27)" fg:x="19485" fg:w="368"/><text x="2.7957%" y="159.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="2.5640%" y="53" width="0.0313%" height="15" fill="rgb(232,23,21)" fg:x="19962" fg:w="244"/><text x="2.8569%" y="63.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="2.5591%" y="69" width="0.0396%" height="15" fill="rgb(244,5,23)" fg:x="19924" fg:w="308"/><text x="2.8520%" y="79.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="2.5591%" y="85" width="0.0415%" height="15" fill="rgb(226,81,46)" fg:x="19924" fg:w="323"/><text x="2.8520%" y="95.50"></text></g><g><title>mp_copy (83 instructions, 0.01%)</title><rect x="2.6006%" y="69" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="20247" fg:w="83"/><text x="2.8935%" y="79.50"></text></g><g><title>mp_zero (467 instructions, 0.06%)</title><rect x="2.6112%" y="53" width="0.0600%" height="15" fill="rgb(212,68,19)" fg:x="20330" fg:w="467"/><text x="2.9042%" y="63.50"></text></g><g><title>mp_rshd (479 instructions, 0.06%)</title><rect x="2.6112%" y="69" width="0.0615%" height="15" fill="rgb(240,187,13)" fg:x="20330" fg:w="479"/><text x="2.9042%" y="79.50"></text></g><g><title>mp_div_2d (612 instructions, 0.08%)</title><rect x="2.6006%" y="85" width="0.0786%" height="15" fill="rgb(223,113,26)" fg:x="20247" fg:w="612"/><text x="2.8935%" y="95.50"></text></g><g><title>bigint_rsh (1,022 instructions, 0.13%)</title><rect x="2.5591%" y="101" width="0.1313%" height="15" fill="rgb(206,192,2)" fg:x="19924" fg:w="1022"/><text x="2.8520%" y="111.50"></text></g><g><title>B_rsh (1,110 instructions, 0.14%)</title><rect x="2.5591%" y="117" width="0.1426%" height="15" fill="rgb(241,108,4)" fg:x="19924" fg:w="1110"/><text x="2.8520%" y="127.50"></text></g><g><title>cycle_add (1,272 instructions, 0.16%)</title><rect x="2.5503%" y="133" width="0.1634%" height="15" fill="rgb(247,173,49)" fg:x="19856" fg:w="1272"/><text x="2.8433%" y="143.50"></text></g><g><title>@add_cycles (1,282 instructions, 0.16%)</title><rect x="2.5500%" y="149" width="0.1647%" height="15" fill="rgb(224,114,35)" fg:x="19853" fg:w="1282"/><text x="2.8429%" y="159.50"></text></g><g><title>enqueue (118 instructions, 0.02%)</title><rect x="2.7209%" y="149" width="0.0152%" height="15" fill="rgb(245,159,27)" fg:x="21184" fg:w="118"/><text x="3.0139%" y="159.50"></text></g><g><title>$lambda (7,720 instructions, 0.99%)</title><rect x="1.7871%" y="165" width="0.9916%" height="15" fill="rgb(245,172,44)" fg:x="13914" fg:w="7720"/><text x="2.0801%" y="175.50"></text></g><g><title>$lambda (7,782 instructions, 1.00%)</title><rect x="1.7838%" y="181" width="0.9995%" height="15" fill="rgb(236,23,11)" fg:x="13888" fg:w="7782"/><text x="2.0768%" y="191.50"></text></g><g><title>$lambda (8,475 instructions, 1.09%)</title><rect x="1.7015%" y="197" width="1.0885%" height="15" fill="rgb(205,117,38)" fg:x="13247" fg:w="8475"/><text x="1.9944%" y="207.50"></text></g><g><title>anon_async (8,531 instructions, 1.10%)</title><rect x="1.6981%" y="213" width="1.0957%" height="15" fill="rgb(237,72,25)" fg:x="13221" fg:w="8531"/><text x="1.9911%" y="223.50"></text></g><g><title>__motoko_async_helper (10,156 instructions, 1.30%)</title><rect x="1.5604%" y="229" width="1.3045%" height="15" fill="rgb(244,70,9)" fg:x="12149" fg:w="10156"/><text x="1.8534%" y="239.50"></text></g><g><title>leb128_decode (213 instructions, 0.03%)</title><rect x="2.9042%" y="165" width="0.0274%" height="15" fill="rgb(217,125,39)" fg:x="22611" fg:w="213"/><text x="3.1972%" y="175.50"></text></g><g><title>motoko_rts::idl::parse_fields::h505d0c8155046473 (381 instructions, 0.05%)</title><rect x="2.8976%" y="181" width="0.0489%" height="15" fill="rgb(235,36,10)" fg:x="22560" fg:w="381"/><text x="3.1906%" y="191.50"></text></g><g><title>parse_idl_header (876 instructions, 0.11%)</title><rect x="2.8780%" y="197" width="0.1125%" height="15" fill="rgb(251,123,47)" fg:x="22407" fg:w="876"/><text x="3.1710%" y="207.50"></text></g><g><title>leb128_decode (213 instructions, 0.03%)</title><rect x="3.0337%" y="165" width="0.0274%" height="15" fill="rgb(221,13,13)" fg:x="23619" fg:w="213"/><text x="3.3266%" y="175.50"></text></g><g><title>find_field (242 instructions, 0.03%)</title><rect x="3.0337%" y="181" width="0.0311%" height="15" fill="rgb(238,131,9)" fg:x="23619" fg:w="242"/><text x="3.3266%" y="191.50"></text></g><g><title>memcpy (164 instructions, 0.02%)</title><rect x="3.0858%" y="165" width="0.0211%" height="15" fill="rgb(211,50,8)" fg:x="24025" fg:w="164"/><text x="3.3788%" y="175.50"></text></g><g><title>@deserialize_go&lt;P&gt; (324 instructions, 0.04%)</title><rect x="3.0746%" y="181" width="0.0416%" height="15" fill="rgb(245,182,24)" fg:x="23938" fg:w="324"/><text x="3.3676%" y="191.50"></text></g><g><title>@deserialize_go&lt;r(canister_id:P)&gt; (922 instructions, 0.12%)</title><rect x="3.0150%" y="197" width="0.1184%" height="15" fill="rgb(242,14,37)" fg:x="23474" fg:w="922"/><text x="3.3080%" y="207.50"></text></g><g><title>@deserialize&lt;r(canister_id:P)&gt; (2,193 instructions, 0.28%)</title><rect x="2.8780%" y="213" width="0.2817%" height="15" fill="rgb(246,228,12)" fg:x="22407" fg:w="2193"/><text x="3.1710%" y="223.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="3.1913%" y="133" width="0.0342%" height="15" fill="rgb(213,55,15)" fg:x="24846" fg:w="266"/><text x="3.4842%" y="143.50"></text></g><g><title>@buffer_size&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (426 instructions, 0.05%)</title><rect x="3.2497%" y="117" width="0.0547%" height="15" fill="rgb(209,9,3)" fg:x="25301" fg:w="426"/><text x="3.5427%" y="127.50"></text></g><g><title>memcpy (132 instructions, 0.02%)</title><rect x="3.3121%" y="117" width="0.0170%" height="15" fill="rgb(230,59,30)" fg:x="25787" fg:w="132"/><text x="3.6051%" y="127.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.01%)</title><rect x="3.3358%" y="101" width="0.0141%" height="15" fill="rgb(209,121,21)" fg:x="25971" fg:w="110"/><text x="3.6287%" y="111.50"></text></g><g><title>memcpy (606,015 instructions, 77.84%)</title><rect x="3.3603%" y="85" width="77.8376%" height="15" fill="rgb(220,109,13)" fg:x="26162" fg:w="606015"/><text x="3.6533%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (606,096 instructions, 77.85%)</title><rect x="3.3537%" y="101" width="77.8480%" height="15" fill="rgb(232,18,1)" fg:x="26111" fg:w="606096"/><text x="3.6467%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>@serialize_go&lt;B&gt; (105 instructions, 0.01%)</title><rect x="81.2225%" y="85" width="0.0135%" height="15" fill="rgb(215,41,42)" fg:x="632368" fg:w="105"/><text x="81.5154%" y="95.50"></text></g><g><title>@serialize_go&lt;P&gt; (123 instructions, 0.02%)</title><rect x="81.2225%" y="101" width="0.0158%" height="15" fill="rgb(224,123,36)" fg:x="632368" fg:w="123"/><text x="81.5154%" y="111.50"></text></g><g><title>@serialize_go&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (606,583 instructions, 77.91%)</title><rect x="3.3337%" y="117" width="77.9106%" height="15" fill="rgb(240,125,3)" fg:x="25955" fg:w="606583"/><text x="3.6267%" y="127.50">@serialize_go&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt;</text></g><g><title>@serialize&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt; (607,300 instructions, 78.00%)</title><rect x="3.2497%" y="133" width="78.0027%" height="15" fill="rgb(205,98,50)" fg:x="25301" fg:w="607300"/><text x="3.5427%" y="143.50">@serialize&lt;r(arg:B,canister_id:P,mode:v(install:u,reinstall:u,upgrade:u),wasm_module:B)&gt;</text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="81.2577%" y="37" width="0.0313%" height="15" fill="rgb(205,185,37)" fg:x="632642" fg:w="244"/><text x="81.5506%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="81.2528%" y="53" width="0.0396%" height="15" fill="rgb(238,207,15)" fg:x="632604" fg:w="308"/><text x="81.5457%" y="63.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="81.2528%" y="69" width="0.0415%" height="15" fill="rgb(213,199,42)" fg:x="632604" fg:w="323"/><text x="81.5457%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="81.2943%" y="53" width="0.0617%" height="15" fill="rgb(235,201,11)" fg:x="632927" fg:w="480"/><text x="81.5872%" y="63.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="81.2943%" y="69" width="0.0635%" height="15" fill="rgb(207,46,11)" fg:x="632927" fg:w="494"/><text x="81.5872%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="81.2528%" y="85" width="0.1144%" height="15" fill="rgb(241,35,35)" fg:x="632604" fg:w="891"/><text x="81.5457%" y="95.50"></text></g><g><title>B_lt (963 instructions, 0.12%)</title><rect x="81.2528%" y="101" width="0.1237%" height="15" fill="rgb(243,32,47)" fg:x="632604" fg:w="963"/><text x="81.5457%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 0.13%)</title><rect x="81.2528%" y="117" width="0.1283%" height="15" fill="rgb(247,202,23)" fg:x="632604" fg:w="999"/><text x="81.5457%" y="127.50"></text></g><g><title>@add_cycles (1,009 instructions, 0.13%)</title><rect x="81.2524%" y="133" width="0.1296%" height="15" fill="rgb(219,102,11)" fg:x="632601" fg:w="1009"/><text x="81.5454%" y="143.50"></text></g><g><title>enqueue (118 instructions, 0.02%)</title><rect x="81.3916%" y="117" width="0.0152%" height="15" fill="rgb(243,110,44)" fg:x="633685" fg:w="118"/><text x="81.6846%" y="127.50"></text></g><g><title>$lambda (167 instructions, 0.02%)</title><rect x="81.3883%" y="133" width="0.0214%" height="15" fill="rgb(222,74,54)" fg:x="633659" fg:w="167"/><text x="81.6812%" y="143.50"></text></g><g><title>$k/21 (738,682 instructions, 94.88%)</title><rect x="3.1766%" y="149" width="94.8776%" height="15" fill="rgb(216,99,12)" fg:x="24732" fg:w="738682"/><text x="3.4696%" y="159.50">$k/21</text></g><g><title>$k/22 (738,721 instructions, 94.88%)</title><rect x="3.1746%" y="165" width="94.8826%" height="15" fill="rgb(226,22,26)" fg:x="24716" fg:w="738721"/><text x="3.4675%" y="175.50">$k/22</text></g><g><title>anon-func-349.15 (738,747 instructions, 94.89%)</title><rect x="3.1742%" y="181" width="94.8860%" height="15" fill="rgb(217,163,10)" fg:x="24713" fg:w="738747"/><text x="3.4671%" y="191.50">anon-func-349.15</text></g><g><title>fulfill (738,914 instructions, 94.91%)</title><rect x="3.1597%" y="197" width="94.9074%" height="15" fill="rgb(213,25,53)" fg:x="24600" fg:w="738914"/><text x="3.4526%" y="207.50">fulfill</text></g><g><title>$lambda (738,922 instructions, 94.91%)</title><rect x="3.1597%" y="213" width="94.9084%" height="15" fill="rgb(252,105,26)" fg:x="24600" fg:w="738922"/><text x="3.4526%" y="223.50">$lambda</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (741,758 instructions, 95.27%)</title><rect x="2.8649%" y="229" width="95.2727%" height="15" fill="rgb(220,39,43)" fg:x="22305" fg:w="741758"/><text x="3.1579%" y="239.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (207 instructions, 0.03%)</title><rect x="98.1507%" y="197" width="0.0266%" height="15" fill="rgb(229,68,48)" fg:x="764165" fg:w="207"/><text x="98.4437%" y="207.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 0.06%)</title><rect x="98.1507%" y="213" width="0.0560%" height="15" fill="rgb(252,8,32)" fg:x="764165" fg:w="436"/><text x="98.4437%" y="223.50"></text></g><g><title>memcpy (96 instructions, 0.01%)</title><rect x="98.2344%" y="85" width="0.0123%" height="15" fill="rgb(223,20,43)" fg:x="764817" fg:w="96"/><text x="98.5274%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (110 instructions, 0.01%)</title><rect x="98.2514%" y="69" width="0.0141%" height="15" fill="rgb(229,81,49)" fg:x="764949" fg:w="110"/><text x="98.5444%" y="79.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (128 instructions, 0.02%)</title><rect x="98.2514%" y="85" width="0.0164%" height="15" fill="rgb(236,28,36)" fg:x="764949" fg:w="128"/><text x="98.5444%" y="95.50"></text></g><g><title>@serialize&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (423 instructions, 0.05%)</title><rect x="98.2216%" y="101" width="0.0543%" height="15" fill="rgb(249,185,26)" fg:x="764717" fg:w="423"/><text x="98.5146%" y="111.50"></text></g><g><title>$lambda (497 instructions, 0.06%)</title><rect x="98.2216%" y="117" width="0.0638%" height="15" fill="rgb(249,174,33)" fg:x="764717" fg:w="497"/><text x="98.5146%" y="127.50"></text></g><g><title>$k/30 (515 instructions, 0.07%)</title><rect x="98.2216%" y="133" width="0.0661%" height="15" fill="rgb(233,201,37)" fg:x="764717" fg:w="515"/><text x="98.5146%" y="143.50"></text></g><g><title>$k/20 (528 instructions, 0.07%)</title><rect x="98.2216%" y="149" width="0.0678%" height="15" fill="rgb(221,78,26)" fg:x="764717" fg:w="528"/><text x="98.5146%" y="159.50"></text></g><g><title>$lambda (535 instructions, 0.07%)</title><rect x="98.2216%" y="165" width="0.0687%" height="15" fill="rgb(250,127,30)" fg:x="764717" fg:w="535"/><text x="98.5146%" y="175.50"></text></g><g><title>anon-func-349.15 (561 instructions, 0.07%)</title><rect x="98.2212%" y="181" width="0.0721%" height="15" fill="rgb(230,49,44)" fg:x="764714" fg:w="561"/><text x="98.5142%" y="191.50"></text></g><g><title>fulfill (728 instructions, 0.09%)</title><rect x="98.2067%" y="197" width="0.0935%" height="15" fill="rgb(229,67,23)" fg:x="764601" fg:w="728"/><text x="98.4997%" y="207.50"></text></g><g><title>$lambda (736 instructions, 0.09%)</title><rect x="98.2067%" y="213" width="0.0945%" height="15" fill="rgb(249,83,47)" fg:x="764601" fg:w="736"/><text x="98.4997%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,794 instructions, 0.23%)</title><rect x="98.1376%" y="229" width="0.2304%" height="15" fill="rgb(215,43,3)" fg:x="764063" fg:w="1794"/><text x="98.4306%" y="239.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (110 instructions, 0.01%)</title><rect x="98.4139%" y="165" width="0.0141%" height="15" fill="rgb(238,154,13)" fg:x="766214" fg:w="110"/><text x="98.7068%" y="175.50"></text></g><g><title>utf8_validate (127 instructions, 0.02%)</title><rect x="98.4139%" y="181" width="0.0163%" height="15" fill="rgb(219,56,2)" fg:x="766214" fg:w="127"/><text x="98.7068%" y="191.50"></text></g><g><title>core::str::converts::from_utf8::hd4401e4091fc2e3b (130 instructions, 0.02%)</title><rect x="98.4455%" y="165" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="766460" fg:w="130"/><text x="98.7384%" y="175.50"></text></g><g><title>utf8_validate (147 instructions, 0.02%)</title><rect x="98.4455%" y="181" width="0.0189%" height="15" fill="rgb(235,30,7)" fg:x="766460" fg:w="147"/><text x="98.7384%" y="191.50"></text></g><g><title>parse_idl_header (3,061 instructions, 0.39%)</title><rect x="98.3811%" y="197" width="0.3932%" height="15" fill="rgb(250,79,13)" fg:x="765959" fg:w="3061"/><text x="98.6741%" y="207.50"></text></g><g><title>motoko_rts::idl::sub::h3dfa5ebac339dd50 (356 instructions, 0.05%)</title><rect x="98.9764%" y="117" width="0.0457%" height="15" fill="rgb(211,146,34)" fg:x="770594" fg:w="356"/><text x="99.2694%" y="127.50"></text></g><g><title>motoko_rts::idl::sub::h3dfa5ebac339dd50 (1,490 instructions, 0.19%)</title><rect x="98.8810%" y="133" width="0.1914%" height="15" fill="rgb(228,22,38)" fg:x="769851" fg:w="1490"/><text x="99.1740%" y="143.50"></text></g><g><title>motoko_rts::idl::sub::h3dfa5ebac339dd50 (1,183 instructions, 0.15%)</title><rect x="99.1120%" y="133" width="0.1519%" height="15" fill="rgb(235,168,5)" fg:x="771649" fg:w="1183"/><text x="99.4049%" y="143.50"></text></g><g><title>motoko_rts::idl::sub::h3dfa5ebac339dd50 (3,971 instructions, 0.51%)</title><rect x="98.8004%" y="149" width="0.5100%" height="15" fill="rgb(221,155,16)" fg:x="769223" fg:w="3971"/><text x="99.0933%" y="159.50"></text></g><g><title>idl_sub (4,015 instructions, 0.52%)</title><rect x="98.8004%" y="165" width="0.5157%" height="15" fill="rgb(215,215,53)" fg:x="769223" fg:w="4015"/><text x="99.0933%" y="175.50"></text></g><g><title>idl_sub (4,027 instructions, 0.52%)</title><rect x="98.8004%" y="181" width="0.5172%" height="15" fill="rgb(223,4,10)" fg:x="769223" fg:w="4027"/><text x="99.0933%" y="191.50"></text></g><g><title>memcpy (86 instructions, 0.01%)</title><rect x="99.3375%" y="181" width="0.0110%" height="15" fill="rgb(234,103,6)" fg:x="773405" fg:w="86"/><text x="99.6305%" y="191.50"></text></g><g><title>@deserialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (4,380 instructions, 0.56%)</title><rect x="98.8004%" y="197" width="0.5626%" height="15" fill="rgb(227,97,0)" fg:x="769223" fg:w="4380"/><text x="99.0933%" y="207.50"></text></g><g><title>@deserialize&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (7,848 instructions, 1.01%)</title><rect x="98.3811%" y="213" width="1.0080%" height="15" fill="rgb(234,150,53)" fg:x="765959" fg:w="7848"/><text x="98.6741%" y="223.50"></text></g><g><title>@new_async (266 instructions, 0.03%)</title><rect x="99.4140%" y="133" width="0.0342%" height="15" fill="rgb(228,201,54)" fg:x="774001" fg:w="266"/><text x="99.7070%" y="143.50"></text></g><g><title>@buffer_size&lt;(Nt)&gt; (110 instructions, 0.01%)</title><rect x="99.4744%" y="117" width="0.0141%" height="15" fill="rgb(222,22,37)" fg:x="774471" fg:w="110"/><text x="99.7674%" y="127.50"></text></g><g><title>text_to_buf (84 instructions, 0.01%)</title><rect x="99.5115%" y="85" width="0.0108%" height="15" fill="rgb(237,53,32)" fg:x="774760" fg:w="84"/><text x="99.8045%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (127 instructions, 0.02%)</title><rect x="99.5095%" y="101" width="0.0163%" height="15" fill="rgb(233,25,53)" fg:x="774744" fg:w="127"/><text x="99.8024%" y="111.50"></text></g><g><title>@serialize_go&lt;(Nt)&gt; (188 instructions, 0.02%)</title><rect x="99.5043%" y="117" width="0.0241%" height="15" fill="rgb(210,40,34)" fg:x="774704" fg:w="188"/><text x="99.7973%" y="127.50"></text></g><g><title>@serialize&lt;Nt&gt; (484 instructions, 0.06%)</title><rect x="99.4744%" y="133" width="0.0622%" height="15" fill="rgb(241,220,44)" fg:x="774471" fg:w="484"/><text x="99.7674%" y="143.50"></text></g><g><title>memset (244 instructions, 0.03%)</title><rect x="99.5418%" y="37" width="0.0313%" height="15" fill="rgb(235,28,35)" fg:x="774996" fg:w="244"/><text x="99.8348%" y="47.50"></text></g><g><title>mp_calloc (308 instructions, 0.04%)</title><rect x="99.5370%" y="53" width="0.0396%" height="15" fill="rgb(210,56,17)" fg:x="774958" fg:w="308"/><text x="99.8299%" y="63.50"></text></g><g><title>mp_init (323 instructions, 0.04%)</title><rect x="99.5370%" y="69" width="0.0415%" height="15" fill="rgb(224,130,29)" fg:x="774958" fg:w="323"/><text x="99.8299%" y="79.50"></text></g><g><title>mp_set_u64 (480 instructions, 0.06%)</title><rect x="99.5785%" y="53" width="0.0617%" height="15" fill="rgb(235,212,8)" fg:x="775281" fg:w="480"/><text x="99.8714%" y="63.50"></text></g><g><title>mp_set_i64 (494 instructions, 0.06%)</title><rect x="99.5785%" y="69" width="0.0635%" height="15" fill="rgb(223,33,50)" fg:x="775281" fg:w="494"/><text x="99.8714%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 0.11%)</title><rect x="99.5370%" y="85" width="0.1144%" height="15" fill="rgb(219,149,13)" fg:x="774958" fg:w="891"/><text x="99.8299%" y="95.50"></text></g><g><title>B_lt (963 instructions, 0.12%)</title><rect x="99.5370%" y="101" width="0.1237%" height="15" fill="rgb(250,156,29)" fg:x="774958" fg:w="963"/><text x="99.8299%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 0.13%)</title><rect x="99.5370%" y="117" width="0.1283%" height="15" fill="rgb(216,193,19)" fg:x="774958" fg:w="999"/><text x="99.8299%" y="127.50"></text></g><g><title>@add_cycles (1,009 instructions, 0.13%)</title><rect x="99.5366%" y="133" width="0.1296%" height="15" fill="rgb(216,135,14)" fg:x="774955" fg:w="1009"/><text x="99.8296%" y="143.50"></text></g><g><title>enqueue (118 instructions, 0.02%)</title><rect x="99.6758%" y="117" width="0.0152%" height="15" fill="rgb(241,47,5)" fg:x="776039" fg:w="118"/><text x="99.9688%" y="127.50"></text></g><g><title>$lambda (167 instructions, 0.02%)</title><rect x="99.6725%" y="133" width="0.0214%" height="15" fill="rgb(233,42,35)" fg:x="776013" fg:w="167"/><text x="99.9654%" y="143.50"></text></g><g><title>$k/37 (2,412 instructions, 0.31%)</title><rect x="99.4088%" y="149" width="0.3098%" height="15" fill="rgb(231,13,6)" fg:x="773960" fg:w="2412"/><text x="99.7018%" y="159.50"></text></g><g><title>$k/38 (2,479 instructions, 0.32%)</title><rect x="99.4040%" y="165" width="0.3184%" height="15" fill="rgb(207,181,40)" fg:x="773923" fg:w="2479"/><text x="99.6970%" y="175.50"></text></g><g><title>anon-func-349.15 (2,505 instructions, 0.32%)</title><rect x="99.4036%" y="181" width="0.3217%" height="15" fill="rgb(254,173,49)" fg:x="773920" fg:w="2505"/><text x="99.6966%" y="191.50"></text></g><g><title>fulfill (2,672 instructions, 0.34%)</title><rect x="99.3891%" y="197" width="0.3432%" height="15" fill="rgb(221,1,38)" fg:x="773807" fg:w="2672"/><text x="99.6821%" y="207.50"></text></g><g><title>$lambda (2,680 instructions, 0.34%)</title><rect x="99.3891%" y="213" width="0.3442%" height="15" fill="rgb(206,124,46)" fg:x="773807" fg:w="2680"/><text x="99.6821%" y="223.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (11,189 instructions, 1.44%)</title><rect x="98.3680%" y="229" width="1.4371%" height="15" fill="rgb(249,21,11)" fg:x="765857" fg:w="11189"/><text x="98.6610%" y="239.50"></text></g><g><title>parse_idl_header (207 instructions, 0.03%)</title><rect x="99.8183%" y="197" width="0.0266%" height="15" fill="rgb(222,201,40)" fg:x="777148" fg:w="207"/><text x="100.1112%" y="207.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 0.06%)</title><rect x="99.8183%" y="213" width="0.0560%" height="15" fill="rgb(235,61,29)" fg:x="777148" fg:w="436"/><text x="100.1112%" y="223.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 0.03%)</title><rect x="99.8892%" y="133" width="0.0277%" height="15" fill="rgb(219,207,3)" fg:x="777700" fg:w="216"/><text x="100.1821%" y="143.50"></text></g><g><title>$lambda (251 instructions, 0.03%)</title><rect x="99.8892%" y="149" width="0.0322%" height="15" fill="rgb(222,56,46)" fg:x="777700" fg:w="251"/><text x="100.1821%" y="159.50"></text></g><g><title>$lambda (258 instructions, 0.03%)</title><rect x="99.8892%" y="165" width="0.0331%" height="15" fill="rgb(239,76,54)" fg:x="777700" fg:w="258"/><text x="100.1821%" y="175.50"></text></g><g><title>anon-func-349.15 (284 instructions, 0.04%)</title><rect x="99.8888%" y="181" width="0.0365%" height="15" fill="rgb(231,124,27)" fg:x="777697" fg:w="284"/><text x="100.1817%" y="191.50"></text></g><g><title>fulfill (451 instructions, 0.06%)</title><rect x="99.8743%" y="197" width="0.0579%" height="15" fill="rgb(249,195,6)" fg:x="777584" fg:w="451"/><text x="100.1672%" y="207.50"></text></g><g><title>$lambda (459 instructions, 0.06%)</title><rect x="99.8743%" y="213" width="0.0590%" height="15" fill="rgb(237,174,47)" fg:x="777584" fg:w="459"/><text x="100.1672%" y="223.50"></text></g><g><title>all (778,563 instructions, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="778563"/><text x="0.2930%" y="255.50"></text></g><g><title>@callback&lt;u&gt; (1,517 instructions, 0.19%)</title><rect x="99.8052%" y="229" width="0.1948%" height="15" fill="rgb(231,57,52)" fg:x="777046" fg:w="1517"/><text x="100.0981%" y="239.50"></text></g></svg></svg>