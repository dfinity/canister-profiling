<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="645585"><g><title>parse_idl_header (342 instructions, 0.05%)</title><rect x="0.0064%" y="181" width="0.0530%" height="15" fill="rgb(227,0,7)" fg:x="41" fg:w="342"/><text x="0.2993%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 0.01%)</title><rect x="0.0779%" y="181" width="0.0122%" height="15" fill="rgb(217,0,24)" fg:x="503" fg:w="79"/><text x="0.3709%" y="191.50"></text></g><g><title>utf8_validate (179 instructions, 0.03%)</title><rect x="0.1066%" y="165" width="0.0277%" height="15" fill="rgb(221,193,54)" fg:x="688" fg:w="179"/><text x="0.3995%" y="175.50"></text></g><g><title>memcpy (114 instructions, 0.02%)</title><rect x="0.1405%" y="165" width="0.0177%" height="15" fill="rgb(248,212,6)" fg:x="907" fg:w="114"/><text x="0.4335%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (421 instructions, 0.07%)</title><rect x="0.0994%" y="181" width="0.0652%" height="15" fill="rgb(208,68,35)" fg:x="642" fg:w="421"/><text x="0.3924%" y="191.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="0.1860%" y="101" width="0.0361%" height="15" fill="rgb(232,128,0)" fg:x="1201" fg:w="233"/><text x="0.4790%" y="111.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="0.1803%" y="117" width="0.0455%" height="15" fill="rgb(207,160,47)" fg:x="1164" fg:w="294"/><text x="0.4733%" y="127.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="0.1803%" y="133" width="0.0479%" height="15" fill="rgb(228,23,34)" fg:x="1164" fg:w="309"/><text x="0.4733%" y="143.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="0.2282%" y="133" width="0.0742%" height="15" fill="rgb(218,30,26)" fg:x="1473" fg:w="479"/><text x="0.5211%" y="143.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="0.1803%" y="149" width="0.1343%" height="15" fill="rgb(220,122,19)" fg:x="1164" fg:w="867"/><text x="0.4733%" y="159.50"></text></g><g><title>B_eq (925 instructions, 0.14%)</title><rect x="0.1803%" y="165" width="0.1433%" height="15" fill="rgb(250,228,42)" fg:x="1164" fg:w="925"/><text x="0.4733%" y="175.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="0.3293%" y="101" width="0.0361%" height="15" fill="rgb(240,193,28)" fg:x="2126" fg:w="233"/><text x="0.6223%" y="111.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="0.3236%" y="117" width="0.0455%" height="15" fill="rgb(216,20,37)" fg:x="2089" fg:w="294"/><text x="0.6166%" y="127.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="0.3236%" y="133" width="0.0479%" height="15" fill="rgb(206,188,39)" fg:x="2089" fg:w="309"/><text x="0.6166%" y="143.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="0.3714%" y="133" width="0.0742%" height="15" fill="rgb(217,207,13)" fg:x="2398" fg:w="479"/><text x="0.6644%" y="143.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="0.3236%" y="149" width="0.1343%" height="15" fill="rgb(231,73,38)" fg:x="2089" fg:w="867"/><text x="0.6166%" y="159.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="0.4636%" y="117" width="0.0361%" height="15" fill="rgb(225,20,46)" fg:x="2993" fg:w="233"/><text x="0.7566%" y="127.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="0.4579%" y="133" width="0.0455%" height="15" fill="rgb(210,31,41)" fg:x="2956" fg:w="294"/><text x="0.7508%" y="143.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="0.4579%" y="149" width="0.0479%" height="15" fill="rgb(221,200,47)" fg:x="2956" fg:w="309"/><text x="0.7508%" y="159.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="0.5057%" y="133" width="0.0263%" height="15" fill="rgb(226,26,5)" fg:x="3265" fg:w="170"/><text x="0.7987%" y="143.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="0.5057%" y="149" width="0.0288%" height="15" fill="rgb(249,33,26)" fg:x="3265" fg:w="186"/><text x="0.7987%" y="159.50"></text></g><g><title>mp_count_bits (226 instructions, 0.04%)</title><rect x="0.5392%" y="133" width="0.0350%" height="15" fill="rgb(235,183,28)" fg:x="3481" fg:w="226"/><text x="0.8322%" y="143.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="0.5392%" y="149" width="0.0401%" height="15" fill="rgb(221,5,38)" fg:x="3481" fg:w="259"/><text x="0.8322%" y="159.50"></text></g><g><title>B_add (1,735 instructions, 0.27%)</title><rect x="0.3236%" y="165" width="0.2687%" height="15" fill="rgb(247,18,42)" fg:x="2089" fg:w="1735"/><text x="0.6166%" y="175.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="0.6122%" y="85" width="0.0361%" height="15" fill="rgb(241,131,45)" fg:x="3952" fg:w="233"/><text x="0.9051%" y="95.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="0.6064%" y="101" width="0.0455%" height="15" fill="rgb(249,31,29)" fg:x="3915" fg:w="294"/><text x="0.8994%" y="111.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="0.6064%" y="117" width="0.0479%" height="15" fill="rgb(225,111,53)" fg:x="3915" fg:w="309"/><text x="0.8994%" y="127.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="0.6543%" y="117" width="0.0742%" height="15" fill="rgb(238,160,17)" fg:x="4224" fg:w="479"/><text x="0.9473%" y="127.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="0.6064%" y="133" width="0.1343%" height="15" fill="rgb(214,148,48)" fg:x="3915" fg:w="867"/><text x="0.8994%" y="143.50"></text></g><g><title>B_eq (925 instructions, 0.14%)</title><rect x="0.6064%" y="149" width="0.1433%" height="15" fill="rgb(232,36,49)" fg:x="3915" fg:w="925"/><text x="0.8994%" y="159.50"></text></g><g><title>@new_async (1,098 instructions, 0.17%)</title><rect x="0.5995%" y="165" width="0.1701%" height="15" fill="rgb(209,103,24)" fg:x="3870" fg:w="1098"/><text x="0.8924%" y="175.50"></text></g><g><title>remember_continuation (3,699 instructions, 0.57%)</title><rect x="0.7979%" y="165" width="0.5730%" height="15" fill="rgb(229,88,8)" fg:x="5151" fg:w="3699"/><text x="1.0908%" y="175.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 0.03%)</title><rect x="1.3722%" y="165" width="0.0311%" height="15" fill="rgb(213,181,19)" fg:x="8859" fg:w="201"/><text x="1.6652%" y="175.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="1.4091%" y="85" width="0.0361%" height="15" fill="rgb(254,191,54)" fg:x="9097" fg:w="233"/><text x="1.7021%" y="95.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="1.4034%" y="101" width="0.0455%" height="15" fill="rgb(241,83,37)" fg:x="9060" fg:w="294"/><text x="1.6963%" y="111.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="1.4034%" y="117" width="0.0479%" height="15" fill="rgb(233,36,39)" fg:x="9060" fg:w="309"/><text x="1.6963%" y="127.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="1.4512%" y="117" width="0.0742%" height="15" fill="rgb(226,3,54)" fg:x="9369" fg:w="479"/><text x="1.7442%" y="127.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="1.4034%" y="133" width="0.1343%" height="15" fill="rgb(245,192,40)" fg:x="9060" fg:w="867"/><text x="1.6963%" y="143.50"></text></g><g><title>B_eq (925 instructions, 0.14%)</title><rect x="1.4034%" y="149" width="0.1433%" height="15" fill="rgb(238,167,29)" fg:x="9060" fg:w="925"/><text x="1.6963%" y="159.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="1.5467%" y="149" width="0.0101%" height="15" fill="rgb(232,182,51)" fg:x="9985" fg:w="65"/><text x="1.8396%" y="159.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="1.5625%" y="101" width="0.0361%" height="15" fill="rgb(231,60,39)" fg:x="10087" fg:w="233"/><text x="1.8554%" y="111.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="1.5567%" y="117" width="0.0455%" height="15" fill="rgb(208,69,12)" fg:x="10050" fg:w="294"/><text x="1.8497%" y="127.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="1.5567%" y="133" width="0.0479%" height="15" fill="rgb(235,93,37)" fg:x="10050" fg:w="309"/><text x="1.8497%" y="143.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.6046%" y="117" width="0.0125%" height="15" fill="rgb(213,116,39)" fg:x="10359" fg:w="81"/><text x="1.8976%" y="127.50"></text></g><g><title>mp_zero (467 instructions, 0.07%)</title><rect x="1.6171%" y="101" width="0.0723%" height="15" fill="rgb(222,207,29)" fg:x="10440" fg:w="467"/><text x="1.9101%" y="111.50"></text></g><g><title>mp_rshd (479 instructions, 0.07%)</title><rect x="1.6171%" y="117" width="0.0742%" height="15" fill="rgb(206,96,30)" fg:x="10440" fg:w="479"/><text x="1.9101%" y="127.50"></text></g><g><title>mp_div_2d (607 instructions, 0.09%)</title><rect x="1.6046%" y="133" width="0.0940%" height="15" fill="rgb(218,138,4)" fg:x="10359" fg:w="607"/><text x="1.8976%" y="143.50"></text></g><g><title>B_rsh (1,081 instructions, 0.17%)</title><rect x="1.5567%" y="149" width="0.1674%" height="15" fill="rgb(250,191,14)" fg:x="10050" fg:w="1081"/><text x="1.8497%" y="159.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="1.7242%" y="149" width="0.0110%" height="15" fill="rgb(239,60,40)" fg:x="11131" fg:w="71"/><text x="2.0171%" y="159.50"></text></g><g><title>@add_cycles (2,172 instructions, 0.34%)</title><rect x="1.4034%" y="165" width="0.3364%" height="15" fill="rgb(206,27,48)" fg:x="9060" fg:w="2172"/><text x="1.6963%" y="175.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="1.7438%" y="165" width="0.0130%" height="15" fill="rgb(225,35,8)" fg:x="11258" fg:w="84"/><text x="2.0368%" y="175.50"></text></g><g><title>$lambda.1 (10,540 instructions, 1.63%)</title><rect x="0.1670%" y="181" width="1.6326%" height="15" fill="rgb(250,213,24)" fg:x="1078" fg:w="10540"/><text x="0.4599%" y="191.50"></text></g><g><title>put (12,416 instructions, 1.92%)</title><rect x="0.0000%" y="197" width="1.9232%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="12416"/><text x="0.2930%" y="207.50"></text></g><g><title>memcmp (215 instructions, 0.03%)</title><rect x="1.9347%" y="181" width="0.0333%" height="15" fill="rgb(231,138,38)" fg:x="12490" fg:w="215"/><text x="2.2276%" y="191.50"></text></g><g><title>parse_idl_header (267 instructions, 0.04%)</title><rect x="1.9731%" y="181" width="0.0414%" height="15" fill="rgb(231,145,46)" fg:x="12738" fg:w="267"/><text x="2.2661%" y="191.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.1224%" y="53" width="0.0361%" height="15" fill="rgb(251,118,11)" fg:x="13702" fg:w="233"/><text x="2.4154%" y="63.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.1167%" y="69" width="0.0455%" height="15" fill="rgb(217,147,25)" fg:x="13665" fg:w="294"/><text x="2.4097%" y="79.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.1167%" y="85" width="0.0479%" height="15" fill="rgb(247,81,37)" fg:x="13665" fg:w="309"/><text x="2.4097%" y="95.50"></text></g><g><title>mp_set_u64 (497 instructions, 0.08%)</title><rect x="2.1645%" y="85" width="0.0770%" height="15" fill="rgb(209,12,38)" fg:x="13974" fg:w="497"/><text x="2.4575%" y="95.50"></text></g><g><title>bigint_of_word64 (874 instructions, 0.14%)</title><rect x="2.1167%" y="101" width="0.1354%" height="15" fill="rgb(227,1,9)" fg:x="13665" fg:w="874"/><text x="2.4097%" y="111.50"></text></g><g><title>from_word128_ptr (889 instructions, 0.14%)</title><rect x="2.1167%" y="117" width="0.1377%" height="15" fill="rgb(248,47,43)" fg:x="13665" fg:w="889"/><text x="2.4097%" y="127.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="2.2544%" y="117" width="0.0101%" height="15" fill="rgb(221,10,30)" fg:x="14554" fg:w="65"/><text x="2.5474%" y="127.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.2702%" y="69" width="0.0361%" height="15" fill="rgb(210,229,1)" fg:x="14656" fg:w="233"/><text x="2.5632%" y="79.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.2645%" y="85" width="0.0455%" height="15" fill="rgb(222,148,37)" fg:x="14619" fg:w="294"/><text x="2.5574%" y="95.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.2645%" y="101" width="0.0479%" height="15" fill="rgb(234,67,33)" fg:x="14619" fg:w="309"/><text x="2.5574%" y="111.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="2.3123%" y="85" width="0.0125%" height="15" fill="rgb(247,98,35)" fg:x="14928" fg:w="81"/><text x="2.6053%" y="95.50"></text></g><g><title>mp_zero (467 instructions, 0.07%)</title><rect x="2.3249%" y="69" width="0.0723%" height="15" fill="rgb(247,138,52)" fg:x="15009" fg:w="467"/><text x="2.6178%" y="79.50"></text></g><g><title>mp_rshd (479 instructions, 0.07%)</title><rect x="2.3249%" y="85" width="0.0742%" height="15" fill="rgb(213,79,30)" fg:x="15009" fg:w="479"/><text x="2.6178%" y="95.50"></text></g><g><title>mp_div_2d (607 instructions, 0.09%)</title><rect x="2.3123%" y="101" width="0.0940%" height="15" fill="rgb(246,177,23)" fg:x="14928" fg:w="607"/><text x="2.6053%" y="111.50"></text></g><g><title>B_rsh (1,081 instructions, 0.17%)</title><rect x="2.2645%" y="117" width="0.1674%" height="15" fill="rgb(230,62,27)" fg:x="14619" fg:w="1081"/><text x="2.5574%" y="127.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="2.4319%" y="117" width="0.0110%" height="15" fill="rgb(216,154,8)" fg:x="15700" fg:w="71"/><text x="2.7249%" y="127.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.4486%" y="53" width="0.0361%" height="15" fill="rgb(244,35,45)" fg:x="15808" fg:w="233"/><text x="2.7416%" y="63.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.4429%" y="69" width="0.0455%" height="15" fill="rgb(251,115,12)" fg:x="15771" fg:w="294"/><text x="2.7359%" y="79.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.4429%" y="85" width="0.0479%" height="15" fill="rgb(240,54,50)" fg:x="15771" fg:w="309"/><text x="2.7359%" y="95.50"></text></g><g><title>mp_set_u64 (497 instructions, 0.08%)</title><rect x="2.4908%" y="85" width="0.0770%" height="15" fill="rgb(233,84,52)" fg:x="16080" fg:w="497"/><text x="2.7837%" y="95.50"></text></g><g><title>bigint_of_word64 (874 instructions, 0.14%)</title><rect x="2.4429%" y="101" width="0.1354%" height="15" fill="rgb(207,117,47)" fg:x="15771" fg:w="874"/><text x="2.7359%" y="111.50"></text></g><g><title>from_word128_ptr (889 instructions, 0.14%)</title><rect x="2.4429%" y="117" width="0.1377%" height="15" fill="rgb(249,43,39)" fg:x="15771" fg:w="889"/><text x="2.7359%" y="127.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.5890%" y="53" width="0.0361%" height="15" fill="rgb(209,38,44)" fg:x="16714" fg:w="233"/><text x="2.8819%" y="63.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.5832%" y="69" width="0.0455%" height="15" fill="rgb(236,212,23)" fg:x="16677" fg:w="294"/><text x="2.8762%" y="79.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.5832%" y="85" width="0.0479%" height="15" fill="rgb(242,79,21)" fg:x="16677" fg:w="309"/><text x="2.8762%" y="95.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="2.6311%" y="85" width="0.0742%" height="15" fill="rgb(211,96,35)" fg:x="16986" fg:w="479"/><text x="2.9241%" y="95.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="2.5832%" y="101" width="0.1343%" height="15" fill="rgb(253,215,40)" fg:x="16677" fg:w="867"/><text x="2.8762%" y="111.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.7233%" y="69" width="0.0361%" height="15" fill="rgb(211,81,21)" fg:x="17581" fg:w="233"/><text x="3.0162%" y="79.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.7175%" y="85" width="0.0455%" height="15" fill="rgb(208,190,38)" fg:x="17544" fg:w="294"/><text x="3.0105%" y="95.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.7175%" y="101" width="0.0479%" height="15" fill="rgb(235,213,38)" fg:x="17544" fg:w="309"/><text x="3.0105%" y="111.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="2.7654%" y="85" width="0.0263%" height="15" fill="rgb(237,122,38)" fg:x="17853" fg:w="170"/><text x="3.0584%" y="95.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="2.7654%" y="101" width="0.0288%" height="15" fill="rgb(244,218,35)" fg:x="17853" fg:w="186"/><text x="3.0584%" y="111.50"></text></g><g><title>mp_count_bits (226 instructions, 0.04%)</title><rect x="2.7989%" y="85" width="0.0350%" height="15" fill="rgb(240,68,47)" fg:x="18069" fg:w="226"/><text x="3.0918%" y="95.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="2.7989%" y="101" width="0.0401%" height="15" fill="rgb(210,16,53)" fg:x="18069" fg:w="259"/><text x="3.0918%" y="111.50"></text></g><g><title>B_add (1,735 instructions, 0.27%)</title><rect x="2.5832%" y="117" width="0.2687%" height="15" fill="rgb(235,124,12)" fg:x="16677" fg:w="1735"/><text x="2.8762%" y="127.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="2.8710%" y="37" width="0.0361%" height="15" fill="rgb(224,169,11)" fg:x="18535" fg:w="233"/><text x="3.1640%" y="47.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="2.8653%" y="53" width="0.0455%" height="15" fill="rgb(250,166,2)" fg:x="18498" fg:w="294"/><text x="3.1583%" y="63.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="2.8653%" y="69" width="0.0479%" height="15" fill="rgb(242,216,29)" fg:x="18498" fg:w="309"/><text x="3.1583%" y="79.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="2.9132%" y="69" width="0.0742%" height="15" fill="rgb(230,116,27)" fg:x="18807" fg:w="479"/><text x="3.2061%" y="79.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="2.8653%" y="85" width="0.1343%" height="15" fill="rgb(228,99,48)" fg:x="18498" fg:w="867"/><text x="3.1583%" y="95.50"></text></g><g><title>B_eq (925 instructions, 0.14%)</title><rect x="2.8653%" y="101" width="0.1433%" height="15" fill="rgb(253,11,6)" fg:x="18498" fg:w="925"/><text x="3.1583%" y="111.50"></text></g><g><title>@new_async (1,098 instructions, 0.17%)</title><rect x="2.8583%" y="117" width="0.1701%" height="15" fill="rgb(247,143,39)" fg:x="18453" fg:w="1098"/><text x="3.1513%" y="127.50"></text></g><g><title>memcpy (130 instructions, 0.02%)</title><rect x="3.0616%" y="117" width="0.0201%" height="15" fill="rgb(236,97,10)" fg:x="19765" fg:w="130"/><text x="3.3545%" y="127.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="3.1054%" y="37" width="0.0361%" height="15" fill="rgb(233,208,19)" fg:x="20048" fg:w="233"/><text x="3.3984%" y="47.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="3.0997%" y="53" width="0.0455%" height="15" fill="rgb(216,164,2)" fg:x="20011" fg:w="294"/><text x="3.3926%" y="63.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="3.0997%" y="69" width="0.0479%" height="15" fill="rgb(220,129,5)" fg:x="20011" fg:w="309"/><text x="3.3926%" y="79.50"></text></g><g><title>mp_set_u64 (479 instructions, 0.07%)</title><rect x="3.1475%" y="69" width="0.0742%" height="15" fill="rgb(242,17,10)" fg:x="20320" fg:w="479"/><text x="3.4405%" y="79.50"></text></g><g><title>bigint_of_int64 (867 instructions, 0.13%)</title><rect x="3.0997%" y="85" width="0.1343%" height="15" fill="rgb(242,107,0)" fg:x="20011" fg:w="867"/><text x="3.3926%" y="95.50"></text></g><g><title>B_eq (925 instructions, 0.14%)</title><rect x="3.0997%" y="101" width="0.1433%" height="15" fill="rgb(251,28,31)" fg:x="20011" fg:w="925"/><text x="3.3926%" y="111.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="3.2430%" y="101" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="20936" fg:w="65"/><text x="3.5359%" y="111.50"></text></g><g><title>memset (233 instructions, 0.04%)</title><rect x="3.2587%" y="53" width="0.0361%" height="15" fill="rgb(215,21,27)" fg:x="21038" fg:w="233"/><text x="3.5517%" y="63.50"></text></g><g><title>mp_calloc (294 instructions, 0.05%)</title><rect x="3.2530%" y="69" width="0.0455%" height="15" fill="rgb(232,23,21)" fg:x="21001" fg:w="294"/><text x="3.5460%" y="79.50"></text></g><g><title>mp_init (309 instructions, 0.05%)</title><rect x="3.2530%" y="85" width="0.0479%" height="15" fill="rgb(244,5,23)" fg:x="21001" fg:w="309"/><text x="3.5460%" y="95.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="3.3009%" y="69" width="0.0125%" height="15" fill="rgb(226,81,46)" fg:x="21310" fg:w="81"/><text x="3.5939%" y="79.50"></text></g><g><title>mp_zero (467 instructions, 0.07%)</title><rect x="3.3134%" y="53" width="0.0723%" height="15" fill="rgb(247,70,30)" fg:x="21391" fg:w="467"/><text x="3.6064%" y="63.50"></text></g><g><title>mp_rshd (479 instructions, 0.07%)</title><rect x="3.3134%" y="69" width="0.0742%" height="15" fill="rgb(212,68,19)" fg:x="21391" fg:w="479"/><text x="3.6064%" y="79.50"></text></g><g><title>mp_div_2d (607 instructions, 0.09%)</title><rect x="3.3009%" y="85" width="0.0940%" height="15" fill="rgb(240,187,13)" fg:x="21310" fg:w="607"/><text x="3.5939%" y="95.50"></text></g><g><title>B_rsh (1,081 instructions, 0.17%)</title><rect x="3.2530%" y="101" width="0.1674%" height="15" fill="rgb(223,113,26)" fg:x="21001" fg:w="1081"/><text x="3.5460%" y="111.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="3.4205%" y="101" width="0.0110%" height="15" fill="rgb(206,192,2)" fg:x="22082" fg:w="71"/><text x="3.7134%" y="111.50"></text></g><g><title>@add_cycles (2,172 instructions, 0.34%)</title><rect x="3.0997%" y="117" width="0.3364%" height="15" fill="rgb(241,108,4)" fg:x="20011" fg:w="2172"/><text x="3.3926%" y="127.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="3.4401%" y="117" width="0.0130%" height="15" fill="rgb(247,173,49)" fg:x="22209" fg:w="84"/><text x="3.7331%" y="127.50"></text></g><g><title>$lambda (9,235 instructions, 1.43%)</title><rect x="2.1004%" y="133" width="1.4305%" height="15" fill="rgb(224,114,35)" fg:x="13560" fg:w="9235"/><text x="2.3934%" y="143.50"></text></g><g><title>$lambda.6 (9,281 instructions, 1.44%)</title><rect x="2.0981%" y="149" width="1.4376%" height="15" fill="rgb(245,159,27)" fg:x="13545" fg:w="9281"/><text x="2.3911%" y="159.50"></text></g><g><title>$lambda.5 (9,825 instructions, 1.52%)</title><rect x="2.0368%" y="165" width="1.5219%" height="15" fill="rgb(245,172,44)" fg:x="13149" fg:w="9825"/><text x="2.3297%" y="175.50"></text></g><g><title>anon_async (9,865 instructions, 1.53%)</title><rect x="2.0344%" y="181" width="1.5281%" height="15" fill="rgb(236,23,11)" fg:x="13134" fg:w="9865"/><text x="2.3274%" y="191.50"></text></g><g><title>__motoko_async_helper (11,400 instructions, 1.77%)</title><rect x="1.9232%" y="197" width="1.7658%" height="15" fill="rgb(205,117,38)" fg:x="12416" fg:w="11400"/><text x="2.2162%" y="207.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="3.7310%" y="165" width="0.0307%" height="15" fill="rgb(237,72,25)" fg:x="24087" fg:w="198"/><text x="4.0240%" y="175.50"></text></g><g><title>parse_idl_header (811 instructions, 0.13%)</title><rect x="3.7024%" y="181" width="0.1256%" height="15" fill="rgb(244,70,9)" fg:x="23902" fg:w="811"/><text x="3.9953%" y="191.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="3.8708%" y="181" width="0.0307%" height="15" fill="rgb(217,125,39)" fg:x="24989" fg:w="198"/><text x="4.1637%" y="191.50"></text></g><g><title>memcpy (157 instructions, 0.02%)</title><rect x="3.9230%" y="181" width="0.0243%" height="15" fill="rgb(235,36,10)" fg:x="25326" fg:w="157"/><text x="4.2159%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="3.9725%" y="101" width="0.0273%" height="15" fill="rgb(251,123,47)" fg:x="25646" fg:w="176"/><text x="4.2655%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="4.0554%" y="101" width="0.0112%" height="15" fill="rgb(221,13,13)" fg:x="26181" fg:w="72"/><text x="4.3484%" y="111.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="4.0803%" y="101" width="0.0220%" height="15" fill="rgb(238,131,9)" fg:x="26342" fg:w="142"/><text x="4.3733%" y="111.50"></text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="4.1113%" y="85" width="0.0101%" height="15" fill="rgb(211,50,8)" fg:x="26542" fg:w="65"/><text x="4.4043%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="4.1099%" y="101" width="0.0160%" height="15" fill="rgb(245,182,24)" fg:x="26533" fg:w="103"/><text x="4.4029%" y="111.50"></text></g><g><title>memcpy (498,320 instructions, 77.19%)</title><rect x="4.1375%" y="85" width="77.1889%" height="15" fill="rgb(242,14,37)" fg:x="26711" fg:w="498320"/><text x="4.4305%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (498,394 instructions, 77.20%)</title><rect x="4.1305%" y="101" width="77.2004%" height="15" fill="rgb(246,228,12)" fg:x="26666" fg:w="498394"/><text x="4.4235%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="81.3495%" y="69" width="0.0101%" height="15" fill="rgb(213,55,15)" fg:x="525180" fg:w="65"/><text x="81.6424%" y="79.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="81.3481%" y="85" width="0.0160%" height="15" fill="rgb(209,9,3)" fg:x="525171" fg:w="103"/><text x="81.6410%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="81.3481%" y="101" width="0.0173%" height="15" fill="rgb(230,59,30)" fg:x="525171" fg:w="112"/><text x="81.6410%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="81.3654%" y="101" width="0.0112%" height="15" fill="rgb(209,121,21)" fg:x="525283" fg:w="72"/><text x="81.6584%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="81.3907%" y="85" width="0.0130%" height="15" fill="rgb(220,109,13)" fg:x="525446" fg:w="84"/><text x="81.6836%" y="95.50"></text></g><g><title>$lambda.9 (118 instructions, 0.02%)</title><rect x="81.3884%" y="101" width="0.0183%" height="15" fill="rgb(232,18,1)" fg:x="525431" fg:w="118"/><text x="81.6813%" y="111.50"></text></g><g><title>$k/21 (606,821 instructions, 94.00%)</title><rect x="3.9621%" y="117" width="93.9955%" height="15" fill="rgb(215,41,42)" fg:x="25579" fg:w="606821"/><text x="4.2551%" y="127.50">$k/21</text></g><g><title>$k/22 (606,855 instructions, 94.00%)</title><rect x="3.9597%" y="133" width="94.0008%" height="15" fill="rgb(224,123,36)" fg:x="25563" fg:w="606855"/><text x="4.2526%" y="143.50">$k/22</text></g><g><title>anon-func-352.15 (606,877 instructions, 94.00%)</title><rect x="3.9597%" y="149" width="94.0042%" height="15" fill="rgb(240,125,3)" fg:x="25563" fg:w="606877"/><text x="4.2526%" y="159.50">anon-func-352.15</text></g><g><title>fulfill (607,015 instructions, 94.03%)</title><rect x="3.9479%" y="165" width="94.0256%" height="15" fill="rgb(205,98,50)" fg:x="25487" fg:w="607015"/><text x="4.2409%" y="175.50">fulfill</text></g><g><title>$lambda.11 (607,022 instructions, 94.03%)</title><rect x="3.9479%" y="181" width="94.0267%" height="15" fill="rgb(205,185,37)" fg:x="25487" fg:w="607022"/><text x="4.2409%" y="191.50">$lambda.11</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (609,663 instructions, 94.44%)</title><rect x="3.6891%" y="197" width="94.4357%" height="15" fill="rgb(238,207,15)" fg:x="23816" fg:w="609663"/><text x="3.9820%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="98.1381%" y="165" width="0.0297%" height="15" fill="rgb(213,199,42)" fg:x="633565" fg:w="192"/><text x="98.4311%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (392 instructions, 0.06%)</title><rect x="98.1381%" y="181" width="0.0607%" height="15" fill="rgb(235,201,11)" fg:x="633565" fg:w="392"/><text x="98.4311%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="98.2194%" y="69" width="0.0146%" height="15" fill="rgb(207,46,11)" fg:x="634090" fg:w="94"/><text x="98.5124%" y="79.50"></text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="98.2405%" y="37" width="0.0101%" height="15" fill="rgb(241,35,35)" fg:x="634226" fg:w="65"/><text x="98.5335%" y="47.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="98.2391%" y="53" width="0.0160%" height="15" fill="rgb(243,32,47)" fg:x="634217" fg:w="103"/><text x="98.5321%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="98.2391%" y="69" width="0.0173%" height="15" fill="rgb(247,202,23)" fg:x="634217" fg:w="112"/><text x="98.5321%" y="79.50"></text></g><g><title>reply_with_data (69 instructions, 0.01%)</title><rect x="98.2565%" y="69" width="0.0107%" height="15" fill="rgb(219,102,11)" fg:x="634329" fg:w="69"/><text x="98.5494%" y="79.50"></text></g><g><title>$lambda.30 (445 instructions, 0.07%)</title><rect x="98.2080%" y="85" width="0.0689%" height="15" fill="rgb(243,110,44)" fg:x="634016" fg:w="445"/><text x="98.5010%" y="95.50"></text></g><g><title>$k/30 (459 instructions, 0.07%)</title><rect x="98.2080%" y="101" width="0.0711%" height="15" fill="rgb(222,74,54)" fg:x="634016" fg:w="459"/><text x="98.5010%" y="111.50"></text></g><g><title>$k/20 (468 instructions, 0.07%)</title><rect x="98.2080%" y="117" width="0.0725%" height="15" fill="rgb(216,99,12)" fg:x="634016" fg:w="468"/><text x="98.5010%" y="127.50"></text></g><g><title>$lambda.16 (474 instructions, 0.07%)</title><rect x="98.2080%" y="133" width="0.0734%" height="15" fill="rgb(226,22,26)" fg:x="634016" fg:w="474"/><text x="98.5010%" y="143.50"></text></g><g><title>anon-func-352.15 (496 instructions, 0.08%)</title><rect x="98.2080%" y="149" width="0.0768%" height="15" fill="rgb(217,163,10)" fg:x="634016" fg:w="496"/><text x="98.5010%" y="159.50"></text></g><g><title>fulfill (605 instructions, 0.09%)</title><rect x="98.1988%" y="165" width="0.0937%" height="15" fill="rgb(213,25,53)" fg:x="633957" fg:w="605"/><text x="98.4918%" y="175.50"></text></g><g><title>$lambda.10 (612 instructions, 0.09%)</title><rect x="98.1988%" y="181" width="0.0948%" height="15" fill="rgb(252,105,26)" fg:x="633957" fg:w="612"/><text x="98.4918%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,602 instructions, 0.25%)</title><rect x="98.1248%" y="197" width="0.2481%" height="15" fill="rgb(220,39,43)" fg:x="633479" fg:w="1602"/><text x="98.4178%" y="207.50"></text></g><g><title>utf8_validate (123 instructions, 0.02%)</title><rect x="98.4221%" y="165" width="0.0191%" height="15" fill="rgb(229,68,48)" fg:x="635398" fg:w="123"/><text x="98.7150%" y="175.50"></text></g><g><title>utf8_validate (136 instructions, 0.02%)</title><rect x="98.4575%" y="165" width="0.0211%" height="15" fill="rgb(252,8,32)" fg:x="635627" fg:w="136"/><text x="98.7505%" y="175.50"></text></g><g><title>parse_idl_header (2,821 instructions, 0.44%)</title><rect x="98.3863%" y="181" width="0.4370%" height="15" fill="rgb(223,20,43)" fg:x="635167" fg:w="2821"/><text x="98.6792%" y="191.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="98.9275%" y="165" width="0.0105%" height="15" fill="rgb(229,81,49)" fg:x="638661" fg:w="68"/><text x="99.2205%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h9131d6a1ab3a58e6 (323 instructions, 0.05%)</title><rect x="99.0427%" y="149" width="0.0500%" height="15" fill="rgb(236,28,36)" fg:x="639405" fg:w="323"/><text x="99.3357%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::h9131d6a1ab3a58e6 (1,371 instructions, 0.21%)</title><rect x="98.9380%" y="165" width="0.2124%" height="15" fill="rgb(249,185,26)" fg:x="638729" fg:w="1371"/><text x="99.2310%" y="175.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="99.1832%" y="165" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="640312" fg:w="68"/><text x="99.4762%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h9131d6a1ab3a58e6 (1,098 instructions, 0.17%)</title><rect x="99.1938%" y="165" width="0.1701%" height="15" fill="rgb(233,201,37)" fg:x="640380" fg:w="1098"/><text x="99.4867%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::h9131d6a1ab3a58e6 (3,662 instructions, 0.57%)</title><rect x="98.8491%" y="181" width="0.5672%" height="15" fill="rgb(221,78,26)" fg:x="638155" fg:w="3662"/><text x="99.1421%" y="191.50"></text></g><g><title>memcpy (83 instructions, 0.01%)</title><rect x="99.4379%" y="181" width="0.0129%" height="15" fill="rgb(250,127,30)" fg:x="641956" fg:w="83"/><text x="99.7308%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="99.4721%" y="101" width="0.0273%" height="15" fill="rgb(230,49,44)" fg:x="642177" fg:w="176"/><text x="99.7651%" y="111.50"></text></g><g><title>text_to_buf (78 instructions, 0.01%)</title><rect x="99.5517%" y="85" width="0.0121%" height="15" fill="rgb(229,67,23)" fg:x="642691" fg:w="78"/><text x="99.8447%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 0.02%)</title><rect x="99.5503%" y="101" width="0.0177%" height="15" fill="rgb(249,83,47)" fg:x="642682" fg:w="114"/><text x="99.8433%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="99.5764%" y="85" width="0.0130%" height="15" fill="rgb(215,43,3)" fg:x="642850" fg:w="84"/><text x="99.8693%" y="95.50"></text></g><g><title>$lambda.7 (118 instructions, 0.02%)</title><rect x="99.5740%" y="101" width="0.0183%" height="15" fill="rgb(238,154,13)" fg:x="642835" fg:w="118"/><text x="99.8670%" y="111.50"></text></g><g><title>$k/37 (1,053 instructions, 0.16%)</title><rect x="99.4681%" y="117" width="0.1631%" height="15" fill="rgb(219,56,2)" fg:x="642151" fg:w="1053"/><text x="99.7610%" y="127.50"></text></g><g><title>$k/38 (1,115 instructions, 0.17%)</title><rect x="99.4625%" y="133" width="0.1727%" height="15" fill="rgb(233,0,4)" fg:x="642115" fg:w="1115"/><text x="99.7555%" y="143.50"></text></g><g><title>anon-func-352.15 (1,137 instructions, 0.18%)</title><rect x="99.4625%" y="149" width="0.1761%" height="15" fill="rgb(235,30,7)" fg:x="642115" fg:w="1137"/><text x="99.7555%" y="159.50"></text></g><g><title>fulfill (1,275 instructions, 0.20%)</title><rect x="99.4507%" y="165" width="0.1975%" height="15" fill="rgb(250,79,13)" fg:x="642039" fg:w="1275"/><text x="99.7437%" y="175.50"></text></g><g><title>$lambda.11 (1,282 instructions, 0.20%)</title><rect x="99.4507%" y="181" width="0.1986%" height="15" fill="rgb(211,146,34)" fg:x="642039" fg:w="1282"/><text x="99.7437%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (9,152 instructions, 1.42%)</title><rect x="98.3729%" y="197" width="1.4176%" height="15" fill="rgb(228,22,38)" fg:x="635081" fg:w="9152"/><text x="98.6659%" y="207.50"></text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="99.8039%" y="165" width="0.0297%" height="15" fill="rgb(235,168,5)" fg:x="644319" fg:w="192"/><text x="100.0969%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (392 instructions, 0.06%)</title><rect x="99.8039%" y="181" width="0.0607%" height="15" fill="rgb(221,155,16)" fg:x="644319" fg:w="392"/><text x="100.0969%" y="191.50"></text></g><g><title>anon_async.1 (218 instructions, 0.03%)</title><rect x="99.8738%" y="117" width="0.0338%" height="15" fill="rgb(215,215,53)" fg:x="644770" fg:w="218"/><text x="100.1667%" y="127.50"></text></g><g><title>$lambda.16 (224 instructions, 0.03%)</title><rect x="99.8738%" y="133" width="0.0347%" height="15" fill="rgb(223,4,10)" fg:x="644770" fg:w="224"/><text x="100.1667%" y="143.50"></text></g><g><title>anon-func-352.15 (246 instructions, 0.04%)</title><rect x="99.8738%" y="149" width="0.0381%" height="15" fill="rgb(234,103,6)" fg:x="644770" fg:w="246"/><text x="100.1667%" y="159.50"></text></g><g><title>fulfill (355 instructions, 0.05%)</title><rect x="99.8646%" y="165" width="0.0550%" height="15" fill="rgb(227,97,0)" fg:x="644711" fg:w="355"/><text x="100.1576%" y="175.50"></text></g><g><title>$lambda.10 (362 instructions, 0.06%)</title><rect x="99.8646%" y="181" width="0.0561%" height="15" fill="rgb(234,150,53)" fg:x="644711" fg:w="362"/><text x="100.1576%" y="191.50"></text></g><g><title>all (645,585 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="645585"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,352 instructions, 0.21%)</title><rect x="99.7906%" y="197" width="0.2094%" height="15" fill="rgb(222,22,37)" fg:x="644233" fg:w="1352"/><text x="100.0835%" y="207.50"></text></g></svg></svg>