<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.put(1, &quot;Test1&quot;)</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="638613"><g><title>parse_idl_header (342 instructions, 0.05%)</title><rect x="0.0064%" y="181" width="0.0536%" height="15" fill="rgb(227,0,7)" fg:x="41" fg:w="342"/><text x="0.2994%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 0.01%)</title><rect x="0.0788%" y="181" width="0.0124%" height="15" fill="rgb(217,0,24)" fg:x="503" fg:w="79"/><text x="0.3717%" y="191.50"></text></g><g><title>utf8_validate (179 instructions, 0.03%)</title><rect x="0.1077%" y="165" width="0.0280%" height="15" fill="rgb(221,193,54)" fg:x="688" fg:w="179"/><text x="0.4007%" y="175.50"></text></g><g><title>memcpy (114 instructions, 0.02%)</title><rect x="0.1420%" y="165" width="0.0179%" height="15" fill="rgb(248,212,6)" fg:x="907" fg:w="114"/><text x="0.4350%" y="175.50"></text></g><g><title>@deserialize_go&lt;t&gt; (421 instructions, 0.07%)</title><rect x="0.1005%" y="181" width="0.0659%" height="15" fill="rgb(208,68,35)" fg:x="642" fg:w="421"/><text x="0.3935%" y="191.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="0.1881%" y="101" width="0.0153%" height="15" fill="rgb(232,128,0)" fg:x="1201" fg:w="98"/><text x="0.4810%" y="111.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="0.1823%" y="117" width="0.0249%" height="15" fill="rgb(207,160,47)" fg:x="1164" fg:w="159"/><text x="0.4752%" y="127.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="0.1823%" y="133" width="0.0272%" height="15" fill="rgb(228,23,34)" fg:x="1164" fg:w="174"/><text x="0.4752%" y="143.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.2095%" y="133" width="0.0136%" height="15" fill="rgb(218,30,26)" fg:x="1338" fg:w="87"/><text x="0.5025%" y="143.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="0.1823%" y="149" width="0.0532%" height="15" fill="rgb(220,122,19)" fg:x="1164" fg:w="340"/><text x="0.4752%" y="159.50"></text></g><g><title>B_eq (398 instructions, 0.06%)</title><rect x="0.1823%" y="165" width="0.0623%" height="15" fill="rgb(250,228,42)" fg:x="1164" fg:w="398"/><text x="0.4752%" y="175.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="0.2504%" y="101" width="0.0153%" height="15" fill="rgb(240,193,28)" fg:x="1599" fg:w="98"/><text x="0.5434%" y="111.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="0.2446%" y="117" width="0.0249%" height="15" fill="rgb(216,20,37)" fg:x="1562" fg:w="159"/><text x="0.5376%" y="127.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="0.2446%" y="133" width="0.0272%" height="15" fill="rgb(206,188,39)" fg:x="1562" fg:w="174"/><text x="0.5376%" y="143.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.2718%" y="133" width="0.0136%" height="15" fill="rgb(217,207,13)" fg:x="1736" fg:w="87"/><text x="0.5648%" y="143.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="0.2446%" y="149" width="0.0532%" height="15" fill="rgb(231,73,38)" fg:x="1562" fg:w="340"/><text x="0.5376%" y="159.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="0.3036%" y="117" width="0.0153%" height="15" fill="rgb(225,20,46)" fg:x="1939" fg:w="98"/><text x="0.5966%" y="127.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="0.2978%" y="133" width="0.0249%" height="15" fill="rgb(210,31,41)" fg:x="1902" fg:w="159"/><text x="0.5908%" y="143.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="0.2978%" y="149" width="0.0272%" height="15" fill="rgb(221,200,47)" fg:x="1902" fg:w="174"/><text x="0.5908%" y="159.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="0.3251%" y="133" width="0.0266%" height="15" fill="rgb(226,26,5)" fg:x="2076" fg:w="170"/><text x="0.6180%" y="143.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="0.3251%" y="149" width="0.0291%" height="15" fill="rgb(249,33,26)" fg:x="2076" fg:w="186"/><text x="0.6180%" y="159.50"></text></g><g><title>mp_count_bits (226 instructions, 0.04%)</title><rect x="0.3589%" y="133" width="0.0354%" height="15" fill="rgb(235,183,28)" fg:x="2292" fg:w="226"/><text x="0.6519%" y="143.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="0.3589%" y="149" width="0.0406%" height="15" fill="rgb(221,5,38)" fg:x="2292" fg:w="259"/><text x="0.6519%" y="159.50"></text></g><g><title>B_add (1,073 instructions, 0.17%)</title><rect x="0.2446%" y="165" width="0.1680%" height="15" fill="rgb(247,18,42)" fg:x="1562" fg:w="1073"/><text x="0.5376%" y="175.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="0.4327%" y="85" width="0.0153%" height="15" fill="rgb(241,131,45)" fg:x="2763" fg:w="98"/><text x="0.7256%" y="95.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="0.4269%" y="101" width="0.0249%" height="15" fill="rgb(249,31,29)" fg:x="2726" fg:w="159"/><text x="0.7198%" y="111.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="0.4269%" y="117" width="0.0272%" height="15" fill="rgb(225,111,53)" fg:x="2726" fg:w="174"/><text x="0.7198%" y="127.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="0.4541%" y="117" width="0.0136%" height="15" fill="rgb(238,160,17)" fg:x="2900" fg:w="87"/><text x="0.7471%" y="127.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="0.4269%" y="133" width="0.0532%" height="15" fill="rgb(214,148,48)" fg:x="2726" fg:w="340"/><text x="0.7198%" y="143.50"></text></g><g><title>B_eq (398 instructions, 0.06%)</title><rect x="0.4269%" y="149" width="0.0623%" height="15" fill="rgb(232,36,49)" fg:x="2726" fg:w="398"/><text x="0.7198%" y="159.50"></text></g><g><title>@new_async (571 instructions, 0.09%)</title><rect x="0.4198%" y="165" width="0.0894%" height="15" fill="rgb(209,103,24)" fg:x="2681" fg:w="571"/><text x="0.7128%" y="175.50"></text></g><g><title>remember_continuation (3,699 instructions, 0.58%)</title><rect x="0.5379%" y="165" width="0.5792%" height="15" fill="rgb(229,88,8)" fg:x="3435" fg:w="3699"/><text x="0.8309%" y="175.50"></text></g><g><title>memcpy (64 instructions, 0.01%)</title><rect x="1.1237%" y="149" width="0.0100%" height="15" fill="rgb(213,181,19)" fg:x="7176" fg:w="64"/><text x="1.4167%" y="159.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 0.03%)</title><rect x="1.1185%" y="165" width="0.0315%" height="15" fill="rgb(254,191,54)" fg:x="7143" fg:w="201"/><text x="1.4115%" y="175.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.1558%" y="85" width="0.0153%" height="15" fill="rgb(241,83,37)" fg:x="7381" fg:w="98"/><text x="1.4488%" y="95.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.1500%" y="101" width="0.0249%" height="15" fill="rgb(233,36,39)" fg:x="7344" fg:w="159"/><text x="1.4430%" y="111.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.1500%" y="117" width="0.0272%" height="15" fill="rgb(226,3,54)" fg:x="7344" fg:w="174"/><text x="1.4430%" y="127.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="1.1772%" y="117" width="0.0136%" height="15" fill="rgb(245,192,40)" fg:x="7518" fg:w="87"/><text x="1.4702%" y="127.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="1.1500%" y="133" width="0.0532%" height="15" fill="rgb(238,167,29)" fg:x="7344" fg:w="340"/><text x="1.4430%" y="143.50"></text></g><g><title>B_eq (398 instructions, 0.06%)</title><rect x="1.1500%" y="149" width="0.0623%" height="15" fill="rgb(232,182,51)" fg:x="7344" fg:w="398"/><text x="1.4430%" y="159.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="1.2123%" y="149" width="0.0102%" height="15" fill="rgb(231,60,39)" fg:x="7742" fg:w="65"/><text x="1.5053%" y="159.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.2283%" y="101" width="0.0153%" height="15" fill="rgb(208,69,12)" fg:x="7844" fg:w="98"/><text x="1.5213%" y="111.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.2225%" y="117" width="0.0249%" height="15" fill="rgb(235,93,37)" fg:x="7807" fg:w="159"/><text x="1.5155%" y="127.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.2225%" y="133" width="0.0272%" height="15" fill="rgb(213,116,39)" fg:x="7807" fg:w="174"/><text x="1.5155%" y="143.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.2497%" y="117" width="0.0127%" height="15" fill="rgb(222,207,29)" fg:x="7981" fg:w="81"/><text x="1.5427%" y="127.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="1.2624%" y="101" width="0.0117%" height="15" fill="rgb(206,96,30)" fg:x="8062" fg:w="75"/><text x="1.5554%" y="111.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="1.2624%" y="117" width="0.0136%" height="15" fill="rgb(218,138,4)" fg:x="8062" fg:w="87"/><text x="1.5554%" y="127.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="1.2497%" y="133" width="0.0337%" height="15" fill="rgb(250,191,14)" fg:x="7981" fg:w="215"/><text x="1.5427%" y="143.50"></text></g><g><title>B_rsh (554 instructions, 0.09%)</title><rect x="1.2225%" y="149" width="0.0868%" height="15" fill="rgb(239,60,40)" fg:x="7807" fg:w="554"/><text x="1.5155%" y="159.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="1.3092%" y="149" width="0.0111%" height="15" fill="rgb(206,27,48)" fg:x="8361" fg:w="71"/><text x="1.6022%" y="159.50"></text></g><g><title>@add_cycles (1,118 instructions, 0.18%)</title><rect x="1.1500%" y="165" width="0.1751%" height="15" fill="rgb(225,35,8)" fg:x="7344" fg:w="1118"/><text x="1.4430%" y="175.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="1.3291%" y="165" width="0.0132%" height="15" fill="rgb(250,213,24)" fg:x="8488" fg:w="84"/><text x="1.6221%" y="175.50"></text></g><g><title>$lambda.1 (7,770 instructions, 1.22%)</title><rect x="0.1688%" y="181" width="1.2167%" height="15" fill="rgb(247,123,22)" fg:x="1078" fg:w="7770"/><text x="0.4618%" y="191.50"></text></g><g><title>put (9,646 instructions, 1.51%)</title><rect x="0.0000%" y="197" width="1.5105%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="9646"/><text x="0.2930%" y="207.50"></text></g><g><title>memcmp (215 instructions, 0.03%)</title><rect x="1.5220%" y="181" width="0.0337%" height="15" fill="rgb(231,145,46)" fg:x="9720" fg:w="215"/><text x="1.8150%" y="191.50"></text></g><g><title>parse_idl_header (267 instructions, 0.04%)</title><rect x="1.5609%" y="181" width="0.0418%" height="15" fill="rgb(251,118,11)" fg:x="9968" fg:w="267"/><text x="1.8539%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (64 instructions, 0.01%)</title><rect x="1.6602%" y="149" width="0.0100%" height="15" fill="rgb(217,147,25)" fg:x="10602" fg:w="64"/><text x="1.9531%" y="159.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.7118%" y="53" width="0.0153%" height="15" fill="rgb(247,81,37)" fg:x="10932" fg:w="98"/><text x="2.0048%" y="63.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.7060%" y="69" width="0.0249%" height="15" fill="rgb(209,12,38)" fg:x="10895" fg:w="159"/><text x="1.9990%" y="79.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.7060%" y="85" width="0.0272%" height="15" fill="rgb(227,1,9)" fg:x="10895" fg:w="174"/><text x="1.9990%" y="95.50"></text></g><g><title>mp_set_u64 (105 instructions, 0.02%)</title><rect x="1.7333%" y="85" width="0.0164%" height="15" fill="rgb(248,47,43)" fg:x="11069" fg:w="105"/><text x="2.0263%" y="95.50"></text></g><g><title>bigint_of_word64 (347 instructions, 0.05%)</title><rect x="1.7060%" y="101" width="0.0543%" height="15" fill="rgb(221,10,30)" fg:x="10895" fg:w="347"/><text x="1.9990%" y="111.50"></text></g><g><title>from_word128_ptr (362 instructions, 0.06%)</title><rect x="1.7060%" y="117" width="0.0567%" height="15" fill="rgb(210,229,1)" fg:x="10895" fg:w="362"/><text x="1.9990%" y="127.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="1.7627%" y="117" width="0.0102%" height="15" fill="rgb(222,148,37)" fg:x="11257" fg:w="65"/><text x="2.0557%" y="127.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.7787%" y="69" width="0.0153%" height="15" fill="rgb(234,67,33)" fg:x="11359" fg:w="98"/><text x="2.0717%" y="79.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.7729%" y="85" width="0.0249%" height="15" fill="rgb(247,98,35)" fg:x="11322" fg:w="159"/><text x="2.0659%" y="95.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.7729%" y="101" width="0.0272%" height="15" fill="rgb(247,138,52)" fg:x="11322" fg:w="174"/><text x="2.0659%" y="111.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="1.8002%" y="85" width="0.0127%" height="15" fill="rgb(213,79,30)" fg:x="11496" fg:w="81"/><text x="2.0931%" y="95.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="1.8128%" y="69" width="0.0117%" height="15" fill="rgb(246,177,23)" fg:x="11577" fg:w="75"/><text x="2.1058%" y="79.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="1.8128%" y="85" width="0.0136%" height="15" fill="rgb(230,62,27)" fg:x="11577" fg:w="87"/><text x="2.1058%" y="95.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="1.8002%" y="101" width="0.0337%" height="15" fill="rgb(216,154,8)" fg:x="11496" fg:w="215"/><text x="2.0931%" y="111.50"></text></g><g><title>B_rsh (554 instructions, 0.09%)</title><rect x="1.7729%" y="117" width="0.0868%" height="15" fill="rgb(244,35,45)" fg:x="11322" fg:w="554"/><text x="2.0659%" y="127.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="1.8597%" y="117" width="0.0111%" height="15" fill="rgb(251,115,12)" fg:x="11876" fg:w="71"/><text x="2.1526%" y="127.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.8766%" y="53" width="0.0153%" height="15" fill="rgb(240,54,50)" fg:x="11984" fg:w="98"/><text x="2.1695%" y="63.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.8708%" y="69" width="0.0249%" height="15" fill="rgb(233,84,52)" fg:x="11947" fg:w="159"/><text x="2.1637%" y="79.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.8708%" y="85" width="0.0272%" height="15" fill="rgb(207,117,47)" fg:x="11947" fg:w="174"/><text x="2.1637%" y="95.50"></text></g><g><title>mp_set_u64 (105 instructions, 0.02%)</title><rect x="1.8980%" y="85" width="0.0164%" height="15" fill="rgb(249,43,39)" fg:x="12121" fg:w="105"/><text x="2.1910%" y="95.50"></text></g><g><title>bigint_of_word64 (347 instructions, 0.05%)</title><rect x="1.8708%" y="101" width="0.0543%" height="15" fill="rgb(209,38,44)" fg:x="11947" fg:w="347"/><text x="2.1637%" y="111.50"></text></g><g><title>from_word128_ptr (362 instructions, 0.06%)</title><rect x="1.8708%" y="117" width="0.0567%" height="15" fill="rgb(236,212,23)" fg:x="11947" fg:w="362"/><text x="2.1637%" y="127.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.9359%" y="53" width="0.0153%" height="15" fill="rgb(242,79,21)" fg:x="12363" fg:w="98"/><text x="2.2289%" y="63.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.9301%" y="69" width="0.0249%" height="15" fill="rgb(211,96,35)" fg:x="12326" fg:w="159"/><text x="2.2231%" y="79.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.9301%" y="85" width="0.0272%" height="15" fill="rgb(253,215,40)" fg:x="12326" fg:w="174"/><text x="2.2231%" y="95.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="1.9574%" y="85" width="0.0136%" height="15" fill="rgb(211,81,21)" fg:x="12500" fg:w="87"/><text x="2.2503%" y="95.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="1.9301%" y="101" width="0.0532%" height="15" fill="rgb(208,190,38)" fg:x="12326" fg:w="340"/><text x="2.2231%" y="111.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="1.9892%" y="69" width="0.0153%" height="15" fill="rgb(235,213,38)" fg:x="12703" fg:w="98"/><text x="2.2821%" y="79.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="1.9834%" y="85" width="0.0249%" height="15" fill="rgb(237,122,38)" fg:x="12666" fg:w="159"/><text x="2.2763%" y="95.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="1.9834%" y="101" width="0.0272%" height="15" fill="rgb(244,218,35)" fg:x="12666" fg:w="174"/><text x="2.2763%" y="111.50"></text></g><g><title>s_mp_add (170 instructions, 0.03%)</title><rect x="2.0106%" y="85" width="0.0266%" height="15" fill="rgb(240,68,47)" fg:x="12840" fg:w="170"/><text x="2.3036%" y="95.50"></text></g><g><title>mp_add (186 instructions, 0.03%)</title><rect x="2.0106%" y="101" width="0.0291%" height="15" fill="rgb(210,16,53)" fg:x="12840" fg:w="186"/><text x="2.3036%" y="111.50"></text></g><g><title>mp_count_bits (226 instructions, 0.04%)</title><rect x="2.0444%" y="85" width="0.0354%" height="15" fill="rgb(235,124,12)" fg:x="13056" fg:w="226"/><text x="2.3374%" y="95.50"></text></g><g><title>bigint_2complement_bits (259 instructions, 0.04%)</title><rect x="2.0444%" y="101" width="0.0406%" height="15" fill="rgb(224,169,11)" fg:x="13056" fg:w="259"/><text x="2.3374%" y="111.50"></text></g><g><title>B_add (1,073 instructions, 0.17%)</title><rect x="1.9301%" y="117" width="0.1680%" height="15" fill="rgb(250,166,2)" fg:x="12326" fg:w="1073"/><text x="2.2231%" y="127.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="2.1174%" y="37" width="0.0153%" height="15" fill="rgb(242,216,29)" fg:x="13522" fg:w="98"/><text x="2.4104%" y="47.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="2.1116%" y="53" width="0.0249%" height="15" fill="rgb(230,116,27)" fg:x="13485" fg:w="159"/><text x="2.4046%" y="63.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="2.1116%" y="69" width="0.0272%" height="15" fill="rgb(228,99,48)" fg:x="13485" fg:w="174"/><text x="2.4046%" y="79.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="2.1389%" y="69" width="0.0136%" height="15" fill="rgb(253,11,6)" fg:x="13659" fg:w="87"/><text x="2.4318%" y="79.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="2.1116%" y="85" width="0.0532%" height="15" fill="rgb(247,143,39)" fg:x="13485" fg:w="340"/><text x="2.4046%" y="95.50"></text></g><g><title>B_eq (398 instructions, 0.06%)</title><rect x="2.1116%" y="101" width="0.0623%" height="15" fill="rgb(236,97,10)" fg:x="13485" fg:w="398"/><text x="2.4046%" y="111.50"></text></g><g><title>@new_async (571 instructions, 0.09%)</title><rect x="2.1046%" y="117" width="0.0894%" height="15" fill="rgb(233,208,19)" fg:x="13440" fg:w="571"/><text x="2.3975%" y="127.50"></text></g><g><title>memcpy (130 instructions, 0.02%)</title><rect x="2.2275%" y="117" width="0.0204%" height="15" fill="rgb(216,164,2)" fg:x="14225" fg:w="130"/><text x="2.5205%" y="127.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="2.2718%" y="37" width="0.0153%" height="15" fill="rgb(220,129,5)" fg:x="14508" fg:w="98"/><text x="2.5648%" y="47.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="2.2660%" y="53" width="0.0249%" height="15" fill="rgb(242,17,10)" fg:x="14471" fg:w="159"/><text x="2.5590%" y="63.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="2.2660%" y="69" width="0.0272%" height="15" fill="rgb(242,107,0)" fg:x="14471" fg:w="174"/><text x="2.5590%" y="79.50"></text></g><g><title>mp_set_u64 (87 instructions, 0.01%)</title><rect x="2.2933%" y="69" width="0.0136%" height="15" fill="rgb(251,28,31)" fg:x="14645" fg:w="87"/><text x="2.5862%" y="79.50"></text></g><g><title>bigint_of_int64 (340 instructions, 0.05%)</title><rect x="2.2660%" y="85" width="0.0532%" height="15" fill="rgb(233,223,10)" fg:x="14471" fg:w="340"/><text x="2.5590%" y="95.50"></text></g><g><title>B_eq (398 instructions, 0.06%)</title><rect x="2.2660%" y="101" width="0.0623%" height="15" fill="rgb(215,21,27)" fg:x="14471" fg:w="398"/><text x="2.5590%" y="111.50"></text></g><g><title>B_lt (65 instructions, 0.01%)</title><rect x="2.3283%" y="101" width="0.0102%" height="15" fill="rgb(232,23,21)" fg:x="14869" fg:w="65"/><text x="2.6213%" y="111.50"></text></g><g><title>memset (98 instructions, 0.02%)</title><rect x="2.3443%" y="53" width="0.0153%" height="15" fill="rgb(244,5,23)" fg:x="14971" fg:w="98"/><text x="2.6373%" y="63.50"></text></g><g><title>mp_calloc (159 instructions, 0.02%)</title><rect x="2.3385%" y="69" width="0.0249%" height="15" fill="rgb(226,81,46)" fg:x="14934" fg:w="159"/><text x="2.6315%" y="79.50"></text></g><g><title>mp_init (174 instructions, 0.03%)</title><rect x="2.3385%" y="85" width="0.0272%" height="15" fill="rgb(247,70,30)" fg:x="14934" fg:w="174"/><text x="2.6315%" y="95.50"></text></g><g><title>mp_copy (81 instructions, 0.01%)</title><rect x="2.3658%" y="69" width="0.0127%" height="15" fill="rgb(212,68,19)" fg:x="15108" fg:w="81"/><text x="2.6587%" y="79.50"></text></g><g><title>mp_zero (75 instructions, 0.01%)</title><rect x="2.3784%" y="53" width="0.0117%" height="15" fill="rgb(240,187,13)" fg:x="15189" fg:w="75"/><text x="2.6714%" y="63.50"></text></g><g><title>mp_rshd (87 instructions, 0.01%)</title><rect x="2.3784%" y="69" width="0.0136%" height="15" fill="rgb(223,113,26)" fg:x="15189" fg:w="87"/><text x="2.6714%" y="79.50"></text></g><g><title>mp_div_2d (215 instructions, 0.03%)</title><rect x="2.3658%" y="85" width="0.0337%" height="15" fill="rgb(206,192,2)" fg:x="15108" fg:w="215"/><text x="2.6587%" y="95.50"></text></g><g><title>B_rsh (554 instructions, 0.09%)</title><rect x="2.3385%" y="101" width="0.0868%" height="15" fill="rgb(241,108,4)" fg:x="14934" fg:w="554"/><text x="2.6315%" y="111.50"></text></g><g><title>bigint_to_word64_wrap (71 instructions, 0.01%)</title><rect x="2.4253%" y="101" width="0.0111%" height="15" fill="rgb(247,173,49)" fg:x="15488" fg:w="71"/><text x="2.7182%" y="111.50"></text></g><g><title>@add_cycles (1,118 instructions, 0.18%)</title><rect x="2.2660%" y="117" width="0.1751%" height="15" fill="rgb(224,114,35)" fg:x="14471" fg:w="1118"/><text x="2.5590%" y="127.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="2.4451%" y="117" width="0.0132%" height="15" fill="rgb(245,159,27)" fg:x="15615" fg:w="84"/><text x="2.7381%" y="127.50"></text></g><g><title>$lambda (5,411 instructions, 0.85%)</title><rect x="1.6896%" y="133" width="0.8473%" height="15" fill="rgb(245,172,44)" fg:x="10790" fg:w="5411"/><text x="1.9826%" y="143.50"></text></g><g><title>$lambda.6 (5,457 instructions, 0.85%)</title><rect x="1.6873%" y="149" width="0.8545%" height="15" fill="rgb(236,23,11)" fg:x="10775" fg:w="5457"/><text x="1.9802%" y="159.50"></text></g><g><title>$lambda.5 (6,001 instructions, 0.94%)</title><rect x="1.6252%" y="165" width="0.9397%" height="15" fill="rgb(205,117,38)" fg:x="10379" fg:w="6001"/><text x="1.9182%" y="175.50"></text></g><g><title>anon_async (6,041 instructions, 0.95%)</title><rect x="1.6229%" y="181" width="0.9460%" height="15" fill="rgb(237,72,25)" fg:x="10364" fg:w="6041"/><text x="1.9159%" y="191.50"></text></g><g><title>__motoko_async_helper (7,576 instructions, 1.19%)</title><rect x="1.5105%" y="197" width="1.1863%" height="15" fill="rgb(244,70,9)" fg:x="9646" fg:w="7576"/><text x="1.8034%" y="207.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.7392%" y="165" width="0.0310%" height="15" fill="rgb(217,125,39)" fg:x="17493" fg:w="198"/><text x="3.0322%" y="175.50"></text></g><g><title>parse_idl_header (811 instructions, 0.13%)</title><rect x="2.7102%" y="181" width="0.1270%" height="15" fill="rgb(235,36,10)" fg:x="17308" fg:w="811"/><text x="3.0032%" y="191.50"></text></g><g><title>leb128_decode (198 instructions, 0.03%)</title><rect x="2.8805%" y="181" width="0.0310%" height="15" fill="rgb(251,123,47)" fg:x="18395" fg:w="198"/><text x="3.1734%" y="191.50"></text></g><g><title>memcpy (157 instructions, 0.02%)</title><rect x="2.9332%" y="181" width="0.0246%" height="15" fill="rgb(221,13,13)" fg:x="18732" fg:w="157"/><text x="3.2262%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="2.9833%" y="101" width="0.0276%" height="15" fill="rgb(238,131,9)" fg:x="19052" fg:w="176"/><text x="3.2763%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="3.0671%" y="101" width="0.0113%" height="15" fill="rgb(211,50,8)" fg:x="19587" fg:w="72"/><text x="3.3601%" y="111.50"></text></g><g><title>memcpy (142 instructions, 0.02%)</title><rect x="3.0923%" y="101" width="0.0222%" height="15" fill="rgb(245,182,24)" fg:x="19748" fg:w="142"/><text x="3.3853%" y="111.50"></text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="3.1236%" y="85" width="0.0102%" height="15" fill="rgb(242,14,37)" fg:x="19948" fg:w="65"/><text x="3.4166%" y="95.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="3.1222%" y="101" width="0.0161%" height="15" fill="rgb(246,228,12)" fg:x="19939" fg:w="103"/><text x="3.4152%" y="111.50"></text></g><g><title>memcpy (498,008 instructions, 77.98%)</title><rect x="3.1501%" y="85" width="77.9828%" height="15" fill="rgb(213,55,15)" fg:x="20117" fg:w="498008"/><text x="3.4431%" y="95.50">memcpy</text></g><g><title>@serialize_go&lt;B&gt; (498,082 instructions, 77.99%)</title><rect x="3.1431%" y="101" width="77.9943%" height="15" fill="rgb(209,9,3)" fg:x="20072" fg:w="498082"/><text x="3.4360%" y="111.50">@serialize_go&lt;B&gt;</text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="81.1562%" y="69" width="0.0102%" height="15" fill="rgb(230,59,30)" fg:x="518274" fg:w="65"/><text x="81.4492%" y="79.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="81.1548%" y="85" width="0.0161%" height="15" fill="rgb(209,121,21)" fg:x="518265" fg:w="103"/><text x="81.4478%" y="95.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="81.1548%" y="101" width="0.0175%" height="15" fill="rgb(220,109,13)" fg:x="518265" fg:w="112"/><text x="81.4478%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (72 instructions, 0.01%)</title><rect x="81.1723%" y="101" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="518377" fg:w="72"/><text x="81.4653%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="81.1978%" y="85" width="0.0132%" height="15" fill="rgb(215,41,42)" fg:x="518540" fg:w="84"/><text x="81.4908%" y="95.50"></text></g><g><title>$lambda.9 (118 instructions, 0.02%)</title><rect x="81.1955%" y="101" width="0.0185%" height="15" fill="rgb(224,123,36)" fg:x="518525" fg:w="118"/><text x="81.4885%" y="111.50"></text></g><g><title>$k/21 (606,443 instructions, 94.96%)</title><rect x="2.9728%" y="117" width="94.9625%" height="15" fill="rgb(240,125,3)" fg:x="18985" fg:w="606443"/><text x="3.2658%" y="127.50">$k/21</text></g><g><title>$k/22 (606,477 instructions, 94.97%)</title><rect x="2.9703%" y="133" width="94.9678%" height="15" fill="rgb(205,98,50)" fg:x="18969" fg:w="606477"/><text x="3.2633%" y="143.50">$k/22</text></g><g><title>anon-func-352.15 (606,499 instructions, 94.97%)</title><rect x="2.9703%" y="149" width="94.9713%" height="15" fill="rgb(205,185,37)" fg:x="18969" fg:w="606499"/><text x="3.2633%" y="159.50">anon-func-352.15</text></g><g><title>fulfill (606,637 instructions, 94.99%)</title><rect x="2.9584%" y="165" width="94.9929%" height="15" fill="rgb(238,207,15)" fg:x="18893" fg:w="606637"/><text x="3.2514%" y="175.50">fulfill</text></g><g><title>$lambda.11 (606,644 instructions, 94.99%)</title><rect x="2.9584%" y="181" width="94.9940%" height="15" fill="rgb(213,199,42)" fg:x="18893" fg:w="606644"/><text x="3.2514%" y="191.50">$lambda.11</text></g><g><title>@callback&lt;(r(canister_id:P))&gt; (609,285 instructions, 95.41%)</title><rect x="2.6968%" y="197" width="95.4075%" height="15" fill="rgb(235,201,11)" fg:x="17222" fg:w="609285"/><text x="2.9898%" y="207.50">@callback&lt;(r(canister_id:P))&gt;</text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="98.1178%" y="165" width="0.0301%" height="15" fill="rgb(207,46,11)" fg:x="626593" fg:w="192"/><text x="98.4108%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (392 instructions, 0.06%)</title><rect x="98.1178%" y="181" width="0.0614%" height="15" fill="rgb(241,35,35)" fg:x="626593" fg:w="392"/><text x="98.4108%" y="191.50"></text></g><g><title>memcpy (94 instructions, 0.01%)</title><rect x="98.2000%" y="69" width="0.0147%" height="15" fill="rgb(243,32,47)" fg:x="627118" fg:w="94"/><text x="98.4930%" y="79.50"></text></g><g><title>memcpy (65 instructions, 0.01%)</title><rect x="98.2213%" y="37" width="0.0102%" height="15" fill="rgb(247,202,23)" fg:x="627254" fg:w="65"/><text x="98.5143%" y="47.50"></text></g><g><title>@serialize_go&lt;B&gt; (103 instructions, 0.02%)</title><rect x="98.2199%" y="53" width="0.0161%" height="15" fill="rgb(219,102,11)" fg:x="627245" fg:w="103"/><text x="98.5129%" y="63.50"></text></g><g><title>@serialize_go&lt;ra(get:Fsr(N)(?t),put:Fsr(Nt)())&gt; (112 instructions, 0.02%)</title><rect x="98.2199%" y="69" width="0.0175%" height="15" fill="rgb(243,110,44)" fg:x="627245" fg:w="112"/><text x="98.5129%" y="79.50"></text></g><g><title>reply_with_data (69 instructions, 0.01%)</title><rect x="98.2374%" y="69" width="0.0108%" height="15" fill="rgb(222,74,54)" fg:x="627357" fg:w="69"/><text x="98.5304%" y="79.50"></text></g><g><title>$lambda.30 (445 instructions, 0.07%)</title><rect x="98.1884%" y="85" width="0.0697%" height="15" fill="rgb(216,99,12)" fg:x="627044" fg:w="445"/><text x="98.4814%" y="95.50"></text></g><g><title>$k/30 (459 instructions, 0.07%)</title><rect x="98.1884%" y="101" width="0.0719%" height="15" fill="rgb(226,22,26)" fg:x="627044" fg:w="459"/><text x="98.4814%" y="111.50"></text></g><g><title>$k/20 (468 instructions, 0.07%)</title><rect x="98.1884%" y="117" width="0.0733%" height="15" fill="rgb(217,163,10)" fg:x="627044" fg:w="468"/><text x="98.4814%" y="127.50"></text></g><g><title>$lambda.16 (474 instructions, 0.07%)</title><rect x="98.1884%" y="133" width="0.0742%" height="15" fill="rgb(213,25,53)" fg:x="627044" fg:w="474"/><text x="98.4814%" y="143.50"></text></g><g><title>anon-func-352.15 (496 instructions, 0.08%)</title><rect x="98.1884%" y="149" width="0.0777%" height="15" fill="rgb(252,105,26)" fg:x="627044" fg:w="496"/><text x="98.4814%" y="159.50"></text></g><g><title>fulfill (605 instructions, 0.09%)</title><rect x="98.1792%" y="165" width="0.0947%" height="15" fill="rgb(220,39,43)" fg:x="626985" fg:w="605"/><text x="98.4721%" y="175.50"></text></g><g><title>$lambda.10 (612 instructions, 0.10%)</title><rect x="98.1792%" y="181" width="0.0958%" height="15" fill="rgb(229,68,48)" fg:x="626985" fg:w="612"/><text x="98.4721%" y="191.50"></text></g><g><title>@callback&lt;u&gt; (1,602 instructions, 0.25%)</title><rect x="98.1043%" y="197" width="0.2509%" height="15" fill="rgb(252,8,32)" fg:x="626507" fg:w="1602"/><text x="98.3973%" y="207.50"></text></g><g><title>utf8_validate (123 instructions, 0.02%)</title><rect x="98.4048%" y="165" width="0.0193%" height="15" fill="rgb(223,20,43)" fg:x="628426" fg:w="123"/><text x="98.6978%" y="175.50"></text></g><g><title>utf8_validate (136 instructions, 0.02%)</title><rect x="98.4407%" y="165" width="0.0213%" height="15" fill="rgb(229,81,49)" fg:x="628655" fg:w="136"/><text x="98.7337%" y="175.50"></text></g><g><title>parse_idl_header (2,821 instructions, 0.44%)</title><rect x="98.3687%" y="181" width="0.4417%" height="15" fill="rgb(236,28,36)" fg:x="628195" fg:w="2821"/><text x="98.6616%" y="191.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="98.9158%" y="165" width="0.0106%" height="15" fill="rgb(249,185,26)" fg:x="631689" fg:w="68"/><text x="99.2087%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hb73cfd756d5a2156 (323 instructions, 0.05%)</title><rect x="99.0323%" y="149" width="0.0506%" height="15" fill="rgb(249,174,33)" fg:x="632433" fg:w="323"/><text x="99.3252%" y="159.50"></text></g><g><title>motoko_rts::idl::sub::hb73cfd756d5a2156 (1,371 instructions, 0.21%)</title><rect x="98.9264%" y="165" width="0.2147%" height="15" fill="rgb(233,201,37)" fg:x="631757" fg:w="1371"/><text x="99.2194%" y="175.50"></text></g><g><title>memcmp (68 instructions, 0.01%)</title><rect x="99.1743%" y="165" width="0.0106%" height="15" fill="rgb(221,78,26)" fg:x="633340" fg:w="68"/><text x="99.4673%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hb73cfd756d5a2156 (1,098 instructions, 0.17%)</title><rect x="99.1850%" y="165" width="0.1719%" height="15" fill="rgb(250,127,30)" fg:x="633408" fg:w="1098"/><text x="99.4779%" y="175.50"></text></g><g><title>motoko_rts::idl::sub::hb73cfd756d5a2156 (3,662 instructions, 0.57%)</title><rect x="98.8365%" y="181" width="0.5734%" height="15" fill="rgb(230,49,44)" fg:x="631183" fg:w="3662"/><text x="99.1295%" y="191.50"></text></g><g><title>memcpy (83 instructions, 0.01%)</title><rect x="99.4317%" y="181" width="0.0130%" height="15" fill="rgb(229,67,23)" fg:x="634984" fg:w="83"/><text x="99.7247%" y="191.50"></text></g><g><title>@new_async (176 instructions, 0.03%)</title><rect x="99.4663%" y="101" width="0.0276%" height="15" fill="rgb(249,83,47)" fg:x="635205" fg:w="176"/><text x="99.7593%" y="111.50"></text></g><g><title>text_to_buf (78 instructions, 0.01%)</title><rect x="99.5468%" y="85" width="0.0122%" height="15" fill="rgb(215,43,3)" fg:x="635719" fg:w="78"/><text x="99.8398%" y="95.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 0.02%)</title><rect x="99.5454%" y="101" width="0.0179%" height="15" fill="rgb(238,154,13)" fg:x="635710" fg:w="114"/><text x="99.8384%" y="111.50"></text></g><g><title>enqueue (84 instructions, 0.01%)</title><rect x="99.5717%" y="85" width="0.0132%" height="15" fill="rgb(219,56,2)" fg:x="635878" fg:w="84"/><text x="99.8647%" y="95.50"></text></g><g><title>$lambda.7 (118 instructions, 0.02%)</title><rect x="99.5694%" y="101" width="0.0185%" height="15" fill="rgb(233,0,4)" fg:x="635863" fg:w="118"/><text x="99.8623%" y="111.50"></text></g><g><title>$k/37 (1,053 instructions, 0.16%)</title><rect x="99.4623%" y="117" width="0.1649%" height="15" fill="rgb(235,30,7)" fg:x="635179" fg:w="1053"/><text x="99.7552%" y="127.50"></text></g><g><title>$k/38 (1,115 instructions, 0.17%)</title><rect x="99.4566%" y="133" width="0.1746%" height="15" fill="rgb(250,79,13)" fg:x="635143" fg:w="1115"/><text x="99.7496%" y="143.50"></text></g><g><title>anon-func-352.15 (1,137 instructions, 0.18%)</title><rect x="99.4566%" y="149" width="0.1780%" height="15" fill="rgb(211,146,34)" fg:x="635143" fg:w="1137"/><text x="99.7496%" y="159.50"></text></g><g><title>fulfill (1,275 instructions, 0.20%)</title><rect x="99.4447%" y="165" width="0.1997%" height="15" fill="rgb(228,22,38)" fg:x="635067" fg:w="1275"/><text x="99.7377%" y="175.50"></text></g><g><title>$lambda.11 (1,282 instructions, 0.20%)</title><rect x="99.4447%" y="181" width="0.2007%" height="15" fill="rgb(235,168,5)" fg:x="635067" fg:w="1282"/><text x="99.7377%" y="191.50"></text></g><g><title>@callback&lt;(ra(get:Fsr(N)(?t),put:Fsr(Nt)()))&gt; (9,152 instructions, 1.43%)</title><rect x="98.3552%" y="197" width="1.4331%" height="15" fill="rgb(221,155,16)" fg:x="628109" fg:w="9152"/><text x="98.6482%" y="207.50"></text></g><g><title>parse_idl_header (192 instructions, 0.03%)</title><rect x="99.8018%" y="165" width="0.0301%" height="15" fill="rgb(215,215,53)" fg:x="637347" fg:w="192"/><text x="100.0947%" y="175.50"></text></g><g><title>@deserialize&lt;&gt; (392 instructions, 0.06%)</title><rect x="99.8018%" y="181" width="0.0614%" height="15" fill="rgb(223,4,10)" fg:x="637347" fg:w="392"/><text x="100.0947%" y="191.50"></text></g><g><title>anon_async.1 (218 instructions, 0.03%)</title><rect x="99.8724%" y="117" width="0.0341%" height="15" fill="rgb(234,103,6)" fg:x="637798" fg:w="218"/><text x="100.1653%" y="127.50"></text></g><g><title>$lambda.16 (224 instructions, 0.04%)</title><rect x="99.8724%" y="133" width="0.0351%" height="15" fill="rgb(227,97,0)" fg:x="637798" fg:w="224"/><text x="100.1653%" y="143.50"></text></g><g><title>anon-func-352.15 (246 instructions, 0.04%)</title><rect x="99.8724%" y="149" width="0.0385%" height="15" fill="rgb(234,150,53)" fg:x="637798" fg:w="246"/><text x="100.1653%" y="159.50"></text></g><g><title>fulfill (355 instructions, 0.06%)</title><rect x="99.8631%" y="165" width="0.0556%" height="15" fill="rgb(228,201,54)" fg:x="637739" fg:w="355"/><text x="100.1561%" y="175.50"></text></g><g><title>$lambda.10 (362 instructions, 0.06%)</title><rect x="99.8631%" y="181" width="0.0567%" height="15" fill="rgb(222,22,37)" fg:x="637739" fg:w="362"/><text x="100.1561%" y="191.50"></text></g><g><title>all (638,613 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="638613"/><text x="0.2930%" y="223.50"></text></g><g><title>@callback&lt;u&gt; (1,352 instructions, 0.21%)</title><rect x="99.7883%" y="197" width="0.2117%" height="15" fill="rgb(233,25,53)" fg:x="637261" fg:w="1352"/><text x="100.0813%" y="207.50"></text></g></svg></svg>