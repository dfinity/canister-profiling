<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="214" onload="init(evt)" viewBox="0 0 1024 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.get(5)</text><text id="details" fill="rgb(0,0,0)" x="10" y="197.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="197.00"> </text><svg id="frames" x="10" width="1004" total_samples="5988"><g><title>trans_state5 (8 instructions, 0.13%)</title><rect x="0.0000%" y="133" width="0.1336%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="8"/><text x="0.2930%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="0.1336%" y="133" width="0.5010%" height="15" fill="rgb(248,225,23)" fg:x="8" fg:w="30"/><text x="0.4266%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="0.6346%" y="117" width="0.7682%" height="15" fill="rgb(250,108,0)" fg:x="38" fg:w="46"/><text x="0.9276%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="1.4028%" y="117" width="0.5010%" height="15" fill="rgb(228,208,7)" fg:x="84" fg:w="30"/><text x="1.6958%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="1.9038%" y="117" width="0.7682%" height="15" fill="rgb(244,45,10)" fg:x="114" fg:w="46"/><text x="2.1968%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="2.6720%" y="117" width="1.0020%" height="15" fill="rgb(207,125,25)" fg:x="160" fg:w="60"/><text x="2.9650%" y="127.50"></text></g><g><title>parse_idl_header (264 instructions, 4.41%)</title><rect x="0.6346%" y="133" width="4.4088%" height="15" fill="rgb(210,195,18)" fg:x="38" fg:w="264"/><text x="0.9276%" y="143.50">pars..</text></g><g><title>memset (3 instructions, 0.05%)</title><rect x="5.0434%" y="117" width="0.0501%" height="15" fill="rgb(249,80,12)" fg:x="302" fg:w="3"/><text x="5.3364%" y="127.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.23%)</title><rect x="5.0434%" y="133" width="0.2338%" height="15" fill="rgb(221,65,9)" fg:x="302" fg:w="14"/><text x="5.3364%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="5.2772%" y="133" width="0.7682%" height="15" fill="rgb(235,49,36)" fg:x="316" fg:w="46"/><text x="5.5702%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="6.0454%" y="133" width="1.0020%" height="15" fill="rgb(225,32,20)" fg:x="362" fg:w="60"/><text x="6.3384%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 1.32%)</title><rect x="7.0474%" y="133" width="1.3193%" height="15" fill="rgb(215,141,46)" fg:x="422" fg:w="79"/><text x="7.3404%" y="143.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="8.3667%" y="133" width="0.3674%" height="15" fill="rgb(250,160,47)" fg:x="501" fg:w="22"/><text x="8.6597%" y="143.50"></text></g><g><title>B_rem (23 instructions, 0.38%)</title><rect x="8.7341%" y="117" width="0.3841%" height="15" fill="rgb(216,222,40)" fg:x="523" fg:w="23"/><text x="9.0271%" y="127.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.30%)</title><rect x="9.1182%" y="117" width="0.3006%" height="15" fill="rgb(234,217,39)" fg:x="546" fg:w="18"/><text x="9.4112%" y="127.50"></text></g><g><title>opt_project (14 instructions, 0.23%)</title><rect x="9.4188%" y="117" width="0.2338%" height="15" fill="rgb(207,178,40)" fg:x="564" fg:w="14"/><text x="9.7118%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="9.6526%" y="101" width="0.3674%" height="15" fill="rgb(221,136,13)" fg:x="578" fg:w="22"/><text x="9.9456%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.62%)</title><rect x="9.6526%" y="117" width="0.6179%" height="15" fill="rgb(249,199,10)" fg:x="578" fg:w="37"/><text x="9.9456%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="10.2705%" y="101" width="0.3674%" height="15" fill="rgb(249,222,13)" fg:x="615" fg:w="22"/><text x="10.5635%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="10.6379%" y="101" width="0.3674%" height="15" fill="rgb(244,185,38)" fg:x="637" fg:w="22"/><text x="10.9309%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="11.0053%" y="101" width="0.3674%" height="15" fill="rgb(236,202,9)" fg:x="659" fg:w="22"/><text x="11.2983%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="11.3727%" y="101" width="0.3674%" height="15" fill="rgb(250,229,37)" fg:x="681" fg:w="22"/><text x="11.6657%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="11.7401%" y="101" width="0.3674%" height="15" fill="rgb(206,174,23)" fg:x="703" fg:w="22"/><text x="12.0331%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="12.1075%" y="101" width="0.3674%" height="15" fill="rgb(211,33,43)" fg:x="725" fg:w="22"/><text x="12.4005%" y="111.50"></text></g><g><title>@new_async (231 instructions, 3.86%)</title><rect x="10.2705%" y="117" width="3.8577%" height="15" fill="rgb(245,58,50)" fg:x="615" fg:w="231"/><text x="10.5635%" y="127.50">@ne..</text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="14.1283%" y="117" width="0.3674%" height="15" fill="rgb(244,68,36)" fg:x="846" fg:w="22"/><text x="14.4212%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="14.4957%" y="117" width="0.3674%" height="15" fill="rgb(232,229,15)" fg:x="868" fg:w="22"/><text x="14.7886%" y="127.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (7 instructions, 0.12%)</title><rect x="14.8631%" y="101" width="0.1169%" height="15" fill="rgb(254,30,23)" fg:x="890" fg:w="7"/><text x="15.1560%" y="111.50"></text></g><g><title>remember_continuation (58 instructions, 0.97%)</title><rect x="14.8631%" y="117" width="0.9686%" height="15" fill="rgb(235,160,14)" fg:x="890" fg:w="58"/><text x="15.1560%" y="127.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.43%)</title><rect x="15.8317%" y="117" width="0.4342%" height="15" fill="rgb(212,155,44)" fg:x="948" fg:w="26"/><text x="16.1246%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="16.2659%" y="117" width="0.5010%" height="15" fill="rgb(226,2,50)" fg:x="974" fg:w="30"/><text x="16.5588%" y="127.50"></text></g><g><title>memcpy (64 instructions, 1.07%)</title><rect x="16.7669%" y="117" width="1.0688%" height="15" fill="rgb(234,177,6)" fg:x="1004" fg:w="64"/><text x="17.0598%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="17.8357%" y="117" width="0.5010%" height="15" fill="rgb(217,24,9)" fg:x="1068" fg:w="30"/><text x="18.1286%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.15%)</title><rect x="18.3367%" y="101" width="0.1503%" height="15" fill="rgb(220,13,46)" fg:x="1098" fg:w="9"/><text x="18.6296%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.53%)</title><rect x="18.3367%" y="117" width="0.5344%" height="15" fill="rgb(239,221,27)" fg:x="1098" fg:w="32"/><text x="18.6296%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (34 instructions, 0.57%)</title><rect x="18.8711%" y="37" width="0.5678%" height="15" fill="rgb(222,198,25)" fg:x="1130" fg:w="34"/><text x="19.1640%" y="47.50"></text></g><g><title>memset (233 instructions, 3.89%)</title><rect x="19.4389%" y="37" width="3.8911%" height="15" fill="rgb(211,99,13)" fg:x="1164" fg:w="233"/><text x="19.7318%" y="47.50">mem..</text></g><g><title>mp_calloc (291 instructions, 4.86%)</title><rect x="18.8711%" y="53" width="4.8597%" height="15" fill="rgb(232,111,31)" fg:x="1130" fg:w="291"/><text x="19.1640%" y="63.50">mp_ca..</text></g><g><title>mp_init (306 instructions, 5.11%)</title><rect x="18.8711%" y="69" width="5.1102%" height="15" fill="rgb(245,82,37)" fg:x="1130" fg:w="306"/><text x="19.1640%" y="79.50">mp_in..</text></g><g><title>mp_set_u64 (479 instructions, 8.00%)</title><rect x="23.9813%" y="69" width="7.9993%" height="15" fill="rgb(227,149,46)" fg:x="1436" fg:w="479"/><text x="24.2743%" y="79.50">mp_set_u64</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (30 instructions, 0.50%)</title><rect x="31.9806%" y="69" width="0.5010%" height="15" fill="rgb(218,36,50)" fg:x="1915" fg:w="30"/><text x="32.2736%" y="79.50"></text></g><g><title>bigint_of_int64 (864 instructions, 14.43%)</title><rect x="18.8711%" y="85" width="14.4289%" height="15" fill="rgb(226,80,48)" fg:x="1130" fg:w="864"/><text x="19.1640%" y="95.50">bigint_of_int64</text></g><g><title>mp_cmp_mag (17 instructions, 0.28%)</title><rect x="33.2999%" y="69" width="0.2839%" height="15" fill="rgb(238,224,15)" fg:x="1994" fg:w="17"/><text x="33.5929%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.52%)</title><rect x="33.2999%" y="85" width="0.5177%" height="15" fill="rgb(241,136,10)" fg:x="1994" fg:w="31"/><text x="33.5929%" y="95.50"></text></g><g><title>B_lt (935 instructions, 15.61%)</title><rect x="18.8711%" y="101" width="15.6146%" height="15" fill="rgb(208,32,45)" fg:x="1130" fg:w="935"/><text x="19.1640%" y="111.50">B_lt</text></g><g><title>B_rsh (4 instructions, 0.07%)</title><rect x="34.4856%" y="101" width="0.0668%" height="15" fill="rgb(207,135,9)" fg:x="2065" fg:w="4"/><text x="34.7786%" y="111.50"></text></g><g><title>@add_cycles (967 instructions, 16.15%)</title><rect x="18.8711%" y="117" width="16.1490%" height="15" fill="rgb(206,86,44)" fg:x="1130" fg:w="967"/><text x="19.1640%" y="127.50">@add_cycles</text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="35.0200%" y="101" width="0.3674%" height="15" fill="rgb(245,177,15)" fg:x="2097" fg:w="22"/><text x="35.3130%" y="111.50"></text></g><g><title>to_2_tuple (37 instructions, 0.62%)</title><rect x="35.0200%" y="117" width="0.6179%" height="15" fill="rgb(206,64,50)" fg:x="2097" fg:w="37"/><text x="35.3130%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="35.6379%" y="101" width="0.3674%" height="15" fill="rgb(234,36,40)" fg:x="2134" fg:w="22"/><text x="35.9309%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="36.0053%" y="101" width="0.3674%" height="15" fill="rgb(213,64,8)" fg:x="2156" fg:w="22"/><text x="36.2983%" y="111.50"></text></g><g><title>enqueue (106 instructions, 1.77%)</title><rect x="35.6379%" y="117" width="1.7702%" height="15" fill="rgb(210,75,36)" fg:x="2134" fg:w="106"/><text x="35.9309%" y="127.50"></text></g><g><title>$lambda.2 (1,931 instructions, 32.25%)</title><rect x="8.7341%" y="133" width="32.2478%" height="15" fill="rgb(229,88,21)" fg:x="523" fg:w="1931"/><text x="9.0271%" y="143.50">$lambda.2</text></g><g><title>schedule_copying_gc (43 instructions, 0.72%)</title><rect x="40.9820%" y="133" width="0.7181%" height="15" fill="rgb(252,204,47)" fg:x="2454" fg:w="43"/><text x="41.2749%" y="143.50"></text></g><g><title>trans_state4 (13 instructions, 0.22%)</title><rect x="41.7001%" y="133" width="0.2171%" height="15" fill="rgb(208,77,27)" fg:x="2497" fg:w="13"/><text x="41.9930%" y="143.50"></text></g><g><title>get (3,179 instructions, 53.09%)</title><rect x="0.0000%" y="149" width="53.0895%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="3179"/><text x="0.2930%" y="159.50">get</text></g><g><title>trans_state5 (8 instructions, 0.13%)</title><rect x="53.0895%" y="133" width="0.1336%" height="15" fill="rgb(225,139,18)" fg:x="3179" fg:w="8"/><text x="53.3825%" y="143.50"></text></g><g><title>recall_continuation (45 instructions, 0.75%)</title><rect x="53.2231%" y="133" width="0.7515%" height="15" fill="rgb(230,137,11)" fg:x="3187" fg:w="45"/><text x="53.5161%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="53.9746%" y="133" width="0.5010%" height="15" fill="rgb(212,28,1)" fg:x="3232" fg:w="30"/><text x="54.2676%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="54.4756%" y="117" width="0.7682%" height="15" fill="rgb(248,164,17)" fg:x="3262" fg:w="46"/><text x="54.7686%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="55.2438%" y="117" width="0.5010%" height="15" fill="rgb(222,171,42)" fg:x="3308" fg:w="30"/><text x="55.5368%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="55.7448%" y="117" width="1.0020%" height="15" fill="rgb(243,84,45)" fg:x="3338" fg:w="60"/><text x="56.0378%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="56.7468%" y="117" width="1.0020%" height="15" fill="rgb(252,49,23)" fg:x="3398" fg:w="60"/><text x="57.0398%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="57.7488%" y="117" width="1.0020%" height="15" fill="rgb(215,19,7)" fg:x="3458" fg:w="60"/><text x="58.0418%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="58.7508%" y="117" width="0.7682%" height="15" fill="rgb(238,81,41)" fg:x="3518" fg:w="46"/><text x="59.0438%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="59.5190%" y="117" width="1.0020%" height="15" fill="rgb(210,199,37)" fg:x="3564" fg:w="60"/><text x="59.8120%" y="127.50"></text></g><g><title>parse_idl_header (521 instructions, 8.70%)</title><rect x="54.4756%" y="133" width="8.7007%" height="15" fill="rgb(244,192,49)" fg:x="3262" fg:w="521"/><text x="54.7686%" y="143.50">parse_idl_..</text></g><g><title>memset (38 instructions, 0.63%)</title><rect x="63.1764%" y="117" width="0.6346%" height="15" fill="rgb(226,211,11)" fg:x="3783" fg:w="38"/><text x="63.4693%" y="127.50"></text></g><g><title>idl_sub_buf_init (49 instructions, 0.82%)</title><rect x="63.1764%" y="133" width="0.8183%" height="15" fill="rgb(236,162,54)" fg:x="3783" fg:w="49"/><text x="63.4693%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="63.9947%" y="133" width="0.7682%" height="15" fill="rgb(220,229,9)" fg:x="3832" fg:w="46"/><text x="64.2876%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="64.7629%" y="133" width="1.0020%" height="15" fill="rgb(250,87,22)" fg:x="3878" fg:w="60"/><text x="65.0558%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="65.7649%" y="133" width="1.0020%" height="15" fill="rgb(239,43,17)" fg:x="3938" fg:w="60"/><text x="66.0578%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="66.7669%" y="133" width="1.0020%" height="15" fill="rgb(231,177,25)" fg:x="3998" fg:w="60"/><text x="67.0598%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.00%)</title><rect x="67.7689%" y="133" width="1.0020%" height="15" fill="rgb(219,179,1)" fg:x="4058" fg:w="60"/><text x="68.0618%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.77%)</title><rect x="68.7709%" y="117" width="0.7682%" height="15" fill="rgb(238,219,53)" fg:x="4118" fg:w="46"/><text x="69.0638%" y="127.50"></text></g><g><title>utf8_validate (163 instructions, 2.72%)</title><rect x="69.5391%" y="117" width="2.7221%" height="15" fill="rgb(232,167,36)" fg:x="4164" fg:w="163"/><text x="69.8320%" y="127.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="72.2612%" y="101" width="0.5010%" height="15" fill="rgb(244,19,51)" fg:x="4327" fg:w="30"/><text x="72.5542%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.62%)</title><rect x="72.2612%" y="117" width="0.6179%" height="15" fill="rgb(224,6,22)" fg:x="4327" fg:w="37"/><text x="72.5542%" y="127.50"></text></g><g><title>memcpy (79 instructions, 1.32%)</title><rect x="72.8791%" y="117" width="1.3193%" height="15" fill="rgb(224,145,5)" fg:x="4364" fg:w="79"/><text x="73.1721%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (367 instructions, 6.13%)</title><rect x="68.7709%" y="133" width="6.1289%" height="15" fill="rgb(234,130,49)" fg:x="4118" fg:w="367"/><text x="69.0638%" y="143.50">@deser..</text></g><g><title>opt_inject (14 instructions, 0.23%)</title><rect x="74.8998%" y="133" width="0.2338%" height="15" fill="rgb(254,6,2)" fg:x="4485" fg:w="14"/><text x="75.1928%" y="143.50"></text></g><g><title>from_word128_ptr (17 instructions, 0.28%)</title><rect x="75.1336%" y="101" width="0.2839%" height="15" fill="rgb(208,96,46)" fg:x="4499" fg:w="17"/><text x="75.4266%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="75.4175%" y="101" width="0.3674%" height="15" fill="rgb(239,3,39)" fg:x="4516" fg:w="22"/><text x="75.7105%" y="111.50"></text></g><g><title>alloc_words (22 instructions, 0.37%)</title><rect x="75.7849%" y="85" width="0.3674%" height="15" fill="rgb(233,210,1)" fg:x="4538" fg:w="22"/><text x="76.0779%" y="95.50"></text></g><g><title>to_2_tuple (37 instructions, 0.62%)</title><rect x="75.7849%" y="101" width="0.6179%" height="15" fill="rgb(244,137,37)" fg:x="4538" fg:w="37"/><text x="76.0779%" y="111.50"></text></g><g><title>opt_inject (14 instructions, 0.23%)</title><rect x="76.4028%" y="101" width="0.2338%" height="15" fill="rgb(240,136,2)" fg:x="4575" fg:w="14"/><text x="76.6958%" y="111.50"></text></g><g><title>opt_project (14 instructions, 0.23%)</title><rect x="76.6366%" y="69" width="0.2338%" height="15" fill="rgb(239,18,37)" fg:x="4589" fg:w="14"/><text x="76.9296%" y="79.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.45%)</title><rect x="76.8704%" y="69" width="0.4509%" height="15" fill="rgb(218,185,22)" fg:x="4603" fg:w="27"/><text x="77.1634%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="77.3213%" y="69" width="0.5010%" height="15" fill="rgb(225,218,4)" fg:x="4630" fg:w="30"/><text x="77.6143%" y="79.50"></text></g><g><title>memcpy (52 instructions, 0.87%)</title><rect x="77.8223%" y="69" width="0.8684%" height="15" fill="rgb(230,182,32)" fg:x="4660" fg:w="52"/><text x="78.1153%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.50%)</title><rect x="78.6907%" y="69" width="0.5010%" height="15" fill="rgb(242,56,43)" fg:x="4712" fg:w="30"/><text x="78.9837%" y="79.50"></text></g><g><title>opt_project (14 instructions, 0.23%)</title><rect x="79.1917%" y="69" width="0.2338%" height="15" fill="rgb(233,99,24)" fg:x="4742" fg:w="14"/><text x="79.4847%" y="79.50"></text></g><g><title>leb128_encode (9 instructions, 0.15%)</title><rect x="79.4255%" y="53" width="0.1503%" height="15" fill="rgb(234,209,42)" fg:x="4756" fg:w="9"/><text x="79.7185%" y="63.50"></text></g><g><title>memcpy (57 instructions, 0.95%)</title><rect x="79.5758%" y="37" width="0.9519%" height="15" fill="rgb(227,7,12)" fg:x="4765" fg:w="57"/><text x="79.8688%" y="47.50"></text></g><g><title>text_to_buf (78 instructions, 1.30%)</title><rect x="79.5758%" y="53" width="1.3026%" height="15" fill="rgb(245,203,43)" fg:x="4765" fg:w="78"/><text x="79.8688%" y="63.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 1.90%)</title><rect x="79.4255%" y="69" width="1.9038%" height="15" fill="rgb(238,205,33)" fg:x="4756" fg:w="114"/><text x="79.7185%" y="79.50"></text></g><g><title>reply_with_data (40 instructions, 0.67%)</title><rect x="81.3293%" y="69" width="0.6680%" height="15" fill="rgb(231,56,7)" fg:x="4870" fg:w="40"/><text x="81.6223%" y="79.50"></text></g><g><title>$lambda.27 (429 instructions, 7.16%)</title><rect x="76.6366%" y="85" width="7.1643%" height="15" fill="rgb(244,186,29)" fg:x="4589" fg:w="429"/><text x="76.9296%" y="95.50">$lambda...</text></g><g><title>anon-func-349.15 (451 instructions, 7.53%)</title><rect x="76.6366%" y="101" width="7.5317%" height="15" fill="rgb(234,111,31)" fg:x="4589" fg:w="451"/><text x="76.9296%" y="111.50">anon-fun..</text></g><g><title>fulfill (602 instructions, 10.05%)</title><rect x="75.1336%" y="117" width="10.0534%" height="15" fill="rgb(241,149,10)" fg:x="4499" fg:w="602"/><text x="75.4266%" y="127.50">fulfill</text></g><g><title>$lambda.11 (609 instructions, 10.17%)</title><rect x="75.1336%" y="133" width="10.1703%" height="15" fill="rgb(249,206,44)" fg:x="4499" fg:w="609"/><text x="75.4266%" y="143.50">$lambda.11</text></g><g><title>schedule_copying_gc (43 instructions, 0.72%)</title><rect x="85.3039%" y="133" width="0.7181%" height="15" fill="rgb(251,153,30)" fg:x="5108" fg:w="43"/><text x="85.5969%" y="143.50"></text></g><g><title>trans_state4 (13 instructions, 0.22%)</title><rect x="86.0220%" y="133" width="0.2171%" height="15" fill="rgb(239,152,38)" fg:x="5151" fg:w="13"/><text x="86.3150%" y="143.50"></text></g><g><title>all (5,988 instructions, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="5988"/><text x="0.2930%" y="175.50"></text></g><g><title>@callback&lt;(?t)&gt; (2,809 instructions, 46.91%)</title><rect x="53.0895%" y="149" width="46.9105%" height="15" fill="rgb(244,64,35)" fg:x="3179" fg:w="2809"/><text x="53.3825%" y="159.50">@callback&lt;(?t)&gt;</text></g></svg></svg>