<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="246" onload="init(evt)" viewBox="0 0 1024 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.get(5)</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="229.00"> </text><svg id="frames" x="10" width="1004" total_samples="6532"><g><title>trans_state5 (9 instructions, 0.14%)</title><rect x="0.0000%" y="165" width="0.1378%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="9"/><text x="0.2930%" y="175.50"></text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="0.1378%" y="165" width="0.0459%" height="15" fill="rgb(225,218,4)" fg:x="9" fg:w="3"/><text x="0.4308%" y="175.50"></text></g><g><title>@reset_refund (3 instructions, 0.05%)</title><rect x="0.1837%" y="165" width="0.0459%" height="15" fill="rgb(230,182,32)" fg:x="12" fg:w="3"/><text x="0.4767%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="0.2296%" y="149" width="0.5205%" height="15" fill="rgb(242,56,43)" fg:x="15" fg:w="34"/><text x="0.5226%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="0.2296%" y="165" width="0.5511%" height="15" fill="rgb(233,99,24)" fg:x="15" fg:w="36"/><text x="0.5226%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="0.7808%" y="133" width="0.7808%" height="15" fill="rgb(234,209,42)" fg:x="51" fg:w="51"/><text x="1.0737%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="1.5615%" y="133" width="0.5205%" height="15" fill="rgb(227,7,12)" fg:x="102" fg:w="34"/><text x="1.8545%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="2.0821%" y="133" width="0.7808%" height="15" fill="rgb(245,203,43)" fg:x="136" fg:w="51"/><text x="2.3750%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="2.8628%" y="133" width="1.0410%" height="15" fill="rgb(238,205,33)" fg:x="187" fg:w="68"/><text x="3.1558%" y="143.50"></text></g><g><title>parse_idl_header (290 instructions, 4.44%)</title><rect x="0.7808%" y="149" width="4.4397%" height="15" fill="rgb(231,56,7)" fg:x="51" fg:w="290"/><text x="1.0737%" y="159.50">pars..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.14%)</title><rect x="5.2205%" y="149" width="0.1378%" height="15" fill="rgb(244,186,29)" fg:x="341" fg:w="9"/><text x="5.5134%" y="159.50"></text></g><g><title>memset (4 instructions, 0.06%)</title><rect x="5.3582%" y="133" width="0.0612%" height="15" fill="rgb(234,111,31)" fg:x="350" fg:w="4"/><text x="5.6512%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.29%)</title><rect x="5.3582%" y="149" width="0.2909%" height="15" fill="rgb(241,149,10)" fg:x="350" fg:w="19"/><text x="5.6512%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="5.6491%" y="149" width="0.7808%" height="15" fill="rgb(249,206,44)" fg:x="369" fg:w="51"/><text x="5.9421%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="6.4299%" y="149" width="1.0410%" height="15" fill="rgb(251,153,30)" fg:x="420" fg:w="68"/><text x="6.7229%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.05%)</title><rect x="7.4709%" y="149" width="0.0459%" height="15" fill="rgb(239,152,38)" fg:x="488" fg:w="3"/><text x="7.7639%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.05%)</title><rect x="7.5168%" y="149" width="0.0459%" height="15" fill="rgb(249,139,47)" fg:x="491" fg:w="3"/><text x="7.8098%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.05%)</title><rect x="7.5628%" y="149" width="0.0459%" height="15" fill="rgb(244,64,35)" fg:x="494" fg:w="3"/><text x="7.8557%" y="159.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 0.55%)</title><rect x="7.6087%" y="133" width="0.5511%" height="15" fill="rgb(216,46,15)" fg:x="497" fg:w="36"/><text x="7.9017%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 1.22%)</title><rect x="7.6087%" y="149" width="1.2247%" height="15" fill="rgb(250,74,19)" fg:x="497" fg:w="80"/><text x="7.9017%" y="159.50"></text></g><g><title>@deserialize&lt;N&gt; (730 instructions, 11.18%)</title><rect x="0.7808%" y="165" width="11.1758%" height="15" fill="rgb(249,42,33)" fg:x="51" fg:w="730"/><text x="1.0737%" y="175.50">@deserialize&lt;N&gt;</text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="11.9565%" y="165" width="0.3980%" height="15" fill="rgb(242,149,17)" fg:x="781" fg:w="26"/><text x="12.2495%" y="175.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.12%)</title><rect x="12.3546%" y="133" width="0.1225%" height="15" fill="rgb(244,29,21)" fg:x="807" fg:w="8"/><text x="12.6475%" y="143.50"></text></g><g><title>B_rem (25 instructions, 0.38%)</title><rect x="12.3546%" y="149" width="0.3827%" height="15" fill="rgb(220,130,37)" fg:x="807" fg:w="25"/><text x="12.6475%" y="159.50"></text></g><g><title>Array.idx (12 instructions, 0.18%)</title><rect x="12.7373%" y="133" width="0.1837%" height="15" fill="rgb(211,67,2)" fg:x="832" fg:w="12"/><text x="13.0303%" y="143.50"></text></g><g><title>Array.idx_bigint (23 instructions, 0.35%)</title><rect x="12.7373%" y="149" width="0.3521%" height="15" fill="rgb(235,68,52)" fg:x="832" fg:w="23"/><text x="13.0303%" y="159.50"></text></g><g><title>opt_project (14 instructions, 0.21%)</title><rect x="13.0894%" y="149" width="0.2143%" height="15" fill="rgb(246,142,3)" fg:x="855" fg:w="14"/><text x="13.3824%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="13.3037%" y="133" width="0.3980%" height="15" fill="rgb(241,25,7)" fg:x="869" fg:w="26"/><text x="13.5967%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.63%)</title><rect x="13.3037%" y="149" width="0.6277%" height="15" fill="rgb(242,119,39)" fg:x="869" fg:w="41"/><text x="13.5967%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="13.9314%" y="133" width="0.3980%" height="15" fill="rgb(241,98,45)" fg:x="910" fg:w="26"/><text x="14.2244%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="14.3295%" y="133" width="0.3980%" height="15" fill="rgb(254,28,30)" fg:x="936" fg:w="26"/><text x="14.6224%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="14.7275%" y="133" width="0.3980%" height="15" fill="rgb(241,142,54)" fg:x="962" fg:w="26"/><text x="15.0205%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="15.1255%" y="133" width="0.3980%" height="15" fill="rgb(222,85,15)" fg:x="988" fg:w="26"/><text x="15.4185%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="15.5236%" y="133" width="0.3980%" height="15" fill="rgb(210,85,47)" fg:x="1014" fg:w="26"/><text x="15.8165%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="15.9216%" y="133" width="0.3980%" height="15" fill="rgb(224,206,25)" fg:x="1040" fg:w="26"/><text x="16.2146%" y="143.50"></text></g><g><title>@new_async (266 instructions, 4.07%)</title><rect x="13.9314%" y="149" width="4.0723%" height="15" fill="rgb(243,201,19)" fg:x="910" fg:w="266"/><text x="14.2244%" y="159.50">@ne..</text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="18.0037%" y="149" width="0.3980%" height="15" fill="rgb(236,59,4)" fg:x="1176" fg:w="26"/><text x="18.2966%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.11%)</title><rect x="18.4017%" y="149" width="0.1072%" height="15" fill="rgb(254,179,45)" fg:x="1202" fg:w="7"/><text x="18.6947%" y="159.50"></text></g><g><title>as_ptr_size (7 instructions, 0.11%)</title><rect x="18.5089%" y="149" width="0.1072%" height="15" fill="rgb(226,14,10)" fg:x="1209" fg:w="7"/><text x="18.8018%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="18.6160%" y="149" width="0.3980%" height="15" fill="rgb(244,27,41)" fg:x="1216" fg:w="26"/><text x="18.9090%" y="159.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (9 instructions, 0.14%)</title><rect x="19.0141%" y="133" width="0.1378%" height="15" fill="rgb(235,35,32)" fg:x="1242" fg:w="9"/><text x="19.3071%" y="143.50"></text></g><g><title>remember_continuation (71 instructions, 1.09%)</title><rect x="19.0141%" y="149" width="1.0870%" height="15" fill="rgb(218,68,31)" fg:x="1242" fg:w="71"/><text x="19.3071%" y="159.50"></text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.49%)</title><rect x="20.1010%" y="133" width="0.4899%" height="15" fill="rgb(207,120,37)" fg:x="1313" fg:w="32"/><text x="20.3940%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="20.5909%" y="117" width="0.5205%" height="15" fill="rgb(227,98,0)" fg:x="1345" fg:w="34"/><text x="20.8839%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="20.5909%" y="133" width="0.5511%" height="15" fill="rgb(207,7,3)" fg:x="1345" fg:w="36"/><text x="20.8839%" y="143.50"></text></g><g><title>memcpy (66 instructions, 1.01%)</title><rect x="21.1421%" y="133" width="1.0104%" height="15" fill="rgb(206,98,19)" fg:x="1381" fg:w="66"/><text x="21.4350%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="22.1525%" y="117" width="0.5205%" height="15" fill="rgb(217,5,26)" fg:x="1447" fg:w="34"/><text x="22.4454%" y="127.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="22.1525%" y="133" width="0.5511%" height="15" fill="rgb(235,190,38)" fg:x="1447" fg:w="36"/><text x="22.4454%" y="143.50"></text></g><g><title>leb128_encode (12 instructions, 0.18%)</title><rect x="22.7036%" y="117" width="0.1837%" height="15" fill="rgb(247,86,24)" fg:x="1483" fg:w="12"/><text x="22.9966%" y="127.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.61%)</title><rect x="22.7036%" y="133" width="0.6124%" height="15" fill="rgb(205,101,16)" fg:x="1483" fg:w="40"/><text x="22.9966%" y="143.50"></text></g><g><title>@serialize&lt;N&gt; (273 instructions, 4.18%)</title><rect x="20.1010%" y="149" width="4.1794%" height="15" fill="rgb(246,168,33)" fg:x="1313" fg:w="273"/><text x="20.3940%" y="159.50">@ser..</text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="24.2805%" y="133" width="0.0459%" height="15" fill="rgb(231,114,1)" fg:x="1586" fg:w="3"/><text x="24.5734%" y="143.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (38 instructions, 0.58%)</title><rect x="24.3264%" y="53" width="0.5818%" height="15" fill="rgb(207,184,53)" fg:x="1589" fg:w="38"/><text x="24.6194%" y="63.50"></text></g><g><title>memset (244 instructions, 3.74%)</title><rect x="24.9081%" y="53" width="3.7355%" height="15" fill="rgb(224,95,51)" fg:x="1627" fg:w="244"/><text x="25.2011%" y="63.50">mem..</text></g><g><title>mp_calloc (308 instructions, 4.72%)</title><rect x="24.3264%" y="69" width="4.7152%" height="15" fill="rgb(212,188,45)" fg:x="1589" fg:w="308"/><text x="24.6194%" y="79.50">mp_c..</text></g><g><title>mp_init (323 instructions, 4.94%)</title><rect x="24.3264%" y="85" width="4.9449%" height="15" fill="rgb(223,154,38)" fg:x="1589" fg:w="323"/><text x="24.6194%" y="95.50">mp_in..</text></g><g><title>mp_set_u64 (480 instructions, 7.35%)</title><rect x="29.2713%" y="69" width="7.3484%" height="15" fill="rgb(251,22,52)" fg:x="1912" fg:w="480"/><text x="29.5642%" y="79.50">mp_set_u..</text></g><g><title>mp_set_i64 (494 instructions, 7.56%)</title><rect x="29.2713%" y="85" width="7.5628%" height="15" fill="rgb(229,209,22)" fg:x="1912" fg:w="494"/><text x="29.5642%" y="95.50">mp_set_i..</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (31 instructions, 0.47%)</title><rect x="36.8340%" y="85" width="0.4746%" height="15" fill="rgb(234,138,34)" fg:x="2406" fg:w="31"/><text x="37.1270%" y="95.50"></text></g><g><title>bigint_of_int64 (891 instructions, 13.64%)</title><rect x="24.3264%" y="101" width="13.6405%" height="15" fill="rgb(212,95,11)" fg:x="1589" fg:w="891"/><text x="24.6194%" y="111.50">bigint_of_int64</text></g><g><title>mp_cmp_mag (17 instructions, 0.26%)</title><rect x="37.9669%" y="69" width="0.2603%" height="15" fill="rgb(240,179,47)" fg:x="2480" fg:w="17"/><text x="38.2599%" y="79.50"></text></g><g><title>mp_cmp (31 instructions, 0.47%)</title><rect x="37.9669%" y="85" width="0.4746%" height="15" fill="rgb(240,163,11)" fg:x="2480" fg:w="31"/><text x="38.2599%" y="95.50"></text></g><g><title>bigint_lt (54 instructions, 0.83%)</title><rect x="37.9669%" y="101" width="0.8267%" height="15" fill="rgb(236,37,12)" fg:x="2480" fg:w="54"/><text x="38.2599%" y="111.50"></text></g><g><title>B_lt (963 instructions, 14.74%)</title><rect x="24.3264%" y="117" width="14.7428%" height="15" fill="rgb(232,164,16)" fg:x="1589" fg:w="963"/><text x="24.6194%" y="127.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.18%)</title><rect x="39.0692%" y="117" width="0.1837%" height="15" fill="rgb(244,205,15)" fg:x="2552" fg:w="12"/><text x="39.3622%" y="127.50"></text></g><g><title>cycle_add (999 instructions, 15.29%)</title><rect x="24.3264%" y="133" width="15.2939%" height="15" fill="rgb(223,117,47)" fg:x="1589" fg:w="999"/><text x="24.6194%" y="143.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 15.45%)</title><rect x="24.2805%" y="149" width="15.4470%" height="15" fill="rgb(244,107,35)" fg:x="1586" fg:w="1009"/><text x="24.5734%" y="159.50">@add_cycles</text></g><g><title>@call_succeeded (2 instructions, 0.03%)</title><rect x="39.7275%" y="149" width="0.0306%" height="15" fill="rgb(205,140,8)" fg:x="2595" fg:w="2"/><text x="40.0205%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="39.7581%" y="133" width="0.3980%" height="15" fill="rgb(228,84,46)" fg:x="2597" fg:w="26"/><text x="40.0511%" y="143.50"></text></g><g><title>to_2_tuple (41 instructions, 0.63%)</title><rect x="39.7581%" y="149" width="0.6277%" height="15" fill="rgb(254,188,9)" fg:x="2597" fg:w="41"/><text x="40.0511%" y="159.50"></text></g><g><title>from_2_tuple (6 instructions, 0.09%)</title><rect x="40.3858%" y="149" width="0.0919%" height="15" fill="rgb(206,112,54)" fg:x="2638" fg:w="6"/><text x="40.6788%" y="159.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="40.4776%" y="133" width="0.3980%" height="15" fill="rgb(216,84,49)" fg:x="2644" fg:w="26"/><text x="40.7706%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="40.8757%" y="133" width="0.3980%" height="15" fill="rgb(214,194,35)" fg:x="2670" fg:w="26"/><text x="41.1687%" y="143.50"></text></g><g><title>enqueue (118 instructions, 1.81%)</title><rect x="40.4776%" y="149" width="1.8065%" height="15" fill="rgb(249,28,3)" fg:x="2644" fg:w="118"/><text x="40.7706%" y="159.50"></text></g><g><title>$lambda (2,128 instructions, 32.58%)</title><rect x="12.3546%" y="165" width="32.5781%" height="15" fill="rgb(222,56,52)" fg:x="807" fg:w="2128"/><text x="12.6475%" y="175.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.77%)</title><rect x="44.9326%" y="165" width="0.7655%" height="15" fill="rgb(245,217,50)" fg:x="2935" fg:w="50"/><text x="45.2256%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.21%)</title><rect x="45.6981%" y="165" width="0.2143%" height="15" fill="rgb(213,201,24)" fg:x="2985" fg:w="14"/><text x="45.9911%" y="175.50"></text></g><g><title>get (3,476 instructions, 53.21%)</title><rect x="0.0000%" y="181" width="53.2149%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="3476"/><text x="0.2930%" y="191.50">get</text></g><g><title>trans_state5 (9 instructions, 0.14%)</title><rect x="53.2149%" y="165" width="0.1378%" height="15" fill="rgb(219,72,43)" fg:x="3476" fg:w="9"/><text x="53.5079%" y="175.50"></text></g><g><title>recall_continuation (57 instructions, 0.87%)</title><rect x="53.3527%" y="165" width="0.8726%" height="15" fill="rgb(209,138,14)" fg:x="3485" fg:w="57"/><text x="53.6457%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="54.2254%" y="149" width="0.5205%" height="15" fill="rgb(222,18,33)" fg:x="3542" fg:w="34"/><text x="54.5183%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="54.2254%" y="165" width="0.5511%" height="15" fill="rgb(213,199,7)" fg:x="3542" fg:w="36"/><text x="54.5183%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="54.7765%" y="133" width="0.7808%" height="15" fill="rgb(250,110,10)" fg:x="3578" fg:w="51"/><text x="55.0695%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="55.5573%" y="133" width="0.5205%" height="15" fill="rgb(248,123,6)" fg:x="3629" fg:w="34"/><text x="55.8502%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="56.0778%" y="133" width="1.0410%" height="15" fill="rgb(206,91,31)" fg:x="3663" fg:w="68"/><text x="56.3707%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="57.1188%" y="133" width="1.0410%" height="15" fill="rgb(211,154,13)" fg:x="3731" fg:w="68"/><text x="57.4118%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="58.1598%" y="133" width="1.0410%" height="15" fill="rgb(225,148,7)" fg:x="3799" fg:w="68"/><text x="58.4528%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="59.2009%" y="133" width="0.7808%" height="15" fill="rgb(220,160,43)" fg:x="3867" fg:w="51"/><text x="59.4938%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="59.9816%" y="133" width="1.0410%" height="15" fill="rgb(213,52,39)" fg:x="3918" fg:w="68"/><text x="60.2746%" y="143.50"></text></g><g><title>parse_idl_header (569 instructions, 8.71%)</title><rect x="54.7765%" y="149" width="8.7110%" height="15" fill="rgb(243,137,7)" fg:x="3578" fg:w="569"/><text x="55.0695%" y="159.50">parse_idl_..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.14%)</title><rect x="63.4874%" y="149" width="0.1378%" height="15" fill="rgb(230,79,13)" fg:x="4147" fg:w="9"/><text x="63.7804%" y="159.50"></text></g><g><title>memset (39 instructions, 0.60%)</title><rect x="63.6252%" y="133" width="0.5971%" height="15" fill="rgb(247,105,23)" fg:x="4156" fg:w="39"/><text x="63.9182%" y="143.50"></text></g><g><title>idl_sub_buf_init (54 instructions, 0.83%)</title><rect x="63.6252%" y="149" width="0.8267%" height="15" fill="rgb(223,179,41)" fg:x="4156" fg:w="54"/><text x="63.9182%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="64.4519%" y="149" width="0.7808%" height="15" fill="rgb(218,9,34)" fg:x="4210" fg:w="51"/><text x="64.7449%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="65.2327%" y="149" width="1.0410%" height="15" fill="rgb(222,106,8)" fg:x="4261" fg:w="68"/><text x="65.5257%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.05%)</title><rect x="66.2737%" y="149" width="0.0459%" height="15" fill="rgb(211,220,0)" fg:x="4329" fg:w="3"/><text x="66.5667%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.05%)</title><rect x="66.3197%" y="149" width="0.0459%" height="15" fill="rgb(229,52,16)" fg:x="4332" fg:w="3"/><text x="66.6126%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.05%)</title><rect x="66.3656%" y="149" width="0.0459%" height="15" fill="rgb(212,155,18)" fg:x="4335" fg:w="3"/><text x="66.6586%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="66.4115%" y="133" width="1.0410%" height="15" fill="rgb(242,21,14)" fg:x="4338" fg:w="68"/><text x="66.7045%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="67.4525%" y="133" width="1.0410%" height="15" fill="rgb(222,19,48)" fg:x="4406" fg:w="68"/><text x="67.7455%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.04%)</title><rect x="68.4936%" y="133" width="1.0410%" height="15" fill="rgb(232,45,27)" fg:x="4474" fg:w="68"/><text x="68.7865%" y="143.50"></text></g><g><title>set_local %i0 (3 instructions, 0.05%)</title><rect x="69.5346%" y="133" width="0.0459%" height="15" fill="rgb(249,103,42)" fg:x="4542" fg:w="3"/><text x="69.8276%" y="143.50"></text></g><g><title>set_local %i1 (3 instructions, 0.05%)</title><rect x="69.5805%" y="133" width="0.0459%" height="15" fill="rgb(246,81,33)" fg:x="4545" fg:w="3"/><text x="69.8735%" y="143.50"></text></g><g><title>set_local %i2 (3 instructions, 0.05%)</title><rect x="69.6265%" y="133" width="0.0459%" height="15" fill="rgb(252,33,42)" fg:x="4548" fg:w="3"/><text x="69.9194%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.78%)</title><rect x="69.6724%" y="117" width="0.7808%" height="15" fill="rgb(209,212,41)" fg:x="4551" fg:w="51"/><text x="69.9654%" y="127.50"></text></g><g><title>core::str::converts::from_utf8::h828634ce6cdca907 (155 instructions, 2.37%)</title><rect x="70.4532%" y="101" width="2.3729%" height="15" fill="rgb(207,154,6)" fg:x="4602" fg:w="155"/><text x="70.7461%" y="111.50">c..</text></g><g><title>utf8_validate (172 instructions, 2.63%)</title><rect x="70.4532%" y="117" width="2.6332%" height="15" fill="rgb(223,64,47)" fg:x="4602" fg:w="172"/><text x="70.7461%" y="127.50">u..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="73.0863%" y="85" width="0.5205%" height="15" fill="rgb(211,161,38)" fg:x="4774" fg:w="34"/><text x="73.3793%" y="95.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (41 instructions, 0.63%)</title><rect x="73.0863%" y="101" width="0.6277%" height="15" fill="rgb(219,138,40)" fg:x="4774" fg:w="41"/><text x="73.3793%" y="111.50"></text></g><g><title>memcpy (82 instructions, 1.26%)</title><rect x="73.7140%" y="101" width="1.2554%" height="15" fill="rgb(241,228,46)" fg:x="4815" fg:w="82"/><text x="74.0070%" y="111.50"></text></g><g><title>text_of_ptr_size (133 instructions, 2.04%)</title><rect x="73.0863%" y="117" width="2.0361%" height="15" fill="rgb(223,209,38)" fg:x="4774" fg:w="133"/><text x="73.3793%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (393 instructions, 6.02%)</title><rect x="69.6724%" y="133" width="6.0165%" height="15" fill="rgb(236,164,45)" fg:x="4551" fg:w="393"/><text x="69.9654%" y="143.50">@deser..</text></g><g><title>opt_inject (14 instructions, 0.21%)</title><rect x="75.6889%" y="133" width="0.2143%" height="15" fill="rgb(231,15,5)" fg:x="4944" fg:w="14"/><text x="75.9819%" y="143.50"></text></g><g><title>@deserialize_go&lt;?t&gt; (772 instructions, 11.82%)</title><rect x="66.4115%" y="149" width="11.8187%" height="15" fill="rgb(252,35,15)" fg:x="4338" fg:w="772"/><text x="66.7045%" y="159.50">@deserialize_go..</text></g><g><title>@deserialize&lt;?t&gt; (1,736 instructions, 26.58%)</title><rect x="54.7765%" y="165" width="26.5769%" height="15" fill="rgb(248,181,18)" fg:x="3578" fg:w="1736"/><text x="55.0695%" y="175.50">@deserialize&lt;?t&gt;</text></g><g><title>from_word128_ptr (17 instructions, 0.26%)</title><rect x="81.3533%" y="101" width="0.2603%" height="15" fill="rgb(233,39,42)" fg:x="5314" fg:w="17"/><text x="81.6463%" y="111.50"></text></g><g><title>cycle_refunded (30 instructions, 0.46%)</title><rect x="81.3533%" y="117" width="0.4593%" height="15" fill="rgb(238,110,33)" fg:x="5314" fg:w="30"/><text x="81.6463%" y="127.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.49%)</title><rect x="81.3533%" y="133" width="0.4899%" height="15" fill="rgb(233,195,10)" fg:x="5314" fg:w="32"/><text x="81.6463%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="81.8432%" y="133" width="0.3980%" height="15" fill="rgb(254,105,3)" fg:x="5346" fg:w="26"/><text x="82.1362%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.40%)</title><rect x="82.2413%" y="117" width="0.3980%" height="15" fill="rgb(221,225,9)" fg:x="5372" fg:w="26"/><text x="82.5342%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.63%)</title><rect x="82.2413%" y="133" width="0.6277%" height="15" fill="rgb(224,227,45)" fg:x="5372" fg:w="41"/><text x="82.5342%" y="143.50"></text></g><g><title>opt_inject (14 instructions, 0.21%)</title><rect x="82.8690%" y="133" width="0.2143%" height="15" fill="rgb(229,198,43)" fg:x="5413" fg:w="14"/><text x="83.1619%" y="143.50"></text></g><g><title>@reset_cycles (3 instructions, 0.05%)</title><rect x="83.0833%" y="117" width="0.0459%" height="15" fill="rgb(206,209,35)" fg:x="5427" fg:w="3"/><text x="83.3763%" y="127.50"></text></g><g><title>opt_project (14 instructions, 0.21%)</title><rect x="83.1292%" y="69" width="0.2143%" height="15" fill="rgb(245,195,53)" fg:x="5430" fg:w="14"/><text x="83.4222%" y="79.50"></text></g><g><title>text_size (4 instructions, 0.06%)</title><rect x="83.3435%" y="53" width="0.0612%" height="15" fill="rgb(240,92,26)" fg:x="5444" fg:w="4"/><text x="83.6365%" y="63.50"></text></g><g><title>@buffer_size&lt;t&gt; (37 instructions, 0.57%)</title><rect x="83.3435%" y="69" width="0.5664%" height="15" fill="rgb(207,40,23)" fg:x="5444" fg:w="37"/><text x="83.6365%" y="79.50"></text></g><g><title>@buffer_size&lt;?t&gt; (88 instructions, 1.35%)</title><rect x="83.1292%" y="85" width="1.3472%" height="15" fill="rgb(223,111,35)" fg:x="5430" fg:w="88"/><text x="83.4222%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="84.4764%" y="69" width="0.5205%" height="15" fill="rgb(229,147,28)" fg:x="5518" fg:w="34"/><text x="84.7694%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="84.4764%" y="85" width="0.5511%" height="15" fill="rgb(211,29,28)" fg:x="5518" fg:w="36"/><text x="84.7694%" y="95.50"></text></g><g><title>memcpy (54 instructions, 0.83%)</title><rect x="85.0276%" y="85" width="0.8267%" height="15" fill="rgb(228,72,33)" fg:x="5554" fg:w="54"/><text x="85.3205%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.52%)</title><rect x="85.8543%" y="69" width="0.5205%" height="15" fill="rgb(205,214,31)" fg:x="5608" fg:w="34"/><text x="86.1472%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.55%)</title><rect x="85.8543%" y="85" width="0.5511%" height="15" fill="rgb(224,111,15)" fg:x="5608" fg:w="36"/><text x="86.1472%" y="95.50"></text></g><g><title>opt_project (14 instructions, 0.21%)</title><rect x="86.4054%" y="69" width="0.2143%" height="15" fill="rgb(253,21,26)" fg:x="5644" fg:w="14"/><text x="86.6984%" y="79.50"></text></g><g><title>text_size (4 instructions, 0.06%)</title><rect x="86.6197%" y="53" width="0.0612%" height="15" fill="rgb(245,139,43)" fg:x="5658" fg:w="4"/><text x="86.9127%" y="63.50"></text></g><g><title>leb128_encode (12 instructions, 0.18%)</title><rect x="86.6810%" y="53" width="0.1837%" height="15" fill="rgb(252,170,7)" fg:x="5662" fg:w="12"/><text x="86.9739%" y="63.50"></text></g><g><title>memcpy (60 instructions, 0.92%)</title><rect x="86.8647%" y="37" width="0.9186%" height="15" fill="rgb(231,118,14)" fg:x="5674" fg:w="60"/><text x="87.1576%" y="47.50"></text></g><g><title>text_to_buf (84 instructions, 1.29%)</title><rect x="86.8647%" y="53" width="1.2860%" height="15" fill="rgb(238,83,0)" fg:x="5674" fg:w="84"/><text x="87.1576%" y="63.50"></text></g><g><title>@serialize_go&lt;t&gt; (127 instructions, 1.94%)</title><rect x="86.6197%" y="69" width="1.9443%" height="15" fill="rgb(221,39,39)" fg:x="5658" fg:w="127"/><text x="86.9127%" y="79.50"></text></g><g><title>@serialize_go&lt;?t&gt; (165 instructions, 2.53%)</title><rect x="86.4054%" y="85" width="2.5260%" height="15" fill="rgb(222,119,46)" fg:x="5644" fg:w="165"/><text x="86.6984%" y="95.50">@..</text></g><g><title>@serialize&lt;?t&gt; (442 instructions, 6.77%)</title><rect x="83.1292%" y="101" width="6.7667%" height="15" fill="rgb(222,165,49)" fg:x="5430" fg:w="442"/><text x="83.4222%" y="111.50">@serial..</text></g><g><title>reply_with_data (40 instructions, 0.61%)</title><rect x="89.8959%" y="101" width="0.6124%" height="15" fill="rgb(219,113,52)" fg:x="5872" fg:w="40"/><text x="90.1889%" y="111.50"></text></g><g><title>$lambda (487 instructions, 7.46%)</title><rect x="83.1292%" y="117" width="7.4556%" height="15" fill="rgb(214,7,15)" fg:x="5430" fg:w="487"/><text x="83.4222%" y="127.50">$lambda</text></g><g><title>anon-func-349.15 (513 instructions, 7.85%)</title><rect x="83.0833%" y="133" width="7.8536%" height="15" fill="rgb(235,32,4)" fg:x="5427" fg:w="513"/><text x="83.3763%" y="143.50">anon-func..</text></g><g><title>fulfill (680 instructions, 10.41%)</title><rect x="81.3533%" y="149" width="10.4103%" height="15" fill="rgb(238,90,54)" fg:x="5314" fg:w="680"/><text x="81.6463%" y="159.50">fulfill</text></g><g><title>$lambda (688 instructions, 10.53%)</title><rect x="81.3533%" y="165" width="10.5328%" height="15" fill="rgb(213,208,19)" fg:x="5314" fg:w="688"/><text x="81.6463%" y="175.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.77%)</title><rect x="91.8861%" y="165" width="0.7655%" height="15" fill="rgb(233,156,4)" fg:x="6002" fg:w="50"/><text x="92.1791%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.21%)</title><rect x="92.6516%" y="165" width="0.2143%" height="15" fill="rgb(207,194,5)" fg:x="6052" fg:w="14"/><text x="92.9445%" y="175.50"></text></g><g><title>all (6,532 instructions, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,111,30)" fg:x="0" fg:w="6532"/><text x="0.2930%" y="207.50"></text></g><g><title>@callback&lt;(?t)&gt; (3,056 instructions, 46.79%)</title><rect x="53.2149%" y="181" width="46.7851%" height="15" fill="rgb(243,70,54)" fg:x="3476" fg:w="3056"/><text x="53.5079%" y="191.50">@callback&lt;(?t)&gt;</text></g></svg></svg>