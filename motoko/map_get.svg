<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="214" onload="init(evt)" viewBox="0 0 1024 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Map.get(5)</text><text id="details" fill="rgb(0,0,0)" x="10" y="197.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="197.00"> </text><svg id="frames" x="10" width="1004" total_samples="4909"><g><title>trans_state5 (8 instructions, 0.16%)</title><rect x="0.0000%" y="133" width="0.1630%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="8"/><text x="0.2930%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="0.1630%" y="133" width="0.6722%" height="15" fill="rgb(249,199,10)" fg:x="8" fg:w="33"/><text x="0.4559%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="0.8352%" y="117" width="0.9371%" height="15" fill="rgb(249,222,13)" fg:x="41" fg:w="46"/><text x="1.1282%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="1.7723%" y="117" width="0.6722%" height="15" fill="rgb(244,185,38)" fg:x="87" fg:w="33"/><text x="2.0652%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="2.4445%" y="117" width="0.9371%" height="15" fill="rgb(236,202,9)" fg:x="120" fg:w="46"/><text x="2.7375%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="3.3815%" y="117" width="1.2222%" height="15" fill="rgb(250,229,37)" fg:x="166" fg:w="60"/><text x="3.6745%" y="127.50"></text></g><g><title>parse_idl_header (267 instructions, 5.44%)</title><rect x="0.8352%" y="133" width="5.4390%" height="15" fill="rgb(206,174,23)" fg:x="41" fg:w="267"/><text x="1.1282%" y="143.50">parse..</text></g><g><title>memset (3 instructions, 0.06%)</title><rect x="6.2742%" y="117" width="0.0611%" height="15" fill="rgb(211,33,43)" fg:x="308" fg:w="3"/><text x="6.5672%" y="127.50"></text></g><g><title>idl_sub_buf_init (14 instructions, 0.29%)</title><rect x="6.2742%" y="133" width="0.2852%" height="15" fill="rgb(245,58,50)" fg:x="308" fg:w="14"/><text x="6.5672%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="6.5594%" y="133" width="0.9371%" height="15" fill="rgb(244,68,36)" fg:x="322" fg:w="46"/><text x="6.8523%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="7.4964%" y="133" width="1.2222%" height="15" fill="rgb(232,229,15)" fg:x="368" fg:w="60"/><text x="7.7894%" y="143.50"></text></g><g><title>@deserialize_go&lt;N&gt; (79 instructions, 1.61%)</title><rect x="8.7187%" y="133" width="1.6093%" height="15" fill="rgb(254,30,23)" fg:x="428" fg:w="79"/><text x="9.0116%" y="143.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="10.3280%" y="133" width="0.3056%" height="15" fill="rgb(235,160,14)" fg:x="507" fg:w="15"/><text x="10.6209%" y="143.50"></text></g><g><title>B_rem (23 instructions, 0.47%)</title><rect x="10.6335%" y="117" width="0.4685%" height="15" fill="rgb(212,155,44)" fg:x="522" fg:w="23"/><text x="10.9265%" y="127.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.37%)</title><rect x="11.1021%" y="117" width="0.3667%" height="15" fill="rgb(226,2,50)" fg:x="545" fg:w="18"/><text x="11.3950%" y="127.50"></text></g><g><title>opt_project (18 instructions, 0.37%)</title><rect x="11.4687%" y="117" width="0.3667%" height="15" fill="rgb(234,177,6)" fg:x="563" fg:w="18"/><text x="11.7617%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.31%)</title><rect x="11.8354%" y="101" width="0.3056%" height="15" fill="rgb(217,24,9)" fg:x="581" fg:w="15"/><text x="12.1284%" y="111.50"></text></g><g><title>to_2_tuple (26 instructions, 0.53%)</title><rect x="11.8354%" y="117" width="0.5296%" height="15" fill="rgb(220,13,46)" fg:x="581" fg:w="26"/><text x="12.1284%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.31%)</title><rect x="12.3650%" y="101" width="0.3056%" height="15" fill="rgb(239,221,27)" fg:x="607" fg:w="15"/><text x="12.6580%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.31%)</title><rect x="12.6706%" y="101" width="0.3056%" height="15" fill="rgb(222,198,25)" fg:x="622" fg:w="15"/><text x="12.9636%" y="111.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.31%)</title><rect x="12.9762%" y="101" width="0.3056%" height="15" fill="rgb(211,99,13)" fg:x="637" fg:w="15"/><text x="13.2691%" y="111.50"></text></g><g><title>B_eq (3 instructions, 0.06%)</title><rect x="13.2817%" y="101" width="0.0611%" height="15" fill="rgb(232,111,31)" fg:x="652" fg:w="3"/><text x="13.5747%" y="111.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="13.3428%" y="101" width="0.3056%" height="15" fill="rgb(245,82,37)" fg:x="655" fg:w="15"/><text x="13.6358%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="13.6484%" y="101" width="0.3056%" height="15" fill="rgb(227,149,46)" fg:x="670" fg:w="15"/><text x="13.9414%" y="111.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="13.9540%" y="101" width="0.3056%" height="15" fill="rgb(218,36,50)" fg:x="685" fg:w="15"/><text x="14.2469%" y="111.50"></text></g><g><title>@new_async (176 instructions, 3.59%)</title><rect x="12.3650%" y="117" width="3.5853%" height="15" fill="rgb(226,80,48)" fg:x="607" fg:w="176"/><text x="12.6580%" y="127.50">@ne..</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="15.9503%" y="117" width="0.3056%" height="15" fill="rgb(238,224,15)" fg:x="783" fg:w="15"/><text x="16.2433%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.31%)</title><rect x="16.2559%" y="117" width="0.3056%" height="15" fill="rgb(241,136,10)" fg:x="798" fg:w="15"/><text x="16.5488%" y="127.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::hf8958edaecfd35c6 (7 instructions, 0.14%)</title><rect x="16.5614%" y="101" width="0.1426%" height="15" fill="rgb(208,32,45)" fg:x="813" fg:w="7"/><text x="16.8544%" y="111.50"></text></g><g><title>remember_continuation (58 instructions, 1.18%)</title><rect x="16.5614%" y="117" width="1.1815%" height="15" fill="rgb(207,135,9)" fg:x="813" fg:w="58"/><text x="16.8544%" y="127.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.53%)</title><rect x="17.7429%" y="117" width="0.5296%" height="15" fill="rgb(206,86,44)" fg:x="871" fg:w="26"/><text x="18.0359%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="18.2726%" y="117" width="0.6722%" height="15" fill="rgb(245,177,15)" fg:x="897" fg:w="33"/><text x="18.5655%" y="127.50"></text></g><g><title>memcpy (64 instructions, 1.30%)</title><rect x="18.9448%" y="117" width="1.3037%" height="15" fill="rgb(206,64,50)" fg:x="930" fg:w="64"/><text x="19.2378%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="20.2485%" y="117" width="0.6722%" height="15" fill="rgb(234,36,40)" fg:x="994" fg:w="33"/><text x="20.5415%" y="127.50"></text></g><g><title>leb128_encode (9 instructions, 0.18%)</title><rect x="20.9208%" y="101" width="0.1833%" height="15" fill="rgb(213,64,8)" fg:x="1027" fg:w="9"/><text x="21.2137%" y="111.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.65%)</title><rect x="20.9208%" y="117" width="0.6519%" height="15" fill="rgb(210,75,36)" fg:x="1027" fg:w="32"/><text x="21.2137%" y="127.50"></text></g><g><title>B_eq (3 instructions, 0.06%)</title><rect x="21.5726%" y="101" width="0.0611%" height="15" fill="rgb(229,88,21)" fg:x="1059" fg:w="3"/><text x="21.8656%" y="111.50"></text></g><g><title>@add_cycles (13 instructions, 0.26%)</title><rect x="21.5726%" y="117" width="0.2648%" height="15" fill="rgb(252,204,47)" fg:x="1059" fg:w="13"/><text x="21.8656%" y="127.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.31%)</title><rect x="21.8374%" y="101" width="0.3056%" height="15" fill="rgb(208,77,27)" fg:x="1072" fg:w="15"/><text x="22.1304%" y="111.50"></text></g><g><title>to_2_tuple (26 instructions, 0.53%)</title><rect x="21.8374%" y="117" width="0.5296%" height="15" fill="rgb(221,76,26)" fg:x="1072" fg:w="26"/><text x="22.1304%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="22.3671%" y="101" width="0.3056%" height="15" fill="rgb(225,139,18)" fg:x="1098" fg:w="15"/><text x="22.6600%" y="111.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.31%)</title><rect x="22.6726%" y="101" width="0.3056%" height="15" fill="rgb(230,137,11)" fg:x="1113" fg:w="15"/><text x="22.9656%" y="111.50"></text></g><g><title>enqueue (84 instructions, 1.71%)</title><rect x="22.3671%" y="117" width="1.7111%" height="15" fill="rgb(212,28,1)" fg:x="1098" fg:w="84"/><text x="22.6600%" y="127.50"></text></g><g><title>$lambda.2 (866 instructions, 17.64%)</title><rect x="10.6335%" y="133" width="17.6411%" height="15" fill="rgb(248,164,17)" fg:x="522" fg:w="866"/><text x="10.9265%" y="143.50">$lambda.2</text></g><g><title>schedule_copying_gc (45 instructions, 0.92%)</title><rect x="28.2746%" y="133" width="0.9167%" height="15" fill="rgb(222,171,42)" fg:x="1388" fg:w="45"/><text x="28.5676%" y="143.50"></text></g><g><title>trans_state4 (13 instructions, 0.26%)</title><rect x="29.1913%" y="133" width="0.2648%" height="15" fill="rgb(243,84,45)" fg:x="1433" fg:w="13"/><text x="29.4843%" y="143.50"></text></g><g><title>get (2,111 instructions, 43.00%)</title><rect x="0.0000%" y="149" width="43.0026%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="2111"/><text x="0.2930%" y="159.50">get</text></g><g><title>trans_state5 (8 instructions, 0.16%)</title><rect x="43.0026%" y="133" width="0.1630%" height="15" fill="rgb(215,19,7)" fg:x="2111" fg:w="8"/><text x="43.2956%" y="143.50"></text></g><g><title>recall_continuation (45 instructions, 0.92%)</title><rect x="43.1656%" y="133" width="0.9167%" height="15" fill="rgb(238,81,41)" fg:x="2119" fg:w="45"/><text x="43.4586%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="44.0823%" y="133" width="0.6722%" height="15" fill="rgb(210,199,37)" fg:x="2164" fg:w="33"/><text x="44.3753%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="44.7545%" y="117" width="0.9371%" height="15" fill="rgb(244,192,49)" fg:x="2197" fg:w="46"/><text x="45.0475%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="45.6916%" y="117" width="0.6722%" height="15" fill="rgb(226,211,11)" fg:x="2243" fg:w="33"/><text x="45.9846%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="46.3638%" y="117" width="1.2222%" height="15" fill="rgb(236,162,54)" fg:x="2276" fg:w="60"/><text x="46.6568%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="47.5861%" y="117" width="1.2222%" height="15" fill="rgb(220,229,9)" fg:x="2336" fg:w="60"/><text x="47.8790%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="48.8083%" y="117" width="1.2222%" height="15" fill="rgb(250,87,22)" fg:x="2396" fg:w="60"/><text x="49.1013%" y="127.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="50.0306%" y="117" width="0.9371%" height="15" fill="rgb(239,43,17)" fg:x="2456" fg:w="46"/><text x="50.3235%" y="127.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="50.9676%" y="117" width="1.2222%" height="15" fill="rgb(231,177,25)" fg:x="2502" fg:w="60"/><text x="51.2606%" y="127.50"></text></g><g><title>parse_idl_header (524 instructions, 10.67%)</title><rect x="44.7545%" y="133" width="10.6743%" height="15" fill="rgb(219,179,1)" fg:x="2197" fg:w="524"/><text x="45.0475%" y="143.50">parse_idl_hea..</text></g><g><title>memset (38 instructions, 0.77%)</title><rect x="55.4288%" y="117" width="0.7741%" height="15" fill="rgb(238,219,53)" fg:x="2721" fg:w="38"/><text x="55.7218%" y="127.50"></text></g><g><title>idl_sub_buf_init (49 instructions, 1.00%)</title><rect x="55.4288%" y="133" width="0.9982%" height="15" fill="rgb(232,167,36)" fg:x="2721" fg:w="49"/><text x="55.7218%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="56.4270%" y="133" width="0.9371%" height="15" fill="rgb(244,19,51)" fg:x="2770" fg:w="46"/><text x="56.7199%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="57.3640%" y="133" width="1.2222%" height="15" fill="rgb(224,6,22)" fg:x="2816" fg:w="60"/><text x="57.6570%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="58.5863%" y="133" width="1.2222%" height="15" fill="rgb(224,145,5)" fg:x="2876" fg:w="60"/><text x="58.8792%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="59.8085%" y="133" width="1.2222%" height="15" fill="rgb(234,130,49)" fg:x="2936" fg:w="60"/><text x="60.1015%" y="143.50"></text></g><g><title>sleb128_decode (60 instructions, 1.22%)</title><rect x="61.0308%" y="133" width="1.2222%" height="15" fill="rgb(254,6,2)" fg:x="2996" fg:w="60"/><text x="61.3237%" y="143.50"></text></g><g><title>leb128_decode (46 instructions, 0.94%)</title><rect x="62.2530%" y="117" width="0.9371%" height="15" fill="rgb(208,96,46)" fg:x="3056" fg:w="46"/><text x="62.5460%" y="127.50"></text></g><g><title>utf8_validate (165 instructions, 3.36%)</title><rect x="63.1901%" y="117" width="3.3612%" height="15" fill="rgb(239,3,39)" fg:x="3102" fg:w="165"/><text x="63.4830%" y="127.50">ut..</text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="66.5512%" y="101" width="0.6722%" height="15" fill="rgb(233,210,1)" fg:x="3267" fg:w="33"/><text x="66.8442%" y="111.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.81%)</title><rect x="66.5512%" y="117" width="0.8148%" height="15" fill="rgb(244,137,37)" fg:x="3267" fg:w="40"/><text x="66.8442%" y="127.50"></text></g><g><title>memcpy (79 instructions, 1.61%)</title><rect x="67.3661%" y="117" width="1.6093%" height="15" fill="rgb(240,136,2)" fg:x="3307" fg:w="79"/><text x="67.6590%" y="127.50"></text></g><g><title>@deserialize_go&lt;t&gt; (372 instructions, 7.58%)</title><rect x="62.2530%" y="133" width="7.5779%" height="15" fill="rgb(239,18,37)" fg:x="3056" fg:w="372"/><text x="62.5460%" y="143.50">@deseria..</text></g><g><title>opt_inject (18 instructions, 0.37%)</title><rect x="69.8309%" y="133" width="0.3667%" height="15" fill="rgb(218,185,22)" fg:x="3428" fg:w="18"/><text x="70.1239%" y="143.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.31%)</title><rect x="70.1976%" y="101" width="0.3056%" height="15" fill="rgb(225,218,4)" fg:x="3446" fg:w="15"/><text x="70.4906%" y="111.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;5&gt; (15 instructions, 0.31%)</title><rect x="70.5032%" y="85" width="0.3056%" height="15" fill="rgb(230,182,32)" fg:x="3461" fg:w="15"/><text x="70.7961%" y="95.50"></text></g><g><title>to_2_tuple (26 instructions, 0.53%)</title><rect x="70.5032%" y="101" width="0.5296%" height="15" fill="rgb(242,56,43)" fg:x="3461" fg:w="26"/><text x="70.7961%" y="111.50"></text></g><g><title>opt_inject (18 instructions, 0.37%)</title><rect x="71.0328%" y="101" width="0.3667%" height="15" fill="rgb(233,99,24)" fg:x="3487" fg:w="18"/><text x="71.3258%" y="111.50"></text></g><g><title>opt_project (18 instructions, 0.37%)</title><rect x="71.3995%" y="69" width="0.3667%" height="15" fill="rgb(234,209,42)" fg:x="3505" fg:w="18"/><text x="71.6924%" y="79.50"></text></g><g><title>@buffer_size&lt;t&gt; (27 instructions, 0.55%)</title><rect x="71.7661%" y="69" width="0.5500%" height="15" fill="rgb(227,7,12)" fg:x="3523" fg:w="27"/><text x="72.0591%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="72.3162%" y="69" width="0.6722%" height="15" fill="rgb(245,203,43)" fg:x="3550" fg:w="33"/><text x="72.6091%" y="79.50"></text></g><g><title>memcpy (52 instructions, 1.06%)</title><rect x="72.9884%" y="69" width="1.0593%" height="15" fill="rgb(238,205,33)" fg:x="3583" fg:w="52"/><text x="73.2814%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.67%)</title><rect x="74.0477%" y="69" width="0.6722%" height="15" fill="rgb(231,56,7)" fg:x="3635" fg:w="33"/><text x="74.3406%" y="79.50"></text></g><g><title>opt_project (18 instructions, 0.37%)</title><rect x="74.7199%" y="69" width="0.3667%" height="15" fill="rgb(244,186,29)" fg:x="3668" fg:w="18"/><text x="75.0129%" y="79.50"></text></g><g><title>leb128_encode (9 instructions, 0.18%)</title><rect x="75.0866%" y="53" width="0.1833%" height="15" fill="rgb(234,111,31)" fg:x="3686" fg:w="9"/><text x="75.3795%" y="63.50"></text></g><g><title>memcpy (57 instructions, 1.16%)</title><rect x="75.2699%" y="37" width="1.1611%" height="15" fill="rgb(241,149,10)" fg:x="3695" fg:w="57"/><text x="75.5629%" y="47.50"></text></g><g><title>text_to_buf (78 instructions, 1.59%)</title><rect x="75.2699%" y="53" width="1.5889%" height="15" fill="rgb(249,206,44)" fg:x="3695" fg:w="78"/><text x="75.5629%" y="63.50"></text></g><g><title>@serialize_go&lt;t&gt; (114 instructions, 2.32%)</title><rect x="75.0866%" y="69" width="2.3223%" height="15" fill="rgb(251,153,30)" fg:x="3686" fg:w="114"/><text x="75.3795%" y="79.50">@..</text></g><g><title>reply_with_data (40 instructions, 0.81%)</title><rect x="77.4088%" y="69" width="0.8148%" height="15" fill="rgb(239,152,38)" fg:x="3800" fg:w="40"/><text x="77.7018%" y="79.50"></text></g><g><title>$lambda.27 (443 instructions, 9.02%)</title><rect x="71.3995%" y="85" width="9.0242%" height="15" fill="rgb(249,139,47)" fg:x="3505" fg:w="443"/><text x="71.6924%" y="95.50">$lambda.27</text></g><g><title>anon-func-352.15 (465 instructions, 9.47%)</title><rect x="71.3995%" y="101" width="9.4724%" height="15" fill="rgb(244,64,35)" fg:x="3505" fg:w="465"/><text x="71.6924%" y="111.50">anon-func-3..</text></g><g><title>fulfill (574 instructions, 11.69%)</title><rect x="70.1976%" y="117" width="11.6928%" height="15" fill="rgb(216,46,15)" fg:x="3446" fg:w="574"/><text x="70.4906%" y="127.50">fulfill</text></g><g><title>$lambda.11 (581 instructions, 11.84%)</title><rect x="70.1976%" y="133" width="11.8354%" height="15" fill="rgb(250,74,19)" fg:x="3446" fg:w="581"/><text x="70.4906%" y="143.50">$lambda.11</text></g><g><title>schedule_copying_gc (45 instructions, 0.92%)</title><rect x="82.0330%" y="133" width="0.9167%" height="15" fill="rgb(249,42,33)" fg:x="4027" fg:w="45"/><text x="82.3260%" y="143.50"></text></g><g><title>trans_state4 (13 instructions, 0.26%)</title><rect x="82.9497%" y="133" width="0.2648%" height="15" fill="rgb(242,149,17)" fg:x="4072" fg:w="13"/><text x="83.2427%" y="143.50"></text></g><g><title>all (4,909 instructions, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="4909"/><text x="0.2930%" y="175.50"></text></g><g><title>@callback&lt;(?t)&gt; (2,798 instructions, 57.00%)</title><rect x="43.0026%" y="149" width="56.9974%" height="15" fill="rgb(220,130,37)" fg:x="2111" fg:w="2798"/><text x="43.2956%" y="159.50">@callback&lt;(?t)&gt;</text></g></svg></svg>