<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="134" onload="init(evt)" viewBox="0 0 1024 134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="134" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">generational.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="117.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="117.00"> </text><svg id="frames" x="10" width="1004" total_samples="948937"><g><title>memset (2,100 instructions, 0.22%)</title><rect x="0.0167%" y="37" width="0.2213%" height="15" fill="rgb(249,48,11)" fg:x="158" fg:w="2100"/><text x="0.3096%" y="47.50"></text></g><g><title>motoko_rts::gc::generational::GenerationalGC$LT$M$GT$::mark_object::hc12f791abffb4b64 (171,469 instructions, 18.07%)</title><rect x="0.2417%" y="37" width="18.0696%" height="15" fill="rgb(205,228,9)" fg:x="2294" fg:w="171469"/><text x="0.5347%" y="47.50">motoko_rts::gc::generati..</text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (870 instructions, 0.09%)</title><rect x="18.3113%" y="37" width="0.0917%" height="15" fill="rgb(254,58,13)" fg:x="173763" fg:w="870"/><text x="18.6043%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="18.5477%" y="37" width="0.0100%" height="15" fill="rgb(217,119,6)" fg:x="176006" fg:w="95"/><text x="18.8407%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="18.6615%" y="37" width="0.0126%" height="15" fill="rgb(248,143,43)" fg:x="177086" fg:w="120"/><text x="18.9545%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="18.8515%" y="37" width="0.0100%" height="15" fill="rgb(210,0,46)" fg:x="178889" fg:w="95"/><text x="19.1445%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="19.0125%" y="37" width="0.0126%" height="15" fill="rgb(222,55,36)" fg:x="180417" fg:w="120"/><text x="19.3055%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="19.1596%" y="37" width="0.0126%" height="15" fill="rgb(237,164,3)" fg:x="181813" fg:w="120"/><text x="19.4526%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="19.3068%" y="37" width="0.0126%" height="15" fill="rgb(254,21,38)" fg:x="183209" fg:w="120"/><text x="19.5997%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="19.4680%" y="37" width="0.0100%" height="15" fill="rgb(223,96,52)" fg:x="184739" fg:w="95"/><text x="19.7610%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="19.6632%" y="37" width="0.0100%" height="15" fill="rgb(233,189,2)" fg:x="186591" fg:w="95"/><text x="19.9561%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="19.8418%" y="37" width="0.0100%" height="15" fill="rgb(224,153,19)" fg:x="188286" fg:w="95"/><text x="20.1347%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="19.9824%" y="37" width="0.0100%" height="15" fill="rgb(242,11,36)" fg:x="189620" fg:w="95"/><text x="20.2753%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="20.1697%" y="37" width="0.0100%" height="15" fill="rgb(217,189,47)" fg:x="191398" fg:w="95"/><text x="20.4627%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="20.3469%" y="37" width="0.0126%" height="15" fill="rgb(248,189,9)" fg:x="193079" fg:w="120"/><text x="20.6398%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="20.4838%" y="37" width="0.0126%" height="15" fill="rgb(205,180,35)" fg:x="194378" fg:w="120"/><text x="20.7767%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="20.6738%" y="37" width="0.0100%" height="15" fill="rgb(234,175,47)" fg:x="196181" fg:w="95"/><text x="20.9667%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="20.8714%" y="37" width="0.0100%" height="15" fill="rgb(210,0,51)" fg:x="198056" fg:w="95"/><text x="21.1643%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="20.9788%" y="37" width="0.0126%" height="15" fill="rgb(216,91,27)" fg:x="199076" fg:w="120"/><text x="21.2718%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="21.1362%" y="37" width="0.0100%" height="15" fill="rgb(232,183,37)" fg:x="200569" fg:w="95"/><text x="21.4291%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="21.3031%" y="37" width="0.0126%" height="15" fill="rgb(232,189,54)" fg:x="202153" fg:w="120"/><text x="21.5961%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="21.4565%" y="37" width="0.0100%" height="15" fill="rgb(210,53,50)" fg:x="203609" fg:w="95"/><text x="21.7495%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="21.6415%" y="37" width="0.0100%" height="15" fill="rgb(246,38,29)" fg:x="205364" fg:w="95"/><text x="21.9344%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="21.9961%" y="37" width="0.0100%" height="15" fill="rgb(205,119,52)" fg:x="208729" fg:w="95"/><text x="22.2891%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="22.1342%" y="37" width="0.0126%" height="15" fill="rgb(219,73,13)" fg:x="210040" fg:w="120"/><text x="22.4272%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="22.3042%" y="37" width="0.0100%" height="15" fill="rgb(247,202,30)" fg:x="211653" fg:w="95"/><text x="22.5972%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="22.4955%" y="37" width="0.0100%" height="15" fill="rgb(247,33,49)" fg:x="213468" fg:w="95"/><text x="22.7885%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="22.6322%" y="37" width="0.0126%" height="15" fill="rgb(217,38,4)" fg:x="214765" fg:w="120"/><text x="22.9251%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="22.7934%" y="37" width="0.0126%" height="15" fill="rgb(222,105,41)" fg:x="216295" fg:w="120"/><text x="23.0864%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="23.1603%" y="37" width="0.0100%" height="15" fill="rgb(249,192,41)" fg:x="219777" fg:w="95"/><text x="23.4533%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="23.3618%" y="37" width="0.0100%" height="15" fill="rgb(210,67,20)" fg:x="221689" fg:w="95"/><text x="23.6548%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="23.5540%" y="37" width="0.0126%" height="15" fill="rgb(217,168,30)" fg:x="223513" fg:w="120"/><text x="23.8470%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="23.8669%" y="37" width="0.0126%" height="15" fill="rgb(230,65,10)" fg:x="226482" fg:w="120"/><text x="24.1599%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="24.0495%" y="37" width="0.0100%" height="15" fill="rgb(223,150,17)" fg:x="228215" fg:w="95"/><text x="24.3425%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="24.2116%" y="37" width="0.0100%" height="15" fill="rgb(209,19,27)" fg:x="229753" fg:w="95"/><text x="24.5046%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="24.3940%" y="37" width="0.0100%" height="15" fill="rgb(220,106,15)" fg:x="231484" fg:w="95"/><text x="24.6870%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="24.5751%" y="37" width="0.0100%" height="15" fill="rgb(214,51,41)" fg:x="233202" fg:w="95"/><text x="24.8680%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="24.7585%" y="37" width="0.0100%" height="15" fill="rgb(216,112,8)" fg:x="234943" fg:w="95"/><text x="25.0515%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="25.1331%" y="37" width="0.0100%" height="15" fill="rgb(250,136,23)" fg:x="238497" fg:w="95"/><text x="25.4260%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="25.3229%" y="37" width="0.0100%" height="15" fill="rgb(234,23,31)" fg:x="240298" fg:w="95"/><text x="25.6158%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="25.4965%" y="37" width="0.0100%" height="15" fill="rgb(237,97,13)" fg:x="241946" fg:w="95"/><text x="25.7895%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="25.6941%" y="37" width="0.0100%" height="15" fill="rgb(227,200,15)" fg:x="243821" fg:w="95"/><text x="25.9871%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="25.8688%" y="37" width="0.0100%" height="15" fill="rgb(243,215,25)" fg:x="245479" fg:w="95"/><text x="26.1618%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="26.1005%" y="37" width="0.0100%" height="15" fill="rgb(251,196,8)" fg:x="247677" fg:w="95"/><text x="26.3934%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="26.3258%" y="37" width="0.0100%" height="15" fill="rgb(211,3,0)" fg:x="249815" fg:w="95"/><text x="26.6187%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (870 instructions, 0.09%)</title><rect x="27.2296%" y="37" width="0.0917%" height="15" fill="rgb(249,219,45)" fg:x="258392" fg:w="870"/><text x="27.5226%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="27.6852%" y="37" width="0.0100%" height="15" fill="rgb(252,9,53)" fg:x="262715" fg:w="95"/><text x="27.9782%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="27.9499%" y="37" width="0.0126%" height="15" fill="rgb(228,197,54)" fg:x="265227" fg:w="120"/><text x="28.2429%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="28.3966%" y="37" width="0.0100%" height="15" fill="rgb(228,104,45)" fg:x="269466" fg:w="95"/><text x="28.6896%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="28.7826%" y="37" width="0.0126%" height="15" fill="rgb(241,47,41)" fg:x="273129" fg:w="120"/><text x="29.0756%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="29.1319%" y="37" width="0.0126%" height="15" fill="rgb(208,100,17)" fg:x="276443" fg:w="120"/><text x="29.4248%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="29.4811%" y="37" width="0.0126%" height="15" fill="rgb(240,67,2)" fg:x="279757" fg:w="120"/><text x="29.7741%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="29.8728%" y="37" width="0.0100%" height="15" fill="rgb(205,108,20)" fg:x="283474" fg:w="95"/><text x="30.1658%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="30.3442%" y="37" width="0.0100%" height="15" fill="rgb(251,43,48)" fg:x="287947" fg:w="95"/><text x="30.6371%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="30.7761%" y="37" width="0.0100%" height="15" fill="rgb(217,128,21)" fg:x="292046" fg:w="95"/><text x="31.0691%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="31.1075%" y="37" width="0.0100%" height="15" fill="rgb(251,144,17)" fg:x="295191" fg:w="95"/><text x="31.4005%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="31.5516%" y="37" width="0.0100%" height="15" fill="rgb(235,33,44)" fg:x="299405" fg:w="95"/><text x="31.8446%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="31.9653%" y="37" width="0.0126%" height="15" fill="rgb(235,203,27)" fg:x="303331" fg:w="120"/><text x="32.2583%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="32.2873%" y="37" width="0.0126%" height="15" fill="rgb(219,166,25)" fg:x="306386" fg:w="120"/><text x="32.5803%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="32.7309%" y="37" width="0.0100%" height="15" fill="rgb(241,79,34)" fg:x="310596" fg:w="95"/><text x="33.0239%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="33.1993%" y="37" width="0.0100%" height="15" fill="rgb(207,166,48)" fg:x="315040" fg:w="95"/><text x="33.4922%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="33.4519%" y="37" width="0.0126%" height="15" fill="rgb(244,88,11)" fg:x="317437" fg:w="120"/><text x="33.7448%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="33.8284%" y="37" width="0.0100%" height="15" fill="rgb(242,174,1)" fg:x="321010" fg:w="95"/><text x="34.1213%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="34.2148%" y="37" width="0.0126%" height="15" fill="rgb(210,0,8)" fg:x="324677" fg:w="120"/><text x="34.5078%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="34.5762%" y="37" width="0.0100%" height="15" fill="rgb(254,12,20)" fg:x="328106" fg:w="95"/><text x="34.8691%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="35.0233%" y="37" width="0.0100%" height="15" fill="rgb(244,67,43)" fg:x="332349" fg:w="95"/><text x="35.3163%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="35.8846%" y="37" width="0.0100%" height="15" fill="rgb(253,85,15)" fg:x="340522" fg:w="95"/><text x="36.1775%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="36.2191%" y="37" width="0.0126%" height="15" fill="rgb(211,2,13)" fg:x="343696" fg:w="120"/><text x="36.5120%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="36.6198%" y="37" width="0.0100%" height="15" fill="rgb(206,202,26)" fg:x="347499" fg:w="95"/><text x="36.9128%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="37.0760%" y="37" width="0.0100%" height="15" fill="rgb(223,67,40)" fg:x="351828" fg:w="95"/><text x="37.3690%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="37.3923%" y="37" width="0.0126%" height="15" fill="rgb(222,218,32)" fg:x="354829" fg:w="120"/><text x="37.6852%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="37.7840%" y="37" width="0.0126%" height="15" fill="rgb(246,207,34)" fg:x="358546" fg:w="120"/><text x="38.0769%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="38.6418%" y="37" width="0.0100%" height="15" fill="rgb(234,151,44)" fg:x="366686" fg:w="95"/><text x="38.9347%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="39.1253%" y="37" width="0.0100%" height="15" fill="rgb(249,149,47)" fg:x="371274" fg:w="95"/><text x="39.4182%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="39.5663%" y="37" width="0.0126%" height="15" fill="rgb(243,24,17)" fg:x="375459" fg:w="120"/><text x="39.8592%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (120 instructions, 0.01%)</title><rect x="40.3206%" y="37" width="0.0126%" height="15" fill="rgb(228,45,49)" fg:x="382617" fg:w="120"/><text x="40.6136%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="40.7486%" y="37" width="0.0100%" height="15" fill="rgb(241,44,45)" fg:x="386679" fg:w="95"/><text x="41.0416%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="41.1412%" y="37" width="0.0100%" height="15" fill="rgb(242,147,11)" fg:x="390404" fg:w="95"/><text x="41.4342%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="41.5666%" y="37" width="0.0100%" height="15" fill="rgb(220,11,44)" fg:x="394441" fg:w="95"/><text x="41.8596%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="41.9955%" y="37" width="0.0100%" height="15" fill="rgb(241,212,23)" fg:x="398511" fg:w="95"/><text x="42.2885%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="42.4244%" y="37" width="0.0100%" height="15" fill="rgb(215,144,13)" fg:x="402581" fg:w="95"/><text x="42.7174%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="43.3130%" y="37" width="0.0100%" height="15" fill="rgb(221,183,24)" fg:x="411013" fg:w="95"/><text x="43.6060%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="43.7632%" y="37" width="0.0100%" height="15" fill="rgb(207,26,9)" fg:x="415285" fg:w="95"/><text x="44.0561%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="44.1795%" y="37" width="0.0100%" height="15" fill="rgb(254,118,51)" fg:x="419236" fg:w="95"/><text x="44.4725%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="44.6509%" y="37" width="0.0100%" height="15" fill="rgb(218,37,14)" fg:x="423709" fg:w="95"/><text x="44.9439%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="45.0707%" y="37" width="0.0100%" height="15" fill="rgb(221,109,8)" fg:x="427693" fg:w="95"/><text x="45.3637%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="45.6119%" y="37" width="0.0100%" height="15" fill="rgb(207,5,10)" fg:x="432828" fg:w="95"/><text x="45.9048%" y="47.50"></text></g><g><title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::h01f2da00beadc231 (95 instructions, 0.01%)</title><rect x="46.1378%" y="37" width="0.0100%" height="15" fill="rgb(246,14,3)" fg:x="437819" fg:w="95"/><text x="46.4308%" y="47.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::init_generational_write_barrier::hde79f4c66aaa2335 (12,371 instructions, 1.30%)</title><rect x="48.2363%" y="37" width="1.3037%" height="15" fill="rgb(208,155,31)" fg:x="457732" fg:w="12371"/><text x="48.5293%" y="47.50"></text></g><g><title>motoko_rts::gc::generational::generational_gc::h4cf1d22c75d8c5d4 (948,924 instructions, 100.00%)</title><rect x="0.0000%" y="53" width="99.9986%" height="15" fill="rgb(251,206,43)" fg:x="0" fg:w="948924"/><text x="0.2930%" y="63.50">motoko_rts::gc::generational::generational_gc::h4cf1d22c75d8c5d4</text></g><g><title>all (948,937 instructions, 100%)</title><rect x="0.0000%" y="85" width="100.0000%" height="15" fill="rgb(212,175,37)" fg:x="0" fg:w="948937"/><text x="0.2930%" y="95.50"></text></g><g><title>generational_gc (948,937 instructions, 100.00%)</title><rect x="0.0000%" y="69" width="100.0000%" height="15" fill="rgb(219,149,24)" fg:x="0" fg:w="948937"/><text x="0.2930%" y="79.50">generational_gc</text></g></svg></svg>