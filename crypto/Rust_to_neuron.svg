<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.principalToNeuron</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="41228"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="0.0000%" y="197" width="0.1989%" height="15" fill="rgb(236,54,3)" fg:x="0" fg:w="82"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="0.1989%" y="197" width="0.1989%" height="15" fill="rgb(241,173,43)" fg:x="82" fg:w="82"/><text x="0.4919%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="0.3978%" y="165" width="0.1989%" height="15" fill="rgb(215,190,9)" fg:x="164" fg:w="82"/><text x="0.6908%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,162 instructions, 2.82%)</title><rect x="0.3978%" y="181" width="2.8185%" height="15" fill="rgb(242,101,16)" fg:x="164" fg:w="1162"/><text x="0.6908%" y="191.50">ic..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="3.2163%" y="165" width="0.1237%" height="15" fill="rgb(223,190,21)" fg:x="1326" fg:w="51"/><text x="3.5092%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="3.3400%" y="149" width="0.0146%" height="15" fill="rgb(215,228,25)" fg:x="1377" fg:w="6"/><text x="3.6329%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.06%)</title><rect x="3.3400%" y="165" width="1.0600%" height="15" fill="rgb(225,36,22)" fg:x="1377" fg:w="437"/><text x="3.6329%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.16%)</title><rect x="4.3999%" y="165" width="0.1552%" height="15" fill="rgb(251,106,46)" fg:x="1814" fg:w="64"/><text x="4.6929%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="4.5552%" y="165" width="0.1480%" height="15" fill="rgb(208,90,1)" fg:x="1878" fg:w="61"/><text x="4.8481%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="4.7031%" y="165" width="0.1480%" height="15" fill="rgb(243,10,4)" fg:x="1939" fg:w="61"/><text x="4.9961%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="4.8511%" y="165" width="0.1480%" height="15" fill="rgb(212,137,27)" fg:x="2000" fg:w="61"/><text x="5.1440%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="4.9990%" y="165" width="0.1480%" height="15" fill="rgb(231,220,49)" fg:x="2061" fg:w="61"/><text x="5.2920%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="5.1470%" y="165" width="0.1237%" height="15" fill="rgb(237,96,20)" fg:x="2122" fg:w="51"/><text x="5.4400%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.23%)</title><rect x="5.2707%" y="165" width="0.2304%" height="15" fill="rgb(239,229,30)" fg:x="2173" fg:w="95"/><text x="5.5637%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.5011%" y="149" width="0.0146%" height="15" fill="rgb(219,65,33)" fg:x="2268" fg:w="6"/><text x="5.7941%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.06%)</title><rect x="5.5011%" y="165" width="1.0600%" height="15" fill="rgb(243,134,7)" fg:x="2268" fg:w="437"/><text x="5.7941%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="6.5611%" y="165" width="0.0461%" height="15" fill="rgb(216,177,54)" fg:x="2705" fg:w="19"/><text x="6.8540%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="6.6072%" y="133" width="0.1989%" height="15" fill="rgb(211,160,20)" fg:x="2724" fg:w="82"/><text x="6.9001%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="6.8061%" y="101" width="0.1625%" height="15" fill="rgb(239,85,39)" fg:x="2806" fg:w="67"/><text x="7.0990%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="6.8061%" y="117" width="0.2329%" height="15" fill="rgb(232,125,22)" fg:x="2806" fg:w="96"/><text x="7.0990%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="7.0389%" y="69" width="0.0267%" height="15" fill="rgb(244,57,34)" fg:x="2902" fg:w="11"/><text x="7.3319%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="7.0656%" y="53" width="0.0849%" height="15" fill="rgb(214,203,32)" fg:x="2913" fg:w="35"/><text x="7.3586%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="7.0656%" y="69" width="0.1552%" height="15" fill="rgb(207,58,43)" fg:x="2913" fg:w="64"/><text x="7.3586%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="7.0389%" y="85" width="0.3493%" height="15" fill="rgb(215,193,15)" fg:x="2902" fg:w="144"/><text x="7.3319%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.51%)</title><rect x="7.0389%" y="101" width="0.5094%" height="15" fill="rgb(232,15,44)" fg:x="2902" fg:w="210"/><text x="7.3319%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.53%)</title><rect x="7.0389%" y="117" width="0.5336%" height="15" fill="rgb(212,3,48)" fg:x="2902" fg:w="220"/><text x="7.3319%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 1.09%)</title><rect x="6.8061%" y="133" width="1.0891%" height="15" fill="rgb(218,128,7)" fg:x="2806" fg:w="449"/><text x="7.0990%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.62%)</title><rect x="6.6072%" y="149" width="1.6178%" height="15" fill="rgb(226,216,39)" fg:x="2724" fg:w="667"/><text x="6.9001%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.16%)</title><rect x="8.2250%" y="149" width="0.1552%" height="15" fill="rgb(243,47,51)" fg:x="3391" fg:w="64"/><text x="8.5180%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="8.3802%" y="149" width="0.1480%" height="15" fill="rgb(241,183,40)" fg:x="3455" fg:w="61"/><text x="8.6732%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.19%)</title><rect x="6.6072%" y="165" width="2.1903%" height="15" fill="rgb(231,217,32)" fg:x="2724" fg:w="903"/><text x="6.9001%" y="175.50">b..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.07%)</title><rect x="8.7974%" y="165" width="0.0655%" height="15" fill="rgb(229,61,38)" fg:x="3627" fg:w="27"/><text x="9.0904%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="8.8629%" y="165" width="0.1116%" height="15" fill="rgb(225,210,5)" fg:x="3654" fg:w="46"/><text x="9.1559%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.23%)</title><rect x="8.9745%" y="165" width="0.2304%" height="15" fill="rgb(231,79,45)" fg:x="3700" fg:w="95"/><text x="9.2675%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="9.2049%" y="133" width="0.0146%" height="15" fill="rgb(224,100,7)" fg:x="3795" fg:w="6"/><text x="9.4979%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.06%)</title><rect x="9.2049%" y="149" width="1.0600%" height="15" fill="rgb(241,198,18)" fg:x="3795" fg:w="437"/><text x="9.4979%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="10.2649%" y="149" width="0.0461%" height="15" fill="rgb(252,97,53)" fg:x="4232" fg:w="19"/><text x="10.5578%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="10.3110%" y="117" width="0.1989%" height="15" fill="rgb(220,88,7)" fg:x="4251" fg:w="82"/><text x="10.6039%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="10.5098%" y="85" width="0.1625%" height="15" fill="rgb(213,176,14)" fg:x="4333" fg:w="67"/><text x="10.8028%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="10.5098%" y="101" width="0.2329%" height="15" fill="rgb(246,73,7)" fg:x="4333" fg:w="96"/><text x="10.8028%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="10.7427%" y="53" width="0.0267%" height="15" fill="rgb(245,64,36)" fg:x="4429" fg:w="11"/><text x="11.0357%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="10.7694%" y="37" width="0.0849%" height="15" fill="rgb(245,80,10)" fg:x="4440" fg:w="35"/><text x="11.0623%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="10.7694%" y="53" width="0.1552%" height="15" fill="rgb(232,107,50)" fg:x="4440" fg:w="64"/><text x="11.0623%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="10.7427%" y="69" width="0.3493%" height="15" fill="rgb(253,3,0)" fg:x="4429" fg:w="144"/><text x="11.0357%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.51%)</title><rect x="10.7427%" y="85" width="0.5094%" height="15" fill="rgb(212,99,53)" fg:x="4429" fg:w="210"/><text x="11.0357%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.53%)</title><rect x="10.7427%" y="101" width="0.5336%" height="15" fill="rgb(249,111,54)" fg:x="4429" fg:w="220"/><text x="11.0357%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.09%)</title><rect x="10.5098%" y="117" width="1.0891%" height="15" fill="rgb(249,55,30)" fg:x="4333" fg:w="449"/><text x="10.8028%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.62%)</title><rect x="10.3110%" y="133" width="1.6178%" height="15" fill="rgb(237,47,42)" fg:x="4251" fg:w="667"/><text x="10.6039%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.16%)</title><rect x="11.9288%" y="133" width="0.1552%" height="15" fill="rgb(211,20,18)" fg:x="4918" fg:w="64"/><text x="12.2218%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="12.0840%" y="133" width="0.1480%" height="15" fill="rgb(231,203,46)" fg:x="4982" fg:w="61"/><text x="12.3770%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.19%)</title><rect x="10.3110%" y="149" width="2.1903%" height="15" fill="rgb(237,142,3)" fg:x="4251" fg:w="903"/><text x="10.6039%" y="159.50">b..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="12.5012%" y="133" width="0.1237%" height="15" fill="rgb(241,107,1)" fg:x="5154" fg:w="51"/><text x="12.7942%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.29%)</title><rect x="12.6249%" y="133" width="0.2862%" height="15" fill="rgb(229,83,13)" fg:x="5205" fg:w="118"/><text x="12.9179%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="12.9111%" y="133" width="0.1116%" height="15" fill="rgb(241,91,40)" fg:x="5323" fg:w="46"/><text x="13.2041%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (288 instructions, 0.70%)</title><rect x="12.5012%" y="149" width="0.6986%" height="15" fill="rgb(225,3,45)" fg:x="5154" fg:w="288"/><text x="12.7942%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="13.1998%" y="149" width="0.1989%" height="15" fill="rgb(244,223,14)" fg:x="5442" fg:w="82"/><text x="13.4927%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="13.3987%" y="133" width="0.1237%" height="15" fill="rgb(224,124,37)" fg:x="5524" fg:w="51"/><text x="13.6916%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.29%)</title><rect x="13.5224%" y="133" width="0.2862%" height="15" fill="rgb(251,171,30)" fg:x="5575" fg:w="118"/><text x="13.8153%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="13.8086%" y="133" width="0.1116%" height="15" fill="rgb(236,46,54)" fg:x="5693" fg:w="46"/><text x="14.1015%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.69%)</title><rect x="13.3987%" y="149" width="0.6864%" height="15" fill="rgb(245,213,5)" fg:x="5524" fg:w="283"/><text x="13.6916%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,248 instructions, 5.45%)</title><rect x="9.2049%" y="165" width="5.4526%" height="15" fill="rgb(230,144,27)" fg:x="3795" fg:w="2248"/><text x="9.4979%" y="175.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="14.6575%" y="165" width="0.1116%" height="15" fill="rgb(220,86,6)" fg:x="6043" fg:w="46"/><text x="14.9505%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="14.7691%" y="165" width="0.0364%" height="15" fill="rgb(240,20,13)" fg:x="6089" fg:w="15"/><text x="15.0621%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="14.8055%" y="165" width="0.0194%" height="15" fill="rgb(217,89,34)" fg:x="6104" fg:w="8"/><text x="15.0984%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="14.8249%" y="149" width="0.1989%" height="15" fill="rgb(229,13,5)" fg:x="6112" fg:w="82"/><text x="15.1178%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.43%)</title><rect x="14.8249%" y="165" width="0.4317%" height="15" fill="rgb(244,67,35)" fg:x="6112" fg:w="178"/><text x="15.1178%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="15.2566%" y="133" width="0.1989%" height="15" fill="rgb(221,40,2)" fg:x="6290" fg:w="82"/><text x="15.5496%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="15.2566%" y="149" width="0.2983%" height="15" fill="rgb(237,157,21)" fg:x="6290" fg:w="123"/><text x="15.5496%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.51%)</title><rect x="15.2566%" y="165" width="0.5094%" height="15" fill="rgb(222,94,11)" fg:x="6290" fg:w="210"/><text x="15.5496%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="15.7660%" y="149" width="0.1989%" height="15" fill="rgb(249,113,6)" fg:x="6500" fg:w="82"/><text x="16.0590%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.43%)</title><rect x="15.7660%" y="165" width="0.4317%" height="15" fill="rgb(238,137,36)" fg:x="6500" fg:w="178"/><text x="16.0590%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="16.1977%" y="165" width="0.1989%" height="15" fill="rgb(210,102,26)" fg:x="6678" fg:w="82"/><text x="16.4907%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="16.3966%" y="165" width="0.2159%" height="15" fill="rgb(218,30,30)" fg:x="6760" fg:w="89"/><text x="16.6896%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="16.6125%" y="165" width="0.1989%" height="15" fill="rgb(214,67,26)" fg:x="6849" fg:w="82"/><text x="16.9055%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="16.8114%" y="165" width="0.1989%" height="15" fill="rgb(251,9,53)" fg:x="6931" fg:w="82"/><text x="17.1044%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="17.0103%" y="165" width="0.0121%" height="15" fill="rgb(228,204,25)" fg:x="7013" fg:w="5"/><text x="17.3033%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="17.0224%" y="165" width="0.2159%" height="15" fill="rgb(207,153,8)" fg:x="7018" fg:w="89"/><text x="17.3154%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.95%)</title><rect x="17.2383%" y="165" width="0.9508%" height="15" fill="rgb(242,9,16)" fg:x="7107" fg:w="392"/><text x="17.5313%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.95%)</title><rect x="18.1891%" y="165" width="0.9508%" height="15" fill="rgb(217,211,10)" fg:x="7499" fg:w="392"/><text x="18.4821%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.22%)</title><rect x="19.1399%" y="165" width="1.2225%" height="15" fill="rgb(219,228,52)" fg:x="7891" fg:w="504"/><text x="19.4329%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (8,393 instructions, 20.36%)</title><rect x="3.2163%" y="181" width="20.3575%" height="15" fill="rgb(231,92,29)" fg:x="1326" fg:w="8393"/><text x="3.5092%" y="191.50">candid::de::IDLDeserialize:..</text></g><g><title>memcpy (408 instructions, 0.99%)</title><rect x="23.5738%" y="181" width="0.9896%" height="15" fill="rgb(232,8,23)" fg:x="9719" fg:w="408"/><text x="23.8668%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.99%)</title><rect x="24.5634%" y="181" width="0.9896%" height="15" fill="rgb(216,211,34)" fg:x="10127" fg:w="408"/><text x="24.8564%" y="191.50"></text></g><g><title>candid::types::internal::find_type (103 instructions, 0.25%)</title><rect x="25.5530%" y="165" width="0.2498%" height="15" fill="rgb(236,151,0)" fg:x="10535" fg:w="103"/><text x="25.8460%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="25.8029%" y="165" width="0.1989%" height="15" fill="rgb(209,168,3)" fg:x="10638" fg:w="82"/><text x="26.0958%" y="175.50"></text></g><g><title>candid::types::internal::env_add (185 instructions, 0.45%)</title><rect x="26.0017%" y="165" width="0.4487%" height="15" fill="rgb(208,129,28)" fg:x="10720" fg:w="185"/><text x="26.2947%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="26.4505%" y="165" width="0.1989%" height="15" fill="rgb(229,78,22)" fg:x="10905" fg:w="82"/><text x="26.7434%" y="175.50"></text></g><g><title>memcmp (537 instructions, 1.30%)</title><rect x="26.6494%" y="149" width="1.3025%" height="15" fill="rgb(228,187,13)" fg:x="10987" fg:w="537"/><text x="26.9423%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="27.9519%" y="133" width="0.2159%" height="15" fill="rgb(240,119,24)" fg:x="11524" fg:w="89"/><text x="28.2448%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.39%)</title><rect x="27.9519%" y="149" width="0.3881%" height="15" fill="rgb(209,194,42)" fg:x="11524" fg:w="160"/><text x="28.2448%" y="159.50"></text></g><g><title>candid::types::internal::env_add (917 instructions, 2.22%)</title><rect x="26.6494%" y="165" width="2.2242%" height="15" fill="rgb(247,200,46)" fg:x="10987" fg:w="917"/><text x="26.9423%" y="175.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="28.8736%" y="149" width="0.0825%" height="15" fill="rgb(218,76,16)" fg:x="11904" fg:w="34"/><text x="29.1665%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.12%)</title><rect x="28.9560%" y="149" width="0.1189%" height="15" fill="rgb(225,21,48)" fg:x="11938" fg:w="49"/><text x="29.2490%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="29.0749%" y="149" width="0.0340%" height="15" fill="rgb(239,223,50)" fg:x="11987" fg:w="14"/><text x="29.3679%" y="159.50"></text></g><g><title>candid::types::internal::env_id (267 instructions, 0.65%)</title><rect x="28.8736%" y="165" width="0.6476%" height="15" fill="rgb(244,45,21)" fg:x="11904" fg:w="267"/><text x="29.1665%" y="175.50"></text></g><g><title>candid::types::CandidType::ty (1,755 instructions, 4.26%)</title><rect x="25.5530%" y="181" width="4.2568%" height="15" fill="rgb(232,33,43)" fg:x="10535" fg:w="1755"/><text x="25.8460%" y="191.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.12%)</title><rect x="29.8098%" y="165" width="0.1189%" height="15" fill="rgb(209,8,3)" fg:x="12290" fg:w="49"/><text x="30.1028%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="29.9287%" y="133" width="0.0655%" height="15" fill="rgb(214,25,53)" fg:x="12339" fg:w="27"/><text x="30.2217%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.34%)</title><rect x="29.9287%" y="149" width="0.3444%" height="15" fill="rgb(254,186,54)" fg:x="12339" fg:w="142"/><text x="30.2217%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="30.4453%" y="133" width="0.0655%" height="15" fill="rgb(208,174,49)" fg:x="12552" fg:w="27"/><text x="30.7383%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.34%)</title><rect x="30.4453%" y="149" width="0.3444%" height="15" fill="rgb(233,191,51)" fg:x="12552" fg:w="142"/><text x="30.7383%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (426 instructions, 1.03%)</title><rect x="29.9287%" y="165" width="1.0333%" height="15" fill="rgb(222,134,10)" fg:x="12339" fg:w="426"/><text x="30.2217%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.09%)</title><rect x="30.9620%" y="149" width="0.0897%" height="15" fill="rgb(230,226,20)" fg:x="12765" fg:w="37"/><text x="31.2549%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.09%)</title><rect x="31.0517%" y="149" width="0.0897%" height="15" fill="rgb(251,111,25)" fg:x="12802" fg:w="37"/><text x="31.3447%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="31.1415%" y="149" width="0.0825%" height="15" fill="rgb(224,40,46)" fg:x="12839" fg:w="34"/><text x="31.4344%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="31.2239%" y="149" width="0.0825%" height="15" fill="rgb(236,108,47)" fg:x="12873" fg:w="34"/><text x="31.5169%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="31.3064%" y="149" width="0.1989%" height="15" fill="rgb(234,93,0)" fg:x="12907" fg:w="82"/><text x="31.5994%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="31.5053%" y="149" width="0.1237%" height="15" fill="rgb(224,213,32)" fg:x="12989" fg:w="51"/><text x="31.7983%" y="159.50"></text></g><g><title>binread::binary_template::write_named (61 instructions, 0.15%)</title><rect x="31.6290%" y="133" width="0.1480%" height="15" fill="rgb(251,11,48)" fg:x="13040" fg:w="61"/><text x="31.9220%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (140 instructions, 0.34%)</title><rect x="31.6290%" y="149" width="0.3396%" height="15" fill="rgb(236,173,5)" fg:x="13040" fg:w="140"/><text x="31.9220%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.23%)</title><rect x="31.9686%" y="149" width="0.2304%" height="15" fill="rgb(230,95,12)" fg:x="13180" fg:w="95"/><text x="32.2615%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="32.1990%" y="133" width="0.0146%" height="15" fill="rgb(232,209,1)" fg:x="13275" fg:w="6"/><text x="32.4920%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.06%)</title><rect x="32.1990%" y="149" width="1.0600%" height="15" fill="rgb(232,6,1)" fg:x="13275" fg:w="437"/><text x="32.4920%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="33.2590%" y="117" width="0.1989%" height="15" fill="rgb(210,224,50)" fg:x="13712" fg:w="82"/><text x="33.5519%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="33.4578%" y="85" width="0.1625%" height="15" fill="rgb(228,127,35)" fg:x="13794" fg:w="67"/><text x="33.7508%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="33.4578%" y="101" width="0.2329%" height="15" fill="rgb(245,102,45)" fg:x="13794" fg:w="96"/><text x="33.7508%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="33.6907%" y="53" width="0.0267%" height="15" fill="rgb(214,1,49)" fg:x="13890" fg:w="11"/><text x="33.9837%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="33.7174%" y="37" width="0.0849%" height="15" fill="rgb(226,163,40)" fg:x="13901" fg:w="35"/><text x="34.0103%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="33.7174%" y="53" width="0.1552%" height="15" fill="rgb(239,212,28)" fg:x="13901" fg:w="64"/><text x="34.0103%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="33.6907%" y="69" width="0.3493%" height="15" fill="rgb(220,20,13)" fg:x="13890" fg:w="144"/><text x="33.9837%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.51%)</title><rect x="33.6907%" y="85" width="0.5094%" height="15" fill="rgb(210,164,35)" fg:x="13890" fg:w="210"/><text x="33.9837%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.53%)</title><rect x="33.6907%" y="101" width="0.5336%" height="15" fill="rgb(248,109,41)" fg:x="13890" fg:w="220"/><text x="33.9837%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.09%)</title><rect x="33.4578%" y="117" width="1.0891%" height="15" fill="rgb(238,23,50)" fg:x="13794" fg:w="449"/><text x="33.7508%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.62%)</title><rect x="33.2590%" y="133" width="1.6178%" height="15" fill="rgb(211,48,49)" fg:x="13712" fg:w="667"/><text x="33.5519%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.16%)</title><rect x="34.8768%" y="133" width="0.1552%" height="15" fill="rgb(223,36,21)" fg:x="14379" fg:w="64"/><text x="35.1698%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="35.0320%" y="133" width="0.1480%" height="15" fill="rgb(207,123,46)" fg:x="14443" fg:w="61"/><text x="35.3250%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.19%)</title><rect x="33.2590%" y="149" width="2.1903%" height="15" fill="rgb(240,218,32)" fg:x="13712" fg:w="903"/><text x="33.5519%" y="159.50">b..</text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="35.4492%" y="133" width="0.1480%" height="15" fill="rgb(252,5,43)" fg:x="14615" fg:w="61"/><text x="35.7422%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 instructions, 0.29%)</title><rect x="35.4492%" y="149" width="0.2935%" height="15" fill="rgb(252,84,19)" fg:x="14615" fg:w="121"/><text x="35.7422%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="35.7427%" y="149" width="0.1989%" height="15" fill="rgb(243,152,39)" fg:x="14736" fg:w="82"/><text x="36.0357%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="35.9416%" y="133" width="0.1480%" height="15" fill="rgb(234,160,15)" fg:x="14818" fg:w="61"/><text x="36.2346%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="36.2351%" y="133" width="0.1480%" height="15" fill="rgb(237,34,20)" fg:x="14939" fg:w="61"/><text x="36.5281%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="36.5286%" y="133" width="0.1480%" height="15" fill="rgb(229,97,13)" fg:x="15060" fg:w="61"/><text x="36.8215%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="36.8221%" y="133" width="0.1480%" height="15" fill="rgb(234,71,50)" fg:x="15181" fg:w="61"/><text x="37.1150%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="37.1156%" y="133" width="0.1480%" height="15" fill="rgb(253,155,4)" fg:x="15302" fg:w="61"/><text x="37.4085%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="37.4090%" y="133" width="0.1480%" height="15" fill="rgb(222,185,37)" fg:x="15423" fg:w="61"/><text x="37.7020%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="37.7025%" y="133" width="0.1480%" height="15" fill="rgb(251,177,13)" fg:x="15544" fg:w="61"/><text x="37.9955%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="37.9960%" y="133" width="0.1480%" height="15" fill="rgb(250,179,40)" fg:x="15665" fg:w="61"/><text x="38.2890%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (968 instructions, 2.35%)</title><rect x="35.9416%" y="149" width="2.3479%" height="15" fill="rgb(242,44,2)" fg:x="14818" fg:w="968"/><text x="36.2346%" y="159.50">&lt;..</text></g><g><title>__rust_realloc (133 instructions, 0.32%)</title><rect x="38.2895%" y="117" width="0.3226%" height="15" fill="rgb(216,177,13)" fg:x="15786" fg:w="133"/><text x="38.5825%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (190 instructions, 0.46%)</title><rect x="38.2895%" y="133" width="0.4609%" height="15" fill="rgb(216,106,43)" fg:x="15786" fg:w="190"/><text x="38.5825%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (276 instructions, 0.67%)</title><rect x="38.2895%" y="149" width="0.6694%" height="15" fill="rgb(216,183,2)" fg:x="15786" fg:w="276"/><text x="38.5825%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="38.9590%" y="133" width="0.1480%" height="15" fill="rgb(249,75,3)" fg:x="16062" fg:w="61"/><text x="39.2519%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="39.2524%" y="133" width="0.1480%" height="15" fill="rgb(219,67,39)" fg:x="16183" fg:w="61"/><text x="39.5454%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="39.5459%" y="133" width="0.1480%" height="15" fill="rgb(253,228,2)" fg:x="16304" fg:w="61"/><text x="39.8389%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="39.8394%" y="133" width="0.1480%" height="15" fill="rgb(235,138,27)" fg:x="16425" fg:w="61"/><text x="40.1324%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="40.1329%" y="133" width="0.1480%" height="15" fill="rgb(236,97,51)" fg:x="16546" fg:w="61"/><text x="40.4259%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="40.4264%" y="133" width="0.1480%" height="15" fill="rgb(240,80,30)" fg:x="16667" fg:w="61"/><text x="40.7194%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.15%)</title><rect x="40.7199%" y="133" width="0.1480%" height="15" fill="rgb(230,178,19)" fg:x="16788" fg:w="61"/><text x="41.0129%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (847 instructions, 2.05%)</title><rect x="38.9590%" y="149" width="2.0544%" height="15" fill="rgb(210,190,27)" fg:x="16062" fg:w="847"/><text x="39.2519%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 instructions, 0.08%)</title><rect x="41.0134%" y="149" width="0.0776%" height="15" fill="rgb(222,107,31)" fg:x="16909" fg:w="32"/><text x="41.3064%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="41.0910%" y="149" width="0.1116%" height="15" fill="rgb(216,127,34)" fg:x="16941" fg:w="46"/><text x="41.3840%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.08%)</title><rect x="41.2026%" y="149" width="0.0752%" height="15" fill="rgb(234,116,52)" fg:x="16987" fg:w="31"/><text x="41.4955%" y="159.50"></text></g><g><title>__rust_realloc (77 instructions, 0.19%)</title><rect x="41.2778%" y="117" width="0.1868%" height="15" fill="rgb(222,124,15)" fg:x="17018" fg:w="77"/><text x="41.5707%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.33%)</title><rect x="41.2778%" y="133" width="0.3250%" height="15" fill="rgb(231,179,28)" fg:x="17018" fg:w="134"/><text x="41.5707%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (220 instructions, 0.53%)</title><rect x="41.2778%" y="149" width="0.5336%" height="15" fill="rgb(226,93,45)" fg:x="17018" fg:w="220"/><text x="41.5707%" y="159.50"></text></g><g><title>memcpy (220 instructions, 0.53%)</title><rect x="41.8114%" y="149" width="0.5336%" height="15" fill="rgb(215,8,51)" fg:x="17238" fg:w="220"/><text x="42.1044%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.41%)</title><rect x="42.3450%" y="149" width="0.4148%" height="15" fill="rgb(223,106,5)" fg:x="17458" fg:w="171"/><text x="42.6380%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="42.7598%" y="149" width="0.2159%" height="15" fill="rgb(250,191,5)" fg:x="17629" fg:w="89"/><text x="43.0527%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="42.9756%" y="133" width="0.1480%" height="15" fill="rgb(242,132,44)" fg:x="17718" fg:w="61"/><text x="43.2686%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (102 instructions, 0.25%)</title><rect x="42.9756%" y="149" width="0.2474%" height="15" fill="rgb(251,152,29)" fg:x="17718" fg:w="102"/><text x="43.2686%" y="159.50"></text></g><g><title>&lt;ic_principal::Principal as serde::de::Deserialize&gt;::deserialize (6,287 instructions, 15.25%)</title><rect x="30.9620%" y="165" width="15.2493%" height="15" fill="rgb(218,179,5)" fg:x="12765" fg:w="6287"/><text x="31.2549%" y="175.50">&lt;ic_principal::Princ..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="46.2113%" y="165" width="0.0340%" height="15" fill="rgb(227,67,19)" fg:x="19052" fg:w="14"/><text x="46.5043%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="46.2453%" y="165" width="0.0340%" height="15" fill="rgb(233,119,31)" fg:x="19066" fg:w="14"/><text x="46.5382%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="46.2792%" y="165" width="0.0340%" height="15" fill="rgb(241,120,22)" fg:x="19080" fg:w="14"/><text x="46.5722%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (7,060 instructions, 17.12%)</title><rect x="29.8098%" y="181" width="17.1243%" height="15" fill="rgb(224,102,30)" fg:x="12290" fg:w="7060"/><text x="30.1028%" y="191.50">candid::de::IDLDeseria..</text></g><g><title>candid::types::internal::find_type (144 instructions, 0.35%)</title><rect x="46.9341%" y="181" width="0.3493%" height="15" fill="rgb(210,164,37)" fg:x="19350" fg:w="144"/><text x="47.2271%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="47.2834%" y="181" width="0.1989%" height="15" fill="rgb(226,191,16)" fg:x="19494" fg:w="82"/><text x="47.5764%" y="191.50"></text></g><g><title>candid::types::internal::env_add (226 instructions, 0.55%)</title><rect x="47.4823%" y="181" width="0.5482%" height="15" fill="rgb(214,40,45)" fg:x="19576" fg:w="226"/><text x="47.7753%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="48.0305%" y="181" width="0.1989%" height="15" fill="rgb(244,29,26)" fg:x="19802" fg:w="82"/><text x="48.3234%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.19%)</title><rect x="48.2294%" y="165" width="0.1868%" height="15" fill="rgb(216,16,5)" fg:x="19884" fg:w="77"/><text x="48.5223%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="48.4161%" y="149" width="0.2159%" height="15" fill="rgb(249,76,35)" fg:x="19961" fg:w="89"/><text x="48.7091%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.39%)</title><rect x="48.4161%" y="165" width="0.3881%" height="15" fill="rgb(207,11,44)" fg:x="19961" fg:w="160"/><text x="48.7091%" y="175.50"></text></g><g><title>candid::types::internal::env_add (498 instructions, 1.21%)</title><rect x="48.2294%" y="181" width="1.2079%" height="15" fill="rgb(228,190,49)" fg:x="19884" fg:w="498"/><text x="48.5223%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="49.4373%" y="165" width="0.0825%" height="15" fill="rgb(214,173,12)" fg:x="20382" fg:w="34"/><text x="49.7302%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="49.5197%" y="165" width="0.0825%" height="15" fill="rgb(218,26,35)" fg:x="20416" fg:w="34"/><text x="49.8127%" y="175.50"></text></g><g><title>memmove (156 instructions, 0.38%)</title><rect x="49.6022%" y="165" width="0.3784%" height="15" fill="rgb(220,200,19)" fg:x="20450" fg:w="156"/><text x="49.8952%" y="175.50"></text></g><g><title>memmove (172 instructions, 0.42%)</title><rect x="49.9806%" y="165" width="0.4172%" height="15" fill="rgb(239,95,49)" fg:x="20606" fg:w="172"/><text x="50.2736%" y="175.50"></text></g><g><title>candid::types::internal::env_id (683 instructions, 1.66%)</title><rect x="49.4373%" y="181" width="1.6566%" height="15" fill="rgb(235,85,53)" fg:x="20382" fg:w="683"/><text x="49.7302%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.12%)</title><rect x="51.0939%" y="181" width="0.1189%" height="15" fill="rgb(233,133,31)" fg:x="21065" fg:w="49"/><text x="51.3869%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="51.2467%" y="149" width="0.0655%" height="15" fill="rgb(218,25,20)" fg:x="21128" fg:w="27"/><text x="51.5397%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="51.3122%" y="149" width="0.0655%" height="15" fill="rgb(252,210,38)" fg:x="21155" fg:w="27"/><text x="51.6052%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.48%)</title><rect x="51.2467%" y="165" width="0.4778%" height="15" fill="rgb(242,134,21)" fg:x="21128" fg:w="197"/><text x="51.5397%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.68%)</title><rect x="51.2128%" y="181" width="0.6840%" height="15" fill="rgb(213,28,48)" fg:x="21114" fg:w="282"/><text x="51.5057%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.09%)</title><rect x="51.8968%" y="165" width="0.0897%" height="15" fill="rgb(250,196,2)" fg:x="21396" fg:w="37"/><text x="52.1897%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="51.9865%" y="165" width="0.0825%" height="15" fill="rgb(227,5,17)" fg:x="21433" fg:w="34"/><text x="52.2795%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="52.0690%" y="165" width="0.0825%" height="15" fill="rgb(221,226,24)" fg:x="21467" fg:w="34"/><text x="52.3620%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.08%)</title><rect x="52.1515%" y="165" width="0.0752%" height="15" fill="rgb(211,5,48)" fg:x="21501" fg:w="31"/><text x="52.4444%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (261 instructions, 0.63%)</title><rect x="51.8968%" y="181" width="0.6331%" height="15" fill="rgb(219,150,6)" fg:x="21396" fg:w="261"/><text x="52.1897%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="52.5298%" y="181" width="0.0340%" height="15" fill="rgb(251,46,16)" fg:x="21657" fg:w="14"/><text x="52.8228%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="52.5638%" y="181" width="0.0340%" height="15" fill="rgb(220,204,40)" fg:x="21671" fg:w="14"/><text x="52.8568%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="52.5977%" y="181" width="0.0340%" height="15" fill="rgb(211,85,2)" fg:x="21685" fg:w="14"/><text x="52.8907%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.09%)</title><rect x="52.6317%" y="181" width="0.0897%" height="15" fill="rgb(229,17,7)" fg:x="21699" fg:w="37"/><text x="52.9247%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="52.7215%" y="165" width="0.0194%" height="15" fill="rgb(239,72,28)" fg:x="21736" fg:w="8"/><text x="53.0144%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="52.7409%" y="149" width="0.0655%" height="15" fill="rgb(230,47,54)" fg:x="21744" fg:w="27"/><text x="53.0338%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.34%)</title><rect x="52.7409%" y="165" width="0.3444%" height="15" fill="rgb(214,50,8)" fg:x="21744" fg:w="142"/><text x="53.0338%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="53.0853%" y="133" width="0.0655%" height="15" fill="rgb(216,198,43)" fg:x="21886" fg:w="27"/><text x="53.3783%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="53.1508%" y="133" width="0.0655%" height="15" fill="rgb(234,20,35)" fg:x="21913" fg:w="27"/><text x="53.4437%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="53.2163%" y="133" width="0.1625%" height="15" fill="rgb(254,45,19)" fg:x="21940" fg:w="67"/><text x="53.5092%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 0.59%)</title><rect x="53.0853%" y="149" width="0.5870%" height="15" fill="rgb(219,14,44)" fg:x="21886" fg:w="242"/><text x="53.3783%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (313 instructions, 0.76%)</title><rect x="53.0853%" y="165" width="0.7592%" height="15" fill="rgb(217,220,26)" fg:x="21886" fg:w="313"/><text x="53.3783%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="53.8445%" y="165" width="0.0340%" height="15" fill="rgb(213,158,28)" fg:x="22199" fg:w="14"/><text x="54.1374%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (567 instructions, 1.38%)</title><rect x="52.7215%" y="181" width="1.3753%" height="15" fill="rgb(252,51,52)" fg:x="21736" fg:w="567"/><text x="53.0144%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="54.0967%" y="165" width="0.1601%" height="15" fill="rgb(246,89,16)" fg:x="22303" fg:w="66"/><text x="54.3897%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="54.2568%" y="165" width="0.1625%" height="15" fill="rgb(216,158,49)" fg:x="22369" fg:w="67"/><text x="54.5498%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (226 instructions, 0.55%)</title><rect x="54.0967%" y="181" width="0.5482%" height="15" fill="rgb(236,107,19)" fg:x="22303" fg:w="226"/><text x="54.3897%" y="191.50"></text></g><g><title>memset (240 instructions, 0.58%)</title><rect x="54.6449%" y="181" width="0.5821%" height="15" fill="rgb(228,185,30)" fg:x="22529" fg:w="240"/><text x="54.9379%" y="191.50"></text></g><g><title>memcpy (176 instructions, 0.43%)</title><rect x="55.2270%" y="181" width="0.4269%" height="15" fill="rgb(246,134,8)" fg:x="22769" fg:w="176"/><text x="55.5200%" y="191.50"></text></g><g><title>memcpy (504 instructions, 1.22%)</title><rect x="55.6539%" y="181" width="1.2225%" height="15" fill="rgb(214,143,50)" fg:x="22945" fg:w="504"/><text x="55.9469%" y="191.50"></text></g><g><title>memset (139 instructions, 0.34%)</title><rect x="56.8764%" y="165" width="0.3371%" height="15" fill="rgb(228,75,8)" fg:x="23449" fg:w="139"/><text x="57.1694%" y="175.50"></text></g><g><title>sha2::sha256::compress256 (4,987 instructions, 12.10%)</title><rect x="57.2135%" y="165" width="12.0961%" height="15" fill="rgb(207,175,4)" fg:x="23588" fg:w="4987"/><text x="57.5065%" y="175.50">sha2::sha256::c..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (5,427 instructions, 13.16%)</title><rect x="56.8764%" y="181" width="13.1634%" height="15" fill="rgb(205,108,24)" fg:x="23449" fg:w="5427"/><text x="57.1694%" y="191.50">&lt;sha2::core_api::..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="70.0398%" y="181" width="0.1989%" height="15" fill="rgb(244,120,49)" fg:x="28876" fg:w="82"/><text x="70.3327%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="70.2387%" y="133" width="0.2159%" height="15" fill="rgb(223,47,38)" fg:x="28958" fg:w="89"/><text x="70.5316%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.39%)</title><rect x="70.2387%" y="149" width="0.3881%" height="15" fill="rgb(229,179,11)" fg:x="28958" fg:w="160"/><text x="70.5316%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="70.6268%" y="133" width="0.0655%" height="15" fill="rgb(231,122,1)" fg:x="29118" fg:w="27"/><text x="70.9197%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.35%)</title><rect x="70.6268%" y="149" width="0.3493%" height="15" fill="rgb(245,119,9)" fg:x="29118" fg:w="144"/><text x="70.9197%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="71.1725%" y="133" width="0.1601%" height="15" fill="rgb(241,163,25)" fg:x="29343" fg:w="66"/><text x="71.4655%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="71.3326%" y="133" width="0.1625%" height="15" fill="rgb(217,214,3)" fg:x="29409" fg:w="67"/><text x="71.6256%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.55%)</title><rect x="71.1725%" y="149" width="0.5530%" height="15" fill="rgb(240,86,28)" fg:x="29343" fg:w="228"/><text x="71.4655%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (684 instructions, 1.66%)</title><rect x="70.2387%" y="165" width="1.6591%" height="15" fill="rgb(215,47,9)" fg:x="28958" fg:w="684"/><text x="70.5316%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="71.8977%" y="165" width="0.0340%" height="15" fill="rgb(252,25,45)" fg:x="29642" fg:w="14"/><text x="72.1907%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="71.9317%" y="149" width="0.0655%" height="15" fill="rgb(251,164,9)" fg:x="29656" fg:w="27"/><text x="72.2247%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="71.9972%" y="149" width="0.0655%" height="15" fill="rgb(233,194,0)" fg:x="29683" fg:w="27"/><text x="72.2902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="72.0627%" y="149" width="0.1625%" height="15" fill="rgb(249,111,24)" fg:x="29710" fg:w="67"/><text x="72.3556%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 0.59%)</title><rect x="71.9317%" y="165" width="0.5870%" height="15" fill="rgb(250,223,3)" fg:x="29656" fg:w="242"/><text x="72.2247%" y="175.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.06%)</title><rect x="72.5187%" y="149" width="0.0582%" height="15" fill="rgb(236,178,37)" fg:x="29898" fg:w="24"/><text x="72.8116%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="72.5769%" y="149" width="0.1989%" height="15" fill="rgb(241,158,50)" fg:x="29922" fg:w="82"/><text x="72.8699%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="72.7758%" y="133" width="0.1989%" height="15" fill="rgb(213,121,41)" fg:x="30004" fg:w="82"/><text x="73.0688%" y="143.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.40%)</title><rect x="72.7758%" y="149" width="0.4026%" height="15" fill="rgb(240,92,3)" fg:x="30004" fg:w="166"/><text x="73.0688%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="73.1784%" y="149" width="0.1989%" height="15" fill="rgb(205,123,3)" fg:x="30170" fg:w="82"/><text x="73.4714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="73.3773%" y="149" width="0.1989%" height="15" fill="rgb(205,97,47)" fg:x="30252" fg:w="82"/><text x="73.6703%" y="159.50"></text></g><g><title>memcmp (675 instructions, 1.64%)</title><rect x="73.5762%" y="133" width="1.6372%" height="15" fill="rgb(247,152,14)" fg:x="30334" fg:w="675"/><text x="73.8692%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="75.2134%" y="117" width="0.2159%" height="15" fill="rgb(248,195,53)" fg:x="31009" fg:w="89"/><text x="75.5064%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.39%)</title><rect x="75.2134%" y="133" width="0.3881%" height="15" fill="rgb(226,201,16)" fg:x="31009" fg:w="160"/><text x="75.5064%" y="143.50"></text></g><g><title>candid::types::internal::env_add (1,014 instructions, 2.46%)</title><rect x="73.5762%" y="149" width="2.4595%" height="15" fill="rgb(205,98,0)" fg:x="30334" fg:w="1014"/><text x="73.8692%" y="159.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="76.0357%" y="133" width="0.0825%" height="15" fill="rgb(214,191,48)" fg:x="31348" fg:w="34"/><text x="76.3287%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.27%)</title><rect x="76.1182%" y="133" width="0.2692%" height="15" fill="rgb(237,112,39)" fg:x="31382" fg:w="111"/><text x="76.4111%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="76.3874%" y="133" width="0.0340%" height="15" fill="rgb(247,203,27)" fg:x="31493" fg:w="14"/><text x="76.6804%" y="143.50"></text></g><g><title>candid::types::internal::env_id (329 instructions, 0.80%)</title><rect x="76.0357%" y="149" width="0.7980%" height="15" fill="rgb(235,124,28)" fg:x="31348" fg:w="329"/><text x="76.3287%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (1,920 instructions, 4.66%)</title><rect x="72.5187%" y="165" width="4.6570%" height="15" fill="rgb(208,207,46)" fg:x="29898" fg:w="1920"/><text x="72.8116%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="77.1757%" y="133" width="0.1989%" height="15" fill="rgb(234,176,4)" fg:x="31818" fg:w="82"/><text x="77.4687%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="77.1757%" y="149" width="0.2983%" height="15" fill="rgb(230,133,28)" fg:x="31818" fg:w="123"/><text x="77.4687%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.51%)</title><rect x="77.1757%" y="165" width="0.5094%" height="15" fill="rgb(211,137,40)" fg:x="31818" fg:w="210"/><text x="77.4687%" y="175.50"></text></g><g><title>candid::types::internal::is_primitive (38 instructions, 0.09%)</title><rect x="77.6851%" y="149" width="0.0922%" height="15" fill="rgb(254,35,13)" fg:x="32028" fg:w="38"/><text x="77.9780%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="77.7772%" y="149" width="0.1989%" height="15" fill="rgb(225,49,51)" fg:x="32066" fg:w="82"/><text x="78.0702%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="77.9761%" y="117" width="0.1989%" height="15" fill="rgb(251,10,15)" fg:x="32148" fg:w="82"/><text x="78.2691%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="77.9761%" y="133" width="0.2983%" height="15" fill="rgb(228,207,15)" fg:x="32148" fg:w="123"/><text x="78.2691%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (199 instructions, 0.48%)</title><rect x="77.9761%" y="149" width="0.4827%" height="15" fill="rgb(241,99,19)" fg:x="32148" fg:w="199"/><text x="78.2691%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="78.4588%" y="133" width="0.0825%" height="15" fill="rgb(207,104,49)" fg:x="32347" fg:w="34"/><text x="78.7518%" y="143.50"></text></g><g><title>candid::types::internal::is_primitive (31 instructions, 0.08%)</title><rect x="78.5413%" y="133" width="0.0752%" height="15" fill="rgb(234,99,18)" fg:x="32381" fg:w="31"/><text x="78.8343%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="78.6165%" y="133" width="0.0340%" height="15" fill="rgb(213,191,49)" fg:x="32412" fg:w="14"/><text x="78.9094%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (202 instructions, 0.49%)</title><rect x="78.4588%" y="149" width="0.4900%" height="15" fill="rgb(210,226,19)" fg:x="32347" fg:w="202"/><text x="78.7518%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="78.9488%" y="101" width="0.1989%" height="15" fill="rgb(229,97,18)" fg:x="32549" fg:w="82"/><text x="79.2417%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="78.9488%" y="117" width="0.2983%" height="15" fill="rgb(211,167,15)" fg:x="32549" fg:w="123"/><text x="79.2417%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.50%)</title><rect x="78.9488%" y="133" width="0.4997%" height="15" fill="rgb(210,169,34)" fg:x="32549" fg:w="206"/><text x="79.2417%" y="143.50"></text></g><g><title>leb128::write::signed (260 instructions, 0.63%)</title><rect x="78.9488%" y="149" width="0.6306%" height="15" fill="rgb(241,121,31)" fg:x="32549" fg:w="260"/><text x="79.2417%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::encode (68 instructions, 0.16%)</title><rect x="79.5794%" y="149" width="0.1649%" height="15" fill="rgb(232,40,11)" fg:x="32809" fg:w="68"/><text x="79.8724%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="79.7443%" y="149" width="0.0340%" height="15" fill="rgb(205,86,26)" fg:x="32877" fg:w="14"/><text x="80.0373%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (1,126 instructions, 2.73%)</title><rect x="77.6851%" y="165" width="2.7312%" height="15" fill="rgb(231,126,28)" fg:x="32028" fg:w="1126"/><text x="77.9780%" y="175.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="80.4162%" y="165" width="0.0340%" height="15" fill="rgb(219,221,18)" fg:x="33154" fg:w="14"/><text x="80.7092%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="80.4502%" y="133" width="0.1989%" height="15" fill="rgb(211,40,0)" fg:x="33168" fg:w="82"/><text x="80.7431%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="80.4502%" y="149" width="0.2983%" height="15" fill="rgb(239,85,43)" fg:x="33168" fg:w="123"/><text x="80.7431%" y="159.50"></text></g><g><title>__rust_realloc (133 instructions, 0.32%)</title><rect x="80.9498%" y="133" width="0.3226%" height="15" fill="rgb(231,55,21)" fg:x="33374" fg:w="133"/><text x="81.2428%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (176 instructions, 0.43%)</title><rect x="80.9498%" y="149" width="0.4269%" height="15" fill="rgb(225,184,43)" fg:x="33374" fg:w="176"/><text x="81.2428%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (468 instructions, 1.14%)</title><rect x="80.4502%" y="165" width="1.1352%" height="15" fill="rgb(251,158,41)" fg:x="33168" fg:w="468"/><text x="80.7431%" y="175.50"></text></g><g><title>memcpy (312 instructions, 0.76%)</title><rect x="81.5853%" y="165" width="0.7568%" height="15" fill="rgb(234,159,37)" fg:x="33636" fg:w="312"/><text x="81.8783%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="82.3421%" y="149" width="0.1601%" height="15" fill="rgb(216,204,22)" fg:x="33948" fg:w="66"/><text x="82.6351%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="82.5022%" y="149" width="0.1625%" height="15" fill="rgb(214,17,3)" fg:x="34014" fg:w="67"/><text x="82.7952%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.55%)</title><rect x="82.3421%" y="165" width="0.5530%" height="15" fill="rgb(212,111,17)" fg:x="33948" fg:w="228"/><text x="82.6351%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.26%)</title><rect x="82.8951%" y="165" width="1.2564%" height="15" fill="rgb(221,157,24)" fg:x="34176" fg:w="518"/><text x="83.1881%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="84.1515%" y="133" width="0.1989%" height="15" fill="rgb(252,16,13)" fg:x="34694" fg:w="82"/><text x="84.4445%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="84.1515%" y="149" width="0.2983%" height="15" fill="rgb(221,62,2)" fg:x="34694" fg:w="123"/><text x="84.4445%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.50%)</title><rect x="84.1515%" y="165" width="0.4997%" height="15" fill="rgb(247,87,22)" fg:x="34694" fg:w="206"/><text x="84.4445%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="84.6512%" y="165" width="0.1989%" height="15" fill="rgb(215,73,9)" fg:x="34900" fg:w="82"/><text x="84.9442%" y="175.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="84.8501%" y="165" width="0.1237%" height="15" fill="rgb(207,175,33)" fg:x="34982" fg:w="51"/><text x="85.1431%" y="175.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="84.9738%" y="165" width="0.1237%" height="15" fill="rgb(243,129,54)" fg:x="35033" fg:w="51"/><text x="85.2668%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="85.0975%" y="165" width="0.1480%" height="15" fill="rgb(227,119,45)" fg:x="35084" fg:w="61"/><text x="85.3905%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.27%)</title><rect x="85.2455%" y="149" width="0.2692%" height="15" fill="rgb(205,109,36)" fg:x="35145" fg:w="111"/><text x="85.5384%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.20%)</title><rect x="85.5147%" y="101" width="0.1989%" height="15" fill="rgb(205,6,39)" fg:x="35256" fg:w="82"/><text x="85.8077%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.30%)</title><rect x="85.5147%" y="117" width="0.2983%" height="15" fill="rgb(221,32,16)" fg:x="35256" fg:w="123"/><text x="85.8077%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.50%)</title><rect x="85.5147%" y="133" width="0.4997%" height="15" fill="rgb(228,144,50)" fg:x="35256" fg:w="206"/><text x="85.8077%" y="143.50"></text></g><g><title>leb128::write::signed (260 instructions, 0.63%)</title><rect x="85.5147%" y="149" width="0.6306%" height="15" fill="rgb(229,201,53)" fg:x="35256" fg:w="260"/><text x="85.8077%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::encode (505 instructions, 1.22%)</title><rect x="85.2455%" y="165" width="1.2249%" height="15" fill="rgb(249,153,27)" fg:x="35145" fg:w="505"/><text x="85.5384%" y="175.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="86.4704%" y="165" width="0.0849%" height="15" fill="rgb(227,106,25)" fg:x="35650" fg:w="35"/><text x="86.7633%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.15%)</title><rect x="86.5553%" y="165" width="0.1480%" height="15" fill="rgb(230,65,29)" fg:x="35685" fg:w="61"/><text x="86.8482%" y="175.50"></text></g><g><title>std::io::Write::write_all (519 instructions, 1.26%)</title><rect x="86.7032%" y="165" width="1.2589%" height="15" fill="rgb(221,57,46)" fg:x="35746" fg:w="519"/><text x="86.9962%" y="175.50"></text></g><g><title>std::io::Write::write_all (547 instructions, 1.33%)</title><rect x="87.9621%" y="165" width="1.3268%" height="15" fill="rgb(229,161,17)" fg:x="36265" fg:w="547"/><text x="88.2550%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="89.5047%" y="149" width="0.0655%" height="15" fill="rgb(222,213,11)" fg:x="36901" fg:w="27"/><text x="89.7977%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.56%)</title><rect x="89.2888%" y="165" width="0.5603%" height="15" fill="rgb(235,35,13)" fg:x="36812" fg:w="231"/><text x="89.5818%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="89.8491%" y="149" width="0.0340%" height="15" fill="rgb(233,158,34)" fg:x="37043" fg:w="14"/><text x="90.1421%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="89.8831%" y="133" width="0.0655%" height="15" fill="rgb(215,151,48)" fg:x="37057" fg:w="27"/><text x="90.1761%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.34%)</title><rect x="89.8831%" y="149" width="0.3444%" height="15" fill="rgb(229,84,14)" fg:x="37057" fg:w="142"/><text x="90.1761%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (293 instructions, 0.71%)</title><rect x="89.8491%" y="165" width="0.7107%" height="15" fill="rgb(229,68,14)" fg:x="37043" fg:w="293"/><text x="90.1421%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="90.5598%" y="165" width="0.0194%" height="15" fill="rgb(243,106,26)" fg:x="37336" fg:w="8"/><text x="90.8528%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="90.5792%" y="165" width="0.0340%" height="15" fill="rgb(206,45,38)" fg:x="37344" fg:w="14"/><text x="90.8722%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="90.6132%" y="149" width="0.0655%" height="15" fill="rgb(226,6,15)" fg:x="37358" fg:w="27"/><text x="90.9061%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.34%)</title><rect x="90.6132%" y="165" width="0.3444%" height="15" fill="rgb(232,22,54)" fg:x="37358" fg:w="142"/><text x="90.9061%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="91.1056%" y="149" width="0.0655%" height="15" fill="rgb(229,222,32)" fg:x="37561" fg:w="27"/><text x="91.3985%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (177 instructions, 0.43%)</title><rect x="90.9576%" y="165" width="0.4293%" height="15" fill="rgb(228,62,29)" fg:x="37500" fg:w="177"/><text x="91.2506%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (10,498 instructions, 25.46%)</title><rect x="70.2387%" y="181" width="25.4633%" height="15" fill="rgb(251,103,34)" fg:x="28958" fg:w="10498"/><text x="70.5316%" y="191.50">ic_cdk::api::call::reply</text></g><g><title>sha::__canister_method_principalToNeuron::{{closure}} (40,227 instructions, 97.57%)</title><rect x="0.3978%" y="197" width="97.5720%" height="15" fill="rgb(233,12,30)" fg:x="164" fg:w="40227"/><text x="0.6908%" y="207.50">sha::__canister_method_principalToNeuron::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.04%)</title><rect x="97.9698%" y="197" width="0.0364%" height="15" fill="rgb(238,52,0)" fg:x="40391" fg:w="15"/><text x="98.2628%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="98.0086%" y="165" width="0.1601%" height="15" fill="rgb(223,98,5)" fg:x="40407" fg:w="66"/><text x="98.3016%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (98 instructions, 0.24%)</title><rect x="98.1687%" y="165" width="0.2377%" height="15" fill="rgb(228,75,37)" fg:x="40473" fg:w="98"/><text x="98.4617%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (64 instructions, 0.16%)</title><rect x="98.6368%" y="165" width="0.1552%" height="15" fill="rgb(205,115,49)" fg:x="40666" fg:w="64"/><text x="98.9298%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="98.7921%" y="165" width="0.1601%" height="15" fill="rgb(250,154,43)" fg:x="40730" fg:w="66"/><text x="99.0851%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (98 instructions, 0.24%)</title><rect x="98.9522%" y="165" width="0.2377%" height="15" fill="rgb(226,43,29)" fg:x="40796" fg:w="98"/><text x="99.2451%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (608 instructions, 1.47%)</title><rect x="98.0086%" y="181" width="1.4747%" height="15" fill="rgb(249,228,39)" fg:x="40407" fg:w="608"/><text x="98.3016%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (726 instructions, 1.76%)</title><rect x="98.0062%" y="197" width="1.7609%" height="15" fill="rgb(216,79,43)" fg:x="40406" fg:w="726"/><text x="98.2992%" y="207.50"></text></g><g><title>all (41,228 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,95,12)" fg:x="0" fg:w="41228"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update principalToNeuron (41,228 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,221,15)" fg:x="0" fg:w="41228"/><text x="0.2930%" y="223.50">canister_update principalToNeuron</text></g></svg></svg>