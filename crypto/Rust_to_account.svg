<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.principalToAccount</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="41044"><g><title>ic_cdk::setup (24 instructions, 0.06%)</title><rect x="0.0000%" y="181" width="0.0585%" height="15" fill="rgb(209,150,17)" fg:x="0" fg:w="24"/><text x="0.2930%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="0.0585%" y="181" width="0.2022%" height="15" fill="rgb(234,202,34)" fg:x="24" fg:w="83"/><text x="0.3514%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="0.2607%" y="181" width="0.2022%" height="15" fill="rgb(253,148,53)" fg:x="107" fg:w="83"/><text x="0.5537%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="0.4629%" y="165" width="0.2022%" height="15" fill="rgb(218,129,16)" fg:x="190" fg:w="83"/><text x="0.7559%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.20%)</title><rect x="0.6651%" y="149" width="0.1998%" height="15" fill="rgb(216,85,19)" fg:x="273" fg:w="82"/><text x="0.9581%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.8649%" y="133" width="0.0146%" height="15" fill="rgb(235,228,7)" fg:x="355" fg:w="6"/><text x="1.1579%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.08%)</title><rect x="0.8649%" y="149" width="1.0793%" height="15" fill="rgb(245,175,0)" fg:x="355" fg:w="443"/><text x="1.1579%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.23%)</title><rect x="1.9443%" y="149" width="0.2315%" height="15" fill="rgb(208,168,36)" fg:x="798" fg:w="95"/><text x="2.2372%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.15%)</title><rect x="2.1757%" y="149" width="0.1462%" height="15" fill="rgb(246,171,24)" fg:x="893" fg:w="60"/><text x="2.4687%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.15%)</title><rect x="2.3219%" y="149" width="0.1462%" height="15" fill="rgb(215,142,24)" fg:x="953" fg:w="60"/><text x="2.6149%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.15%)</title><rect x="2.4681%" y="149" width="0.1462%" height="15" fill="rgb(250,187,7)" fg:x="1013" fg:w="60"/><text x="2.7611%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.15%)</title><rect x="2.6143%" y="149" width="0.1462%" height="15" fill="rgb(228,66,33)" fg:x="1073" fg:w="60"/><text x="2.9072%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.20%)</title><rect x="2.7605%" y="149" width="0.1998%" height="15" fill="rgb(234,215,21)" fg:x="1133" fg:w="82"/><text x="3.0534%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.17%)</title><rect x="2.9602%" y="149" width="0.1705%" height="15" fill="rgb(222,191,20)" fg:x="1215" fg:w="70"/><text x="3.2532%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="3.1308%" y="133" width="0.0146%" height="15" fill="rgb(245,79,54)" fg:x="1285" fg:w="6"/><text x="3.4238%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.08%)</title><rect x="3.1308%" y="149" width="1.0793%" height="15" fill="rgb(240,10,37)" fg:x="1285" fg:w="443"/><text x="3.4238%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.2101%" y="149" width="0.0463%" height="15" fill="rgb(214,192,32)" fg:x="1728" fg:w="19"/><text x="4.5031%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="4.2564%" y="133" width="0.2022%" height="15" fill="rgb(209,36,54)" fg:x="1747" fg:w="83"/><text x="4.5494%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="4.4586%" y="101" width="0.1632%" height="15" fill="rgb(220,10,11)" fg:x="1830" fg:w="67"/><text x="4.7516%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="4.4586%" y="117" width="0.2339%" height="15" fill="rgb(221,106,17)" fg:x="1830" fg:w="96"/><text x="4.7516%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="4.6925%" y="69" width="0.0268%" height="15" fill="rgb(251,142,44)" fg:x="1926" fg:w="11"/><text x="4.9855%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="4.7193%" y="53" width="0.0853%" height="15" fill="rgb(238,13,15)" fg:x="1937" fg:w="35"/><text x="5.0123%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="4.7193%" y="69" width="0.1559%" height="15" fill="rgb(208,107,27)" fg:x="1937" fg:w="64"/><text x="5.0123%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="4.6925%" y="85" width="0.3508%" height="15" fill="rgb(205,136,37)" fg:x="1926" fg:w="144"/><text x="4.9855%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.51%)</title><rect x="4.6925%" y="101" width="0.5092%" height="15" fill="rgb(250,205,27)" fg:x="1926" fg:w="209"/><text x="4.9855%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.53%)</title><rect x="4.6925%" y="117" width="0.5336%" height="15" fill="rgb(210,80,43)" fg:x="1926" fg:w="219"/><text x="4.9855%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.11%)</title><rect x="4.4586%" y="133" width="1.1134%" height="15" fill="rgb(247,160,36)" fg:x="1830" fg:w="457"/><text x="4.7516%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (678 instructions, 1.65%)</title><rect x="4.2564%" y="149" width="1.6519%" height="15" fill="rgb(234,13,49)" fg:x="1747" fg:w="678"/><text x="4.5494%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.23%)</title><rect x="5.9083%" y="149" width="0.2315%" height="15" fill="rgb(234,122,0)" fg:x="2425" fg:w="95"/><text x="6.2013%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="6.1398%" y="149" width="0.1462%" height="15" fill="rgb(207,146,38)" fg:x="2520" fg:w="60"/><text x="6.4327%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.19%)</title><rect x="6.2859%" y="149" width="0.1852%" height="15" fill="rgb(207,177,25)" fg:x="2580" fg:w="76"/><text x="6.5789%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.17%)</title><rect x="6.4711%" y="149" width="0.1705%" height="15" fill="rgb(211,178,42)" fg:x="2656" fg:w="70"/><text x="6.7641%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="6.6417%" y="117" width="0.0146%" height="15" fill="rgb(230,69,54)" fg:x="2726" fg:w="6"/><text x="6.9346%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.08%)</title><rect x="6.6417%" y="133" width="1.0793%" height="15" fill="rgb(214,135,41)" fg:x="2726" fg:w="443"/><text x="6.9346%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="7.7210%" y="133" width="0.0463%" height="15" fill="rgb(237,67,25)" fg:x="3169" fg:w="19"/><text x="8.0140%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="7.7673%" y="117" width="0.2022%" height="15" fill="rgb(222,189,50)" fg:x="3188" fg:w="83"/><text x="8.0602%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="7.9695%" y="85" width="0.1632%" height="15" fill="rgb(245,148,34)" fg:x="3271" fg:w="67"/><text x="8.2625%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="7.9695%" y="101" width="0.2339%" height="15" fill="rgb(222,29,6)" fg:x="3271" fg:w="96"/><text x="8.2625%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="8.2034%" y="53" width="0.0268%" height="15" fill="rgb(221,189,43)" fg:x="3367" fg:w="11"/><text x="8.4964%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="8.2302%" y="37" width="0.0853%" height="15" fill="rgb(207,36,27)" fg:x="3378" fg:w="35"/><text x="8.5232%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="8.2302%" y="53" width="0.1559%" height="15" fill="rgb(217,90,24)" fg:x="3378" fg:w="64"/><text x="8.5232%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="8.2034%" y="69" width="0.3508%" height="15" fill="rgb(224,66,35)" fg:x="3367" fg:w="144"/><text x="8.4964%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.51%)</title><rect x="8.2034%" y="85" width="0.5092%" height="15" fill="rgb(221,13,50)" fg:x="3367" fg:w="209"/><text x="8.4964%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.53%)</title><rect x="8.2034%" y="101" width="0.5336%" height="15" fill="rgb(236,68,49)" fg:x="3367" fg:w="219"/><text x="8.4964%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.11%)</title><rect x="7.9695%" y="117" width="1.1134%" height="15" fill="rgb(229,146,28)" fg:x="3271" fg:w="457"/><text x="8.2625%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (678 instructions, 1.65%)</title><rect x="7.7673%" y="133" width="1.6519%" height="15" fill="rgb(225,31,38)" fg:x="3188" fg:w="678"/><text x="8.0602%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.23%)</title><rect x="9.4192%" y="133" width="0.2315%" height="15" fill="rgb(250,208,3)" fg:x="3866" fg:w="95"/><text x="9.7121%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="9.6506%" y="133" width="0.1462%" height="15" fill="rgb(246,54,23)" fg:x="3961" fg:w="60"/><text x="9.9436%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.20%)</title><rect x="9.7968%" y="117" width="0.1998%" height="15" fill="rgb(243,76,11)" fg:x="4021" fg:w="82"/><text x="10.0898%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.23%)</title><rect x="9.9966%" y="117" width="0.2315%" height="15" fill="rgb(245,21,50)" fg:x="4103" fg:w="95"/><text x="10.2896%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.19%)</title><rect x="10.2280%" y="117" width="0.1852%" height="15" fill="rgb(228,9,43)" fg:x="4198" fg:w="76"/><text x="10.5210%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (335 instructions, 0.82%)</title><rect x="9.7968%" y="133" width="0.8162%" height="15" fill="rgb(208,100,47)" fg:x="4021" fg:w="335"/><text x="10.0898%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="10.6130%" y="133" width="0.2022%" height="15" fill="rgb(232,26,8)" fg:x="4356" fg:w="83"/><text x="10.9060%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,959 instructions, 4.77%)</title><rect x="6.6417%" y="149" width="4.7729%" height="15" fill="rgb(216,166,38)" fg:x="2726" fg:w="1959"/><text x="6.9346%" y="159.50">binr..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.19%)</title><rect x="11.4146%" y="149" width="0.1852%" height="15" fill="rgb(251,202,51)" fg:x="4685" fg:w="76"/><text x="11.7075%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="11.5997%" y="149" width="0.0365%" height="15" fill="rgb(254,216,34)" fg:x="4761" fg:w="15"/><text x="11.8927%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="11.6363%" y="149" width="0.0365%" height="15" fill="rgb(251,32,27)" fg:x="4776" fg:w="15"/><text x="11.9293%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="11.6728%" y="149" width="0.0365%" height="15" fill="rgb(208,127,28)" fg:x="4791" fg:w="15"/><text x="11.9658%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="11.7094%" y="149" width="0.0146%" height="15" fill="rgb(224,137,22)" fg:x="4806" fg:w="6"/><text x="12.0024%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="11.7240%" y="133" width="0.2022%" height="15" fill="rgb(254,70,32)" fg:x="4812" fg:w="83"/><text x="12.0170%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.44%)</title><rect x="11.7240%" y="149" width="0.4361%" height="15" fill="rgb(229,75,37)" fg:x="4812" fg:w="179"/><text x="12.0170%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="12.1601%" y="117" width="0.2022%" height="15" fill="rgb(252,64,23)" fg:x="4991" fg:w="83"/><text x="12.4531%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="12.1601%" y="133" width="0.3070%" height="15" fill="rgb(232,162,48)" fg:x="4991" fg:w="126"/><text x="12.4531%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.51%)</title><rect x="12.1601%" y="149" width="0.5141%" height="15" fill="rgb(246,160,12)" fg:x="4991" fg:w="211"/><text x="12.4531%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="12.6742%" y="149" width="0.2022%" height="15" fill="rgb(247,166,0)" fg:x="5202" fg:w="83"/><text x="12.9672%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="12.8764%" y="149" width="0.2168%" height="15" fill="rgb(249,219,21)" fg:x="5285" fg:w="89"/><text x="13.1694%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="13.0933%" y="149" width="0.2022%" height="15" fill="rgb(205,209,3)" fg:x="5374" fg:w="83"/><text x="13.3862%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="13.2955%" y="149" width="0.2022%" height="15" fill="rgb(243,44,1)" fg:x="5457" fg:w="83"/><text x="13.5885%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="13.5075%" y="149" width="0.2168%" height="15" fill="rgb(206,159,16)" fg:x="5544" fg:w="89"/><text x="13.8004%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.96%)</title><rect x="13.7243%" y="149" width="0.9551%" height="15" fill="rgb(244,77,30)" fg:x="5633" fg:w="392"/><text x="14.0173%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.96%)</title><rect x="14.6794%" y="149" width="0.9551%" height="15" fill="rgb(218,69,12)" fg:x="6025" fg:w="392"/><text x="14.9723%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.23%)</title><rect x="15.6344%" y="149" width="1.2280%" height="15" fill="rgb(212,87,7)" fg:x="6417" fg:w="504"/><text x="15.9274%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,862 instructions, 19.16%)</title><rect x="0.6651%" y="165" width="19.1551%" height="15" fill="rgb(245,114,25)" fg:x="273" fg:w="7862"/><text x="0.9581%" y="175.50">candid::de::IDLDeserializ..</text></g><g><title>memcpy (344 instructions, 0.84%)</title><rect x="19.8202%" y="165" width="0.8381%" height="15" fill="rgb(210,61,42)" fg:x="8135" fg:w="344"/><text x="20.1132%" y="175.50"></text></g><g><title>candid::types::internal::find_type (73 instructions, 0.18%)</title><rect x="20.6583%" y="149" width="0.1779%" height="15" fill="rgb(211,52,33)" fg:x="8479" fg:w="73"/><text x="20.9513%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="20.8362%" y="149" width="0.2022%" height="15" fill="rgb(234,58,33)" fg:x="8552" fg:w="83"/><text x="21.1291%" y="159.50"></text></g><g><title>memmove (220 instructions, 0.54%)</title><rect x="21.0384%" y="133" width="0.5360%" height="15" fill="rgb(220,115,36)" fg:x="8635" fg:w="220"/><text x="21.3314%" y="143.50"></text></g><g><title>memmove (92 instructions, 0.22%)</title><rect x="21.5744%" y="133" width="0.2241%" height="15" fill="rgb(243,153,54)" fg:x="8855" fg:w="92"/><text x="21.8674%" y="143.50"></text></g><g><title>candid::types::internal::env_add (504 instructions, 1.23%)</title><rect x="21.0384%" y="149" width="1.2280%" height="15" fill="rgb(251,47,18)" fg:x="8635" fg:w="504"/><text x="21.3314%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="22.2663%" y="149" width="0.2022%" height="15" fill="rgb(242,102,42)" fg:x="9139" fg:w="83"/><text x="22.5593%" y="159.50"></text></g><g><title>memcmp (537 instructions, 1.31%)</title><rect x="22.4686%" y="133" width="1.3084%" height="15" fill="rgb(234,31,38)" fg:x="9222" fg:w="537"/><text x="22.7615%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="23.7769%" y="117" width="0.2168%" height="15" fill="rgb(221,117,51)" fg:x="9759" fg:w="89"/><text x="24.0699%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.32%)</title><rect x="23.7769%" y="133" width="0.3240%" height="15" fill="rgb(212,20,18)" fg:x="9759" fg:w="133"/><text x="24.0699%" y="143.50"></text></g><g><title>candid::types::internal::env_add (842 instructions, 2.05%)</title><rect x="22.4686%" y="149" width="2.0515%" height="15" fill="rgb(245,133,36)" fg:x="9222" fg:w="842"/><text x="22.7615%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (44 instructions, 0.11%)</title><rect x="24.5200%" y="133" width="0.1072%" height="15" fill="rgb(212,6,19)" fg:x="10064" fg:w="44"/><text x="24.8130%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (44 instructions, 0.11%)</title><rect x="24.6272%" y="133" width="0.1072%" height="15" fill="rgb(218,1,36)" fg:x="10108" fg:w="44"/><text x="24.9202%" y="143.50"></text></g><g><title>candid::types::internal::env_id (341 instructions, 0.83%)</title><rect x="24.5200%" y="149" width="0.8308%" height="15" fill="rgb(246,84,54)" fg:x="10064" fg:w="341"/><text x="24.8130%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,055 instructions, 5.01%)</title><rect x="20.6583%" y="165" width="5.0068%" height="15" fill="rgb(242,110,6)" fg:x="8479" fg:w="2055"/><text x="20.9513%" y="175.50">candi..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.12%)</title><rect x="25.6651%" y="149" width="0.1194%" height="15" fill="rgb(214,47,5)" fg:x="10534" fg:w="49"/><text x="25.9581%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="25.7845%" y="117" width="0.0658%" height="15" fill="rgb(218,159,25)" fg:x="10583" fg:w="27"/><text x="26.0775%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.35%)</title><rect x="25.7845%" y="133" width="0.3460%" height="15" fill="rgb(215,211,28)" fg:x="10583" fg:w="142"/><text x="26.0775%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="26.2377%" y="117" width="0.0658%" height="15" fill="rgb(238,59,32)" fg:x="10769" fg:w="27"/><text x="26.5307%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.35%)</title><rect x="26.2377%" y="133" width="0.3460%" height="15" fill="rgb(226,82,3)" fg:x="10769" fg:w="142"/><text x="26.5307%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 0.91%)</title><rect x="25.7845%" y="149" width="0.9063%" height="15" fill="rgb(240,164,32)" fg:x="10583" fg:w="372"/><text x="26.0775%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.09%)</title><rect x="26.6909%" y="133" width="0.0853%" height="15" fill="rgb(232,46,7)" fg:x="10955" fg:w="35"/><text x="26.9838%" y="143.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.09%)</title><rect x="26.7761%" y="133" width="0.0853%" height="15" fill="rgb(229,129,53)" fg:x="10990" fg:w="35"/><text x="27.0691%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1488 (34 instructions, 0.08%)</title><rect x="26.8614%" y="133" width="0.0828%" height="15" fill="rgb(234,188,29)" fg:x="11025" fg:w="34"/><text x="27.1544%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1488 (34 instructions, 0.08%)</title><rect x="26.9443%" y="133" width="0.0828%" height="15" fill="rgb(246,141,4)" fg:x="11059" fg:w="34"/><text x="27.2372%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="27.0271%" y="133" width="0.2022%" height="15" fill="rgb(229,23,39)" fg:x="11093" fg:w="83"/><text x="27.3201%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.20%)</title><rect x="27.2293%" y="133" width="0.1998%" height="15" fill="rgb(206,12,3)" fg:x="11176" fg:w="82"/><text x="27.5223%" y="143.50"></text></g><g><title>binread::binary_template::write_named (92 instructions, 0.22%)</title><rect x="27.4291%" y="133" width="0.2241%" height="15" fill="rgb(252,226,20)" fg:x="11258" fg:w="92"/><text x="27.7221%" y="143.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.17%)</title><rect x="27.6533%" y="133" width="0.1705%" height="15" fill="rgb(216,123,35)" fg:x="11350" fg:w="70"/><text x="27.9462%" y="143.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="27.8238%" y="117" width="0.0146%" height="15" fill="rgb(212,68,40)" fg:x="11420" fg:w="6"/><text x="28.1168%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.08%)</title><rect x="27.8238%" y="133" width="1.0793%" height="15" fill="rgb(254,125,32)" fg:x="11420" fg:w="443"/><text x="28.1168%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="28.9031%" y="117" width="0.2022%" height="15" fill="rgb(253,97,22)" fg:x="11863" fg:w="83"/><text x="29.1961%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="29.1054%" y="85" width="0.1632%" height="15" fill="rgb(241,101,14)" fg:x="11946" fg:w="67"/><text x="29.3983%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="29.1054%" y="101" width="0.2339%" height="15" fill="rgb(238,103,29)" fg:x="11946" fg:w="96"/><text x="29.3983%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="29.3392%" y="53" width="0.0268%" height="15" fill="rgb(233,195,47)" fg:x="12042" fg:w="11"/><text x="29.6322%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="29.3660%" y="37" width="0.0853%" height="15" fill="rgb(246,218,30)" fg:x="12053" fg:w="35"/><text x="29.6590%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.16%)</title><rect x="29.3660%" y="53" width="0.1559%" height="15" fill="rgb(219,145,47)" fg:x="12053" fg:w="64"/><text x="29.6590%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.35%)</title><rect x="29.3392%" y="69" width="0.3508%" height="15" fill="rgb(243,12,26)" fg:x="12042" fg:w="144"/><text x="29.6322%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.51%)</title><rect x="29.3392%" y="85" width="0.5092%" height="15" fill="rgb(214,87,16)" fg:x="12042" fg:w="209"/><text x="29.6322%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.53%)</title><rect x="29.3392%" y="101" width="0.5336%" height="15" fill="rgb(208,99,42)" fg:x="12042" fg:w="219"/><text x="29.6322%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.11%)</title><rect x="29.1054%" y="117" width="1.1134%" height="15" fill="rgb(253,99,2)" fg:x="11946" fg:w="457"/><text x="29.3983%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (678 instructions, 1.65%)</title><rect x="28.9031%" y="133" width="1.6519%" height="15" fill="rgb(220,168,23)" fg:x="11863" fg:w="678"/><text x="29.1961%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.23%)</title><rect x="30.5550%" y="133" width="0.2315%" height="15" fill="rgb(242,38,24)" fg:x="12541" fg:w="95"/><text x="30.8480%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="30.7865%" y="133" width="0.1462%" height="15" fill="rgb(225,182,9)" fg:x="12636" fg:w="60"/><text x="31.0794%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="30.9327%" y="133" width="0.2071%" height="15" fill="rgb(243,178,37)" fg:x="12696" fg:w="85"/><text x="31.2256%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="31.1398%" y="133" width="0.2022%" height="15" fill="rgb(232,139,19)" fg:x="12781" fg:w="83"/><text x="31.4327%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="31.3420%" y="133" width="0.2071%" height="15" fill="rgb(225,201,24)" fg:x="12864" fg:w="85"/><text x="31.6349%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="31.5491%" y="133" width="0.2071%" height="15" fill="rgb(221,47,46)" fg:x="12949" fg:w="85"/><text x="31.8420%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="31.7562%" y="133" width="0.2071%" height="15" fill="rgb(249,23,13)" fg:x="13034" fg:w="85"/><text x="32.0491%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="31.9633%" y="133" width="0.2071%" height="15" fill="rgb(219,9,5)" fg:x="13119" fg:w="85"/><text x="32.2562%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="32.1704%" y="133" width="0.2071%" height="15" fill="rgb(254,171,16)" fg:x="13204" fg:w="85"/><text x="32.4633%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="32.3774%" y="133" width="0.2071%" height="15" fill="rgb(230,171,20)" fg:x="13289" fg:w="85"/><text x="32.6704%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="32.5845%" y="133" width="0.2071%" height="15" fill="rgb(210,71,41)" fg:x="13374" fg:w="85"/><text x="32.8775%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="32.7916%" y="133" width="0.2071%" height="15" fill="rgb(206,173,20)" fg:x="13459" fg:w="85"/><text x="33.0846%" y="143.50"></text></g><g><title>__rust_realloc (111 instructions, 0.27%)</title><rect x="32.9987%" y="101" width="0.2704%" height="15" fill="rgb(233,88,34)" fg:x="13544" fg:w="111"/><text x="33.2917%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (156 instructions, 0.38%)</title><rect x="32.9987%" y="117" width="0.3801%" height="15" fill="rgb(223,209,46)" fg:x="13544" fg:w="156"/><text x="33.2917%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 instructions, 0.59%)</title><rect x="32.9987%" y="133" width="0.5920%" height="15" fill="rgb(250,43,18)" fg:x="13544" fg:w="243"/><text x="33.2917%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="33.5908%" y="133" width="0.2071%" height="15" fill="rgb(208,13,10)" fg:x="13787" fg:w="85"/><text x="33.8837%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="33.7979%" y="133" width="0.2071%" height="15" fill="rgb(212,200,36)" fg:x="13872" fg:w="85"/><text x="34.0908%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="34.0050%" y="133" width="0.2071%" height="15" fill="rgb(225,90,30)" fg:x="13957" fg:w="85"/><text x="34.2979%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="34.2121%" y="133" width="0.2071%" height="15" fill="rgb(236,182,39)" fg:x="14042" fg:w="85"/><text x="34.5050%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="34.4192%" y="133" width="0.2071%" height="15" fill="rgb(212,144,35)" fg:x="14127" fg:w="85"/><text x="34.7121%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="34.6263%" y="133" width="0.2071%" height="15" fill="rgb(228,63,44)" fg:x="14212" fg:w="85"/><text x="34.9192%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 instructions, 0.21%)</title><rect x="34.8333%" y="133" width="0.2071%" height="15" fill="rgb(228,109,6)" fg:x="14297" fg:w="85"/><text x="35.1263%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 instructions, 0.08%)</title><rect x="35.0404%" y="133" width="0.0828%" height="15" fill="rgb(238,117,24)" fg:x="14382" fg:w="34"/><text x="35.3334%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.19%)</title><rect x="35.1233%" y="133" width="0.1852%" height="15" fill="rgb(242,26,26)" fg:x="14416" fg:w="76"/><text x="35.4163%" y="143.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.08%)</title><rect x="35.3084%" y="133" width="0.0804%" height="15" fill="rgb(221,92,48)" fg:x="14492" fg:w="33"/><text x="35.6014%" y="143.50"></text></g><g><title>__rust_realloc (55 instructions, 0.13%)</title><rect x="35.3889%" y="101" width="0.1340%" height="15" fill="rgb(209,209,32)" fg:x="14525" fg:w="55"/><text x="35.6818%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (100 instructions, 0.24%)</title><rect x="35.3889%" y="117" width="0.2436%" height="15" fill="rgb(221,70,22)" fg:x="14525" fg:w="100"/><text x="35.6818%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (187 instructions, 0.46%)</title><rect x="35.3889%" y="133" width="0.4556%" height="15" fill="rgb(248,145,5)" fg:x="14525" fg:w="187"/><text x="35.6818%" y="143.50"></text></g><g><title>memcpy (220 instructions, 0.54%)</title><rect x="35.8445%" y="133" width="0.5360%" height="15" fill="rgb(226,116,26)" fg:x="14712" fg:w="220"/><text x="36.1374%" y="143.50"></text></g><g><title>memcpy (171 instructions, 0.42%)</title><rect x="36.3805%" y="133" width="0.4166%" height="15" fill="rgb(244,5,17)" fg:x="14932" fg:w="171"/><text x="36.6734%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (53 instructions, 0.13%)</title><rect x="36.7971%" y="133" width="0.1291%" height="15" fill="rgb(252,159,33)" fg:x="15103" fg:w="53"/><text x="37.0901%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="36.9262%" y="133" width="0.2168%" height="15" fill="rgb(206,71,0)" fg:x="15156" fg:w="89"/><text x="37.2192%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="37.1431%" y="133" width="0.1462%" height="15" fill="rgb(233,118,54)" fg:x="15245" fg:w="60"/><text x="37.4360%" y="143.50"></text></g><g><title>&lt;ic_principal::Principal as serde::de::Deserialize&gt;::deserialize (5,637 instructions, 13.73%)</title><rect x="26.6909%" y="149" width="13.7340%" height="15" fill="rgb(234,83,48)" fg:x="10955" fg:w="5637"/><text x="26.9838%" y="159.50">&lt;ic_principal::Pr..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="40.4249%" y="149" width="0.0317%" height="15" fill="rgb(228,3,54)" fg:x="16592" fg:w="13"/><text x="40.7179%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="40.4566%" y="149" width="0.0317%" height="15" fill="rgb(226,155,13)" fg:x="16605" fg:w="13"/><text x="40.7496%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="40.4883%" y="149" width="0.0317%" height="15" fill="rgb(241,28,37)" fg:x="16618" fg:w="13"/><text x="40.7812%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (6,376 instructions, 15.53%)</title><rect x="25.6651%" y="165" width="15.5345%" height="15" fill="rgb(233,93,10)" fg:x="10534" fg:w="6376"/><text x="25.9581%" y="175.50">candid::de::IDLDeser..</text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.10%)</title><rect x="41.1997%" y="165" width="0.1048%" height="15" fill="rgb(225,113,19)" fg:x="16910" fg:w="43"/><text x="41.4927%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="41.3045%" y="149" width="0.0171%" height="15" fill="rgb(241,2,18)" fg:x="16953" fg:w="7"/><text x="41.5974%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="41.3215%" y="133" width="0.0658%" height="15" fill="rgb(228,207,21)" fg:x="16960" fg:w="27"/><text x="41.6145%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="41.3873%" y="133" width="0.0658%" height="15" fill="rgb(213,211,35)" fg:x="16987" fg:w="27"/><text x="41.6803%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.48%)</title><rect x="41.3215%" y="149" width="0.4800%" height="15" fill="rgb(209,83,10)" fg:x="16960" fg:w="197"/><text x="41.6145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="41.8015%" y="117" width="0.0658%" height="15" fill="rgb(209,164,1)" fg:x="17157" fg:w="27"/><text x="42.0945%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="41.8673%" y="117" width="0.0658%" height="15" fill="rgb(213,184,43)" fg:x="17184" fg:w="27"/><text x="42.1602%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.17%)</title><rect x="41.9330%" y="117" width="0.1657%" height="15" fill="rgb(231,61,34)" fg:x="17211" fg:w="68"/><text x="42.2260%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.59%)</title><rect x="41.8015%" y="133" width="0.5945%" height="15" fill="rgb(235,75,3)" fg:x="17157" fg:w="244"/><text x="42.0945%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (288 instructions, 0.70%)</title><rect x="41.8015%" y="149" width="0.7017%" height="15" fill="rgb(220,106,47)" fg:x="17157" fg:w="288"/><text x="42.0945%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="42.5032%" y="149" width="0.0317%" height="15" fill="rgb(210,196,33)" fg:x="17445" fg:w="13"/><text x="42.7961%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (565 instructions, 1.38%)</title><rect x="41.3045%" y="165" width="1.3766%" height="15" fill="rgb(229,154,42)" fg:x="16953" fg:w="565"/><text x="41.5974%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.17%)</title><rect x="42.6810%" y="149" width="0.1681%" height="15" fill="rgb(228,114,26)" fg:x="17518" fg:w="69"/><text x="42.9740%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.17%)</title><rect x="42.8491%" y="149" width="0.1657%" height="15" fill="rgb(208,144,1)" fg:x="17587" fg:w="68"/><text x="43.1421%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.56%)</title><rect x="42.6810%" y="165" width="0.5628%" height="15" fill="rgb(239,112,37)" fg:x="17518" fg:w="231"/><text x="42.9740%" y="175.50"></text></g><g><title>memset (240 instructions, 0.58%)</title><rect x="43.2438%" y="165" width="0.5847%" height="15" fill="rgb(210,96,50)" fg:x="17749" fg:w="240"/><text x="43.5368%" y="175.50"></text></g><g><title>memcpy (220 instructions, 0.54%)</title><rect x="43.8286%" y="165" width="0.5360%" height="15" fill="rgb(222,178,2)" fg:x="17989" fg:w="220"/><text x="44.1215%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.23%)</title><rect x="44.3646%" y="165" width="1.2280%" height="15" fill="rgb(226,74,18)" fg:x="18209" fg:w="504"/><text x="44.6576%" y="175.50"></text></g><g><title>memset (64 instructions, 0.16%)</title><rect x="45.5925%" y="149" width="0.1559%" height="15" fill="rgb(225,67,54)" fg:x="18713" fg:w="64"/><text x="45.8855%" y="159.50"></text></g><g><title>sha2::sha256::compress256 (4,990 instructions, 12.16%)</title><rect x="45.7485%" y="149" width="12.1577%" height="15" fill="rgb(251,92,32)" fg:x="18777" fg:w="4990"/><text x="46.0414%" y="159.50">sha2::sha256::c..</text></g><g><title>sha2::sha256::compress256 (4,990 instructions, 12.16%)</title><rect x="57.9061%" y="149" width="12.1577%" height="15" fill="rgb(228,149,22)" fg:x="23767" fg:w="4990"/><text x="58.1991%" y="159.50">sha2::sha256::c..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (10,386 instructions, 25.30%)</title><rect x="45.5925%" y="165" width="25.3046%" height="15" fill="rgb(243,54,13)" fg:x="18713" fg:w="10386"/><text x="45.8855%" y="175.50">&lt;sha2::core_api::Sha256VarCore as ..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="70.8971%" y="165" width="0.2022%" height="15" fill="rgb(243,180,28)" fg:x="29099" fg:w="83"/><text x="71.1901%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="71.1310%" y="117" width="0.2168%" height="15" fill="rgb(208,167,24)" fg:x="29195" fg:w="89"/><text x="71.4240%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.32%)</title><rect x="71.1310%" y="133" width="0.3240%" height="15" fill="rgb(245,73,45)" fg:x="29195" fg:w="133"/><text x="71.4240%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="71.4550%" y="117" width="0.0658%" height="15" fill="rgb(237,203,48)" fg:x="29328" fg:w="27"/><text x="71.7480%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.35%)</title><rect x="71.4550%" y="133" width="0.3508%" height="15" fill="rgb(211,197,16)" fg:x="29328" fg:w="144"/><text x="71.7480%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (344 instructions, 0.84%)</title><rect x="71.0993%" y="149" width="0.8381%" height="15" fill="rgb(243,99,51)" fg:x="29182" fg:w="344"/><text x="71.3923%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="71.9374%" y="133" width="0.0658%" height="15" fill="rgb(215,123,29)" fg:x="29526" fg:w="27"/><text x="72.2304%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="72.0032%" y="133" width="0.0658%" height="15" fill="rgb(239,186,37)" fg:x="29553" fg:w="27"/><text x="72.2962%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.17%)</title><rect x="72.0690%" y="133" width="0.1657%" height="15" fill="rgb(252,136,39)" fg:x="29580" fg:w="68"/><text x="72.3620%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.59%)</title><rect x="71.9374%" y="149" width="0.5945%" height="15" fill="rgb(223,213,32)" fg:x="29526" fg:w="244"/><text x="72.2304%" y="159.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.06%)</title><rect x="72.5319%" y="133" width="0.0560%" height="15" fill="rgb(233,115,5)" fg:x="29770" fg:w="23"/><text x="72.8249%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="72.5880%" y="133" width="0.2022%" height="15" fill="rgb(207,226,44)" fg:x="29793" fg:w="83"/><text x="72.8809%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="72.7902%" y="117" width="0.2022%" height="15" fill="rgb(208,126,0)" fg:x="29876" fg:w="83"/><text x="73.0831%" y="127.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.40%)</title><rect x="72.7902%" y="133" width="0.4044%" height="15" fill="rgb(244,66,21)" fg:x="29876" fg:w="166"/><text x="73.0831%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="73.1946%" y="133" width="0.2022%" height="15" fill="rgb(222,97,12)" fg:x="30042" fg:w="83"/><text x="73.4876%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="73.3968%" y="133" width="0.2022%" height="15" fill="rgb(219,213,19)" fg:x="30125" fg:w="83"/><text x="73.6898%" y="143.50"></text></g><g><title>memcmp (675 instructions, 1.64%)</title><rect x="73.5991%" y="117" width="1.6446%" height="15" fill="rgb(252,169,30)" fg:x="30208" fg:w="675"/><text x="73.8920%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.22%)</title><rect x="75.2436%" y="101" width="0.2168%" height="15" fill="rgb(206,32,51)" fg:x="30883" fg:w="89"/><text x="75.5366%" y="111.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.32%)</title><rect x="75.2436%" y="117" width="0.3240%" height="15" fill="rgb(250,172,42)" fg:x="30883" fg:w="133"/><text x="75.5366%" y="127.50"></text></g><g><title>candid::types::internal::env_add (980 instructions, 2.39%)</title><rect x="73.5991%" y="133" width="2.3877%" height="15" fill="rgb(209,34,43)" fg:x="30208" fg:w="980"/><text x="73.8920%" y="143.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.27%)</title><rect x="75.9867%" y="117" width="0.2704%" height="15" fill="rgb(223,11,35)" fg:x="31188" fg:w="111"/><text x="76.2797%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="76.2572%" y="117" width="0.0317%" height="15" fill="rgb(251,219,26)" fg:x="31299" fg:w="13"/><text x="76.5502%" y="127.50"></text></g><g><title>candid::types::internal::env_id (258 instructions, 0.63%)</title><rect x="75.9867%" y="133" width="0.6286%" height="15" fill="rgb(231,119,3)" fg:x="31188" fg:w="258"/><text x="76.2797%" y="143.50"></text></g><g><title>candid::types::CandidType::ty (1,827 instructions, 4.45%)</title><rect x="72.5319%" y="149" width="4.4513%" height="15" fill="rgb(216,97,11)" fg:x="29770" fg:w="1827"/><text x="72.8249%" y="159.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="76.9832%" y="117" width="0.2022%" height="15" fill="rgb(223,59,9)" fg:x="31597" fg:w="83"/><text x="77.2762%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="76.9832%" y="133" width="0.3070%" height="15" fill="rgb(233,93,31)" fg:x="31597" fg:w="126"/><text x="77.2762%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.51%)</title><rect x="76.9832%" y="149" width="0.5141%" height="15" fill="rgb(239,81,33)" fg:x="31597" fg:w="211"/><text x="77.2762%" y="159.50"></text></g><g><title>candid::types::internal::is_primitive (38 instructions, 0.09%)</title><rect x="77.4973%" y="133" width="0.0926%" height="15" fill="rgb(213,120,34)" fg:x="31808" fg:w="38"/><text x="77.7903%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="77.5899%" y="133" width="0.2022%" height="15" fill="rgb(243,49,53)" fg:x="31846" fg:w="83"/><text x="77.8829%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="77.7921%" y="101" width="0.2022%" height="15" fill="rgb(247,216,33)" fg:x="31929" fg:w="83"/><text x="78.0851%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="77.7921%" y="117" width="0.3070%" height="15" fill="rgb(226,26,14)" fg:x="31929" fg:w="126"/><text x="78.0851%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (211 instructions, 0.51%)</title><rect x="77.7921%" y="133" width="0.5141%" height="15" fill="rgb(215,49,53)" fg:x="31929" fg:w="211"/><text x="78.0851%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (31 instructions, 0.08%)</title><rect x="78.3062%" y="117" width="0.0755%" height="15" fill="rgb(245,162,40)" fg:x="32140" fg:w="31"/><text x="78.5992%" y="127.50"></text></g><g><title>candid::types::internal::is_primitive (31 instructions, 0.08%)</title><rect x="78.3817%" y="117" width="0.0755%" height="15" fill="rgb(229,68,17)" fg:x="32171" fg:w="31"/><text x="78.6747%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="78.4573%" y="117" width="0.0317%" height="15" fill="rgb(213,182,10)" fg:x="32202" fg:w="13"/><text x="78.7502%" y="127.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (203 instructions, 0.49%)</title><rect x="78.3062%" y="133" width="0.4946%" height="15" fill="rgb(245,125,30)" fg:x="32140" fg:w="203"/><text x="78.5992%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="78.8008%" y="85" width="0.2022%" height="15" fill="rgb(232,202,2)" fg:x="32343" fg:w="83"/><text x="79.0938%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="78.8008%" y="101" width="0.3070%" height="15" fill="rgb(237,140,51)" fg:x="32343" fg:w="126"/><text x="79.0938%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.51%)</title><rect x="78.8008%" y="117" width="0.5068%" height="15" fill="rgb(236,157,25)" fg:x="32343" fg:w="208"/><text x="79.0938%" y="127.50"></text></g><g><title>leb128::write::signed (267 instructions, 0.65%)</title><rect x="78.8008%" y="133" width="0.6505%" height="15" fill="rgb(219,209,0)" fg:x="32343" fg:w="267"/><text x="79.0938%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::encode (66 instructions, 0.16%)</title><rect x="79.4513%" y="133" width="0.1608%" height="15" fill="rgb(240,116,54)" fg:x="32610" fg:w="66"/><text x="79.7443%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="79.6121%" y="133" width="0.0317%" height="15" fill="rgb(216,10,36)" fg:x="32676" fg:w="13"/><text x="79.9051%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (1,152 instructions, 2.81%)</title><rect x="77.4973%" y="149" width="2.8067%" height="15" fill="rgb(222,72,44)" fg:x="31808" fg:w="1152"/><text x="77.7903%" y="159.50">ca..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="80.3041%" y="149" width="0.0317%" height="15" fill="rgb(232,159,9)" fg:x="32960" fg:w="13"/><text x="80.5970%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="80.3357%" y="117" width="0.2022%" height="15" fill="rgb(210,39,32)" fg:x="32973" fg:w="83"/><text x="80.6287%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="80.3357%" y="133" width="0.3070%" height="15" fill="rgb(216,194,45)" fg:x="32973" fg:w="126"/><text x="80.6287%" y="143.50"></text></g><g><title>__rust_realloc (111 instructions, 0.27%)</title><rect x="80.8425%" y="117" width="0.2704%" height="15" fill="rgb(218,18,35)" fg:x="33181" fg:w="111"/><text x="81.1355%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (156 instructions, 0.38%)</title><rect x="80.8425%" y="133" width="0.3801%" height="15" fill="rgb(207,83,51)" fg:x="33181" fg:w="156"/><text x="81.1355%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (451 instructions, 1.10%)</title><rect x="80.3357%" y="149" width="1.0988%" height="15" fill="rgb(225,63,43)" fg:x="32973" fg:w="451"/><text x="80.6287%" y="159.50"></text></g><g><title>memcpy (289 instructions, 0.70%)</title><rect x="81.4346%" y="149" width="0.7041%" height="15" fill="rgb(207,57,36)" fg:x="33424" fg:w="289"/><text x="81.7275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="82.1387%" y="133" width="0.0658%" height="15" fill="rgb(216,99,33)" fg:x="33713" fg:w="27"/><text x="82.4316%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.35%)</title><rect x="82.1387%" y="149" width="0.3460%" height="15" fill="rgb(225,42,16)" fg:x="33713" fg:w="142"/><text x="82.4316%" y="159.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.26%)</title><rect x="82.4847%" y="149" width="1.2621%" height="15" fill="rgb(220,201,45)" fg:x="33855" fg:w="518"/><text x="82.7776%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="83.7467%" y="117" width="0.2022%" height="15" fill="rgb(225,33,4)" fg:x="34373" fg:w="83"/><text x="84.0397%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="83.7467%" y="133" width="0.3070%" height="15" fill="rgb(224,33,50)" fg:x="34373" fg:w="126"/><text x="84.0397%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.51%)</title><rect x="83.7467%" y="149" width="0.5068%" height="15" fill="rgb(246,198,51)" fg:x="34373" fg:w="208"/><text x="84.0397%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="84.2535%" y="149" width="0.2022%" height="15" fill="rgb(205,22,4)" fg:x="34581" fg:w="83"/><text x="84.5465%" y="159.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="84.4557%" y="149" width="0.1243%" height="15" fill="rgb(206,3,8)" fg:x="34664" fg:w="51"/><text x="84.7487%" y="159.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="84.5800%" y="149" width="0.1243%" height="15" fill="rgb(251,23,15)" fg:x="34715" fg:w="51"/><text x="84.8729%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="84.7042%" y="149" width="0.1462%" height="15" fill="rgb(252,88,28)" fg:x="34766" fg:w="60"/><text x="84.9972%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.27%)</title><rect x="84.8504%" y="133" width="0.2704%" height="15" fill="rgb(212,127,14)" fg:x="34826" fg:w="111"/><text x="85.1434%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.20%)</title><rect x="85.1208%" y="101" width="0.2022%" height="15" fill="rgb(247,145,37)" fg:x="34937" fg:w="83"/><text x="85.4138%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.31%)</title><rect x="85.1208%" y="117" width="0.3070%" height="15" fill="rgb(209,117,53)" fg:x="34937" fg:w="126"/><text x="85.4138%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.51%)</title><rect x="85.1208%" y="133" width="0.5068%" height="15" fill="rgb(212,90,42)" fg:x="34937" fg:w="208"/><text x="85.4138%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::encode (486 instructions, 1.18%)</title><rect x="84.8504%" y="149" width="1.1841%" height="15" fill="rgb(218,164,37)" fg:x="34826" fg:w="486"/><text x="85.1434%" y="159.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="86.0345%" y="149" width="0.0853%" height="15" fill="rgb(246,65,34)" fg:x="35312" fg:w="35"/><text x="86.3275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.15%)</title><rect x="86.1198%" y="149" width="0.1462%" height="15" fill="rgb(231,100,33)" fg:x="35347" fg:w="60"/><text x="86.4127%" y="159.50"></text></g><g><title>std::io::Write::write_all (519 instructions, 1.26%)</title><rect x="86.2660%" y="149" width="1.2645%" height="15" fill="rgb(228,126,14)" fg:x="35407" fg:w="519"/><text x="86.5589%" y="159.50"></text></g><g><title>std::io::Write::write_all (543 instructions, 1.32%)</title><rect x="87.5305%" y="149" width="1.3230%" height="15" fill="rgb(215,173,21)" fg:x="35926" fg:w="543"/><text x="87.8234%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="89.0703%" y="133" width="0.0658%" height="15" fill="rgb(210,6,40)" fg:x="36558" fg:w="27"/><text x="89.3632%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.56%)</title><rect x="88.8534%" y="149" width="0.5628%" height="15" fill="rgb(212,48,18)" fg:x="36469" fg:w="231"/><text x="89.1464%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="89.4162%" y="133" width="0.0317%" height="15" fill="rgb(230,214,11)" fg:x="36700" fg:w="13"/><text x="89.7092%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="89.4479%" y="117" width="0.0658%" height="15" fill="rgb(254,105,39)" fg:x="36713" fg:w="27"/><text x="89.7409%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.35%)</title><rect x="89.4479%" y="133" width="0.3460%" height="15" fill="rgb(245,158,5)" fg:x="36713" fg:w="142"/><text x="89.7409%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (234 instructions, 0.57%)</title><rect x="89.4162%" y="149" width="0.5701%" height="15" fill="rgb(249,208,11)" fg:x="36700" fg:w="234"/><text x="89.7092%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="89.9864%" y="149" width="0.0171%" height="15" fill="rgb(210,39,28)" fg:x="36934" fg:w="7"/><text x="90.2793%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="90.0034%" y="149" width="0.0317%" height="15" fill="rgb(211,56,53)" fg:x="36941" fg:w="13"/><text x="90.2964%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="90.0351%" y="133" width="0.0658%" height="15" fill="rgb(226,201,30)" fg:x="36954" fg:w="27"/><text x="90.3281%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.35%)</title><rect x="90.0351%" y="149" width="0.3460%" height="15" fill="rgb(239,101,34)" fg:x="36954" fg:w="142"/><text x="90.3281%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="90.5272%" y="133" width="0.0658%" height="15" fill="rgb(226,209,5)" fg:x="37156" fg:w="27"/><text x="90.8202%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (175 instructions, 0.43%)</title><rect x="90.3811%" y="149" width="0.4264%" height="15" fill="rgb(250,105,47)" fg:x="37096" fg:w="175"/><text x="90.6740%" y="159.50"></text></g><g><title>ic_cdk::api::call::reply (9,502 instructions, 23.15%)</title><rect x="71.0993%" y="165" width="23.1508%" height="15" fill="rgb(230,72,3)" fg:x="29182" fg:w="9502"/><text x="71.3923%" y="175.50">ic_cdk::api::call::reply</text></g><g><title>sha::__canister_method_principalToAccount::{{closure}} (40,134 instructions, 97.78%)</title><rect x="0.4629%" y="181" width="97.7829%" height="15" fill="rgb(232,218,39)" fg:x="190" fg:w="40134"/><text x="0.7559%" y="191.50">sha::__canister_method_principalToAccount::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.2458%" y="181" width="0.0341%" height="15" fill="rgb(248,166,6)" fg:x="40324" fg:w="14"/><text x="98.5388%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.17%)</title><rect x="98.2823%" y="165" width="0.1681%" height="15" fill="rgb(247,89,20)" fg:x="40339" fg:w="69"/><text x="98.5753%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.17%)</title><rect x="98.4504%" y="165" width="0.1657%" height="15" fill="rgb(248,130,54)" fg:x="40408" fg:w="68"/><text x="98.7434%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.17%)</title><rect x="98.8500%" y="165" width="0.1681%" height="15" fill="rgb(234,196,4)" fg:x="40572" fg:w="69"/><text x="99.1430%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.17%)</title><rect x="99.0181%" y="165" width="0.1681%" height="15" fill="rgb(250,143,31)" fg:x="40641" fg:w="69"/><text x="99.3111%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.17%)</title><rect x="99.1862%" y="165" width="0.1657%" height="15" fill="rgb(211,110,34)" fg:x="40710" fg:w="68"/><text x="99.4792%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (561 instructions, 1.37%)</title><rect x="98.2823%" y="181" width="1.3668%" height="15" fill="rgb(215,124,48)" fg:x="40339" fg:w="561"/><text x="98.5753%" y="191.50"></text></g><g><title>all (41,044 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,46,13)" fg:x="0" fg:w="41044"/><text x="0.2930%" y="223.50"></text></g><g><title>canister_update principalToAccount (41,044 instructions, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,184,25)" fg:x="0" fg:w="41044"/><text x="0.2930%" y="207.50">canister_update principalToAccount</text></g></svg></svg>