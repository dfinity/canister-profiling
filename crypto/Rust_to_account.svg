<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.principalToAccount</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="42522"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="0.0000%" y="197" width="0.1928%" height="15" fill="rgb(240,164,32)" fg:x="0" fg:w="82"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="0.1928%" y="197" width="0.1928%" height="15" fill="rgb(232,46,7)" fg:x="82" fg:w="82"/><text x="0.4858%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="0.3857%" y="165" width="0.1928%" height="15" fill="rgb(229,129,53)" fg:x="164" fg:w="82"/><text x="0.6787%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,153 instructions, 2.71%)</title><rect x="0.3857%" y="181" width="2.7115%" height="15" fill="rgb(234,188,29)" fg:x="164" fg:w="1153"/><text x="0.6787%" y="191.50">i..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="3.0972%" y="165" width="0.1199%" height="15" fill="rgb(246,141,4)" fg:x="1317" fg:w="51"/><text x="3.3902%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="3.2172%" y="149" width="0.0141%" height="15" fill="rgb(229,23,39)" fg:x="1368" fg:w="6"/><text x="3.5101%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.03%)</title><rect x="3.2172%" y="165" width="1.0277%" height="15" fill="rgb(206,12,3)" fg:x="1368" fg:w="437"/><text x="3.5101%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.15%)</title><rect x="4.2449%" y="165" width="0.1505%" height="15" fill="rgb(252,226,20)" fg:x="1805" fg:w="64"/><text x="4.5378%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="4.3954%" y="165" width="0.1435%" height="15" fill="rgb(216,123,35)" fg:x="1869" fg:w="61"/><text x="4.6883%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="4.5388%" y="165" width="0.1435%" height="15" fill="rgb(212,68,40)" fg:x="1930" fg:w="61"/><text x="4.8318%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="4.6823%" y="165" width="0.1435%" height="15" fill="rgb(254,125,32)" fg:x="1991" fg:w="61"/><text x="4.9753%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="4.8257%" y="165" width="0.1435%" height="15" fill="rgb(253,97,22)" fg:x="2052" fg:w="61"/><text x="5.1187%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="4.9692%" y="165" width="0.1199%" height="15" fill="rgb(241,101,14)" fg:x="2113" fg:w="51"/><text x="5.2622%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.22%)</title><rect x="5.0891%" y="165" width="0.2234%" height="15" fill="rgb(238,103,29)" fg:x="2164" fg:w="95"/><text x="5.3821%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.3125%" y="149" width="0.0141%" height="15" fill="rgb(233,195,47)" fg:x="2259" fg:w="6"/><text x="5.6055%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.03%)</title><rect x="5.3125%" y="165" width="1.0277%" height="15" fill="rgb(246,218,30)" fg:x="2259" fg:w="437"/><text x="5.6055%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3402%" y="165" width="0.0447%" height="15" fill="rgb(219,145,47)" fg:x="2696" fg:w="19"/><text x="6.6332%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="6.3849%" y="133" width="0.1928%" height="15" fill="rgb(243,12,26)" fg:x="2715" fg:w="82"/><text x="6.6779%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="6.5778%" y="101" width="0.1576%" height="15" fill="rgb(214,87,16)" fg:x="2797" fg:w="67"/><text x="6.8707%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="6.5778%" y="117" width="0.2258%" height="15" fill="rgb(208,99,42)" fg:x="2797" fg:w="96"/><text x="6.8707%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="6.8035%" y="69" width="0.0259%" height="15" fill="rgb(253,99,2)" fg:x="2893" fg:w="11"/><text x="7.0965%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="6.8294%" y="53" width="0.0823%" height="15" fill="rgb(220,168,23)" fg:x="2904" fg:w="35"/><text x="7.1224%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.15%)</title><rect x="6.8294%" y="69" width="0.1505%" height="15" fill="rgb(242,38,24)" fg:x="2904" fg:w="64"/><text x="7.1224%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.34%)</title><rect x="6.8035%" y="85" width="0.3386%" height="15" fill="rgb(225,182,9)" fg:x="2893" fg:w="144"/><text x="7.0965%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.49%)</title><rect x="6.8035%" y="101" width="0.4939%" height="15" fill="rgb(243,178,37)" fg:x="2893" fg:w="210"/><text x="7.0965%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.52%)</title><rect x="6.8035%" y="117" width="0.5174%" height="15" fill="rgb(232,139,19)" fg:x="2893" fg:w="220"/><text x="7.0965%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 1.06%)</title><rect x="6.5778%" y="133" width="1.0559%" height="15" fill="rgb(225,201,24)" fg:x="2797" fg:w="449"/><text x="6.8707%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.57%)</title><rect x="6.3849%" y="149" width="1.5686%" height="15" fill="rgb(221,47,46)" fg:x="2715" fg:w="667"/><text x="6.6779%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.15%)</title><rect x="7.9535%" y="149" width="0.1505%" height="15" fill="rgb(249,23,13)" fg:x="3382" fg:w="64"/><text x="8.2465%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="8.1040%" y="149" width="0.1435%" height="15" fill="rgb(219,9,5)" fg:x="3446" fg:w="61"/><text x="8.3970%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.12%)</title><rect x="6.3849%" y="165" width="2.1236%" height="15" fill="rgb(254,171,16)" fg:x="2715" fg:w="903"/><text x="6.6779%" y="175.50">b..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.06%)</title><rect x="8.5085%" y="165" width="0.0635%" height="15" fill="rgb(230,171,20)" fg:x="3618" fg:w="27"/><text x="8.8015%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="8.5720%" y="165" width="0.1082%" height="15" fill="rgb(210,71,41)" fg:x="3645" fg:w="46"/><text x="8.8650%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.22%)</title><rect x="8.6802%" y="165" width="0.2234%" height="15" fill="rgb(206,173,20)" fg:x="3691" fg:w="95"/><text x="8.9732%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="8.9036%" y="133" width="0.0141%" height="15" fill="rgb(233,88,34)" fg:x="3786" fg:w="6"/><text x="9.1966%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.03%)</title><rect x="8.9036%" y="149" width="1.0277%" height="15" fill="rgb(223,209,46)" fg:x="3786" fg:w="437"/><text x="9.1966%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="9.9313%" y="149" width="0.0447%" height="15" fill="rgb(250,43,18)" fg:x="4223" fg:w="19"/><text x="10.2243%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="9.9760%" y="117" width="0.1928%" height="15" fill="rgb(208,13,10)" fg:x="4242" fg:w="82"/><text x="10.2690%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="10.1689%" y="85" width="0.1576%" height="15" fill="rgb(212,200,36)" fg:x="4324" fg:w="67"/><text x="10.4618%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="10.1689%" y="101" width="0.2258%" height="15" fill="rgb(225,90,30)" fg:x="4324" fg:w="96"/><text x="10.4618%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="10.3946%" y="53" width="0.0259%" height="15" fill="rgb(236,182,39)" fg:x="4420" fg:w="11"/><text x="10.6876%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="10.4205%" y="37" width="0.0823%" height="15" fill="rgb(212,144,35)" fg:x="4431" fg:w="35"/><text x="10.7135%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.15%)</title><rect x="10.4205%" y="53" width="0.1505%" height="15" fill="rgb(228,63,44)" fg:x="4431" fg:w="64"/><text x="10.7135%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.34%)</title><rect x="10.3946%" y="69" width="0.3386%" height="15" fill="rgb(228,109,6)" fg:x="4420" fg:w="144"/><text x="10.6876%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.49%)</title><rect x="10.3946%" y="85" width="0.4939%" height="15" fill="rgb(238,117,24)" fg:x="4420" fg:w="210"/><text x="10.6876%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.52%)</title><rect x="10.3946%" y="101" width="0.5174%" height="15" fill="rgb(242,26,26)" fg:x="4420" fg:w="220"/><text x="10.6876%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.06%)</title><rect x="10.1689%" y="117" width="1.0559%" height="15" fill="rgb(221,92,48)" fg:x="4324" fg:w="449"/><text x="10.4618%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.57%)</title><rect x="9.9760%" y="133" width="1.5686%" height="15" fill="rgb(209,209,32)" fg:x="4242" fg:w="667"/><text x="10.2690%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.15%)</title><rect x="11.5446%" y="133" width="0.1505%" height="15" fill="rgb(221,70,22)" fg:x="4909" fg:w="64"/><text x="11.8376%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="11.6951%" y="133" width="0.1435%" height="15" fill="rgb(248,145,5)" fg:x="4973" fg:w="61"/><text x="11.9881%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.12%)</title><rect x="9.9760%" y="149" width="2.1236%" height="15" fill="rgb(226,116,26)" fg:x="4242" fg:w="903"/><text x="10.2690%" y="159.50">b..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="12.0996%" y="133" width="0.1199%" height="15" fill="rgb(244,5,17)" fg:x="5145" fg:w="51"/><text x="12.3926%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.28%)</title><rect x="12.2196%" y="133" width="0.2775%" height="15" fill="rgb(252,159,33)" fg:x="5196" fg:w="118"/><text x="12.5125%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="12.4971%" y="133" width="0.1082%" height="15" fill="rgb(206,71,0)" fg:x="5314" fg:w="46"/><text x="12.7900%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (288 instructions, 0.68%)</title><rect x="12.0996%" y="149" width="0.6773%" height="15" fill="rgb(233,118,54)" fg:x="5145" fg:w="288"/><text x="12.3926%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="12.7769%" y="149" width="0.1928%" height="15" fill="rgb(234,83,48)" fg:x="5433" fg:w="82"/><text x="13.0699%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,915 instructions, 4.50%)</title><rect x="8.9036%" y="165" width="4.5036%" height="15" fill="rgb(228,3,54)" fg:x="3786" fg:w="1915"/><text x="9.1966%" y="175.50">binr..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="13.4072%" y="165" width="0.1082%" height="15" fill="rgb(226,155,13)" fg:x="5701" fg:w="46"/><text x="13.7001%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="13.5154%" y="165" width="0.0353%" height="15" fill="rgb(241,28,37)" fg:x="5747" fg:w="15"/><text x="13.8083%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="13.5506%" y="165" width="0.0188%" height="15" fill="rgb(233,93,10)" fg:x="5762" fg:w="8"/><text x="13.8436%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="13.5694%" y="149" width="0.1928%" height="15" fill="rgb(225,113,19)" fg:x="5770" fg:w="82"/><text x="13.8624%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.42%)</title><rect x="13.5694%" y="165" width="0.4186%" height="15" fill="rgb(241,2,18)" fg:x="5770" fg:w="178"/><text x="13.8624%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="13.9881%" y="133" width="0.1928%" height="15" fill="rgb(228,207,21)" fg:x="5948" fg:w="82"/><text x="14.2810%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="13.9881%" y="149" width="0.2893%" height="15" fill="rgb(213,211,35)" fg:x="5948" fg:w="123"/><text x="14.2810%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.49%)</title><rect x="13.9881%" y="165" width="0.4939%" height="15" fill="rgb(209,83,10)" fg:x="5948" fg:w="210"/><text x="14.2810%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="14.4819%" y="165" width="0.1928%" height="15" fill="rgb(209,164,1)" fg:x="6158" fg:w="82"/><text x="14.7749%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="14.6748%" y="165" width="0.2093%" height="15" fill="rgb(213,184,43)" fg:x="6240" fg:w="89"/><text x="14.9677%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="14.8841%" y="165" width="0.1928%" height="15" fill="rgb(231,61,34)" fg:x="6329" fg:w="82"/><text x="15.1770%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="15.0769%" y="165" width="0.1928%" height="15" fill="rgb(235,75,3)" fg:x="6411" fg:w="82"/><text x="15.3699%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="15.2697%" y="165" width="0.0118%" height="15" fill="rgb(220,106,47)" fg:x="6493" fg:w="5"/><text x="15.5627%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="15.2815%" y="165" width="0.2093%" height="15" fill="rgb(210,196,33)" fg:x="6498" fg:w="89"/><text x="15.5745%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.92%)</title><rect x="15.4908%" y="165" width="0.9219%" height="15" fill="rgb(229,154,42)" fg:x="6587" fg:w="392"/><text x="15.7838%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.92%)</title><rect x="16.4127%" y="165" width="0.9219%" height="15" fill="rgb(228,114,26)" fg:x="6979" fg:w="392"/><text x="16.7056%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.19%)</title><rect x="17.3346%" y="165" width="1.1853%" height="15" fill="rgb(208,144,1)" fg:x="7371" fg:w="504"/><text x="17.6275%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,802 instructions, 18.35%)</title><rect x="3.0972%" y="181" width="18.3481%" height="15" fill="rgb(239,112,37)" fg:x="1317" fg:w="7802"/><text x="3.3902%" y="191.50">candid::de::IDLDeseriali..</text></g><g><title>memcpy (408 instructions, 0.96%)</title><rect x="21.4454%" y="181" width="0.9595%" height="15" fill="rgb(210,96,50)" fg:x="9119" fg:w="408"/><text x="21.7383%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.96%)</title><rect x="22.4049%" y="181" width="0.9595%" height="15" fill="rgb(222,178,2)" fg:x="9527" fg:w="408"/><text x="22.6978%" y="191.50"></text></g><g><title>candid::types::internal::find_type (103 instructions, 0.24%)</title><rect x="23.3644%" y="165" width="0.2422%" height="15" fill="rgb(226,74,18)" fg:x="9935" fg:w="103"/><text x="23.6573%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="23.6066%" y="165" width="0.1928%" height="15" fill="rgb(225,67,54)" fg:x="10038" fg:w="82"/><text x="23.8996%" y="175.50"></text></g><g><title>candid::types::internal::env_add (185 instructions, 0.44%)</title><rect x="23.7994%" y="165" width="0.4351%" height="15" fill="rgb(251,92,32)" fg:x="10120" fg:w="185"/><text x="24.0924%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="24.2345%" y="165" width="0.1928%" height="15" fill="rgb(228,149,22)" fg:x="10305" fg:w="82"/><text x="24.5275%" y="175.50"></text></g><g><title>memcmp (537 instructions, 1.26%)</title><rect x="24.4274%" y="149" width="1.2629%" height="15" fill="rgb(243,54,13)" fg:x="10387" fg:w="537"/><text x="24.7203%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="25.6902%" y="133" width="0.2093%" height="15" fill="rgb(243,180,28)" fg:x="10924" fg:w="89"/><text x="25.9832%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.38%)</title><rect x="25.6902%" y="149" width="0.3763%" height="15" fill="rgb(208,167,24)" fg:x="10924" fg:w="160"/><text x="25.9832%" y="159.50"></text></g><g><title>candid::types::internal::env_add (917 instructions, 2.16%)</title><rect x="24.4274%" y="165" width="2.1565%" height="15" fill="rgb(245,73,45)" fg:x="10387" fg:w="917"/><text x="24.7203%" y="175.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="26.5839%" y="149" width="0.0800%" height="15" fill="rgb(237,203,48)" fg:x="11304" fg:w="34"/><text x="26.8769%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="26.6638%" y="149" width="0.0800%" height="15" fill="rgb(211,197,16)" fg:x="11338" fg:w="34"/><text x="26.9568%" y="159.50"></text></g><g><title>candid::types::internal::env_id (327 instructions, 0.77%)</title><rect x="26.5839%" y="165" width="0.7690%" height="15" fill="rgb(243,99,51)" fg:x="11304" fg:w="327"/><text x="26.8769%" y="175.50"></text></g><g><title>candid::types::CandidType::ty (1,815 instructions, 4.27%)</title><rect x="23.3644%" y="181" width="4.2684%" height="15" fill="rgb(215,123,29)" fg:x="9935" fg:w="1815"/><text x="23.6573%" y="191.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.12%)</title><rect x="27.6328%" y="165" width="0.1152%" height="15" fill="rgb(239,186,37)" fg:x="11750" fg:w="49"/><text x="27.9257%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="27.7480%" y="133" width="0.0635%" height="15" fill="rgb(252,136,39)" fg:x="11799" fg:w="27"/><text x="28.0410%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.33%)</title><rect x="27.7480%" y="149" width="0.3339%" height="15" fill="rgb(223,213,32)" fg:x="11799" fg:w="142"/><text x="28.0410%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="28.2489%" y="133" width="0.0635%" height="15" fill="rgb(233,115,5)" fg:x="12012" fg:w="27"/><text x="28.5419%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.33%)</title><rect x="28.2489%" y="149" width="0.3339%" height="15" fill="rgb(207,226,44)" fg:x="12012" fg:w="142"/><text x="28.5419%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (426 instructions, 1.00%)</title><rect x="27.7480%" y="165" width="1.0018%" height="15" fill="rgb(208,126,0)" fg:x="11799" fg:w="426"/><text x="28.0410%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.09%)</title><rect x="28.7498%" y="149" width="0.0870%" height="15" fill="rgb(244,66,21)" fg:x="12225" fg:w="37"/><text x="29.0428%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.09%)</title><rect x="28.8368%" y="149" width="0.0870%" height="15" fill="rgb(222,97,12)" fg:x="12262" fg:w="37"/><text x="29.1298%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="28.9239%" y="149" width="0.0800%" height="15" fill="rgb(219,213,19)" fg:x="12299" fg:w="34"/><text x="29.2168%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1502 (34 instructions, 0.08%)</title><rect x="29.0038%" y="149" width="0.0800%" height="15" fill="rgb(252,169,30)" fg:x="12333" fg:w="34"/><text x="29.2968%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="29.0838%" y="149" width="0.1928%" height="15" fill="rgb(206,32,51)" fg:x="12367" fg:w="82"/><text x="29.3767%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.12%)</title><rect x="29.2766%" y="149" width="0.1199%" height="15" fill="rgb(250,172,42)" fg:x="12449" fg:w="51"/><text x="29.5696%" y="159.50"></text></g><g><title>binread::binary_template::write_named (61 instructions, 0.14%)</title><rect x="29.3965%" y="133" width="0.1435%" height="15" fill="rgb(209,34,43)" fg:x="12500" fg:w="61"/><text x="29.6895%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (140 instructions, 0.33%)</title><rect x="29.3965%" y="149" width="0.3292%" height="15" fill="rgb(223,11,35)" fg:x="12500" fg:w="140"/><text x="29.6895%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.22%)</title><rect x="29.7258%" y="149" width="0.2234%" height="15" fill="rgb(251,219,26)" fg:x="12640" fg:w="95"/><text x="30.0188%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="29.9492%" y="133" width="0.0141%" height="15" fill="rgb(231,119,3)" fg:x="12735" fg:w="6"/><text x="30.2422%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.03%)</title><rect x="29.9492%" y="149" width="1.0277%" height="15" fill="rgb(216,97,11)" fg:x="12735" fg:w="437"/><text x="30.2422%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="30.9769%" y="117" width="0.1928%" height="15" fill="rgb(223,59,9)" fg:x="13172" fg:w="82"/><text x="31.2699%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.16%)</title><rect x="31.1697%" y="85" width="0.1576%" height="15" fill="rgb(233,93,31)" fg:x="13254" fg:w="67"/><text x="31.4627%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.23%)</title><rect x="31.1697%" y="101" width="0.2258%" height="15" fill="rgb(239,81,33)" fg:x="13254" fg:w="96"/><text x="31.4627%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="31.3955%" y="53" width="0.0259%" height="15" fill="rgb(213,120,34)" fg:x="13350" fg:w="11"/><text x="31.6885%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="31.4214%" y="37" width="0.0823%" height="15" fill="rgb(243,49,53)" fg:x="13361" fg:w="35"/><text x="31.7144%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.15%)</title><rect x="31.4214%" y="53" width="0.1505%" height="15" fill="rgb(247,216,33)" fg:x="13361" fg:w="64"/><text x="31.7144%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.34%)</title><rect x="31.3955%" y="69" width="0.3386%" height="15" fill="rgb(226,26,14)" fg:x="13350" fg:w="144"/><text x="31.6885%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.49%)</title><rect x="31.3955%" y="85" width="0.4939%" height="15" fill="rgb(215,49,53)" fg:x="13350" fg:w="210"/><text x="31.6885%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.52%)</title><rect x="31.3955%" y="101" width="0.5174%" height="15" fill="rgb(245,162,40)" fg:x="13350" fg:w="220"/><text x="31.6885%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.06%)</title><rect x="31.1697%" y="117" width="1.0559%" height="15" fill="rgb(229,68,17)" fg:x="13254" fg:w="449"/><text x="31.4627%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.57%)</title><rect x="30.9769%" y="133" width="1.5686%" height="15" fill="rgb(213,182,10)" fg:x="13172" fg:w="667"/><text x="31.2699%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.15%)</title><rect x="32.5455%" y="133" width="0.1505%" height="15" fill="rgb(245,125,30)" fg:x="13839" fg:w="64"/><text x="32.8385%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="32.6960%" y="133" width="0.1435%" height="15" fill="rgb(232,202,2)" fg:x="13903" fg:w="61"/><text x="32.9890%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.12%)</title><rect x="30.9769%" y="149" width="2.1236%" height="15" fill="rgb(237,140,51)" fg:x="13172" fg:w="903"/><text x="31.2699%" y="159.50">b..</text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="33.1005%" y="133" width="0.1435%" height="15" fill="rgb(236,157,25)" fg:x="14075" fg:w="61"/><text x="33.3935%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 instructions, 0.28%)</title><rect x="33.1005%" y="149" width="0.2846%" height="15" fill="rgb(219,209,0)" fg:x="14075" fg:w="121"/><text x="33.3935%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="33.3851%" y="149" width="0.1928%" height="15" fill="rgb(240,116,54)" fg:x="14196" fg:w="82"/><text x="33.6780%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="33.5779%" y="133" width="0.1435%" height="15" fill="rgb(216,10,36)" fg:x="14278" fg:w="61"/><text x="33.8709%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="33.8625%" y="133" width="0.1435%" height="15" fill="rgb(222,72,44)" fg:x="14399" fg:w="61"/><text x="34.1554%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="34.1470%" y="133" width="0.1435%" height="15" fill="rgb(232,159,9)" fg:x="14520" fg:w="61"/><text x="34.4400%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="34.4316%" y="133" width="0.1435%" height="15" fill="rgb(210,39,32)" fg:x="14641" fg:w="61"/><text x="34.7246%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="34.7161%" y="133" width="0.1435%" height="15" fill="rgb(216,194,45)" fg:x="14762" fg:w="61"/><text x="35.0091%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="35.0007%" y="133" width="0.1435%" height="15" fill="rgb(218,18,35)" fg:x="14883" fg:w="61"/><text x="35.2937%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="35.2853%" y="133" width="0.1435%" height="15" fill="rgb(207,83,51)" fg:x="15004" fg:w="61"/><text x="35.5782%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="35.5698%" y="133" width="0.1435%" height="15" fill="rgb(225,63,43)" fg:x="15125" fg:w="61"/><text x="35.8628%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (968 instructions, 2.28%)</title><rect x="33.5779%" y="149" width="2.2765%" height="15" fill="rgb(207,57,36)" fg:x="14278" fg:w="968"/><text x="33.8709%" y="159.50">&lt;..</text></g><g><title>__rust_realloc (133 instructions, 0.31%)</title><rect x="35.8544%" y="117" width="0.3128%" height="15" fill="rgb(216,99,33)" fg:x="15246" fg:w="133"/><text x="36.1474%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (190 instructions, 0.45%)</title><rect x="35.8544%" y="133" width="0.4468%" height="15" fill="rgb(225,42,16)" fg:x="15246" fg:w="190"/><text x="36.1474%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (276 instructions, 0.65%)</title><rect x="35.8544%" y="149" width="0.6491%" height="15" fill="rgb(220,201,45)" fg:x="15246" fg:w="276"/><text x="36.1474%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="36.5035%" y="133" width="0.1435%" height="15" fill="rgb(225,33,4)" fg:x="15522" fg:w="61"/><text x="36.7964%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="36.7880%" y="133" width="0.1435%" height="15" fill="rgb(224,33,50)" fg:x="15643" fg:w="61"/><text x="37.0810%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="37.0726%" y="133" width="0.1435%" height="15" fill="rgb(246,198,51)" fg:x="15764" fg:w="61"/><text x="37.3655%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="37.3571%" y="133" width="0.1435%" height="15" fill="rgb(205,22,4)" fg:x="15885" fg:w="61"/><text x="37.6501%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="37.6417%" y="133" width="0.1435%" height="15" fill="rgb(206,3,8)" fg:x="16006" fg:w="61"/><text x="37.9347%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="37.9262%" y="133" width="0.1435%" height="15" fill="rgb(251,23,15)" fg:x="16127" fg:w="61"/><text x="38.2192%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (61 instructions, 0.14%)</title><rect x="38.2108%" y="133" width="0.1435%" height="15" fill="rgb(252,88,28)" fg:x="16248" fg:w="61"/><text x="38.5038%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (847 instructions, 1.99%)</title><rect x="36.5035%" y="149" width="1.9919%" height="15" fill="rgb(212,127,14)" fg:x="15522" fg:w="847"/><text x="36.7964%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 instructions, 0.08%)</title><rect x="38.4954%" y="149" width="0.0753%" height="15" fill="rgb(247,145,37)" fg:x="16369" fg:w="32"/><text x="38.7883%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.11%)</title><rect x="38.5706%" y="149" width="0.1082%" height="15" fill="rgb(209,117,53)" fg:x="16401" fg:w="46"/><text x="38.8636%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.07%)</title><rect x="38.6788%" y="149" width="0.0729%" height="15" fill="rgb(212,90,42)" fg:x="16447" fg:w="31"/><text x="38.9718%" y="159.50"></text></g><g><title>__rust_realloc (77 instructions, 0.18%)</title><rect x="38.7517%" y="117" width="0.1811%" height="15" fill="rgb(218,164,37)" fg:x="16478" fg:w="77"/><text x="39.0447%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.32%)</title><rect x="38.7517%" y="133" width="0.3151%" height="15" fill="rgb(246,65,34)" fg:x="16478" fg:w="134"/><text x="39.0447%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (220 instructions, 0.52%)</title><rect x="38.7517%" y="149" width="0.5174%" height="15" fill="rgb(231,100,33)" fg:x="16478" fg:w="220"/><text x="39.0447%" y="159.50"></text></g><g><title>memcpy (220 instructions, 0.52%)</title><rect x="39.2691%" y="149" width="0.5174%" height="15" fill="rgb(228,126,14)" fg:x="16698" fg:w="220"/><text x="39.5621%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.40%)</title><rect x="39.7865%" y="149" width="0.4021%" height="15" fill="rgb(215,173,21)" fg:x="16918" fg:w="171"/><text x="40.0794%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="40.1886%" y="149" width="0.2093%" height="15" fill="rgb(210,6,40)" fg:x="17089" fg:w="89"/><text x="40.4816%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="40.3979%" y="133" width="0.1435%" height="15" fill="rgb(212,48,18)" fg:x="17178" fg:w="61"/><text x="40.6909%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (102 instructions, 0.24%)</title><rect x="40.3979%" y="149" width="0.2399%" height="15" fill="rgb(230,214,11)" fg:x="17178" fg:w="102"/><text x="40.6909%" y="159.50"></text></g><g><title>&lt;ic_principal::Principal as serde::de::Deserialize&gt;::deserialize (6,287 instructions, 14.79%)</title><rect x="28.7498%" y="165" width="14.7853%" height="15" fill="rgb(254,105,39)" fg:x="12225" fg:w="6287"/><text x="29.0428%" y="175.50">&lt;ic_principal::Prin..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="43.5351%" y="165" width="0.0329%" height="15" fill="rgb(245,158,5)" fg:x="18512" fg:w="14"/><text x="43.8281%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="43.5680%" y="165" width="0.0329%" height="15" fill="rgb(249,208,11)" fg:x="18526" fg:w="14"/><text x="43.8610%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="43.6010%" y="165" width="0.0329%" height="15" fill="rgb(210,39,28)" fg:x="18540" fg:w="14"/><text x="43.8939%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (7,060 instructions, 16.60%)</title><rect x="27.6328%" y="181" width="16.6032%" height="15" fill="rgb(211,56,53)" fg:x="11750" fg:w="7060"/><text x="27.9257%" y="191.50">candid::de::IDLDeseria..</text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.09%)</title><rect x="44.2359%" y="181" width="0.0870%" height="15" fill="rgb(226,201,30)" fg:x="18810" fg:w="37"/><text x="44.5289%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="44.3229%" y="165" width="0.0188%" height="15" fill="rgb(239,101,34)" fg:x="18847" fg:w="8"/><text x="44.6159%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="44.3418%" y="149" width="0.0635%" height="15" fill="rgb(226,209,5)" fg:x="18855" fg:w="27"/><text x="44.6347%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="44.4052%" y="149" width="0.0635%" height="15" fill="rgb(250,105,47)" fg:x="18882" fg:w="27"/><text x="44.6982%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.46%)</title><rect x="44.3418%" y="165" width="0.4633%" height="15" fill="rgb(230,72,3)" fg:x="18855" fg:w="197"/><text x="44.6347%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="44.8050%" y="133" width="0.0635%" height="15" fill="rgb(232,218,39)" fg:x="19052" fg:w="27"/><text x="45.0980%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="44.8685%" y="133" width="0.0635%" height="15" fill="rgb(248,166,6)" fg:x="19079" fg:w="27"/><text x="45.1615%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="44.9320%" y="133" width="0.1576%" height="15" fill="rgb(247,89,20)" fg:x="19106" fg:w="67"/><text x="45.2250%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 0.57%)</title><rect x="44.8050%" y="149" width="0.5691%" height="15" fill="rgb(248,130,54)" fg:x="19052" fg:w="242"/><text x="45.0980%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (313 instructions, 0.74%)</title><rect x="44.8050%" y="165" width="0.7361%" height="15" fill="rgb(234,196,4)" fg:x="19052" fg:w="313"/><text x="45.0980%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="45.5411%" y="165" width="0.0329%" height="15" fill="rgb(250,143,31)" fg:x="19365" fg:w="14"/><text x="45.8341%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (622 instructions, 1.46%)</title><rect x="44.3229%" y="181" width="1.4628%" height="15" fill="rgb(211,110,34)" fg:x="18847" fg:w="622"/><text x="44.6159%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="45.7857%" y="165" width="0.1552%" height="15" fill="rgb(215,124,48)" fg:x="19469" fg:w="66"/><text x="46.0787%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="45.9409%" y="165" width="0.1576%" height="15" fill="rgb(216,46,13)" fg:x="19535" fg:w="67"/><text x="46.2339%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (226 instructions, 0.53%)</title><rect x="45.7857%" y="181" width="0.5315%" height="15" fill="rgb(205,184,25)" fg:x="19469" fg:w="226"/><text x="46.0787%" y="191.50"></text></g><g><title>memset (240 instructions, 0.56%)</title><rect x="46.3172%" y="181" width="0.5644%" height="15" fill="rgb(228,1,10)" fg:x="19695" fg:w="240"/><text x="46.6102%" y="191.50"></text></g><g><title>memcpy (220 instructions, 0.52%)</title><rect x="46.8816%" y="181" width="0.5174%" height="15" fill="rgb(213,116,27)" fg:x="19935" fg:w="220"/><text x="47.1746%" y="191.50"></text></g><g><title>memcpy (504 instructions, 1.19%)</title><rect x="47.3990%" y="181" width="1.1853%" height="15" fill="rgb(241,95,50)" fg:x="20155" fg:w="504"/><text x="47.6920%" y="191.50"></text></g><g><title>memset (64 instructions, 0.15%)</title><rect x="48.5843%" y="165" width="0.1505%" height="15" fill="rgb(238,48,32)" fg:x="20659" fg:w="64"/><text x="48.8772%" y="175.50"></text></g><g><title>sha2::sha256::compress256 (4,987 instructions, 11.73%)</title><rect x="48.7348%" y="165" width="11.7280%" height="15" fill="rgb(235,113,49)" fg:x="20723" fg:w="4987"/><text x="49.0277%" y="175.50">sha2::sha256::..</text></g><g><title>sha2::sha256::compress256 (4,987 instructions, 11.73%)</title><rect x="60.4628%" y="165" width="11.7280%" height="15" fill="rgb(205,127,43)" fg:x="25710" fg:w="4987"/><text x="60.7558%" y="175.50">sha2::sha256::..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (10,382 instructions, 24.42%)</title><rect x="48.5843%" y="181" width="24.4156%" height="15" fill="rgb(250,162,2)" fg:x="20659" fg:w="10382"/><text x="48.8772%" y="191.50">&lt;sha2::core_api::Sha256VarCore as..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="72.9999%" y="181" width="0.1928%" height="15" fill="rgb(220,13,41)" fg:x="31041" fg:w="82"/><text x="73.2928%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="73.1927%" y="133" width="0.2093%" height="15" fill="rgb(249,221,25)" fg:x="31123" fg:w="89"/><text x="73.4857%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.38%)</title><rect x="73.1927%" y="149" width="0.3763%" height="15" fill="rgb(215,208,19)" fg:x="31123" fg:w="160"/><text x="73.4857%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="73.5690%" y="133" width="0.0635%" height="15" fill="rgb(236,175,2)" fg:x="31283" fg:w="27"/><text x="73.8619%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.34%)</title><rect x="73.5690%" y="149" width="0.3386%" height="15" fill="rgb(241,52,2)" fg:x="31283" fg:w="144"/><text x="73.8619%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (385 instructions, 0.91%)</title><rect x="73.1927%" y="165" width="0.9054%" height="15" fill="rgb(248,140,14)" fg:x="31123" fg:w="385"/><text x="73.4857%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="74.0981%" y="165" width="0.0329%" height="15" fill="rgb(253,22,42)" fg:x="31508" fg:w="14"/><text x="74.3911%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="74.1310%" y="149" width="0.0635%" height="15" fill="rgb(234,61,47)" fg:x="31522" fg:w="27"/><text x="74.4240%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="74.1945%" y="149" width="0.0635%" height="15" fill="rgb(208,226,15)" fg:x="31549" fg:w="27"/><text x="74.4875%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="74.2580%" y="149" width="0.1576%" height="15" fill="rgb(217,221,4)" fg:x="31576" fg:w="67"/><text x="74.5510%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 0.57%)</title><rect x="74.1310%" y="165" width="0.5691%" height="15" fill="rgb(212,174,34)" fg:x="31522" fg:w="242"/><text x="74.4240%" y="175.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.06%)</title><rect x="74.7002%" y="149" width="0.0564%" height="15" fill="rgb(253,83,4)" fg:x="31764" fg:w="24"/><text x="74.9931%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="74.7566%" y="149" width="0.1928%" height="15" fill="rgb(250,195,49)" fg:x="31788" fg:w="82"/><text x="75.0496%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="74.9494%" y="133" width="0.1928%" height="15" fill="rgb(241,192,25)" fg:x="31870" fg:w="82"/><text x="75.2424%" y="143.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.39%)</title><rect x="74.9494%" y="149" width="0.3904%" height="15" fill="rgb(208,124,10)" fg:x="31870" fg:w="166"/><text x="75.2424%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="75.3398%" y="149" width="0.1928%" height="15" fill="rgb(222,33,0)" fg:x="32036" fg:w="82"/><text x="75.6328%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="75.5327%" y="149" width="0.1928%" height="15" fill="rgb(234,209,28)" fg:x="32118" fg:w="82"/><text x="75.8256%" y="159.50"></text></g><g><title>memcmp (675 instructions, 1.59%)</title><rect x="75.7255%" y="133" width="1.5874%" height="15" fill="rgb(224,11,23)" fg:x="32200" fg:w="675"/><text x="76.0185%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.21%)</title><rect x="77.3129%" y="117" width="0.2093%" height="15" fill="rgb(232,99,1)" fg:x="32875" fg:w="89"/><text x="77.6059%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.38%)</title><rect x="77.3129%" y="133" width="0.3763%" height="15" fill="rgb(237,95,45)" fg:x="32875" fg:w="160"/><text x="77.6059%" y="143.50"></text></g><g><title>candid::types::internal::env_add (1,014 instructions, 2.38%)</title><rect x="75.7255%" y="149" width="2.3846%" height="15" fill="rgb(208,109,11)" fg:x="32200" fg:w="1014"/><text x="76.0185%" y="159.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.26%)</title><rect x="78.1102%" y="133" width="0.2610%" height="15" fill="rgb(216,190,48)" fg:x="33214" fg:w="111"/><text x="78.4031%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="78.3712%" y="133" width="0.0329%" height="15" fill="rgb(251,171,36)" fg:x="33325" fg:w="14"/><text x="78.6642%" y="143.50"></text></g><g><title>candid::types::internal::env_id (262 instructions, 0.62%)</title><rect x="78.1102%" y="149" width="0.6162%" height="15" fill="rgb(230,62,22)" fg:x="33214" fg:w="262"/><text x="78.4031%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (1,853 instructions, 4.36%)</title><rect x="74.7002%" y="165" width="4.3577%" height="15" fill="rgb(225,114,35)" fg:x="31764" fg:w="1853"/><text x="74.9931%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="79.0579%" y="133" width="0.1928%" height="15" fill="rgb(215,118,42)" fg:x="33617" fg:w="82"/><text x="79.3509%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="79.0579%" y="149" width="0.2893%" height="15" fill="rgb(243,119,21)" fg:x="33617" fg:w="123"/><text x="79.3509%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.49%)</title><rect x="79.0579%" y="165" width="0.4939%" height="15" fill="rgb(252,177,53)" fg:x="33617" fg:w="210"/><text x="79.3509%" y="175.50"></text></g><g><title>candid::types::internal::is_primitive (38 instructions, 0.09%)</title><rect x="79.5518%" y="149" width="0.0894%" height="15" fill="rgb(237,209,29)" fg:x="33827" fg:w="38"/><text x="79.8447%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="79.6411%" y="149" width="0.1928%" height="15" fill="rgb(212,65,23)" fg:x="33865" fg:w="82"/><text x="79.9341%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="79.8340%" y="117" width="0.1928%" height="15" fill="rgb(230,222,46)" fg:x="33947" fg:w="82"/><text x="80.1269%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="79.8340%" y="133" width="0.2893%" height="15" fill="rgb(215,135,32)" fg:x="33947" fg:w="123"/><text x="80.1269%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (199 instructions, 0.47%)</title><rect x="79.8340%" y="149" width="0.4680%" height="15" fill="rgb(246,101,22)" fg:x="33947" fg:w="199"/><text x="80.1269%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (34 instructions, 0.08%)</title><rect x="80.3020%" y="133" width="0.0800%" height="15" fill="rgb(206,107,13)" fg:x="34146" fg:w="34"/><text x="80.5949%" y="143.50"></text></g><g><title>candid::types::internal::is_primitive (31 instructions, 0.07%)</title><rect x="80.3819%" y="133" width="0.0729%" height="15" fill="rgb(250,100,44)" fg:x="34180" fg:w="31"/><text x="80.6749%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="80.4548%" y="133" width="0.0329%" height="15" fill="rgb(231,147,38)" fg:x="34211" fg:w="14"/><text x="80.7478%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (202 instructions, 0.48%)</title><rect x="80.3020%" y="149" width="0.4750%" height="15" fill="rgb(229,8,40)" fg:x="34146" fg:w="202"/><text x="80.5949%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="80.7770%" y="101" width="0.1928%" height="15" fill="rgb(221,135,30)" fg:x="34348" fg:w="82"/><text x="81.0700%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="80.7770%" y="117" width="0.2893%" height="15" fill="rgb(249,193,18)" fg:x="34348" fg:w="123"/><text x="81.0700%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.48%)</title><rect x="80.7770%" y="133" width="0.4845%" height="15" fill="rgb(209,133,39)" fg:x="34348" fg:w="206"/><text x="81.0700%" y="143.50"></text></g><g><title>leb128::write::signed (260 instructions, 0.61%)</title><rect x="80.7770%" y="149" width="0.6114%" height="15" fill="rgb(232,100,14)" fg:x="34348" fg:w="260"/><text x="81.0700%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::encode (68 instructions, 0.16%)</title><rect x="81.3885%" y="149" width="0.1599%" height="15" fill="rgb(224,185,1)" fg:x="34608" fg:w="68"/><text x="81.6814%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="81.5484%" y="149" width="0.0329%" height="15" fill="rgb(223,139,8)" fg:x="34676" fg:w="14"/><text x="81.8413%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (1,126 instructions, 2.65%)</title><rect x="79.5518%" y="165" width="2.6480%" height="15" fill="rgb(232,213,38)" fg:x="33827" fg:w="1126"/><text x="79.8447%" y="175.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="82.1998%" y="165" width="0.0329%" height="15" fill="rgb(207,94,22)" fg:x="34953" fg:w="14"/><text x="82.4928%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="82.2327%" y="133" width="0.1928%" height="15" fill="rgb(219,183,54)" fg:x="34967" fg:w="82"/><text x="82.5257%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="82.2327%" y="149" width="0.2893%" height="15" fill="rgb(216,185,54)" fg:x="34967" fg:w="123"/><text x="82.5257%" y="159.50"></text></g><g><title>__rust_realloc (133 instructions, 0.31%)</title><rect x="82.7172%" y="133" width="0.3128%" height="15" fill="rgb(254,217,39)" fg:x="35173" fg:w="133"/><text x="83.0102%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (176 instructions, 0.41%)</title><rect x="82.7172%" y="149" width="0.4139%" height="15" fill="rgb(240,178,23)" fg:x="35173" fg:w="176"/><text x="83.0102%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (468 instructions, 1.10%)</title><rect x="82.2327%" y="165" width="1.1006%" height="15" fill="rgb(218,11,47)" fg:x="34967" fg:w="468"/><text x="82.5257%" y="175.50"></text></g><g><title>memcpy (289 instructions, 0.68%)</title><rect x="83.3333%" y="165" width="0.6796%" height="15" fill="rgb(218,51,51)" fg:x="35435" fg:w="289"/><text x="83.6263%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="84.0130%" y="149" width="0.0635%" height="15" fill="rgb(238,126,27)" fg:x="35724" fg:w="27"/><text x="84.3060%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.33%)</title><rect x="84.0130%" y="165" width="0.3339%" height="15" fill="rgb(249,202,22)" fg:x="35724" fg:w="142"/><text x="84.3060%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.22%)</title><rect x="84.3469%" y="165" width="1.2182%" height="15" fill="rgb(254,195,49)" fg:x="35866" fg:w="518"/><text x="84.6399%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="85.5651%" y="133" width="0.1928%" height="15" fill="rgb(208,123,14)" fg:x="36384" fg:w="82"/><text x="85.8581%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="85.5651%" y="149" width="0.2893%" height="15" fill="rgb(224,200,8)" fg:x="36384" fg:w="123"/><text x="85.8581%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.48%)</title><rect x="85.5651%" y="165" width="0.4845%" height="15" fill="rgb(217,61,36)" fg:x="36384" fg:w="206"/><text x="85.8581%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="86.0496%" y="165" width="0.1928%" height="15" fill="rgb(206,35,45)" fg:x="36590" fg:w="82"/><text x="86.3425%" y="175.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="86.2424%" y="165" width="0.1199%" height="15" fill="rgb(217,65,33)" fg:x="36672" fg:w="51"/><text x="86.5354%" y="175.50"></text></g><g><title>memcpy (51 instructions, 0.12%)</title><rect x="86.3624%" y="165" width="0.1199%" height="15" fill="rgb(222,158,48)" fg:x="36723" fg:w="51"/><text x="86.6553%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="86.4823%" y="165" width="0.1435%" height="15" fill="rgb(254,2,54)" fg:x="36774" fg:w="61"/><text x="86.7753%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (111 instructions, 0.26%)</title><rect x="86.6257%" y="149" width="0.2610%" height="15" fill="rgb(250,143,38)" fg:x="36835" fg:w="111"/><text x="86.9187%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.19%)</title><rect x="86.8868%" y="101" width="0.1928%" height="15" fill="rgb(248,25,0)" fg:x="36946" fg:w="82"/><text x="87.1798%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.29%)</title><rect x="86.8868%" y="117" width="0.2893%" height="15" fill="rgb(206,152,27)" fg:x="36946" fg:w="123"/><text x="87.1798%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.48%)</title><rect x="86.8868%" y="133" width="0.4845%" height="15" fill="rgb(240,77,30)" fg:x="36946" fg:w="206"/><text x="87.1798%" y="143.50"></text></g><g><title>leb128::write::signed (260 instructions, 0.61%)</title><rect x="86.8868%" y="149" width="0.6114%" height="15" fill="rgb(231,5,3)" fg:x="36946" fg:w="260"/><text x="87.1798%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::encode (505 instructions, 1.19%)</title><rect x="86.6257%" y="165" width="1.1876%" height="15" fill="rgb(207,226,32)" fg:x="36835" fg:w="505"/><text x="86.9187%" y="175.50"></text></g><g><title>memcpy (35 instructions, 0.08%)</title><rect x="87.8134%" y="165" width="0.0823%" height="15" fill="rgb(222,207,47)" fg:x="37340" fg:w="35"/><text x="88.1063%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.14%)</title><rect x="87.8957%" y="165" width="0.1435%" height="15" fill="rgb(229,115,45)" fg:x="37375" fg:w="61"/><text x="88.1886%" y="175.50"></text></g><g><title>std::io::Write::write_all (519 instructions, 1.22%)</title><rect x="88.0391%" y="165" width="1.2205%" height="15" fill="rgb(224,191,6)" fg:x="37436" fg:w="519"/><text x="88.3321%" y="175.50"></text></g><g><title>std::io::Write::write_all (543 instructions, 1.28%)</title><rect x="89.2597%" y="165" width="1.2770%" height="15" fill="rgb(230,227,24)" fg:x="37955" fg:w="543"/><text x="89.5526%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="90.7460%" y="149" width="0.0635%" height="15" fill="rgb(228,80,19)" fg:x="38587" fg:w="27"/><text x="91.0389%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.54%)</title><rect x="90.5367%" y="165" width="0.5432%" height="15" fill="rgb(247,229,0)" fg:x="38498" fg:w="231"/><text x="90.8296%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="91.0799%" y="149" width="0.0329%" height="15" fill="rgb(237,194,15)" fg:x="38729" fg:w="14"/><text x="91.3729%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="91.1128%" y="133" width="0.0635%" height="15" fill="rgb(219,203,20)" fg:x="38743" fg:w="27"/><text x="91.4058%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.33%)</title><rect x="91.1128%" y="149" width="0.3339%" height="15" fill="rgb(234,128,8)" fg:x="38743" fg:w="142"/><text x="91.4058%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (293 instructions, 0.69%)</title><rect x="91.0799%" y="165" width="0.6891%" height="15" fill="rgb(248,202,8)" fg:x="38729" fg:w="293"/><text x="91.3729%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="91.7690%" y="165" width="0.0188%" height="15" fill="rgb(206,104,37)" fg:x="39022" fg:w="8"/><text x="92.0619%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="91.7878%" y="165" width="0.0329%" height="15" fill="rgb(223,8,27)" fg:x="39030" fg:w="14"/><text x="92.0807%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="91.8207%" y="149" width="0.0635%" height="15" fill="rgb(216,217,28)" fg:x="39044" fg:w="27"/><text x="92.1137%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.33%)</title><rect x="91.8207%" y="165" width="0.3339%" height="15" fill="rgb(249,199,1)" fg:x="39044" fg:w="142"/><text x="92.1137%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="92.2981%" y="149" width="0.0635%" height="15" fill="rgb(240,85,17)" fg:x="39247" fg:w="27"/><text x="92.5911%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (177 instructions, 0.42%)</title><rect x="92.1546%" y="165" width="0.4163%" height="15" fill="rgb(206,108,45)" fg:x="39186" fg:w="177"/><text x="92.4476%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (9,968 instructions, 23.44%)</title><rect x="73.1927%" y="181" width="23.4420%" height="15" fill="rgb(245,210,41)" fg:x="31123" fg:w="9968"/><text x="73.4857%" y="191.50">ic_cdk::api::call::reply</text></g><g><title>sha::__canister_method_principalToAccount::{{closure}} (41,581 instructions, 97.79%)</title><rect x="0.3857%" y="197" width="97.7870%" height="15" fill="rgb(206,13,37)" fg:x="164" fg:w="41581"/><text x="0.6787%" y="207.50">sha::__canister_method_principalToAccount::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.04%)</title><rect x="98.1727%" y="197" width="0.0353%" height="15" fill="rgb(250,61,18)" fg:x="41745" fg:w="15"/><text x="98.4657%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="98.2103%" y="165" width="0.1552%" height="15" fill="rgb(235,172,48)" fg:x="41761" fg:w="66"/><text x="98.5033%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="98.3656%" y="165" width="0.1576%" height="15" fill="rgb(249,201,17)" fg:x="41827" fg:w="67"/><text x="98.6585%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="98.7465%" y="165" width="0.1552%" height="15" fill="rgb(219,208,6)" fg:x="41989" fg:w="66"/><text x="99.0395%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.16%)</title><rect x="98.9017%" y="165" width="0.1552%" height="15" fill="rgb(248,31,23)" fg:x="42055" fg:w="66"/><text x="99.1947%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.16%)</title><rect x="99.0570%" y="165" width="0.1576%" height="15" fill="rgb(245,15,42)" fg:x="42121" fg:w="67"/><text x="99.3499%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (548 instructions, 1.29%)</title><rect x="98.2103%" y="181" width="1.2887%" height="15" fill="rgb(222,217,39)" fg:x="41761" fg:w="548"/><text x="98.5033%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (666 instructions, 1.57%)</title><rect x="98.2080%" y="197" width="1.5662%" height="15" fill="rgb(210,219,27)" fg:x="41760" fg:w="666"/><text x="98.5010%" y="207.50"></text></g><g><title>all (42,522 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,166,36)" fg:x="0" fg:w="42522"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update principalToAccount (42,522 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,132,34)" fg:x="0" fg:w="42522"/><text x="0.2930%" y="223.50">canister_update principalToAccount</text></g></svg></svg>