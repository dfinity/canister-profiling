<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="262" onload="init(evt)" viewBox="0 0 1024 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.principalToAccount</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="245.00"> </text><svg id="frames" x="10" width="1004" total_samples="48636"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="181" width="0.0493%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="24"/><text x="0.2930%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.0493%" y="181" width="0.1686%" height="15" fill="rgb(218,129,16)" fg:x="24" fg:w="82"/><text x="0.3423%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2179%" y="181" width="0.1707%" height="15" fill="rgb(216,85,19)" fg:x="106" fg:w="83"/><text x="0.5109%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3886%" y="165" width="0.1707%" height="15" fill="rgb(235,228,7)" fg:x="189" fg:w="83"/><text x="0.6816%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="0.5593%" y="149" width="0.1686%" height="15" fill="rgb(245,175,0)" fg:x="272" fg:w="82"/><text x="0.8522%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7279%" y="133" width="0.0123%" height="15" fill="rgb(208,168,36)" fg:x="354" fg:w="6"/><text x="1.0208%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.90%)</title><rect x="0.7279%" y="149" width="0.9047%" height="15" fill="rgb(246,171,24)" fg:x="354" fg:w="440"/><text x="1.0208%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="1.6325%" y="149" width="0.1953%" height="15" fill="rgb(215,142,24)" fg:x="794" fg:w="95"/><text x="1.9255%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8279%" y="149" width="0.1234%" height="15" fill="rgb(250,187,7)" fg:x="889" fg:w="60"/><text x="2.1208%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9512%" y="149" width="0.1234%" height="15" fill="rgb(228,66,33)" fg:x="949" fg:w="60"/><text x="2.2442%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0746%" y="149" width="0.1234%" height="15" fill="rgb(234,215,21)" fg:x="1009" fg:w="60"/><text x="2.3676%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1980%" y="149" width="0.1234%" height="15" fill="rgb(222,191,20)" fg:x="1069" fg:w="60"/><text x="2.4909%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="2.3213%" y="149" width="0.1686%" height="15" fill="rgb(245,79,54)" fg:x="1129" fg:w="82"/><text x="2.6143%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4899%" y="149" width="0.1439%" height="15" fill="rgb(240,10,37)" fg:x="1211" fg:w="70"/><text x="2.7829%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.6339%" y="133" width="0.0123%" height="15" fill="rgb(214,192,32)" fg:x="1281" fg:w="6"/><text x="2.9268%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.90%)</title><rect x="2.6339%" y="149" width="0.9047%" height="15" fill="rgb(209,36,54)" fg:x="1281" fg:w="440"/><text x="2.9268%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.5385%" y="149" width="0.0391%" height="15" fill="rgb(220,10,11)" fg:x="1721" fg:w="19"/><text x="3.8315%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.5776%" y="133" width="0.1707%" height="15" fill="rgb(221,106,17)" fg:x="1740" fg:w="83"/><text x="3.8706%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="3.7483%" y="101" width="0.1378%" height="15" fill="rgb(251,142,44)" fg:x="1823" fg:w="67"/><text x="4.0412%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="3.7483%" y="117" width="0.2015%" height="15" fill="rgb(238,13,15)" fg:x="1823" fg:w="98"/><text x="4.0412%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.9497%" y="69" width="0.0226%" height="15" fill="rgb(208,107,27)" fg:x="1921" fg:w="11"/><text x="4.2427%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.9724%" y="53" width="0.0720%" height="15" fill="rgb(205,136,37)" fg:x="1932" fg:w="35"/><text x="4.2653%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.14%)</title><rect x="3.9724%" y="69" width="0.1357%" height="15" fill="rgb(250,205,27)" fg:x="1932" fg:w="66"/><text x="4.2653%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.30%)</title><rect x="3.9497%" y="85" width="0.3022%" height="15" fill="rgb(210,80,43)" fg:x="1921" fg:w="147"/><text x="4.2427%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.44%)</title><rect x="3.9497%" y="101" width="0.4359%" height="15" fill="rgb(247,160,36)" fg:x="1921" fg:w="212"/><text x="4.2427%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.46%)</title><rect x="3.9497%" y="117" width="0.4565%" height="15" fill="rgb(234,13,49)" fg:x="1921" fg:w="222"/><text x="4.2427%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.95%)</title><rect x="3.7483%" y="133" width="0.9479%" height="15" fill="rgb(234,122,0)" fg:x="1823" fg:w="461"/><text x="4.0412%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.42%)</title><rect x="3.5776%" y="149" width="1.4166%" height="15" fill="rgb(207,146,38)" fg:x="1740" fg:w="689"/><text x="3.8706%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="4.9942%" y="149" width="0.1953%" height="15" fill="rgb(207,177,25)" fg:x="2429" fg:w="95"/><text x="5.2872%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.1896%" y="149" width="0.1234%" height="15" fill="rgb(211,178,42)" fg:x="2524" fg:w="60"/><text x="5.4825%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="5.3129%" y="149" width="0.1563%" height="15" fill="rgb(230,69,54)" fg:x="2584" fg:w="76"/><text x="5.6059%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.4692%" y="149" width="0.1439%" height="15" fill="rgb(214,135,41)" fg:x="2660" fg:w="70"/><text x="5.7622%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.6131%" y="117" width="0.0123%" height="15" fill="rgb(237,67,25)" fg:x="2730" fg:w="6"/><text x="5.9061%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.90%)</title><rect x="5.6131%" y="133" width="0.9047%" height="15" fill="rgb(222,189,50)" fg:x="2730" fg:w="440"/><text x="5.9061%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.5178%" y="133" width="0.0391%" height="15" fill="rgb(245,148,34)" fg:x="3170" fg:w="19"/><text x="6.8108%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.5569%" y="117" width="0.1707%" height="15" fill="rgb(222,29,6)" fg:x="3189" fg:w="83"/><text x="6.8498%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="6.7275%" y="85" width="0.1378%" height="15" fill="rgb(221,189,43)" fg:x="3272" fg:w="67"/><text x="7.0205%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="6.7275%" y="101" width="0.2015%" height="15" fill="rgb(207,36,27)" fg:x="3272" fg:w="98"/><text x="7.0205%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.9290%" y="53" width="0.0226%" height="15" fill="rgb(217,90,24)" fg:x="3370" fg:w="11"/><text x="7.2220%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.9516%" y="37" width="0.0720%" height="15" fill="rgb(224,66,35)" fg:x="3381" fg:w="35"/><text x="7.2446%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.14%)</title><rect x="6.9516%" y="53" width="0.1357%" height="15" fill="rgb(221,13,50)" fg:x="3381" fg:w="66"/><text x="7.2446%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.30%)</title><rect x="6.9290%" y="69" width="0.3022%" height="15" fill="rgb(236,68,49)" fg:x="3370" fg:w="147"/><text x="7.2220%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.44%)</title><rect x="6.9290%" y="85" width="0.4359%" height="15" fill="rgb(229,146,28)" fg:x="3370" fg:w="212"/><text x="7.2220%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.46%)</title><rect x="6.9290%" y="101" width="0.4565%" height="15" fill="rgb(225,31,38)" fg:x="3370" fg:w="222"/><text x="7.2220%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.95%)</title><rect x="6.7275%" y="117" width="0.9479%" height="15" fill="rgb(250,208,3)" fg:x="3272" fg:w="461"/><text x="7.0205%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.42%)</title><rect x="6.5569%" y="133" width="1.4166%" height="15" fill="rgb(246,54,23)" fg:x="3189" fg:w="689"/><text x="6.8498%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="7.9735%" y="133" width="0.1953%" height="15" fill="rgb(243,76,11)" fg:x="3878" fg:w="95"/><text x="8.2665%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="8.1688%" y="133" width="0.1234%" height="15" fill="rgb(245,21,50)" fg:x="3973" fg:w="60"/><text x="8.4618%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="8.2922%" y="117" width="0.1686%" height="15" fill="rgb(228,9,43)" fg:x="4033" fg:w="82"/><text x="8.5852%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.20%)</title><rect x="8.4608%" y="117" width="0.1953%" height="15" fill="rgb(208,100,47)" fg:x="4115" fg:w="95"/><text x="8.7538%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="8.6561%" y="117" width="0.1563%" height="15" fill="rgb(232,26,8)" fg:x="4210" fg:w="76"/><text x="8.9491%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (335 instructions, 0.69%)</title><rect x="8.2922%" y="133" width="0.6888%" height="15" fill="rgb(216,166,38)" fg:x="4033" fg:w="335"/><text x="8.5852%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="8.9810%" y="133" width="0.1707%" height="15" fill="rgb(251,202,51)" fg:x="4368" fg:w="83"/><text x="9.2740%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,966 instructions, 4.04%)</title><rect x="5.6131%" y="149" width="4.0423%" height="15" fill="rgb(254,216,34)" fg:x="2730" fg:w="1966"/><text x="5.9061%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="9.6554%" y="149" width="0.1563%" height="15" fill="rgb(251,32,27)" fg:x="4696" fg:w="76"/><text x="9.9484%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8117%" y="149" width="0.0308%" height="15" fill="rgb(208,127,28)" fg:x="4772" fg:w="15"/><text x="10.1046%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8425%" y="149" width="0.0308%" height="15" fill="rgb(224,137,22)" fg:x="4787" fg:w="15"/><text x="10.1355%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.8733%" y="149" width="0.0185%" height="15" fill="rgb(254,70,32)" fg:x="4802" fg:w="9"/><text x="10.1663%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.04%)</title><rect x="9.8918%" y="149" width="0.0370%" height="15" fill="rgb(229,75,37)" fg:x="4811" fg:w="18"/><text x="10.1848%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9289%" y="133" width="0.1707%" height="15" fill="rgb(252,64,23)" fg:x="4829" fg:w="83"/><text x="10.2218%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.37%)</title><rect x="9.9289%" y="149" width="0.3680%" height="15" fill="rgb(232,162,48)" fg:x="4829" fg:w="179"/><text x="10.2218%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.2969%" y="117" width="0.1707%" height="15" fill="rgb(246,160,12)" fg:x="5008" fg:w="83"/><text x="10.5899%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="10.2969%" y="133" width="0.2591%" height="15" fill="rgb(247,166,0)" fg:x="5008" fg:w="126"/><text x="10.5899%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.43%)</title><rect x="10.2969%" y="149" width="0.4277%" height="15" fill="rgb(249,219,21)" fg:x="5008" fg:w="208"/><text x="10.5899%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7246%" y="149" width="0.1707%" height="15" fill="rgb(205,209,3)" fg:x="5216" fg:w="83"/><text x="11.0175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="10.8952%" y="149" width="0.1768%" height="15" fill="rgb(243,44,1)" fg:x="5299" fg:w="86"/><text x="11.1882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="11.0720%" y="149" width="0.1707%" height="15" fill="rgb(206,159,16)" fg:x="5385" fg:w="83"/><text x="11.3650%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="11.2427%" y="149" width="0.1707%" height="15" fill="rgb(244,77,30)" fg:x="5468" fg:w="83"/><text x="11.5357%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="11.4216%" y="149" width="0.1768%" height="15" fill="rgb(218,69,12)" fg:x="5555" fg:w="86"/><text x="11.7145%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.88%)</title><rect x="11.5984%" y="149" width="0.8800%" height="15" fill="rgb(212,87,7)" fg:x="5641" fg:w="428"/><text x="11.8914%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.88%)</title><rect x="12.4784%" y="149" width="0.8800%" height="15" fill="rgb(245,114,25)" fg:x="6069" fg:w="428"/><text x="12.7714%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,371 instructions, 15.16%)</title><rect x="0.5593%" y="165" width="15.1554%" height="15" fill="rgb(210,61,42)" fg:x="272" fg:w="7371"/><text x="0.8522%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.78%)</title><rect x="15.7147%" y="165" width="0.7813%" height="15" fill="rgb(211,52,33)" fg:x="7643" fg:w="380"/><text x="16.0077%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.4960%" y="133" width="0.0288%" height="15" fill="rgb(234,58,33)" fg:x="8023" fg:w="14"/><text x="16.7890%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.5248%" y="117" width="0.1213%" height="15" fill="rgb(220,115,36)" fg:x="8037" fg:w="59"/><text x="16.8178%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (336 instructions, 0.69%)</title><rect x="16.6461%" y="117" width="0.6908%" height="15" fill="rgb(243,153,54)" fg:x="8096" fg:w="336"/><text x="16.9391%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 instructions, 0.16%)</title><rect x="17.3370%" y="117" width="0.1604%" height="15" fill="rgb(251,47,18)" fg:x="8432" fg:w="78"/><text x="17.6299%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (726 instructions, 1.49%)</title><rect x="16.5248%" y="133" width="1.4927%" height="15" fill="rgb(242,102,42)" fg:x="8037" fg:w="726"/><text x="16.8178%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (872 instructions, 1.79%)</title><rect x="16.4960%" y="149" width="1.7929%" height="15" fill="rgb(234,31,38)" fg:x="8023" fg:w="872"/><text x="16.7890%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="18.2889%" y="149" width="0.1707%" height="15" fill="rgb(221,117,51)" fg:x="8895" fg:w="83"/><text x="18.5819%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="18.4596%" y="133" width="0.0288%" height="15" fill="rgb(212,20,18)" fg:x="8978" fg:w="14"/><text x="18.7525%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.4884%" y="117" width="0.1213%" height="15" fill="rgb(245,133,36)" fg:x="8992" fg:w="59"/><text x="18.7813%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (336 instructions, 0.69%)</title><rect x="18.6097%" y="117" width="0.6908%" height="15" fill="rgb(212,6,19)" fg:x="9051" fg:w="336"/><text x="18.9026%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 instructions, 0.16%)</title><rect x="19.3005%" y="117" width="0.1604%" height="15" fill="rgb(218,1,36)" fg:x="9387" fg:w="78"/><text x="19.5935%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (726 instructions, 1.49%)</title><rect x="18.4884%" y="133" width="1.4927%" height="15" fill="rgb(246,84,54)" fg:x="8992" fg:w="726"/><text x="18.7813%" y="143.50"></text></g><g><title>candid::types::internal::env_add (968 instructions, 1.99%)</title><rect x="18.4596%" y="149" width="1.9903%" height="15" fill="rgb(242,110,6)" fg:x="8978" fg:w="968"/><text x="18.7525%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="20.4499%" y="149" width="0.1707%" height="15" fill="rgb(214,47,5)" fg:x="9946" fg:w="83"/><text x="20.7428%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="20.6205%" y="133" width="0.0288%" height="15" fill="rgb(218,159,25)" fg:x="10029" fg:w="14"/><text x="20.9135%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.6493%" y="117" width="0.1213%" height="15" fill="rgb(215,211,28)" fg:x="10043" fg:w="59"/><text x="20.9423%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (336 instructions, 0.69%)</title><rect x="20.7706%" y="117" width="0.6908%" height="15" fill="rgb(238,59,32)" fg:x="10102" fg:w="336"/><text x="21.0636%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 instructions, 0.16%)</title><rect x="21.4615%" y="117" width="0.1604%" height="15" fill="rgb(226,82,3)" fg:x="10438" fg:w="78"/><text x="21.7544%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (726 instructions, 1.49%)</title><rect x="20.6493%" y="133" width="1.4927%" height="15" fill="rgb(240,164,32)" fg:x="10043" fg:w="726"/><text x="20.9423%" y="143.50"></text></g><g><title>memcmp (537 instructions, 1.10%)</title><rect x="22.1420%" y="133" width="1.1041%" height="15" fill="rgb(232,46,7)" fg:x="10769" fg:w="537"/><text x="22.4350%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="23.2462%" y="117" width="0.1768%" height="15" fill="rgb(229,129,53)" fg:x="11306" fg:w="86"/><text x="23.5391%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.25%)</title><rect x="23.2462%" y="133" width="0.2488%" height="15" fill="rgb(234,188,29)" fg:x="11306" fg:w="121"/><text x="23.5391%" y="143.50"></text></g><g><title>candid::types::internal::env_add (1,593 instructions, 3.28%)</title><rect x="20.6205%" y="149" width="3.2754%" height="15" fill="rgb(246,141,4)" fg:x="10029" fg:w="1593"/><text x="20.9135%" y="159.50">ca..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="23.8959%" y="101" width="0.1213%" height="15" fill="rgb(229,23,39)" fg:x="11622" fg:w="59"/><text x="24.1888%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="23.8959%" y="117" width="0.1933%" height="15" fill="rgb(206,12,3)" fg:x="11622" fg:w="94"/><text x="24.1888%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="24.5435%" y="101" width="0.1213%" height="15" fill="rgb(252,226,20)" fg:x="11937" fg:w="59"/><text x="24.8365%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="24.5435%" y="117" width="0.1933%" height="15" fill="rgb(216,123,35)" fg:x="11937" fg:w="94"/><text x="24.8365%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (630 instructions, 1.30%)</title><rect x="23.8959%" y="133" width="1.2953%" height="15" fill="rgb(212,68,40)" fg:x="11622" fg:w="630"/><text x="24.1888%" y="143.50"></text></g><g><title>candid::types::internal::env_id (960 instructions, 1.97%)</title><rect x="23.8959%" y="149" width="1.9738%" height="15" fill="rgb(254,125,32)" fg:x="11622" fg:w="960"/><text x="24.1888%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (4,688 instructions, 9.64%)</title><rect x="16.4960%" y="165" width="9.6390%" height="15" fill="rgb(253,97,22)" fg:x="8023" fg:w="4688"/><text x="16.7890%" y="175.50">candid::typ..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="26.1350%" y="149" width="0.1090%" height="15" fill="rgb(241,101,14)" fg:x="12711" fg:w="53"/><text x="26.4279%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.27%)</title><rect x="26.2439%" y="133" width="0.2714%" height="15" fill="rgb(238,103,29)" fg:x="12764" fg:w="132"/><text x="26.5369%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.27%)</title><rect x="26.5873%" y="133" width="0.2714%" height="15" fill="rgb(233,195,47)" fg:x="12931" fg:w="132"/><text x="26.8803%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.69%)</title><rect x="26.2439%" y="149" width="0.6867%" height="15" fill="rgb(246,218,30)" fg:x="12764" fg:w="334"/><text x="26.5369%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="26.9307%" y="133" width="0.0699%" height="15" fill="rgb(219,145,47)" fg:x="13098" fg:w="34"/><text x="27.2236%" y="143.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="27.0006%" y="133" width="0.0699%" height="15" fill="rgb(243,12,26)" fg:x="13132" fg:w="34"/><text x="27.2935%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1903 (18 instructions, 0.04%)</title><rect x="27.0705%" y="133" width="0.0370%" height="15" fill="rgb(214,87,16)" fg:x="13166" fg:w="18"/><text x="27.3635%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1903 (18 instructions, 0.04%)</title><rect x="27.1075%" y="133" width="0.0370%" height="15" fill="rgb(208,99,42)" fg:x="13184" fg:w="18"/><text x="27.4005%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="27.1445%" y="133" width="0.1686%" height="15" fill="rgb(253,99,2)" fg:x="13202" fg:w="82"/><text x="27.4375%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="27.3131%" y="133" width="0.1686%" height="15" fill="rgb(220,168,23)" fg:x="13284" fg:w="82"/><text x="27.6061%" y="143.50"></text></g><g><title>binread::binary_template::write_named (92 instructions, 0.19%)</title><rect x="27.4817%" y="117" width="0.1892%" height="15" fill="rgb(242,38,24)" fg:x="13366" fg:w="92"/><text x="27.7747%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (174 instructions, 0.36%)</title><rect x="27.4817%" y="133" width="0.3578%" height="15" fill="rgb(225,182,9)" fg:x="13366" fg:w="174"/><text x="27.7747%" y="143.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="27.8395%" y="133" width="0.1439%" height="15" fill="rgb(243,178,37)" fg:x="13540" fg:w="70"/><text x="28.1324%" y="143.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="27.9834%" y="117" width="0.0123%" height="15" fill="rgb(232,139,19)" fg:x="13610" fg:w="6"/><text x="28.2764%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.90%)</title><rect x="27.9834%" y="133" width="0.9047%" height="15" fill="rgb(225,201,24)" fg:x="13610" fg:w="440"/><text x="28.2764%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="28.8881%" y="117" width="0.1707%" height="15" fill="rgb(221,47,46)" fg:x="14050" fg:w="83"/><text x="29.1810%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="29.0587%" y="85" width="0.1378%" height="15" fill="rgb(249,23,13)" fg:x="14133" fg:w="67"/><text x="29.3517%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="29.0587%" y="101" width="0.2015%" height="15" fill="rgb(219,9,5)" fg:x="14133" fg:w="98"/><text x="29.3517%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="29.2602%" y="53" width="0.0226%" height="15" fill="rgb(254,171,16)" fg:x="14231" fg:w="11"/><text x="29.5532%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="29.2828%" y="37" width="0.0720%" height="15" fill="rgb(230,171,20)" fg:x="14242" fg:w="35"/><text x="29.5758%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.14%)</title><rect x="29.2828%" y="53" width="0.1357%" height="15" fill="rgb(210,71,41)" fg:x="14242" fg:w="66"/><text x="29.5758%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.30%)</title><rect x="29.2602%" y="69" width="0.3022%" height="15" fill="rgb(206,173,20)" fg:x="14231" fg:w="147"/><text x="29.5532%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.44%)</title><rect x="29.2602%" y="85" width="0.4359%" height="15" fill="rgb(233,88,34)" fg:x="14231" fg:w="212"/><text x="29.5532%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.46%)</title><rect x="29.2602%" y="101" width="0.4565%" height="15" fill="rgb(223,209,46)" fg:x="14231" fg:w="222"/><text x="29.5532%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.95%)</title><rect x="29.0587%" y="117" width="0.9479%" height="15" fill="rgb(250,43,18)" fg:x="14133" fg:w="461"/><text x="29.3517%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.42%)</title><rect x="28.8881%" y="133" width="1.4166%" height="15" fill="rgb(208,13,10)" fg:x="14050" fg:w="689"/><text x="29.1810%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="30.3047%" y="133" width="0.1953%" height="15" fill="rgb(212,200,36)" fg:x="14739" fg:w="95"/><text x="30.5977%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="30.5000%" y="133" width="0.1234%" height="15" fill="rgb(225,90,30)" fg:x="14834" fg:w="60"/><text x="30.7930%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="30.6234%" y="117" width="0.1234%" height="15" fill="rgb(236,182,39)" fg:x="14894" fg:w="60"/><text x="30.9164%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 instructions, 0.25%)</title><rect x="30.6234%" y="133" width="0.2550%" height="15" fill="rgb(212,144,35)" fg:x="14894" fg:w="124"/><text x="30.9164%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="30.8784%" y="133" width="0.1707%" height="15" fill="rgb(228,63,44)" fg:x="15018" fg:w="83"/><text x="31.1713%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="31.0490%" y="117" width="0.1234%" height="15" fill="rgb(228,109,6)" fg:x="15101" fg:w="60"/><text x="31.3420%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="31.3040%" y="117" width="0.1234%" height="15" fill="rgb(238,117,24)" fg:x="15225" fg:w="60"/><text x="31.5969%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="31.5589%" y="117" width="0.1234%" height="15" fill="rgb(242,26,26)" fg:x="15349" fg:w="60"/><text x="31.8519%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="31.8139%" y="117" width="0.1234%" height="15" fill="rgb(221,92,48)" fg:x="15473" fg:w="60"/><text x="32.1069%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="32.0688%" y="117" width="0.1234%" height="15" fill="rgb(209,209,32)" fg:x="15597" fg:w="60"/><text x="32.3618%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="32.3238%" y="117" width="0.1234%" height="15" fill="rgb(221,70,22)" fg:x="15721" fg:w="60"/><text x="32.6168%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="32.5787%" y="117" width="0.1234%" height="15" fill="rgb(248,145,5)" fg:x="15845" fg:w="60"/><text x="32.8717%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="32.8337%" y="117" width="0.1234%" height="15" fill="rgb(226,116,26)" fg:x="15969" fg:w="60"/><text x="33.1267%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (992 instructions, 2.04%)</title><rect x="31.0490%" y="133" width="2.0396%" height="15" fill="rgb(244,5,17)" fg:x="15101" fg:w="992"/><text x="31.3420%" y="143.50"></text></g><g><title>__rust_realloc (110 instructions, 0.23%)</title><rect x="33.0887%" y="101" width="0.2262%" height="15" fill="rgb(252,159,33)" fg:x="16093" fg:w="110"/><text x="33.3816%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (155 instructions, 0.32%)</title><rect x="33.0887%" y="117" width="0.3187%" height="15" fill="rgb(206,71,0)" fg:x="16093" fg:w="155"/><text x="33.3816%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 instructions, 0.50%)</title><rect x="33.0887%" y="133" width="0.4996%" height="15" fill="rgb(233,118,54)" fg:x="16093" fg:w="243"/><text x="33.3816%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="33.5883%" y="117" width="0.1234%" height="15" fill="rgb(234,83,48)" fg:x="16336" fg:w="60"/><text x="33.8813%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="33.8432%" y="117" width="0.1234%" height="15" fill="rgb(228,3,54)" fg:x="16460" fg:w="60"/><text x="34.1362%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="34.0982%" y="117" width="0.1234%" height="15" fill="rgb(226,155,13)" fg:x="16584" fg:w="60"/><text x="34.3912%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="34.3532%" y="117" width="0.1234%" height="15" fill="rgb(241,28,37)" fg:x="16708" fg:w="60"/><text x="34.6461%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="34.6081%" y="117" width="0.1234%" height="15" fill="rgb(233,93,10)" fg:x="16832" fg:w="60"/><text x="34.9011%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="34.8631%" y="117" width="0.1234%" height="15" fill="rgb(225,113,19)" fg:x="16956" fg:w="60"/><text x="35.1560%" y="127.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="35.1180%" y="117" width="0.1234%" height="15" fill="rgb(241,2,18)" fg:x="17080" fg:w="60"/><text x="35.4110%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (868 instructions, 1.78%)</title><rect x="33.5883%" y="133" width="1.7847%" height="15" fill="rgb(228,207,21)" fg:x="16336" fg:w="868"/><text x="33.8813%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 instructions, 0.06%)</title><rect x="35.3730%" y="133" width="0.0596%" height="15" fill="rgb(213,211,35)" fg:x="17204" fg:w="29"/><text x="35.6659%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="35.4326%" y="133" width="0.1563%" height="15" fill="rgb(209,83,10)" fg:x="17233" fg:w="76"/><text x="35.7256%" y="143.50"></text></g><g><title>__rust_realloc (54 instructions, 0.11%)</title><rect x="35.5889%" y="101" width="0.1110%" height="15" fill="rgb(209,164,1)" fg:x="17309" fg:w="54"/><text x="35.8818%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 instructions, 0.20%)</title><rect x="35.5889%" y="117" width="0.2036%" height="15" fill="rgb(213,184,43)" fg:x="17309" fg:w="99"/><text x="35.8818%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (187 instructions, 0.38%)</title><rect x="35.5889%" y="133" width="0.3845%" height="15" fill="rgb(231,61,34)" fg:x="17309" fg:w="187"/><text x="35.8818%" y="143.50"></text></g><g><title>memcpy (220 instructions, 0.45%)</title><rect x="35.9734%" y="133" width="0.4523%" height="15" fill="rgb(235,75,3)" fg:x="17496" fg:w="220"/><text x="36.2663%" y="143.50"></text></g><g><title>memcpy (171 instructions, 0.35%)</title><rect x="36.4257%" y="133" width="0.3516%" height="15" fill="rgb(220,106,47)" fg:x="17716" fg:w="171"/><text x="36.7187%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (53 instructions, 0.11%)</title><rect x="36.7773%" y="133" width="0.1090%" height="15" fill="rgb(210,196,33)" fg:x="17887" fg:w="53"/><text x="37.0703%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="36.8863%" y="133" width="0.1768%" height="15" fill="rgb(229,154,42)" fg:x="17940" fg:w="86"/><text x="37.1792%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="37.0631%" y="133" width="0.1234%" height="15" fill="rgb(228,114,26)" fg:x="18026" fg:w="60"/><text x="37.3560%" y="143.50"></text></g><g><title>&lt;ic_principal::Principal as serde::de::Deserialize&gt;::deserialize (6,218 instructions, 12.78%)</title><rect x="26.9307%" y="149" width="12.7848%" height="15" fill="rgb(208,144,1)" fg:x="13098" fg:w="6218"/><text x="27.2236%" y="159.50">&lt;ic_principal::P..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="39.7154%" y="149" width="0.0267%" height="15" fill="rgb(239,112,37)" fg:x="19316" fg:w="13"/><text x="40.0084%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="39.7422%" y="149" width="0.0267%" height="15" fill="rgb(210,96,50)" fg:x="19329" fg:w="13"/><text x="40.0351%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="39.7689%" y="149" width="0.0267%" height="15" fill="rgb(222,178,2)" fg:x="19342" fg:w="13"/><text x="40.0619%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (6,924 instructions, 14.24%)</title><rect x="26.1350%" y="165" width="14.2364%" height="15" fill="rgb(226,74,18)" fg:x="12711" fg:w="6924"/><text x="26.4279%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (440 instructions, 0.90%)</title><rect x="40.3713%" y="165" width="0.9047%" height="15" fill="rgb(225,67,54)" fg:x="19635" fg:w="440"/><text x="40.6643%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="41.2760%" y="133" width="0.0391%" height="15" fill="rgb(251,92,32)" fg:x="20075" fg:w="19"/><text x="41.5690%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.37%)</title><rect x="41.3151%" y="133" width="0.3722%" height="15" fill="rgb(228,149,22)" fg:x="20094" fg:w="181"/><text x="41.6080%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.21%)</title><rect x="41.6872%" y="101" width="0.2056%" height="15" fill="rgb(243,54,13)" fg:x="20275" fg:w="100"/><text x="41.9802%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (263 instructions, 0.54%)</title><rect x="41.6872%" y="117" width="0.5408%" height="15" fill="rgb(243,180,28)" fg:x="20275" fg:w="263"/><text x="41.9802%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (298 instructions, 0.61%)</title><rect x="41.6872%" y="133" width="0.6127%" height="15" fill="rgb(208,167,24)" fg:x="20275" fg:w="298"/><text x="41.9802%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="42.2999%" y="133" width="0.0267%" height="15" fill="rgb(245,73,45)" fg:x="20573" fg:w="13"/><text x="42.5929%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (573 instructions, 1.18%)</title><rect x="41.2760%" y="149" width="1.1781%" height="15" fill="rgb(237,203,48)" fg:x="20075" fg:w="573"/><text x="41.5690%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (622 instructions, 1.28%)</title><rect x="41.2760%" y="165" width="1.2789%" height="15" fill="rgb(211,197,16)" fg:x="20075" fg:w="622"/><text x="41.5690%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.13%)</title><rect x="42.5549%" y="149" width="0.1275%" height="15" fill="rgb(243,99,51)" fg:x="20697" fg:w="62"/><text x="42.8479%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.21%)</title><rect x="42.6824%" y="149" width="0.2056%" height="15" fill="rgb(215,123,29)" fg:x="20759" fg:w="100"/><text x="42.9753%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (261 instructions, 0.54%)</title><rect x="42.5549%" y="165" width="0.5366%" height="15" fill="rgb(239,186,37)" fg:x="20697" fg:w="261"/><text x="42.8479%" y="175.50"></text></g><g><title>memset (240 instructions, 0.49%)</title><rect x="43.0915%" y="165" width="0.4935%" height="15" fill="rgb(252,136,39)" fg:x="20958" fg:w="240"/><text x="43.3845%" y="175.50"></text></g><g><title>memcpy (176 instructions, 0.36%)</title><rect x="43.5850%" y="165" width="0.3619%" height="15" fill="rgb(223,213,32)" fg:x="21198" fg:w="176"/><text x="43.8780%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.04%)</title><rect x="43.9469%" y="165" width="1.0363%" height="15" fill="rgb(233,115,5)" fg:x="21374" fg:w="504"/><text x="44.2398%" y="175.50"></text></g><g><title>memset (64 instructions, 0.13%)</title><rect x="44.9831%" y="149" width="0.1316%" height="15" fill="rgb(207,226,44)" fg:x="21878" fg:w="64"/><text x="45.2761%" y="159.50"></text></g><g><title>sha2::sha256::compress256 (4,990 instructions, 10.26%)</title><rect x="45.1147%" y="149" width="10.2599%" height="15" fill="rgb(208,126,0)" fg:x="21942" fg:w="4990"/><text x="45.4077%" y="159.50">sha2::sha256..</text></g><g><title>sha2::sha256::compress256 (4,990 instructions, 10.26%)</title><rect x="55.3746%" y="149" width="10.2599%" height="15" fill="rgb(244,66,21)" fg:x="26932" fg:w="4990"/><text x="55.6676%" y="159.50">sha2::sha256..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (10,386 instructions, 21.35%)</title><rect x="44.9831%" y="165" width="21.3546%" height="15" fill="rgb(222,97,12)" fg:x="21878" fg:w="10386"/><text x="45.2761%" y="175.50">&lt;sha2::core_api::Sha256VarCo..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="66.3377%" y="165" width="0.1707%" height="15" fill="rgb(219,213,19)" fg:x="32264" fg:w="83"/><text x="66.6307%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="66.5083%" y="149" width="0.0288%" height="15" fill="rgb(252,169,30)" fg:x="32347" fg:w="14"/><text x="66.8013%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (99 instructions, 0.20%)</title><rect x="66.5371%" y="101" width="0.2036%" height="15" fill="rgb(206,32,51)" fg:x="32361" fg:w="99"/><text x="66.8301%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.14%)</title><rect x="66.7407%" y="101" width="0.1378%" height="15" fill="rgb(250,172,42)" fg:x="32460" fg:w="67"/><text x="67.0337%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (268 instructions, 0.55%)</title><rect x="66.5371%" y="117" width="0.5510%" height="15" fill="rgb(209,34,43)" fg:x="32361" fg:w="268"/><text x="66.8301%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (303 instructions, 0.62%)</title><rect x="66.5371%" y="133" width="0.6230%" height="15" fill="rgb(223,11,35)" fg:x="32361" fg:w="303"/><text x="66.8301%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.13%)</title><rect x="67.1601%" y="117" width="0.1275%" height="15" fill="rgb(251,219,26)" fg:x="32664" fg:w="62"/><text x="67.4531%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.14%)</title><rect x="67.2876%" y="117" width="0.1378%" height="15" fill="rgb(231,119,3)" fg:x="32726" fg:w="67"/><text x="67.5806%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.47%)</title><rect x="67.1601%" y="133" width="0.4688%" height="15" fill="rgb(216,97,11)" fg:x="32664" fg:w="228"/><text x="67.4531%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (576 instructions, 1.18%)</title><rect x="66.5371%" y="149" width="1.1843%" height="15" fill="rgb(223,59,9)" fg:x="32361" fg:w="576"/><text x="66.8301%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="67.7214%" y="149" width="0.0267%" height="15" fill="rgb(233,93,31)" fg:x="32937" fg:w="13"/><text x="68.0144%" y="159.50"></text></g><g><title>memset (152 instructions, 0.31%)</title><rect x="67.7482%" y="149" width="0.3125%" height="15" fill="rgb(239,81,33)" fg:x="32950" fg:w="152"/><text x="68.0411%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="68.0607%" y="117" width="0.0288%" height="15" fill="rgb(213,120,34)" fg:x="33102" fg:w="14"/><text x="68.3537%" y="127.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.13%)</title><rect x="68.0607%" y="133" width="0.1295%" height="15" fill="rgb(243,49,53)" fg:x="33102" fg:w="63"/><text x="68.3537%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="68.1902%" y="133" width="0.1707%" height="15" fill="rgb(247,216,33)" fg:x="33165" fg:w="83"/><text x="68.4832%" y="143.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="68.3609%" y="117" width="0.0288%" height="15" fill="rgb(226,26,14)" fg:x="33248" fg:w="14"/><text x="68.6539%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="68.3897%" y="101" width="0.1213%" height="15" fill="rgb(215,49,53)" fg:x="33262" fg:w="59"/><text x="68.6826%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (377 instructions, 0.78%)</title><rect x="68.5110%" y="101" width="0.7751%" height="15" fill="rgb(245,162,40)" fg:x="33321" fg:w="377"/><text x="68.8039%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 instructions, 0.16%)</title><rect x="69.2861%" y="101" width="0.1604%" height="15" fill="rgb(229,68,17)" fg:x="33698" fg:w="78"/><text x="69.5791%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (767 instructions, 1.58%)</title><rect x="68.3897%" y="117" width="1.5770%" height="15" fill="rgb(213,182,10)" fg:x="33262" fg:w="767"/><text x="68.6826%" y="127.50"></text></g><g><title>candid::types::internal::env_add (1,009 instructions, 2.07%)</title><rect x="68.3609%" y="133" width="2.0746%" height="15" fill="rgb(245,125,30)" fg:x="33248" fg:w="1009"/><text x="68.6539%" y="143.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="70.4355%" y="133" width="0.1707%" height="15" fill="rgb(232,202,2)" fg:x="34257" fg:w="83"/><text x="70.7284%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="70.6061%" y="133" width="0.1707%" height="15" fill="rgb(237,140,51)" fg:x="34340" fg:w="83"/><text x="70.8991%" y="143.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="70.7768%" y="117" width="0.0288%" height="15" fill="rgb(236,157,25)" fg:x="34423" fg:w="14"/><text x="71.0698%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="70.8056%" y="101" width="0.1213%" height="15" fill="rgb(219,209,0)" fg:x="34437" fg:w="59"/><text x="71.0985%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (377 instructions, 0.78%)</title><rect x="70.9269%" y="101" width="0.7751%" height="15" fill="rgb(240,116,54)" fg:x="34496" fg:w="377"/><text x="71.2199%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 instructions, 0.16%)</title><rect x="71.7020%" y="101" width="0.1604%" height="15" fill="rgb(216,10,36)" fg:x="34873" fg:w="78"/><text x="71.9950%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (767 instructions, 1.58%)</title><rect x="70.8056%" y="117" width="1.5770%" height="15" fill="rgb(222,72,44)" fg:x="34437" fg:w="767"/><text x="71.0985%" y="127.50"></text></g><g><title>memcmp (675 instructions, 1.39%)</title><rect x="72.3826%" y="117" width="1.3879%" height="15" fill="rgb(232,159,9)" fg:x="35204" fg:w="675"/><text x="72.6756%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="73.7705%" y="101" width="0.1768%" height="15" fill="rgb(210,39,32)" fg:x="35879" fg:w="86"/><text x="74.0634%" y="111.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.25%)</title><rect x="73.7705%" y="117" width="0.2488%" height="15" fill="rgb(216,194,45)" fg:x="35879" fg:w="121"/><text x="74.0634%" y="127.50"></text></g><g><title>candid::types::internal::env_add (1,772 instructions, 3.64%)</title><rect x="70.7768%" y="133" width="3.6434%" height="15" fill="rgb(218,18,35)" fg:x="34423" fg:w="1772"/><text x="71.0698%" y="143.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="74.4202%" y="85" width="0.1213%" height="15" fill="rgb(207,83,51)" fg:x="36195" fg:w="59"/><text x="74.7132%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (164 instructions, 0.34%)</title><rect x="74.5415%" y="85" width="0.3372%" height="15" fill="rgb(225,63,43)" fg:x="36254" fg:w="164"/><text x="74.8345%" y="95.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (286 instructions, 0.59%)</title><rect x="74.4202%" y="101" width="0.5880%" height="15" fill="rgb(207,57,36)" fg:x="36195" fg:w="286"/><text x="74.7132%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (507 instructions, 1.04%)</title><rect x="74.4202%" y="117" width="1.0424%" height="15" fill="rgb(216,99,33)" fg:x="36195" fg:w="507"/><text x="74.7132%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.316 (48 instructions, 0.10%)</title><rect x="75.4626%" y="117" width="0.0987%" height="15" fill="rgb(225,42,16)" fg:x="36702" fg:w="48"/><text x="75.7556%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="75.5613%" y="117" width="0.0267%" height="15" fill="rgb(220,201,45)" fg:x="36750" fg:w="13"/><text x="75.8543%" y="127.50"></text></g><g><title>candid::types::internal::env_id (773 instructions, 1.59%)</title><rect x="74.4202%" y="133" width="1.5894%" height="15" fill="rgb(225,33,4)" fg:x="36195" fg:w="773"/><text x="74.7132%" y="143.50"></text></g><g><title>candid::types::CandidType::ty (4,017 instructions, 8.26%)</title><rect x="68.0607%" y="149" width="8.2593%" height="15" fill="rgb(224,33,50)" fg:x="33102" fg:w="4017"/><text x="68.3537%" y="159.50">candid::t..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="76.3200%" y="117" width="0.1707%" height="15" fill="rgb(246,198,51)" fg:x="37119" fg:w="83"/><text x="76.6130%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="76.3200%" y="133" width="0.2591%" height="15" fill="rgb(205,22,4)" fg:x="37119" fg:w="126"/><text x="76.6130%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.43%)</title><rect x="76.3200%" y="149" width="0.4277%" height="15" fill="rgb(206,3,8)" fg:x="37119" fg:w="208"/><text x="76.6130%" y="159.50"></text></g><g><title>candid::types::internal::is_primitive (30 instructions, 0.06%)</title><rect x="76.7477%" y="133" width="0.0617%" height="15" fill="rgb(251,23,15)" fg:x="37327" fg:w="30"/><text x="77.0406%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="76.8094%" y="101" width="0.1686%" height="15" fill="rgb(252,88,28)" fg:x="37357" fg:w="82"/><text x="77.1023%" y="111.50"></text></g><g><title>candid::types::internal::unroll (170 instructions, 0.35%)</title><rect x="76.8094%" y="117" width="0.3495%" height="15" fill="rgb(212,127,14)" fg:x="37357" fg:w="170"/><text x="77.1023%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="77.1589%" y="117" width="0.1707%" height="15" fill="rgb(247,145,37)" fg:x="37527" fg:w="83"/><text x="77.4519%" y="127.50"></text></g><g><title>candid::types::internal::unroll (348 instructions, 0.72%)</title><rect x="76.8094%" y="133" width="0.7155%" height="15" fill="rgb(209,117,53)" fg:x="37357" fg:w="348"/><text x="77.1023%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="77.5249%" y="85" width="0.1213%" height="15" fill="rgb(212,90,42)" fg:x="37705" fg:w="59"/><text x="77.8178%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (164 instructions, 0.34%)</title><rect x="77.6462%" y="85" width="0.3372%" height="15" fill="rgb(218,164,37)" fg:x="37764" fg:w="164"/><text x="77.9392%" y="95.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (286 instructions, 0.59%)</title><rect x="77.5249%" y="101" width="0.5880%" height="15" fill="rgb(246,65,34)" fg:x="37705" fg:w="286"/><text x="77.8178%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (507 instructions, 1.04%)</title><rect x="77.5249%" y="117" width="1.0424%" height="15" fill="rgb(231,100,33)" fg:x="37705" fg:w="507"/><text x="77.8178%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="78.5673%" y="117" width="0.1707%" height="15" fill="rgb(228,126,14)" fg:x="38212" fg:w="83"/><text x="78.8603%" y="127.50"></text></g><g><title>memset (152 instructions, 0.31%)</title><rect x="78.7380%" y="117" width="0.3125%" height="15" fill="rgb(215,173,21)" fg:x="38295" fg:w="152"/><text x="79.0309%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,078 instructions, 2.22%)</title><rect x="77.5249%" y="133" width="2.2165%" height="15" fill="rgb(210,6,40)" fg:x="37705" fg:w="1078"/><text x="77.8178%" y="143.50">h..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="79.7413%" y="101" width="0.1707%" height="15" fill="rgb(212,48,18)" fg:x="38783" fg:w="83"/><text x="80.0343%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="79.7413%" y="117" width="0.2591%" height="15" fill="rgb(230,214,11)" fg:x="38783" fg:w="126"/><text x="80.0343%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.43%)</title><rect x="79.7413%" y="133" width="0.4277%" height="15" fill="rgb(254,105,39)" fg:x="38783" fg:w="208"/><text x="80.0343%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="80.1690%" y="85" width="0.1213%" height="15" fill="rgb(245,158,5)" fg:x="38991" fg:w="59"/><text x="80.4620%" y="95.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="80.1690%" y="101" width="0.1933%" height="15" fill="rgb(249,208,11)" fg:x="38991" fg:w="94"/><text x="80.4620%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.65%)</title><rect x="80.1690%" y="117" width="0.6477%" height="15" fill="rgb(210,39,28)" fg:x="38991" fg:w="315"/><text x="80.4620%" y="127.50"></text></g><g><title>candid::types::internal::is_primitive (23 instructions, 0.05%)</title><rect x="80.8167%" y="117" width="0.0473%" height="15" fill="rgb(211,56,53)" fg:x="39306" fg:w="23"/><text x="81.1096%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="80.8640%" y="117" width="0.0267%" height="15" fill="rgb(226,201,30)" fg:x="39329" fg:w="13"/><text x="81.1569%" y="127.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (487 instructions, 1.00%)</title><rect x="80.1690%" y="133" width="1.0013%" height="15" fill="rgb(239,101,34)" fg:x="38991" fg:w="487"/><text x="80.4620%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="81.1703%" y="85" width="0.1707%" height="15" fill="rgb(226,209,5)" fg:x="39478" fg:w="83"/><text x="81.4633%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="81.1703%" y="101" width="0.2591%" height="15" fill="rgb(250,105,47)" fg:x="39478" fg:w="126"/><text x="81.4633%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.42%)</title><rect x="81.1703%" y="117" width="0.4215%" height="15" fill="rgb(230,72,3)" fg:x="39478" fg:w="205"/><text x="81.4633%" y="127.50"></text></g><g><title>leb128::write::signed (264 instructions, 0.54%)</title><rect x="81.1703%" y="133" width="0.5428%" height="15" fill="rgb(232,218,39)" fg:x="39478" fg:w="264"/><text x="81.4633%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::encode (62 instructions, 0.13%)</title><rect x="81.7131%" y="133" width="0.1275%" height="15" fill="rgb(248,166,6)" fg:x="39742" fg:w="62"/><text x="82.0061%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="81.8406%" y="101" width="0.1768%" height="15" fill="rgb(247,89,20)" fg:x="39804" fg:w="86"/><text x="82.1336%" y="111.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.25%)</title><rect x="81.8406%" y="117" width="0.2488%" height="15" fill="rgb(248,130,54)" fg:x="39804" fg:w="121"/><text x="82.1336%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.17%)</title><rect x="82.0894%" y="117" width="0.1727%" height="15" fill="rgb(234,196,4)" fg:x="39925" fg:w="84"/><text x="82.3824%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (250 instructions, 0.51%)</title><rect x="81.8406%" y="133" width="0.5140%" height="15" fill="rgb(250,143,31)" fg:x="39804" fg:w="250"/><text x="82.1336%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="82.3546%" y="133" width="0.0267%" height="15" fill="rgb(211,110,34)" fg:x="40054" fg:w="13"/><text x="82.6476%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (2,997 instructions, 6.16%)</title><rect x="76.7477%" y="149" width="6.1621%" height="15" fill="rgb(215,124,48)" fg:x="37327" fg:w="2997"/><text x="77.0406%" y="159.50">candid..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="82.9098%" y="149" width="0.0267%" height="15" fill="rgb(216,46,13)" fg:x="40324" fg:w="13"/><text x="83.2027%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="82.9365%" y="117" width="0.1707%" height="15" fill="rgb(205,184,25)" fg:x="40337" fg:w="83"/><text x="83.2295%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="82.9365%" y="133" width="0.2591%" height="15" fill="rgb(228,1,10)" fg:x="40337" fg:w="126"/><text x="83.2295%" y="143.50"></text></g><g><title>__rust_realloc (110 instructions, 0.23%)</title><rect x="83.3580%" y="117" width="0.2262%" height="15" fill="rgb(213,116,27)" fg:x="40542" fg:w="110"/><text x="83.6510%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (155 instructions, 0.32%)</title><rect x="83.3580%" y="133" width="0.3187%" height="15" fill="rgb(241,95,50)" fg:x="40542" fg:w="155"/><text x="83.6510%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (448 instructions, 0.92%)</title><rect x="82.9365%" y="149" width="0.9211%" height="15" fill="rgb(238,48,32)" fg:x="40337" fg:w="448"/><text x="83.2295%" y="159.50"></text></g><g><title>memcpy (289 instructions, 0.59%)</title><rect x="83.8576%" y="149" width="0.5942%" height="15" fill="rgb(235,113,49)" fg:x="40785" fg:w="289"/><text x="84.1506%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (130 instructions, 0.27%)</title><rect x="84.4518%" y="149" width="0.2673%" height="15" fill="rgb(205,127,43)" fg:x="41074" fg:w="130"/><text x="84.7448%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="84.7191%" y="117" width="0.1707%" height="15" fill="rgb(250,162,2)" fg:x="41204" fg:w="83"/><text x="85.0121%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="84.7191%" y="133" width="0.2591%" height="15" fill="rgb(220,13,41)" fg:x="41204" fg:w="126"/><text x="85.0121%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.42%)</title><rect x="84.7191%" y="149" width="0.4215%" height="15" fill="rgb(249,221,25)" fg:x="41204" fg:w="205"/><text x="85.0121%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="85.1406%" y="149" width="0.1707%" height="15" fill="rgb(215,208,19)" fg:x="41409" fg:w="83"/><text x="85.4336%" y="159.50"></text></g><g><title>memcpy (51 instructions, 0.10%)</title><rect x="85.3113%" y="149" width="0.1049%" height="15" fill="rgb(236,175,2)" fg:x="41492" fg:w="51"/><text x="85.6043%" y="159.50"></text></g><g><title>memcpy (51 instructions, 0.10%)</title><rect x="85.4162%" y="149" width="0.1049%" height="15" fill="rgb(241,52,2)" fg:x="41543" fg:w="51"/><text x="85.7091%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="85.5210%" y="149" width="0.1234%" height="15" fill="rgb(248,140,14)" fg:x="41594" fg:w="60"/><text x="85.8140%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="85.6444%" y="101" width="0.1213%" height="15" fill="rgb(253,22,42)" fg:x="41654" fg:w="59"/><text x="85.9373%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (164 instructions, 0.34%)</title><rect x="85.7657%" y="101" width="0.3372%" height="15" fill="rgb(234,61,47)" fg:x="41713" fg:w="164"/><text x="86.0587%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (286 instructions, 0.59%)</title><rect x="85.6444%" y="117" width="0.5880%" height="15" fill="rgb(208,226,15)" fg:x="41654" fg:w="286"/><text x="85.9373%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (507 instructions, 1.04%)</title><rect x="85.6444%" y="133" width="1.0424%" height="15" fill="rgb(217,221,4)" fg:x="41654" fg:w="507"/><text x="85.9373%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="86.6868%" y="101" width="0.1707%" height="15" fill="rgb(212,174,34)" fg:x="42161" fg:w="83"/><text x="86.9798%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.26%)</title><rect x="86.6868%" y="117" width="0.2591%" height="15" fill="rgb(253,83,4)" fg:x="42161" fg:w="126"/><text x="86.9798%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.42%)</title><rect x="86.6868%" y="133" width="0.4215%" height="15" fill="rgb(250,195,49)" fg:x="42161" fg:w="205"/><text x="86.9798%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::encode (901 instructions, 1.85%)</title><rect x="85.6444%" y="149" width="1.8525%" height="15" fill="rgb(241,192,25)" fg:x="41654" fg:w="901"/><text x="85.9373%" y="159.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="87.4969%" y="149" width="0.0720%" height="15" fill="rgb(208,124,10)" fg:x="42555" fg:w="35"/><text x="87.7899%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="87.5689%" y="149" width="0.1234%" height="15" fill="rgb(222,33,0)" fg:x="42590" fg:w="60"/><text x="87.8618%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (519 instructions, 1.07%)</title><rect x="87.6922%" y="149" width="1.0671%" height="15" fill="rgb(234,209,28)" fg:x="42650" fg:w="519"/><text x="87.9852%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (543 instructions, 1.12%)</title><rect x="88.7594%" y="149" width="1.1165%" height="15" fill="rgb(224,11,23)" fg:x="43169" fg:w="543"/><text x="89.0523%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.18%)</title><rect x="89.8758%" y="149" width="0.1768%" height="15" fill="rgb(232,99,1)" fg:x="43712" fg:w="86"/><text x="90.1688%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.27%)</title><rect x="90.0526%" y="149" width="0.2714%" height="15" fill="rgb(237,95,45)" fg:x="43798" fg:w="132"/><text x="90.3456%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="90.3240%" y="149" width="0.0267%" height="15" fill="rgb(208,109,11)" fg:x="43930" fg:w="13"/><text x="90.6170%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.37%)</title><rect x="90.3508%" y="149" width="0.3722%" height="15" fill="rgb(216,190,48)" fg:x="43943" fg:w="181"/><text x="90.6437%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="90.7229%" y="149" width="0.0144%" height="15" fill="rgb(251,171,36)" fg:x="44124" fg:w="7"/><text x="91.0159%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="90.7373%" y="149" width="0.0267%" height="15" fill="rgb(230,62,22)" fg:x="44131" fg:w="13"/><text x="91.0303%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.27%)</title><rect x="90.7640%" y="149" width="0.2714%" height="15" fill="rgb(225,114,35)" fg:x="44144" fg:w="132"/><text x="91.0570%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="91.0354%" y="149" width="0.1234%" height="15" fill="rgb(215,118,42)" fg:x="44276" fg:w="60"/><text x="91.3284%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.22%)</title><rect x="91.1588%" y="149" width="0.2241%" height="15" fill="rgb(243,119,21)" fg:x="44336" fg:w="109"/><text x="91.4518%" y="159.50"></text></g><g><title>ic_cdk::api::call::reply (14,098 instructions, 28.99%)</title><rect x="66.5083%" y="165" width="28.9868%" height="15" fill="rgb(252,177,53)" fg:x="32347" fg:w="14098"/><text x="66.8013%" y="175.50">ic_cdk::api::call::reply</text></g><g><title>sha::__canister_method_principalToAccount::{{closure}} (47,829 instructions, 98.34%)</title><rect x="0.3886%" y="181" width="98.3407%" height="15" fill="rgb(237,209,29)" fg:x="189" fg:w="47829"/><text x="0.6816%" y="191.50">sha::__canister_method_principalToAccount::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.7293%" y="181" width="0.0288%" height="15" fill="rgb(212,65,23)" fg:x="48018" fg:w="14"/><text x="99.0223%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.13%)</title><rect x="98.7602%" y="165" width="0.1275%" height="15" fill="rgb(230,222,46)" fg:x="48033" fg:w="62"/><text x="99.0531%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.14%)</title><rect x="98.8877%" y="165" width="0.1378%" height="15" fill="rgb(215,135,32)" fg:x="48095" fg:w="67"/><text x="99.1806%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.13%)</title><rect x="99.2351%" y="165" width="0.1275%" height="15" fill="rgb(246,101,22)" fg:x="48264" fg:w="62"/><text x="99.5281%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.14%)</title><rect x="99.3626%" y="165" width="0.1378%" height="15" fill="rgb(206,107,13)" fg:x="48326" fg:w="67"/><text x="99.6556%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (459 instructions, 0.94%)</title><rect x="98.7602%" y="181" width="0.9437%" height="15" fill="rgb(250,100,44)" fg:x="48033" fg:w="459"/><text x="99.0531%" y="191.50"></text></g><g><title>all (48,636 instructions, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,147,38)" fg:x="0" fg:w="48636"/><text x="0.2930%" y="223.50"></text></g><g><title>canister_update principalToAccount (48,636 instructions, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,8,40)" fg:x="0" fg:w="48636"/><text x="0.2930%" y="207.50">canister_update principalToAccount</text></g></svg></svg>