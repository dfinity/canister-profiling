<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">DAO.submit_proposal</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="19241"><g><title>trans_state5 (10 instructions, 0.05%)</title><rect x="0.0000%" y="229" width="0.0520%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="10"/><text x="0.2930%" y="239.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="0.0520%" y="213" width="0.2962%" height="15" fill="rgb(246,185,52)" fg:x="10" fg:w="57"/><text x="0.3449%" y="223.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="0.0520%" y="229" width="0.3378%" height="15" fill="rgb(252,136,11)" fg:x="10" fg:w="65"/><text x="0.3449%" y="239.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="0.3898%" y="213" width="0.2495%" height="15" fill="rgb(219,138,53)" fg:x="75" fg:w="48"/><text x="0.6828%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="0.6393%" y="213" width="0.2962%" height="15" fill="rgb(211,51,23)" fg:x="123" fg:w="57"/><text x="0.9322%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="0.9355%" y="213" width="0.3326%" height="15" fill="rgb(247,221,28)" fg:x="180" fg:w="64"/><text x="1.2285%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="1.2681%" y="213" width="0.2495%" height="15" fill="rgb(251,222,45)" fg:x="244" fg:w="48"/><text x="1.5611%" y="223.50"></text></g><g><title>leb128_decode (183 instructions, 0.95%)</title><rect x="1.5176%" y="213" width="0.9511%" height="15" fill="rgb(217,162,53)" fg:x="292" fg:w="183"/><text x="1.8106%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="2.4687%" y="213" width="0.3326%" height="15" fill="rgb(229,93,14)" fg:x="475" fg:w="64"/><text x="2.7617%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.06%)</title><rect x="2.8013%" y="213" width="0.0624%" height="15" fill="rgb(209,67,49)" fg:x="539" fg:w="12"/><text x="3.0943%" y="223.50"></text></g><g><title>leb128_decode (228 instructions, 1.18%)</title><rect x="2.8637%" y="213" width="1.1850%" height="15" fill="rgb(213,87,29)" fg:x="551" fg:w="228"/><text x="3.1566%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="4.0486%" y="213" width="0.3326%" height="15" fill="rgb(205,151,52)" fg:x="779" fg:w="64"/><text x="4.3416%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (17 instructions, 0.09%)</title><rect x="4.3813%" y="213" width="0.0884%" height="15" fill="rgb(253,215,39)" fg:x="843" fg:w="17"/><text x="4.6742%" y="223.50"></text></g><g><title>leb128_decode (228 instructions, 1.18%)</title><rect x="4.4696%" y="213" width="1.1850%" height="15" fill="rgb(221,220,41)" fg:x="860" fg:w="228"/><text x="4.7626%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="5.6546%" y="213" width="0.3326%" height="15" fill="rgb(218,133,21)" fg:x="1088" fg:w="64"/><text x="5.9476%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.06%)</title><rect x="5.9872%" y="213" width="0.0624%" height="15" fill="rgb(221,193,43)" fg:x="1152" fg:w="12"/><text x="6.2802%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="6.0496%" y="213" width="0.3326%" height="15" fill="rgb(240,128,52)" fg:x="1164" fg:w="64"/><text x="6.3426%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="6.3822%" y="213" width="0.3326%" height="15" fill="rgb(253,114,12)" fg:x="1228" fg:w="64"/><text x="6.6752%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.06%)</title><rect x="6.7148%" y="213" width="0.0624%" height="15" fill="rgb(215,223,47)" fg:x="1292" fg:w="12"/><text x="7.0078%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="6.7772%" y="213" width="0.3326%" height="15" fill="rgb(248,225,23)" fg:x="1304" fg:w="64"/><text x="7.0702%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="7.1098%" y="213" width="0.3326%" height="15" fill="rgb(250,108,0)" fg:x="1368" fg:w="64"/><text x="7.4028%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="7.4424%" y="213" width="0.2495%" height="15" fill="rgb(228,208,7)" fg:x="1432" fg:w="48"/><text x="7.7354%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="7.6919%" y="213" width="0.3326%" height="15" fill="rgb(244,45,10)" fg:x="1480" fg:w="64"/><text x="7.9849%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.06%)</title><rect x="8.0245%" y="213" width="0.0624%" height="15" fill="rgb(207,125,25)" fg:x="1544" fg:w="12"/><text x="8.3175%" y="223.50"></text></g><g><title>parse_idl_header (1,951 instructions, 10.14%)</title><rect x="0.3898%" y="229" width="10.1398%" height="15" fill="rgb(210,195,18)" fg:x="75" fg:w="1951"/><text x="0.6828%" y="239.50">parse_idl_he..</text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="10.5296%" y="213" width="0.0312%" height="15" fill="rgb(249,80,12)" fg:x="2026" fg:w="6"/><text x="10.8226%" y="223.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.08%)</title><rect x="10.5296%" y="229" width="0.0780%" height="15" fill="rgb(221,65,9)" fg:x="2026" fg:w="15"/><text x="10.8226%" y="239.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="10.6076%" y="229" width="0.2495%" height="15" fill="rgb(235,49,36)" fg:x="2041" fg:w="48"/><text x="10.9005%" y="239.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="10.8570%" y="229" width="0.3326%" height="15" fill="rgb(225,32,20)" fg:x="2089" fg:w="64"/><text x="11.1500%" y="239.50"></text></g><g><title>idl_limit_check (20 instructions, 0.10%)</title><rect x="11.1896%" y="213" width="0.1039%" height="15" fill="rgb(215,141,46)" fg:x="2153" fg:w="20"/><text x="11.4826%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="11.2936%" y="213" width="0.3326%" height="15" fill="rgb(250,160,47)" fg:x="2173" fg:w="64"/><text x="11.5866%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="11.6262%" y="213" width="0.2495%" height="15" fill="rgb(216,222,40)" fg:x="2237" fg:w="48"/><text x="11.9192%" y="223.50"></text></g><g><title>leb128_decode (183 instructions, 0.95%)</title><rect x="11.8757%" y="197" width="0.9511%" height="15" fill="rgb(234,217,39)" fg:x="2285" fg:w="183"/><text x="12.1687%" y="207.50"></text></g><g><title>find_field (219 instructions, 1.14%)</title><rect x="11.8757%" y="213" width="1.1382%" height="15" fill="rgb(207,178,40)" fg:x="2285" fg:w="219"/><text x="12.1687%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="13.0139%" y="213" width="0.3326%" height="15" fill="rgb(221,136,13)" fg:x="2504" fg:w="64"/><text x="13.3068%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.10%)</title><rect x="13.3465%" y="197" width="0.1039%" height="15" fill="rgb(249,199,10)" fg:x="2568" fg:w="20"/><text x="13.6395%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="13.4504%" y="197" width="0.2495%" height="15" fill="rgb(249,222,13)" fg:x="2588" fg:w="48"/><text x="13.7434%" y="207.50"></text></g><g><title>utf8_validate (248 instructions, 1.29%)</title><rect x="13.6999%" y="197" width="1.2889%" height="15" fill="rgb(244,185,38)" fg:x="2636" fg:w="248"/><text x="13.9929%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="14.9888%" y="181" width="0.2962%" height="15" fill="rgb(236,202,9)" fg:x="2884" fg:w="57"/><text x="15.2818%" y="191.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.37%)</title><rect x="14.9888%" y="197" width="0.3690%" height="15" fill="rgb(250,229,37)" fg:x="2884" fg:w="71"/><text x="15.2818%" y="207.50"></text></g><g><title>memcpy (176 instructions, 0.91%)</title><rect x="15.3578%" y="197" width="0.9147%" height="15" fill="rgb(206,174,23)" fg:x="2955" fg:w="176"/><text x="15.6508%" y="207.50"></text></g><g><title>@deserialize_go&lt;t&gt; (640 instructions, 3.33%)</title><rect x="13.3465%" y="213" width="3.3262%" height="15" fill="rgb(211,33,43)" fg:x="2568" fg:w="640"/><text x="13.6395%" y="223.50">@d..</text></g><g><title>leb128_decode (228 instructions, 1.18%)</title><rect x="16.6727%" y="197" width="1.1850%" height="15" fill="rgb(245,58,50)" fg:x="3208" fg:w="228"/><text x="16.9657%" y="207.50"></text></g><g><title>find_field (264 instructions, 1.37%)</title><rect x="16.6727%" y="213" width="1.3721%" height="15" fill="rgb(244,68,36)" fg:x="3208" fg:w="264"/><text x="16.9657%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="18.0448%" y="213" width="0.3326%" height="15" fill="rgb(232,229,15)" fg:x="3472" fg:w="64"/><text x="18.3378%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.10%)</title><rect x="18.3774%" y="197" width="0.1039%" height="15" fill="rgb(254,30,23)" fg:x="3536" fg:w="20"/><text x="18.6704%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="18.4814%" y="197" width="0.2495%" height="15" fill="rgb(235,160,14)" fg:x="3556" fg:w="48"/><text x="18.7743%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="18.7308%" y="181" width="0.2962%" height="15" fill="rgb(212,155,44)" fg:x="3604" fg:w="57"/><text x="19.0238%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="18.7308%" y="197" width="0.3378%" height="15" fill="rgb(226,2,50)" fg:x="3604" fg:w="65"/><text x="19.0238%" y="207.50"></text></g><g><title>memcpy (94 instructions, 0.49%)</title><rect x="19.0687%" y="197" width="0.4885%" height="15" fill="rgb(234,177,6)" fg:x="3669" fg:w="94"/><text x="19.3616%" y="207.50"></text></g><g><title>@deserialize_go&lt;P&gt; (340 instructions, 1.77%)</title><rect x="18.3774%" y="213" width="1.7671%" height="15" fill="rgb(217,24,9)" fg:x="3536" fg:w="340"/><text x="18.6704%" y="223.50"></text></g><g><title>leb128_decode (228 instructions, 1.18%)</title><rect x="20.1445%" y="197" width="1.1850%" height="15" fill="rgb(220,13,46)" fg:x="3876" fg:w="228"/><text x="20.4375%" y="207.50"></text></g><g><title>find_field (264 instructions, 1.37%)</title><rect x="20.1445%" y="213" width="1.3721%" height="15" fill="rgb(239,221,27)" fg:x="3876" fg:w="264"/><text x="20.4375%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="21.5166%" y="213" width="0.3326%" height="15" fill="rgb(222,198,25)" fg:x="4140" fg:w="64"/><text x="21.8095%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.10%)</title><rect x="21.8492%" y="213" width="0.1039%" height="15" fill="rgb(211,99,13)" fg:x="4204" fg:w="20"/><text x="22.1421%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="21.9531%" y="213" width="0.3326%" height="15" fill="rgb(232,111,31)" fg:x="4224" fg:w="64"/><text x="22.2461%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.33%)</title><rect x="22.2857%" y="213" width="0.3326%" height="15" fill="rgb(245,82,37)" fg:x="4288" fg:w="64"/><text x="22.5787%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.25%)</title><rect x="22.6184%" y="213" width="0.2495%" height="15" fill="rgb(227,149,46)" fg:x="4352" fg:w="48"/><text x="22.9113%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="22.8678%" y="197" width="0.2962%" height="15" fill="rgb(218,36,50)" fg:x="4400" fg:w="57"/><text x="23.1608%" y="207.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="22.8678%" y="213" width="0.3378%" height="15" fill="rgb(226,80,48)" fg:x="4400" fg:w="65"/><text x="23.1608%" y="223.50"></text></g><g><title>memcpy (319 instructions, 1.66%)</title><rect x="23.2057%" y="213" width="1.6579%" height="15" fill="rgb(238,224,15)" fg:x="4465" fg:w="319"/><text x="23.4986%" y="223.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="24.8636%" y="213" width="0.0312%" height="15" fill="rgb(241,136,10)" fg:x="4784" fg:w="6"/><text x="25.1565%" y="223.50"></text></g><g><title>@deserialize_go&lt;r(canister_id:P,message:B,method:t)&gt; (3,174 instructions, 16.50%)</title><rect x="11.1896%" y="229" width="16.4960%" height="15" fill="rgb(208,32,45)" fg:x="2153" fg:w="3174"/><text x="11.4826%" y="239.50">@deserialize_go&lt;r(can..</text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="27.6857%" y="197" width="0.2962%" height="15" fill="rgb(207,135,9)" fg:x="5327" fg:w="57"/><text x="27.9786%" y="207.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="27.6857%" y="213" width="0.3378%" height="15" fill="rgb(206,86,44)" fg:x="5327" fg:w="65"/><text x="27.9786%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="28.0235%" y="213" width="0.0884%" height="15" fill="rgb(245,177,15)" fg:x="5392" fg:w="17"/><text x="28.3165%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="28.1118%" y="165" width="0.2962%" height="15" fill="rgb(206,64,50)" fg:x="5409" fg:w="57"/><text x="28.4048%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="28.1118%" y="181" width="0.3378%" height="15" fill="rgb(234,36,40)" fg:x="5409" fg:w="65"/><text x="28.4048%" y="191.50"></text></g><g><title>memcpy (100 instructions, 0.52%)</title><rect x="28.4497%" y="181" width="0.5197%" height="15" fill="rgb(213,64,8)" fg:x="5474" fg:w="100"/><text x="28.7426%" y="191.50"></text></g><g><title>compute_crc32 (781 instructions, 4.06%)</title><rect x="28.9694%" y="181" width="4.0590%" height="15" fill="rgb(210,75,36)" fg:x="5574" fg:w="781"/><text x="29.2624%" y="191.50">com..</text></g><g><title>account_key (1,071 instructions, 5.57%)</title><rect x="28.1118%" y="197" width="5.5662%" height="15" fill="rgb(229,88,21)" fg:x="5409" fg:w="1071"/><text x="28.4048%" y="207.50">accoun..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="33.6781%" y="181" width="0.1455%" height="15" fill="rgb(252,204,47)" fg:x="6480" fg:w="28"/><text x="33.9711%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="33.8236%" y="165" width="0.0884%" height="15" fill="rgb(208,77,27)" fg:x="6508" fg:w="17"/><text x="34.1166%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.9120%" y="149" width="0.0884%" height="15" fill="rgb(221,76,26)" fg:x="6525" fg:w="17"/><text x="34.2049%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.0003%" y="149" width="0.0884%" height="15" fill="rgb(225,139,18)" fg:x="6542" fg:w="17"/><text x="34.2933%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.2758%" y="149" width="0.0884%" height="15" fill="rgb(230,137,11)" fg:x="6595" fg:w="17"/><text x="34.5687%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.3641%" y="149" width="0.0884%" height="15" fill="rgb(212,28,1)" fg:x="6612" fg:w="17"/><text x="34.6571%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.6448%" y="149" width="0.0884%" height="15" fill="rgb(248,164,17)" fg:x="6666" fg:w="17"/><text x="34.9377%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.7331%" y="149" width="0.0884%" height="15" fill="rgb(222,171,42)" fg:x="6683" fg:w="17"/><text x="35.0261%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="35.0138%" y="149" width="0.0884%" height="15" fill="rgb(243,84,45)" fg:x="6737" fg:w="17"/><text x="35.3067%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="35.1021%" y="149" width="0.0884%" height="15" fill="rgb(252,49,23)" fg:x="6754" fg:w="17"/><text x="35.3951%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="35.3776%" y="149" width="0.0884%" height="15" fill="rgb(215,19,7)" fg:x="6807" fg:w="17"/><text x="35.6705%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="35.4659%" y="149" width="0.0884%" height="15" fill="rgb(238,81,41)" fg:x="6824" fg:w="17"/><text x="35.7589%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="35.5543%" y="149" width="0.0884%" height="15" fill="rgb(210,199,37)" fg:x="6841" fg:w="17"/><text x="35.8473%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="35.6426%" y="149" width="0.0884%" height="15" fill="rgb(244,192,49)" fg:x="6858" fg:w="17"/><text x="35.9356%" y="159.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.00%)</title><rect x="35.7310%" y="133" width="3.9967%" height="15" fill="rgb(226,211,11)" fg:x="6875" fg:w="769"/><text x="36.0240%" y="143.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.04%)</title><rect x="35.7310%" y="149" width="4.0383%" height="15" fill="rgb(236,162,54)" fg:x="6875" fg:w="777"/><text x="36.0240%" y="159.50">equ..</text></g><g><title>@anon-func-191.5 (1,191 instructions, 6.19%)</title><rect x="33.9120%" y="165" width="6.1899%" height="15" fill="rgb(220,229,9)" fg:x="6525" fg:w="1191"/><text x="34.2049%" y="175.50">@anon-..</text></g><g><title>rec.4 (1,574 instructions, 8.18%)</title><rect x="33.8236%" y="181" width="8.1804%" height="15" fill="rgb(250,87,22)" fg:x="6508" fg:w="1574"/><text x="34.1166%" y="191.50">rec.4</text></g><g><title>get.2 (1,654 instructions, 8.60%)</title><rect x="33.6781%" y="197" width="8.5962%" height="15" fill="rgb(239,43,17)" fg:x="6480" fg:w="1654"/><text x="33.9711%" y="207.50">get.2</text></g><g><title>account_get (2,740 instructions, 14.24%)</title><rect x="28.1118%" y="213" width="14.2404%" height="15" fill="rgb(231,177,25)" fg:x="5409" fg:w="2740"/><text x="28.4048%" y="223.50">account_get</text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.09%)</title><rect x="42.3523%" y="213" width="0.0884%" height="15" fill="rgb(219,179,1)" fg:x="8149" fg:w="17"/><text x="42.6452%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="42.4406%" y="213" width="0.0884%" height="15" fill="rgb(238,219,53)" fg:x="8166" fg:w="17"/><text x="42.7336%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="42.5290%" y="213" width="0.0884%" height="15" fill="rgb(232,167,36)" fg:x="8183" fg:w="17"/><text x="42.8219%" y="223.50"></text></g><g><title>B_lt (12 instructions, 0.06%)</title><rect x="42.6173%" y="213" width="0.0624%" height="15" fill="rgb(244,19,51)" fg:x="8200" fg:w="12"/><text x="42.9103%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="42.6797%" y="213" width="0.0884%" height="15" fill="rgb(224,6,22)" fg:x="8212" fg:w="17"/><text x="42.9727%" y="223.50"></text></g><g><title>B_sub (34 instructions, 0.18%)</title><rect x="42.7680%" y="213" width="0.1767%" height="15" fill="rgb(224,145,5)" fg:x="8229" fg:w="34"/><text x="43.0610%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="42.9448%" y="165" width="0.2962%" height="15" fill="rgb(234,130,49)" fg:x="8263" fg:w="57"/><text x="43.2377%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="42.9448%" y="181" width="0.3378%" height="15" fill="rgb(254,6,2)" fg:x="8263" fg:w="65"/><text x="43.2377%" y="191.50"></text></g><g><title>memcpy (100 instructions, 0.52%)</title><rect x="43.2826%" y="181" width="0.5197%" height="15" fill="rgb(208,96,46)" fg:x="8328" fg:w="100"/><text x="43.5755%" y="191.50"></text></g><g><title>compute_crc32 (781 instructions, 4.06%)</title><rect x="43.8023%" y="181" width="4.0590%" height="15" fill="rgb(239,3,39)" fg:x="8428" fg:w="781"/><text x="44.0953%" y="191.50">com..</text></g><g><title>account_key (1,071 instructions, 5.57%)</title><rect x="42.9448%" y="197" width="5.5662%" height="15" fill="rgb(233,210,1)" fg:x="8263" fg:w="1071"/><text x="43.2377%" y="207.50">accoun..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="48.5110%" y="181" width="0.1455%" height="15" fill="rgb(244,137,37)" fg:x="9334" fg:w="28"/><text x="48.8040%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="48.6565%" y="165" width="0.0884%" height="15" fill="rgb(240,136,2)" fg:x="9362" fg:w="17"/><text x="48.9495%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.7449%" y="117" width="0.0884%" height="15" fill="rgb(239,18,37)" fg:x="9379" fg:w="17"/><text x="49.0378%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.8332%" y="117" width="0.0884%" height="15" fill="rgb(218,185,22)" fg:x="9396" fg:w="17"/><text x="49.1262%" y="127.50"></text></g><g><title>@anon-func-191.5 (70 instructions, 0.36%)</title><rect x="48.7449%" y="133" width="0.3638%" height="15" fill="rgb(225,218,4)" fg:x="9379" fg:w="70"/><text x="49.0378%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.1087%" y="101" width="0.0884%" height="15" fill="rgb(230,182,32)" fg:x="9449" fg:w="17"/><text x="49.4016%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.1970%" y="101" width="0.0884%" height="15" fill="rgb(242,56,43)" fg:x="9466" fg:w="17"/><text x="49.4900%" y="111.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.37%)</title><rect x="49.1087%" y="117" width="0.3690%" height="15" fill="rgb(233,99,24)" fg:x="9449" fg:w="71"/><text x="49.4016%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.4777%" y="85" width="0.0884%" height="15" fill="rgb(234,209,42)" fg:x="9520" fg:w="17"/><text x="49.7706%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.5660%" y="85" width="0.0884%" height="15" fill="rgb(227,7,12)" fg:x="9537" fg:w="17"/><text x="49.8590%" y="95.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.37%)</title><rect x="49.4777%" y="101" width="0.3690%" height="15" fill="rgb(245,203,43)" fg:x="9520" fg:w="71"/><text x="49.7706%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.8467%" y="69" width="0.0884%" height="15" fill="rgb(238,205,33)" fg:x="9591" fg:w="17"/><text x="50.1397%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="49.9350%" y="69" width="0.0884%" height="15" fill="rgb(231,56,7)" fg:x="9608" fg:w="17"/><text x="50.2280%" y="79.50"></text></g><g><title>@anon-func-191.5 (70 instructions, 0.36%)</title><rect x="49.8467%" y="85" width="0.3638%" height="15" fill="rgb(244,186,29)" fg:x="9591" fg:w="70"/><text x="50.1397%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="50.2105%" y="53" width="0.0884%" height="15" fill="rgb(234,111,31)" fg:x="9661" fg:w="17"/><text x="50.5035%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="50.2988%" y="53" width="0.0884%" height="15" fill="rgb(241,149,10)" fg:x="9678" fg:w="17"/><text x="50.5918%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="50.3872%" y="53" width="0.0884%" height="15" fill="rgb(249,206,44)" fg:x="9695" fg:w="17"/><text x="50.6802%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="50.4755%" y="53" width="0.0884%" height="15" fill="rgb(251,153,30)" fg:x="9712" fg:w="17"/><text x="50.7685%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.00%)</title><rect x="50.5639%" y="37" width="3.9967%" height="15" fill="rgb(239,152,38)" fg:x="9729" fg:w="769"/><text x="50.8569%" y="47.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.04%)</title><rect x="50.5639%" y="53" width="4.0383%" height="15" fill="rgb(249,139,47)" fg:x="9729" fg:w="777"/><text x="50.8569%" y="63.50">equ..</text></g><g><title>@anon-func-191.5 (909 instructions, 4.72%)</title><rect x="50.2105%" y="69" width="4.7243%" height="15" fill="rgb(244,64,35)" fg:x="9661" fg:w="909"/><text x="50.5035%" y="79.50">@ano..</text></g><g><title>del (1,005 instructions, 5.22%)</title><rect x="50.2105%" y="85" width="5.2232%" height="15" fill="rgb(216,46,15)" fg:x="9661" fg:w="1005"/><text x="50.5035%" y="95.50">del</text></g><g><title>del (1,230 instructions, 6.39%)</title><rect x="49.8467%" y="101" width="6.3926%" height="15" fill="rgb(250,74,19)" fg:x="9591" fg:w="1230"/><text x="50.1397%" y="111.50">del</text></g><g><title>del (1,456 instructions, 7.57%)</title><rect x="49.4777%" y="117" width="7.5672%" height="15" fill="rgb(249,42,33)" fg:x="9520" fg:w="1456"/><text x="49.7706%" y="127.50">del</text></g><g><title>del (1,682 instructions, 8.74%)</title><rect x="49.1087%" y="133" width="8.7417%" height="15" fill="rgb(242,149,17)" fg:x="9449" fg:w="1682"/><text x="49.4016%" y="143.50">del</text></g><g><title>del (1,907 instructions, 9.91%)</title><rect x="48.7449%" y="149" width="9.9111%" height="15" fill="rgb(244,29,21)" fg:x="9379" fg:w="1907"/><text x="49.0378%" y="159.50">del</text></g><g><title>replace (2,121 instructions, 11.02%)</title><rect x="48.7449%" y="165" width="11.0233%" height="15" fill="rgb(220,130,37)" fg:x="9379" fg:w="2121"/><text x="49.0378%" y="175.50">replace</text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.7682%" y="133" width="0.0624%" height="15" fill="rgb(211,67,2)" fg:x="11500" fg:w="12"/><text x="60.0612%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="59.8306%" y="133" width="0.1403%" height="15" fill="rgb(235,68,52)" fg:x="11512" fg:w="27"/><text x="60.1235%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.9709%" y="133" width="0.0624%" height="15" fill="rgb(246,142,3)" fg:x="11539" fg:w="12"/><text x="60.2639%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="60.0333%" y="133" width="0.1403%" height="15" fill="rgb(241,25,7)" fg:x="11551" fg:w="27"/><text x="60.3262%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="60.1736%" y="133" width="0.0624%" height="15" fill="rgb(242,119,39)" fg:x="11578" fg:w="12"/><text x="60.4666%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="60.2360%" y="133" width="0.1403%" height="15" fill="rgb(241,98,45)" fg:x="11590" fg:w="27"/><text x="60.5289%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="60.3763%" y="133" width="0.0624%" height="15" fill="rgb(254,28,30)" fg:x="11617" fg:w="12"/><text x="60.6692%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="60.4386%" y="133" width="0.1403%" height="15" fill="rgb(241,142,54)" fg:x="11629" fg:w="27"/><text x="60.7316%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="60.5790%" y="133" width="0.0624%" height="15" fill="rgb(222,85,15)" fg:x="11656" fg:w="12"/><text x="60.8719%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="60.6413%" y="133" width="0.1403%" height="15" fill="rgb(210,85,47)" fg:x="11668" fg:w="27"/><text x="60.9343%" y="143.50"></text></g><g><title>rec (601 instructions, 3.12%)</title><rect x="59.7682%" y="149" width="3.1235%" height="15" fill="rgb(224,206,25)" fg:x="11500" fg:w="601"/><text x="60.0612%" y="159.50">rec</text></g><g><title>leaf (610 instructions, 3.17%)</title><rect x="59.7682%" y="165" width="3.1703%" height="15" fill="rgb(243,201,19)" fg:x="11500" fg:w="610"/><text x="60.0612%" y="175.50">le..</text></g><g><title>recursiveReplace (2,821 instructions, 14.66%)</title><rect x="48.6565%" y="181" width="14.6614%" height="15" fill="rgb(236,59,4)" fg:x="9362" fg:w="2821"/><text x="48.9495%" y="191.50">recursiveReplace</text></g><g><title>put.1 (2,988 instructions, 15.53%)</title><rect x="48.5110%" y="197" width="15.5293%" height="15" fill="rgb(254,179,45)" fg:x="9334" fg:w="2988"/><text x="48.8040%" y="207.50">put.1</text></g><g><title>account_put (4,111 instructions, 21.37%)</title><rect x="42.9448%" y="213" width="21.3658%" height="15" fill="rgb(226,14,10)" fg:x="8263" fg:w="4111"/><text x="43.2377%" y="223.50">account_put</text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="64.3106%" y="197" width="0.1403%" height="15" fill="rgb(244,27,41)" fg:x="12374" fg:w="27"/><text x="64.6036%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.32%)</title><rect x="64.4509%" y="149" width="0.3170%" height="15" fill="rgb(235,35,32)" fg:x="12401" fg:w="61"/><text x="64.7439%" y="159.50"></text></g><g><title>memset (106 instructions, 0.55%)</title><rect x="64.7679%" y="149" width="0.5509%" height="15" fill="rgb(218,68,31)" fg:x="12462" fg:w="106"/><text x="65.0609%" y="159.50"></text></g><g><title>mp_calloc (203 instructions, 1.06%)</title><rect x="64.4509%" y="165" width="1.0550%" height="15" fill="rgb(207,120,37)" fg:x="12401" fg:w="203"/><text x="64.7439%" y="175.50"></text></g><g><title>mp_init (224 instructions, 1.16%)</title><rect x="64.4509%" y="181" width="1.1642%" height="15" fill="rgb(227,98,0)" fg:x="12401" fg:w="224"/><text x="64.7439%" y="191.50"></text></g><g><title>mp_set_u64 (120 instructions, 0.62%)</title><rect x="65.6151%" y="181" width="0.6237%" height="15" fill="rgb(207,7,3)" fg:x="12625" fg:w="120"/><text x="65.9081%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.17%)</title><rect x="66.2388%" y="181" width="0.1715%" height="15" fill="rgb(206,98,19)" fg:x="12745" fg:w="33"/><text x="66.5317%" y="191.50"></text></g><g><title>bigint_of_word64 (432 instructions, 2.25%)</title><rect x="64.4509%" y="197" width="2.2452%" height="15" fill="rgb(217,5,26)" fg:x="12401" fg:w="432"/><text x="64.7439%" y="207.50">b..</text></g><g><title>proposal_key (316 instructions, 1.64%)</title><rect x="66.6961%" y="181" width="1.6423%" height="15" fill="rgb(235,190,38)" fg:x="12833" fg:w="316"/><text x="66.9891%" y="191.50"></text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="68.3384%" y="165" width="0.1455%" height="15" fill="rgb(247,86,24)" fg:x="13149" fg:w="28"/><text x="68.6314%" y="175.50"></text></g><g><title>del (31 instructions, 0.16%)</title><rect x="68.4840%" y="133" width="0.1611%" height="15" fill="rgb(205,101,16)" fg:x="13177" fg:w="31"/><text x="68.7769%" y="143.50"></text></g><g><title>replace (245 instructions, 1.27%)</title><rect x="68.4840%" y="149" width="1.2733%" height="15" fill="rgb(246,168,33)" fg:x="13177" fg:w="245"/><text x="68.7769%" y="159.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="69.7573%" y="117" width="0.0624%" height="15" fill="rgb(231,114,1)" fg:x="13422" fg:w="12"/><text x="70.0503%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.14%)</title><rect x="69.8197%" y="117" width="0.1403%" height="15" fill="rgb(207,184,53)" fg:x="13434" fg:w="27"/><text x="70.1126%" y="127.50"></text></g><g><title>rec (201 instructions, 1.04%)</title><rect x="69.7573%" y="133" width="1.0446%" height="15" fill="rgb(224,95,51)" fg:x="13422" fg:w="201"/><text x="70.0503%" y="143.50"></text></g><g><title>leaf (210 instructions, 1.09%)</title><rect x="69.7573%" y="149" width="1.0914%" height="15" fill="rgb(212,188,45)" fg:x="13422" fg:w="210"/><text x="70.0503%" y="159.50"></text></g><g><title>recursiveReplace (496 instructions, 2.58%)</title><rect x="68.4840%" y="165" width="2.5778%" height="15" fill="rgb(223,154,38)" fg:x="13177" fg:w="496"/><text x="68.7769%" y="175.50">r..</text></g><g><title>put.1 (663 instructions, 3.45%)</title><rect x="68.3384%" y="181" width="3.4458%" height="15" fill="rgb(251,22,52)" fg:x="13149" fg:w="663"/><text x="68.6314%" y="191.50">pu..</text></g><g><title>proposal_put (1,031 instructions, 5.36%)</title><rect x="66.6961%" y="197" width="5.3583%" height="15" fill="rgb(229,209,22)" fg:x="12833" fg:w="1031"/><text x="66.9891%" y="207.50">propo..</text></g><g><title>@anon-func-74.66 (2,106 instructions, 10.95%)</title><rect x="64.3106%" y="213" width="10.9454%" height="15" fill="rgb(234,138,34)" fg:x="12374" fg:w="2106"/><text x="64.6036%" y="223.50">@anon-func-74..</text></g><g><title>@buffer_size&lt;N&gt; (27 instructions, 0.14%)</title><rect x="75.2560%" y="197" width="0.1403%" height="15" fill="rgb(212,95,11)" fg:x="14480" fg:w="27"/><text x="75.5489%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="75.3963%" y="181" width="0.2962%" height="15" fill="rgb(240,179,47)" fg:x="14507" fg:w="57"/><text x="75.6893%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="75.3963%" y="197" width="0.3378%" height="15" fill="rgb(240,163,11)" fg:x="14507" fg:w="65"/><text x="75.6893%" y="207.50"></text></g><g><title>memcpy (86 instructions, 0.45%)</title><rect x="75.7341%" y="197" width="0.4470%" height="15" fill="rgb(236,37,12)" fg:x="14572" fg:w="86"/><text x="76.0271%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.30%)</title><rect x="76.1811%" y="181" width="0.2962%" height="15" fill="rgb(232,164,16)" fg:x="14658" fg:w="57"/><text x="76.4740%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.34%)</title><rect x="76.1811%" y="197" width="0.3378%" height="15" fill="rgb(244,205,15)" fg:x="14658" fg:w="65"/><text x="76.4740%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="76.5189%" y="197" width="0.0572%" height="15" fill="rgb(223,117,47)" fg:x="14723" fg:w="11"/><text x="76.8119%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="76.5761%" y="181" width="0.0572%" height="15" fill="rgb(244,107,35)" fg:x="14734" fg:w="11"/><text x="76.8690%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.27%)</title><rect x="76.5761%" y="197" width="0.2651%" height="15" fill="rgb(205,140,8)" fg:x="14734" fg:w="51"/><text x="76.8690%" y="207.50"></text></g><g><title>$lambda.29 (1,487 instructions, 7.73%)</title><rect x="75.2560%" y="213" width="7.7283%" height="15" fill="rgb(228,84,46)" fg:x="14480" fg:w="1487"/><text x="75.5489%" y="223.50">$lambda.29</text></g><g><title>$lambda.6 (11,926 instructions, 61.98%)</title><rect x="27.6857%" y="229" width="61.9822%" height="15" fill="rgb(254,188,9)" fg:x="5327" fg:w="11926"/><text x="27.9786%" y="239.50">$lambda.6</text></g><g><title>schedule_copying_gc (108 instructions, 0.56%)</title><rect x="89.6679%" y="229" width="0.5613%" height="15" fill="rgb(206,112,54)" fg:x="17253" fg:w="108"/><text x="89.9609%" y="239.50"></text></g><g><title>trans_state4 (11 instructions, 0.06%)</title><rect x="90.2292%" y="229" width="0.0572%" height="15" fill="rgb(216,84,49)" fg:x="17361" fg:w="11"/><text x="90.5222%" y="239.50"></text></g><g><title>all (19,241 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="19241"/><text x="0.2930%" y="271.50"></text></g><g><title>submit_proposal (19,241 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="19241"/><text x="0.2930%" y="255.50">submit_proposal</text></g></svg></svg>