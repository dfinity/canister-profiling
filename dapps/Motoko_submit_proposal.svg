<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">DAO.submit_proposal</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="18597"><g><title>trans_state5 (10 instructions, 0.05%)</title><rect x="0.0000%" y="229" width="0.0538%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="10"/><text x="0.2930%" y="239.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="0.0538%" y="229" width="0.3011%" height="15" fill="rgb(219,88,35)" fg:x="10" fg:w="56"/><text x="0.3467%" y="239.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="0.3549%" y="213" width="0.2689%" height="15" fill="rgb(220,193,23)" fg:x="66" fg:w="50"/><text x="0.6479%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="0.6238%" y="213" width="0.3011%" height="15" fill="rgb(230,90,52)" fg:x="116" fg:w="56"/><text x="0.9167%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="0.9249%" y="213" width="0.3441%" height="15" fill="rgb(252,106,19)" fg:x="172" fg:w="64"/><text x="1.2178%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="1.2690%" y="213" width="0.2689%" height="15" fill="rgb(206,74,20)" fg:x="236" fg:w="50"/><text x="1.5620%" y="223.50"></text></g><g><title>leb128_decode (173 instructions, 0.93%)</title><rect x="1.5379%" y="213" width="0.9303%" height="15" fill="rgb(230,138,44)" fg:x="286" fg:w="173"/><text x="1.8309%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="2.4681%" y="213" width="0.3441%" height="15" fill="rgb(235,182,43)" fg:x="459" fg:w="64"/><text x="2.7611%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.06%)</title><rect x="2.8123%" y="213" width="0.0645%" height="15" fill="rgb(242,16,51)" fg:x="523" fg:w="12"/><text x="3.1053%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="2.8768%" y="213" width="1.1507%" height="15" fill="rgb(248,9,4)" fg:x="535" fg:w="214"/><text x="3.1698%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="4.0275%" y="213" width="0.3441%" height="15" fill="rgb(210,31,22)" fg:x="749" fg:w="64"/><text x="4.3205%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (17 instructions, 0.09%)</title><rect x="4.3717%" y="213" width="0.0914%" height="15" fill="rgb(239,54,39)" fg:x="813" fg:w="17"/><text x="4.6646%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="4.4631%" y="213" width="1.1507%" height="15" fill="rgb(230,99,41)" fg:x="830" fg:w="214"/><text x="4.7561%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="5.6138%" y="213" width="0.3441%" height="15" fill="rgb(253,106,12)" fg:x="1044" fg:w="64"/><text x="5.9068%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.06%)</title><rect x="5.9580%" y="213" width="0.0645%" height="15" fill="rgb(213,46,41)" fg:x="1108" fg:w="12"/><text x="6.2509%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.0225%" y="213" width="0.3441%" height="15" fill="rgb(215,133,35)" fg:x="1120" fg:w="64"/><text x="6.3154%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.3666%" y="213" width="0.3441%" height="15" fill="rgb(213,28,5)" fg:x="1184" fg:w="64"/><text x="6.6596%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.06%)</title><rect x="6.7108%" y="213" width="0.0645%" height="15" fill="rgb(215,77,49)" fg:x="1248" fg:w="12"/><text x="7.0037%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.7753%" y="213" width="0.3441%" height="15" fill="rgb(248,100,22)" fg:x="1260" fg:w="64"/><text x="7.0683%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="7.1194%" y="213" width="0.3441%" height="15" fill="rgb(208,67,9)" fg:x="1324" fg:w="64"/><text x="7.4124%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="7.4636%" y="213" width="0.2689%" height="15" fill="rgb(219,133,21)" fg:x="1388" fg:w="50"/><text x="7.7565%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="7.7324%" y="213" width="0.3441%" height="15" fill="rgb(246,46,29)" fg:x="1438" fg:w="64"/><text x="8.0254%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.06%)</title><rect x="8.0766%" y="213" width="0.0645%" height="15" fill="rgb(246,185,52)" fg:x="1502" fg:w="12"/><text x="8.3695%" y="223.50"></text></g><g><title>parse_idl_header (1,917 instructions, 10.31%)</title><rect x="0.3549%" y="229" width="10.3081%" height="15" fill="rgb(252,136,11)" fg:x="66" fg:w="1917"/><text x="0.6479%" y="239.50">parse_idl_he..</text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="10.6630%" y="213" width="0.0323%" height="15" fill="rgb(219,138,53)" fg:x="1983" fg:w="6"/><text x="10.9560%" y="223.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.08%)</title><rect x="10.6630%" y="229" width="0.0807%" height="15" fill="rgb(211,51,23)" fg:x="1983" fg:w="15"/><text x="10.9560%" y="239.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="10.7437%" y="229" width="0.2689%" height="15" fill="rgb(247,221,28)" fg:x="1998" fg:w="50"/><text x="11.0366%" y="239.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="11.0125%" y="229" width="0.3441%" height="15" fill="rgb(251,222,45)" fg:x="2048" fg:w="64"/><text x="11.3055%" y="239.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="11.3567%" y="213" width="0.3441%" height="15" fill="rgb(217,162,53)" fg:x="2112" fg:w="64"/><text x="11.6496%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="11.7008%" y="213" width="0.2689%" height="15" fill="rgb(229,93,14)" fg:x="2176" fg:w="50"/><text x="11.9938%" y="223.50"></text></g><g><title>leb128_decode (173 instructions, 0.93%)</title><rect x="11.9697%" y="197" width="0.9303%" height="15" fill="rgb(209,67,49)" fg:x="2226" fg:w="173"/><text x="12.2626%" y="207.50"></text></g><g><title>find_field (209 instructions, 1.12%)</title><rect x="11.9697%" y="213" width="1.1238%" height="15" fill="rgb(213,87,29)" fg:x="2226" fg:w="209"/><text x="12.2626%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="13.0935%" y="213" width="0.3441%" height="15" fill="rgb(205,151,52)" fg:x="2435" fg:w="64"/><text x="13.3865%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="13.4377%" y="197" width="0.2689%" height="15" fill="rgb(253,215,39)" fg:x="2499" fg:w="50"/><text x="13.7306%" y="207.50"></text></g><g><title>utf8_validate (248 instructions, 1.33%)</title><rect x="13.7065%" y="197" width="1.3335%" height="15" fill="rgb(221,220,41)" fg:x="2549" fg:w="248"/><text x="13.9995%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="15.0401%" y="181" width="0.3011%" height="15" fill="rgb(218,133,21)" fg:x="2797" fg:w="56"/><text x="15.3330%" y="191.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.37%)</title><rect x="15.0401%" y="197" width="0.3710%" height="15" fill="rgb(221,193,43)" fg:x="2797" fg:w="69"/><text x="15.3330%" y="207.50"></text></g><g><title>memcpy (176 instructions, 0.95%)</title><rect x="15.4111%" y="197" width="0.9464%" height="15" fill="rgb(240,128,52)" fg:x="2866" fg:w="176"/><text x="15.7041%" y="207.50"></text></g><g><title>@deserialize_go&lt;t&gt; (612 instructions, 3.29%)</title><rect x="13.4377%" y="213" width="3.2909%" height="15" fill="rgb(253,114,12)" fg:x="2499" fg:w="612"/><text x="13.7306%" y="223.50">@d..</text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="16.7285%" y="197" width="1.1507%" height="15" fill="rgb(215,223,47)" fg:x="3111" fg:w="214"/><text x="17.0215%" y="207.50"></text></g><g><title>find_field (250 instructions, 1.34%)</title><rect x="16.7285%" y="213" width="1.3443%" height="15" fill="rgb(248,225,23)" fg:x="3111" fg:w="250"/><text x="17.0215%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="18.0728%" y="213" width="0.3441%" height="15" fill="rgb(250,108,0)" fg:x="3361" fg:w="64"/><text x="18.3658%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="18.4169%" y="197" width="0.2689%" height="15" fill="rgb(228,208,7)" fg:x="3425" fg:w="50"/><text x="18.7099%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="18.6858%" y="197" width="0.3011%" height="15" fill="rgb(244,45,10)" fg:x="3475" fg:w="56"/><text x="18.9788%" y="207.50"></text></g><g><title>memcpy (94 instructions, 0.51%)</title><rect x="18.9869%" y="197" width="0.5055%" height="15" fill="rgb(207,125,25)" fg:x="3531" fg:w="94"/><text x="19.2799%" y="207.50"></text></g><g><title>@deserialize_go&lt;P&gt; (307 instructions, 1.65%)</title><rect x="18.4169%" y="213" width="1.6508%" height="15" fill="rgb(210,195,18)" fg:x="3425" fg:w="307"/><text x="18.7099%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="20.0678%" y="197" width="1.1507%" height="15" fill="rgb(249,80,12)" fg:x="3732" fg:w="214"/><text x="20.3607%" y="207.50"></text></g><g><title>find_field (250 instructions, 1.34%)</title><rect x="20.0678%" y="213" width="1.3443%" height="15" fill="rgb(221,65,9)" fg:x="3732" fg:w="250"/><text x="20.3607%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="21.4121%" y="213" width="0.3441%" height="15" fill="rgb(235,49,36)" fg:x="3982" fg:w="64"/><text x="21.7050%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="21.7562%" y="213" width="0.3441%" height="15" fill="rgb(225,32,20)" fg:x="4046" fg:w="64"/><text x="22.0492%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="22.1003%" y="213" width="0.3441%" height="15" fill="rgb(215,141,46)" fg:x="4110" fg:w="64"/><text x="22.3933%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="22.4445%" y="213" width="0.2689%" height="15" fill="rgb(250,160,47)" fg:x="4174" fg:w="50"/><text x="22.7374%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="22.7133%" y="213" width="0.3011%" height="15" fill="rgb(216,222,40)" fg:x="4224" fg:w="56"/><text x="23.0063%" y="223.50"></text></g><g><title>memcpy (319 instructions, 1.72%)</title><rect x="23.0145%" y="213" width="1.7153%" height="15" fill="rgb(234,217,39)" fg:x="4280" fg:w="319"/><text x="23.3074%" y="223.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="24.7298%" y="213" width="0.0323%" height="15" fill="rgb(207,178,40)" fg:x="4599" fg:w="6"/><text x="25.0228%" y="223.50"></text></g><g><title>@deserialize_go&lt;r(canister_id:P,message:B,method:t)&gt; (3,017 instructions, 16.22%)</title><rect x="11.3567%" y="229" width="16.2230%" height="15" fill="rgb(221,136,13)" fg:x="2112" fg:w="3017"/><text x="11.6496%" y="239.50">@deserialize_go&lt;r(can..</text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="27.5797%" y="213" width="0.3011%" height="15" fill="rgb(249,199,10)" fg:x="5129" fg:w="56"/><text x="27.8727%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="27.8808%" y="213" width="0.0914%" height="15" fill="rgb(249,222,13)" fg:x="5185" fg:w="17"/><text x="28.1738%" y="223.50"></text></g><g><title>compute_crc32 (778 instructions, 4.18%)</title><rect x="27.9723%" y="181" width="4.1835%" height="15" fill="rgb(244,185,38)" fg:x="5202" fg:w="778"/><text x="28.2652%" y="191.50">comp..</text></g><g><title>account_key (873 instructions, 4.69%)</title><rect x="27.9723%" y="197" width="4.6943%" height="15" fill="rgb(236,202,9)" fg:x="5202" fg:w="873"/><text x="28.2652%" y="207.50">acco..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="32.6666%" y="181" width="0.1506%" height="15" fill="rgb(250,229,37)" fg:x="6075" fg:w="28"/><text x="32.9595%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="32.8171%" y="165" width="0.0914%" height="15" fill="rgb(206,174,23)" fg:x="6103" fg:w="17"/><text x="33.1101%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="32.9085%" y="149" width="0.0914%" height="15" fill="rgb(211,33,43)" fg:x="6120" fg:w="17"/><text x="33.2015%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="32.9999%" y="149" width="0.0914%" height="15" fill="rgb(245,58,50)" fg:x="6137" fg:w="17"/><text x="33.2929%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.2849%" y="149" width="0.0914%" height="15" fill="rgb(244,68,36)" fg:x="6190" fg:w="17"/><text x="33.5779%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.3764%" y="149" width="0.0914%" height="15" fill="rgb(232,229,15)" fg:x="6207" fg:w="17"/><text x="33.6693%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.6667%" y="149" width="0.0914%" height="15" fill="rgb(254,30,23)" fg:x="6261" fg:w="17"/><text x="33.9597%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.7581%" y="149" width="0.0914%" height="15" fill="rgb(235,160,14)" fg:x="6278" fg:w="17"/><text x="34.0511%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.0431%" y="149" width="0.0914%" height="15" fill="rgb(212,155,44)" fg:x="6331" fg:w="17"/><text x="34.3361%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.1345%" y="149" width="0.0914%" height="15" fill="rgb(226,2,50)" fg:x="6348" fg:w="17"/><text x="34.4275%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.4195%" y="149" width="0.0914%" height="15" fill="rgb(234,177,6)" fg:x="6401" fg:w="17"/><text x="34.7125%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.5109%" y="149" width="0.0914%" height="15" fill="rgb(217,24,9)" fg:x="6418" fg:w="17"/><text x="34.8039%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="34.6024%" y="149" width="0.0914%" height="15" fill="rgb(220,13,46)" fg:x="6435" fg:w="17"/><text x="34.8953%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="34.6938%" y="149" width="0.0914%" height="15" fill="rgb(239,221,27)" fg:x="6452" fg:w="17"/><text x="34.9867%" y="159.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.14%)</title><rect x="34.7852%" y="133" width="4.1351%" height="15" fill="rgb(222,198,25)" fg:x="6469" fg:w="769"/><text x="35.0781%" y="143.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.18%)</title><rect x="34.7852%" y="149" width="4.1781%" height="15" fill="rgb(211,99,13)" fg:x="6469" fg:w="777"/><text x="35.0781%" y="159.50">equa..</text></g><g><title>@anon-func-192.5 (1,190 instructions, 6.40%)</title><rect x="32.9085%" y="165" width="6.3989%" height="15" fill="rgb(232,111,31)" fg:x="6120" fg:w="1190"/><text x="33.2015%" y="175.50">@anon-f..</text></g><g><title>rec.4 (1,573 instructions, 8.46%)</title><rect x="32.8171%" y="181" width="8.4584%" height="15" fill="rgb(245,82,37)" fg:x="6103" fg:w="1573"/><text x="33.1101%" y="191.50">rec.4</text></g><g><title>get.2 (1,653 instructions, 8.89%)</title><rect x="32.6666%" y="197" width="8.8885%" height="15" fill="rgb(227,149,46)" fg:x="6075" fg:w="1653"/><text x="32.9595%" y="207.50">get.2</text></g><g><title>account_get (2,541 instructions, 13.66%)</title><rect x="27.9723%" y="213" width="13.6635%" height="15" fill="rgb(218,36,50)" fg:x="5202" fg:w="2541"/><text x="28.2652%" y="223.50">account_get</text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.09%)</title><rect x="41.6357%" y="213" width="0.0914%" height="15" fill="rgb(226,80,48)" fg:x="7743" fg:w="17"/><text x="41.9287%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.7272%" y="213" width="0.0914%" height="15" fill="rgb(238,224,15)" fg:x="7760" fg:w="17"/><text x="42.0201%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.8186%" y="213" width="0.0914%" height="15" fill="rgb(241,136,10)" fg:x="7777" fg:w="17"/><text x="42.1115%" y="223.50"></text></g><g><title>B_lt (12 instructions, 0.06%)</title><rect x="41.9100%" y="213" width="0.0645%" height="15" fill="rgb(208,32,45)" fg:x="7794" fg:w="12"/><text x="42.2030%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.9745%" y="213" width="0.0914%" height="15" fill="rgb(207,135,9)" fg:x="7806" fg:w="17"/><text x="42.2675%" y="223.50"></text></g><g><title>B_sub (34 instructions, 0.18%)</title><rect x="42.0659%" y="213" width="0.1828%" height="15" fill="rgb(206,86,44)" fg:x="7823" fg:w="34"/><text x="42.3589%" y="223.50"></text></g><g><title>compute_crc32 (778 instructions, 4.18%)</title><rect x="42.2487%" y="181" width="4.1835%" height="15" fill="rgb(245,177,15)" fg:x="7857" fg:w="778"/><text x="42.5417%" y="191.50">comp..</text></g><g><title>account_key (873 instructions, 4.69%)</title><rect x="42.2487%" y="197" width="4.6943%" height="15" fill="rgb(206,64,50)" fg:x="7857" fg:w="873"/><text x="42.5417%" y="207.50">acco..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="46.9431%" y="181" width="0.1506%" height="15" fill="rgb(234,36,40)" fg:x="8730" fg:w="28"/><text x="47.2360%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="47.0936%" y="165" width="0.0914%" height="15" fill="rgb(213,64,8)" fg:x="8758" fg:w="17"/><text x="47.3866%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.1850%" y="117" width="0.0914%" height="15" fill="rgb(210,75,36)" fg:x="8775" fg:w="17"/><text x="47.4780%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.2764%" y="117" width="0.0914%" height="15" fill="rgb(229,88,21)" fg:x="8792" fg:w="17"/><text x="47.5694%" y="127.50"></text></g><g><title>@anon-func-192.5 (70 instructions, 0.38%)</title><rect x="47.1850%" y="133" width="0.3764%" height="15" fill="rgb(252,204,47)" fg:x="8775" fg:w="70"/><text x="47.4780%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.5614%" y="101" width="0.0914%" height="15" fill="rgb(208,77,27)" fg:x="8845" fg:w="17"/><text x="47.8544%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.6528%" y="101" width="0.0914%" height="15" fill="rgb(221,76,26)" fg:x="8862" fg:w="17"/><text x="47.9458%" y="111.50"></text></g><g><title>@anon-func-192.5 (71 instructions, 0.38%)</title><rect x="47.5614%" y="117" width="0.3818%" height="15" fill="rgb(225,139,18)" fg:x="8845" fg:w="71"/><text x="47.8544%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.9432%" y="85" width="0.0914%" height="15" fill="rgb(230,137,11)" fg:x="8916" fg:w="17"/><text x="48.2362%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.0346%" y="85" width="0.0914%" height="15" fill="rgb(212,28,1)" fg:x="8933" fg:w="17"/><text x="48.3276%" y="95.50"></text></g><g><title>@anon-func-192.5 (70 instructions, 0.38%)</title><rect x="47.9432%" y="101" width="0.3764%" height="15" fill="rgb(248,164,17)" fg:x="8916" fg:w="70"/><text x="48.2362%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.3196%" y="69" width="0.0914%" height="15" fill="rgb(222,171,42)" fg:x="8986" fg:w="17"/><text x="48.6126%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.4110%" y="69" width="0.0914%" height="15" fill="rgb(243,84,45)" fg:x="9003" fg:w="17"/><text x="48.7040%" y="79.50"></text></g><g><title>@anon-func-192.5 (70 instructions, 0.38%)</title><rect x="48.3196%" y="85" width="0.3764%" height="15" fill="rgb(252,49,23)" fg:x="8986" fg:w="70"/><text x="48.6126%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.6960%" y="53" width="0.0914%" height="15" fill="rgb(215,19,7)" fg:x="9056" fg:w="17"/><text x="48.9890%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.7874%" y="53" width="0.0914%" height="15" fill="rgb(238,81,41)" fg:x="9073" fg:w="17"/><text x="49.0804%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="48.8789%" y="53" width="0.0914%" height="15" fill="rgb(210,199,37)" fg:x="9090" fg:w="17"/><text x="49.1718%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="48.9703%" y="53" width="0.0914%" height="15" fill="rgb(244,192,49)" fg:x="9107" fg:w="17"/><text x="49.2632%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.14%)</title><rect x="49.0617%" y="37" width="4.1351%" height="15" fill="rgb(226,211,11)" fg:x="9124" fg:w="769"/><text x="49.3546%" y="47.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.18%)</title><rect x="49.0617%" y="53" width="4.1781%" height="15" fill="rgb(236,162,54)" fg:x="9124" fg:w="777"/><text x="49.3546%" y="63.50">equa..</text></g><g><title>@anon-func-192.5 (909 instructions, 4.89%)</title><rect x="48.6960%" y="69" width="4.8879%" height="15" fill="rgb(220,229,9)" fg:x="9056" fg:w="909"/><text x="48.9890%" y="79.50">@anon..</text></g><g><title>del (1,005 instructions, 5.40%)</title><rect x="48.6960%" y="85" width="5.4041%" height="15" fill="rgb(250,87,22)" fg:x="9056" fg:w="1005"/><text x="48.9890%" y="95.50">del</text></g><g><title>del (1,230 instructions, 6.61%)</title><rect x="48.3196%" y="101" width="6.6140%" height="15" fill="rgb(239,43,17)" fg:x="8986" fg:w="1230"/><text x="48.6126%" y="111.50">del</text></g><g><title>del (1,455 instructions, 7.82%)</title><rect x="47.9432%" y="117" width="7.8238%" height="15" fill="rgb(231,177,25)" fg:x="8916" fg:w="1455"/><text x="48.2362%" y="127.50">del</text></g><g><title>del (1,681 instructions, 9.04%)</title><rect x="47.5614%" y="133" width="9.0391%" height="15" fill="rgb(219,179,1)" fg:x="8845" fg:w="1681"/><text x="47.8544%" y="143.50">del</text></g><g><title>del (1,906 instructions, 10.25%)</title><rect x="47.1850%" y="149" width="10.2490%" height="15" fill="rgb(238,219,53)" fg:x="8775" fg:w="1906"/><text x="47.4780%" y="159.50">del</text></g><g><title>replace (2,120 instructions, 11.40%)</title><rect x="47.1850%" y="165" width="11.3997%" height="15" fill="rgb(232,167,36)" fg:x="8775" fg:w="2120"/><text x="47.4780%" y="175.50">replace</text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="58.5847%" y="133" width="0.0645%" height="15" fill="rgb(244,19,51)" fg:x="10895" fg:w="12"/><text x="58.8777%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="58.6492%" y="133" width="0.1452%" height="15" fill="rgb(224,6,22)" fg:x="10907" fg:w="27"/><text x="58.9422%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="58.7944%" y="133" width="0.0645%" height="15" fill="rgb(224,145,5)" fg:x="10934" fg:w="12"/><text x="59.0874%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="58.8590%" y="133" width="0.1452%" height="15" fill="rgb(234,130,49)" fg:x="10946" fg:w="27"/><text x="59.1519%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.0041%" y="133" width="0.0645%" height="15" fill="rgb(254,6,2)" fg:x="10973" fg:w="12"/><text x="59.2971%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="59.0687%" y="133" width="0.1452%" height="15" fill="rgb(208,96,46)" fg:x="10985" fg:w="27"/><text x="59.3616%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.2139%" y="133" width="0.0645%" height="15" fill="rgb(239,3,39)" fg:x="11012" fg:w="12"/><text x="59.5068%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="59.2784%" y="133" width="0.1452%" height="15" fill="rgb(233,210,1)" fg:x="11024" fg:w="27"/><text x="59.5713%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.4236%" y="133" width="0.0645%" height="15" fill="rgb(244,137,37)" fg:x="11051" fg:w="12"/><text x="59.7165%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="59.4881%" y="133" width="0.1452%" height="15" fill="rgb(240,136,2)" fg:x="11063" fg:w="27"/><text x="59.7811%" y="143.50"></text></g><g><title>rec (601 instructions, 3.23%)</title><rect x="58.5847%" y="149" width="3.2317%" height="15" fill="rgb(239,18,37)" fg:x="10895" fg:w="601"/><text x="58.8777%" y="159.50">rec</text></g><g><title>leaf (610 instructions, 3.28%)</title><rect x="58.5847%" y="165" width="3.2801%" height="15" fill="rgb(218,185,22)" fg:x="10895" fg:w="610"/><text x="58.8777%" y="175.50">le..</text></g><g><title>recursiveReplace (2,820 instructions, 15.16%)</title><rect x="47.0936%" y="181" width="15.1637%" height="15" fill="rgb(225,218,4)" fg:x="8758" fg:w="2820"/><text x="47.3866%" y="191.50">recursiveReplace</text></g><g><title>put.1 (2,987 instructions, 16.06%)</title><rect x="46.9431%" y="197" width="16.0617%" height="15" fill="rgb(230,182,32)" fg:x="8730" fg:w="2987"/><text x="47.2360%" y="207.50">put.1</text></g><g><title>account_put (3,912 instructions, 21.04%)</title><rect x="42.2487%" y="213" width="21.0357%" height="15" fill="rgb(242,56,43)" fg:x="7857" fg:w="3912"/><text x="42.5417%" y="223.50">account_put</text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="63.2844%" y="197" width="0.1452%" height="15" fill="rgb(233,99,24)" fg:x="11769" fg:w="27"/><text x="63.5774%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::ha70fa06d6a655c68 (60 instructions, 0.32%)</title><rect x="63.4296%" y="149" width="0.3226%" height="15" fill="rgb(234,209,42)" fg:x="11796" fg:w="60"/><text x="63.7226%" y="159.50"></text></g><g><title>memset (106 instructions, 0.57%)</title><rect x="63.7522%" y="149" width="0.5700%" height="15" fill="rgb(227,7,12)" fg:x="11856" fg:w="106"/><text x="64.0452%" y="159.50"></text></g><g><title>mp_calloc (202 instructions, 1.09%)</title><rect x="63.4296%" y="165" width="1.0862%" height="15" fill="rgb(245,203,43)" fg:x="11796" fg:w="202"/><text x="63.7226%" y="175.50"></text></g><g><title>mp_init (223 instructions, 1.20%)</title><rect x="63.4296%" y="181" width="1.1991%" height="15" fill="rgb(238,205,33)" fg:x="11796" fg:w="223"/><text x="63.7226%" y="191.50"></text></g><g><title>mp_set_u64 (120 instructions, 0.65%)</title><rect x="64.6287%" y="181" width="0.6453%" height="15" fill="rgb(231,56,7)" fg:x="12019" fg:w="120"/><text x="64.9217%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h6cd8440281f10e41 (33 instructions, 0.18%)</title><rect x="65.2740%" y="181" width="0.1774%" height="15" fill="rgb(244,186,29)" fg:x="12139" fg:w="33"/><text x="65.5669%" y="191.50"></text></g><g><title>bigint_of_word64 (431 instructions, 2.32%)</title><rect x="63.4296%" y="197" width="2.3176%" height="15" fill="rgb(234,111,31)" fg:x="11796" fg:w="431"/><text x="63.7226%" y="207.50">b..</text></g><g><title>proposal_key (316 instructions, 1.70%)</title><rect x="65.7472%" y="181" width="1.6992%" height="15" fill="rgb(241,149,10)" fg:x="12227" fg:w="316"/><text x="66.0401%" y="191.50"></text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="67.4464%" y="165" width="0.1506%" height="15" fill="rgb(249,206,44)" fg:x="12543" fg:w="28"/><text x="67.7393%" y="175.50"></text></g><g><title>del (31 instructions, 0.17%)</title><rect x="67.5969%" y="133" width="0.1667%" height="15" fill="rgb(251,153,30)" fg:x="12571" fg:w="31"/><text x="67.8899%" y="143.50"></text></g><g><title>replace (245 instructions, 1.32%)</title><rect x="67.5969%" y="149" width="1.3174%" height="15" fill="rgb(239,152,38)" fg:x="12571" fg:w="245"/><text x="67.8899%" y="159.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="68.9143%" y="117" width="0.0645%" height="15" fill="rgb(249,139,47)" fg:x="12816" fg:w="12"/><text x="69.2073%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="68.9789%" y="117" width="0.1452%" height="15" fill="rgb(244,64,35)" fg:x="12828" fg:w="27"/><text x="69.2718%" y="127.50"></text></g><g><title>rec (201 instructions, 1.08%)</title><rect x="68.9143%" y="133" width="1.0808%" height="15" fill="rgb(216,46,15)" fg:x="12816" fg:w="201"/><text x="69.2073%" y="143.50"></text></g><g><title>leaf (210 instructions, 1.13%)</title><rect x="68.9143%" y="149" width="1.1292%" height="15" fill="rgb(250,74,19)" fg:x="12816" fg:w="210"/><text x="69.2073%" y="159.50"></text></g><g><title>recursiveReplace (496 instructions, 2.67%)</title><rect x="67.5969%" y="165" width="2.6671%" height="15" fill="rgb(249,42,33)" fg:x="12571" fg:w="496"/><text x="67.8899%" y="175.50">r..</text></g><g><title>put.1 (663 instructions, 3.57%)</title><rect x="67.4464%" y="181" width="3.5651%" height="15" fill="rgb(242,149,17)" fg:x="12543" fg:w="663"/><text x="67.7393%" y="191.50">put..</text></g><g><title>proposal_put (1,031 instructions, 5.54%)</title><rect x="65.7472%" y="197" width="5.5439%" height="15" fill="rgb(244,29,21)" fg:x="12227" fg:w="1031"/><text x="66.0401%" y="207.50">propos..</text></g><g><title>@anon-func-74.66 (2,105 instructions, 11.32%)</title><rect x="63.2844%" y="213" width="11.3190%" height="15" fill="rgb(220,130,37)" fg:x="11769" fg:w="2105"/><text x="63.5774%" y="223.50">@anon-func-74...</text></g><g><title>@buffer_size&lt;N&gt; (27 instructions, 0.15%)</title><rect x="74.6034%" y="197" width="0.1452%" height="15" fill="rgb(211,67,2)" fg:x="13874" fg:w="27"/><text x="74.8964%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="74.7486%" y="197" width="0.3011%" height="15" fill="rgb(235,68,52)" fg:x="13901" fg:w="56"/><text x="75.0416%" y="207.50"></text></g><g><title>memcpy (86 instructions, 0.46%)</title><rect x="75.0497%" y="197" width="0.4624%" height="15" fill="rgb(246,142,3)" fg:x="13957" fg:w="86"/><text x="75.3427%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.30%)</title><rect x="75.5122%" y="197" width="0.3011%" height="15" fill="rgb(241,25,7)" fg:x="14043" fg:w="56"/><text x="75.8051%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="75.8133%" y="197" width="0.0591%" height="15" fill="rgb(242,119,39)" fg:x="14099" fg:w="11"/><text x="76.1063%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="75.8725%" y="181" width="0.0591%" height="15" fill="rgb(241,98,45)" fg:x="14110" fg:w="11"/><text x="76.1654%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.27%)</title><rect x="75.8725%" y="197" width="0.2742%" height="15" fill="rgb(254,28,30)" fg:x="14110" fg:w="51"/><text x="76.1654%" y="207.50"></text></g><g><title>$lambda.27 (1,467 instructions, 7.89%)</title><rect x="74.6034%" y="213" width="7.8884%" height="15" fill="rgb(241,142,54)" fg:x="13874" fg:w="1467"/><text x="74.8964%" y="223.50">$lambda.27</text></g><g><title>$lambda.5 (11,497 instructions, 61.82%)</title><rect x="27.5797%" y="229" width="61.8218%" height="15" fill="rgb(222,85,15)" fg:x="5129" fg:w="11497"/><text x="27.8727%" y="239.50">$lambda.5</text></g><g><title>schedule_copying_gc (108 instructions, 0.58%)</title><rect x="89.4015%" y="229" width="0.5807%" height="15" fill="rgb(210,85,47)" fg:x="16626" fg:w="108"/><text x="89.6945%" y="239.50"></text></g><g><title>trans_state4 (16 instructions, 0.09%)</title><rect x="89.9823%" y="229" width="0.0860%" height="15" fill="rgb(224,206,25)" fg:x="16734" fg:w="16"/><text x="90.2752%" y="239.50"></text></g><g><title>all (18,597 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="18597"/><text x="0.2930%" y="271.50"></text></g><g><title>submit_proposal (18,597 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="18597"/><text x="0.2930%" y="255.50">submit_proposal</text></g></svg></svg>