<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">DAO.submit_proposal</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="18552"><g><title>trans_state5 (10 instructions, 0.05%)</title><rect x="0.0000%" y="229" width="0.0539%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="10"/><text x="0.2930%" y="239.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="0.0539%" y="229" width="0.3019%" height="15" fill="rgb(209,217,16)" fg:x="10" fg:w="56"/><text x="0.3469%" y="239.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="0.3558%" y="213" width="0.2695%" height="15" fill="rgb(219,88,35)" fg:x="66" fg:w="50"/><text x="0.6487%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="0.6253%" y="213" width="0.3019%" height="15" fill="rgb(220,193,23)" fg:x="116" fg:w="56"/><text x="0.9182%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="0.9271%" y="213" width="0.3450%" height="15" fill="rgb(230,90,52)" fg:x="172" fg:w="64"/><text x="1.2201%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="1.2721%" y="213" width="0.2695%" height="15" fill="rgb(252,106,19)" fg:x="236" fg:w="50"/><text x="1.5651%" y="223.50"></text></g><g><title>leb128_decode (173 instructions, 0.93%)</title><rect x="1.5416%" y="213" width="0.9325%" height="15" fill="rgb(206,74,20)" fg:x="286" fg:w="173"/><text x="1.8346%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="2.4741%" y="213" width="0.3450%" height="15" fill="rgb(230,138,44)" fg:x="459" fg:w="64"/><text x="2.7671%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.06%)</title><rect x="2.8191%" y="213" width="0.0647%" height="15" fill="rgb(235,182,43)" fg:x="523" fg:w="12"/><text x="3.1121%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="2.8838%" y="213" width="1.1535%" height="15" fill="rgb(242,16,51)" fg:x="535" fg:w="214"/><text x="3.1768%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="4.0373%" y="213" width="0.3450%" height="15" fill="rgb(248,9,4)" fg:x="749" fg:w="64"/><text x="4.3303%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (17 instructions, 0.09%)</title><rect x="4.3823%" y="213" width="0.0916%" height="15" fill="rgb(210,31,22)" fg:x="813" fg:w="17"/><text x="4.6752%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="4.4739%" y="213" width="1.1535%" height="15" fill="rgb(239,54,39)" fg:x="830" fg:w="214"/><text x="4.7669%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="5.6274%" y="213" width="0.3450%" height="15" fill="rgb(230,99,41)" fg:x="1044" fg:w="64"/><text x="5.9204%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.06%)</title><rect x="5.9724%" y="213" width="0.0647%" height="15" fill="rgb(253,106,12)" fg:x="1108" fg:w="12"/><text x="6.2654%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.0371%" y="213" width="0.3450%" height="15" fill="rgb(213,46,41)" fg:x="1120" fg:w="64"/><text x="6.3301%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.3821%" y="213" width="0.3450%" height="15" fill="rgb(215,133,35)" fg:x="1184" fg:w="64"/><text x="6.6750%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.06%)</title><rect x="6.7270%" y="213" width="0.0647%" height="15" fill="rgb(213,28,5)" fg:x="1248" fg:w="12"/><text x="7.0200%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="6.7917%" y="213" width="0.3450%" height="15" fill="rgb(215,77,49)" fg:x="1260" fg:w="64"/><text x="7.0847%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="7.1367%" y="213" width="0.3450%" height="15" fill="rgb(248,100,22)" fg:x="1324" fg:w="64"/><text x="7.4297%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="7.4817%" y="213" width="0.2695%" height="15" fill="rgb(208,67,9)" fg:x="1388" fg:w="50"/><text x="7.7746%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="7.7512%" y="213" width="0.3450%" height="15" fill="rgb(219,133,21)" fg:x="1438" fg:w="64"/><text x="8.0442%" y="223.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.06%)</title><rect x="8.0962%" y="213" width="0.0647%" height="15" fill="rgb(246,46,29)" fg:x="1502" fg:w="12"/><text x="8.3891%" y="223.50"></text></g><g><title>parse_idl_header (1,917 instructions, 10.33%)</title><rect x="0.3558%" y="229" width="10.3331%" height="15" fill="rgb(246,185,52)" fg:x="66" fg:w="1917"/><text x="0.6487%" y="239.50">parse_idl_he..</text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="10.6889%" y="213" width="0.0323%" height="15" fill="rgb(252,136,11)" fg:x="1983" fg:w="6"/><text x="10.9818%" y="223.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.08%)</title><rect x="10.6889%" y="229" width="0.0809%" height="15" fill="rgb(219,138,53)" fg:x="1983" fg:w="15"/><text x="10.9818%" y="239.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="10.7697%" y="229" width="0.2695%" height="15" fill="rgb(211,51,23)" fg:x="1998" fg:w="50"/><text x="11.0627%" y="239.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="11.0392%" y="229" width="0.3450%" height="15" fill="rgb(247,221,28)" fg:x="2048" fg:w="64"/><text x="11.3322%" y="239.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="11.3842%" y="213" width="0.3450%" height="15" fill="rgb(251,222,45)" fg:x="2112" fg:w="64"/><text x="11.6772%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="11.7292%" y="213" width="0.2695%" height="15" fill="rgb(217,162,53)" fg:x="2176" fg:w="50"/><text x="12.0222%" y="223.50"></text></g><g><title>leb128_decode (173 instructions, 0.93%)</title><rect x="11.9987%" y="197" width="0.9325%" height="15" fill="rgb(229,93,14)" fg:x="2226" fg:w="173"/><text x="12.2917%" y="207.50"></text></g><g><title>find_field (209 instructions, 1.13%)</title><rect x="11.9987%" y="213" width="1.1266%" height="15" fill="rgb(209,67,49)" fg:x="2226" fg:w="209"/><text x="12.2917%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="13.1253%" y="213" width="0.3450%" height="15" fill="rgb(213,87,29)" fg:x="2435" fg:w="64"/><text x="13.4182%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="13.4702%" y="197" width="0.2695%" height="15" fill="rgb(205,151,52)" fg:x="2499" fg:w="50"/><text x="13.7632%" y="207.50"></text></g><g><title>utf8_validate (248 instructions, 1.34%)</title><rect x="13.7398%" y="197" width="1.3368%" height="15" fill="rgb(253,215,39)" fg:x="2549" fg:w="248"/><text x="14.0327%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="15.0765%" y="181" width="0.3019%" height="15" fill="rgb(221,220,41)" fg:x="2797" fg:w="56"/><text x="15.3695%" y="191.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hd6e8f4395e2210dc (69 instructions, 0.37%)</title><rect x="15.0765%" y="197" width="0.3719%" height="15" fill="rgb(218,133,21)" fg:x="2797" fg:w="69"/><text x="15.3695%" y="207.50"></text></g><g><title>memcpy (176 instructions, 0.95%)</title><rect x="15.4485%" y="197" width="0.9487%" height="15" fill="rgb(221,193,43)" fg:x="2866" fg:w="176"/><text x="15.7414%" y="207.50"></text></g><g><title>@deserialize_go&lt;t&gt; (612 instructions, 3.30%)</title><rect x="13.4702%" y="213" width="3.2988%" height="15" fill="rgb(240,128,52)" fg:x="2499" fg:w="612"/><text x="13.7632%" y="223.50">@d..</text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="16.7691%" y="197" width="1.1535%" height="15" fill="rgb(253,114,12)" fg:x="3111" fg:w="214"/><text x="17.0621%" y="207.50"></text></g><g><title>find_field (250 instructions, 1.35%)</title><rect x="16.7691%" y="213" width="1.3476%" height="15" fill="rgb(215,223,47)" fg:x="3111" fg:w="250"/><text x="17.0621%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="18.1166%" y="213" width="0.3450%" height="15" fill="rgb(248,225,23)" fg:x="3361" fg:w="64"/><text x="18.4096%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="18.4616%" y="197" width="0.2695%" height="15" fill="rgb(250,108,0)" fg:x="3425" fg:w="50"/><text x="18.7546%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="18.7311%" y="197" width="0.3019%" height="15" fill="rgb(228,208,7)" fg:x="3475" fg:w="56"/><text x="19.0241%" y="207.50"></text></g><g><title>memcpy (94 instructions, 0.51%)</title><rect x="19.0330%" y="197" width="0.5067%" height="15" fill="rgb(244,45,10)" fg:x="3531" fg:w="94"/><text x="19.3260%" y="207.50"></text></g><g><title>@deserialize_go&lt;P&gt; (307 instructions, 1.65%)</title><rect x="18.4616%" y="213" width="1.6548%" height="15" fill="rgb(207,125,25)" fg:x="3425" fg:w="307"/><text x="18.7546%" y="223.50"></text></g><g><title>leb128_decode (214 instructions, 1.15%)</title><rect x="20.1164%" y="197" width="1.1535%" height="15" fill="rgb(210,195,18)" fg:x="3732" fg:w="214"/><text x="20.4094%" y="207.50"></text></g><g><title>find_field (250 instructions, 1.35%)</title><rect x="20.1164%" y="213" width="1.3476%" height="15" fill="rgb(249,80,12)" fg:x="3732" fg:w="250"/><text x="20.4094%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="21.4640%" y="213" width="0.3450%" height="15" fill="rgb(221,65,9)" fg:x="3982" fg:w="64"/><text x="21.7570%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="21.8090%" y="213" width="0.3450%" height="15" fill="rgb(235,49,36)" fg:x="4046" fg:w="64"/><text x="22.1019%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.34%)</title><rect x="22.1539%" y="213" width="0.3450%" height="15" fill="rgb(225,32,20)" fg:x="4110" fg:w="64"/><text x="22.4469%" y="223.50"></text></g><g><title>leb128_decode (50 instructions, 0.27%)</title><rect x="22.4989%" y="213" width="0.2695%" height="15" fill="rgb(215,141,46)" fg:x="4174" fg:w="50"/><text x="22.7919%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="22.7684%" y="213" width="0.3019%" height="15" fill="rgb(250,160,47)" fg:x="4224" fg:w="56"/><text x="23.0614%" y="223.50"></text></g><g><title>memcpy (319 instructions, 1.72%)</title><rect x="23.0703%" y="213" width="1.7195%" height="15" fill="rgb(216,222,40)" fg:x="4280" fg:w="319"/><text x="23.3633%" y="223.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="24.7898%" y="213" width="0.0323%" height="15" fill="rgb(234,217,39)" fg:x="4599" fg:w="6"/><text x="25.0827%" y="223.50"></text></g><g><title>@deserialize_go&lt;r(canister_id:P,message:B,method:t)&gt; (3,017 instructions, 16.26%)</title><rect x="11.3842%" y="229" width="16.2624%" height="15" fill="rgb(207,178,40)" fg:x="2112" fg:w="3017"/><text x="11.6772%" y="239.50">@deserialize_go&lt;r(can..</text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="27.6466%" y="213" width="0.3019%" height="15" fill="rgb(221,136,13)" fg:x="5129" fg:w="56"/><text x="27.9396%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="27.9485%" y="213" width="0.0916%" height="15" fill="rgb(249,199,10)" fg:x="5185" fg:w="17"/><text x="28.2414%" y="223.50"></text></g><g><title>compute_crc32 (778 instructions, 4.19%)</title><rect x="28.0401%" y="181" width="4.1936%" height="15" fill="rgb(249,222,13)" fg:x="5202" fg:w="778"/><text x="28.3331%" y="191.50">comp..</text></g><g><title>account_key (842 instructions, 4.54%)</title><rect x="28.0401%" y="197" width="4.5386%" height="15" fill="rgb(244,185,38)" fg:x="5202" fg:w="842"/><text x="28.3331%" y="207.50">acco..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="32.5787%" y="181" width="0.1509%" height="15" fill="rgb(236,202,9)" fg:x="6044" fg:w="28"/><text x="32.8717%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="32.7296%" y="165" width="0.0916%" height="15" fill="rgb(250,229,37)" fg:x="6072" fg:w="17"/><text x="33.0226%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="32.8213%" y="149" width="0.0916%" height="15" fill="rgb(206,174,23)" fg:x="6089" fg:w="17"/><text x="33.1142%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="32.9129%" y="149" width="0.0916%" height="15" fill="rgb(211,33,43)" fg:x="6106" fg:w="17"/><text x="33.2059%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.2040%" y="149" width="0.0916%" height="15" fill="rgb(245,58,50)" fg:x="6160" fg:w="17"/><text x="33.4969%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.2956%" y="149" width="0.0916%" height="15" fill="rgb(244,68,36)" fg:x="6177" fg:w="17"/><text x="33.5886%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.5921%" y="149" width="0.0916%" height="15" fill="rgb(232,229,15)" fg:x="6232" fg:w="17"/><text x="33.8850%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.6837%" y="149" width="0.0916%" height="15" fill="rgb(254,30,23)" fg:x="6249" fg:w="17"/><text x="33.9767%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="33.9802%" y="149" width="0.0916%" height="15" fill="rgb(235,160,14)" fg:x="6304" fg:w="17"/><text x="34.2731%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.0718%" y="149" width="0.0916%" height="15" fill="rgb(212,155,44)" fg:x="6321" fg:w="17"/><text x="34.3648%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.3683%" y="149" width="0.0916%" height="15" fill="rgb(226,2,50)" fg:x="6376" fg:w="17"/><text x="34.6612%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="34.4599%" y="149" width="0.0916%" height="15" fill="rgb(234,177,6)" fg:x="6393" fg:w="17"/><text x="34.7529%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="34.5515%" y="149" width="0.0916%" height="15" fill="rgb(217,24,9)" fg:x="6410" fg:w="17"/><text x="34.8445%" y="159.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="34.6432%" y="149" width="0.0916%" height="15" fill="rgb(220,13,46)" fg:x="6427" fg:w="17"/><text x="34.9361%" y="159.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.15%)</title><rect x="34.7348%" y="133" width="4.1451%" height="15" fill="rgb(239,221,27)" fg:x="6444" fg:w="769"/><text x="35.0278%" y="143.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.19%)</title><rect x="34.7348%" y="149" width="4.1882%" height="15" fill="rgb(222,198,25)" fg:x="6444" fg:w="777"/><text x="35.0278%" y="159.50">equa..</text></g><g><title>anon-func-192.5 (1,198 instructions, 6.46%)</title><rect x="32.8213%" y="165" width="6.4575%" height="15" fill="rgb(211,99,13)" fg:x="6089" fg:w="1198"/><text x="33.1142%" y="175.50">anon-fu..</text></g><g><title>rec.4 (1,581 instructions, 8.52%)</title><rect x="32.7296%" y="181" width="8.5220%" height="15" fill="rgb(232,111,31)" fg:x="6072" fg:w="1581"/><text x="33.0226%" y="191.50">rec.4</text></g><g><title>get.2 (1,661 instructions, 8.95%)</title><rect x="32.5787%" y="197" width="8.9532%" height="15" fill="rgb(245,82,37)" fg:x="6044" fg:w="1661"/><text x="32.8717%" y="207.50">get.2</text></g><g><title>account_get (2,518 instructions, 13.57%)</title><rect x="28.0401%" y="213" width="13.5727%" height="15" fill="rgb(227,149,46)" fg:x="5202" fg:w="2518"/><text x="28.3331%" y="223.50">account_get</text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.09%)</title><rect x="41.6128%" y="213" width="0.0916%" height="15" fill="rgb(218,36,50)" fg:x="7720" fg:w="17"/><text x="41.9057%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.7044%" y="213" width="0.0916%" height="15" fill="rgb(226,80,48)" fg:x="7737" fg:w="17"/><text x="41.9974%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.7960%" y="213" width="0.0916%" height="15" fill="rgb(238,224,15)" fg:x="7754" fg:w="17"/><text x="42.0890%" y="223.50"></text></g><g><title>B_lt (12 instructions, 0.06%)</title><rect x="41.8877%" y="213" width="0.0647%" height="15" fill="rgb(241,136,10)" fg:x="7771" fg:w="12"/><text x="42.1806%" y="223.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="41.9524%" y="213" width="0.0916%" height="15" fill="rgb(208,32,45)" fg:x="7783" fg:w="17"/><text x="42.2453%" y="223.50"></text></g><g><title>B_sub (34 instructions, 0.18%)</title><rect x="42.0440%" y="213" width="0.1833%" height="15" fill="rgb(207,135,9)" fg:x="7800" fg:w="34"/><text x="42.3370%" y="223.50"></text></g><g><title>compute_crc32 (778 instructions, 4.19%)</title><rect x="42.2273%" y="181" width="4.1936%" height="15" fill="rgb(206,86,44)" fg:x="7834" fg:w="778"/><text x="42.5202%" y="191.50">comp..</text></g><g><title>account_key (842 instructions, 4.54%)</title><rect x="42.2273%" y="197" width="4.5386%" height="15" fill="rgb(245,177,15)" fg:x="7834" fg:w="842"/><text x="42.5202%" y="207.50">acco..</text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="46.7658%" y="181" width="0.1509%" height="15" fill="rgb(206,64,50)" fg:x="8676" fg:w="28"/><text x="47.0588%" y="191.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="46.9168%" y="165" width="0.0916%" height="15" fill="rgb(234,36,40)" fg:x="8704" fg:w="17"/><text x="47.2097%" y="175.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.0084%" y="117" width="0.0916%" height="15" fill="rgb(213,64,8)" fg:x="8721" fg:w="17"/><text x="47.3014%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.1000%" y="117" width="0.0916%" height="15" fill="rgb(210,75,36)" fg:x="8738" fg:w="17"/><text x="47.3930%" y="127.50"></text></g><g><title>anon-func-192.5 (71 instructions, 0.38%)</title><rect x="47.0084%" y="133" width="0.3827%" height="15" fill="rgb(229,88,21)" fg:x="8721" fg:w="71"/><text x="47.3014%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.3911%" y="101" width="0.0916%" height="15" fill="rgb(252,204,47)" fg:x="8792" fg:w="17"/><text x="47.6841%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.4828%" y="101" width="0.0916%" height="15" fill="rgb(208,77,27)" fg:x="8809" fg:w="17"/><text x="47.7757%" y="111.50"></text></g><g><title>anon-func-192.5 (72 instructions, 0.39%)</title><rect x="47.3911%" y="117" width="0.3881%" height="15" fill="rgb(221,76,26)" fg:x="8792" fg:w="72"/><text x="47.6841%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.7792%" y="85" width="0.0916%" height="15" fill="rgb(225,139,18)" fg:x="8864" fg:w="17"/><text x="48.0722%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="47.8708%" y="85" width="0.0916%" height="15" fill="rgb(230,137,11)" fg:x="8881" fg:w="17"/><text x="48.1638%" y="95.50"></text></g><g><title>anon-func-192.5 (72 instructions, 0.39%)</title><rect x="47.7792%" y="101" width="0.3881%" height="15" fill="rgb(212,28,1)" fg:x="8864" fg:w="72"/><text x="48.0722%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.1673%" y="69" width="0.0916%" height="15" fill="rgb(248,164,17)" fg:x="8936" fg:w="17"/><text x="48.4603%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.2589%" y="69" width="0.0916%" height="15" fill="rgb(222,171,42)" fg:x="8953" fg:w="17"/><text x="48.5519%" y="79.50"></text></g><g><title>anon-func-192.5 (72 instructions, 0.39%)</title><rect x="48.1673%" y="85" width="0.3881%" height="15" fill="rgb(243,84,45)" fg:x="8936" fg:w="72"/><text x="48.4603%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.5554%" y="53" width="0.0916%" height="15" fill="rgb(252,49,23)" fg:x="9008" fg:w="17"/><text x="48.8484%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.09%)</title><rect x="48.6470%" y="53" width="0.0916%" height="15" fill="rgb(215,19,7)" fg:x="9025" fg:w="17"/><text x="48.9400%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="48.7387%" y="53" width="0.0916%" height="15" fill="rgb(238,81,41)" fg:x="9042" fg:w="17"/><text x="49.0316%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.09%)</title><rect x="48.8303%" y="53" width="0.0916%" height="15" fill="rgb(210,199,37)" fg:x="9059" fg:w="17"/><text x="49.1233%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 4.15%)</title><rect x="48.9219%" y="37" width="4.1451%" height="15" fill="rgb(244,192,49)" fg:x="9076" fg:w="769"/><text x="49.2149%" y="47.50">Blo..</text></g><g><title>equal.1 (777 instructions, 4.19%)</title><rect x="48.9219%" y="53" width="4.1882%" height="15" fill="rgb(226,211,11)" fg:x="9076" fg:w="777"/><text x="49.2149%" y="63.50">equa..</text></g><g><title>anon-func-192.5 (911 instructions, 4.91%)</title><rect x="48.5554%" y="69" width="4.9105%" height="15" fill="rgb(236,162,54)" fg:x="9008" fg:w="911"/><text x="48.8484%" y="79.50">anon-..</text></g><g><title>del (1,007 instructions, 5.43%)</title><rect x="48.5554%" y="85" width="5.4280%" height="15" fill="rgb(220,229,9)" fg:x="9008" fg:w="1007"/><text x="48.8484%" y="95.50">del</text></g><g><title>del (1,234 instructions, 6.65%)</title><rect x="48.1673%" y="101" width="6.6516%" height="15" fill="rgb(250,87,22)" fg:x="8936" fg:w="1234"/><text x="48.4603%" y="111.50">del</text></g><g><title>del (1,461 instructions, 7.88%)</title><rect x="47.7792%" y="117" width="7.8752%" height="15" fill="rgb(239,43,17)" fg:x="8864" fg:w="1461"/><text x="48.0722%" y="127.50">del</text></g><g><title>del (1,688 instructions, 9.10%)</title><rect x="47.3911%" y="133" width="9.0987%" height="15" fill="rgb(231,177,25)" fg:x="8792" fg:w="1688"/><text x="47.6841%" y="143.50">del</text></g><g><title>del (1,914 instructions, 10.32%)</title><rect x="47.0084%" y="149" width="10.3169%" height="15" fill="rgb(219,179,1)" fg:x="8721" fg:w="1914"/><text x="47.3014%" y="159.50">del</text></g><g><title>replace (2,128 instructions, 11.47%)</title><rect x="47.0084%" y="165" width="11.4705%" height="15" fill="rgb(238,219,53)" fg:x="8721" fg:w="2128"/><text x="47.3014%" y="175.50">replace</text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="58.4789%" y="133" width="0.0647%" height="15" fill="rgb(232,167,36)" fg:x="10849" fg:w="12"/><text x="58.7718%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="58.5436%" y="133" width="0.1455%" height="15" fill="rgb(244,19,51)" fg:x="10861" fg:w="27"/><text x="58.8365%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="58.6891%" y="133" width="0.0647%" height="15" fill="rgb(224,6,22)" fg:x="10888" fg:w="12"/><text x="58.9821%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="58.7538%" y="133" width="0.1455%" height="15" fill="rgb(224,145,5)" fg:x="10900" fg:w="27"/><text x="59.0467%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="58.8993%" y="133" width="0.0647%" height="15" fill="rgb(234,130,49)" fg:x="10927" fg:w="12"/><text x="59.1923%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="58.9640%" y="133" width="0.1455%" height="15" fill="rgb(254,6,2)" fg:x="10939" fg:w="27"/><text x="59.2570%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.1095%" y="133" width="0.0647%" height="15" fill="rgb(208,96,46)" fg:x="10966" fg:w="12"/><text x="59.4025%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="59.1742%" y="133" width="0.1455%" height="15" fill="rgb(239,3,39)" fg:x="10978" fg:w="27"/><text x="59.4672%" y="143.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="59.3197%" y="133" width="0.0647%" height="15" fill="rgb(233,210,1)" fg:x="11005" fg:w="12"/><text x="59.6127%" y="143.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="59.3844%" y="133" width="0.1455%" height="15" fill="rgb(244,137,37)" fg:x="11017" fg:w="27"/><text x="59.6774%" y="143.50"></text></g><g><title>rec (601 instructions, 3.24%)</title><rect x="58.4789%" y="149" width="3.2395%" height="15" fill="rgb(240,136,2)" fg:x="10849" fg:w="601"/><text x="58.7718%" y="159.50">rec</text></g><g><title>leaf (610 instructions, 3.29%)</title><rect x="58.4789%" y="165" width="3.2881%" height="15" fill="rgb(239,18,37)" fg:x="10849" fg:w="610"/><text x="58.7718%" y="175.50">le..</text></g><g><title>recursiveReplace (2,828 instructions, 15.24%)</title><rect x="46.9168%" y="181" width="15.2436%" height="15" fill="rgb(218,185,22)" fg:x="8704" fg:w="2828"/><text x="47.2097%" y="191.50">recursiveReplace</text></g><g><title>put.1 (2,995 instructions, 16.14%)</title><rect x="46.7658%" y="197" width="16.1438%" height="15" fill="rgb(225,218,4)" fg:x="8676" fg:w="2995"/><text x="47.0588%" y="207.50">put.1</text></g><g><title>account_put (3,889 instructions, 20.96%)</title><rect x="42.2273%" y="213" width="20.9627%" height="15" fill="rgb(230,182,32)" fg:x="7834" fg:w="3889"/><text x="42.5202%" y="223.50">account_put</text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="63.1900%" y="197" width="0.1455%" height="15" fill="rgb(242,56,43)" fg:x="11723" fg:w="27"/><text x="63.4829%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h622d43df21b9d4cc (60 instructions, 0.32%)</title><rect x="63.3355%" y="149" width="0.3234%" height="15" fill="rgb(233,99,24)" fg:x="11750" fg:w="60"/><text x="63.6285%" y="159.50"></text></g><g><title>memset (106 instructions, 0.57%)</title><rect x="63.6589%" y="149" width="0.5714%" height="15" fill="rgb(234,209,42)" fg:x="11810" fg:w="106"/><text x="63.9519%" y="159.50"></text></g><g><title>mp_calloc (202 instructions, 1.09%)</title><rect x="63.3355%" y="165" width="1.0888%" height="15" fill="rgb(227,7,12)" fg:x="11750" fg:w="202"/><text x="63.6285%" y="175.50"></text></g><g><title>mp_init (223 instructions, 1.20%)</title><rect x="63.3355%" y="181" width="1.2020%" height="15" fill="rgb(245,203,43)" fg:x="11750" fg:w="223"/><text x="63.6285%" y="191.50"></text></g><g><title>mp_set_u64 (120 instructions, 0.65%)</title><rect x="64.5375%" y="181" width="0.6468%" height="15" fill="rgb(238,205,33)" fg:x="11973" fg:w="120"/><text x="64.8305%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::hc33d6a341e358b40 (33 instructions, 0.18%)</title><rect x="65.1843%" y="181" width="0.1779%" height="15" fill="rgb(231,56,7)" fg:x="12093" fg:w="33"/><text x="65.4773%" y="191.50"></text></g><g><title>bigint_of_word64 (431 instructions, 2.32%)</title><rect x="63.3355%" y="197" width="2.3232%" height="15" fill="rgb(244,186,29)" fg:x="11750" fg:w="431"/><text x="63.6285%" y="207.50">b..</text></g><g><title>proposal_key (317 instructions, 1.71%)</title><rect x="65.6587%" y="181" width="1.7087%" height="15" fill="rgb(234,111,31)" fg:x="12181" fg:w="317"/><text x="65.9517%" y="191.50"></text></g><g><title>equalKey (28 instructions, 0.15%)</title><rect x="67.3674%" y="165" width="0.1509%" height="15" fill="rgb(241,149,10)" fg:x="12498" fg:w="28"/><text x="67.6604%" y="175.50"></text></g><g><title>del (31 instructions, 0.17%)</title><rect x="67.5183%" y="133" width="0.1671%" height="15" fill="rgb(249,206,44)" fg:x="12526" fg:w="31"/><text x="67.8113%" y="143.50"></text></g><g><title>replace (245 instructions, 1.32%)</title><rect x="67.5183%" y="149" width="1.3206%" height="15" fill="rgb(251,153,30)" fg:x="12526" fg:w="245"/><text x="67.8113%" y="159.50"></text></g><g><title>B_ge (12 instructions, 0.06%)</title><rect x="68.8389%" y="117" width="0.0647%" height="15" fill="rgb(239,152,38)" fg:x="12771" fg:w="12"/><text x="69.1319%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.15%)</title><rect x="68.9036%" y="117" width="0.1455%" height="15" fill="rgb(249,139,47)" fg:x="12783" fg:w="27"/><text x="69.1966%" y="127.50"></text></g><g><title>rec (201 instructions, 1.08%)</title><rect x="68.8389%" y="133" width="1.0834%" height="15" fill="rgb(244,64,35)" fg:x="12771" fg:w="201"/><text x="69.1319%" y="143.50"></text></g><g><title>leaf (210 instructions, 1.13%)</title><rect x="68.8389%" y="149" width="1.1320%" height="15" fill="rgb(216,46,15)" fg:x="12771" fg:w="210"/><text x="69.1319%" y="159.50"></text></g><g><title>recursiveReplace (496 instructions, 2.67%)</title><rect x="67.5183%" y="165" width="2.6736%" height="15" fill="rgb(250,74,19)" fg:x="12526" fg:w="496"/><text x="67.8113%" y="175.50">r..</text></g><g><title>put.1 (663 instructions, 3.57%)</title><rect x="67.3674%" y="181" width="3.5737%" height="15" fill="rgb(249,42,33)" fg:x="12498" fg:w="663"/><text x="67.6604%" y="191.50">put..</text></g><g><title>proposal_put (1,032 instructions, 5.56%)</title><rect x="65.6587%" y="197" width="5.5627%" height="15" fill="rgb(242,149,17)" fg:x="12181" fg:w="1032"/><text x="65.9517%" y="207.50">propos..</text></g><g><title>anon-func-74.66 (2,106 instructions, 11.35%)</title><rect x="63.1900%" y="213" width="11.3519%" height="15" fill="rgb(244,29,21)" fg:x="11723" fg:w="2106"/><text x="63.4829%" y="223.50">anon-func-74.66</text></g><g><title>@buffer_size&lt;N&gt; (27 instructions, 0.15%)</title><rect x="74.5418%" y="197" width="0.1455%" height="15" fill="rgb(220,130,37)" fg:x="13829" fg:w="27"/><text x="74.8348%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="74.6874%" y="197" width="0.3019%" height="15" fill="rgb(211,67,2)" fg:x="13856" fg:w="56"/><text x="74.9803%" y="207.50"></text></g><g><title>memcpy (86 instructions, 0.46%)</title><rect x="74.9892%" y="197" width="0.4636%" height="15" fill="rgb(235,68,52)" fg:x="13912" fg:w="86"/><text x="75.2822%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.30%)</title><rect x="75.4528%" y="197" width="0.3019%" height="15" fill="rgb(246,142,3)" fg:x="13998" fg:w="56"/><text x="75.7458%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="75.7546%" y="197" width="0.0593%" height="15" fill="rgb(241,25,7)" fg:x="14054" fg:w="11"/><text x="76.0476%" y="207.50"></text></g><g><title>leb128_encode (11 instructions, 0.06%)</title><rect x="75.8139%" y="181" width="0.0593%" height="15" fill="rgb(242,119,39)" fg:x="14065" fg:w="11"/><text x="76.1069%" y="191.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.27%)</title><rect x="75.8139%" y="197" width="0.2749%" height="15" fill="rgb(241,98,45)" fg:x="14065" fg:w="51"/><text x="76.1069%" y="207.50"></text></g><g><title>$lambda.28 (1,467 instructions, 7.91%)</title><rect x="74.5418%" y="213" width="7.9075%" height="15" fill="rgb(254,28,30)" fg:x="13829" fg:w="1467"/><text x="74.8348%" y="223.50">$lambda.28</text></g><g><title>$lambda.5 (11,452 instructions, 61.73%)</title><rect x="27.6466%" y="229" width="61.7292%" height="15" fill="rgb(241,142,54)" fg:x="5129" fg:w="11452"/><text x="27.9396%" y="239.50">$lambda.5</text></g><g><title>schedule_copying_gc (108 instructions, 0.58%)</title><rect x="89.3758%" y="229" width="0.5821%" height="15" fill="rgb(222,85,15)" fg:x="16581" fg:w="108"/><text x="89.6688%" y="239.50"></text></g><g><title>trans_state4 (16 instructions, 0.09%)</title><rect x="89.9580%" y="229" width="0.0862%" height="15" fill="rgb(210,85,47)" fg:x="16689" fg:w="16"/><text x="90.2509%" y="239.50"></text></g><g><title>all (18,552 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="18552"/><text x="0.2930%" y="271.50"></text></g><g><title>submit_proposal (18,552 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="18552"/><text x="0.2930%" y="255.50">submit_proposal</text></g></svg></svg>