<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="182" onload="init(evt)" viewBox="0 0 1024 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.transferFromDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="165.00"> </text><svg id="frames" x="10" width="1004" total_samples="8880"><g><title>trans_state5 (10 instructions, 0.11%)</title><rect x="0.0000%" y="101" width="0.1126%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="10"/><text x="0.2930%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="0.1126%" y="85" width="0.6419%" height="15" fill="rgb(207,135,9)" fg:x="10" fg:w="57"/><text x="0.4056%" y="95.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="0.1126%" y="101" width="0.7320%" height="15" fill="rgb(206,86,44)" fg:x="10" fg:w="65"/><text x="0.4056%" y="111.50"></text></g><g><title>leb128_decode (48 instructions, 0.54%)</title><rect x="0.8446%" y="69" width="0.5405%" height="15" fill="rgb(245,177,15)" fg:x="75" fg:w="48"/><text x="1.1376%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="1.3851%" y="69" width="0.6419%" height="15" fill="rgb(206,64,50)" fg:x="123" fg:w="57"/><text x="1.6781%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.54%)</title><rect x="2.0270%" y="69" width="0.5405%" height="15" fill="rgb(234,36,40)" fg:x="180" fg:w="48"/><text x="2.3200%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="2.5676%" y="69" width="0.7207%" height="15" fill="rgb(213,64,8)" fg:x="228" fg:w="64"/><text x="2.8605%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (17 instructions, 0.19%)</title><rect x="3.2883%" y="69" width="0.1914%" height="15" fill="rgb(210,75,36)" fg:x="292" fg:w="17"/><text x="3.5813%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="3.4797%" y="69" width="0.7207%" height="15" fill="rgb(229,88,21)" fg:x="309" fg:w="64"/><text x="3.7727%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (17 instructions, 0.19%)</title><rect x="4.2005%" y="69" width="0.1914%" height="15" fill="rgb(252,204,47)" fg:x="373" fg:w="17"/><text x="4.4934%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="4.3919%" y="69" width="0.7207%" height="15" fill="rgb(208,77,27)" fg:x="390" fg:w="64"/><text x="4.6849%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.14%)</title><rect x="5.1126%" y="69" width="0.1351%" height="15" fill="rgb(221,76,26)" fg:x="454" fg:w="12"/><text x="5.4056%" y="79.50"></text></g><g><title>parse_idl_header (538 instructions, 6.06%)</title><rect x="0.8446%" y="85" width="6.0586%" height="15" fill="rgb(225,139,18)" fg:x="75" fg:w="538"/><text x="1.1376%" y="95.50">parse_..</text></g><g><title>memset (6 instructions, 0.07%)</title><rect x="6.9032%" y="69" width="0.0676%" height="15" fill="rgb(230,137,11)" fg:x="613" fg:w="6"/><text x="7.1961%" y="79.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.17%)</title><rect x="6.9032%" y="85" width="0.1689%" height="15" fill="rgb(212,28,1)" fg:x="613" fg:w="15"/><text x="7.1961%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.54%)</title><rect x="7.0721%" y="85" width="0.5405%" height="15" fill="rgb(248,164,17)" fg:x="628" fg:w="48"/><text x="7.3650%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="7.6126%" y="85" width="0.7207%" height="15" fill="rgb(222,171,42)" fg:x="676" fg:w="64"/><text x="7.9056%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.23%)</title><rect x="8.3333%" y="69" width="0.2252%" height="15" fill="rgb(243,84,45)" fg:x="740" fg:w="20"/><text x="8.6263%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.54%)</title><rect x="8.5586%" y="69" width="0.5405%" height="15" fill="rgb(252,49,23)" fg:x="760" fg:w="48"/><text x="8.8515%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="9.0991%" y="53" width="0.6419%" height="15" fill="rgb(215,19,7)" fg:x="808" fg:w="57"/><text x="9.3921%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="9.0991%" y="69" width="0.7320%" height="15" fill="rgb(238,81,41)" fg:x="808" fg:w="65"/><text x="9.3921%" y="79.50"></text></g><g><title>memcpy (130 instructions, 1.46%)</title><rect x="9.8311%" y="69" width="1.4640%" height="15" fill="rgb(210,199,37)" fg:x="873" fg:w="130"/><text x="10.1240%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (376 instructions, 4.23%)</title><rect x="8.3333%" y="85" width="4.2342%" height="15" fill="rgb(244,192,49)" fg:x="740" fg:w="376"/><text x="8.6263%" y="95.50">@des..</text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="12.5676%" y="85" width="0.7207%" height="15" fill="rgb(226,211,11)" fg:x="1116" fg:w="64"/><text x="12.8605%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.23%)</title><rect x="13.2883%" y="69" width="0.2252%" height="15" fill="rgb(236,162,54)" fg:x="1180" fg:w="20"/><text x="13.5813%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.54%)</title><rect x="13.5135%" y="69" width="0.5405%" height="15" fill="rgb(220,229,9)" fg:x="1200" fg:w="48"/><text x="13.8065%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="14.0541%" y="53" width="0.6419%" height="15" fill="rgb(250,87,22)" fg:x="1248" fg:w="57"/><text x="14.3470%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="14.0541%" y="69" width="0.7320%" height="15" fill="rgb(239,43,17)" fg:x="1248" fg:w="65"/><text x="14.3470%" y="79.50"></text></g><g><title>memcpy (167 instructions, 1.88%)</title><rect x="14.7860%" y="69" width="1.8806%" height="15" fill="rgb(231,177,25)" fg:x="1313" fg:w="167"/><text x="15.0790%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (413 instructions, 4.65%)</title><rect x="13.2883%" y="85" width="4.6509%" height="15" fill="rgb(219,179,1)" fg:x="1180" fg:w="413"/><text x="13.5813%" y="95.50">@des..</text></g><g><title>sleb128_decode (64 instructions, 0.72%)</title><rect x="17.9392%" y="85" width="0.7207%" height="15" fill="rgb(238,219,53)" fg:x="1593" fg:w="64"/><text x="18.2322%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.23%)</title><rect x="18.6599%" y="69" width="0.2252%" height="15" fill="rgb(232,167,36)" fg:x="1657" fg:w="20"/><text x="18.9529%" y="79.50"></text></g><g><title>@deserialize_go&lt;n64&gt; (85 instructions, 0.96%)</title><rect x="18.6599%" y="85" width="0.9572%" height="15" fill="rgb(244,19,51)" fg:x="1657" fg:w="85"/><text x="18.9529%" y="95.50"></text></g><g><title>@deserialize&lt;PPn64&gt; (2,086 instructions, 23.49%)</title><rect x="0.8446%" y="101" width="23.4910%" height="15" fill="rgb(224,6,22)" fg:x="75" fg:w="2086"/><text x="1.1376%" y="111.50">@deserialize&lt;PPn64&gt;</text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="24.3356%" y="69" width="0.6419%" height="15" fill="rgb(224,145,5)" fg:x="2161" fg:w="57"/><text x="24.6286%" y="79.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="24.3356%" y="85" width="0.7320%" height="15" fill="rgb(234,130,49)" fg:x="2161" fg:w="65"/><text x="24.6286%" y="95.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.19%)</title><rect x="25.0676%" y="85" width="0.1914%" height="15" fill="rgb(254,6,2)" fg:x="2226" fg:w="17"/><text x="25.3605%" y="95.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.19%)</title><rect x="25.2590%" y="37" width="0.1914%" height="15" fill="rgb(208,96,46)" fg:x="2243" fg:w="17"/><text x="25.5520%" y="47.50"></text></g><g><title>@anon-func-117.32 (46 instructions, 0.52%)</title><rect x="25.2590%" y="53" width="0.5180%" height="15" fill="rgb(239,3,39)" fg:x="2243" fg:w="46"/><text x="25.5520%" y="63.50"></text></g><g><title>find (131 instructions, 1.48%)</title><rect x="25.2590%" y="69" width="1.4752%" height="15" fill="rgb(233,210,1)" fg:x="2243" fg:w="131"/><text x="25.5520%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.19%)</title><rect x="26.7342%" y="69" width="0.1914%" height="15" fill="rgb(244,137,37)" fg:x="2374" fg:w="17"/><text x="27.0272%" y="79.50"></text></g><g><title>Blob.compare_eq (769 instructions, 8.66%)</title><rect x="26.9257%" y="69" width="8.6599%" height="15" fill="rgb(240,136,2)" fg:x="2391" fg:w="769"/><text x="27.2186%" y="79.50">Blob.compa..</text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.19%)</title><rect x="35.5856%" y="69" width="0.1914%" height="15" fill="rgb(239,18,37)" fg:x="3160" fg:w="17"/><text x="35.8786%" y="79.50"></text></g><g><title>Blob.compare_eq (769 instructions, 8.66%)</title><rect x="35.7770%" y="69" width="8.6599%" height="15" fill="rgb(218,185,22)" fg:x="3177" fg:w="769"/><text x="36.0700%" y="79.50">Blob.compa..</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.19%)</title><rect x="44.4369%" y="37" width="0.1914%" height="15" fill="rgb(225,218,4)" fg:x="3946" fg:w="17"/><text x="44.7299%" y="47.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.19%)</title><rect x="44.6284%" y="37" width="0.1914%" height="15" fill="rgb(230,182,32)" fg:x="3963" fg:w="17"/><text x="44.9213%" y="47.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.19%)</title><rect x="44.8198%" y="37" width="0.1914%" height="15" fill="rgb(242,56,43)" fg:x="3980" fg:w="17"/><text x="45.1128%" y="47.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.19%)</title><rect x="45.0113%" y="37" width="0.1914%" height="15" fill="rgb(233,99,24)" fg:x="3997" fg:w="17"/><text x="45.3042%" y="47.50"></text></g><g><title>@anon-func-75.34 (179 instructions, 2.02%)</title><rect x="44.4369%" y="53" width="2.0158%" height="15" fill="rgb(234,209,42)" fg:x="3946" fg:w="179"/><text x="44.7299%" y="63.50"></text></g><g><title>map (9 instructions, 0.10%)</title><rect x="46.4527%" y="53" width="0.1014%" height="15" fill="rgb(227,7,12)" fg:x="4125" fg:w="9"/><text x="46.7457%" y="63.50"></text></g><g><title>map (301 instructions, 3.39%)</title><rect x="44.4369%" y="69" width="3.3896%" height="15" fill="rgb(245,203,43)" fg:x="3946" fg:w="301"/><text x="44.7299%" y="79.50">map</text></g><g><title>B_add (27 instructions, 0.30%)</title><rect x="47.8266%" y="69" width="0.3041%" height="15" fill="rgb(238,205,33)" fg:x="4247" fg:w="27"/><text x="48.1195%" y="79.50"></text></g><g><title>transferFrom (2,215 instructions, 24.94%)</title><rect x="25.2590%" y="85" width="24.9437%" height="15" fill="rgb(231,56,7)" fg:x="2243" fg:w="2215"/><text x="25.5520%" y="95.50">transferFrom</text></g><g><title>@buffer_size&lt;N&gt; (41 instructions, 0.46%)</title><rect x="50.2027%" y="69" width="0.4617%" height="15" fill="rgb(244,186,29)" fg:x="4458" fg:w="41"/><text x="50.4957%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="50.6644%" y="53" width="0.6419%" height="15" fill="rgb(234,111,31)" fg:x="4499" fg:w="57"/><text x="50.9574%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="50.6644%" y="69" width="0.7320%" height="15" fill="rgb(241,149,10)" fg:x="4499" fg:w="65"/><text x="50.9574%" y="79.50"></text></g><g><title>memcpy (126 instructions, 1.42%)</title><rect x="51.3964%" y="69" width="1.4189%" height="15" fill="rgb(249,206,44)" fg:x="4564" fg:w="126"/><text x="51.6894%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.64%)</title><rect x="52.8153%" y="53" width="0.6419%" height="15" fill="rgb(251,153,30)" fg:x="4690" fg:w="57"/><text x="53.1083%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.73%)</title><rect x="52.8153%" y="69" width="0.7320%" height="15" fill="rgb(239,152,38)" fg:x="4690" fg:w="65"/><text x="53.1083%" y="79.50"></text></g><g><title>leb128_encode (11 instructions, 0.12%)</title><rect x="53.5473%" y="69" width="0.1239%" height="15" fill="rgb(249,139,47)" fg:x="4755" fg:w="11"/><text x="53.8403%" y="79.50"></text></g><g><title>leb128_encode (11 instructions, 0.12%)</title><rect x="53.6712%" y="53" width="0.1239%" height="15" fill="rgb(244,64,35)" fg:x="4766" fg:w="11"/><text x="53.9641%" y="63.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.57%)</title><rect x="53.6712%" y="69" width="0.5743%" height="15" fill="rgb(216,46,15)" fg:x="4766" fg:w="51"/><text x="53.9641%" y="79.50"></text></g><g><title>$lambda.45 (1,567 instructions, 17.65%)</title><rect x="50.2027%" y="85" width="17.6464%" height="15" fill="rgb(250,74,19)" fg:x="4458" fg:w="1567"/><text x="50.4957%" y="95.50">$lambda.45</text></g><g><title>$lambda.8 (5,000 instructions, 56.31%)</title><rect x="24.3356%" y="101" width="56.3063%" height="15" fill="rgb(249,42,33)" fg:x="2161" fg:w="5000"/><text x="24.6286%" y="111.50">$lambda.8</text></g><g><title>schedule_copying_gc (108 instructions, 1.22%)</title><rect x="80.6419%" y="101" width="1.2162%" height="15" fill="rgb(242,149,17)" fg:x="7161" fg:w="108"/><text x="80.9349%" y="111.50"></text></g><g><title>trans_state4 (11 instructions, 0.12%)</title><rect x="81.8581%" y="101" width="0.1239%" height="15" fill="rgb(244,29,21)" fg:x="7269" fg:w="11"/><text x="82.1511%" y="111.50"></text></g><g><title>all (8,880 instructions, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="8880"/><text x="0.2930%" y="143.50"></text></g><g><title>transferFromDip721 (8,880 instructions, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="8880"/><text x="0.2930%" y="127.50">transferFromDip721</text></g></svg></svg>