<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.transferFromDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="5358"><g><title>trans_state5 (9 instructions, 0.17%)</title><rect x="0.0000%" y="117" width="0.1680%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="9"/><text x="0.2930%" y="127.50"></text></g><g><title>@reset_cycles (3 instructions, 0.06%)</title><rect x="0.1680%" y="117" width="0.0560%" height="15" fill="rgb(232,164,16)" fg:x="9" fg:w="3"/><text x="0.4609%" y="127.50"></text></g><g><title>@reset_refund (3 instructions, 0.06%)</title><rect x="0.2240%" y="117" width="0.0560%" height="15" fill="rgb(244,205,15)" fg:x="12" fg:w="3"/><text x="0.5169%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="0.2800%" y="101" width="0.6346%" height="15" fill="rgb(223,117,47)" fg:x="15" fg:w="34"/><text x="0.5729%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="0.2800%" y="117" width="0.6719%" height="15" fill="rgb(244,107,35)" fg:x="15" fg:w="36"/><text x="0.5729%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 0.95%)</title><rect x="0.9518%" y="85" width="0.9518%" height="15" fill="rgb(205,140,8)" fg:x="51" fg:w="51"/><text x="1.2448%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="1.9037%" y="85" width="0.6346%" height="15" fill="rgb(228,84,46)" fg:x="102" fg:w="34"/><text x="2.1967%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 0.95%)</title><rect x="2.5383%" y="85" width="0.9518%" height="15" fill="rgb(254,188,9)" fg:x="136" fg:w="51"/><text x="2.8312%" y="95.50"></text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="3.4901%" y="85" width="1.2691%" height="15" fill="rgb(206,112,54)" fg:x="187" fg:w="68"/><text x="3.7831%" y="95.50"></text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="4.7592%" y="85" width="1.2691%" height="15" fill="rgb(216,84,49)" fg:x="255" fg:w="68"/><text x="5.0522%" y="95.50"></text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="6.0284%" y="85" width="1.2691%" height="15" fill="rgb(214,194,35)" fg:x="323" fg:w="68"/><text x="6.3213%" y="95.50"></text></g><g><title>parse_idl_header (464 instructions, 8.66%)</title><rect x="0.9518%" y="101" width="8.6599%" height="15" fill="rgb(249,28,3)" fg:x="51" fg:w="464"/><text x="1.2448%" y="111.50">parse_idl_..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.17%)</title><rect x="9.6118%" y="101" width="0.1680%" height="15" fill="rgb(222,56,52)" fg:x="515" fg:w="9"/><text x="9.9048%" y="111.50"></text></g><g><title>memset (4 instructions, 0.07%)</title><rect x="9.7798%" y="85" width="0.0747%" height="15" fill="rgb(245,217,50)" fg:x="524" fg:w="4"/><text x="10.0727%" y="95.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.35%)</title><rect x="9.7798%" y="101" width="0.3546%" height="15" fill="rgb(213,201,24)" fg:x="524" fg:w="19"/><text x="10.0727%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 0.95%)</title><rect x="10.1344%" y="101" width="0.9518%" height="15" fill="rgb(248,116,28)" fg:x="543" fg:w="51"/><text x="10.4273%" y="111.50"></text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="11.0862%" y="101" width="1.2691%" height="15" fill="rgb(219,72,43)" fg:x="594" fg:w="68"/><text x="11.3792%" y="111.50"></text></g><g><title>set_local %i0 (3 instructions, 0.06%)</title><rect x="12.3554%" y="101" width="0.0560%" height="15" fill="rgb(209,138,14)" fg:x="662" fg:w="3"/><text x="12.6483%" y="111.50"></text></g><g><title>set_local %i1 (3 instructions, 0.06%)</title><rect x="12.4113%" y="101" width="0.0560%" height="15" fill="rgb(222,18,33)" fg:x="665" fg:w="3"/><text x="12.7043%" y="111.50"></text></g><g><title>set_local %i2 (3 instructions, 0.06%)</title><rect x="12.4673%" y="101" width="0.0560%" height="15" fill="rgb(213,199,7)" fg:x="668" fg:w="3"/><text x="12.7603%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 0.95%)</title><rect x="12.5233%" y="85" width="0.9518%" height="15" fill="rgb(250,110,10)" fg:x="671" fg:w="51"/><text x="12.8163%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="13.4752%" y="69" width="0.6346%" height="15" fill="rgb(248,123,6)" fg:x="722" fg:w="34"/><text x="13.7681%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="13.4752%" y="85" width="0.6719%" height="15" fill="rgb(206,91,31)" fg:x="722" fg:w="36"/><text x="13.7681%" y="95.50"></text></g><g><title>memcpy (122 instructions, 2.28%)</title><rect x="14.1471%" y="85" width="2.2770%" height="15" fill="rgb(211,154,13)" fg:x="758" fg:w="122"/><text x="14.4400%" y="95.50">m..</text></g><g><title>@deserialize_go&lt;P&gt; (282 instructions, 5.26%)</title><rect x="12.5233%" y="101" width="5.2632%" height="15" fill="rgb(225,148,7)" fg:x="671" fg:w="282"/><text x="12.8163%" y="111.50">@dese..</text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="17.7865%" y="101" width="1.2691%" height="15" fill="rgb(220,160,43)" fg:x="953" fg:w="68"/><text x="18.0795%" y="111.50"></text></g><g><title>set_local %i0 (3 instructions, 0.06%)</title><rect x="19.0556%" y="101" width="0.0560%" height="15" fill="rgb(213,52,39)" fg:x="1021" fg:w="3"/><text x="19.3486%" y="111.50"></text></g><g><title>set_local %i1 (3 instructions, 0.06%)</title><rect x="19.1116%" y="101" width="0.0560%" height="15" fill="rgb(243,137,7)" fg:x="1024" fg:w="3"/><text x="19.4046%" y="111.50"></text></g><g><title>set_local %i2 (3 instructions, 0.06%)</title><rect x="19.1676%" y="101" width="0.0560%" height="15" fill="rgb(230,79,13)" fg:x="1027" fg:w="3"/><text x="19.4606%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 0.95%)</title><rect x="19.2236%" y="85" width="0.9518%" height="15" fill="rgb(247,105,23)" fg:x="1030" fg:w="51"/><text x="19.5166%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="20.1754%" y="69" width="0.6346%" height="15" fill="rgb(223,179,41)" fg:x="1081" fg:w="34"/><text x="20.4684%" y="79.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="20.1754%" y="85" width="0.6719%" height="15" fill="rgb(218,9,34)" fg:x="1081" fg:w="36"/><text x="20.4684%" y="95.50"></text></g><g><title>memcpy (159 instructions, 2.97%)</title><rect x="20.8473%" y="85" width="2.9675%" height="15" fill="rgb(222,106,8)" fg:x="1117" fg:w="159"/><text x="21.1403%" y="95.50">me..</text></g><g><title>@deserialize_go&lt;P&gt; (319 instructions, 5.95%)</title><rect x="19.2236%" y="101" width="5.9537%" height="15" fill="rgb(211,220,0)" fg:x="1030" fg:w="319"/><text x="19.5166%" y="111.50">@deser..</text></g><g><title>sleb128_decode (68 instructions, 1.27%)</title><rect x="25.1773%" y="101" width="1.2691%" height="15" fill="rgb(229,52,16)" fg:x="1349" fg:w="68"/><text x="25.4703%" y="111.50"></text></g><g><title>set_local %i0 (3 instructions, 0.06%)</title><rect x="26.4464%" y="101" width="0.0560%" height="15" fill="rgb(212,155,18)" fg:x="1417" fg:w="3"/><text x="26.7394%" y="111.50"></text></g><g><title>set_local %i1 (3 instructions, 0.06%)</title><rect x="26.5024%" y="101" width="0.0560%" height="15" fill="rgb(242,21,14)" fg:x="1420" fg:w="3"/><text x="26.7954%" y="111.50"></text></g><g><title>set_local %i2 (3 instructions, 0.06%)</title><rect x="26.5584%" y="101" width="0.0560%" height="15" fill="rgb(222,19,48)" fg:x="1423" fg:w="3"/><text x="26.8514%" y="111.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.15%)</title><rect x="26.6144%" y="69" width="0.1493%" height="15" fill="rgb(232,45,27)" fg:x="1426" fg:w="8"/><text x="26.9074%" y="79.50"></text></g><g><title>box_i64 (15 instructions, 0.28%)</title><rect x="26.6144%" y="85" width="0.2800%" height="15" fill="rgb(249,103,42)" fg:x="1426" fg:w="15"/><text x="26.9074%" y="95.50"></text></g><g><title>@deserialize_go&lt;n64&gt; (52 instructions, 0.97%)</title><rect x="26.6144%" y="101" width="0.9705%" height="15" fill="rgb(246,81,33)" fg:x="1426" fg:w="52"/><text x="26.9074%" y="111.50"></text></g><g><title>@deserialize&lt;PPn64&gt; (1,744 instructions, 32.55%)</title><rect x="0.9518%" y="117" width="32.5495%" height="15" fill="rgb(252,33,42)" fg:x="51" fg:w="1744"/><text x="1.2448%" y="127.50">@deserialize&lt;PPn64&gt;</text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="33.5013%" y="117" width="0.4853%" height="15" fill="rgb(209,212,41)" fg:x="1795" fg:w="26"/><text x="33.7943%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="33.9866%" y="85" width="0.6346%" height="15" fill="rgb(207,154,6)" fg:x="1821" fg:w="34"/><text x="34.2795%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="33.9866%" y="101" width="0.6719%" height="15" fill="rgb(223,64,47)" fg:x="1821" fg:w="36"/><text x="34.2795%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="34.6585%" y="101" width="0.4853%" height="15" fill="rgb(211,161,38)" fg:x="1857" fg:w="26"/><text x="34.9514%" y="111.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.30%)</title><rect x="35.1437%" y="101" width="0.2986%" height="15" fill="rgb(219,138,40)" fg:x="1883" fg:w="16"/><text x="35.4367%" y="111.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="35.4423%" y="101" width="0.1306%" height="15" fill="rgb(241,228,46)" fg:x="1899" fg:w="7"/><text x="35.7353%" y="111.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.15%)</title><rect x="35.5730%" y="85" width="0.1493%" height="15" fill="rgb(223,209,38)" fg:x="1906" fg:w="8"/><text x="35.8659%" y="95.50"></text></g><g><title>box_i64 (15 instructions, 0.28%)</title><rect x="35.5730%" y="101" width="0.2800%" height="15" fill="rgb(236,164,45)" fg:x="1906" fg:w="15"/><text x="35.8659%" y="111.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="35.8529%" y="85" width="0.4853%" height="15" fill="rgb(231,15,5)" fg:x="1921" fg:w="26"/><text x="36.1459%" y="95.50"></text></g><g><title>opt_project (14 instructions, 0.26%)</title><rect x="36.3382%" y="69" width="0.2613%" height="15" fill="rgb(252,35,15)" fg:x="1947" fg:w="14"/><text x="36.6312%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.30%)</title><rect x="36.5995%" y="53" width="0.2986%" height="15" fill="rgb(248,181,18)" fg:x="1961" fg:w="16"/><text x="36.8924%" y="63.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="36.8981%" y="53" width="0.1306%" height="15" fill="rgb(233,39,42)" fg:x="1977" fg:w="7"/><text x="37.1911%" y="63.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="37.0287%" y="53" width="0.1306%" height="15" fill="rgb(238,110,33)" fg:x="1984" fg:w="7"/><text x="37.3217%" y="63.50"></text></g><g><title>anon-func-58.32 (41 instructions, 0.77%)</title><rect x="36.5995%" y="69" width="0.7652%" height="15" fill="rgb(233,195,10)" fg:x="1961" fg:w="41"/><text x="36.8924%" y="79.50"></text></g><g><title>opt_inject (14 instructions, 0.26%)</title><rect x="37.3647%" y="69" width="0.2613%" height="15" fill="rgb(254,105,3)" fg:x="2002" fg:w="14"/><text x="37.6577%" y="79.50"></text></g><g><title>find (114 instructions, 2.13%)</title><rect x="36.3382%" y="85" width="2.1277%" height="15" fill="rgb(221,225,9)" fg:x="1947" fg:w="114"/><text x="36.6312%" y="95.50">f..</text></g><g><title>opt_project (14 instructions, 0.26%)</title><rect x="38.4658%" y="85" width="0.2613%" height="15" fill="rgb(224,227,45)" fg:x="2061" fg:w="14"/><text x="38.7588%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.30%)</title><rect x="38.7271%" y="85" width="0.2986%" height="15" fill="rgb(229,198,43)" fg:x="2075" fg:w="16"/><text x="39.0201%" y="95.50"></text></g><g><title>Blob.compare_eq (803 instructions, 14.99%)</title><rect x="39.0258%" y="85" width="14.9869%" height="15" fill="rgb(206,209,35)" fg:x="2091" fg:w="803"/><text x="39.3187%" y="95.50">Blob.compare_eq</text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.30%)</title><rect x="54.0127%" y="85" width="0.2986%" height="15" fill="rgb(245,195,53)" fg:x="2894" fg:w="16"/><text x="54.3057%" y="95.50"></text></g><g><title>Blob.compare_eq (803 instructions, 14.99%)</title><rect x="54.3113%" y="69" width="14.9869%" height="15" fill="rgb(240,92,26)" fg:x="2910" fg:w="803"/><text x="54.6043%" y="79.50">Blob.compare_eq</text></g><g><title>notEqual (807 instructions, 15.06%)</title><rect x="54.3113%" y="85" width="15.0616%" height="15" fill="rgb(207,40,23)" fg:x="2910" fg:w="807"/><text x="54.6043%" y="95.50">notEqual</text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="69.3729%" y="85" width="0.4853%" height="15" fill="rgb(223,111,35)" fg:x="3717" fg:w="26"/><text x="69.6659%" y="95.50"></text></g><g><title>opt_project (14 instructions, 0.26%)</title><rect x="69.8582%" y="69" width="0.2613%" height="15" fill="rgb(229,147,28)" fg:x="3743" fg:w="14"/><text x="70.1511%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.30%)</title><rect x="70.1194%" y="53" width="0.2986%" height="15" fill="rgb(211,29,28)" fg:x="3757" fg:w="16"/><text x="70.4124%" y="63.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="70.4181%" y="53" width="0.1306%" height="15" fill="rgb(228,72,33)" fg:x="3773" fg:w="7"/><text x="70.7110%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.30%)</title><rect x="70.5487%" y="53" width="0.2986%" height="15" fill="rgb(205,214,31)" fg:x="3780" fg:w="16"/><text x="70.8417%" y="63.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="70.8473%" y="53" width="0.1306%" height="15" fill="rgb(224,111,15)" fg:x="3796" fg:w="7"/><text x="71.1403%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.30%)</title><rect x="70.9780%" y="53" width="0.2986%" height="15" fill="rgb(253,21,26)" fg:x="3803" fg:w="16"/><text x="71.2709%" y="63.50"></text></g><g><title>unbox_i64 (7 instructions, 0.13%)</title><rect x="71.2766%" y="53" width="0.1306%" height="15" fill="rgb(245,139,43)" fg:x="3819" fg:w="7"/><text x="71.5696%" y="63.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.30%)</title><rect x="71.4072%" y="53" width="0.2986%" height="15" fill="rgb(252,170,7)" fg:x="3826" fg:w="16"/><text x="71.7002%" y="63.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="71.7059%" y="53" width="0.4853%" height="15" fill="rgb(231,118,14)" fg:x="3842" fg:w="26"/><text x="71.9988%" y="63.50"></text></g><g><title>can_tag_i64 (8 instructions, 0.15%)</title><rect x="72.1911%" y="37" width="0.1493%" height="15" fill="rgb(238,83,0)" fg:x="3868" fg:w="8"/><text x="72.4841%" y="47.50"></text></g><g><title>box_i64 (15 instructions, 0.28%)</title><rect x="72.1911%" y="53" width="0.2800%" height="15" fill="rgb(221,39,39)" fg:x="3868" fg:w="15"/><text x="72.4841%" y="63.50"></text></g><g><title>anon-func-72.34 (181 instructions, 3.38%)</title><rect x="70.1194%" y="69" width="3.3781%" height="15" fill="rgb(222,119,46)" fg:x="3757" fg:w="181"/><text x="70.4124%" y="79.50">an..</text></g><g><title>map (10 instructions, 0.19%)</title><rect x="73.4976%" y="69" width="0.1866%" height="15" fill="rgb(222,165,49)" fg:x="3938" fg:w="10"/><text x="73.7905%" y="79.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="73.6842%" y="53" width="0.4853%" height="15" fill="rgb(219,113,52)" fg:x="3948" fg:w="26"/><text x="73.9772%" y="63.50"></text></g><g><title>to_2_tuple (41 instructions, 0.77%)</title><rect x="73.6842%" y="69" width="0.7652%" height="15" fill="rgb(214,7,15)" fg:x="3948" fg:w="41"/><text x="73.9772%" y="79.50"></text></g><g><title>opt_inject (14 instructions, 0.26%)</title><rect x="74.4494%" y="69" width="0.2613%" height="15" fill="rgb(235,32,4)" fg:x="3989" fg:w="14"/><text x="74.7424%" y="79.50"></text></g><g><title>map (298 instructions, 5.56%)</title><rect x="69.8582%" y="85" width="5.5618%" height="15" fill="rgb(238,90,54)" fg:x="3743" fg:w="298"/><text x="70.1511%" y="95.50">map</text></g><g><title>can_tag_i64 (8 instructions, 0.15%)</title><rect x="75.4199%" y="69" width="0.1493%" height="15" fill="rgb(213,208,19)" fg:x="4041" fg:w="8"/><text x="75.7129%" y="79.50"></text></g><g><title>B_add (25 instructions, 0.47%)</title><rect x="75.4199%" y="85" width="0.4666%" height="15" fill="rgb(233,156,4)" fg:x="4041" fg:w="25"/><text x="75.7129%" y="95.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="75.8865%" y="85" width="0.4853%" height="15" fill="rgb(207,194,5)" fg:x="4066" fg:w="26"/><text x="76.1795%" y="95.50"></text></g><g><title>transferFrom (2,271 instructions, 42.39%)</title><rect x="35.8529%" y="101" width="42.3852%" height="15" fill="rgb(206,111,30)" fg:x="1921" fg:w="2271"/><text x="36.1459%" y="111.50">transferFrom</text></g><g><title>@buffer_size&lt;N&gt; (32 instructions, 0.60%)</title><rect x="78.2381%" y="53" width="0.5972%" height="15" fill="rgb(243,70,54)" fg:x="4192" fg:w="32"/><text x="78.5311%" y="63.50"></text></g><g><title>@buffer_size&lt;v(Err:v(InvalidTokenId:u,Other:u,Unauthorized:u,ZeroAddress:u),Ok:N)&gt; (74 instructions, 1.38%)</title><rect x="78.2381%" y="69" width="1.3811%" height="15" fill="rgb(242,28,8)" fg:x="4192" fg:w="74"/><text x="78.5311%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="79.6193%" y="53" width="0.6346%" height="15" fill="rgb(219,106,18)" fg:x="4266" fg:w="34"/><text x="79.9122%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="79.6193%" y="69" width="0.6719%" height="15" fill="rgb(244,222,10)" fg:x="4266" fg:w="36"/><text x="79.9122%" y="79.50"></text></g><g><title>memcpy (117 instructions, 2.18%)</title><rect x="80.2912%" y="69" width="2.1837%" height="15" fill="rgb(236,179,52)" fg:x="4302" fg:w="117"/><text x="80.5841%" y="79.50">m..</text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 instructions, 0.63%)</title><rect x="82.4748%" y="53" width="0.6346%" height="15" fill="rgb(213,23,39)" fg:x="4419" fg:w="34"/><text x="82.7678%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 0.67%)</title><rect x="82.4748%" y="69" width="0.6719%" height="15" fill="rgb(238,48,10)" fg:x="4419" fg:w="36"/><text x="82.7678%" y="79.50"></text></g><g><title>leb128_encode (12 instructions, 0.22%)</title><rect x="83.1467%" y="53" width="0.2240%" height="15" fill="rgb(251,196,23)" fg:x="4455" fg:w="12"/><text x="83.4397%" y="63.50"></text></g><g><title>leb128_encode (12 instructions, 0.22%)</title><rect x="83.3707%" y="37" width="0.2240%" height="15" fill="rgb(250,152,24)" fg:x="4467" fg:w="12"/><text x="83.6636%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (40 instructions, 0.75%)</title><rect x="83.3707%" y="53" width="0.7465%" height="15" fill="rgb(209,150,17)" fg:x="4467" fg:w="40"/><text x="83.6636%" y="63.50"></text></g><g><title>@serialize_go&lt;v(Err:v(InvalidTokenId:u,Other:u,Unauthorized:u,ZeroAddress:u),Ok:N)&gt; (80 instructions, 1.49%)</title><rect x="83.1467%" y="69" width="1.4931%" height="15" fill="rgb(234,202,34)" fg:x="4455" fg:w="80"/><text x="83.4397%" y="79.50"></text></g><g><title>@serialize&lt;v(Err:v(InvalidTokenId:u,Other:u,Unauthorized:u,ZeroAddress:u),Ok:N)&gt; (406 instructions, 7.58%)</title><rect x="78.2381%" y="85" width="7.5775%" height="15" fill="rgb(253,148,53)" fg:x="4192" fg:w="406"/><text x="78.5311%" y="95.50">@seriali..</text></g><g><title>reply_with_data (70 instructions, 1.31%)</title><rect x="85.8156%" y="85" width="1.3065%" height="15" fill="rgb(218,129,16)" fg:x="4598" fg:w="70"/><text x="86.1086%" y="95.50"></text></g><g><title>$lambda (481 instructions, 8.98%)</title><rect x="78.2381%" y="101" width="8.9772%" height="15" fill="rgb(216,85,19)" fg:x="4192" fg:w="481"/><text x="78.5311%" y="111.50">$lambda</text></g><g><title>$lambda (2,914 instructions, 54.39%)</title><rect x="33.9866%" y="117" width="54.3860%" height="15" fill="rgb(235,228,7)" fg:x="1821" fg:w="2914"/><text x="34.2795%" y="127.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 0.93%)</title><rect x="88.3725%" y="117" width="0.9332%" height="15" fill="rgb(245,175,0)" fg:x="4735" fg:w="50"/><text x="88.6655%" y="127.50"></text></g><g><title>trans_state4 (14 instructions, 0.26%)</title><rect x="89.3057%" y="117" width="0.2613%" height="15" fill="rgb(208,168,36)" fg:x="4785" fg:w="14"/><text x="89.5987%" y="127.50"></text></g><g><title>all (5,358 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(246,171,24)" fg:x="0" fg:w="5358"/><text x="0.2930%" y="159.50"></text></g><g><title>transferFromDip721 (5,358 instructions, 100.00%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(215,142,24)" fg:x="0" fg:w="5358"/><text x="0.2930%" y="143.50">transferFromDip721</text></g></svg></svg>