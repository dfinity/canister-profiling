<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="294" onload="init(evt)" viewBox="0 0 1024 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">DAO.transfer</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="277.00"> </text><svg id="frames" x="10" width="1004" total_samples="23340"><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="0.0000%" y="213" width="0.0428%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="0.0428%" y="197" width="0.2442%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="57"/><text x="0.3358%" y="207.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="0.0428%" y="213" width="0.2785%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="65"/><text x="0.3358%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="0.3213%" y="197" width="0.2057%" height="15" fill="rgb(248,212,6)" fg:x="75" fg:w="48"/><text x="0.6143%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="0.5270%" y="197" width="0.2442%" height="15" fill="rgb(208,68,35)" fg:x="123" fg:w="57"/><text x="0.8200%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="0.7712%" y="197" width="0.2742%" height="15" fill="rgb(232,128,0)" fg:x="180" fg:w="64"/><text x="1.0642%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="1.0454%" y="197" width="0.2057%" height="15" fill="rgb(207,160,47)" fg:x="244" fg:w="48"/><text x="1.3384%" y="207.50"></text></g><g><title>leb128_decode (138 instructions, 0.59%)</title><rect x="1.2511%" y="197" width="0.5913%" height="15" fill="rgb(228,23,34)" fg:x="292" fg:w="138"/><text x="1.5440%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="1.8423%" y="197" width="0.2742%" height="15" fill="rgb(218,30,26)" fg:x="430" fg:w="64"/><text x="2.1353%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (17 instructions, 0.07%)</title><rect x="2.1165%" y="197" width="0.0728%" height="15" fill="rgb(220,122,19)" fg:x="494" fg:w="17"/><text x="2.4095%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="2.1894%" y="197" width="0.9769%" height="15" fill="rgb(250,228,42)" fg:x="511" fg:w="228"/><text x="2.4823%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="3.1662%" y="197" width="0.2742%" height="15" fill="rgb(240,193,28)" fg:x="739" fg:w="64"/><text x="3.4592%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.05%)</title><rect x="3.4404%" y="197" width="0.0514%" height="15" fill="rgb(216,20,37)" fg:x="803" fg:w="12"/><text x="3.7334%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="3.4919%" y="197" width="0.2742%" height="15" fill="rgb(206,188,39)" fg:x="815" fg:w="64"/><text x="3.7848%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="3.7661%" y="197" width="0.2057%" height="15" fill="rgb(217,207,13)" fg:x="879" fg:w="48"/><text x="4.0590%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="3.9717%" y="197" width="0.9769%" height="15" fill="rgb(231,73,38)" fg:x="927" fg:w="228"/><text x="4.2647%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="4.9486%" y="197" width="0.2742%" height="15" fill="rgb(225,20,46)" fg:x="1155" fg:w="64"/><text x="5.2416%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.05%)</title><rect x="5.2228%" y="197" width="0.0514%" height="15" fill="rgb(210,31,41)" fg:x="1219" fg:w="12"/><text x="5.5158%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="5.2742%" y="197" width="0.2742%" height="15" fill="rgb(221,200,47)" fg:x="1231" fg:w="64"/><text x="5.5672%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="5.5484%" y="197" width="0.2742%" height="15" fill="rgb(226,26,5)" fg:x="1295" fg:w="64"/><text x="5.8414%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="5.8226%" y="197" width="0.2057%" height="15" fill="rgb(249,33,26)" fg:x="1359" fg:w="48"/><text x="6.1156%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="6.0283%" y="197" width="0.2742%" height="15" fill="rgb(235,183,28)" fg:x="1407" fg:w="64"/><text x="6.3212%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.05%)</title><rect x="6.3025%" y="197" width="0.0514%" height="15" fill="rgb(221,5,38)" fg:x="1471" fg:w="12"/><text x="6.5955%" y="207.50"></text></g><g><title>parse_idl_header (1,878 instructions, 8.05%)</title><rect x="0.3213%" y="213" width="8.0463%" height="15" fill="rgb(247,18,42)" fg:x="75" fg:w="1878"/><text x="0.6143%" y="223.50">parse_idl..</text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="8.3676%" y="197" width="0.0257%" height="15" fill="rgb(241,131,45)" fg:x="1953" fg:w="6"/><text x="8.6606%" y="207.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.06%)</title><rect x="8.3676%" y="213" width="0.0643%" height="15" fill="rgb(249,31,29)" fg:x="1953" fg:w="15"/><text x="8.6606%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="8.4319%" y="213" width="0.2057%" height="15" fill="rgb(225,111,53)" fg:x="1968" fg:w="48"/><text x="8.7248%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="8.6375%" y="213" width="0.2742%" height="15" fill="rgb(238,160,17)" fg:x="2016" fg:w="64"/><text x="8.9305%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="8.9117%" y="213" width="0.0857%" height="15" fill="rgb(214,148,48)" fg:x="2080" fg:w="20"/><text x="9.2047%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="8.9974%" y="213" width="0.2742%" height="15" fill="rgb(232,36,49)" fg:x="2100" fg:w="64"/><text x="9.2904%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="9.2716%" y="213" width="0.2057%" height="15" fill="rgb(209,103,24)" fg:x="2164" fg:w="48"/><text x="9.5646%" y="223.50"></text></g><g><title>leb128_decode (138 instructions, 0.59%)</title><rect x="9.4773%" y="197" width="0.5913%" height="15" fill="rgb(229,88,8)" fg:x="2212" fg:w="138"/><text x="9.7703%" y="207.50"></text></g><g><title>find_field (174 instructions, 0.75%)</title><rect x="9.4773%" y="213" width="0.7455%" height="15" fill="rgb(213,181,19)" fg:x="2212" fg:w="174"/><text x="9.7703%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="10.2228%" y="213" width="0.2742%" height="15" fill="rgb(254,191,54)" fg:x="2386" fg:w="64"/><text x="10.5158%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="10.4970%" y="197" width="0.0857%" height="15" fill="rgb(241,83,37)" fg:x="2450" fg:w="20"/><text x="10.7900%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="10.5827%" y="197" width="0.2057%" height="15" fill="rgb(233,36,39)" fg:x="2470" fg:w="48"/><text x="10.8757%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="10.7883%" y="181" width="0.2442%" height="15" fill="rgb(226,3,54)" fg:x="2518" fg:w="57"/><text x="11.0813%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="10.7883%" y="197" width="0.2785%" height="15" fill="rgb(245,192,40)" fg:x="2518" fg:w="65"/><text x="11.0813%" y="207.50"></text></g><g><title>memcpy (196 instructions, 0.84%)</title><rect x="11.0668%" y="197" width="0.8398%" height="15" fill="rgb(238,167,29)" fg:x="2583" fg:w="196"/><text x="11.3598%" y="207.50"></text></g><g><title>@deserialize_go&lt;P&gt; (442 instructions, 1.89%)</title><rect x="10.4970%" y="213" width="1.8937%" height="15" fill="rgb(232,182,51)" fg:x="2450" fg:w="442"/><text x="10.7900%" y="223.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="12.3907%" y="197" width="0.9769%" height="15" fill="rgb(231,60,39)" fg:x="2892" fg:w="228"/><text x="12.6837%" y="207.50"></text></g><g><title>find_field (264 instructions, 1.13%)</title><rect x="12.3907%" y="213" width="1.1311%" height="15" fill="rgb(208,69,12)" fg:x="2892" fg:w="264"/><text x="12.6837%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="13.5219%" y="213" width="0.2742%" height="15" fill="rgb(235,93,37)" fg:x="3156" fg:w="64"/><text x="13.8148%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="13.7961%" y="197" width="0.0857%" height="15" fill="rgb(213,116,39)" fg:x="3220" fg:w="20"/><text x="14.0890%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="13.8817%" y="197" width="0.2742%" height="15" fill="rgb(222,207,29)" fg:x="3240" fg:w="64"/><text x="14.1747%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="14.1560%" y="197" width="0.2057%" height="15" fill="rgb(206,96,30)" fg:x="3304" fg:w="48"/><text x="14.4489%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="14.3616%" y="181" width="0.9769%" height="15" fill="rgb(218,138,4)" fg:x="3352" fg:w="228"/><text x="14.6546%" y="191.50"></text></g><g><title>find_field (264 instructions, 1.13%)</title><rect x="14.3616%" y="197" width="1.1311%" height="15" fill="rgb(250,191,14)" fg:x="3352" fg:w="264"/><text x="14.6546%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="15.4927%" y="197" width="0.2742%" height="15" fill="rgb(239,60,40)" fg:x="3616" fg:w="64"/><text x="15.7857%" y="207.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="15.7669%" y="181" width="0.0857%" height="15" fill="rgb(206,27,48)" fg:x="3680" fg:w="20"/><text x="16.0599%" y="191.50"></text></g><g><title>int_from_i32 (13 instructions, 0.06%)</title><rect x="15.8526%" y="165" width="0.0557%" height="15" fill="rgb(225,35,8)" fg:x="3700" fg:w="13"/><text x="16.1456%" y="175.50"></text></g><g><title>bigint_leb128_decode_word64 (77 instructions, 0.33%)</title><rect x="15.8526%" y="181" width="0.3299%" height="15" fill="rgb(250,213,24)" fg:x="3700" fg:w="77"/><text x="16.1456%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (163 instructions, 0.70%)</title><rect x="15.7669%" y="197" width="0.6984%" height="15" fill="rgb(247,123,22)" fg:x="3680" fg:w="163"/><text x="16.0599%" y="207.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="16.4653%" y="197" width="0.0257%" height="15" fill="rgb(231,138,38)" fg:x="3843" fg:w="6"/><text x="16.7583%" y="207.50"></text></g><g><title>@deserialize_go&lt;r(amount_e8s:N)&gt; (854 instructions, 3.66%)</title><rect x="13.7961%" y="213" width="3.6590%" height="15" fill="rgb(231,145,46)" fg:x="3220" fg:w="854"/><text x="14.0890%" y="223.50">@de..</text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="17.4550%" y="213" width="0.0257%" height="15" fill="rgb(251,118,11)" fg:x="4074" fg:w="6"/><text x="17.7480%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="17.4807%" y="181" width="0.2442%" height="15" fill="rgb(217,147,25)" fg:x="4080" fg:w="57"/><text x="17.7737%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="17.4807%" y="197" width="0.2785%" height="15" fill="rgb(247,81,37)" fg:x="4080" fg:w="65"/><text x="17.7737%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="17.7592%" y="197" width="0.0728%" height="15" fill="rgb(209,12,38)" fg:x="4145" fg:w="17"/><text x="18.0522%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="17.8320%" y="149" width="0.2442%" height="15" fill="rgb(227,1,9)" fg:x="4162" fg:w="57"/><text x="18.1250%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="17.8320%" y="165" width="0.2785%" height="15" fill="rgb(248,47,43)" fg:x="4162" fg:w="65"/><text x="18.1250%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="18.1105%" y="165" width="0.4284%" height="15" fill="rgb(221,10,30)" fg:x="4227" fg:w="100"/><text x="18.4035%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="18.5390%" y="165" width="3.3462%" height="15" fill="rgb(210,229,1)" fg:x="4327" fg:w="781"/><text x="18.8320%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.44%)</title><rect x="17.8320%" y="181" width="4.4387%" height="15" fill="rgb(222,148,37)" fg:x="4162" fg:w="1036"/><text x="18.1250%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="22.2708%" y="165" width="0.1200%" height="15" fill="rgb(234,67,33)" fg:x="5198" fg:w="28"/><text x="22.5637%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="22.3907%" y="149" width="0.0728%" height="15" fill="rgb(247,98,35)" fg:x="5226" fg:w="17"/><text x="22.6837%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.4636%" y="133" width="0.0728%" height="15" fill="rgb(247,138,52)" fg:x="5243" fg:w="17"/><text x="22.7566%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.5364%" y="133" width="0.0728%" height="15" fill="rgb(213,79,30)" fg:x="5260" fg:w="17"/><text x="22.8294%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.7721%" y="133" width="0.0728%" height="15" fill="rgb(246,177,23)" fg:x="5315" fg:w="17"/><text x="23.0650%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.8449%" y="133" width="0.0728%" height="15" fill="rgb(230,62,27)" fg:x="5332" fg:w="17"/><text x="23.1379%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.0763%" y="133" width="0.0728%" height="15" fill="rgb(216,154,8)" fg:x="5386" fg:w="17"/><text x="23.3692%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.1491%" y="133" width="0.0728%" height="15" fill="rgb(244,35,45)" fg:x="5403" fg:w="17"/><text x="23.4421%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.3805%" y="133" width="0.0728%" height="15" fill="rgb(251,115,12)" fg:x="5457" fg:w="17"/><text x="23.6734%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.4533%" y="133" width="0.0728%" height="15" fill="rgb(240,54,50)" fg:x="5474" fg:w="17"/><text x="23.7463%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="23.5261%" y="133" width="0.0728%" height="15" fill="rgb(233,84,52)" fg:x="5491" fg:w="17"/><text x="23.8191%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="23.5990%" y="133" width="0.0728%" height="15" fill="rgb(207,117,47)" fg:x="5508" fg:w="17"/><text x="23.8919%" y="143.50"></text></g><g><title>Blob.compare_eq (769 instructions, 3.29%)</title><rect x="23.6718%" y="117" width="3.2948%" height="15" fill="rgb(249,43,39)" fg:x="5525" fg:w="769"/><text x="23.9648%" y="127.50">Bl..</text></g><g><title>equal.1 (777 instructions, 3.33%)</title><rect x="23.6718%" y="133" width="3.3290%" height="15" fill="rgb(209,38,44)" fg:x="5525" fg:w="777"/><text x="23.9648%" y="143.50">eq..</text></g><g><title>@anon-func-191.5 (1,125 instructions, 4.82%)</title><rect x="22.4636%" y="149" width="4.8201%" height="15" fill="rgb(236,212,23)" fg:x="5243" fg:w="1125"/><text x="22.7566%" y="159.50">@ano..</text></g><g><title>rec.4 (1,446 instructions, 6.20%)</title><rect x="22.3907%" y="165" width="6.1954%" height="15" fill="rgb(242,79,21)" fg:x="5226" fg:w="1446"/><text x="22.6837%" y="175.50">rec.4</text></g><g><title>get.2 (1,526 instructions, 6.54%)</title><rect x="22.2708%" y="181" width="6.5381%" height="15" fill="rgb(211,96,35)" fg:x="5198" fg:w="1526"/><text x="22.5637%" y="191.50">get.2</text></g><g><title>account_get (2,577 instructions, 11.04%)</title><rect x="17.8320%" y="197" width="11.0411%" height="15" fill="rgb(253,215,40)" fg:x="4162" fg:w="2577"/><text x="18.1250%" y="207.50">account_get</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="28.8732%" y="197" width="0.0728%" height="15" fill="rgb(211,81,21)" fg:x="6739" fg:w="17"/><text x="29.1661%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="28.9460%" y="197" width="0.0728%" height="15" fill="rgb(208,190,38)" fg:x="6756" fg:w="17"/><text x="29.2390%" y="207.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="29.0189%" y="197" width="0.0728%" height="15" fill="rgb(235,213,38)" fg:x="6773" fg:w="17"/><text x="29.3118%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="29.0917%" y="197" width="0.0728%" height="15" fill="rgb(237,122,38)" fg:x="6790" fg:w="17"/><text x="29.3847%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="29.1645%" y="197" width="0.0728%" height="15" fill="rgb(244,218,35)" fg:x="6807" fg:w="17"/><text x="29.4575%" y="207.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="29.2374%" y="197" width="0.1157%" height="15" fill="rgb(240,68,47)" fg:x="6824" fg:w="27"/><text x="29.5303%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.26%)</title><rect x="29.3530%" y="133" width="0.2614%" height="15" fill="rgb(210,16,53)" fg:x="6851" fg:w="61"/><text x="29.6460%" y="143.50"></text></g><g><title>memset (106 instructions, 0.45%)</title><rect x="29.6144%" y="133" width="0.4542%" height="15" fill="rgb(235,124,12)" fg:x="6912" fg:w="106"/><text x="29.9074%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="29.3530%" y="149" width="0.8698%" height="15" fill="rgb(224,169,11)" fg:x="6851" fg:w="203"/><text x="29.6460%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="29.3530%" y="165" width="0.9597%" height="15" fill="rgb(250,166,2)" fg:x="6851" fg:w="224"/><text x="29.6460%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="30.3128%" y="165" width="0.4456%" height="15" fill="rgb(242,216,29)" fg:x="7075" fg:w="104"/><text x="30.6057%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.14%)</title><rect x="30.7584%" y="165" width="0.1414%" height="15" fill="rgb(230,116,27)" fg:x="7179" fg:w="33"/><text x="31.0513%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.83%)</title><rect x="29.3530%" y="181" width="1.8338%" height="15" fill="rgb(228,99,48)" fg:x="6851" fg:w="428"/><text x="29.6460%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="31.1868%" y="165" width="0.0557%" height="15" fill="rgb(253,11,6)" fg:x="7279" fg:w="13"/><text x="31.4798%" y="175.50"></text></g><g><title>mp_cmp (34 instructions, 0.15%)</title><rect x="31.1868%" y="181" width="0.1457%" height="15" fill="rgb(247,143,39)" fg:x="7279" fg:w="34"/><text x="31.4798%" y="191.50"></text></g><g><title>B_lt (514 instructions, 2.20%)</title><rect x="29.3530%" y="197" width="2.2022%" height="15" fill="rgb(236,97,10)" fg:x="6851" fg:w="514"/><text x="29.6460%" y="207.50">B..</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="31.5553%" y="197" width="0.0728%" height="15" fill="rgb(233,208,19)" fg:x="7365" fg:w="17"/><text x="31.8482%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.26%)</title><rect x="31.6281%" y="133" width="0.2614%" height="15" fill="rgb(216,164,2)" fg:x="7382" fg:w="61"/><text x="31.9211%" y="143.50"></text></g><g><title>memset (106 instructions, 0.45%)</title><rect x="31.8895%" y="133" width="0.4542%" height="15" fill="rgb(220,129,5)" fg:x="7443" fg:w="106"/><text x="32.1824%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="31.6281%" y="149" width="0.8698%" height="15" fill="rgb(242,17,10)" fg:x="7382" fg:w="203"/><text x="31.9211%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="31.6281%" y="165" width="0.9597%" height="15" fill="rgb(242,107,0)" fg:x="7382" fg:w="224"/><text x="31.9211%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="32.5878%" y="165" width="0.4456%" height="15" fill="rgb(251,28,31)" fg:x="7606" fg:w="104"/><text x="32.8808%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.14%)</title><rect x="33.0334%" y="165" width="0.1414%" height="15" fill="rgb(233,223,10)" fg:x="7710" fg:w="33"/><text x="33.3264%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.83%)</title><rect x="31.6281%" y="181" width="1.8338%" height="15" fill="rgb(215,21,27)" fg:x="7382" fg:w="428"/><text x="31.9211%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.26%)</title><rect x="33.4619%" y="149" width="0.2614%" height="15" fill="rgb(232,23,21)" fg:x="7810" fg:w="61"/><text x="33.7548%" y="159.50"></text></g><g><title>memset (106 instructions, 0.45%)</title><rect x="33.7232%" y="149" width="0.4542%" height="15" fill="rgb(244,5,23)" fg:x="7871" fg:w="106"/><text x="34.0162%" y="159.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="33.4619%" y="165" width="0.8698%" height="15" fill="rgb(226,81,46)" fg:x="7810" fg:w="203"/><text x="33.7548%" y="175.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="33.4619%" y="181" width="0.9597%" height="15" fill="rgb(247,70,30)" fg:x="7810" fg:w="224"/><text x="33.7548%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="34.4216%" y="165" width="0.0557%" height="15" fill="rgb(212,68,19)" fg:x="8034" fg:w="13"/><text x="34.7146%" y="175.50"></text></g><g><title>mp_clamp (25 instructions, 0.11%)</title><rect x="34.4773%" y="149" width="0.1071%" height="15" fill="rgb(240,187,13)" fg:x="8047" fg:w="25"/><text x="34.7703%" y="159.50"></text></g><g><title>s_mp_sub (147 instructions, 0.63%)</title><rect x="34.4773%" y="165" width="0.6298%" height="15" fill="rgb(223,113,26)" fg:x="8047" fg:w="147"/><text x="34.7703%" y="175.50"></text></g><g><title>mp_sub (192 instructions, 0.82%)</title><rect x="34.4216%" y="181" width="0.8226%" height="15" fill="rgb(206,192,2)" fg:x="8034" fg:w="192"/><text x="34.7146%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.14%)</title><rect x="35.2442%" y="181" width="0.1414%" height="15" fill="rgb(241,108,4)" fg:x="8226" fg:w="33"/><text x="35.5372%" y="191.50"></text></g><g><title>mp_count_bits (181 instructions, 0.78%)</title><rect x="35.3856%" y="165" width="0.7755%" height="15" fill="rgb(247,173,49)" fg:x="8259" fg:w="181"/><text x="35.6786%" y="175.50"></text></g><g><title>bigint_2complement_bits (223 instructions, 0.96%)</title><rect x="35.3856%" y="181" width="0.9554%" height="15" fill="rgb(224,114,35)" fg:x="8259" fg:w="223"/><text x="35.6786%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.26%)</title><rect x="36.8809%" y="133" width="0.2614%" height="15" fill="rgb(245,159,27)" fg:x="8608" fg:w="61"/><text x="37.1739%" y="143.50"></text></g><g><title>memset (106 instructions, 0.45%)</title><rect x="37.1422%" y="133" width="0.4542%" height="15" fill="rgb(245,172,44)" fg:x="8669" fg:w="106"/><text x="37.4352%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="36.8809%" y="149" width="0.8698%" height="15" fill="rgb(236,23,11)" fg:x="8608" fg:w="203"/><text x="37.1739%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="36.8809%" y="165" width="0.9597%" height="15" fill="rgb(205,117,38)" fg:x="8608" fg:w="224"/><text x="37.1739%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="37.8406%" y="165" width="0.4456%" height="15" fill="rgb(237,72,25)" fg:x="8832" fg:w="104"/><text x="38.1336%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.14%)</title><rect x="38.2862%" y="165" width="0.1414%" height="15" fill="rgb(244,70,9)" fg:x="8936" fg:w="33"/><text x="38.5792%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.83%)</title><rect x="36.8809%" y="181" width="1.8338%" height="15" fill="rgb(217,125,39)" fg:x="8608" fg:w="428"/><text x="37.1739%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h9bfc72441cf7af6b (61 instructions, 0.26%)</title><rect x="38.7147%" y="149" width="0.2614%" height="15" fill="rgb(235,36,10)" fg:x="9036" fg:w="61"/><text x="39.0076%" y="159.50"></text></g><g><title>memset (106 instructions, 0.45%)</title><rect x="38.9760%" y="149" width="0.4542%" height="15" fill="rgb(251,123,47)" fg:x="9097" fg:w="106"/><text x="39.2690%" y="159.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="38.7147%" y="165" width="0.8698%" height="15" fill="rgb(221,13,13)" fg:x="9036" fg:w="203"/><text x="39.0076%" y="175.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="38.7147%" y="181" width="0.9597%" height="15" fill="rgb(238,131,9)" fg:x="9036" fg:w="224"/><text x="39.0076%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="39.6744%" y="165" width="0.0557%" height="15" fill="rgb(211,50,8)" fg:x="9260" fg:w="13"/><text x="39.9673%" y="175.50"></text></g><g><title>mp_clamp (25 instructions, 0.11%)</title><rect x="39.7301%" y="149" width="0.1071%" height="15" fill="rgb(245,182,24)" fg:x="9273" fg:w="25"/><text x="40.0230%" y="159.50"></text></g><g><title>s_mp_sub (147 instructions, 0.63%)</title><rect x="39.7301%" y="165" width="0.6298%" height="15" fill="rgb(242,14,37)" fg:x="9273" fg:w="147"/><text x="40.0230%" y="175.50"></text></g><g><title>mp_sub (192 instructions, 0.82%)</title><rect x="39.6744%" y="181" width="0.8226%" height="15" fill="rgb(246,228,12)" fg:x="9260" fg:w="192"/><text x="39.9673%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h2acb125f16d86651 (33 instructions, 0.14%)</title><rect x="40.4970%" y="181" width="0.1414%" height="15" fill="rgb(213,55,15)" fg:x="9452" fg:w="33"/><text x="40.7900%" y="191.50"></text></g><g><title>mp_count_bits (181 instructions, 0.78%)</title><rect x="40.6384%" y="165" width="0.7755%" height="15" fill="rgb(209,9,3)" fg:x="9485" fg:w="181"/><text x="40.9314%" y="175.50"></text></g><g><title>bigint_2complement_bits (223 instructions, 0.96%)</title><rect x="40.6384%" y="181" width="0.9554%" height="15" fill="rgb(230,59,30)" fg:x="9485" fg:w="223"/><text x="40.9314%" y="191.50"></text></g><g><title>B_sub (2,452 instructions, 10.51%)</title><rect x="31.6281%" y="197" width="10.5056%" height="15" fill="rgb(209,121,21)" fg:x="7382" fg:w="2452"/><text x="31.9211%" y="207.50">B_sub</text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="42.1337%" y="149" width="0.2442%" height="15" fill="rgb(220,109,13)" fg:x="9834" fg:w="57"/><text x="42.4266%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="42.1337%" y="165" width="0.2785%" height="15" fill="rgb(232,18,1)" fg:x="9834" fg:w="65"/><text x="42.4266%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="42.4122%" y="165" width="0.4284%" height="15" fill="rgb(215,41,42)" fg:x="9899" fg:w="100"/><text x="42.7051%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="42.8406%" y="165" width="3.3462%" height="15" fill="rgb(224,123,36)" fg:x="9999" fg:w="781"/><text x="43.1336%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.44%)</title><rect x="42.1337%" y="181" width="4.4387%" height="15" fill="rgb(240,125,3)" fg:x="9834" fg:w="1036"/><text x="42.4266%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="46.5724%" y="165" width="0.1200%" height="15" fill="rgb(205,98,50)" fg:x="10870" fg:w="28"/><text x="46.8654%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="46.6924%" y="149" width="0.0728%" height="15" fill="rgb(205,185,37)" fg:x="10898" fg:w="17"/><text x="46.9853%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="46.7652%" y="101" width="0.0728%" height="15" fill="rgb(238,207,15)" fg:x="10915" fg:w="17"/><text x="47.0582%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="46.8380%" y="101" width="0.0728%" height="15" fill="rgb(213,199,42)" fg:x="10932" fg:w="17"/><text x="47.1310%" y="111.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="46.7652%" y="117" width="0.3085%" height="15" fill="rgb(235,201,11)" fg:x="10915" fg:w="72"/><text x="47.0582%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.0737%" y="85" width="0.0728%" height="15" fill="rgb(207,46,11)" fg:x="10987" fg:w="17"/><text x="47.3667%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.1465%" y="85" width="0.0728%" height="15" fill="rgb(241,35,35)" fg:x="11004" fg:w="17"/><text x="47.4395%" y="95.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="47.0737%" y="101" width="0.3042%" height="15" fill="rgb(243,32,47)" fg:x="10987" fg:w="71"/><text x="47.3667%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.3779%" y="69" width="0.0728%" height="15" fill="rgb(247,202,23)" fg:x="11058" fg:w="17"/><text x="47.6709%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.4507%" y="69" width="0.0728%" height="15" fill="rgb(219,102,11)" fg:x="11075" fg:w="17"/><text x="47.7437%" y="79.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="47.3779%" y="85" width="0.3042%" height="15" fill="rgb(243,110,44)" fg:x="11058" fg:w="71"/><text x="47.6709%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.6821%" y="53" width="0.0728%" height="15" fill="rgb(222,74,54)" fg:x="11129" fg:w="17"/><text x="47.9751%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.7549%" y="53" width="0.0728%" height="15" fill="rgb(216,99,12)" fg:x="11146" fg:w="17"/><text x="48.0479%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="47.8278%" y="53" width="0.0728%" height="15" fill="rgb(226,22,26)" fg:x="11163" fg:w="17"/><text x="48.1207%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="47.9006%" y="53" width="0.0728%" height="15" fill="rgb(217,163,10)" fg:x="11180" fg:w="17"/><text x="48.1936%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 3.29%)</title><rect x="47.9734%" y="37" width="3.2948%" height="15" fill="rgb(213,25,53)" fg:x="11197" fg:w="769"/><text x="48.2664%" y="47.50">Bl..</text></g><g><title>equal.1 (777 instructions, 3.33%)</title><rect x="47.9734%" y="53" width="3.3290%" height="15" fill="rgb(252,105,26)" fg:x="11197" fg:w="777"/><text x="48.2664%" y="63.50">eq..</text></g><g><title>@anon-func-191.5 (911 instructions, 3.90%)</title><rect x="47.6821%" y="69" width="3.9032%" height="15" fill="rgb(220,39,43)" fg:x="11129" fg:w="911"/><text x="47.9751%" y="79.50">@an..</text></g><g><title>del (1,007 instructions, 4.31%)</title><rect x="47.6821%" y="85" width="4.3145%" height="15" fill="rgb(229,68,48)" fg:x="11129" fg:w="1007"/><text x="47.9751%" y="95.50">del</text></g><g><title>del (1,233 instructions, 5.28%)</title><rect x="47.3779%" y="101" width="5.2828%" height="15" fill="rgb(252,8,32)" fg:x="11058" fg:w="1233"/><text x="47.6709%" y="111.50">del</text></g><g><title>del (1,459 instructions, 6.25%)</title><rect x="47.0737%" y="117" width="6.2511%" height="15" fill="rgb(223,20,43)" fg:x="10987" fg:w="1459"/><text x="47.3667%" y="127.50">del</text></g><g><title>del (1,686 instructions, 7.22%)</title><rect x="46.7652%" y="133" width="7.2237%" height="15" fill="rgb(229,81,49)" fg:x="10915" fg:w="1686"/><text x="47.0582%" y="143.50">del</text></g><g><title>replace (1,900 instructions, 8.14%)</title><rect x="46.7652%" y="149" width="8.1405%" height="15" fill="rgb(236,28,36)" fg:x="10915" fg:w="1900"/><text x="47.0582%" y="159.50">replace</text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="54.9057%" y="117" width="0.0514%" height="15" fill="rgb(249,185,26)" fg:x="12815" fg:w="12"/><text x="55.1987%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="54.9572%" y="117" width="0.1157%" height="15" fill="rgb(249,174,33)" fg:x="12827" fg:w="27"/><text x="55.2501%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.0728%" y="117" width="0.0514%" height="15" fill="rgb(233,201,37)" fg:x="12854" fg:w="12"/><text x="55.3658%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.1243%" y="117" width="0.1157%" height="15" fill="rgb(221,78,26)" fg:x="12866" fg:w="27"/><text x="55.4172%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.2399%" y="117" width="0.0514%" height="15" fill="rgb(250,127,30)" fg:x="12893" fg:w="12"/><text x="55.5329%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.2913%" y="117" width="0.1157%" height="15" fill="rgb(230,49,44)" fg:x="12905" fg:w="27"/><text x="55.5843%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.4070%" y="117" width="0.0514%" height="15" fill="rgb(229,67,23)" fg:x="12932" fg:w="12"/><text x="55.7000%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.4584%" y="117" width="0.1157%" height="15" fill="rgb(249,83,47)" fg:x="12944" fg:w="27"/><text x="55.7514%" y="127.50"></text></g><g><title>rec (501 instructions, 2.15%)</title><rect x="54.9057%" y="133" width="2.1465%" height="15" fill="rgb(215,43,3)" fg:x="12815" fg:w="501"/><text x="55.1987%" y="143.50">r..</text></g><g><title>leaf (510 instructions, 2.19%)</title><rect x="54.9057%" y="149" width="2.1851%" height="15" fill="rgb(238,154,13)" fg:x="12815" fg:w="510"/><text x="55.1987%" y="159.50">l..</text></g><g><title>recursiveReplace (2,500 instructions, 10.71%)</title><rect x="46.6924%" y="165" width="10.7112%" height="15" fill="rgb(219,56,2)" fg:x="10898" fg:w="2500"/><text x="46.9853%" y="175.50">recursiveRepl..</text></g><g><title>put.1 (2,667 instructions, 11.43%)</title><rect x="46.5724%" y="181" width="11.4267%" height="15" fill="rgb(233,0,4)" fg:x="10870" fg:w="2667"/><text x="46.8654%" y="191.50">put.1</text></g><g><title>account_put (3,755 instructions, 16.09%)</title><rect x="42.1337%" y="197" width="16.0883%" height="15" fill="rgb(235,30,7)" fg:x="9834" fg:w="3755"/><text x="42.4266%" y="207.50">account_put</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="58.2219%" y="197" width="0.0728%" height="15" fill="rgb(250,79,13)" fg:x="13589" fg:w="17"/><text x="58.5149%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="58.2948%" y="149" width="0.2442%" height="15" fill="rgb(211,146,34)" fg:x="13606" fg:w="57"/><text x="58.5877%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="58.2948%" y="165" width="0.2785%" height="15" fill="rgb(228,22,38)" fg:x="13606" fg:w="65"/><text x="58.5877%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="58.5733%" y="165" width="0.4284%" height="15" fill="rgb(235,168,5)" fg:x="13671" fg:w="100"/><text x="58.8662%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="59.0017%" y="165" width="3.3462%" height="15" fill="rgb(221,155,16)" fg:x="13771" fg:w="781"/><text x="59.2947%" y="175.50">co..</text></g><g><title>account_key (1,071 instructions, 4.59%)</title><rect x="58.2948%" y="181" width="4.5887%" height="15" fill="rgb(215,215,53)" fg:x="13606" fg:w="1071"/><text x="58.5877%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="62.8835%" y="165" width="0.1200%" height="15" fill="rgb(223,4,10)" fg:x="14677" fg:w="28"/><text x="63.1764%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="63.0034%" y="149" width="0.0728%" height="15" fill="rgb(234,103,6)" fg:x="14705" fg:w="17"/><text x="63.2964%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.0763%" y="133" width="0.0728%" height="15" fill="rgb(227,97,0)" fg:x="14722" fg:w="17"/><text x="63.3692%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.1491%" y="133" width="0.0728%" height="15" fill="rgb(234,150,53)" fg:x="14739" fg:w="17"/><text x="63.4421%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.3805%" y="133" width="0.0728%" height="15" fill="rgb(228,201,54)" fg:x="14793" fg:w="17"/><text x="63.6734%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.4533%" y="133" width="0.0728%" height="15" fill="rgb(222,22,37)" fg:x="14810" fg:w="17"/><text x="63.7463%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.6847%" y="133" width="0.0728%" height="15" fill="rgb(237,53,32)" fg:x="14864" fg:w="17"/><text x="63.9776%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.7575%" y="133" width="0.0728%" height="15" fill="rgb(233,25,53)" fg:x="14881" fg:w="17"/><text x="64.0505%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.9846%" y="133" width="0.0728%" height="15" fill="rgb(210,40,34)" fg:x="14934" fg:w="17"/><text x="64.2775%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="64.0574%" y="133" width="0.0728%" height="15" fill="rgb(241,220,44)" fg:x="14951" fg:w="17"/><text x="64.3504%" y="143.50"></text></g><g><title>@anon-func-191.5 (282 instructions, 1.21%)</title><rect x="63.0763%" y="149" width="1.2082%" height="15" fill="rgb(235,28,35)" fg:x="14722" fg:w="282"/><text x="63.3692%" y="159.50"></text></g><g><title>rec.4 (602 instructions, 2.58%)</title><rect x="63.0034%" y="165" width="2.5793%" height="15" fill="rgb(210,56,17)" fg:x="14705" fg:w="602"/><text x="63.2964%" y="175.50">r..</text></g><g><title>get.2 (682 instructions, 2.92%)</title><rect x="62.8835%" y="181" width="2.9220%" height="15" fill="rgb(224,130,29)" fg:x="14677" fg:w="682"/><text x="63.1764%" y="191.50">ge..</text></g><g><title>account_get (1,768 instructions, 7.57%)</title><rect x="58.2948%" y="197" width="7.5750%" height="15" fill="rgb(235,212,8)" fg:x="13606" fg:w="1768"/><text x="58.5877%" y="207.50">account_..</text></g><g><title>get.1 (9 instructions, 0.04%)</title><rect x="65.8698%" y="197" width="0.0386%" height="15" fill="rgb(223,33,50)" fg:x="15374" fg:w="9"/><text x="66.1627%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="65.9083%" y="197" width="0.0728%" height="15" fill="rgb(219,149,13)" fg:x="15383" fg:w="17"/><text x="66.2013%" y="207.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="65.9811%" y="197" width="0.1157%" height="15" fill="rgb(250,156,29)" fg:x="15400" fg:w="27"/><text x="66.2741%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="66.0968%" y="197" width="0.0728%" height="15" fill="rgb(216,193,19)" fg:x="15427" fg:w="17"/><text x="66.3898%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="66.1697%" y="149" width="0.2442%" height="15" fill="rgb(216,135,14)" fg:x="15444" fg:w="57"/><text x="66.4626%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="66.1697%" y="165" width="0.2785%" height="15" fill="rgb(241,47,5)" fg:x="15444" fg:w="65"/><text x="66.4626%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="66.4482%" y="165" width="0.4284%" height="15" fill="rgb(233,42,35)" fg:x="15509" fg:w="100"/><text x="66.7411%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="66.8766%" y="165" width="3.3462%" height="15" fill="rgb(231,13,6)" fg:x="15609" fg:w="781"/><text x="67.1696%" y="175.50">co..</text></g><g><title>account_key (1,071 instructions, 4.59%)</title><rect x="66.1697%" y="181" width="4.5887%" height="15" fill="rgb(207,181,40)" fg:x="15444" fg:w="1071"/><text x="66.4626%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="70.7584%" y="165" width="0.1200%" height="15" fill="rgb(254,173,49)" fg:x="16515" fg:w="28"/><text x="71.0513%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="70.8783%" y="149" width="0.0728%" height="15" fill="rgb(221,1,38)" fg:x="16543" fg:w="17"/><text x="71.1713%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="70.9512%" y="101" width="0.0728%" height="15" fill="rgb(206,124,46)" fg:x="16560" fg:w="17"/><text x="71.2441%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.0240%" y="101" width="0.0728%" height="15" fill="rgb(249,21,11)" fg:x="16577" fg:w="17"/><text x="71.3170%" y="111.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="70.9512%" y="117" width="0.3042%" height="15" fill="rgb(222,201,40)" fg:x="16560" fg:w="71"/><text x="71.2441%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.2554%" y="85" width="0.0728%" height="15" fill="rgb(235,61,29)" fg:x="16631" fg:w="17"/><text x="71.5483%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.3282%" y="85" width="0.0728%" height="15" fill="rgb(219,207,3)" fg:x="16648" fg:w="17"/><text x="71.6212%" y="95.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="71.2554%" y="101" width="0.3042%" height="15" fill="rgb(222,56,46)" fg:x="16631" fg:w="71"/><text x="71.5483%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.5596%" y="69" width="0.0728%" height="15" fill="rgb(239,76,54)" fg:x="16702" fg:w="17"/><text x="71.8525%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.6324%" y="69" width="0.0728%" height="15" fill="rgb(231,124,27)" fg:x="16719" fg:w="17"/><text x="71.9254%" y="79.50"></text></g><g><title>@anon-func-191.5 (70 instructions, 0.30%)</title><rect x="71.5596%" y="85" width="0.2999%" height="15" fill="rgb(249,195,6)" fg:x="16702" fg:w="70"/><text x="71.8525%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.8595%" y="53" width="0.0728%" height="15" fill="rgb(237,174,47)" fg:x="16772" fg:w="17"/><text x="72.1524%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.9323%" y="53" width="0.0728%" height="15" fill="rgb(206,201,31)" fg:x="16789" fg:w="17"/><text x="72.2253%" y="63.50"></text></g><g><title>@anon-func-191.5 (70 instructions, 0.30%)</title><rect x="71.8595%" y="69" width="0.2999%" height="15" fill="rgb(231,57,52)" fg:x="16772" fg:w="70"/><text x="72.1524%" y="79.50"></text></g><g><title>del (31 instructions, 0.13%)</title><rect x="72.1594%" y="69" width="0.1328%" height="15" fill="rgb(248,177,22)" fg:x="16842" fg:w="31"/><text x="72.4524%" y="79.50"></text></g><g><title>del (197 instructions, 0.84%)</title><rect x="71.8595%" y="85" width="0.8440%" height="15" fill="rgb(215,211,37)" fg:x="16772" fg:w="197"/><text x="72.1524%" y="95.50"></text></g><g><title>del (363 instructions, 1.56%)</title><rect x="71.5596%" y="101" width="1.5553%" height="15" fill="rgb(241,128,51)" fg:x="16702" fg:w="363"/><text x="71.8525%" y="111.50"></text></g><g><title>del (530 instructions, 2.27%)</title><rect x="71.2554%" y="117" width="2.2708%" height="15" fill="rgb(227,165,31)" fg:x="16631" fg:w="530"/><text x="71.5483%" y="127.50">d..</text></g><g><title>del (697 instructions, 2.99%)</title><rect x="70.9512%" y="133" width="2.9863%" height="15" fill="rgb(228,167,24)" fg:x="16560" fg:w="697"/><text x="71.2441%" y="143.50">del</text></g><g><title>replace (911 instructions, 3.90%)</title><rect x="70.9512%" y="149" width="3.9032%" height="15" fill="rgb(228,143,12)" fg:x="16560" fg:w="911"/><text x="71.2441%" y="159.50">rep..</text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="74.8543%" y="117" width="0.0514%" height="15" fill="rgb(249,149,8)" fg:x="17471" fg:w="12"/><text x="75.1473%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="74.9057%" y="117" width="0.1157%" height="15" fill="rgb(243,35,44)" fg:x="17483" fg:w="27"/><text x="75.1987%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.0214%" y="117" width="0.0514%" height="15" fill="rgb(246,89,9)" fg:x="17510" fg:w="12"/><text x="75.3144%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.0728%" y="117" width="0.1157%" height="15" fill="rgb(233,213,13)" fg:x="17522" fg:w="27"/><text x="75.3658%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.1885%" y="117" width="0.0514%" height="15" fill="rgb(233,141,41)" fg:x="17549" fg:w="12"/><text x="75.4815%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.2399%" y="117" width="0.1157%" height="15" fill="rgb(239,167,4)" fg:x="17561" fg:w="27"/><text x="75.5329%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.3556%" y="117" width="0.0514%" height="15" fill="rgb(209,217,16)" fg:x="17588" fg:w="12"/><text x="75.6486%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.4070%" y="117" width="0.1157%" height="15" fill="rgb(219,88,35)" fg:x="17600" fg:w="27"/><text x="75.7000%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.5227%" y="117" width="0.0514%" height="15" fill="rgb(220,193,23)" fg:x="17627" fg:w="12"/><text x="75.8157%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.5741%" y="117" width="0.1157%" height="15" fill="rgb(230,90,52)" fg:x="17639" fg:w="27"/><text x="75.8671%" y="127.50"></text></g><g><title>rec (601 instructions, 2.57%)</title><rect x="74.8543%" y="133" width="2.5750%" height="15" fill="rgb(252,106,19)" fg:x="17471" fg:w="601"/><text x="75.1473%" y="143.50">r..</text></g><g><title>leaf (610 instructions, 2.61%)</title><rect x="74.8543%" y="149" width="2.6135%" height="15" fill="rgb(206,74,20)" fg:x="17471" fg:w="610"/><text x="75.1473%" y="159.50">l..</text></g><g><title>recursiveReplace (1,611 instructions, 6.90%)</title><rect x="70.8783%" y="165" width="6.9023%" height="15" fill="rgb(230,138,44)" fg:x="16543" fg:w="1611"/><text x="71.1713%" y="175.50">recursi..</text></g><g><title>put.1 (1,778 instructions, 7.62%)</title><rect x="70.7584%" y="181" width="7.6178%" height="15" fill="rgb(235,182,43)" fg:x="16515" fg:w="1778"/><text x="71.0513%" y="191.50">put.1</text></g><g><title>account_put (2,901 instructions, 12.43%)</title><rect x="66.1697%" y="197" width="12.4293%" height="15" fill="rgb(242,16,51)" fg:x="15444" fg:w="2901"/><text x="66.4626%" y="207.50">account_put</text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="78.5990%" y="165" width="0.2442%" height="15" fill="rgb(248,9,4)" fg:x="18345" fg:w="57"/><text x="78.8919%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="78.5990%" y="181" width="0.2785%" height="15" fill="rgb(210,31,22)" fg:x="18345" fg:w="65"/><text x="78.8919%" y="191.50"></text></g><g><title>memcpy (86 instructions, 0.37%)</title><rect x="78.8775%" y="181" width="0.3685%" height="15" fill="rgb(239,54,39)" fg:x="18410" fg:w="86"/><text x="79.1704%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.24%)</title><rect x="79.2459%" y="165" width="0.2442%" height="15" fill="rgb(230,99,41)" fg:x="18496" fg:w="57"/><text x="79.5389%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="79.2459%" y="181" width="0.2785%" height="15" fill="rgb(253,106,12)" fg:x="18496" fg:w="65"/><text x="79.5389%" y="191.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="79.5244%" y="181" width="0.0471%" height="15" fill="rgb(213,46,41)" fg:x="18561" fg:w="11"/><text x="79.8174%" y="191.50"></text></g><g><title>$lambda.32 (1,405 instructions, 6.02%)</title><rect x="78.5990%" y="197" width="6.0197%" height="15" fill="rgb(215,133,35)" fg:x="18345" fg:w="1405"/><text x="78.8919%" y="207.50">$lambd..</text></g><g><title>$lambda.3 (17,002 instructions, 72.84%)</title><rect x="17.4807%" y="213" width="72.8449%" height="15" fill="rgb(213,28,5)" fg:x="4080" fg:w="17002"/><text x="17.7737%" y="223.50">$lambda.3</text></g><g><title>schedule_copying_gc (108 instructions, 0.46%)</title><rect x="90.3256%" y="213" width="0.4627%" height="15" fill="rgb(215,77,49)" fg:x="21082" fg:w="108"/><text x="90.6186%" y="223.50"></text></g><g><title>trans_state4 (11 instructions, 0.05%)</title><rect x="90.7883%" y="213" width="0.0471%" height="15" fill="rgb(248,100,22)" fg:x="21190" fg:w="11"/><text x="91.0813%" y="223.50"></text></g><g><title>all (23,340 instructions, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="23340"/><text x="0.2930%" y="255.50"></text></g><g><title>transfer (23,340 instructions, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="23340"/><text x="0.2930%" y="239.50">transfer</text></g></svg></svg>