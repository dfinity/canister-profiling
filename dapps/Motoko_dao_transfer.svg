<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="294" onload="init(evt)" viewBox="0 0 1024 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">DAO.transfer</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="277.00"> </text><svg id="frames" x="10" width="1004" total_samples="23282"><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="0.0000%" y="213" width="0.0430%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="0.0430%" y="197" width="0.2448%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="57"/><text x="0.3359%" y="207.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="0.0430%" y="213" width="0.2792%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="65"/><text x="0.3359%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="0.3221%" y="197" width="0.2062%" height="15" fill="rgb(248,212,6)" fg:x="75" fg:w="48"/><text x="0.6151%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="0.5283%" y="197" width="0.2448%" height="15" fill="rgb(208,68,35)" fg:x="123" fg:w="57"/><text x="0.8213%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="0.7731%" y="197" width="0.2749%" height="15" fill="rgb(232,128,0)" fg:x="180" fg:w="64"/><text x="1.0661%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="1.0480%" y="197" width="0.2062%" height="15" fill="rgb(207,160,47)" fg:x="244" fg:w="48"/><text x="1.3410%" y="207.50"></text></g><g><title>leb128_decode (138 instructions, 0.59%)</title><rect x="1.2542%" y="197" width="0.5927%" height="15" fill="rgb(228,23,34)" fg:x="292" fg:w="138"/><text x="1.5472%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="1.8469%" y="197" width="0.2749%" height="15" fill="rgb(218,30,26)" fg:x="430" fg:w="64"/><text x="2.1399%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (17 instructions, 0.07%)</title><rect x="2.1218%" y="197" width="0.0730%" height="15" fill="rgb(220,122,19)" fg:x="494" fg:w="17"/><text x="2.4148%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="2.1948%" y="197" width="0.9793%" height="15" fill="rgb(250,228,42)" fg:x="511" fg:w="228"/><text x="2.4878%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="3.1741%" y="197" width="0.2749%" height="15" fill="rgb(240,193,28)" fg:x="739" fg:w="64"/><text x="3.4671%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.05%)</title><rect x="3.4490%" y="197" width="0.0515%" height="15" fill="rgb(216,20,37)" fg:x="803" fg:w="12"/><text x="3.7420%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="3.5006%" y="197" width="0.2749%" height="15" fill="rgb(206,188,39)" fg:x="815" fg:w="64"/><text x="3.7935%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="3.7754%" y="197" width="0.2062%" height="15" fill="rgb(217,207,13)" fg:x="879" fg:w="48"/><text x="4.0684%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="3.9816%" y="197" width="0.9793%" height="15" fill="rgb(231,73,38)" fg:x="927" fg:w="228"/><text x="4.2746%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="4.9609%" y="197" width="0.2749%" height="15" fill="rgb(225,20,46)" fg:x="1155" fg:w="64"/><text x="5.2539%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.05%)</title><rect x="5.2358%" y="197" width="0.0515%" height="15" fill="rgb(210,31,41)" fg:x="1219" fg:w="12"/><text x="5.5288%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="5.2873%" y="197" width="0.2749%" height="15" fill="rgb(221,200,47)" fg:x="1231" fg:w="64"/><text x="5.5803%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="5.5622%" y="197" width="0.2749%" height="15" fill="rgb(226,26,5)" fg:x="1295" fg:w="64"/><text x="5.8552%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="5.8371%" y="197" width="0.2062%" height="15" fill="rgb(249,33,26)" fg:x="1359" fg:w="48"/><text x="6.1301%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="6.0433%" y="197" width="0.2749%" height="15" fill="rgb(235,183,28)" fg:x="1407" fg:w="64"/><text x="6.3363%" y="207.50"></text></g><g><title>motoko_rts::idl::check_typearg::hae412e6855237633 (12 instructions, 0.05%)</title><rect x="6.3182%" y="197" width="0.0515%" height="15" fill="rgb(221,5,38)" fg:x="1471" fg:w="12"/><text x="6.6112%" y="207.50"></text></g><g><title>parse_idl_header (1,878 instructions, 8.07%)</title><rect x="0.3221%" y="213" width="8.0663%" height="15" fill="rgb(247,18,42)" fg:x="75" fg:w="1878"/><text x="0.6151%" y="223.50">parse_idl..</text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="8.3885%" y="197" width="0.0258%" height="15" fill="rgb(241,131,45)" fg:x="1953" fg:w="6"/><text x="8.6814%" y="207.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.06%)</title><rect x="8.3885%" y="213" width="0.0644%" height="15" fill="rgb(249,31,29)" fg:x="1953" fg:w="15"/><text x="8.6814%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="8.4529%" y="213" width="0.2062%" height="15" fill="rgb(225,111,53)" fg:x="1968" fg:w="48"/><text x="8.7459%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="8.6590%" y="213" width="0.2749%" height="15" fill="rgb(238,160,17)" fg:x="2016" fg:w="64"/><text x="8.9520%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="8.9339%" y="213" width="0.0859%" height="15" fill="rgb(214,148,48)" fg:x="2080" fg:w="20"/><text x="9.2269%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="9.0198%" y="213" width="0.2749%" height="15" fill="rgb(232,36,49)" fg:x="2100" fg:w="64"/><text x="9.3128%" y="223.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="9.2947%" y="213" width="0.2062%" height="15" fill="rgb(209,103,24)" fg:x="2164" fg:w="48"/><text x="9.5877%" y="223.50"></text></g><g><title>leb128_decode (138 instructions, 0.59%)</title><rect x="9.5009%" y="197" width="0.5927%" height="15" fill="rgb(229,88,8)" fg:x="2212" fg:w="138"/><text x="9.7939%" y="207.50"></text></g><g><title>find_field (174 instructions, 0.75%)</title><rect x="9.5009%" y="213" width="0.7474%" height="15" fill="rgb(213,181,19)" fg:x="2212" fg:w="174"/><text x="9.7939%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="10.2483%" y="213" width="0.2749%" height="15" fill="rgb(254,191,54)" fg:x="2386" fg:w="64"/><text x="10.5412%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="10.5232%" y="197" width="0.0859%" height="15" fill="rgb(241,83,37)" fg:x="2450" fg:w="20"/><text x="10.8161%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="10.6091%" y="197" width="0.2062%" height="15" fill="rgb(233,36,39)" fg:x="2470" fg:w="48"/><text x="10.9020%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="10.8152%" y="181" width="0.2448%" height="15" fill="rgb(226,3,54)" fg:x="2518" fg:w="57"/><text x="11.1082%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="10.8152%" y="197" width="0.2792%" height="15" fill="rgb(245,192,40)" fg:x="2518" fg:w="65"/><text x="11.1082%" y="207.50"></text></g><g><title>memcpy (196 instructions, 0.84%)</title><rect x="11.0944%" y="197" width="0.8419%" height="15" fill="rgb(238,167,29)" fg:x="2583" fg:w="196"/><text x="11.3874%" y="207.50"></text></g><g><title>@deserialize_go&lt;P&gt; (442 instructions, 1.90%)</title><rect x="10.5232%" y="213" width="1.8985%" height="15" fill="rgb(232,182,51)" fg:x="2450" fg:w="442"/><text x="10.8161%" y="223.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="12.4216%" y="197" width="0.9793%" height="15" fill="rgb(231,60,39)" fg:x="2892" fg:w="228"/><text x="12.7146%" y="207.50"></text></g><g><title>find_field (264 instructions, 1.13%)</title><rect x="12.4216%" y="213" width="1.1339%" height="15" fill="rgb(208,69,12)" fg:x="2892" fg:w="264"/><text x="12.7146%" y="223.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="13.5555%" y="213" width="0.2749%" height="15" fill="rgb(235,93,37)" fg:x="3156" fg:w="64"/><text x="13.8485%" y="223.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="13.8304%" y="197" width="0.0859%" height="15" fill="rgb(213,116,39)" fg:x="3220" fg:w="20"/><text x="14.1234%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="13.9163%" y="197" width="0.2749%" height="15" fill="rgb(222,207,29)" fg:x="3240" fg:w="64"/><text x="14.2093%" y="207.50"></text></g><g><title>leb128_decode (48 instructions, 0.21%)</title><rect x="14.1912%" y="197" width="0.2062%" height="15" fill="rgb(206,96,30)" fg:x="3304" fg:w="48"/><text x="14.4842%" y="207.50"></text></g><g><title>leb128_decode (228 instructions, 0.98%)</title><rect x="14.3974%" y="181" width="0.9793%" height="15" fill="rgb(218,138,4)" fg:x="3352" fg:w="228"/><text x="14.6904%" y="191.50"></text></g><g><title>find_field (264 instructions, 1.13%)</title><rect x="14.3974%" y="197" width="1.1339%" height="15" fill="rgb(250,191,14)" fg:x="3352" fg:w="264"/><text x="14.6904%" y="207.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="15.5313%" y="197" width="0.2749%" height="15" fill="rgb(239,60,40)" fg:x="3616" fg:w="64"/><text x="15.8243%" y="207.50"></text></g><g><title>idl_limit_check (20 instructions, 0.09%)</title><rect x="15.8062%" y="181" width="0.0859%" height="15" fill="rgb(206,27,48)" fg:x="3680" fg:w="20"/><text x="16.0992%" y="191.50"></text></g><g><title>int_from_i32 (13 instructions, 0.06%)</title><rect x="15.8921%" y="165" width="0.0558%" height="15" fill="rgb(225,35,8)" fg:x="3700" fg:w="13"/><text x="16.1851%" y="175.50"></text></g><g><title>bigint_leb128_decode_word64 (77 instructions, 0.33%)</title><rect x="15.8921%" y="181" width="0.3307%" height="15" fill="rgb(250,213,24)" fg:x="3700" fg:w="77"/><text x="16.1851%" y="191.50"></text></g><g><title>@deserialize_go&lt;N&gt; (163 instructions, 0.70%)</title><rect x="15.8062%" y="197" width="0.7001%" height="15" fill="rgb(247,123,22)" fg:x="3680" fg:w="163"/><text x="16.0992%" y="207.50"></text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="16.5063%" y="197" width="0.0258%" height="15" fill="rgb(231,138,38)" fg:x="3843" fg:w="6"/><text x="16.7993%" y="207.50"></text></g><g><title>@deserialize_go&lt;r(amount_e8s:N)&gt; (854 instructions, 3.67%)</title><rect x="13.8304%" y="213" width="3.6681%" height="15" fill="rgb(231,145,46)" fg:x="3220" fg:w="854"/><text x="14.1234%" y="223.50">@de..</text></g><g><title>skip_fields (6 instructions, 0.03%)</title><rect x="17.4985%" y="213" width="0.0258%" height="15" fill="rgb(251,118,11)" fg:x="4074" fg:w="6"/><text x="17.7915%" y="223.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="17.5243%" y="181" width="0.2448%" height="15" fill="rgb(217,147,25)" fg:x="4080" fg:w="57"/><text x="17.8172%" y="191.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="17.5243%" y="197" width="0.2792%" height="15" fill="rgb(247,81,37)" fg:x="4080" fg:w="65"/><text x="17.8172%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="17.8035%" y="197" width="0.0730%" height="15" fill="rgb(209,12,38)" fg:x="4145" fg:w="17"/><text x="18.0964%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="17.8765%" y="149" width="0.2448%" height="15" fill="rgb(227,1,9)" fg:x="4162" fg:w="57"/><text x="18.1694%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="17.8765%" y="165" width="0.2792%" height="15" fill="rgb(248,47,43)" fg:x="4162" fg:w="65"/><text x="18.1694%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="18.1557%" y="165" width="0.4295%" height="15" fill="rgb(221,10,30)" fg:x="4227" fg:w="100"/><text x="18.4486%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="18.5852%" y="165" width="3.3545%" height="15" fill="rgb(210,229,1)" fg:x="4327" fg:w="781"/><text x="18.8781%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.45%)</title><rect x="17.8765%" y="181" width="4.4498%" height="15" fill="rgb(222,148,37)" fg:x="4162" fg:w="1036"/><text x="18.1694%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="22.3263%" y="165" width="0.1203%" height="15" fill="rgb(234,67,33)" fg:x="5198" fg:w="28"/><text x="22.6192%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="22.4465%" y="149" width="0.0730%" height="15" fill="rgb(247,98,35)" fg:x="5226" fg:w="17"/><text x="22.7395%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.5195%" y="133" width="0.0730%" height="15" fill="rgb(247,138,52)" fg:x="5243" fg:w="17"/><text x="22.8125%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.5926%" y="133" width="0.0730%" height="15" fill="rgb(213,79,30)" fg:x="5260" fg:w="17"/><text x="22.8855%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.8288%" y="133" width="0.0730%" height="15" fill="rgb(246,177,23)" fg:x="5315" fg:w="17"/><text x="23.1218%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="22.9018%" y="133" width="0.0730%" height="15" fill="rgb(230,62,27)" fg:x="5332" fg:w="17"/><text x="23.1948%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.1380%" y="133" width="0.0730%" height="15" fill="rgb(216,154,8)" fg:x="5387" fg:w="17"/><text x="23.4310%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.2111%" y="133" width="0.0730%" height="15" fill="rgb(244,35,45)" fg:x="5404" fg:w="17"/><text x="23.5040%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.4430%" y="133" width="0.0730%" height="15" fill="rgb(251,115,12)" fg:x="5458" fg:w="17"/><text x="23.7360%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="23.5160%" y="133" width="0.0730%" height="15" fill="rgb(240,54,50)" fg:x="5475" fg:w="17"/><text x="23.8090%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="23.5890%" y="133" width="0.0730%" height="15" fill="rgb(233,84,52)" fg:x="5492" fg:w="17"/><text x="23.8820%" y="143.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="23.6621%" y="133" width="0.0730%" height="15" fill="rgb(207,117,47)" fg:x="5509" fg:w="17"/><text x="23.9550%" y="143.50"></text></g><g><title>Blob.compare_eq (769 instructions, 3.30%)</title><rect x="23.7351%" y="117" width="3.3030%" height="15" fill="rgb(249,43,39)" fg:x="5526" fg:w="769"/><text x="24.0280%" y="127.50">Bl..</text></g><g><title>equal.1 (777 instructions, 3.34%)</title><rect x="23.7351%" y="133" width="3.3373%" height="15" fill="rgb(209,38,44)" fg:x="5526" fg:w="777"/><text x="24.0280%" y="143.50">eq..</text></g><g><title>@anon-func-191.5 (1,126 instructions, 4.84%)</title><rect x="22.5195%" y="149" width="4.8364%" height="15" fill="rgb(236,212,23)" fg:x="5243" fg:w="1126"/><text x="22.8125%" y="159.50">@ano..</text></g><g><title>rec.4 (1,447 instructions, 6.22%)</title><rect x="22.4465%" y="165" width="6.2151%" height="15" fill="rgb(242,79,21)" fg:x="5226" fg:w="1447"/><text x="22.7395%" y="175.50">rec.4</text></g><g><title>get.2 (1,527 instructions, 6.56%)</title><rect x="22.3263%" y="181" width="6.5587%" height="15" fill="rgb(211,96,35)" fg:x="5198" fg:w="1527"/><text x="22.6192%" y="191.50">get.2</text></g><g><title>account_get (2,578 instructions, 11.07%)</title><rect x="17.8765%" y="197" width="11.0729%" height="15" fill="rgb(253,215,40)" fg:x="4162" fg:w="2578"/><text x="18.1694%" y="207.50">account_get</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="28.9494%" y="197" width="0.0730%" height="15" fill="rgb(211,81,21)" fg:x="6740" fg:w="17"/><text x="29.2424%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="29.0224%" y="197" width="0.0730%" height="15" fill="rgb(208,190,38)" fg:x="6757" fg:w="17"/><text x="29.3154%" y="207.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="29.0954%" y="197" width="0.0730%" height="15" fill="rgb(235,213,38)" fg:x="6774" fg:w="17"/><text x="29.3884%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="29.1685%" y="197" width="0.0730%" height="15" fill="rgb(237,122,38)" fg:x="6791" fg:w="17"/><text x="29.4614%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="29.2415%" y="197" width="0.0730%" height="15" fill="rgb(244,218,35)" fg:x="6808" fg:w="17"/><text x="29.5344%" y="207.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="29.3145%" y="197" width="0.1160%" height="15" fill="rgb(240,68,47)" fg:x="6825" fg:w="27"/><text x="29.6075%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::hf8466ab08fe2a5b9 (61 instructions, 0.26%)</title><rect x="29.4305%" y="133" width="0.2620%" height="15" fill="rgb(210,16,53)" fg:x="6852" fg:w="61"/><text x="29.7234%" y="143.50"></text></g><g><title>memset (106 instructions, 0.46%)</title><rect x="29.6925%" y="133" width="0.4553%" height="15" fill="rgb(235,124,12)" fg:x="6913" fg:w="106"/><text x="29.9854%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="29.4305%" y="149" width="0.8719%" height="15" fill="rgb(224,169,11)" fg:x="6852" fg:w="203"/><text x="29.7234%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="29.4305%" y="165" width="0.9621%" height="15" fill="rgb(250,166,2)" fg:x="6852" fg:w="224"/><text x="29.7234%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="30.3926%" y="165" width="0.4467%" height="15" fill="rgb(242,216,29)" fg:x="7076" fg:w="104"/><text x="30.6855%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h51debae7dba593f1 (33 instructions, 0.14%)</title><rect x="30.8393%" y="165" width="0.1417%" height="15" fill="rgb(230,116,27)" fg:x="7180" fg:w="33"/><text x="31.1322%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.84%)</title><rect x="29.4305%" y="181" width="1.8383%" height="15" fill="rgb(228,99,48)" fg:x="6852" fg:w="428"/><text x="29.7234%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="31.2688%" y="165" width="0.0558%" height="15" fill="rgb(253,11,6)" fg:x="7280" fg:w="13"/><text x="31.5618%" y="175.50"></text></g><g><title>mp_cmp (34 instructions, 0.15%)</title><rect x="31.2688%" y="181" width="0.1460%" height="15" fill="rgb(247,143,39)" fg:x="7280" fg:w="34"/><text x="31.5618%" y="191.50"></text></g><g><title>B_lt (514 instructions, 2.21%)</title><rect x="29.4305%" y="197" width="2.2077%" height="15" fill="rgb(236,97,10)" fg:x="6852" fg:w="514"/><text x="29.7234%" y="207.50">B..</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="31.6382%" y="197" width="0.0730%" height="15" fill="rgb(233,208,19)" fg:x="7366" fg:w="17"/><text x="31.9311%" y="207.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::hf8466ab08fe2a5b9 (61 instructions, 0.26%)</title><rect x="31.7112%" y="133" width="0.2620%" height="15" fill="rgb(216,164,2)" fg:x="7383" fg:w="61"/><text x="32.0042%" y="143.50"></text></g><g><title>memset (106 instructions, 0.46%)</title><rect x="31.9732%" y="133" width="0.4553%" height="15" fill="rgb(220,129,5)" fg:x="7444" fg:w="106"/><text x="32.2662%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="31.7112%" y="149" width="0.8719%" height="15" fill="rgb(242,17,10)" fg:x="7383" fg:w="203"/><text x="32.0042%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="31.7112%" y="165" width="0.9621%" height="15" fill="rgb(242,107,0)" fg:x="7383" fg:w="224"/><text x="32.0042%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="32.6733%" y="165" width="0.4467%" height="15" fill="rgb(251,28,31)" fg:x="7607" fg:w="104"/><text x="32.9663%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h51debae7dba593f1 (33 instructions, 0.14%)</title><rect x="33.1200%" y="165" width="0.1417%" height="15" fill="rgb(233,223,10)" fg:x="7711" fg:w="33"/><text x="33.4130%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.84%)</title><rect x="31.7112%" y="181" width="1.8383%" height="15" fill="rgb(215,21,27)" fg:x="7383" fg:w="428"/><text x="32.0042%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::hf8466ab08fe2a5b9 (61 instructions, 0.26%)</title><rect x="33.5495%" y="149" width="0.2620%" height="15" fill="rgb(232,23,21)" fg:x="7811" fg:w="61"/><text x="33.8425%" y="159.50"></text></g><g><title>memset (106 instructions, 0.46%)</title><rect x="33.8115%" y="149" width="0.4553%" height="15" fill="rgb(244,5,23)" fg:x="7872" fg:w="106"/><text x="34.1045%" y="159.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="33.5495%" y="165" width="0.8719%" height="15" fill="rgb(226,81,46)" fg:x="7811" fg:w="203"/><text x="33.8425%" y="175.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="33.5495%" y="181" width="0.9621%" height="15" fill="rgb(247,70,30)" fg:x="7811" fg:w="224"/><text x="33.8425%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="34.5116%" y="165" width="0.0558%" height="15" fill="rgb(212,68,19)" fg:x="8035" fg:w="13"/><text x="34.8046%" y="175.50"></text></g><g><title>mp_clamp (25 instructions, 0.11%)</title><rect x="34.5675%" y="149" width="0.1074%" height="15" fill="rgb(240,187,13)" fg:x="8048" fg:w="25"/><text x="34.8604%" y="159.50"></text></g><g><title>s_mp_sub (147 instructions, 0.63%)</title><rect x="34.5675%" y="165" width="0.6314%" height="15" fill="rgb(223,113,26)" fg:x="8048" fg:w="147"/><text x="34.8604%" y="175.50"></text></g><g><title>mp_sub (192 instructions, 0.82%)</title><rect x="34.5116%" y="181" width="0.8247%" height="15" fill="rgb(206,192,2)" fg:x="8035" fg:w="192"/><text x="34.8046%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h51debae7dba593f1 (33 instructions, 0.14%)</title><rect x="35.3363%" y="181" width="0.1417%" height="15" fill="rgb(241,108,4)" fg:x="8227" fg:w="33"/><text x="35.6293%" y="191.50"></text></g><g><title>mp_count_bits (181 instructions, 0.78%)</title><rect x="35.4781%" y="165" width="0.7774%" height="15" fill="rgb(247,173,49)" fg:x="8260" fg:w="181"/><text x="35.7710%" y="175.50"></text></g><g><title>bigint_2complement_bits (223 instructions, 0.96%)</title><rect x="35.4781%" y="181" width="0.9578%" height="15" fill="rgb(224,114,35)" fg:x="8260" fg:w="223"/><text x="35.7710%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::hf8466ab08fe2a5b9 (61 instructions, 0.26%)</title><rect x="36.9771%" y="133" width="0.2620%" height="15" fill="rgb(245,159,27)" fg:x="8609" fg:w="61"/><text x="37.2700%" y="143.50"></text></g><g><title>memset (106 instructions, 0.46%)</title><rect x="37.2391%" y="133" width="0.4553%" height="15" fill="rgb(245,172,44)" fg:x="8670" fg:w="106"/><text x="37.5320%" y="143.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="36.9771%" y="149" width="0.8719%" height="15" fill="rgb(236,23,11)" fg:x="8609" fg:w="203"/><text x="37.2700%" y="159.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="36.9771%" y="165" width="0.9621%" height="15" fill="rgb(205,117,38)" fg:x="8609" fg:w="224"/><text x="37.2700%" y="175.50"></text></g><g><title>mp_set_u64 (104 instructions, 0.45%)</title><rect x="37.9392%" y="165" width="0.4467%" height="15" fill="rgb(237,72,25)" fg:x="8833" fg:w="104"/><text x="38.2321%" y="175.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h51debae7dba593f1 (33 instructions, 0.14%)</title><rect x="38.3859%" y="165" width="0.1417%" height="15" fill="rgb(244,70,9)" fg:x="8937" fg:w="33"/><text x="38.6788%" y="175.50"></text></g><g><title>bigint_of_int64 (428 instructions, 1.84%)</title><rect x="36.9771%" y="181" width="1.8383%" height="15" fill="rgb(217,125,39)" fg:x="8609" fg:w="428"/><text x="37.2700%" y="191.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::hf8466ab08fe2a5b9 (61 instructions, 0.26%)</title><rect x="38.8154%" y="149" width="0.2620%" height="15" fill="rgb(235,36,10)" fg:x="9037" fg:w="61"/><text x="39.1084%" y="159.50"></text></g><g><title>memset (106 instructions, 0.46%)</title><rect x="39.0774%" y="149" width="0.4553%" height="15" fill="rgb(251,123,47)" fg:x="9098" fg:w="106"/><text x="39.3704%" y="159.50"></text></g><g><title>mp_calloc (203 instructions, 0.87%)</title><rect x="38.8154%" y="165" width="0.8719%" height="15" fill="rgb(221,13,13)" fg:x="9037" fg:w="203"/><text x="39.1084%" y="175.50"></text></g><g><title>mp_init (224 instructions, 0.96%)</title><rect x="38.8154%" y="181" width="0.9621%" height="15" fill="rgb(238,131,9)" fg:x="9037" fg:w="224"/><text x="39.1084%" y="191.50"></text></g><g><title>mp_cmp_mag (13 instructions, 0.06%)</title><rect x="39.7775%" y="165" width="0.0558%" height="15" fill="rgb(211,50,8)" fg:x="9261" fg:w="13"/><text x="40.0705%" y="175.50"></text></g><g><title>mp_clamp (25 instructions, 0.11%)</title><rect x="39.8333%" y="149" width="0.1074%" height="15" fill="rgb(245,182,24)" fg:x="9274" fg:w="25"/><text x="40.1263%" y="159.50"></text></g><g><title>s_mp_sub (147 instructions, 0.63%)</title><rect x="39.8333%" y="165" width="0.6314%" height="15" fill="rgb(242,14,37)" fg:x="9274" fg:w="147"/><text x="40.1263%" y="175.50"></text></g><g><title>mp_sub (192 instructions, 0.82%)</title><rect x="39.7775%" y="181" width="0.8247%" height="15" fill="rgb(246,228,12)" fg:x="9261" fg:w="192"/><text x="40.0705%" y="191.50"></text></g><g><title>motoko_rts::bigint::persist_bigint::h51debae7dba593f1 (33 instructions, 0.14%)</title><rect x="40.6022%" y="181" width="0.1417%" height="15" fill="rgb(213,55,15)" fg:x="9453" fg:w="33"/><text x="40.8952%" y="191.50"></text></g><g><title>mp_count_bits (181 instructions, 0.78%)</title><rect x="40.7439%" y="165" width="0.7774%" height="15" fill="rgb(209,9,3)" fg:x="9486" fg:w="181"/><text x="41.0369%" y="175.50"></text></g><g><title>bigint_2complement_bits (223 instructions, 0.96%)</title><rect x="40.7439%" y="181" width="0.9578%" height="15" fill="rgb(230,59,30)" fg:x="9486" fg:w="223"/><text x="41.0369%" y="191.50"></text></g><g><title>B_sub (2,452 instructions, 10.53%)</title><rect x="31.7112%" y="197" width="10.5317%" height="15" fill="rgb(209,121,21)" fg:x="7383" fg:w="2452"/><text x="32.0042%" y="207.50">B_sub</text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="42.2429%" y="149" width="0.2448%" height="15" fill="rgb(220,109,13)" fg:x="9835" fg:w="57"/><text x="42.5359%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="42.2429%" y="165" width="0.2792%" height="15" fill="rgb(232,18,1)" fg:x="9835" fg:w="65"/><text x="42.5359%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="42.5221%" y="165" width="0.4295%" height="15" fill="rgb(215,41,42)" fg:x="9900" fg:w="100"/><text x="42.8151%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="42.9516%" y="165" width="3.3545%" height="15" fill="rgb(224,123,36)" fg:x="10000" fg:w="781"/><text x="43.2446%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.45%)</title><rect x="42.2429%" y="181" width="4.4498%" height="15" fill="rgb(240,125,3)" fg:x="9835" fg:w="1036"/><text x="42.5359%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="46.6927%" y="165" width="0.1203%" height="15" fill="rgb(205,98,50)" fg:x="10871" fg:w="28"/><text x="46.9857%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="46.8130%" y="149" width="0.0730%" height="15" fill="rgb(205,185,37)" fg:x="10899" fg:w="17"/><text x="47.1060%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="46.8860%" y="101" width="0.0730%" height="15" fill="rgb(238,207,15)" fg:x="10916" fg:w="17"/><text x="47.1790%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="46.9590%" y="101" width="0.0730%" height="15" fill="rgb(213,199,42)" fg:x="10933" fg:w="17"/><text x="47.2520%" y="111.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="46.8860%" y="117" width="0.3093%" height="15" fill="rgb(235,201,11)" fg:x="10916" fg:w="72"/><text x="47.1790%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.1953%" y="85" width="0.0730%" height="15" fill="rgb(207,46,11)" fg:x="10988" fg:w="17"/><text x="47.4882%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.2683%" y="85" width="0.0730%" height="15" fill="rgb(241,35,35)" fg:x="11005" fg:w="17"/><text x="47.5612%" y="95.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="47.1953%" y="101" width="0.3093%" height="15" fill="rgb(243,32,47)" fg:x="10988" fg:w="72"/><text x="47.4882%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.5045%" y="69" width="0.0730%" height="15" fill="rgb(247,202,23)" fg:x="11060" fg:w="17"/><text x="47.7975%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.5775%" y="69" width="0.0730%" height="15" fill="rgb(219,102,11)" fg:x="11077" fg:w="17"/><text x="47.8705%" y="79.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="47.5045%" y="85" width="0.3050%" height="15" fill="rgb(243,110,44)" fg:x="11060" fg:w="71"/><text x="47.7975%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.8095%" y="53" width="0.0730%" height="15" fill="rgb(222,74,54)" fg:x="11131" fg:w="17"/><text x="48.1024%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="47.8825%" y="53" width="0.0730%" height="15" fill="rgb(216,99,12)" fg:x="11148" fg:w="17"/><text x="48.1755%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="47.9555%" y="53" width="0.0730%" height="15" fill="rgb(226,22,26)" fg:x="11165" fg:w="17"/><text x="48.2485%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="48.0285%" y="53" width="0.0730%" height="15" fill="rgb(217,163,10)" fg:x="11182" fg:w="17"/><text x="48.3215%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 3.30%)</title><rect x="48.1015%" y="37" width="3.3030%" height="15" fill="rgb(213,25,53)" fg:x="11199" fg:w="769"/><text x="48.3945%" y="47.50">Bl..</text></g><g><title>equal.1 (777 instructions, 3.34%)</title><rect x="48.1015%" y="53" width="3.3373%" height="15" fill="rgb(252,105,26)" fg:x="11199" fg:w="777"/><text x="48.3945%" y="63.50">eq..</text></g><g><title>@anon-func-191.5 (911 instructions, 3.91%)</title><rect x="47.8095%" y="69" width="3.9129%" height="15" fill="rgb(220,39,43)" fg:x="11131" fg:w="911"/><text x="48.1024%" y="79.50">@an..</text></g><g><title>del (1,007 instructions, 4.33%)</title><rect x="47.8095%" y="85" width="4.3252%" height="15" fill="rgb(229,68,48)" fg:x="11131" fg:w="1007"/><text x="48.1024%" y="95.50">del</text></g><g><title>del (1,233 instructions, 5.30%)</title><rect x="47.5045%" y="101" width="5.2959%" height="15" fill="rgb(252,8,32)" fg:x="11060" fg:w="1233"/><text x="47.7975%" y="111.50">del</text></g><g><title>del (1,460 instructions, 6.27%)</title><rect x="47.1953%" y="117" width="6.2709%" height="15" fill="rgb(223,20,43)" fg:x="10988" fg:w="1460"/><text x="47.4882%" y="127.50">del</text></g><g><title>del (1,687 instructions, 7.25%)</title><rect x="46.8860%" y="133" width="7.2459%" height="15" fill="rgb(229,81,49)" fg:x="10916" fg:w="1687"/><text x="47.1790%" y="143.50">del</text></g><g><title>replace (1,901 instructions, 8.17%)</title><rect x="46.8860%" y="149" width="8.1651%" height="15" fill="rgb(236,28,36)" fg:x="10916" fg:w="1901"/><text x="47.1790%" y="159.50">replace</text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.0511%" y="117" width="0.0515%" height="15" fill="rgb(249,185,26)" fg:x="12817" fg:w="12"/><text x="55.3441%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.1027%" y="117" width="0.1160%" height="15" fill="rgb(249,174,33)" fg:x="12829" fg:w="27"/><text x="55.3956%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.2186%" y="117" width="0.0515%" height="15" fill="rgb(233,201,37)" fg:x="12856" fg:w="12"/><text x="55.5116%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.2702%" y="117" width="0.1160%" height="15" fill="rgb(221,78,26)" fg:x="12868" fg:w="27"/><text x="55.5631%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.3861%" y="117" width="0.0515%" height="15" fill="rgb(250,127,30)" fg:x="12895" fg:w="12"/><text x="55.6791%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.4377%" y="117" width="0.1160%" height="15" fill="rgb(230,49,44)" fg:x="12907" fg:w="27"/><text x="55.7306%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="55.5536%" y="117" width="0.0515%" height="15" fill="rgb(229,67,23)" fg:x="12934" fg:w="12"/><text x="55.8466%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="55.6052%" y="117" width="0.1160%" height="15" fill="rgb(249,83,47)" fg:x="12946" fg:w="27"/><text x="55.8982%" y="127.50"></text></g><g><title>rec (501 instructions, 2.15%)</title><rect x="55.0511%" y="133" width="2.1519%" height="15" fill="rgb(215,43,3)" fg:x="12817" fg:w="501"/><text x="55.3441%" y="143.50">r..</text></g><g><title>leaf (510 instructions, 2.19%)</title><rect x="55.0511%" y="149" width="2.1905%" height="15" fill="rgb(238,154,13)" fg:x="12817" fg:w="510"/><text x="55.3441%" y="159.50">l..</text></g><g><title>recursiveReplace (2,501 instructions, 10.74%)</title><rect x="46.8130%" y="165" width="10.7422%" height="15" fill="rgb(219,56,2)" fg:x="10899" fg:w="2501"/><text x="47.1060%" y="175.50">recursiveRepl..</text></g><g><title>put.1 (2,668 instructions, 11.46%)</title><rect x="46.6927%" y="181" width="11.4595%" height="15" fill="rgb(233,0,4)" fg:x="10871" fg:w="2668"/><text x="46.9857%" y="191.50">put.1</text></g><g><title>account_put (3,756 instructions, 16.13%)</title><rect x="42.2429%" y="197" width="16.1326%" height="15" fill="rgb(235,30,7)" fg:x="9835" fg:w="3756"/><text x="42.5359%" y="207.50">account_put</text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="58.3756%" y="197" width="0.0730%" height="15" fill="rgb(250,79,13)" fg:x="13591" fg:w="17"/><text x="58.6685%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="58.4486%" y="149" width="0.2448%" height="15" fill="rgb(211,146,34)" fg:x="13608" fg:w="57"/><text x="58.7416%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="58.4486%" y="165" width="0.2792%" height="15" fill="rgb(228,22,38)" fg:x="13608" fg:w="65"/><text x="58.7416%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="58.7278%" y="165" width="0.4295%" height="15" fill="rgb(235,168,5)" fg:x="13673" fg:w="100"/><text x="59.0207%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="59.1573%" y="165" width="3.3545%" height="15" fill="rgb(221,155,16)" fg:x="13773" fg:w="781"/><text x="59.4503%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.45%)</title><rect x="58.4486%" y="181" width="4.4498%" height="15" fill="rgb(215,215,53)" fg:x="13608" fg:w="1036"/><text x="58.7416%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="62.8984%" y="165" width="0.1203%" height="15" fill="rgb(223,4,10)" fg:x="14644" fg:w="28"/><text x="63.1913%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="63.0186%" y="149" width="0.0730%" height="15" fill="rgb(234,103,6)" fg:x="14672" fg:w="17"/><text x="63.3116%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.0917%" y="133" width="0.0730%" height="15" fill="rgb(227,97,0)" fg:x="14689" fg:w="17"/><text x="63.3846%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.1647%" y="133" width="0.0730%" height="15" fill="rgb(234,150,53)" fg:x="14706" fg:w="17"/><text x="63.4576%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.4009%" y="133" width="0.0730%" height="15" fill="rgb(228,201,54)" fg:x="14761" fg:w="17"/><text x="63.6939%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.4739%" y="133" width="0.0730%" height="15" fill="rgb(222,22,37)" fg:x="14778" fg:w="17"/><text x="63.7669%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.7102%" y="133" width="0.0730%" height="15" fill="rgb(237,53,32)" fg:x="14833" fg:w="17"/><text x="64.0031%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="63.7832%" y="133" width="0.0730%" height="15" fill="rgb(233,25,53)" fg:x="14850" fg:w="17"/><text x="64.0761%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="64.0194%" y="133" width="0.0730%" height="15" fill="rgb(210,40,34)" fg:x="14905" fg:w="17"/><text x="64.3124%" y="143.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="64.0924%" y="133" width="0.0730%" height="15" fill="rgb(241,220,44)" fg:x="14922" fg:w="17"/><text x="64.3854%" y="143.50"></text></g><g><title>@anon-func-191.5 (287 instructions, 1.23%)</title><rect x="63.0917%" y="149" width="1.2327%" height="15" fill="rgb(235,28,35)" fg:x="14689" fg:w="287"/><text x="63.3846%" y="159.50"></text></g><g><title>rec.4 (607 instructions, 2.61%)</title><rect x="63.0186%" y="165" width="2.6072%" height="15" fill="rgb(210,56,17)" fg:x="14672" fg:w="607"/><text x="63.3116%" y="175.50">r..</text></g><g><title>get.2 (687 instructions, 2.95%)</title><rect x="62.8984%" y="181" width="2.9508%" height="15" fill="rgb(224,130,29)" fg:x="14644" fg:w="687"/><text x="63.1913%" y="191.50">ge..</text></g><g><title>account_get (1,738 instructions, 7.46%)</title><rect x="58.4486%" y="197" width="7.4650%" height="15" fill="rgb(235,212,8)" fg:x="13608" fg:w="1738"/><text x="58.7416%" y="207.50">account_..</text></g><g><title>get.1 (9 instructions, 0.04%)</title><rect x="65.9136%" y="197" width="0.0387%" height="15" fill="rgb(223,33,50)" fg:x="15346" fg:w="9"/><text x="66.2066%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="65.9522%" y="197" width="0.0730%" height="15" fill="rgb(219,149,13)" fg:x="15355" fg:w="17"/><text x="66.2452%" y="207.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="66.0253%" y="197" width="0.1160%" height="15" fill="rgb(250,156,29)" fg:x="15372" fg:w="27"/><text x="66.3182%" y="207.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="66.1412%" y="197" width="0.0730%" height="15" fill="rgb(216,193,19)" fg:x="15399" fg:w="17"/><text x="66.4342%" y="207.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="66.2142%" y="149" width="0.2448%" height="15" fill="rgb(216,135,14)" fg:x="15416" fg:w="57"/><text x="66.5072%" y="159.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="66.2142%" y="165" width="0.2792%" height="15" fill="rgb(241,47,5)" fg:x="15416" fg:w="65"/><text x="66.5072%" y="175.50"></text></g><g><title>memcpy (100 instructions, 0.43%)</title><rect x="66.4934%" y="165" width="0.4295%" height="15" fill="rgb(233,42,35)" fg:x="15481" fg:w="100"/><text x="66.7864%" y="175.50"></text></g><g><title>compute_crc32 (781 instructions, 3.35%)</title><rect x="66.9229%" y="165" width="3.3545%" height="15" fill="rgb(231,13,6)" fg:x="15581" fg:w="781"/><text x="67.2159%" y="175.50">co..</text></g><g><title>account_key (1,036 instructions, 4.45%)</title><rect x="66.2142%" y="181" width="4.4498%" height="15" fill="rgb(207,181,40)" fg:x="15416" fg:w="1036"/><text x="66.5072%" y="191.50">acco..</text></g><g><title>equalKey (28 instructions, 0.12%)</title><rect x="70.6640%" y="165" width="0.1203%" height="15" fill="rgb(254,173,49)" fg:x="16452" fg:w="28"/><text x="70.9570%" y="175.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.07%)</title><rect x="70.7843%" y="149" width="0.0730%" height="15" fill="rgb(221,1,38)" fg:x="16480" fg:w="17"/><text x="71.0773%" y="159.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="70.8573%" y="101" width="0.0730%" height="15" fill="rgb(206,124,46)" fg:x="16497" fg:w="17"/><text x="71.1503%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="70.9303%" y="101" width="0.0730%" height="15" fill="rgb(249,21,11)" fg:x="16514" fg:w="17"/><text x="71.2233%" y="111.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="70.8573%" y="117" width="0.3093%" height="15" fill="rgb(222,201,40)" fg:x="16497" fg:w="72"/><text x="71.1503%" y="127.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.1666%" y="85" width="0.0730%" height="15" fill="rgb(235,61,29)" fg:x="16569" fg:w="17"/><text x="71.4595%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.2396%" y="85" width="0.0730%" height="15" fill="rgb(219,207,3)" fg:x="16586" fg:w="17"/><text x="71.5326%" y="95.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="71.1666%" y="101" width="0.3093%" height="15" fill="rgb(222,56,46)" fg:x="16569" fg:w="72"/><text x="71.4595%" y="111.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.4758%" y="69" width="0.0730%" height="15" fill="rgb(239,76,54)" fg:x="16641" fg:w="17"/><text x="71.7688%" y="79.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.5488%" y="69" width="0.0730%" height="15" fill="rgb(231,124,27)" fg:x="16658" fg:w="17"/><text x="71.8418%" y="79.50"></text></g><g><title>@anon-func-191.5 (72 instructions, 0.31%)</title><rect x="71.4758%" y="85" width="0.3093%" height="15" fill="rgb(249,195,6)" fg:x="16641" fg:w="72"/><text x="71.7688%" y="95.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.7851%" y="53" width="0.0730%" height="15" fill="rgb(237,174,47)" fg:x="16713" fg:w="17"/><text x="72.0780%" y="63.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.07%)</title><rect x="71.8581%" y="53" width="0.0730%" height="15" fill="rgb(206,201,31)" fg:x="16730" fg:w="17"/><text x="72.1511%" y="63.50"></text></g><g><title>@anon-func-191.5 (71 instructions, 0.30%)</title><rect x="71.7851%" y="69" width="0.3050%" height="15" fill="rgb(231,57,52)" fg:x="16713" fg:w="71"/><text x="72.0780%" y="79.50"></text></g><g><title>del (31 instructions, 0.13%)</title><rect x="72.0900%" y="69" width="0.1332%" height="15" fill="rgb(248,177,22)" fg:x="16784" fg:w="31"/><text x="72.3830%" y="79.50"></text></g><g><title>del (198 instructions, 0.85%)</title><rect x="71.7851%" y="85" width="0.8504%" height="15" fill="rgb(215,211,37)" fg:x="16713" fg:w="198"/><text x="72.0780%" y="95.50"></text></g><g><title>del (366 instructions, 1.57%)</title><rect x="71.4758%" y="101" width="1.5720%" height="15" fill="rgb(241,128,51)" fg:x="16641" fg:w="366"/><text x="71.7688%" y="111.50"></text></g><g><title>del (534 instructions, 2.29%)</title><rect x="71.1666%" y="117" width="2.2936%" height="15" fill="rgb(227,165,31)" fg:x="16569" fg:w="534"/><text x="71.4595%" y="127.50">d..</text></g><g><title>del (702 instructions, 3.02%)</title><rect x="70.8573%" y="133" width="3.0152%" height="15" fill="rgb(228,167,24)" fg:x="16497" fg:w="702"/><text x="71.1503%" y="143.50">del</text></g><g><title>replace (916 instructions, 3.93%)</title><rect x="70.8573%" y="149" width="3.9344%" height="15" fill="rgb(228,143,12)" fg:x="16497" fg:w="916"/><text x="71.1503%" y="159.50">rep..</text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="74.7917%" y="117" width="0.0515%" height="15" fill="rgb(249,149,8)" fg:x="17413" fg:w="12"/><text x="75.0847%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="74.8432%" y="117" width="0.1160%" height="15" fill="rgb(243,35,44)" fg:x="17425" fg:w="27"/><text x="75.1362%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="74.9592%" y="117" width="0.0515%" height="15" fill="rgb(246,89,9)" fg:x="17452" fg:w="12"/><text x="75.2522%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.0107%" y="117" width="0.1160%" height="15" fill="rgb(233,213,13)" fg:x="17464" fg:w="27"/><text x="75.3037%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.1267%" y="117" width="0.0515%" height="15" fill="rgb(233,141,41)" fg:x="17491" fg:w="12"/><text x="75.4197%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.1782%" y="117" width="0.1160%" height="15" fill="rgb(239,167,4)" fg:x="17503" fg:w="27"/><text x="75.4712%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.2942%" y="117" width="0.0515%" height="15" fill="rgb(209,217,16)" fg:x="17530" fg:w="12"/><text x="75.5872%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.3458%" y="117" width="0.1160%" height="15" fill="rgb(219,88,35)" fg:x="17542" fg:w="27"/><text x="75.6387%" y="127.50"></text></g><g><title>B_ge (12 instructions, 0.05%)</title><rect x="75.4617%" y="117" width="0.0515%" height="15" fill="rgb(220,193,23)" fg:x="17569" fg:w="12"/><text x="75.7547%" y="127.50"></text></g><g><title>B_add (27 instructions, 0.12%)</title><rect x="75.5133%" y="117" width="0.1160%" height="15" fill="rgb(230,90,52)" fg:x="17581" fg:w="27"/><text x="75.8062%" y="127.50"></text></g><g><title>rec (601 instructions, 2.58%)</title><rect x="74.7917%" y="133" width="2.5814%" height="15" fill="rgb(252,106,19)" fg:x="17413" fg:w="601"/><text x="75.0847%" y="143.50">r..</text></g><g><title>leaf (610 instructions, 2.62%)</title><rect x="74.7917%" y="149" width="2.6200%" height="15" fill="rgb(206,74,20)" fg:x="17413" fg:w="610"/><text x="75.0847%" y="159.50">l..</text></g><g><title>recursiveReplace (1,616 instructions, 6.94%)</title><rect x="70.7843%" y="165" width="6.9410%" height="15" fill="rgb(230,138,44)" fg:x="16480" fg:w="1616"/><text x="71.0773%" y="175.50">recursiv..</text></g><g><title>put.1 (1,783 instructions, 7.66%)</title><rect x="70.6640%" y="181" width="7.6583%" height="15" fill="rgb(235,182,43)" fg:x="16452" fg:w="1783"/><text x="70.9570%" y="191.50">put.1</text></g><g><title>account_put (2,871 instructions, 12.33%)</title><rect x="66.2142%" y="197" width="12.3314%" height="15" fill="rgb(242,16,51)" fg:x="15416" fg:w="2871"/><text x="66.5072%" y="207.50">account_put</text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="78.5457%" y="165" width="0.2448%" height="15" fill="rgb(248,9,4)" fg:x="18287" fg:w="57"/><text x="78.8386%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="78.5457%" y="181" width="0.2792%" height="15" fill="rgb(210,31,22)" fg:x="18287" fg:w="65"/><text x="78.8386%" y="191.50"></text></g><g><title>memcpy (86 instructions, 0.37%)</title><rect x="78.8248%" y="181" width="0.3694%" height="15" fill="rgb(239,54,39)" fg:x="18352" fg:w="86"/><text x="79.1178%" y="191.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h23a986936ca1b0b5 (57 instructions, 0.24%)</title><rect x="79.1942%" y="165" width="0.2448%" height="15" fill="rgb(230,99,41)" fg:x="18438" fg:w="57"/><text x="79.4872%" y="175.50"></text></g><g><title>alloc_blob (65 instructions, 0.28%)</title><rect x="79.1942%" y="181" width="0.2792%" height="15" fill="rgb(253,106,12)" fg:x="18438" fg:w="65"/><text x="79.4872%" y="191.50"></text></g><g><title>leb128_encode (11 instructions, 0.05%)</title><rect x="79.4734%" y="181" width="0.0472%" height="15" fill="rgb(213,46,41)" fg:x="18503" fg:w="11"/><text x="79.7664%" y="191.50"></text></g><g><title>$lambda.32 (1,405 instructions, 6.03%)</title><rect x="78.5457%" y="197" width="6.0347%" height="15" fill="rgb(215,133,35)" fg:x="18287" fg:w="1405"/><text x="78.8386%" y="207.50">$lambd..</text></g><g><title>$lambda.3 (16,944 instructions, 72.78%)</title><rect x="17.5243%" y="213" width="72.7773%" height="15" fill="rgb(213,28,5)" fg:x="4080" fg:w="16944"/><text x="17.8172%" y="223.50">$lambda.3</text></g><g><title>schedule_copying_gc (108 instructions, 0.46%)</title><rect x="90.3015%" y="213" width="0.4639%" height="15" fill="rgb(215,77,49)" fg:x="21024" fg:w="108"/><text x="90.5945%" y="223.50"></text></g><g><title>trans_state4 (11 instructions, 0.05%)</title><rect x="90.7654%" y="213" width="0.0472%" height="15" fill="rgb(248,100,22)" fg:x="21132" fg:w="11"/><text x="91.0584%" y="223.50"></text></g><g><title>all (23,282 instructions, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="23282"/><text x="0.2930%" y="255.50"></text></g><g><title>transfer (23,282 instructions, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="23282"/><text x="0.2930%" y="239.50">transfer</text></g></svg></svg>