<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="22455"><g><title>trans_state5 (8 instructions, 0.04%)</title><rect x="0.0000%" y="85" width="0.0356%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="0.0356%" y="85" width="0.1336%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="30"/><text x="0.3286%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="0.1692%" y="69" width="0.2049%" height="15" fill="rgb(221,193,54)" fg:x="38" fg:w="46"/><text x="0.4622%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="0.3741%" y="69" width="0.1336%" height="15" fill="rgb(248,212,6)" fg:x="84" fg:w="30"/><text x="0.6671%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.5077%" y="69" width="0.2672%" height="15" fill="rgb(208,68,35)" fg:x="114" fg:w="60"/><text x="0.8007%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.7749%" y="69" width="0.2672%" height="15" fill="rgb(232,128,0)" fg:x="174" fg:w="60"/><text x="1.0679%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="1.0421%" y="69" width="0.2672%" height="15" fill="rgb(207,160,47)" fg:x="234" fg:w="60"/><text x="1.3351%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="1.3093%" y="69" width="0.2049%" height="15" fill="rgb(228,23,34)" fg:x="294" fg:w="46"/><text x="1.6023%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="1.5141%" y="69" width="0.8818%" height="15" fill="rgb(218,30,26)" fg:x="340" fg:w="198"/><text x="1.8071%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="2.3959%" y="69" width="0.2672%" height="15" fill="rgb(220,122,19)" fg:x="538" fg:w="60"/><text x="2.6889%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="2.6631%" y="69" width="0.8818%" height="15" fill="rgb(250,228,42)" fg:x="598" fg:w="198"/><text x="2.9561%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="3.5449%" y="69" width="0.2672%" height="15" fill="rgb(240,193,28)" fg:x="796" fg:w="60"/><text x="3.8378%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="3.8121%" y="69" width="0.8818%" height="15" fill="rgb(216,20,37)" fg:x="856" fg:w="198"/><text x="4.1050%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="4.6938%" y="69" width="0.2672%" height="15" fill="rgb(206,188,39)" fg:x="1054" fg:w="60"/><text x="4.9868%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="4.9610%" y="69" width="0.2672%" height="15" fill="rgb(217,207,13)" fg:x="1114" fg:w="60"/><text x="5.2540%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.2282%" y="69" width="0.2672%" height="15" fill="rgb(231,73,38)" fg:x="1174" fg:w="60"/><text x="5.5212%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.4954%" y="69" width="0.2672%" height="15" fill="rgb(225,20,46)" fg:x="1234" fg:w="60"/><text x="5.7884%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.7626%" y="69" width="0.2672%" height="15" fill="rgb(210,31,41)" fg:x="1294" fg:w="60"/><text x="6.0556%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.0298%" y="69" width="0.2672%" height="15" fill="rgb(221,200,47)" fg:x="1354" fg:w="60"/><text x="6.3228%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="6.2970%" y="69" width="0.2049%" height="15" fill="rgb(226,26,5)" fg:x="1414" fg:w="46"/><text x="6.5900%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="6.5019%" y="69" width="0.2049%" height="15" fill="rgb(249,33,26)" fg:x="1460" fg:w="46"/><text x="6.7949%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.7067%" y="69" width="0.2672%" height="15" fill="rgb(235,183,28)" fg:x="1506" fg:w="60"/><text x="6.9997%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="6.9739%" y="69" width="0.2049%" height="15" fill="rgb(221,5,38)" fg:x="1566" fg:w="46"/><text x="7.2669%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.1788%" y="69" width="0.2672%" height="15" fill="rgb(247,18,42)" fg:x="1612" fg:w="60"/><text x="7.4718%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.4460%" y="69" width="0.2672%" height="15" fill="rgb(241,131,45)" fg:x="1672" fg:w="60"/><text x="7.7390%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="7.7132%" y="69" width="0.2049%" height="15" fill="rgb(249,31,29)" fg:x="1732" fg:w="46"/><text x="8.0062%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.71%)</title><rect x="7.9181%" y="69" width="0.7125%" height="15" fill="rgb(225,111,53)" fg:x="1778" fg:w="160"/><text x="8.2110%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="8.6306%" y="69" width="0.2672%" height="15" fill="rgb(238,160,17)" fg:x="1938" fg:w="60"/><text x="8.9236%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="8.8978%" y="69" width="0.8818%" height="15" fill="rgb(214,148,48)" fg:x="1998" fg:w="198"/><text x="9.1908%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="9.7796%" y="69" width="0.2672%" height="15" fill="rgb(232,36,49)" fg:x="2196" fg:w="60"/><text x="10.0725%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="10.0468%" y="69" width="0.8818%" height="15" fill="rgb(209,103,24)" fg:x="2256" fg:w="198"/><text x="10.3397%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="10.9285%" y="69" width="0.2672%" height="15" fill="rgb(229,88,8)" fg:x="2454" fg:w="60"/><text x="11.2215%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="11.1957%" y="69" width="0.8818%" height="15" fill="rgb(213,181,19)" fg:x="2514" fg:w="198"/><text x="11.4887%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="12.0775%" y="69" width="0.2672%" height="15" fill="rgb(254,191,54)" fg:x="2712" fg:w="60"/><text x="12.3705%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="12.3447%" y="69" width="0.8818%" height="15" fill="rgb(241,83,37)" fg:x="2772" fg:w="198"/><text x="12.6377%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="13.2265%" y="69" width="0.2672%" height="15" fill="rgb(233,36,39)" fg:x="2970" fg:w="60"/><text x="13.5194%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="13.4937%" y="69" width="0.8818%" height="15" fill="rgb(226,3,54)" fg:x="3030" fg:w="198"/><text x="13.7866%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="14.3754%" y="69" width="0.2672%" height="15" fill="rgb(245,192,40)" fg:x="3228" fg:w="60"/><text x="14.6684%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="14.6426%" y="69" width="0.8818%" height="15" fill="rgb(238,167,29)" fg:x="3288" fg:w="198"/><text x="14.9356%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="15.5244%" y="69" width="0.2672%" height="15" fill="rgb(232,182,51)" fg:x="3486" fg:w="60"/><text x="15.8174%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="15.7916%" y="69" width="0.2672%" height="15" fill="rgb(231,60,39)" fg:x="3546" fg:w="60"/><text x="16.0846%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="16.0588%" y="69" width="0.2049%" height="15" fill="rgb(208,69,12)" fg:x="3606" fg:w="46"/><text x="16.3518%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.71%)</title><rect x="16.2636%" y="69" width="0.7125%" height="15" fill="rgb(235,93,37)" fg:x="3652" fg:w="160"/><text x="16.5566%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="16.9762%" y="69" width="0.2672%" height="15" fill="rgb(213,116,39)" fg:x="3812" fg:w="60"/><text x="17.2691%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="17.2434%" y="69" width="0.8818%" height="15" fill="rgb(222,207,29)" fg:x="3872" fg:w="198"/><text x="17.5363%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.1251%" y="69" width="0.2672%" height="15" fill="rgb(206,96,30)" fg:x="4070" fg:w="60"/><text x="18.4181%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.3923%" y="69" width="0.2672%" height="15" fill="rgb(218,138,4)" fg:x="4130" fg:w="60"/><text x="18.6853%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.6595%" y="69" width="0.2672%" height="15" fill="rgb(250,191,14)" fg:x="4190" fg:w="60"/><text x="18.9525%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.9267%" y="69" width="0.2672%" height="15" fill="rgb(239,60,40)" fg:x="4250" fg:w="60"/><text x="19.2197%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.1939%" y="69" width="0.2672%" height="15" fill="rgb(206,27,48)" fg:x="4310" fg:w="60"/><text x="19.4869%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.4611%" y="69" width="0.2672%" height="15" fill="rgb(225,35,8)" fg:x="4370" fg:w="60"/><text x="19.7541%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.7283%" y="69" width="0.2672%" height="15" fill="rgb(250,213,24)" fg:x="4430" fg:w="60"/><text x="20.0213%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.9955%" y="69" width="0.2672%" height="15" fill="rgb(247,123,22)" fg:x="4490" fg:w="60"/><text x="20.2885%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="20.2627%" y="69" width="0.2049%" height="15" fill="rgb(231,138,38)" fg:x="4550" fg:w="46"/><text x="20.5557%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.4676%" y="69" width="0.2672%" height="15" fill="rgb(231,145,46)" fg:x="4596" fg:w="60"/><text x="20.7606%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.7348%" y="69" width="0.2672%" height="15" fill="rgb(251,118,11)" fg:x="4656" fg:w="60"/><text x="21.0278%" y="79.50"></text></g><g><title>parse_idl_header (5,872 instructions, 26.15%)</title><rect x="0.1692%" y="85" width="26.1501%" height="15" fill="rgb(217,147,25)" fg:x="38" fg:w="5872"/><text x="0.4622%" y="95.50">parse_idl_header</text></g><g><title>memset (3 instructions, 0.01%)</title><rect x="26.3193%" y="69" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="5910" fg:w="3"/><text x="26.6123%" y="79.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="26.3193%" y="85" width="0.0267%" height="15" fill="rgb(209,12,38)" fg:x="5910" fg:w="6"/><text x="26.6123%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="26.3460%" y="85" width="0.2049%" height="15" fill="rgb(227,1,9)" fg:x="5916" fg:w="46"/><text x="26.6390%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="26.5509%" y="85" width="0.2672%" height="15" fill="rgb(248,47,43)" fg:x="5962" fg:w="60"/><text x="26.8438%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="26.8181%" y="69" width="0.2049%" height="15" fill="rgb(221,10,30)" fg:x="6022" fg:w="46"/><text x="27.1110%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="27.0229%" y="69" width="0.1336%" height="15" fill="rgb(210,229,1)" fg:x="6068" fg:w="30"/><text x="27.3159%" y="79.50"></text></g><g><title>memcpy (154 instructions, 0.69%)</title><rect x="27.1565%" y="69" width="0.6858%" height="15" fill="rgb(222,148,37)" fg:x="6098" fg:w="154"/><text x="27.4495%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (305 instructions, 1.36%)</title><rect x="26.8181%" y="85" width="1.3583%" height="15" fill="rgb(234,67,33)" fg:x="6022" fg:w="305"/><text x="27.1110%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.1764%" y="85" width="0.2672%" height="15" fill="rgb(247,98,35)" fg:x="6327" fg:w="60"/><text x="28.4693%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.4436%" y="69" width="0.2672%" height="15" fill="rgb(247,138,52)" fg:x="6387" fg:w="60"/><text x="28.7365%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.7108%" y="69" width="0.2672%" height="15" fill="rgb(213,79,30)" fg:x="6447" fg:w="60"/><text x="29.0037%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="28.9780%" y="69" width="0.2049%" height="15" fill="rgb(246,177,23)" fg:x="6507" fg:w="46"/><text x="29.2709%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.16%)</title><rect x="29.1828%" y="69" width="0.1559%" height="15" fill="rgb(230,62,27)" fg:x="6553" fg:w="35"/><text x="29.4758%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="29.3387%" y="69" width="0.2672%" height="15" fill="rgb(216,154,8)" fg:x="6588" fg:w="60"/><text x="29.6316%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="29.6059%" y="69" width="0.2049%" height="15" fill="rgb(244,35,45)" fg:x="6648" fg:w="46"/><text x="29.8988%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="29.8107%" y="69" width="0.0980%" height="15" fill="rgb(251,115,12)" fg:x="6694" fg:w="22"/><text x="30.1037%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="29.9087%" y="53" width="0.8818%" height="15" fill="rgb(240,54,50)" fg:x="6716" fg:w="198"/><text x="30.2017%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.00%)</title><rect x="29.9087%" y="69" width="1.0020%" height="15" fill="rgb(233,84,52)" fg:x="6716" fg:w="225"/><text x="30.2017%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="30.9107%" y="69" width="0.2672%" height="15" fill="rgb(207,117,47)" fg:x="6941" fg:w="60"/><text x="31.2037%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.1779%" y="53" width="0.2672%" height="15" fill="rgb(249,43,39)" fg:x="7001" fg:w="60"/><text x="31.4709%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.4451%" y="53" width="0.2672%" height="15" fill="rgb(209,38,44)" fg:x="7061" fg:w="60"/><text x="31.7381%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="31.7123%" y="53" width="0.2049%" height="15" fill="rgb(236,212,23)" fg:x="7121" fg:w="46"/><text x="32.0053%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="31.9172%" y="53" width="0.1336%" height="15" fill="rgb(242,79,21)" fg:x="7167" fg:w="30"/><text x="32.2101%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="32.0508%" y="53" width="0.6279%" height="15" fill="rgb(211,96,35)" fg:x="7197" fg:w="141"/><text x="32.3437%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (415 instructions, 1.85%)</title><rect x="31.1779%" y="69" width="1.8481%" height="15" fill="rgb(253,215,40)" fg:x="7001" fg:w="415"/><text x="31.4709%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="33.0261%" y="53" width="0.8818%" height="15" fill="rgb(211,81,21)" fg:x="7416" fg:w="198"/><text x="33.3190%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.00%)</title><rect x="33.0261%" y="69" width="1.0020%" height="15" fill="rgb(208,190,38)" fg:x="7416" fg:w="225"/><text x="33.3190%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.0281%" y="69" width="0.2672%" height="15" fill="rgb(235,213,38)" fg:x="7641" fg:w="60"/><text x="34.3210%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.2953%" y="69" width="0.2672%" height="15" fill="rgb(237,122,38)" fg:x="7701" fg:w="60"/><text x="34.5882%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.5625%" y="69" width="0.2672%" height="15" fill="rgb(244,218,35)" fg:x="7761" fg:w="60"/><text x="34.8554%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="34.8297%" y="69" width="0.2049%" height="15" fill="rgb(240,68,47)" fg:x="7821" fg:w="46"/><text x="35.1226%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.16%)</title><rect x="35.0345%" y="69" width="0.1559%" height="15" fill="rgb(210,16,53)" fg:x="7867" fg:w="35"/><text x="35.3275%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="35.1904%" y="69" width="0.2672%" height="15" fill="rgb(235,124,12)" fg:x="7902" fg:w="60"/><text x="35.4833%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="35.4576%" y="69" width="0.2049%" height="15" fill="rgb(224,169,11)" fg:x="7962" fg:w="46"/><text x="35.7506%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="35.6624%" y="53" width="0.2049%" height="15" fill="rgb(250,166,2)" fg:x="8008" fg:w="46"/><text x="35.9554%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="35.6624%" y="69" width="0.3251%" height="15" fill="rgb(242,216,29)" fg:x="8008" fg:w="73"/><text x="35.9554%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="35.9875%" y="69" width="0.2672%" height="15" fill="rgb(230,116,27)" fg:x="8081" fg:w="60"/><text x="36.2805%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="36.2547%" y="53" width="0.2049%" height="15" fill="rgb(228,99,48)" fg:x="8141" fg:w="46"/><text x="36.5477%" y="63.50"></text></g><g><title>utf8_validate (141 instructions, 0.63%)</title><rect x="36.4596%" y="53" width="0.6279%" height="15" fill="rgb(253,11,6)" fg:x="8187" fg:w="141"/><text x="36.7526%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="37.0875%" y="37" width="0.1336%" height="15" fill="rgb(247,143,39)" fg:x="8328" fg:w="30"/><text x="37.3805%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="37.0875%" y="53" width="0.1648%" height="15" fill="rgb(236,97,10)" fg:x="8328" fg:w="37"/><text x="37.3805%" y="63.50"></text></g><g><title>memcpy (64 instructions, 0.29%)</title><rect x="37.2523%" y="53" width="0.2850%" height="15" fill="rgb(233,208,19)" fg:x="8365" fg:w="64"/><text x="37.5453%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (330 instructions, 1.47%)</title><rect x="36.2547%" y="69" width="1.4696%" height="15" fill="rgb(216,164,2)" fg:x="8141" fg:w="330"/><text x="36.5477%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="37.7243%" y="53" width="0.2049%" height="15" fill="rgb(220,129,5)" fg:x="8471" fg:w="46"/><text x="38.0173%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="37.7243%" y="69" width="0.3251%" height="15" fill="rgb(242,17,10)" fg:x="8471" fg:w="73"/><text x="38.0173%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.0494%" y="69" width="0.2672%" height="15" fill="rgb(242,107,0)" fg:x="8544" fg:w="60"/><text x="38.3424%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.3166%" y="69" width="0.2672%" height="15" fill="rgb(251,28,31)" fg:x="8604" fg:w="60"/><text x="38.6096%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="38.5838%" y="69" width="0.2049%" height="15" fill="rgb(233,223,10)" fg:x="8664" fg:w="46"/><text x="38.8768%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="38.7887%" y="69" width="0.2049%" height="15" fill="rgb(215,21,27)" fg:x="8710" fg:w="46"/><text x="39.0817%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="38.9935%" y="69" width="0.2984%" height="15" fill="rgb(232,23,21)" fg:x="8756" fg:w="67"/><text x="39.2865%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="39.2919%" y="69" width="0.0980%" height="15" fill="rgb(244,5,23)" fg:x="8823" fg:w="22"/><text x="39.5849%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="39.3899%" y="69" width="0.3652%" height="15" fill="rgb(226,81,46)" fg:x="8845" fg:w="82"/><text x="39.6829%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="39.7551%" y="69" width="0.0980%" height="15" fill="rgb(247,70,30)" fg:x="8927" fg:w="22"/><text x="40.0480%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="39.8530%" y="69" width="0.3652%" height="15" fill="rgb(212,68,19)" fg:x="8949" fg:w="82"/><text x="40.1460%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.2182%" y="69" width="0.0980%" height="15" fill="rgb(240,187,13)" fg:x="9031" fg:w="22"/><text x="40.5112%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.3162%" y="69" width="0.3652%" height="15" fill="rgb(223,113,26)" fg:x="9053" fg:w="82"/><text x="40.6092%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.6814%" y="69" width="0.0980%" height="15" fill="rgb(206,192,2)" fg:x="9135" fg:w="22"/><text x="40.9743%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.7793%" y="69" width="0.3652%" height="15" fill="rgb(241,108,4)" fg:x="9157" fg:w="82"/><text x="41.0723%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.1445%" y="69" width="0.0980%" height="15" fill="rgb(247,173,49)" fg:x="9239" fg:w="22"/><text x="41.4375%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="41.2425%" y="69" width="0.3652%" height="15" fill="rgb(224,114,35)" fg:x="9261" fg:w="82"/><text x="41.5355%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.6077%" y="69" width="0.0980%" height="15" fill="rgb(245,159,27)" fg:x="9343" fg:w="22"/><text x="41.9006%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="41.7056%" y="69" width="0.8818%" height="15" fill="rgb(245,172,44)" fg:x="9365" fg:w="198"/><text x="41.9986%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="42.5874%" y="69" width="0.2672%" height="15" fill="rgb(236,23,11)" fg:x="9563" fg:w="60"/><text x="42.8804%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="42.8546%" y="69" width="0.0980%" height="15" fill="rgb(205,117,38)" fg:x="9623" fg:w="22"/><text x="43.1476%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="42.9526%" y="53" width="0.2049%" height="15" fill="rgb(237,72,25)" fg:x="9645" fg:w="46"/><text x="43.2455%" y="63.50"></text></g><g><title>utf8_validate (277 instructions, 1.23%)</title><rect x="43.1574%" y="53" width="1.2336%" height="15" fill="rgb(244,70,9)" fg:x="9691" fg:w="277"/><text x="43.4504%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="44.3910%" y="37" width="0.1336%" height="15" fill="rgb(217,125,39)" fg:x="9968" fg:w="30"/><text x="44.6840%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="44.3910%" y="53" width="0.1648%" height="15" fill="rgb(235,36,10)" fg:x="9968" fg:w="37"/><text x="44.6840%" y="63.50"></text></g><g><title>memcpy (320 instructions, 1.43%)</title><rect x="44.5558%" y="53" width="1.4251%" height="15" fill="rgb(251,123,47)" fg:x="10005" fg:w="320"/><text x="44.8487%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (722 instructions, 3.22%)</title><rect x="42.9526%" y="69" width="3.2153%" height="15" fill="rgb(221,13,13)" fg:x="9645" fg:w="722"/><text x="43.2455%" y="79.50">@d..</text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="46.1679%" y="69" width="0.0178%" height="15" fill="rgb(238,131,9)" fg:x="10367" fg:w="4"/><text x="46.4609%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="46.1857%" y="53" width="0.0980%" height="15" fill="rgb(211,50,8)" fg:x="10371" fg:w="22"/><text x="46.4787%" y="63.50"></text></g><g><title>to_2_tuple (37 instructions, 0.16%)</title><rect x="46.1857%" y="69" width="0.1648%" height="15" fill="rgb(245,182,24)" fg:x="10371" fg:w="37"/><text x="46.4787%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="46.3505%" y="69" width="0.2672%" height="15" fill="rgb(242,14,37)" fg:x="10408" fg:w="60"/><text x="46.6434%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="46.6177%" y="69" width="0.2049%" height="15" fill="rgb(246,228,12)" fg:x="10468" fg:w="46"/><text x="46.9106%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="46.8225%" y="53" width="0.2049%" height="15" fill="rgb(213,55,15)" fg:x="10514" fg:w="46"/><text x="47.1155%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="46.8225%" y="69" width="0.3251%" height="15" fill="rgb(209,9,3)" fg:x="10514" fg:w="73"/><text x="47.1155%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="47.1476%" y="69" width="0.2672%" height="15" fill="rgb(230,59,30)" fg:x="10587" fg:w="60"/><text x="47.4406%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="47.4148%" y="53" width="0.2049%" height="15" fill="rgb(209,121,21)" fg:x="10647" fg:w="46"/><text x="47.7078%" y="63.50"></text></g><g><title>utf8_validate (149 instructions, 0.66%)</title><rect x="47.6197%" y="53" width="0.6635%" height="15" fill="rgb(220,109,13)" fg:x="10693" fg:w="149"/><text x="47.9127%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="48.2832%" y="37" width="0.1336%" height="15" fill="rgb(232,18,1)" fg:x="10842" fg:w="30"/><text x="48.5762%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="48.2832%" y="53" width="0.1648%" height="15" fill="rgb(215,41,42)" fg:x="10842" fg:w="37"/><text x="48.5762%" y="63.50"></text></g><g><title>memcpy (102 instructions, 0.45%)</title><rect x="48.4480%" y="53" width="0.4542%" height="15" fill="rgb(224,123,36)" fg:x="10879" fg:w="102"/><text x="48.7410%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (376 instructions, 1.67%)</title><rect x="47.4148%" y="69" width="1.6745%" height="15" fill="rgb(240,125,3)" fg:x="10647" fg:w="376"/><text x="47.7078%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="49.0893%" y="53" width="0.2049%" height="15" fill="rgb(205,98,50)" fg:x="11023" fg:w="46"/><text x="49.3823%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="49.0893%" y="69" width="0.3251%" height="15" fill="rgb(205,185,37)" fg:x="11023" fg:w="73"/><text x="49.3823%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="49.4144%" y="69" width="0.2672%" height="15" fill="rgb(238,207,15)" fg:x="11096" fg:w="60"/><text x="49.7074%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="49.6816%" y="69" width="0.2672%" height="15" fill="rgb(213,199,42)" fg:x="11156" fg:w="60"/><text x="49.9746%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="49.9488%" y="69" width="0.2049%" height="15" fill="rgb(235,201,11)" fg:x="11216" fg:w="46"/><text x="50.2418%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="50.1536%" y="69" width="0.2049%" height="15" fill="rgb(207,46,11)" fg:x="11262" fg:w="46"/><text x="50.4466%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="50.3585%" y="69" width="0.2984%" height="15" fill="rgb(241,35,35)" fg:x="11308" fg:w="67"/><text x="50.6515%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="50.6569%" y="69" width="0.0980%" height="15" fill="rgb(243,32,47)" fg:x="11375" fg:w="22"/><text x="50.9498%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="50.7548%" y="69" width="0.3652%" height="15" fill="rgb(247,202,23)" fg:x="11397" fg:w="82"/><text x="51.0478%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.1200%" y="69" width="0.0980%" height="15" fill="rgb(219,102,11)" fg:x="11479" fg:w="22"/><text x="51.4130%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.2180%" y="69" width="0.3652%" height="15" fill="rgb(243,110,44)" fg:x="11501" fg:w="82"/><text x="51.5110%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.5832%" y="69" width="0.0980%" height="15" fill="rgb(222,74,54)" fg:x="11583" fg:w="22"/><text x="51.8761%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.6811%" y="69" width="0.3652%" height="15" fill="rgb(216,99,12)" fg:x="11605" fg:w="82"/><text x="51.9741%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.0463%" y="69" width="0.0980%" height="15" fill="rgb(226,22,26)" fg:x="11687" fg:w="22"/><text x="52.3393%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.1443%" y="69" width="0.3652%" height="15" fill="rgb(217,163,10)" fg:x="11709" fg:w="82"/><text x="52.4373%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.5095%" y="69" width="0.0980%" height="15" fill="rgb(213,25,53)" fg:x="11791" fg:w="22"/><text x="52.8024%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.6074%" y="69" width="0.3652%" height="15" fill="rgb(252,105,26)" fg:x="11813" fg:w="82"/><text x="52.9004%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.9726%" y="69" width="0.0980%" height="15" fill="rgb(220,39,43)" fg:x="11895" fg:w="22"/><text x="53.2656%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="53.0706%" y="69" width="0.8818%" height="15" fill="rgb(229,68,48)" fg:x="11917" fg:w="198"/><text x="53.3636%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="53.9523%" y="69" width="0.2672%" height="15" fill="rgb(252,8,32)" fg:x="12115" fg:w="60"/><text x="54.2453%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="54.2196%" y="69" width="0.0980%" height="15" fill="rgb(223,20,43)" fg:x="12175" fg:w="22"/><text x="54.5125%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="54.3175%" y="53" width="0.2049%" height="15" fill="rgb(229,81,49)" fg:x="12197" fg:w="46"/><text x="54.6105%" y="63.50"></text></g><g><title>utf8_validate (163 instructions, 0.73%)</title><rect x="54.5224%" y="53" width="0.7259%" height="15" fill="rgb(236,28,36)" fg:x="12243" fg:w="163"/><text x="54.8153%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="55.2483%" y="37" width="0.1336%" height="15" fill="rgb(249,185,26)" fg:x="12406" fg:w="30"/><text x="55.5412%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="55.2483%" y="53" width="0.1648%" height="15" fill="rgb(249,174,33)" fg:x="12406" fg:w="37"/><text x="55.5412%" y="63.50"></text></g><g><title>memcpy (79 instructions, 0.35%)</title><rect x="55.4130%" y="53" width="0.3518%" height="15" fill="rgb(233,201,37)" fg:x="12443" fg:w="79"/><text x="55.7060%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (367 instructions, 1.63%)</title><rect x="54.3175%" y="69" width="1.6344%" height="15" fill="rgb(221,78,26)" fg:x="12197" fg:w="367"/><text x="54.6105%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="55.9519%" y="69" width="0.0178%" height="15" fill="rgb(250,127,30)" fg:x="12564" fg:w="4"/><text x="56.2449%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="55.9697%" y="53" width="0.0980%" height="15" fill="rgb(230,49,44)" fg:x="12568" fg:w="22"/><text x="56.2627%" y="63.50"></text></g><g><title>to_2_tuple (37 instructions, 0.16%)</title><rect x="55.9697%" y="69" width="0.1648%" height="15" fill="rgb(229,67,23)" fg:x="12568" fg:w="37"/><text x="56.2627%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="56.1345%" y="69" width="0.2672%" height="15" fill="rgb(249,83,47)" fg:x="12605" fg:w="60"/><text x="56.4275%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="56.4017%" y="69" width="0.2049%" height="15" fill="rgb(215,43,3)" fg:x="12665" fg:w="46"/><text x="56.6947%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="56.6065%" y="53" width="0.2049%" height="15" fill="rgb(238,154,13)" fg:x="12711" fg:w="46"/><text x="56.8995%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="56.6065%" y="69" width="0.3251%" height="15" fill="rgb(219,56,2)" fg:x="12711" fg:w="73"/><text x="56.8995%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="56.9316%" y="69" width="0.2672%" height="15" fill="rgb(233,0,4)" fg:x="12784" fg:w="60"/><text x="57.2246%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="57.1988%" y="53" width="0.2049%" height="15" fill="rgb(235,30,7)" fg:x="12844" fg:w="46"/><text x="57.4918%" y="63.50"></text></g><g><title>utf8_validate (187 instructions, 0.83%)</title><rect x="57.4037%" y="53" width="0.8328%" height="15" fill="rgb(250,79,13)" fg:x="12890" fg:w="187"/><text x="57.6967%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="58.2365%" y="37" width="0.1336%" height="15" fill="rgb(211,146,34)" fg:x="13077" fg:w="30"/><text x="58.5294%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="58.2365%" y="53" width="0.1648%" height="15" fill="rgb(228,22,38)" fg:x="13077" fg:w="37"/><text x="58.5294%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="58.4012%" y="53" width="0.6279%" height="15" fill="rgb(235,168,5)" fg:x="13114" fg:w="141"/><text x="58.6942%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (453 instructions, 2.02%)</title><rect x="57.1988%" y="69" width="2.0174%" height="15" fill="rgb(221,155,16)" fg:x="12844" fg:w="453"/><text x="57.4918%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="59.2162%" y="53" width="0.2049%" height="15" fill="rgb(215,215,53)" fg:x="13297" fg:w="46"/><text x="59.5092%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="59.2162%" y="69" width="0.3251%" height="15" fill="rgb(223,4,10)" fg:x="13297" fg:w="73"/><text x="59.5092%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="59.5413%" y="69" width="0.2672%" height="15" fill="rgb(234,103,6)" fg:x="13370" fg:w="60"/><text x="59.8343%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="59.8085%" y="69" width="0.2672%" height="15" fill="rgb(227,97,0)" fg:x="13430" fg:w="60"/><text x="60.1015%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="60.0757%" y="69" width="0.2049%" height="15" fill="rgb(234,150,53)" fg:x="13490" fg:w="46"/><text x="60.3687%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="60.2806%" y="69" width="0.2049%" height="15" fill="rgb(228,201,54)" fg:x="13536" fg:w="46"/><text x="60.5735%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="60.4854%" y="69" width="0.2984%" height="15" fill="rgb(222,22,37)" fg:x="13582" fg:w="67"/><text x="60.7784%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="60.7838%" y="69" width="0.0980%" height="15" fill="rgb(237,53,32)" fg:x="13649" fg:w="22"/><text x="61.0768%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="60.8818%" y="69" width="0.3652%" height="15" fill="rgb(233,25,53)" fg:x="13671" fg:w="82"/><text x="61.1747%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.2469%" y="69" width="0.0980%" height="15" fill="rgb(210,40,34)" fg:x="13753" fg:w="22"/><text x="61.5399%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.3449%" y="69" width="0.3652%" height="15" fill="rgb(241,220,44)" fg:x="13775" fg:w="82"/><text x="61.6379%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.7101%" y="69" width="0.0980%" height="15" fill="rgb(235,28,35)" fg:x="13857" fg:w="22"/><text x="62.0031%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.8081%" y="69" width="0.3652%" height="15" fill="rgb(210,56,17)" fg:x="13879" fg:w="82"/><text x="62.1010%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.1732%" y="69" width="0.0980%" height="15" fill="rgb(224,130,29)" fg:x="13961" fg:w="22"/><text x="62.4662%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.2712%" y="69" width="0.3652%" height="15" fill="rgb(235,212,8)" fg:x="13983" fg:w="82"/><text x="62.5642%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.6364%" y="69" width="0.0980%" height="15" fill="rgb(223,33,50)" fg:x="14065" fg:w="22"/><text x="62.9294%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.7344%" y="69" width="0.3652%" height="15" fill="rgb(219,149,13)" fg:x="14087" fg:w="82"/><text x="63.0273%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="63.0995%" y="69" width="0.0980%" height="15" fill="rgb(250,156,29)" fg:x="14169" fg:w="22"/><text x="63.3925%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="63.1975%" y="69" width="0.8818%" height="15" fill="rgb(216,193,19)" fg:x="14191" fg:w="198"/><text x="63.4905%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="64.0793%" y="69" width="0.2672%" height="15" fill="rgb(216,135,14)" fg:x="14389" fg:w="60"/><text x="64.3722%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="64.3465%" y="69" width="0.0980%" height="15" fill="rgb(241,47,5)" fg:x="14449" fg:w="22"/><text x="64.6394%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="64.4444%" y="53" width="0.2049%" height="15" fill="rgb(233,42,35)" fg:x="14471" fg:w="46"/><text x="64.7374%" y="63.50"></text></g><g><title>utf8_validate (159 instructions, 0.71%)</title><rect x="64.6493%" y="53" width="0.7081%" height="15" fill="rgb(231,13,6)" fg:x="14517" fg:w="159"/><text x="64.9423%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="65.3574%" y="37" width="0.1336%" height="15" fill="rgb(207,181,40)" fg:x="14676" fg:w="30"/><text x="65.6504%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="65.3574%" y="53" width="0.1648%" height="15" fill="rgb(254,173,49)" fg:x="14676" fg:w="37"/><text x="65.6504%" y="63.50"></text></g><g><title>memcpy (110 instructions, 0.49%)</title><rect x="65.5222%" y="53" width="0.4899%" height="15" fill="rgb(221,1,38)" fg:x="14713" fg:w="110"/><text x="65.8151%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (394 instructions, 1.75%)</title><rect x="64.4444%" y="69" width="1.7546%" height="15" fill="rgb(206,124,46)" fg:x="14471" fg:w="394"/><text x="64.7374%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="66.1991%" y="69" width="0.0178%" height="15" fill="rgb(249,21,11)" fg:x="14865" fg:w="4"/><text x="66.4920%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="66.2169%" y="53" width="0.0980%" height="15" fill="rgb(222,201,40)" fg:x="14869" fg:w="22"/><text x="66.5098%" y="63.50"></text></g><g><title>to_2_tuple (37 instructions, 0.16%)</title><rect x="66.2169%" y="69" width="0.1648%" height="15" fill="rgb(235,61,29)" fg:x="14869" fg:w="37"/><text x="66.5098%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="66.3817%" y="69" width="0.2672%" height="15" fill="rgb(219,207,3)" fg:x="14906" fg:w="60"/><text x="66.6746%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="66.6489%" y="69" width="0.2049%" height="15" fill="rgb(222,56,46)" fg:x="14966" fg:w="46"/><text x="66.9418%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="66.8537%" y="53" width="0.2049%" height="15" fill="rgb(239,76,54)" fg:x="15012" fg:w="46"/><text x="67.1467%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="66.8537%" y="69" width="0.3251%" height="15" fill="rgb(231,124,27)" fg:x="15012" fg:w="73"/><text x="67.1467%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="67.1788%" y="69" width="0.2672%" height="15" fill="rgb(249,195,6)" fg:x="15085" fg:w="60"/><text x="67.4718%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="67.4460%" y="53" width="0.2049%" height="15" fill="rgb(237,174,47)" fg:x="15145" fg:w="46"/><text x="67.7390%" y="63.50"></text></g><g><title>utf8_validate (197 instructions, 0.88%)</title><rect x="67.6509%" y="53" width="0.8773%" height="15" fill="rgb(206,201,31)" fg:x="15191" fg:w="197"/><text x="67.9438%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="68.5282%" y="37" width="0.1336%" height="15" fill="rgb(231,57,52)" fg:x="15388" fg:w="30"/><text x="68.8211%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (37 instructions, 0.16%)</title><rect x="68.5282%" y="53" width="0.1648%" height="15" fill="rgb(248,177,22)" fg:x="15388" fg:w="37"/><text x="68.8211%" y="63.50"></text></g><g><title>memcpy (145 instructions, 0.65%)</title><rect x="68.6929%" y="53" width="0.6457%" height="15" fill="rgb(215,211,37)" fg:x="15425" fg:w="145"/><text x="68.9859%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (467 instructions, 2.08%)</title><rect x="67.4460%" y="69" width="2.0797%" height="15" fill="rgb(241,128,51)" fg:x="15145" fg:w="467"/><text x="67.7390%" y="79.50">@..</text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="69.5257%" y="53" width="0.2049%" height="15" fill="rgb(227,165,31)" fg:x="15612" fg:w="46"/><text x="69.8187%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="69.5257%" y="69" width="0.3251%" height="15" fill="rgb(228,167,24)" fg:x="15612" fg:w="73"/><text x="69.8187%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="69.8508%" y="69" width="0.2672%" height="15" fill="rgb(228,143,12)" fg:x="15685" fg:w="60"/><text x="70.1438%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="70.1180%" y="69" width="0.2672%" height="15" fill="rgb(249,149,8)" fg:x="15745" fg:w="60"/><text x="70.4110%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="70.3852%" y="69" width="0.2049%" height="15" fill="rgb(243,35,44)" fg:x="15805" fg:w="46"/><text x="70.6782%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="70.5901%" y="69" width="0.2049%" height="15" fill="rgb(246,89,9)" fg:x="15851" fg:w="46"/><text x="70.8830%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="70.7949%" y="69" width="0.2984%" height="15" fill="rgb(233,213,13)" fg:x="15897" fg:w="67"/><text x="71.0879%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.0933%" y="69" width="0.0980%" height="15" fill="rgb(233,141,41)" fg:x="15964" fg:w="22"/><text x="71.3863%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="71.1913%" y="69" width="0.3652%" height="15" fill="rgb(239,167,4)" fg:x="15986" fg:w="82"/><text x="71.4842%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.5564%" y="69" width="0.0980%" height="15" fill="rgb(209,217,16)" fg:x="16068" fg:w="22"/><text x="71.8494%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="71.6544%" y="69" width="0.8818%" height="15" fill="rgb(219,88,35)" fg:x="16090" fg:w="198"/><text x="71.9474%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="72.5362%" y="69" width="0.2672%" height="15" fill="rgb(220,193,23)" fg:x="16288" fg:w="60"/><text x="72.8292%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="72.8034%" y="69" width="0.0980%" height="15" fill="rgb(230,90,52)" fg:x="16348" fg:w="22"/><text x="73.0964%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="72.9014%" y="69" width="0.0178%" height="15" fill="rgb(252,106,19)" fg:x="16370" fg:w="4"/><text x="73.1943%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="72.9192%" y="53" width="0.0980%" height="15" fill="rgb(206,74,20)" fg:x="16374" fg:w="22"/><text x="73.2121%" y="63.50"></text></g><g><title>to_2_tuple (37 instructions, 0.16%)</title><rect x="72.9192%" y="69" width="0.1648%" height="15" fill="rgb(230,138,44)" fg:x="16374" fg:w="37"/><text x="73.2121%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="73.0839%" y="53" width="0.8818%" height="15" fill="rgb(235,182,43)" fg:x="16411" fg:w="198"/><text x="73.3769%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.00%)</title><rect x="73.0839%" y="69" width="1.0020%" height="15" fill="rgb(242,16,51)" fg:x="16411" fg:w="225"/><text x="73.3769%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.0859%" y="69" width="0.2672%" height="15" fill="rgb(248,9,4)" fg:x="16636" fg:w="60"/><text x="74.3789%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.3532%" y="69" width="0.2672%" height="15" fill="rgb(210,31,22)" fg:x="16696" fg:w="60"/><text x="74.6461%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="74.6204%" y="69" width="0.2049%" height="15" fill="rgb(239,54,39)" fg:x="16756" fg:w="46"/><text x="74.9133%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.20%)</title><rect x="74.8252%" y="69" width="0.2049%" height="15" fill="rgb(230,99,41)" fg:x="16802" fg:w="46"/><text x="75.1182%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="75.0301%" y="69" width="0.2984%" height="15" fill="rgb(253,106,12)" fg:x="16848" fg:w="67"/><text x="75.3230%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="75.3284%" y="69" width="0.0980%" height="15" fill="rgb(213,46,41)" fg:x="16915" fg:w="22"/><text x="75.6214%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.88%)</title><rect x="75.4264%" y="69" width="0.8818%" height="15" fill="rgb(215,133,35)" fg:x="16937" fg:w="198"/><text x="75.7194%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="76.3082%" y="69" width="0.2672%" height="15" fill="rgb(213,28,5)" fg:x="17135" fg:w="60"/><text x="76.6011%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="76.5754%" y="69" width="0.0980%" height="15" fill="rgb(215,77,49)" fg:x="17195" fg:w="22"/><text x="76.8683%" y="79.50"></text></g><g><title>@deserialize_go&lt;u&gt; (20 instructions, 0.09%)</title><rect x="76.6733%" y="69" width="0.0891%" height="15" fill="rgb(248,100,22)" fg:x="17217" fg:w="20"/><text x="76.9663%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="76.7624%" y="69" width="0.0178%" height="15" fill="rgb(208,67,9)" fg:x="17237" fg:w="4"/><text x="77.0554%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (13,317 instructions, 59.31%)</title><rect x="28.4436%" y="85" width="59.3053%" height="15" fill="rgb(219,133,21)" fg:x="6387" fg:w="13317"/><text x="28.7365%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Con..</text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="87.7488%" y="85" width="0.0980%" height="15" fill="rgb(246,46,29)" fg:x="19704" fg:w="22"/><text x="88.0418%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="87.8468%" y="69" width="0.1336%" height="15" fill="rgb(246,185,52)" fg:x="19726" fg:w="30"/><text x="88.1398%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="87.9804%" y="69" width="0.0980%" height="15" fill="rgb(252,136,11)" fg:x="19756" fg:w="22"/><text x="88.2734%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="88.0784%" y="69" width="0.0713%" height="15" fill="rgb(219,138,53)" fg:x="19778" fg:w="16"/><text x="88.3713%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="88.1496%" y="69" width="0.0980%" height="15" fill="rgb(211,51,23)" fg:x="19794" fg:w="22"/><text x="88.4426%" y="79.50"></text></g><g><title>opt_project (14 instructions, 0.06%)</title><rect x="88.2476%" y="53" width="0.0623%" height="15" fill="rgb(247,221,28)" fg:x="19816" fg:w="14"/><text x="88.5406%" y="63.50"></text></g><g><title>Blob.compare_eq (679 instructions, 3.02%)</title><rect x="88.3100%" y="37" width="3.0238%" height="15" fill="rgb(251,222,45)" fg:x="19830" fg:w="679"/><text x="88.6029%" y="47.50">Bl..</text></g><g><title>anon-func-151.35 (683 instructions, 3.04%)</title><rect x="88.3100%" y="53" width="3.0416%" height="15" fill="rgb(217,162,53)" fg:x="19830" fg:w="683"/><text x="88.6029%" y="63.50">an..</text></g><g><title>some (727 instructions, 3.24%)</title><rect x="88.2476%" y="69" width="3.2376%" height="15" fill="rgb(229,93,14)" fg:x="19816" fg:w="727"/><text x="88.5406%" y="79.50">so..</text></g><g><title>rec (9 instructions, 0.04%)</title><rect x="91.4852%" y="69" width="0.0401%" height="15" fill="rgb(209,67,49)" fg:x="20543" fg:w="9"/><text x="91.7782%" y="79.50"></text></g><g><title>Nat-&gt;Nat64 (13 instructions, 0.06%)</title><rect x="91.5253%" y="69" width="0.0579%" height="15" fill="rgb(213,87,29)" fg:x="20552" fg:w="13"/><text x="91.8182%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="91.5832%" y="69" width="0.0980%" height="15" fill="rgb(205,151,52)" fg:x="20565" fg:w="22"/><text x="91.8761%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="91.6811%" y="69" width="0.0579%" height="15" fill="rgb(253,215,39)" fg:x="20587" fg:w="13"/><text x="91.9741%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="91.7390%" y="53" width="0.0980%" height="15" fill="rgb(221,220,41)" fg:x="20600" fg:w="22"/><text x="92.0320%" y="63.50"></text></g><g><title>to_2_tuple (37 instructions, 0.16%)</title><rect x="91.7390%" y="69" width="0.1648%" height="15" fill="rgb(218,133,21)" fg:x="20600" fg:w="37"/><text x="92.0320%" y="79.50"></text></g><g><title>opt_inject (14 instructions, 0.06%)</title><rect x="91.9038%" y="69" width="0.0623%" height="15" fill="rgb(221,193,43)" fg:x="20637" fg:w="14"/><text x="92.1968%" y="79.50"></text></g><g><title>B_add (24 instructions, 0.11%)</title><rect x="91.9662%" y="69" width="0.1069%" height="15" fill="rgb(240,128,52)" fg:x="20651" fg:w="24"/><text x="92.2591%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="92.0730%" y="69" width="0.0980%" height="15" fill="rgb(253,114,12)" fg:x="20675" fg:w="22"/><text x="92.3660%" y="79.50"></text></g><g><title>alloc_words (22 instructions, 0.10%)</title><rect x="92.1710%" y="69" width="0.0980%" height="15" fill="rgb(215,223,47)" fg:x="20697" fg:w="22"/><text x="92.4640%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="92.2690%" y="69" width="0.0579%" height="15" fill="rgb(248,225,23)" fg:x="20719" fg:w="13"/><text x="92.5620%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="92.3269%" y="53" width="0.0713%" height="15" fill="rgb(250,108,0)" fg:x="20732" fg:w="16"/><text x="92.6198%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.12%)</title><rect x="92.3981%" y="53" width="0.1158%" height="15" fill="rgb(228,208,7)" fg:x="20748" fg:w="26"/><text x="92.6911%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="92.5139%" y="53" width="0.1336%" height="15" fill="rgb(244,45,10)" fg:x="20774" fg:w="30"/><text x="92.8069%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="92.6475%" y="53" width="0.1336%" height="15" fill="rgb(207,125,25)" fg:x="20804" fg:w="30"/><text x="92.9405%" y="63.50"></text></g><g><title>memcpy (130 instructions, 0.58%)</title><rect x="92.7811%" y="53" width="0.5789%" height="15" fill="rgb(210,195,18)" fg:x="20834" fg:w="130"/><text x="93.0741%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.13%)</title><rect x="93.3601%" y="53" width="0.1336%" height="15" fill="rgb(249,80,12)" fg:x="20964" fg:w="30"/><text x="93.6530%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.4937%" y="53" width="0.0401%" height="15" fill="rgb(221,65,9)" fg:x="20994" fg:w="9"/><text x="93.7866%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="93.5337%" y="53" width="0.0713%" height="15" fill="rgb(235,49,36)" fg:x="21003" fg:w="16"/><text x="93.8267%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.6050%" y="37" width="0.0401%" height="15" fill="rgb(225,32,20)" fg:x="21019" fg:w="9"/><text x="93.8980%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.14%)</title><rect x="93.6050%" y="53" width="0.1425%" height="15" fill="rgb(215,141,46)" fg:x="21019" fg:w="32"/><text x="93.8980%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="93.7475%" y="53" width="0.1336%" height="15" fill="rgb(250,160,47)" fg:x="21051" fg:w="30"/><text x="94.0405%" y="63.50"></text></g><g><title>reply_with_data (90 instructions, 0.40%)</title><rect x="93.8811%" y="53" width="0.4008%" height="15" fill="rgb(216,222,40)" fg:x="21081" fg:w="90"/><text x="94.1741%" y="63.50"></text></g><g><title>$lambda.37 (595 instructions, 2.65%)</title><rect x="92.3269%" y="69" width="2.6497%" height="15" fill="rgb(234,217,39)" fg:x="20732" fg:w="595"/><text x="92.6198%" y="79.50">$..</text></g><g><title>$lambda.1 (1,731 instructions, 7.71%)</title><rect x="87.8468%" y="85" width="7.7088%" height="15" fill="rgb(207,178,40)" fg:x="19726" fg:w="1731"/><text x="88.1398%" y="95.50">$lambda.1</text></g><g><title>schedule_copying_gc (43 instructions, 0.19%)</title><rect x="95.5556%" y="85" width="0.1915%" height="15" fill="rgb(221,136,13)" fg:x="21457" fg:w="43"/><text x="95.8485%" y="95.50"></text></g><g><title>trans_state4 (13 instructions, 0.06%)</title><rect x="95.7470%" y="85" width="0.0579%" height="15" fill="rgb(249,199,10)" fg:x="21500" fg:w="13"/><text x="96.0400%" y="95.50"></text></g><g><title>all (22,455 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="22455"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (22,455 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="22455"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>