<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="22357"><g><title>trans_state5 (8 instructions, 0.04%)</title><rect x="0.0000%" y="85" width="0.0358%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="0.0358%" y="85" width="0.1476%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="33"/><text x="0.3288%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="0.1834%" y="69" width="0.2058%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="46"/><text x="0.4764%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="0.3891%" y="69" width="0.1476%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="33"/><text x="0.6821%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.5367%" y="69" width="0.2684%" height="15" fill="rgb(208,68,35)" fg:x="120" fg:w="60"/><text x="0.8297%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.8051%" y="69" width="0.2684%" height="15" fill="rgb(232,128,0)" fg:x="180" fg:w="60"/><text x="1.0981%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="1.0735%" y="69" width="0.0403%" height="15" fill="rgb(207,160,47)" fg:x="240" fg:w="9"/><text x="1.3665%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="1.1137%" y="69" width="0.2684%" height="15" fill="rgb(228,23,34)" fg:x="249" fg:w="60"/><text x="1.4067%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="1.3821%" y="69" width="0.2058%" height="15" fill="rgb(218,30,26)" fg:x="309" fg:w="46"/><text x="1.6751%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="1.5879%" y="69" width="0.8856%" height="15" fill="rgb(220,122,19)" fg:x="355" fg:w="198"/><text x="1.8808%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="2.4735%" y="69" width="0.2684%" height="15" fill="rgb(250,228,42)" fg:x="553" fg:w="60"/><text x="2.7665%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="2.7419%" y="69" width="0.0403%" height="15" fill="rgb(240,193,28)" fg:x="613" fg:w="9"/><text x="3.0348%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="2.7821%" y="69" width="0.8856%" height="15" fill="rgb(216,20,37)" fg:x="622" fg:w="198"/><text x="3.0751%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="3.6678%" y="69" width="0.2684%" height="15" fill="rgb(206,188,39)" fg:x="820" fg:w="60"/><text x="3.9607%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="3.9361%" y="69" width="0.0403%" height="15" fill="rgb(217,207,13)" fg:x="880" fg:w="9"/><text x="4.2291%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="3.9764%" y="69" width="0.8856%" height="15" fill="rgb(231,73,38)" fg:x="889" fg:w="198"/><text x="4.2694%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="4.8620%" y="69" width="0.2684%" height="15" fill="rgb(225,20,46)" fg:x="1087" fg:w="60"/><text x="5.1550%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="5.1304%" y="69" width="0.0403%" height="15" fill="rgb(210,31,41)" fg:x="1147" fg:w="9"/><text x="5.4234%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.1706%" y="69" width="0.2684%" height="15" fill="rgb(221,200,47)" fg:x="1156" fg:w="60"/><text x="5.4636%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.4390%" y="69" width="0.2684%" height="15" fill="rgb(226,26,5)" fg:x="1216" fg:w="60"/><text x="5.7320%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="5.7074%" y="69" width="0.0403%" height="15" fill="rgb(249,33,26)" fg:x="1276" fg:w="9"/><text x="6.0004%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.7476%" y="69" width="0.2684%" height="15" fill="rgb(235,183,28)" fg:x="1285" fg:w="60"/><text x="6.0406%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.0160%" y="69" width="0.2684%" height="15" fill="rgb(221,5,38)" fg:x="1345" fg:w="60"/><text x="6.3090%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="6.2844%" y="69" width="0.0403%" height="15" fill="rgb(247,18,42)" fg:x="1405" fg:w="9"/><text x="6.5774%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.3246%" y="69" width="0.2684%" height="15" fill="rgb(241,131,45)" fg:x="1414" fg:w="60"/><text x="6.6176%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="6.5930%" y="69" width="0.2058%" height="15" fill="rgb(249,31,29)" fg:x="1474" fg:w="46"/><text x="6.8860%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="6.7988%" y="69" width="0.2058%" height="15" fill="rgb(225,111,53)" fg:x="1520" fg:w="46"/><text x="7.0917%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.0045%" y="69" width="0.2684%" height="15" fill="rgb(238,160,17)" fg:x="1566" fg:w="60"/><text x="7.2975%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="7.2729%" y="69" width="0.0403%" height="15" fill="rgb(214,148,48)" fg:x="1626" fg:w="9"/><text x="7.5659%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="7.3131%" y="69" width="0.2058%" height="15" fill="rgb(232,36,49)" fg:x="1635" fg:w="46"/><text x="7.6061%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.5189%" y="69" width="0.2684%" height="15" fill="rgb(209,103,24)" fg:x="1681" fg:w="60"/><text x="7.8119%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="7.7873%" y="69" width="0.0403%" height="15" fill="rgb(229,88,8)" fg:x="1741" fg:w="9"/><text x="8.0802%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.8275%" y="69" width="0.2684%" height="15" fill="rgb(213,181,19)" fg:x="1750" fg:w="60"/><text x="8.1205%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="8.0959%" y="69" width="0.2058%" height="15" fill="rgb(254,191,54)" fg:x="1810" fg:w="46"/><text x="8.3889%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.72%)</title><rect x="8.3017%" y="69" width="0.7157%" height="15" fill="rgb(241,83,37)" fg:x="1856" fg:w="160"/><text x="8.5946%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="9.0173%" y="69" width="0.2684%" height="15" fill="rgb(233,36,39)" fg:x="2016" fg:w="60"/><text x="9.3103%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="9.2857%" y="69" width="0.0403%" height="15" fill="rgb(226,3,54)" fg:x="2076" fg:w="9"/><text x="9.5787%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="9.3259%" y="69" width="0.8856%" height="15" fill="rgb(245,192,40)" fg:x="2085" fg:w="198"/><text x="9.6189%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="10.2116%" y="69" width="0.2684%" height="15" fill="rgb(238,167,29)" fg:x="2283" fg:w="60"/><text x="10.5045%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="10.4799%" y="69" width="0.0403%" height="15" fill="rgb(232,182,51)" fg:x="2343" fg:w="9"/><text x="10.7729%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="10.5202%" y="69" width="0.8856%" height="15" fill="rgb(231,60,39)" fg:x="2352" fg:w="198"/><text x="10.8132%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="11.4058%" y="69" width="0.2684%" height="15" fill="rgb(208,69,12)" fg:x="2550" fg:w="60"/><text x="11.6988%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="11.6742%" y="69" width="0.0403%" height="15" fill="rgb(235,93,37)" fg:x="2610" fg:w="9"/><text x="11.9672%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="11.7145%" y="69" width="0.8856%" height="15" fill="rgb(213,116,39)" fg:x="2619" fg:w="198"/><text x="12.0074%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="12.6001%" y="69" width="0.2684%" height="15" fill="rgb(222,207,29)" fg:x="2817" fg:w="60"/><text x="12.8930%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="12.8685%" y="69" width="0.0403%" height="15" fill="rgb(206,96,30)" fg:x="2877" fg:w="9"/><text x="13.1614%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="12.9087%" y="69" width="0.8856%" height="15" fill="rgb(218,138,4)" fg:x="2886" fg:w="198"/><text x="13.2017%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="13.7943%" y="69" width="0.2684%" height="15" fill="rgb(250,191,14)" fg:x="3084" fg:w="60"/><text x="14.0873%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="14.0627%" y="69" width="0.0403%" height="15" fill="rgb(239,60,40)" fg:x="3144" fg:w="9"/><text x="14.3557%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="14.1030%" y="69" width="0.8856%" height="15" fill="rgb(206,27,48)" fg:x="3153" fg:w="198"/><text x="14.3959%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="14.9886%" y="69" width="0.2684%" height="15" fill="rgb(225,35,8)" fg:x="3351" fg:w="60"/><text x="15.2816%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="15.2570%" y="69" width="0.0403%" height="15" fill="rgb(250,213,24)" fg:x="3411" fg:w="9"/><text x="15.5499%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="15.2972%" y="69" width="0.8856%" height="15" fill="rgb(247,123,22)" fg:x="3420" fg:w="198"/><text x="15.5902%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="16.1829%" y="69" width="0.2684%" height="15" fill="rgb(231,138,38)" fg:x="3618" fg:w="60"/><text x="16.4758%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="16.4512%" y="69" width="0.0403%" height="15" fill="rgb(231,145,46)" fg:x="3678" fg:w="9"/><text x="16.7442%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="16.4915%" y="69" width="0.2684%" height="15" fill="rgb(251,118,11)" fg:x="3687" fg:w="60"/><text x="16.7844%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="16.7599%" y="69" width="0.2058%" height="15" fill="rgb(217,147,25)" fg:x="3747" fg:w="46"/><text x="17.0528%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.72%)</title><rect x="16.9656%" y="69" width="0.7157%" height="15" fill="rgb(247,81,37)" fg:x="3793" fg:w="160"/><text x="17.2586%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="17.6813%" y="69" width="0.2684%" height="15" fill="rgb(209,12,38)" fg:x="3953" fg:w="60"/><text x="17.9742%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="17.9496%" y="69" width="0.0403%" height="15" fill="rgb(227,1,9)" fg:x="4013" fg:w="9"/><text x="18.2426%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="17.9899%" y="69" width="0.8856%" height="15" fill="rgb(248,47,43)" fg:x="4022" fg:w="198"/><text x="18.2829%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.8755%" y="69" width="0.2684%" height="15" fill="rgb(221,10,30)" fg:x="4220" fg:w="60"/><text x="19.1685%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="19.1439%" y="69" width="0.0403%" height="15" fill="rgb(210,229,1)" fg:x="4280" fg:w="9"/><text x="19.4369%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.1841%" y="69" width="0.2684%" height="15" fill="rgb(222,148,37)" fg:x="4289" fg:w="60"/><text x="19.4771%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.4525%" y="69" width="0.2684%" height="15" fill="rgb(234,67,33)" fg:x="4349" fg:w="60"/><text x="19.7455%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.7209%" y="69" width="0.2684%" height="15" fill="rgb(247,98,35)" fg:x="4409" fg:w="60"/><text x="20.0139%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.9893%" y="69" width="0.2684%" height="15" fill="rgb(247,138,52)" fg:x="4469" fg:w="60"/><text x="20.2822%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.2576%" y="69" width="0.2684%" height="15" fill="rgb(213,79,30)" fg:x="4529" fg:w="60"/><text x="20.5506%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.5260%" y="69" width="0.2684%" height="15" fill="rgb(246,177,23)" fg:x="4589" fg:w="60"/><text x="20.8190%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.7944%" y="69" width="0.2684%" height="15" fill="rgb(230,62,27)" fg:x="4649" fg:w="60"/><text x="21.0874%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="21.0628%" y="69" width="0.2058%" height="15" fill="rgb(216,154,8)" fg:x="4709" fg:w="46"/><text x="21.3557%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="21.2685%" y="69" width="0.2684%" height="15" fill="rgb(244,35,45)" fg:x="4755" fg:w="60"/><text x="21.5615%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (17 instructions, 0.08%)</title><rect x="21.5369%" y="69" width="0.0760%" height="15" fill="rgb(251,115,12)" fg:x="4815" fg:w="17"/><text x="21.8298%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="21.6129%" y="69" width="0.2684%" height="15" fill="rgb(240,54,50)" fg:x="4832" fg:w="60"/><text x="21.9059%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::hb778a94d65f37c57 (9 instructions, 0.04%)</title><rect x="21.8813%" y="69" width="0.0403%" height="15" fill="rgb(233,84,52)" fg:x="4892" fg:w="9"/><text x="22.1743%" y="79.50"></text></g><g><title>parse_idl_header (5,911 instructions, 26.44%)</title><rect x="0.1834%" y="85" width="26.4391%" height="15" fill="rgb(207,117,47)" fg:x="41" fg:w="5911"/><text x="0.4764%" y="95.50">parse_idl_header</text></g><g><title>memset (4 instructions, 0.02%)</title><rect x="26.6225%" y="69" width="0.0179%" height="15" fill="rgb(249,43,39)" fg:x="5952" fg:w="4"/><text x="26.9155%" y="79.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.04%)</title><rect x="26.6225%" y="85" width="0.0358%" height="15" fill="rgb(209,38,44)" fg:x="5952" fg:w="8"/><text x="26.9155%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="26.6583%" y="85" width="0.2058%" height="15" fill="rgb(236,212,23)" fg:x="5960" fg:w="46"/><text x="26.9513%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="26.8641%" y="85" width="0.2684%" height="15" fill="rgb(242,79,21)" fg:x="6006" fg:w="60"/><text x="27.1570%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="27.1324%" y="69" width="0.2058%" height="15" fill="rgb(211,96,35)" fg:x="6066" fg:w="46"/><text x="27.4254%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="27.3382%" y="69" width="0.1476%" height="15" fill="rgb(253,215,40)" fg:x="6112" fg:w="33"/><text x="27.6312%" y="79.50"></text></g><g><title>memcpy (154 instructions, 0.69%)</title><rect x="27.4858%" y="69" width="0.6888%" height="15" fill="rgb(211,81,21)" fg:x="6145" fg:w="154"/><text x="27.7788%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (308 instructions, 1.38%)</title><rect x="27.1324%" y="85" width="1.3776%" height="15" fill="rgb(208,190,38)" fg:x="6066" fg:w="308"/><text x="27.4254%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.5101%" y="85" width="0.2684%" height="15" fill="rgb(235,213,38)" fg:x="6374" fg:w="60"/><text x="28.8031%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.7785%" y="69" width="0.2684%" height="15" fill="rgb(237,122,38)" fg:x="6434" fg:w="60"/><text x="29.0714%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="29.0468%" y="69" width="0.2684%" height="15" fill="rgb(244,218,35)" fg:x="6494" fg:w="60"/><text x="29.3398%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="29.3152%" y="69" width="0.2058%" height="15" fill="rgb(240,68,47)" fg:x="6554" fg:w="46"/><text x="29.6082%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::h0ec8051fccd2ba6b (36 instructions, 0.16%)</title><rect x="29.5210%" y="69" width="0.1610%" height="15" fill="rgb(210,16,53)" fg:x="6600" fg:w="36"/><text x="29.8139%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="29.6820%" y="69" width="0.2684%" height="15" fill="rgb(235,124,12)" fg:x="6636" fg:w="60"/><text x="29.9749%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="29.9504%" y="69" width="0.2058%" height="15" fill="rgb(224,169,11)" fg:x="6696" fg:w="46"/><text x="30.2433%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="30.1561%" y="69" width="0.0671%" height="15" fill="rgb(250,166,2)" fg:x="6742" fg:w="15"/><text x="30.4491%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="30.2232%" y="53" width="0.8856%" height="15" fill="rgb(242,216,29)" fg:x="6757" fg:w="198"/><text x="30.5162%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="30.2232%" y="69" width="1.0064%" height="15" fill="rgb(230,116,27)" fg:x="6757" fg:w="225"/><text x="30.5162%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.2296%" y="69" width="0.2684%" height="15" fill="rgb(228,99,48)" fg:x="6982" fg:w="60"/><text x="31.5226%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.4980%" y="53" width="0.2684%" height="15" fill="rgb(253,11,6)" fg:x="7042" fg:w="60"/><text x="31.7909%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.7663%" y="53" width="0.2684%" height="15" fill="rgb(247,143,39)" fg:x="7102" fg:w="60"/><text x="32.0593%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="32.0347%" y="53" width="0.2058%" height="15" fill="rgb(236,97,10)" fg:x="7162" fg:w="46"/><text x="32.3277%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="32.2405%" y="53" width="0.1476%" height="15" fill="rgb(233,208,19)" fg:x="7208" fg:w="33"/><text x="32.5334%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="32.3881%" y="53" width="0.6307%" height="15" fill="rgb(216,164,2)" fg:x="7241" fg:w="141"/><text x="32.6810%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (418 instructions, 1.87%)</title><rect x="31.4980%" y="69" width="1.8697%" height="15" fill="rgb(220,129,5)" fg:x="7042" fg:w="418"/><text x="31.7909%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="33.3676%" y="53" width="0.8856%" height="15" fill="rgb(242,17,10)" fg:x="7460" fg:w="198"/><text x="33.6606%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="33.3676%" y="69" width="1.0064%" height="15" fill="rgb(242,107,0)" fg:x="7460" fg:w="225"/><text x="33.6606%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.3740%" y="69" width="0.2684%" height="15" fill="rgb(251,28,31)" fg:x="7685" fg:w="60"/><text x="34.6670%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.6424%" y="69" width="0.2684%" height="15" fill="rgb(233,223,10)" fg:x="7745" fg:w="60"/><text x="34.9354%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.9108%" y="69" width="0.2684%" height="15" fill="rgb(215,21,27)" fg:x="7805" fg:w="60"/><text x="35.2037%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="35.1791%" y="69" width="0.2058%" height="15" fill="rgb(232,23,21)" fg:x="7865" fg:w="46"/><text x="35.4721%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::h0ec8051fccd2ba6b (36 instructions, 0.16%)</title><rect x="35.3849%" y="69" width="0.1610%" height="15" fill="rgb(244,5,23)" fg:x="7911" fg:w="36"/><text x="35.6779%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="35.5459%" y="69" width="0.2684%" height="15" fill="rgb(226,81,46)" fg:x="7947" fg:w="60"/><text x="35.8389%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="35.8143%" y="69" width="0.2058%" height="15" fill="rgb(247,70,30)" fg:x="8007" fg:w="46"/><text x="36.1073%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="36.0200%" y="53" width="0.2058%" height="15" fill="rgb(212,68,19)" fg:x="8053" fg:w="46"/><text x="36.3130%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="36.0200%" y="69" width="0.3265%" height="15" fill="rgb(240,187,13)" fg:x="8053" fg:w="73"/><text x="36.3130%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="36.3466%" y="69" width="0.2684%" height="15" fill="rgb(223,113,26)" fg:x="8126" fg:w="60"/><text x="36.6395%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="36.6149%" y="53" width="0.2058%" height="15" fill="rgb(206,192,2)" fg:x="8186" fg:w="46"/><text x="36.9079%" y="63.50"></text></g><g><title>utf8_validate (143 instructions, 0.64%)</title><rect x="36.8207%" y="53" width="0.6396%" height="15" fill="rgb(241,108,4)" fg:x="8232" fg:w="143"/><text x="37.1137%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="37.4603%" y="37" width="0.1476%" height="15" fill="rgb(247,173,49)" fg:x="8375" fg:w="33"/><text x="37.7533%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="37.4603%" y="53" width="0.1789%" height="15" fill="rgb(224,114,35)" fg:x="8375" fg:w="40"/><text x="37.7533%" y="63.50"></text></g><g><title>memcpy (64 instructions, 0.29%)</title><rect x="37.6392%" y="53" width="0.2863%" height="15" fill="rgb(245,159,27)" fg:x="8415" fg:w="64"/><text x="37.9322%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (335 instructions, 1.50%)</title><rect x="36.6149%" y="69" width="1.4984%" height="15" fill="rgb(245,172,44)" fg:x="8186" fg:w="335"/><text x="36.9079%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="38.1133%" y="53" width="0.2058%" height="15" fill="rgb(236,23,11)" fg:x="8521" fg:w="46"/><text x="38.4063%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="38.1133%" y="69" width="0.3265%" height="15" fill="rgb(205,117,38)" fg:x="8521" fg:w="73"/><text x="38.4063%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.4399%" y="69" width="0.2684%" height="15" fill="rgb(237,72,25)" fg:x="8594" fg:w="60"/><text x="38.7328%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.7082%" y="69" width="0.2684%" height="15" fill="rgb(244,70,9)" fg:x="8654" fg:w="60"/><text x="39.0012%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="38.9766%" y="69" width="0.2058%" height="15" fill="rgb(217,125,39)" fg:x="8714" fg:w="46"/><text x="39.2696%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="39.1824%" y="69" width="0.2058%" height="15" fill="rgb(235,36,10)" fg:x="8760" fg:w="46"/><text x="39.4753%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="39.3881%" y="69" width="0.2997%" height="15" fill="rgb(251,123,47)" fg:x="8806" fg:w="67"/><text x="39.6811%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="39.6878%" y="69" width="0.0984%" height="15" fill="rgb(221,13,13)" fg:x="8873" fg:w="22"/><text x="39.9808%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="39.7862%" y="69" width="0.3668%" height="15" fill="rgb(238,131,9)" fg:x="8895" fg:w="82"/><text x="40.0792%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.1530%" y="69" width="0.0984%" height="15" fill="rgb(211,50,8)" fg:x="8977" fg:w="22"/><text x="40.4459%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.2514%" y="69" width="0.3668%" height="15" fill="rgb(245,182,24)" fg:x="8999" fg:w="82"/><text x="40.5443%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.6182%" y="69" width="0.0984%" height="15" fill="rgb(242,14,37)" fg:x="9081" fg:w="22"/><text x="40.9111%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.7166%" y="69" width="0.3668%" height="15" fill="rgb(246,228,12)" fg:x="9103" fg:w="82"/><text x="41.0095%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.0833%" y="69" width="0.0984%" height="15" fill="rgb(213,55,15)" fg:x="9185" fg:w="22"/><text x="41.3763%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="41.1817%" y="69" width="0.3668%" height="15" fill="rgb(209,9,3)" fg:x="9207" fg:w="82"/><text x="41.4747%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.5485%" y="69" width="0.0984%" height="15" fill="rgb(230,59,30)" fg:x="9289" fg:w="22"/><text x="41.8415%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="41.6469%" y="69" width="0.3668%" height="15" fill="rgb(209,121,21)" fg:x="9311" fg:w="82"/><text x="41.9399%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="42.0137%" y="69" width="0.0984%" height="15" fill="rgb(220,109,13)" fg:x="9393" fg:w="22"/><text x="42.3067%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="42.1121%" y="69" width="0.8856%" height="15" fill="rgb(232,18,1)" fg:x="9415" fg:w="198"/><text x="42.4051%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="42.9977%" y="69" width="0.2684%" height="15" fill="rgb(215,41,42)" fg:x="9613" fg:w="60"/><text x="43.2907%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="43.2661%" y="69" width="0.0671%" height="15" fill="rgb(224,123,36)" fg:x="9673" fg:w="15"/><text x="43.5591%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="43.3332%" y="53" width="0.2058%" height="15" fill="rgb(240,125,3)" fg:x="9688" fg:w="46"/><text x="43.6262%" y="63.50"></text></g><g><title>utf8_validate (279 instructions, 1.25%)</title><rect x="43.5389%" y="53" width="1.2479%" height="15" fill="rgb(205,98,50)" fg:x="9734" fg:w="279"/><text x="43.8319%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="44.7869%" y="37" width="0.1476%" height="15" fill="rgb(205,185,37)" fg:x="10013" fg:w="33"/><text x="45.0798%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="44.7869%" y="53" width="0.1789%" height="15" fill="rgb(238,207,15)" fg:x="10013" fg:w="40"/><text x="45.0798%" y="63.50"></text></g><g><title>memcpy (320 instructions, 1.43%)</title><rect x="44.9658%" y="53" width="1.4313%" height="15" fill="rgb(213,199,42)" fg:x="10053" fg:w="320"/><text x="45.2588%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (727 instructions, 3.25%)</title><rect x="43.3332%" y="69" width="3.2518%" height="15" fill="rgb(235,201,11)" fg:x="9688" fg:w="727"/><text x="43.6262%" y="79.50">@d..</text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="46.5850%" y="69" width="0.0179%" height="15" fill="rgb(207,46,11)" fg:x="10415" fg:w="4"/><text x="46.8779%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="46.6029%" y="69" width="0.1029%" height="15" fill="rgb(241,35,35)" fg:x="10419" fg:w="23"/><text x="46.8958%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="46.7057%" y="69" width="0.2684%" height="15" fill="rgb(243,32,47)" fg:x="10442" fg:w="60"/><text x="46.9987%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="46.9741%" y="69" width="0.2058%" height="15" fill="rgb(247,202,23)" fg:x="10502" fg:w="46"/><text x="47.2671%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="47.1799%" y="53" width="0.2058%" height="15" fill="rgb(219,102,11)" fg:x="10548" fg:w="46"/><text x="47.4728%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="47.1799%" y="69" width="0.3265%" height="15" fill="rgb(243,110,44)" fg:x="10548" fg:w="73"/><text x="47.4728%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="47.5064%" y="69" width="0.2684%" height="15" fill="rgb(222,74,54)" fg:x="10621" fg:w="60"/><text x="47.7993%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="47.7747%" y="53" width="0.2058%" height="15" fill="rgb(216,99,12)" fg:x="10681" fg:w="46"/><text x="48.0677%" y="63.50"></text></g><g><title>utf8_validate (151 instructions, 0.68%)</title><rect x="47.9805%" y="53" width="0.6754%" height="15" fill="rgb(226,22,26)" fg:x="10727" fg:w="151"/><text x="48.2735%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="48.6559%" y="37" width="0.1476%" height="15" fill="rgb(217,163,10)" fg:x="10878" fg:w="33"/><text x="48.9489%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="48.6559%" y="53" width="0.1789%" height="15" fill="rgb(213,25,53)" fg:x="10878" fg:w="40"/><text x="48.9489%" y="63.50"></text></g><g><title>memcpy (102 instructions, 0.46%)</title><rect x="48.8348%" y="53" width="0.4562%" height="15" fill="rgb(252,105,26)" fg:x="10918" fg:w="102"/><text x="49.1278%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (381 instructions, 1.70%)</title><rect x="47.7747%" y="69" width="1.7042%" height="15" fill="rgb(220,39,43)" fg:x="10681" fg:w="381"/><text x="48.0677%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="49.4789%" y="53" width="0.2058%" height="15" fill="rgb(229,68,48)" fg:x="11062" fg:w="46"/><text x="49.7719%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="49.4789%" y="69" width="0.3265%" height="15" fill="rgb(252,8,32)" fg:x="11062" fg:w="73"/><text x="49.7719%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="49.8054%" y="69" width="0.2684%" height="15" fill="rgb(223,20,43)" fg:x="11135" fg:w="60"/><text x="50.0984%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="50.0738%" y="69" width="0.2684%" height="15" fill="rgb(229,81,49)" fg:x="11195" fg:w="60"/><text x="50.3668%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="50.3422%" y="69" width="0.2058%" height="15" fill="rgb(236,28,36)" fg:x="11255" fg:w="46"/><text x="50.6351%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="50.5479%" y="69" width="0.2058%" height="15" fill="rgb(249,185,26)" fg:x="11301" fg:w="46"/><text x="50.8409%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="50.7537%" y="69" width="0.2997%" height="15" fill="rgb(249,174,33)" fg:x="11347" fg:w="67"/><text x="51.0466%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.0534%" y="69" width="0.0984%" height="15" fill="rgb(233,201,37)" fg:x="11414" fg:w="22"/><text x="51.3463%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.1518%" y="69" width="0.3668%" height="15" fill="rgb(221,78,26)" fg:x="11436" fg:w="82"/><text x="51.4447%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.5185%" y="69" width="0.0984%" height="15" fill="rgb(250,127,30)" fg:x="11518" fg:w="22"/><text x="51.8115%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.6169%" y="69" width="0.3668%" height="15" fill="rgb(230,49,44)" fg:x="11540" fg:w="82"/><text x="51.9099%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.9837%" y="69" width="0.0984%" height="15" fill="rgb(229,67,23)" fg:x="11622" fg:w="22"/><text x="52.2767%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.0821%" y="69" width="0.3668%" height="15" fill="rgb(249,83,47)" fg:x="11644" fg:w="82"/><text x="52.3751%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.4489%" y="69" width="0.0984%" height="15" fill="rgb(215,43,3)" fg:x="11726" fg:w="22"/><text x="52.7419%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.5473%" y="69" width="0.3668%" height="15" fill="rgb(238,154,13)" fg:x="11748" fg:w="82"/><text x="52.8403%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.9141%" y="69" width="0.0984%" height="15" fill="rgb(219,56,2)" fg:x="11830" fg:w="22"/><text x="53.2070%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="53.0125%" y="69" width="0.3668%" height="15" fill="rgb(233,0,4)" fg:x="11852" fg:w="82"/><text x="53.3054%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="53.3793%" y="69" width="0.0984%" height="15" fill="rgb(235,30,7)" fg:x="11934" fg:w="22"/><text x="53.6722%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="53.4777%" y="69" width="0.8856%" height="15" fill="rgb(250,79,13)" fg:x="11956" fg:w="198"/><text x="53.7706%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="54.3633%" y="69" width="0.2684%" height="15" fill="rgb(211,146,34)" fg:x="12154" fg:w="60"/><text x="54.6563%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="54.6317%" y="69" width="0.0671%" height="15" fill="rgb(228,22,38)" fg:x="12214" fg:w="15"/><text x="54.9246%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="54.6988%" y="53" width="0.2058%" height="15" fill="rgb(235,168,5)" fg:x="12229" fg:w="46"/><text x="54.9917%" y="63.50"></text></g><g><title>utf8_validate (165 instructions, 0.74%)</title><rect x="54.9045%" y="53" width="0.7380%" height="15" fill="rgb(221,155,16)" fg:x="12275" fg:w="165"/><text x="55.1975%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="55.6425%" y="37" width="0.1476%" height="15" fill="rgb(215,215,53)" fg:x="12440" fg:w="33"/><text x="55.9355%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="55.6425%" y="53" width="0.1789%" height="15" fill="rgb(223,4,10)" fg:x="12440" fg:w="40"/><text x="55.9355%" y="63.50"></text></g><g><title>memcpy (79 instructions, 0.35%)</title><rect x="55.8214%" y="53" width="0.3534%" height="15" fill="rgb(234,103,6)" fg:x="12480" fg:w="79"/><text x="56.1144%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (372 instructions, 1.66%)</title><rect x="54.6988%" y="69" width="1.6639%" height="15" fill="rgb(227,97,0)" fg:x="12229" fg:w="372"/><text x="54.9917%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="56.3627%" y="69" width="0.0179%" height="15" fill="rgb(234,150,53)" fg:x="12601" fg:w="4"/><text x="56.6556%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="56.3806%" y="69" width="0.1029%" height="15" fill="rgb(228,201,54)" fg:x="12605" fg:w="23"/><text x="56.6735%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="56.4834%" y="69" width="0.2684%" height="15" fill="rgb(222,22,37)" fg:x="12628" fg:w="60"/><text x="56.7764%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="56.7518%" y="69" width="0.2058%" height="15" fill="rgb(237,53,32)" fg:x="12688" fg:w="46"/><text x="57.0448%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="56.9576%" y="53" width="0.2058%" height="15" fill="rgb(233,25,53)" fg:x="12734" fg:w="46"/><text x="57.2505%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="56.9576%" y="69" width="0.3265%" height="15" fill="rgb(210,40,34)" fg:x="12734" fg:w="73"/><text x="57.2505%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="57.2841%" y="69" width="0.2684%" height="15" fill="rgb(241,220,44)" fg:x="12807" fg:w="60"/><text x="57.5770%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="57.5524%" y="53" width="0.2058%" height="15" fill="rgb(235,28,35)" fg:x="12867" fg:w="46"/><text x="57.8454%" y="63.50"></text></g><g><title>utf8_validate (188 instructions, 0.84%)</title><rect x="57.7582%" y="53" width="0.8409%" height="15" fill="rgb(210,56,17)" fg:x="12913" fg:w="188"/><text x="58.0512%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="58.5991%" y="37" width="0.1476%" height="15" fill="rgb(224,130,29)" fg:x="13101" fg:w="33"/><text x="58.8921%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="58.5991%" y="53" width="0.1789%" height="15" fill="rgb(235,212,8)" fg:x="13101" fg:w="40"/><text x="58.8921%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="58.7780%" y="53" width="0.6307%" height="15" fill="rgb(223,33,50)" fg:x="13141" fg:w="141"/><text x="59.0710%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (457 instructions, 2.04%)</title><rect x="57.5524%" y="69" width="2.0441%" height="15" fill="rgb(219,149,13)" fg:x="12867" fg:w="457"/><text x="57.8454%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="59.5965%" y="53" width="0.2058%" height="15" fill="rgb(250,156,29)" fg:x="13324" fg:w="46"/><text x="59.8895%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="59.5965%" y="69" width="0.3265%" height="15" fill="rgb(216,193,19)" fg:x="13324" fg:w="73"/><text x="59.8895%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="59.9231%" y="69" width="0.2684%" height="15" fill="rgb(216,135,14)" fg:x="13397" fg:w="60"/><text x="60.2160%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="60.1914%" y="69" width="0.2684%" height="15" fill="rgb(241,47,5)" fg:x="13457" fg:w="60"/><text x="60.4844%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="60.4598%" y="69" width="0.2058%" height="15" fill="rgb(233,42,35)" fg:x="13517" fg:w="46"/><text x="60.7528%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="60.6656%" y="69" width="0.2058%" height="15" fill="rgb(231,13,6)" fg:x="13563" fg:w="46"/><text x="60.9585%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="60.8713%" y="69" width="0.2997%" height="15" fill="rgb(207,181,40)" fg:x="13609" fg:w="67"/><text x="61.1643%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.1710%" y="69" width="0.0984%" height="15" fill="rgb(254,173,49)" fg:x="13676" fg:w="22"/><text x="61.4640%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.2694%" y="69" width="0.3668%" height="15" fill="rgb(221,1,38)" fg:x="13698" fg:w="82"/><text x="61.5624%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.6362%" y="69" width="0.0984%" height="15" fill="rgb(206,124,46)" fg:x="13780" fg:w="22"/><text x="61.9291%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.7346%" y="69" width="0.3668%" height="15" fill="rgb(249,21,11)" fg:x="13802" fg:w="82"/><text x="62.0275%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.1014%" y="69" width="0.0984%" height="15" fill="rgb(222,201,40)" fg:x="13884" fg:w="22"/><text x="62.3943%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.1998%" y="69" width="0.3668%" height="15" fill="rgb(235,61,29)" fg:x="13906" fg:w="82"/><text x="62.4927%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.5665%" y="69" width="0.0984%" height="15" fill="rgb(219,207,3)" fg:x="13988" fg:w="22"/><text x="62.8595%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.6649%" y="69" width="0.3668%" height="15" fill="rgb(222,56,46)" fg:x="14010" fg:w="82"/><text x="62.9579%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="63.0317%" y="69" width="0.0984%" height="15" fill="rgb(239,76,54)" fg:x="14092" fg:w="22"/><text x="63.3247%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="63.1301%" y="69" width="0.3668%" height="15" fill="rgb(231,124,27)" fg:x="14114" fg:w="82"/><text x="63.4231%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="63.4969%" y="69" width="0.0984%" height="15" fill="rgb(249,195,6)" fg:x="14196" fg:w="22"/><text x="63.7899%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="63.5953%" y="69" width="0.8856%" height="15" fill="rgb(237,174,47)" fg:x="14218" fg:w="198"/><text x="63.8883%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="64.4809%" y="69" width="0.2684%" height="15" fill="rgb(206,201,31)" fg:x="14416" fg:w="60"/><text x="64.7739%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="64.7493%" y="69" width="0.0671%" height="15" fill="rgb(231,57,52)" fg:x="14476" fg:w="15"/><text x="65.0423%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="64.8164%" y="53" width="0.2058%" height="15" fill="rgb(248,177,22)" fg:x="14491" fg:w="46"/><text x="65.1094%" y="63.50"></text></g><g><title>utf8_validate (160 instructions, 0.72%)</title><rect x="65.0221%" y="53" width="0.7157%" height="15" fill="rgb(215,211,37)" fg:x="14537" fg:w="160"/><text x="65.3151%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="65.7378%" y="37" width="0.1476%" height="15" fill="rgb(241,128,51)" fg:x="14697" fg:w="33"/><text x="66.0308%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="65.7378%" y="53" width="0.1789%" height="15" fill="rgb(227,165,31)" fg:x="14697" fg:w="40"/><text x="66.0308%" y="63.50"></text></g><g><title>memcpy (110 instructions, 0.49%)</title><rect x="65.9167%" y="53" width="0.4920%" height="15" fill="rgb(228,167,24)" fg:x="14737" fg:w="110"/><text x="66.2097%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (398 instructions, 1.78%)</title><rect x="64.8164%" y="69" width="1.7802%" height="15" fill="rgb(228,143,12)" fg:x="14491" fg:w="398"/><text x="65.1094%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="66.5966%" y="69" width="0.0179%" height="15" fill="rgb(249,149,8)" fg:x="14889" fg:w="4"/><text x="66.8896%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="66.6145%" y="69" width="0.1029%" height="15" fill="rgb(243,35,44)" fg:x="14893" fg:w="23"/><text x="66.9075%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="66.7174%" y="69" width="0.2684%" height="15" fill="rgb(246,89,9)" fg:x="14916" fg:w="60"/><text x="67.0103%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="66.9857%" y="69" width="0.2058%" height="15" fill="rgb(233,213,13)" fg:x="14976" fg:w="46"/><text x="67.2787%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="67.1915%" y="53" width="0.2058%" height="15" fill="rgb(233,141,41)" fg:x="15022" fg:w="46"/><text x="67.4845%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="67.1915%" y="69" width="0.3265%" height="15" fill="rgb(239,167,4)" fg:x="15022" fg:w="73"/><text x="67.4845%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="67.5180%" y="69" width="0.2684%" height="15" fill="rgb(209,217,16)" fg:x="15095" fg:w="60"/><text x="67.8110%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="67.7864%" y="53" width="0.2058%" height="15" fill="rgb(219,88,35)" fg:x="15155" fg:w="46"/><text x="68.0793%" y="63.50"></text></g><g><title>utf8_validate (199 instructions, 0.89%)</title><rect x="67.9921%" y="53" width="0.8901%" height="15" fill="rgb(220,193,23)" fg:x="15201" fg:w="199"/><text x="68.2851%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="68.8822%" y="37" width="0.1476%" height="15" fill="rgb(230,90,52)" fg:x="15400" fg:w="33"/><text x="69.1752%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h608260036a03e2ed (40 instructions, 0.18%)</title><rect x="68.8822%" y="53" width="0.1789%" height="15" fill="rgb(252,106,19)" fg:x="15400" fg:w="40"/><text x="69.1752%" y="63.50"></text></g><g><title>memcpy (145 instructions, 0.65%)</title><rect x="69.0611%" y="53" width="0.6486%" height="15" fill="rgb(206,74,20)" fg:x="15440" fg:w="145"/><text x="69.3541%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (472 instructions, 2.11%)</title><rect x="67.7864%" y="69" width="2.1112%" height="15" fill="rgb(230,138,44)" fg:x="15155" fg:w="472"/><text x="68.0793%" y="79.50">@..</text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="69.8976%" y="53" width="0.2058%" height="15" fill="rgb(235,182,43)" fg:x="15627" fg:w="46"/><text x="70.1905%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="69.8976%" y="69" width="0.3265%" height="15" fill="rgb(242,16,51)" fg:x="15627" fg:w="73"/><text x="70.1905%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="70.2241%" y="69" width="0.2684%" height="15" fill="rgb(248,9,4)" fg:x="15700" fg:w="60"/><text x="70.5171%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="70.4925%" y="69" width="0.2684%" height="15" fill="rgb(210,31,22)" fg:x="15760" fg:w="60"/><text x="70.7854%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="70.7608%" y="69" width="0.2058%" height="15" fill="rgb(239,54,39)" fg:x="15820" fg:w="46"/><text x="71.0538%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="70.9666%" y="69" width="0.2058%" height="15" fill="rgb(230,99,41)" fg:x="15866" fg:w="46"/><text x="71.2596%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="71.1723%" y="69" width="0.2997%" height="15" fill="rgb(253,106,12)" fg:x="15912" fg:w="67"/><text x="71.4653%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.4720%" y="69" width="0.0984%" height="15" fill="rgb(213,46,41)" fg:x="15979" fg:w="22"/><text x="71.7650%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="71.5704%" y="69" width="0.3668%" height="15" fill="rgb(215,133,35)" fg:x="16001" fg:w="82"/><text x="71.8634%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.9372%" y="69" width="0.0984%" height="15" fill="rgb(213,28,5)" fg:x="16083" fg:w="22"/><text x="72.2302%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="72.0356%" y="69" width="0.8856%" height="15" fill="rgb(215,77,49)" fg:x="16105" fg:w="198"/><text x="72.3286%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="72.9212%" y="69" width="0.2684%" height="15" fill="rgb(248,100,22)" fg:x="16303" fg:w="60"/><text x="73.2142%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="73.1896%" y="69" width="0.0671%" height="15" fill="rgb(208,67,9)" fg:x="16363" fg:w="15"/><text x="73.4826%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="73.2567%" y="69" width="0.0179%" height="15" fill="rgb(219,133,21)" fg:x="16378" fg:w="4"/><text x="73.5497%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="73.2746%" y="69" width="0.1029%" height="15" fill="rgb(246,46,29)" fg:x="16382" fg:w="23"/><text x="73.5676%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="73.3775%" y="53" width="0.8856%" height="15" fill="rgb(246,185,52)" fg:x="16405" fg:w="198"/><text x="73.6704%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="73.3775%" y="69" width="1.0064%" height="15" fill="rgb(252,136,11)" fg:x="16405" fg:w="225"/><text x="73.6704%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.3839%" y="69" width="0.2684%" height="15" fill="rgb(219,138,53)" fg:x="16630" fg:w="60"/><text x="74.6768%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.6522%" y="69" width="0.2684%" height="15" fill="rgb(211,51,23)" fg:x="16690" fg:w="60"/><text x="74.9452%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="74.9206%" y="69" width="0.2058%" height="15" fill="rgb(247,221,28)" fg:x="16750" fg:w="46"/><text x="75.2136%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="75.1264%" y="69" width="0.2058%" height="15" fill="rgb(251,222,45)" fg:x="16796" fg:w="46"/><text x="75.4193%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="75.3321%" y="69" width="0.2997%" height="15" fill="rgb(217,162,53)" fg:x="16842" fg:w="67"/><text x="75.6251%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="75.6318%" y="69" width="0.0984%" height="15" fill="rgb(229,93,14)" fg:x="16909" fg:w="22"/><text x="75.9248%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="75.7302%" y="69" width="0.8856%" height="15" fill="rgb(209,67,49)" fg:x="16931" fg:w="198"/><text x="76.0232%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="76.6158%" y="69" width="0.2684%" height="15" fill="rgb(213,87,29)" fg:x="17129" fg:w="60"/><text x="76.9088%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="76.8842%" y="69" width="0.0671%" height="15" fill="rgb(205,151,52)" fg:x="17189" fg:w="15"/><text x="77.1772%" y="79.50"></text></g><g><title>@deserialize_go&lt;u&gt; (20 instructions, 0.09%)</title><rect x="76.9513%" y="69" width="0.0895%" height="15" fill="rgb(253,215,39)" fg:x="17204" fg:w="20"/><text x="77.2443%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="77.0407%" y="69" width="0.0179%" height="15" fill="rgb(221,220,41)" fg:x="17224" fg:w="4"/><text x="77.3337%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (13,233 instructions, 59.19%)</title><rect x="28.7785%" y="85" width="59.1895%" height="15" fill="rgb(218,133,21)" fg:x="6434" fg:w="13233"/><text x="29.0714%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Con..</text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.07%)</title><rect x="87.9680%" y="85" width="0.0671%" height="15" fill="rgb(221,193,43)" fg:x="19667" fg:w="15"/><text x="88.2609%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="88.0351%" y="69" width="0.1476%" height="15" fill="rgb(240,128,52)" fg:x="19682" fg:w="33"/><text x="88.3280%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="88.1827%" y="69" width="0.0671%" height="15" fill="rgb(253,114,12)" fg:x="19715" fg:w="15"/><text x="88.4756%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="88.2498%" y="69" width="0.0716%" height="15" fill="rgb(215,223,47)" fg:x="19730" fg:w="16"/><text x="88.5427%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.07%)</title><rect x="88.3213%" y="69" width="0.0671%" height="15" fill="rgb(248,225,23)" fg:x="19746" fg:w="15"/><text x="88.6143%" y="79.50"></text></g><g><title>opt_project (18 instructions, 0.08%)</title><rect x="88.3884%" y="53" width="0.0805%" height="15" fill="rgb(250,108,0)" fg:x="19761" fg:w="18"/><text x="88.6814%" y="63.50"></text></g><g><title>Blob.compare_eq (679 instructions, 3.04%)</title><rect x="88.4689%" y="37" width="3.0371%" height="15" fill="rgb(228,208,7)" fg:x="19779" fg:w="679"/><text x="88.7619%" y="47.50">Bl..</text></g><g><title>anon-func-154.35 (683 instructions, 3.05%)</title><rect x="88.4689%" y="53" width="3.0550%" height="15" fill="rgb(244,45,10)" fg:x="19779" fg:w="683"/><text x="88.7619%" y="63.50">an..</text></g><g><title>some (731 instructions, 3.27%)</title><rect x="88.3884%" y="69" width="3.2697%" height="15" fill="rgb(207,125,25)" fg:x="19761" fg:w="731"/><text x="88.6814%" y="79.50">so..</text></g><g><title>rec (9 instructions, 0.04%)</title><rect x="91.6581%" y="69" width="0.0403%" height="15" fill="rgb(210,195,18)" fg:x="20492" fg:w="9"/><text x="91.9511%" y="79.50"></text></g><g><title>Nat-&gt;Nat64 (13 instructions, 0.06%)</title><rect x="91.6983%" y="69" width="0.0581%" height="15" fill="rgb(249,80,12)" fg:x="20501" fg:w="13"/><text x="91.9913%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="91.7565%" y="69" width="0.0671%" height="15" fill="rgb(221,65,9)" fg:x="20514" fg:w="15"/><text x="92.0495%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="91.8236%" y="69" width="0.0581%" height="15" fill="rgb(235,49,36)" fg:x="20529" fg:w="13"/><text x="92.1166%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="91.8817%" y="69" width="0.1029%" height="15" fill="rgb(225,32,20)" fg:x="20542" fg:w="23"/><text x="92.1747%" y="79.50"></text></g><g><title>opt_inject (18 instructions, 0.08%)</title><rect x="91.9846%" y="69" width="0.0805%" height="15" fill="rgb(215,141,46)" fg:x="20565" fg:w="18"/><text x="92.2776%" y="79.50"></text></g><g><title>B_add (24 instructions, 0.11%)</title><rect x="92.0651%" y="69" width="0.1073%" height="15" fill="rgb(250,160,47)" fg:x="20583" fg:w="24"/><text x="92.3581%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="92.1725%" y="69" width="0.0671%" height="15" fill="rgb(216,222,40)" fg:x="20607" fg:w="15"/><text x="92.4654%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="92.2396%" y="69" width="0.0671%" height="15" fill="rgb(234,217,39)" fg:x="20622" fg:w="15"/><text x="92.5325%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="92.3067%" y="69" width="0.0581%" height="15" fill="rgb(207,178,40)" fg:x="20637" fg:w="13"/><text x="92.5996%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="92.3648%" y="53" width="0.0716%" height="15" fill="rgb(221,136,13)" fg:x="20650" fg:w="16"/><text x="92.6578%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.12%)</title><rect x="92.4364%" y="53" width="0.1163%" height="15" fill="rgb(249,199,10)" fg:x="20666" fg:w="26"/><text x="92.7293%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="92.5527%" y="53" width="0.1342%" height="15" fill="rgb(249,222,13)" fg:x="20692" fg:w="30"/><text x="92.8456%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="92.6869%" y="53" width="0.1476%" height="15" fill="rgb(244,185,38)" fg:x="20722" fg:w="33"/><text x="92.9798%" y="63.50"></text></g><g><title>memcpy (130 instructions, 0.58%)</title><rect x="92.8345%" y="53" width="0.5815%" height="15" fill="rgb(236,202,9)" fg:x="20755" fg:w="130"/><text x="93.1274%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::heebba8198530563a (33 instructions, 0.15%)</title><rect x="93.4159%" y="53" width="0.1476%" height="15" fill="rgb(250,229,37)" fg:x="20885" fg:w="33"/><text x="93.7089%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.5635%" y="53" width="0.0403%" height="15" fill="rgb(206,174,23)" fg:x="20918" fg:w="9"/><text x="93.8565%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="93.6038%" y="53" width="0.0716%" height="15" fill="rgb(211,33,43)" fg:x="20927" fg:w="16"/><text x="93.8968%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.6754%" y="37" width="0.0403%" height="15" fill="rgb(245,58,50)" fg:x="20943" fg:w="9"/><text x="93.9683%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.14%)</title><rect x="93.6754%" y="53" width="0.1431%" height="15" fill="rgb(244,68,36)" fg:x="20943" fg:w="32"/><text x="93.9683%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="93.8185%" y="53" width="0.1342%" height="15" fill="rgb(232,229,15)" fg:x="20975" fg:w="30"/><text x="94.1115%" y="63.50"></text></g><g><title>reply_with_data (90 instructions, 0.40%)</title><rect x="93.9527%" y="53" width="0.4026%" height="15" fill="rgb(254,30,23)" fg:x="21005" fg:w="90"/><text x="94.2456%" y="63.50"></text></g><g><title>$lambda.37 (601 instructions, 2.69%)</title><rect x="92.3648%" y="69" width="2.6882%" height="15" fill="rgb(235,160,14)" fg:x="20650" fg:w="601"/><text x="92.6578%" y="79.50">$..</text></g><g><title>$lambda.1 (1,679 instructions, 7.51%)</title><rect x="88.0351%" y="85" width="7.5100%" height="15" fill="rgb(212,155,44)" fg:x="19682" fg:w="1679"/><text x="88.3280%" y="95.50">$lambda.1</text></g><g><title>schedule_copying_gc (45 instructions, 0.20%)</title><rect x="95.5450%" y="85" width="0.2013%" height="15" fill="rgb(226,2,50)" fg:x="21361" fg:w="45"/><text x="95.8380%" y="95.50"></text></g><g><title>trans_state4 (13 instructions, 0.06%)</title><rect x="95.7463%" y="85" width="0.0581%" height="15" fill="rgb(234,177,6)" fg:x="21406" fg:w="13"/><text x="96.0393%" y="95.50"></text></g><g><title>all (22,357 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="22357"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (22,357 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="22357"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>