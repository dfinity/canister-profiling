<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="22319"><g><title>trans_state5 (8 instructions, 0.04%)</title><rect x="0.0000%" y="85" width="0.0358%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="0.0358%" y="85" width="0.1479%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="33"/><text x="0.3288%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="0.1837%" y="69" width="0.2061%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="46"/><text x="0.4767%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="0.3898%" y="69" width="0.1479%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="33"/><text x="0.6828%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.5377%" y="69" width="0.2688%" height="15" fill="rgb(208,68,35)" fg:x="120" fg:w="60"/><text x="0.8306%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="0.8065%" y="69" width="0.2688%" height="15" fill="rgb(232,128,0)" fg:x="180" fg:w="60"/><text x="1.0995%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="1.0753%" y="69" width="0.2688%" height="15" fill="rgb(207,160,47)" fg:x="240" fg:w="60"/><text x="1.3683%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="1.3441%" y="69" width="0.2061%" height="15" fill="rgb(228,23,34)" fg:x="300" fg:w="46"/><text x="1.6371%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="1.5502%" y="69" width="0.8871%" height="15" fill="rgb(218,30,26)" fg:x="346" fg:w="198"/><text x="1.8432%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="2.4374%" y="69" width="0.2688%" height="15" fill="rgb(220,122,19)" fg:x="544" fg:w="60"/><text x="2.7304%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="2.7062%" y="69" width="0.8871%" height="15" fill="rgb(250,228,42)" fg:x="604" fg:w="198"/><text x="2.9992%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="3.5934%" y="69" width="0.2688%" height="15" fill="rgb(240,193,28)" fg:x="802" fg:w="60"/><text x="3.8863%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="3.8622%" y="69" width="0.8871%" height="15" fill="rgb(216,20,37)" fg:x="862" fg:w="198"/><text x="4.1551%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="4.7493%" y="69" width="0.2688%" height="15" fill="rgb(206,188,39)" fg:x="1060" fg:w="60"/><text x="5.0423%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.0181%" y="69" width="0.2688%" height="15" fill="rgb(217,207,13)" fg:x="1120" fg:w="60"/><text x="5.3111%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.2870%" y="69" width="0.2688%" height="15" fill="rgb(231,73,38)" fg:x="1180" fg:w="60"/><text x="5.5799%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.5558%" y="69" width="0.2688%" height="15" fill="rgb(225,20,46)" fg:x="1240" fg:w="60"/><text x="5.8488%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="5.8246%" y="69" width="0.2688%" height="15" fill="rgb(210,31,41)" fg:x="1300" fg:w="60"/><text x="6.1176%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.0935%" y="69" width="0.2688%" height="15" fill="rgb(221,200,47)" fg:x="1360" fg:w="60"/><text x="6.3864%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="6.3623%" y="69" width="0.2061%" height="15" fill="rgb(226,26,5)" fg:x="1420" fg:w="46"/><text x="6.6553%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="6.5684%" y="69" width="0.2061%" height="15" fill="rgb(249,33,26)" fg:x="1466" fg:w="46"/><text x="6.8614%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="6.7745%" y="69" width="0.2688%" height="15" fill="rgb(235,183,28)" fg:x="1512" fg:w="60"/><text x="7.0675%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="7.0433%" y="69" width="0.2061%" height="15" fill="rgb(221,5,38)" fg:x="1572" fg:w="46"/><text x="7.3363%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.2494%" y="69" width="0.2688%" height="15" fill="rgb(247,18,42)" fg:x="1618" fg:w="60"/><text x="7.5424%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="7.5183%" y="69" width="0.2688%" height="15" fill="rgb(241,131,45)" fg:x="1678" fg:w="60"/><text x="7.8112%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="7.7871%" y="69" width="0.2061%" height="15" fill="rgb(249,31,29)" fg:x="1738" fg:w="46"/><text x="8.0801%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.72%)</title><rect x="7.9932%" y="69" width="0.7169%" height="15" fill="rgb(225,111,53)" fg:x="1784" fg:w="160"/><text x="8.2862%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="8.7101%" y="69" width="0.2688%" height="15" fill="rgb(238,160,17)" fg:x="1944" fg:w="60"/><text x="9.0030%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="8.9789%" y="69" width="0.8871%" height="15" fill="rgb(214,148,48)" fg:x="2004" fg:w="198"/><text x="9.2719%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="9.8660%" y="69" width="0.2688%" height="15" fill="rgb(232,36,49)" fg:x="2202" fg:w="60"/><text x="10.1590%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="10.1349%" y="69" width="0.8871%" height="15" fill="rgb(209,103,24)" fg:x="2262" fg:w="198"/><text x="10.4278%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="11.0220%" y="69" width="0.2688%" height="15" fill="rgb(229,88,8)" fg:x="2460" fg:w="60"/><text x="11.3150%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="11.2908%" y="69" width="0.8871%" height="15" fill="rgb(213,181,19)" fg:x="2520" fg:w="198"/><text x="11.5838%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="12.1780%" y="69" width="0.2688%" height="15" fill="rgb(254,191,54)" fg:x="2718" fg:w="60"/><text x="12.4709%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="12.4468%" y="69" width="0.8871%" height="15" fill="rgb(241,83,37)" fg:x="2778" fg:w="198"/><text x="12.7398%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="13.3339%" y="69" width="0.2688%" height="15" fill="rgb(233,36,39)" fg:x="2976" fg:w="60"/><text x="13.6269%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="13.6028%" y="69" width="0.8871%" height="15" fill="rgb(226,3,54)" fg:x="3036" fg:w="198"/><text x="13.8957%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="14.4899%" y="69" width="0.2688%" height="15" fill="rgb(245,192,40)" fg:x="3234" fg:w="60"/><text x="14.7829%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="14.7587%" y="69" width="0.8871%" height="15" fill="rgb(238,167,29)" fg:x="3294" fg:w="198"/><text x="15.0517%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="15.6459%" y="69" width="0.2688%" height="15" fill="rgb(232,182,51)" fg:x="3492" fg:w="60"/><text x="15.9388%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="15.9147%" y="69" width="0.2688%" height="15" fill="rgb(231,60,39)" fg:x="3552" fg:w="60"/><text x="16.2077%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="16.1835%" y="69" width="0.2061%" height="15" fill="rgb(208,69,12)" fg:x="3612" fg:w="46"/><text x="16.4765%" y="79.50"></text></g><g><title>leb128_decode (160 instructions, 0.72%)</title><rect x="16.3896%" y="69" width="0.7169%" height="15" fill="rgb(235,93,37)" fg:x="3658" fg:w="160"/><text x="16.6826%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="17.1065%" y="69" width="0.2688%" height="15" fill="rgb(213,116,39)" fg:x="3818" fg:w="60"/><text x="17.3995%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="17.3753%" y="69" width="0.8871%" height="15" fill="rgb(222,207,29)" fg:x="3878" fg:w="198"/><text x="17.6683%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.2625%" y="69" width="0.2688%" height="15" fill="rgb(206,96,30)" fg:x="4076" fg:w="60"/><text x="18.5554%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.5313%" y="69" width="0.2688%" height="15" fill="rgb(218,138,4)" fg:x="4136" fg:w="60"/><text x="18.8243%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="18.8001%" y="69" width="0.2688%" height="15" fill="rgb(250,191,14)" fg:x="4196" fg:w="60"/><text x="19.0931%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.0690%" y="69" width="0.2688%" height="15" fill="rgb(239,60,40)" fg:x="4256" fg:w="60"/><text x="19.3619%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.3378%" y="69" width="0.2688%" height="15" fill="rgb(206,27,48)" fg:x="4316" fg:w="60"/><text x="19.6308%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.6066%" y="69" width="0.2688%" height="15" fill="rgb(225,35,8)" fg:x="4376" fg:w="60"/><text x="19.8996%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="19.8754%" y="69" width="0.2688%" height="15" fill="rgb(250,213,24)" fg:x="4436" fg:w="60"/><text x="20.1684%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.1443%" y="69" width="0.2688%" height="15" fill="rgb(247,123,22)" fg:x="4496" fg:w="60"/><text x="20.4372%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="20.4131%" y="69" width="0.2061%" height="15" fill="rgb(231,138,38)" fg:x="4556" fg:w="46"/><text x="20.7061%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.6192%" y="69" width="0.2688%" height="15" fill="rgb(231,145,46)" fg:x="4602" fg:w="60"/><text x="20.9122%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="20.8880%" y="69" width="0.2688%" height="15" fill="rgb(251,118,11)" fg:x="4662" fg:w="60"/><text x="21.1810%" y="79.50"></text></g><g><title>parse_idl_header (5,875 instructions, 26.32%)</title><rect x="0.1837%" y="85" width="26.3229%" height="15" fill="rgb(217,147,25)" fg:x="41" fg:w="5875"/><text x="0.4767%" y="95.50">parse_idl_header</text></g><g><title>memset (3 instructions, 0.01%)</title><rect x="26.5066%" y="69" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="5916" fg:w="3"/><text x="26.7995%" y="79.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="26.5066%" y="85" width="0.0269%" height="15" fill="rgb(209,12,38)" fg:x="5916" fg:w="6"/><text x="26.7995%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="26.5334%" y="85" width="0.2061%" height="15" fill="rgb(227,1,9)" fg:x="5922" fg:w="46"/><text x="26.8264%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="26.7395%" y="85" width="0.2688%" height="15" fill="rgb(248,47,43)" fg:x="5968" fg:w="60"/><text x="27.0325%" y="95.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="27.0084%" y="69" width="0.2061%" height="15" fill="rgb(221,10,30)" fg:x="6028" fg:w="46"/><text x="27.3013%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="27.2145%" y="69" width="0.1479%" height="15" fill="rgb(210,229,1)" fg:x="6074" fg:w="33"/><text x="27.5074%" y="79.50"></text></g><g><title>memcpy (154 instructions, 0.69%)</title><rect x="27.3623%" y="69" width="0.6900%" height="15" fill="rgb(222,148,37)" fg:x="6107" fg:w="154"/><text x="27.6553%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (308 instructions, 1.38%)</title><rect x="27.0084%" y="85" width="1.3800%" height="15" fill="rgb(234,67,33)" fg:x="6028" fg:w="308"/><text x="27.3013%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.3884%" y="85" width="0.2688%" height="15" fill="rgb(247,98,35)" fg:x="6336" fg:w="60"/><text x="28.6813%" y="95.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.6572%" y="69" width="0.2688%" height="15" fill="rgb(247,138,52)" fg:x="6396" fg:w="60"/><text x="28.9502%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="28.9260%" y="69" width="0.2688%" height="15" fill="rgb(213,79,30)" fg:x="6456" fg:w="60"/><text x="29.2190%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="29.1949%" y="69" width="0.2061%" height="15" fill="rgb(246,177,23)" fg:x="6516" fg:w="46"/><text x="29.4878%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::haa7cdeb7ecf340fc (36 instructions, 0.16%)</title><rect x="29.4010%" y="69" width="0.1613%" height="15" fill="rgb(230,62,27)" fg:x="6562" fg:w="36"/><text x="29.6939%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="29.5623%" y="69" width="0.2688%" height="15" fill="rgb(216,154,8)" fg:x="6598" fg:w="60"/><text x="29.8552%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="29.8311%" y="69" width="0.2061%" height="15" fill="rgb(244,35,45)" fg:x="6658" fg:w="46"/><text x="30.1241%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="30.0372%" y="69" width="0.0672%" height="15" fill="rgb(251,115,12)" fg:x="6704" fg:w="15"/><text x="30.3302%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="30.1044%" y="53" width="0.8871%" height="15" fill="rgb(240,54,50)" fg:x="6719" fg:w="198"/><text x="30.3974%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="30.1044%" y="69" width="1.0081%" height="15" fill="rgb(233,84,52)" fg:x="6719" fg:w="225"/><text x="30.3974%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.1125%" y="69" width="0.2688%" height="15" fill="rgb(207,117,47)" fg:x="6944" fg:w="60"/><text x="31.4055%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.3813%" y="53" width="0.2688%" height="15" fill="rgb(249,43,39)" fg:x="7004" fg:w="60"/><text x="31.6743%" y="63.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="31.6502%" y="53" width="0.2688%" height="15" fill="rgb(209,38,44)" fg:x="7064" fg:w="60"/><text x="31.9431%" y="63.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="31.9190%" y="53" width="0.2061%" height="15" fill="rgb(236,212,23)" fg:x="7124" fg:w="46"/><text x="32.2120%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="32.1251%" y="53" width="0.1479%" height="15" fill="rgb(242,79,21)" fg:x="7170" fg:w="33"/><text x="32.4181%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="32.2730%" y="53" width="0.6317%" height="15" fill="rgb(211,96,35)" fg:x="7203" fg:w="141"/><text x="32.5659%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (418 instructions, 1.87%)</title><rect x="31.3813%" y="69" width="1.8728%" height="15" fill="rgb(253,215,40)" fg:x="7004" fg:w="418"/><text x="31.6743%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="33.2542%" y="53" width="0.8871%" height="15" fill="rgb(211,81,21)" fg:x="7422" fg:w="198"/><text x="33.5471%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="33.2542%" y="69" width="1.0081%" height="15" fill="rgb(208,190,38)" fg:x="7422" fg:w="225"/><text x="33.5471%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.2623%" y="69" width="0.2688%" height="15" fill="rgb(235,213,38)" fg:x="7647" fg:w="60"/><text x="34.5553%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.5311%" y="69" width="0.2688%" height="15" fill="rgb(237,122,38)" fg:x="7707" fg:w="60"/><text x="34.8241%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="34.7999%" y="69" width="0.2688%" height="15" fill="rgb(244,218,35)" fg:x="7767" fg:w="60"/><text x="35.0929%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="35.0688%" y="69" width="0.2061%" height="15" fill="rgb(240,68,47)" fg:x="7827" fg:w="46"/><text x="35.3617%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::haa7cdeb7ecf340fc (36 instructions, 0.16%)</title><rect x="35.2749%" y="69" width="0.1613%" height="15" fill="rgb(210,16,53)" fg:x="7873" fg:w="36"/><text x="35.5678%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="35.4362%" y="69" width="0.2688%" height="15" fill="rgb(235,124,12)" fg:x="7909" fg:w="60"/><text x="35.7291%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="35.7050%" y="69" width="0.2061%" height="15" fill="rgb(224,169,11)" fg:x="7969" fg:w="46"/><text x="35.9980%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="35.9111%" y="53" width="0.2061%" height="15" fill="rgb(250,166,2)" fg:x="8015" fg:w="46"/><text x="36.2041%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="35.9111%" y="69" width="0.3271%" height="15" fill="rgb(242,216,29)" fg:x="8015" fg:w="73"/><text x="36.2041%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="36.2382%" y="69" width="0.2688%" height="15" fill="rgb(230,116,27)" fg:x="8088" fg:w="60"/><text x="36.5312%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="36.5070%" y="53" width="0.2061%" height="15" fill="rgb(228,99,48)" fg:x="8148" fg:w="46"/><text x="36.8000%" y="63.50"></text></g><g><title>utf8_validate (143 instructions, 0.64%)</title><rect x="36.7131%" y="53" width="0.6407%" height="15" fill="rgb(253,11,6)" fg:x="8194" fg:w="143"/><text x="37.0061%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="37.3538%" y="37" width="0.1479%" height="15" fill="rgb(247,143,39)" fg:x="8337" fg:w="33"/><text x="37.6468%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="37.3538%" y="53" width="0.1792%" height="15" fill="rgb(236,97,10)" fg:x="8337" fg:w="40"/><text x="37.6468%" y="63.50"></text></g><g><title>memcpy (64 instructions, 0.29%)</title><rect x="37.5330%" y="53" width="0.2868%" height="15" fill="rgb(233,208,19)" fg:x="8377" fg:w="64"/><text x="37.8260%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (335 instructions, 1.50%)</title><rect x="36.5070%" y="69" width="1.5010%" height="15" fill="rgb(216,164,2)" fg:x="8148" fg:w="335"/><text x="36.8000%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="38.0080%" y="53" width="0.2061%" height="15" fill="rgb(220,129,5)" fg:x="8483" fg:w="46"/><text x="38.3009%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="38.0080%" y="69" width="0.3271%" height="15" fill="rgb(242,17,10)" fg:x="8483" fg:w="73"/><text x="38.3009%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.3351%" y="69" width="0.2688%" height="15" fill="rgb(242,107,0)" fg:x="8556" fg:w="60"/><text x="38.6280%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="38.6039%" y="69" width="0.2688%" height="15" fill="rgb(251,28,31)" fg:x="8616" fg:w="60"/><text x="38.8968%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="38.8727%" y="69" width="0.2061%" height="15" fill="rgb(233,223,10)" fg:x="8676" fg:w="46"/><text x="39.1657%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="39.0788%" y="69" width="0.2061%" height="15" fill="rgb(215,21,27)" fg:x="8722" fg:w="46"/><text x="39.3718%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="39.2849%" y="69" width="0.3002%" height="15" fill="rgb(232,23,21)" fg:x="8768" fg:w="67"/><text x="39.5779%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="39.5851%" y="69" width="0.0986%" height="15" fill="rgb(244,5,23)" fg:x="8835" fg:w="22"/><text x="39.8781%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="39.6837%" y="69" width="0.3674%" height="15" fill="rgb(226,81,46)" fg:x="8857" fg:w="82"/><text x="39.9766%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.0511%" y="69" width="0.0986%" height="15" fill="rgb(247,70,30)" fg:x="8939" fg:w="22"/><text x="40.3440%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.1496%" y="69" width="0.3674%" height="15" fill="rgb(212,68,19)" fg:x="8961" fg:w="82"/><text x="40.4426%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.5170%" y="69" width="0.0986%" height="15" fill="rgb(240,187,13)" fg:x="9043" fg:w="22"/><text x="40.8100%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="40.6156%" y="69" width="0.3674%" height="15" fill="rgb(223,113,26)" fg:x="9065" fg:w="82"/><text x="40.9086%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="40.9830%" y="69" width="0.0986%" height="15" fill="rgb(206,192,2)" fg:x="9147" fg:w="22"/><text x="41.2760%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="41.0816%" y="69" width="0.3674%" height="15" fill="rgb(241,108,4)" fg:x="9169" fg:w="82"/><text x="41.3746%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.4490%" y="69" width="0.0986%" height="15" fill="rgb(247,173,49)" fg:x="9251" fg:w="22"/><text x="41.7420%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="41.5476%" y="69" width="0.3674%" height="15" fill="rgb(224,114,35)" fg:x="9273" fg:w="82"/><text x="41.8405%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="41.9150%" y="69" width="0.0986%" height="15" fill="rgb(245,159,27)" fg:x="9355" fg:w="22"/><text x="42.2079%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="42.0135%" y="69" width="0.8871%" height="15" fill="rgb(245,172,44)" fg:x="9377" fg:w="198"/><text x="42.3065%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="42.9007%" y="69" width="0.2688%" height="15" fill="rgb(236,23,11)" fg:x="9575" fg:w="60"/><text x="43.1936%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="43.1695%" y="69" width="0.0672%" height="15" fill="rgb(205,117,38)" fg:x="9635" fg:w="15"/><text x="43.4625%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="43.2367%" y="53" width="0.2061%" height="15" fill="rgb(237,72,25)" fg:x="9650" fg:w="46"/><text x="43.5297%" y="63.50"></text></g><g><title>utf8_validate (279 instructions, 1.25%)</title><rect x="43.4428%" y="53" width="1.2501%" height="15" fill="rgb(244,70,9)" fg:x="9696" fg:w="279"/><text x="43.7358%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="44.6929%" y="37" width="0.1479%" height="15" fill="rgb(217,125,39)" fg:x="9975" fg:w="33"/><text x="44.9858%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="44.6929%" y="53" width="0.1792%" height="15" fill="rgb(235,36,10)" fg:x="9975" fg:w="40"/><text x="44.9858%" y="63.50"></text></g><g><title>memcpy (320 instructions, 1.43%)</title><rect x="44.8721%" y="53" width="1.4338%" height="15" fill="rgb(251,123,47)" fg:x="10015" fg:w="320"/><text x="45.1651%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (727 instructions, 3.26%)</title><rect x="43.2367%" y="69" width="3.2573%" height="15" fill="rgb(221,13,13)" fg:x="9650" fg:w="727"/><text x="43.5297%" y="79.50">@d..</text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="46.4940%" y="69" width="0.0179%" height="15" fill="rgb(238,131,9)" fg:x="10377" fg:w="4"/><text x="46.7870%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="46.5119%" y="69" width="0.1031%" height="15" fill="rgb(211,50,8)" fg:x="10381" fg:w="23"/><text x="46.8049%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="46.6150%" y="69" width="0.2688%" height="15" fill="rgb(245,182,24)" fg:x="10404" fg:w="60"/><text x="46.9080%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="46.8838%" y="69" width="0.2061%" height="15" fill="rgb(242,14,37)" fg:x="10464" fg:w="46"/><text x="47.1768%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="47.0899%" y="53" width="0.2061%" height="15" fill="rgb(246,228,12)" fg:x="10510" fg:w="46"/><text x="47.3829%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="47.0899%" y="69" width="0.3271%" height="15" fill="rgb(213,55,15)" fg:x="10510" fg:w="73"/><text x="47.3829%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="47.4170%" y="69" width="0.2688%" height="15" fill="rgb(209,9,3)" fg:x="10583" fg:w="60"/><text x="47.7100%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="47.6858%" y="53" width="0.2061%" height="15" fill="rgb(230,59,30)" fg:x="10643" fg:w="46"/><text x="47.9788%" y="63.50"></text></g><g><title>utf8_validate (151 instructions, 0.68%)</title><rect x="47.8919%" y="53" width="0.6766%" height="15" fill="rgb(209,121,21)" fg:x="10689" fg:w="151"/><text x="48.1849%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="48.5685%" y="37" width="0.1479%" height="15" fill="rgb(220,109,13)" fg:x="10840" fg:w="33"/><text x="48.8615%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="48.5685%" y="53" width="0.1792%" height="15" fill="rgb(232,18,1)" fg:x="10840" fg:w="40"/><text x="48.8615%" y="63.50"></text></g><g><title>memcpy (102 instructions, 0.46%)</title><rect x="48.7477%" y="53" width="0.4570%" height="15" fill="rgb(215,41,42)" fg:x="10880" fg:w="102"/><text x="49.0407%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (381 instructions, 1.71%)</title><rect x="47.6858%" y="69" width="1.7071%" height="15" fill="rgb(224,123,36)" fg:x="10643" fg:w="381"/><text x="47.9788%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="49.3929%" y="53" width="0.2061%" height="15" fill="rgb(240,125,3)" fg:x="11024" fg:w="46"/><text x="49.6859%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="49.3929%" y="69" width="0.3271%" height="15" fill="rgb(205,98,50)" fg:x="11024" fg:w="73"/><text x="49.6859%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="49.7200%" y="69" width="0.2688%" height="15" fill="rgb(205,185,37)" fg:x="11097" fg:w="60"/><text x="50.0129%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="49.9888%" y="69" width="0.2688%" height="15" fill="rgb(238,207,15)" fg:x="11157" fg:w="60"/><text x="50.2818%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="50.2576%" y="69" width="0.2061%" height="15" fill="rgb(213,199,42)" fg:x="11217" fg:w="46"/><text x="50.5506%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="50.4637%" y="69" width="0.2061%" height="15" fill="rgb(235,201,11)" fg:x="11263" fg:w="46"/><text x="50.7567%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="50.6698%" y="69" width="0.3002%" height="15" fill="rgb(207,46,11)" fg:x="11309" fg:w="67"/><text x="50.9628%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="50.9700%" y="69" width="0.0986%" height="15" fill="rgb(241,35,35)" fg:x="11376" fg:w="22"/><text x="51.2630%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.0686%" y="69" width="0.3674%" height="15" fill="rgb(243,32,47)" fg:x="11398" fg:w="82"/><text x="51.3616%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.4360%" y="69" width="0.0986%" height="15" fill="rgb(247,202,23)" fg:x="11480" fg:w="22"/><text x="51.7290%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="51.5346%" y="69" width="0.3674%" height="15" fill="rgb(219,102,11)" fg:x="11502" fg:w="82"/><text x="51.8275%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="51.9020%" y="69" width="0.0986%" height="15" fill="rgb(243,110,44)" fg:x="11584" fg:w="22"/><text x="52.1949%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.0005%" y="69" width="0.3674%" height="15" fill="rgb(222,74,54)" fg:x="11606" fg:w="82"/><text x="52.2935%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.3679%" y="69" width="0.0986%" height="15" fill="rgb(216,99,12)" fg:x="11688" fg:w="22"/><text x="52.6609%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.4665%" y="69" width="0.3674%" height="15" fill="rgb(226,22,26)" fg:x="11710" fg:w="82"/><text x="52.7595%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="52.8339%" y="69" width="0.0986%" height="15" fill="rgb(217,163,10)" fg:x="11792" fg:w="22"/><text x="53.1269%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="52.9325%" y="69" width="0.3674%" height="15" fill="rgb(213,25,53)" fg:x="11814" fg:w="82"/><text x="53.2254%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="53.2999%" y="69" width="0.0986%" height="15" fill="rgb(252,105,26)" fg:x="11896" fg:w="22"/><text x="53.5928%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="53.3984%" y="69" width="0.8871%" height="15" fill="rgb(220,39,43)" fg:x="11918" fg:w="198"/><text x="53.6914%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="54.2856%" y="69" width="0.2688%" height="15" fill="rgb(229,68,48)" fg:x="12116" fg:w="60"/><text x="54.5786%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="54.5544%" y="69" width="0.0672%" height="15" fill="rgb(252,8,32)" fg:x="12176" fg:w="15"/><text x="54.8474%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="54.6216%" y="53" width="0.2061%" height="15" fill="rgb(223,20,43)" fg:x="12191" fg:w="46"/><text x="54.9146%" y="63.50"></text></g><g><title>utf8_validate (165 instructions, 0.74%)</title><rect x="54.8277%" y="53" width="0.7393%" height="15" fill="rgb(229,81,49)" fg:x="12237" fg:w="165"/><text x="55.1207%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="55.5670%" y="37" width="0.1479%" height="15" fill="rgb(236,28,36)" fg:x="12402" fg:w="33"/><text x="55.8600%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="55.5670%" y="53" width="0.1792%" height="15" fill="rgb(249,185,26)" fg:x="12402" fg:w="40"/><text x="55.8600%" y="63.50"></text></g><g><title>memcpy (79 instructions, 0.35%)</title><rect x="55.7462%" y="53" width="0.3540%" height="15" fill="rgb(249,174,33)" fg:x="12442" fg:w="79"/><text x="56.0392%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (372 instructions, 1.67%)</title><rect x="54.6216%" y="69" width="1.6667%" height="15" fill="rgb(233,201,37)" fg:x="12191" fg:w="372"/><text x="54.9146%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="56.2884%" y="69" width="0.0179%" height="15" fill="rgb(221,78,26)" fg:x="12563" fg:w="4"/><text x="56.5813%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="56.3063%" y="69" width="0.1031%" height="15" fill="rgb(250,127,30)" fg:x="12567" fg:w="23"/><text x="56.5993%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="56.4093%" y="69" width="0.2688%" height="15" fill="rgb(230,49,44)" fg:x="12590" fg:w="60"/><text x="56.7023%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="56.6782%" y="69" width="0.2061%" height="15" fill="rgb(229,67,23)" fg:x="12650" fg:w="46"/><text x="56.9711%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="56.8843%" y="53" width="0.2061%" height="15" fill="rgb(249,83,47)" fg:x="12696" fg:w="46"/><text x="57.1772%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="56.8843%" y="69" width="0.3271%" height="15" fill="rgb(215,43,3)" fg:x="12696" fg:w="73"/><text x="57.1772%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="57.2113%" y="69" width="0.2688%" height="15" fill="rgb(238,154,13)" fg:x="12769" fg:w="60"/><text x="57.5043%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="57.4802%" y="53" width="0.2061%" height="15" fill="rgb(219,56,2)" fg:x="12829" fg:w="46"/><text x="57.7731%" y="63.50"></text></g><g><title>utf8_validate (188 instructions, 0.84%)</title><rect x="57.6863%" y="53" width="0.8423%" height="15" fill="rgb(233,0,4)" fg:x="12875" fg:w="188"/><text x="57.9792%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="58.5286%" y="37" width="0.1479%" height="15" fill="rgb(235,30,7)" fg:x="13063" fg:w="33"/><text x="58.8216%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="58.5286%" y="53" width="0.1792%" height="15" fill="rgb(250,79,13)" fg:x="13063" fg:w="40"/><text x="58.8216%" y="63.50"></text></g><g><title>memcpy (141 instructions, 0.63%)</title><rect x="58.7078%" y="53" width="0.6317%" height="15" fill="rgb(211,146,34)" fg:x="13103" fg:w="141"/><text x="59.0008%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (457 instructions, 2.05%)</title><rect x="57.4802%" y="69" width="2.0476%" height="15" fill="rgb(228,22,38)" fg:x="12829" fg:w="457"/><text x="57.7731%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="59.5278%" y="53" width="0.2061%" height="15" fill="rgb(235,168,5)" fg:x="13286" fg:w="46"/><text x="59.8207%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="59.5278%" y="69" width="0.3271%" height="15" fill="rgb(221,155,16)" fg:x="13286" fg:w="73"/><text x="59.8207%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="59.8548%" y="69" width="0.2688%" height="15" fill="rgb(215,215,53)" fg:x="13359" fg:w="60"/><text x="60.1478%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="60.1237%" y="69" width="0.2688%" height="15" fill="rgb(223,4,10)" fg:x="13419" fg:w="60"/><text x="60.4166%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="60.3925%" y="69" width="0.2061%" height="15" fill="rgb(234,103,6)" fg:x="13479" fg:w="46"/><text x="60.6855%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="60.5986%" y="69" width="0.2061%" height="15" fill="rgb(227,97,0)" fg:x="13525" fg:w="46"/><text x="60.8916%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="60.8047%" y="69" width="0.3002%" height="15" fill="rgb(234,150,53)" fg:x="13571" fg:w="67"/><text x="61.0977%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.1049%" y="69" width="0.0986%" height="15" fill="rgb(228,201,54)" fg:x="13638" fg:w="22"/><text x="61.3979%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.2035%" y="69" width="0.3674%" height="15" fill="rgb(222,22,37)" fg:x="13660" fg:w="82"/><text x="61.4964%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="61.5709%" y="69" width="0.0986%" height="15" fill="rgb(237,53,32)" fg:x="13742" fg:w="22"/><text x="61.8638%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="61.6694%" y="69" width="0.3674%" height="15" fill="rgb(233,25,53)" fg:x="13764" fg:w="82"/><text x="61.9624%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.0368%" y="69" width="0.0986%" height="15" fill="rgb(210,40,34)" fg:x="13846" fg:w="22"/><text x="62.3298%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.1354%" y="69" width="0.3674%" height="15" fill="rgb(241,220,44)" fg:x="13868" fg:w="82"/><text x="62.4284%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.5028%" y="69" width="0.0986%" height="15" fill="rgb(235,28,35)" fg:x="13950" fg:w="22"/><text x="62.7958%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="62.6014%" y="69" width="0.3674%" height="15" fill="rgb(210,56,17)" fg:x="13972" fg:w="82"/><text x="62.8943%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="62.9688%" y="69" width="0.0986%" height="15" fill="rgb(224,130,29)" fg:x="14054" fg:w="22"/><text x="63.2617%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="63.0673%" y="69" width="0.3674%" height="15" fill="rgb(235,212,8)" fg:x="14076" fg:w="82"/><text x="63.3603%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="63.4347%" y="69" width="0.0986%" height="15" fill="rgb(223,33,50)" fg:x="14158" fg:w="22"/><text x="63.7277%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="63.5333%" y="69" width="0.8871%" height="15" fill="rgb(219,149,13)" fg:x="14180" fg:w="198"/><text x="63.8263%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="64.4204%" y="69" width="0.2688%" height="15" fill="rgb(250,156,29)" fg:x="14378" fg:w="60"/><text x="64.7134%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="64.6893%" y="69" width="0.0672%" height="15" fill="rgb(216,193,19)" fg:x="14438" fg:w="15"/><text x="64.9822%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="64.7565%" y="53" width="0.2061%" height="15" fill="rgb(216,135,14)" fg:x="14453" fg:w="46"/><text x="65.0495%" y="63.50"></text></g><g><title>utf8_validate (160 instructions, 0.72%)</title><rect x="64.9626%" y="53" width="0.7169%" height="15" fill="rgb(241,47,5)" fg:x="14499" fg:w="160"/><text x="65.2556%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="65.6795%" y="37" width="0.1479%" height="15" fill="rgb(233,42,35)" fg:x="14659" fg:w="33"/><text x="65.9724%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="65.6795%" y="53" width="0.1792%" height="15" fill="rgb(231,13,6)" fg:x="14659" fg:w="40"/><text x="65.9724%" y="63.50"></text></g><g><title>memcpy (110 instructions, 0.49%)</title><rect x="65.8587%" y="53" width="0.4929%" height="15" fill="rgb(207,181,40)" fg:x="14699" fg:w="110"/><text x="66.1517%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (398 instructions, 1.78%)</title><rect x="64.7565%" y="69" width="1.7832%" height="15" fill="rgb(254,173,49)" fg:x="14453" fg:w="398"/><text x="65.0495%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="66.5397%" y="69" width="0.0179%" height="15" fill="rgb(221,1,38)" fg:x="14851" fg:w="4"/><text x="66.8327%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="66.5576%" y="69" width="0.1031%" height="15" fill="rgb(206,124,46)" fg:x="14855" fg:w="23"/><text x="66.8506%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="66.6607%" y="69" width="0.2688%" height="15" fill="rgb(249,21,11)" fg:x="14878" fg:w="60"/><text x="66.9537%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="66.9295%" y="69" width="0.2061%" height="15" fill="rgb(222,201,40)" fg:x="14938" fg:w="46"/><text x="67.2225%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="67.1356%" y="53" width="0.2061%" height="15" fill="rgb(235,61,29)" fg:x="14984" fg:w="46"/><text x="67.4286%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="67.1356%" y="69" width="0.3271%" height="15" fill="rgb(219,207,3)" fg:x="14984" fg:w="73"/><text x="67.4286%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="67.4627%" y="69" width="0.2688%" height="15" fill="rgb(222,56,46)" fg:x="15057" fg:w="60"/><text x="67.7557%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="67.7315%" y="53" width="0.2061%" height="15" fill="rgb(239,76,54)" fg:x="15117" fg:w="46"/><text x="68.0245%" y="63.50"></text></g><g><title>utf8_validate (199 instructions, 0.89%)</title><rect x="67.9376%" y="53" width="0.8916%" height="15" fill="rgb(231,124,27)" fg:x="15163" fg:w="199"/><text x="68.2306%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="68.8292%" y="37" width="0.1479%" height="15" fill="rgb(249,195,6)" fg:x="15362" fg:w="33"/><text x="69.1222%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h9c03ea53d9f7bc09 (40 instructions, 0.18%)</title><rect x="68.8292%" y="53" width="0.1792%" height="15" fill="rgb(237,174,47)" fg:x="15362" fg:w="40"/><text x="69.1222%" y="63.50"></text></g><g><title>memcpy (145 instructions, 0.65%)</title><rect x="69.0085%" y="53" width="0.6497%" height="15" fill="rgb(206,201,31)" fg:x="15402" fg:w="145"/><text x="69.3014%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (472 instructions, 2.11%)</title><rect x="67.7315%" y="69" width="2.1148%" height="15" fill="rgb(231,57,52)" fg:x="15117" fg:w="472"/><text x="68.0245%" y="79.50">@..</text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="69.8463%" y="53" width="0.2061%" height="15" fill="rgb(248,177,22)" fg:x="15589" fg:w="46"/><text x="70.1393%" y="63.50"></text></g><g><title>find_field (73 instructions, 0.33%)</title><rect x="69.8463%" y="69" width="0.3271%" height="15" fill="rgb(215,211,37)" fg:x="15589" fg:w="73"/><text x="70.1393%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="70.1734%" y="69" width="0.2688%" height="15" fill="rgb(241,128,51)" fg:x="15662" fg:w="60"/><text x="70.4664%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="70.4422%" y="69" width="0.2688%" height="15" fill="rgb(227,165,31)" fg:x="15722" fg:w="60"/><text x="70.7352%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="70.7111%" y="69" width="0.2061%" height="15" fill="rgb(228,167,24)" fg:x="15782" fg:w="46"/><text x="71.0040%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="70.9172%" y="69" width="0.2061%" height="15" fill="rgb(228,143,12)" fg:x="15828" fg:w="46"/><text x="71.2101%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="71.1233%" y="69" width="0.3002%" height="15" fill="rgb(249,149,8)" fg:x="15874" fg:w="67"/><text x="71.4162%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.4235%" y="69" width="0.0986%" height="15" fill="rgb(243,35,44)" fg:x="15941" fg:w="22"/><text x="71.7164%" y="79.50"></text></g><g><title>skip_leb128 (82 instructions, 0.37%)</title><rect x="71.5220%" y="69" width="0.3674%" height="15" fill="rgb(246,89,9)" fg:x="15963" fg:w="82"/><text x="71.8150%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="71.8894%" y="69" width="0.0986%" height="15" fill="rgb(233,213,13)" fg:x="16045" fg:w="22"/><text x="72.1824%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="71.9880%" y="69" width="0.8871%" height="15" fill="rgb(233,141,41)" fg:x="16067" fg:w="198"/><text x="72.2810%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="72.8751%" y="69" width="0.2688%" height="15" fill="rgb(239,167,4)" fg:x="16265" fg:w="60"/><text x="73.1681%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="73.1440%" y="69" width="0.0672%" height="15" fill="rgb(209,217,16)" fg:x="16325" fg:w="15"/><text x="73.4369%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="73.2112%" y="69" width="0.0179%" height="15" fill="rgb(219,88,35)" fg:x="16340" fg:w="4"/><text x="73.5041%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="73.2291%" y="69" width="0.1031%" height="15" fill="rgb(220,193,23)" fg:x="16344" fg:w="23"/><text x="73.5221%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="73.3321%" y="53" width="0.8871%" height="15" fill="rgb(230,90,52)" fg:x="16367" fg:w="198"/><text x="73.6251%" y="63.50"></text></g><g><title>find_field (225 instructions, 1.01%)</title><rect x="73.3321%" y="69" width="1.0081%" height="15" fill="rgb(252,106,19)" fg:x="16367" fg:w="225"/><text x="73.6251%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.3402%" y="69" width="0.2688%" height="15" fill="rgb(206,74,20)" fg:x="16592" fg:w="60"/><text x="74.6332%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="74.6091%" y="69" width="0.2688%" height="15" fill="rgb(230,138,44)" fg:x="16652" fg:w="60"/><text x="74.9020%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="74.8779%" y="69" width="0.2061%" height="15" fill="rgb(235,182,43)" fg:x="16712" fg:w="46"/><text x="75.1709%" y="79.50"></text></g><g><title>leb128_decode (46 instructions, 0.21%)</title><rect x="75.0840%" y="69" width="0.2061%" height="15" fill="rgb(242,16,51)" fg:x="16758" fg:w="46"/><text x="75.3770%" y="79.50"></text></g><g><title>skip_leb128 (67 instructions, 0.30%)</title><rect x="75.2901%" y="69" width="0.3002%" height="15" fill="rgb(248,9,4)" fg:x="16804" fg:w="67"/><text x="75.5831%" y="79.50"></text></g><g><title>skip_leb128 (22 instructions, 0.10%)</title><rect x="75.5903%" y="69" width="0.0986%" height="15" fill="rgb(210,31,22)" fg:x="16871" fg:w="22"/><text x="75.8833%" y="79.50"></text></g><g><title>leb128_decode (198 instructions, 0.89%)</title><rect x="75.6889%" y="69" width="0.8871%" height="15" fill="rgb(239,54,39)" fg:x="16893" fg:w="198"/><text x="75.9818%" y="79.50"></text></g><g><title>sleb128_decode (60 instructions, 0.27%)</title><rect x="76.5760%" y="69" width="0.2688%" height="15" fill="rgb(230,99,41)" fg:x="17091" fg:w="60"/><text x="76.8690%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="76.8448%" y="69" width="0.0672%" height="15" fill="rgb(253,106,12)" fg:x="17151" fg:w="15"/><text x="77.1378%" y="79.50"></text></g><g><title>@deserialize_go&lt;u&gt; (20 instructions, 0.09%)</title><rect x="76.9120%" y="69" width="0.0896%" height="15" fill="rgb(213,46,41)" fg:x="17166" fg:w="20"/><text x="77.2050%" y="79.50"></text></g><g><title>skip_fields (4 instructions, 0.02%)</title><rect x="77.0017%" y="69" width="0.0179%" height="15" fill="rgb(215,133,35)" fg:x="17186" fg:w="4"/><text x="77.2946%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (13,233 instructions, 59.29%)</title><rect x="28.6572%" y="85" width="59.2903%" height="15" fill="rgb(213,28,5)" fg:x="6396" fg:w="13233"/><text x="28.9502%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Con..</text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.07%)</title><rect x="87.9475%" y="85" width="0.0672%" height="15" fill="rgb(215,77,49)" fg:x="19629" fg:w="15"/><text x="88.2405%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="88.0147%" y="69" width="0.1479%" height="15" fill="rgb(248,100,22)" fg:x="19644" fg:w="33"/><text x="88.3077%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="88.1626%" y="69" width="0.0672%" height="15" fill="rgb(208,67,9)" fg:x="19677" fg:w="15"/><text x="88.4555%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="88.2298%" y="69" width="0.0717%" height="15" fill="rgb(219,133,21)" fg:x="19692" fg:w="16"/><text x="88.5227%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.07%)</title><rect x="88.3014%" y="69" width="0.0672%" height="15" fill="rgb(246,46,29)" fg:x="19708" fg:w="15"/><text x="88.5944%" y="79.50"></text></g><g><title>opt_project (18 instructions, 0.08%)</title><rect x="88.3687%" y="53" width="0.0806%" height="15" fill="rgb(246,185,52)" fg:x="19723" fg:w="18"/><text x="88.6616%" y="63.50"></text></g><g><title>Blob.compare_eq (679 instructions, 3.04%)</title><rect x="88.4493%" y="37" width="3.0423%" height="15" fill="rgb(252,136,11)" fg:x="19741" fg:w="679"/><text x="88.7423%" y="47.50">Bl..</text></g><g><title>anon-func-151.35 (683 instructions, 3.06%)</title><rect x="88.4493%" y="53" width="3.0602%" height="15" fill="rgb(219,138,53)" fg:x="19741" fg:w="683"/><text x="88.7423%" y="63.50">an..</text></g><g><title>some (731 instructions, 3.28%)</title><rect x="88.3687%" y="69" width="3.2752%" height="15" fill="rgb(211,51,23)" fg:x="19723" fg:w="731"/><text x="88.6616%" y="79.50">so..</text></g><g><title>rec (9 instructions, 0.04%)</title><rect x="91.6439%" y="69" width="0.0403%" height="15" fill="rgb(247,221,28)" fg:x="20454" fg:w="9"/><text x="91.9369%" y="79.50"></text></g><g><title>Nat-&gt;Nat64 (13 instructions, 0.06%)</title><rect x="91.6842%" y="69" width="0.0582%" height="15" fill="rgb(251,222,45)" fg:x="20463" fg:w="13"/><text x="91.9772%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="91.7425%" y="69" width="0.0672%" height="15" fill="rgb(217,162,53)" fg:x="20476" fg:w="15"/><text x="92.0354%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="91.8097%" y="69" width="0.0582%" height="15" fill="rgb(229,93,14)" fg:x="20491" fg:w="13"/><text x="92.1026%" y="79.50"></text></g><g><title>to_2_tuple (23 instructions, 0.10%)</title><rect x="91.8679%" y="69" width="0.1031%" height="15" fill="rgb(209,67,49)" fg:x="20504" fg:w="23"/><text x="92.1609%" y="79.50"></text></g><g><title>opt_inject (18 instructions, 0.08%)</title><rect x="91.9710%" y="69" width="0.0806%" height="15" fill="rgb(213,87,29)" fg:x="20527" fg:w="18"/><text x="92.2639%" y="79.50"></text></g><g><title>B_add (24 instructions, 0.11%)</title><rect x="92.0516%" y="69" width="0.1075%" height="15" fill="rgb(205,151,52)" fg:x="20545" fg:w="24"/><text x="92.3446%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.07%)</title><rect x="92.1591%" y="69" width="0.0672%" height="15" fill="rgb(253,215,39)" fg:x="20569" fg:w="15"/><text x="92.4521%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (15 instructions, 0.07%)</title><rect x="92.2264%" y="69" width="0.0672%" height="15" fill="rgb(221,220,41)" fg:x="20584" fg:w="15"/><text x="92.5193%" y="79.50"></text></g><g><title>box_i64 (13 instructions, 0.06%)</title><rect x="92.2936%" y="69" width="0.0582%" height="15" fill="rgb(218,133,21)" fg:x="20599" fg:w="13"/><text x="92.5865%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="92.3518%" y="53" width="0.0717%" height="15" fill="rgb(221,193,43)" fg:x="20612" fg:w="16"/><text x="92.6448%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (26 instructions, 0.12%)</title><rect x="92.4235%" y="53" width="0.1165%" height="15" fill="rgb(240,128,52)" fg:x="20628" fg:w="26"/><text x="92.7165%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="92.5400%" y="53" width="0.1344%" height="15" fill="rgb(253,114,12)" fg:x="20654" fg:w="30"/><text x="92.8330%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="92.6744%" y="53" width="0.1479%" height="15" fill="rgb(215,223,47)" fg:x="20684" fg:w="33"/><text x="92.9674%" y="63.50"></text></g><g><title>memcpy (130 instructions, 0.58%)</title><rect x="92.8223%" y="53" width="0.5825%" height="15" fill="rgb(248,225,23)" fg:x="20717" fg:w="130"/><text x="93.1152%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.15%)</title><rect x="93.4047%" y="53" width="0.1479%" height="15" fill="rgb(250,108,0)" fg:x="20847" fg:w="33"/><text x="93.6977%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.5526%" y="53" width="0.0403%" height="15" fill="rgb(228,208,7)" fg:x="20880" fg:w="9"/><text x="93.8455%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.07%)</title><rect x="93.5929%" y="53" width="0.0717%" height="15" fill="rgb(244,45,10)" fg:x="20889" fg:w="16"/><text x="93.8859%" y="63.50"></text></g><g><title>leb128_encode (9 instructions, 0.04%)</title><rect x="93.6646%" y="37" width="0.0403%" height="15" fill="rgb(207,125,25)" fg:x="20905" fg:w="9"/><text x="93.9576%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (32 instructions, 0.14%)</title><rect x="93.6646%" y="53" width="0.1434%" height="15" fill="rgb(210,195,18)" fg:x="20905" fg:w="32"/><text x="93.9576%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (30 instructions, 0.13%)</title><rect x="93.8080%" y="53" width="0.1344%" height="15" fill="rgb(249,80,12)" fg:x="20937" fg:w="30"/><text x="94.1009%" y="63.50"></text></g><g><title>reply_with_data (90 instructions, 0.40%)</title><rect x="93.9424%" y="53" width="0.4032%" height="15" fill="rgb(221,65,9)" fg:x="20967" fg:w="90"/><text x="94.2353%" y="63.50"></text></g><g><title>$lambda.37 (601 instructions, 2.69%)</title><rect x="92.3518%" y="69" width="2.6928%" height="15" fill="rgb(235,49,36)" fg:x="20612" fg:w="601"/><text x="92.6448%" y="79.50">$..</text></g><g><title>$lambda.1 (1,679 instructions, 7.52%)</title><rect x="88.0147%" y="85" width="7.5227%" height="15" fill="rgb(225,32,20)" fg:x="19644" fg:w="1679"/><text x="88.3077%" y="95.50">$lambda.1</text></g><g><title>schedule_copying_gc (45 instructions, 0.20%)</title><rect x="95.5374%" y="85" width="0.2016%" height="15" fill="rgb(215,141,46)" fg:x="21323" fg:w="45"/><text x="95.8304%" y="95.50"></text></g><g><title>trans_state4 (13 instructions, 0.06%)</title><rect x="95.7391%" y="85" width="0.0582%" height="15" fill="rgb(250,160,47)" fg:x="21368" fg:w="13"/><text x="96.0320%" y="95.50"></text></g><g><title>all (22,319 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="22319"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (22,319 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="22319"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>