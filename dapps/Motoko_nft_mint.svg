<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="29810"><g><title>trans_state5 (10 instructions, 0.03%)</title><rect x="0.0000%" y="85" width="0.0335%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="0.0335%" y="85" width="0.1879%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="56"/><text x="0.3265%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="0.2214%" y="69" width="0.1677%" height="15" fill="rgb(221,193,54)" fg:x="66" fg:w="50"/><text x="0.5144%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="0.3891%" y="69" width="0.1879%" height="15" fill="rgb(248,212,6)" fg:x="116" fg:w="56"/><text x="0.6821%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="0.5770%" y="69" width="0.2147%" height="15" fill="rgb(208,68,35)" fg:x="172" fg:w="64"/><text x="0.8700%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="0.7917%" y="69" width="0.2147%" height="15" fill="rgb(232,128,0)" fg:x="236" fg:w="64"/><text x="1.0846%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="1.0064%" y="69" width="0.0403%" height="15" fill="rgb(207,160,47)" fg:x="300" fg:w="12"/><text x="1.2993%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="1.0466%" y="69" width="0.2147%" height="15" fill="rgb(228,23,34)" fg:x="312" fg:w="64"/><text x="1.3396%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="1.2613%" y="69" width="0.1677%" height="15" fill="rgb(218,30,26)" fg:x="376" fg:w="50"/><text x="1.5543%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="1.4291%" y="69" width="0.7179%" height="15" fill="rgb(220,122,19)" fg:x="426" fg:w="214"/><text x="1.7220%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="2.1469%" y="69" width="0.2147%" height="15" fill="rgb(250,228,42)" fg:x="640" fg:w="64"/><text x="2.4399%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="2.3616%" y="69" width="0.0403%" height="15" fill="rgb(240,193,28)" fg:x="704" fg:w="12"/><text x="2.6546%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="2.4019%" y="69" width="0.7179%" height="15" fill="rgb(216,20,37)" fg:x="716" fg:w="214"/><text x="2.6948%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="3.1198%" y="69" width="0.2147%" height="15" fill="rgb(206,188,39)" fg:x="930" fg:w="64"/><text x="3.4127%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="3.3345%" y="69" width="0.0403%" height="15" fill="rgb(217,207,13)" fg:x="994" fg:w="12"/><text x="3.6274%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="3.3747%" y="69" width="0.7179%" height="15" fill="rgb(231,73,38)" fg:x="1006" fg:w="214"/><text x="3.6677%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.0926%" y="69" width="0.2147%" height="15" fill="rgb(225,20,46)" fg:x="1220" fg:w="64"/><text x="4.3856%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="4.3073%" y="69" width="0.0403%" height="15" fill="rgb(210,31,41)" fg:x="1284" fg:w="12"/><text x="4.6002%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.3475%" y="69" width="0.2147%" height="15" fill="rgb(221,200,47)" fg:x="1296" fg:w="64"/><text x="4.6405%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.5622%" y="69" width="0.2147%" height="15" fill="rgb(226,26,5)" fg:x="1360" fg:w="64"/><text x="4.8552%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="4.7769%" y="69" width="0.0403%" height="15" fill="rgb(249,33,26)" fg:x="1424" fg:w="12"/><text x="5.0699%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.8172%" y="69" width="0.2147%" height="15" fill="rgb(235,183,28)" fg:x="1436" fg:w="64"/><text x="5.1101%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.0319%" y="69" width="0.2147%" height="15" fill="rgb(221,5,38)" fg:x="1500" fg:w="64"/><text x="5.3248%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="5.2466%" y="69" width="0.0403%" height="15" fill="rgb(247,18,42)" fg:x="1564" fg:w="12"/><text x="5.5395%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.2868%" y="69" width="0.2147%" height="15" fill="rgb(241,131,45)" fg:x="1576" fg:w="64"/><text x="5.5798%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="5.5015%" y="69" width="0.1677%" height="15" fill="rgb(249,31,29)" fg:x="1640" fg:w="50"/><text x="5.7945%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="5.6692%" y="69" width="0.1677%" height="15" fill="rgb(225,111,53)" fg:x="1690" fg:w="50"/><text x="5.9622%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.8370%" y="69" width="0.2147%" height="15" fill="rgb(238,160,17)" fg:x="1740" fg:w="64"/><text x="6.1299%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="6.0517%" y="69" width="0.0403%" height="15" fill="rgb(214,148,48)" fg:x="1804" fg:w="12"/><text x="6.3446%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="6.0919%" y="69" width="0.1677%" height="15" fill="rgb(232,36,49)" fg:x="1816" fg:w="50"/><text x="6.3849%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.2596%" y="69" width="0.2147%" height="15" fill="rgb(209,103,24)" fg:x="1866" fg:w="64"/><text x="6.5526%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="6.4743%" y="69" width="0.0403%" height="15" fill="rgb(229,88,8)" fg:x="1930" fg:w="12"/><text x="6.7673%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.5146%" y="69" width="0.2147%" height="15" fill="rgb(213,181,19)" fg:x="1942" fg:w="64"/><text x="6.8076%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="6.7293%" y="69" width="0.1677%" height="15" fill="rgb(254,191,54)" fg:x="2006" fg:w="50"/><text x="7.0223%" y="79.50"></text></g><g><title>leb128_decode (173 instructions, 0.58%)</title><rect x="6.8970%" y="69" width="0.5803%" height="15" fill="rgb(241,83,37)" fg:x="2056" fg:w="173"/><text x="7.1900%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="7.4774%" y="69" width="0.2147%" height="15" fill="rgb(233,36,39)" fg:x="2229" fg:w="64"/><text x="7.7703%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="7.6920%" y="69" width="0.0403%" height="15" fill="rgb(226,3,54)" fg:x="2293" fg:w="12"/><text x="7.9850%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="7.7323%" y="69" width="0.7179%" height="15" fill="rgb(245,192,40)" fg:x="2305" fg:w="214"/><text x="8.0253%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="8.4502%" y="69" width="0.2147%" height="15" fill="rgb(238,167,29)" fg:x="2519" fg:w="64"/><text x="8.7432%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="8.6649%" y="69" width="0.0403%" height="15" fill="rgb(232,182,51)" fg:x="2583" fg:w="12"/><text x="8.9578%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="8.7051%" y="69" width="0.7179%" height="15" fill="rgb(231,60,39)" fg:x="2595" fg:w="214"/><text x="8.9981%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="9.4230%" y="69" width="0.2147%" height="15" fill="rgb(208,69,12)" fg:x="2809" fg:w="64"/><text x="9.7160%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="9.6377%" y="69" width="0.0403%" height="15" fill="rgb(235,93,37)" fg:x="2873" fg:w="12"/><text x="9.9307%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="9.6780%" y="69" width="0.7179%" height="15" fill="rgb(213,116,39)" fg:x="2885" fg:w="214"/><text x="9.9709%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="10.3958%" y="69" width="0.2147%" height="15" fill="rgb(222,207,29)" fg:x="3099" fg:w="64"/><text x="10.6888%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="10.6105%" y="69" width="0.0403%" height="15" fill="rgb(206,96,30)" fg:x="3163" fg:w="12"/><text x="10.9035%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="10.6508%" y="69" width="0.7179%" height="15" fill="rgb(218,138,4)" fg:x="3175" fg:w="214"/><text x="10.9438%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="11.3687%" y="69" width="0.2147%" height="15" fill="rgb(250,191,14)" fg:x="3389" fg:w="64"/><text x="11.6616%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="11.5834%" y="69" width="0.0403%" height="15" fill="rgb(239,60,40)" fg:x="3453" fg:w="12"/><text x="11.8763%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="11.6236%" y="69" width="0.7179%" height="15" fill="rgb(206,27,48)" fg:x="3465" fg:w="214"/><text x="11.9166%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="12.3415%" y="69" width="0.2147%" height="15" fill="rgb(225,35,8)" fg:x="3679" fg:w="64"/><text x="12.6345%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="12.5562%" y="69" width="0.0403%" height="15" fill="rgb(250,213,24)" fg:x="3743" fg:w="12"/><text x="12.8492%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="12.5964%" y="69" width="0.7179%" height="15" fill="rgb(247,123,22)" fg:x="3755" fg:w="214"/><text x="12.8894%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="13.3143%" y="69" width="0.2147%" height="15" fill="rgb(231,138,38)" fg:x="3969" fg:w="64"/><text x="13.6073%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="13.5290%" y="69" width="0.0403%" height="15" fill="rgb(231,145,46)" fg:x="4033" fg:w="12"/><text x="13.8220%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="13.5693%" y="69" width="0.2147%" height="15" fill="rgb(251,118,11)" fg:x="4045" fg:w="64"/><text x="13.8622%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="13.7840%" y="69" width="0.1677%" height="15" fill="rgb(217,147,25)" fg:x="4109" fg:w="50"/><text x="14.0769%" y="79.50"></text></g><g><title>leb128_decode (173 instructions, 0.58%)</title><rect x="13.9517%" y="69" width="0.5803%" height="15" fill="rgb(247,81,37)" fg:x="4159" fg:w="173"/><text x="14.2447%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="14.5320%" y="69" width="0.2147%" height="15" fill="rgb(209,12,38)" fg:x="4332" fg:w="64"/><text x="14.8250%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="14.7467%" y="69" width="0.0403%" height="15" fill="rgb(227,1,9)" fg:x="4396" fg:w="12"/><text x="15.0397%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="14.7870%" y="69" width="0.7179%" height="15" fill="rgb(248,47,43)" fg:x="4408" fg:w="214"/><text x="15.0800%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.5049%" y="69" width="0.2147%" height="15" fill="rgb(221,10,30)" fg:x="4622" fg:w="64"/><text x="15.7978%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="15.7196%" y="69" width="0.0403%" height="15" fill="rgb(210,229,1)" fg:x="4686" fg:w="12"/><text x="16.0125%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.7598%" y="69" width="0.2147%" height="15" fill="rgb(222,148,37)" fg:x="4698" fg:w="64"/><text x="16.0528%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.9745%" y="69" width="0.2147%" height="15" fill="rgb(234,67,33)" fg:x="4762" fg:w="64"/><text x="16.2675%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.1892%" y="69" width="0.2147%" height="15" fill="rgb(247,98,35)" fg:x="4826" fg:w="64"/><text x="16.4822%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.4039%" y="69" width="0.2147%" height="15" fill="rgb(247,138,52)" fg:x="4890" fg:w="64"/><text x="16.6969%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.6186%" y="69" width="0.2147%" height="15" fill="rgb(213,79,30)" fg:x="4954" fg:w="64"/><text x="16.9116%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.8333%" y="69" width="0.2147%" height="15" fill="rgb(246,177,23)" fg:x="5018" fg:w="64"/><text x="17.1262%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.0480%" y="69" width="0.2147%" height="15" fill="rgb(230,62,27)" fg:x="5082" fg:w="64"/><text x="17.3409%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="17.2627%" y="69" width="0.1677%" height="15" fill="rgb(216,154,8)" fg:x="5146" fg:w="50"/><text x="17.5556%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.4304%" y="69" width="0.2147%" height="15" fill="rgb(244,35,45)" fg:x="5196" fg:w="64"/><text x="17.7234%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (17 instructions, 0.06%)</title><rect x="17.6451%" y="69" width="0.0570%" height="15" fill="rgb(251,115,12)" fg:x="5260" fg:w="17"/><text x="17.9381%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.7021%" y="69" width="0.2147%" height="15" fill="rgb(240,54,50)" fg:x="5277" fg:w="64"/><text x="17.9951%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53a1429ca62777c2 (12 instructions, 0.04%)</title><rect x="17.9168%" y="69" width="0.0403%" height="15" fill="rgb(233,84,52)" fg:x="5341" fg:w="12"/><text x="18.2098%" y="79.50"></text></g><g><title>parse_idl_header (6,851 instructions, 22.98%)</title><rect x="0.2214%" y="85" width="22.9822%" height="15" fill="rgb(207,117,47)" fg:x="66" fg:w="6851"/><text x="0.5144%" y="95.50">parse_idl_header</text></g><g><title>memset (6 instructions, 0.02%)</title><rect x="23.2036%" y="69" width="0.0201%" height="15" fill="rgb(249,43,39)" fg:x="6917" fg:w="6"/><text x="23.4966%" y="79.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.05%)</title><rect x="23.2036%" y="85" width="0.0503%" height="15" fill="rgb(209,38,44)" fg:x="6917" fg:w="15"/><text x="23.4966%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="23.2539%" y="85" width="0.1677%" height="15" fill="rgb(236,212,23)" fg:x="6932" fg:w="50"/><text x="23.5469%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="23.4217%" y="85" width="0.2147%" height="15" fill="rgb(242,79,21)" fg:x="6982" fg:w="64"/><text x="23.7146%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="23.6364%" y="69" width="0.1677%" height="15" fill="rgb(211,96,35)" fg:x="7046" fg:w="50"/><text x="23.9293%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="23.8041%" y="69" width="0.1879%" height="15" fill="rgb(253,215,40)" fg:x="7096" fg:w="56"/><text x="24.0971%" y="79.50"></text></g><g><title>memcpy (167 instructions, 0.56%)</title><rect x="23.9919%" y="69" width="0.5602%" height="15" fill="rgb(211,81,21)" fg:x="7152" fg:w="167"/><text x="24.2849%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (380 instructions, 1.27%)</title><rect x="23.6364%" y="85" width="1.2747%" height="15" fill="rgb(208,190,38)" fg:x="7046" fg:w="380"/><text x="23.9293%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="24.9111%" y="85" width="0.2147%" height="15" fill="rgb(235,213,38)" fg:x="7426" fg:w="64"/><text x="25.2041%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.1258%" y="69" width="0.2147%" height="15" fill="rgb(237,122,38)" fg:x="7490" fg:w="64"/><text x="25.4188%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.3405%" y="69" width="0.2147%" height="15" fill="rgb(244,218,35)" fg:x="7554" fg:w="64"/><text x="25.6335%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="25.5552%" y="69" width="0.1677%" height="15" fill="rgb(240,68,47)" fg:x="7618" fg:w="50"/><text x="25.8482%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::h817c463cc2b856af (60 instructions, 0.20%)</title><rect x="25.7229%" y="69" width="0.2013%" height="15" fill="rgb(210,16,53)" fg:x="7668" fg:w="60"/><text x="26.0159%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.9242%" y="69" width="0.2147%" height="15" fill="rgb(235,124,12)" fg:x="7728" fg:w="64"/><text x="26.2172%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="26.1389%" y="69" width="0.1677%" height="15" fill="rgb(224,169,11)" fg:x="7792" fg:w="50"/><text x="26.4318%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="26.3066%" y="53" width="0.7179%" height="15" fill="rgb(250,166,2)" fg:x="7842" fg:w="214"/><text x="26.5996%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="26.3066%" y="69" width="0.8386%" height="15" fill="rgb(242,216,29)" fg:x="7842" fg:w="250"/><text x="26.5996%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.1453%" y="69" width="0.2147%" height="15" fill="rgb(230,116,27)" fg:x="8092" fg:w="64"/><text x="27.4382%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.3599%" y="53" width="0.2147%" height="15" fill="rgb(228,99,48)" fg:x="8156" fg:w="64"/><text x="27.6529%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.5746%" y="53" width="0.2147%" height="15" fill="rgb(253,11,6)" fg:x="8220" fg:w="64"/><text x="27.8676%" y="63.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="27.7893%" y="53" width="0.1677%" height="15" fill="rgb(247,143,39)" fg:x="8284" fg:w="50"/><text x="28.0823%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="27.9571%" y="53" width="0.1879%" height="15" fill="rgb(236,97,10)" fg:x="8334" fg:w="56"/><text x="28.2500%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.52%)</title><rect x="28.1449%" y="53" width="0.5233%" height="15" fill="rgb(233,208,19)" fg:x="8390" fg:w="156"/><text x="28.4379%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (513 instructions, 1.72%)</title><rect x="27.3599%" y="69" width="1.7209%" height="15" fill="rgb(216,164,2)" fg:x="8156" fg:w="513"/><text x="27.6529%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="29.0808%" y="53" width="0.7179%" height="15" fill="rgb(220,129,5)" fg:x="8669" fg:w="214"/><text x="29.3738%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="29.0808%" y="69" width="0.8386%" height="15" fill="rgb(242,17,10)" fg:x="8669" fg:w="250"/><text x="29.3738%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="29.9195%" y="69" width="0.2147%" height="15" fill="rgb(242,107,0)" fg:x="8919" fg:w="64"/><text x="30.2125%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.1342%" y="69" width="0.2147%" height="15" fill="rgb(251,28,31)" fg:x="8983" fg:w="64"/><text x="30.4272%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.3489%" y="69" width="0.2147%" height="15" fill="rgb(233,223,10)" fg:x="9047" fg:w="64"/><text x="30.6418%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="30.5636%" y="69" width="0.1677%" height="15" fill="rgb(215,21,27)" fg:x="9111" fg:w="50"/><text x="30.8565%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::h817c463cc2b856af (60 instructions, 0.20%)</title><rect x="30.7313%" y="69" width="0.2013%" height="15" fill="rgb(232,23,21)" fg:x="9161" fg:w="60"/><text x="31.0243%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.9326%" y="69" width="0.2147%" height="15" fill="rgb(244,5,23)" fg:x="9221" fg:w="64"/><text x="31.2255%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="31.1473%" y="69" width="0.1677%" height="15" fill="rgb(226,81,46)" fg:x="9285" fg:w="50"/><text x="31.4402%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="31.3150%" y="53" width="0.1677%" height="15" fill="rgb(247,70,30)" fg:x="9335" fg:w="50"/><text x="31.6080%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="31.3150%" y="69" width="0.2885%" height="15" fill="rgb(212,68,19)" fg:x="9335" fg:w="86"/><text x="31.6080%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="31.6035%" y="69" width="0.2147%" height="15" fill="rgb(240,187,13)" fg:x="9421" fg:w="64"/><text x="31.8965%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="31.8182%" y="53" width="0.1677%" height="15" fill="rgb(223,113,26)" fg:x="9485" fg:w="50"/><text x="32.1112%" y="63.50"></text></g><g><title>utf8_validate (162 instructions, 0.54%)</title><rect x="31.9859%" y="53" width="0.5434%" height="15" fill="rgb(206,192,2)" fg:x="9535" fg:w="162"/><text x="32.2789%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="32.5294%" y="37" width="0.1879%" height="15" fill="rgb(241,108,4)" fg:x="9697" fg:w="56"/><text x="32.8223%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="32.5294%" y="53" width="0.2315%" height="15" fill="rgb(247,173,49)" fg:x="9697" fg:w="69"/><text x="32.8223%" y="63.50"></text></g><g><title>memcpy (72 instructions, 0.24%)</title><rect x="32.7608%" y="53" width="0.2415%" height="15" fill="rgb(224,114,35)" fg:x="9766" fg:w="72"/><text x="33.0538%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (422 instructions, 1.42%)</title><rect x="31.8182%" y="69" width="1.4156%" height="15" fill="rgb(245,159,27)" fg:x="9485" fg:w="422"/><text x="32.1112%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="33.2338%" y="53" width="0.1677%" height="15" fill="rgb(245,172,44)" fg:x="9907" fg:w="50"/><text x="33.5268%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="33.2338%" y="69" width="0.2885%" height="15" fill="rgb(236,23,11)" fg:x="9907" fg:w="86"/><text x="33.5268%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="33.5223%" y="69" width="0.2147%" height="15" fill="rgb(205,117,38)" fg:x="9993" fg:w="64"/><text x="33.8153%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="33.7370%" y="69" width="0.2147%" height="15" fill="rgb(237,72,25)" fg:x="10057" fg:w="64"/><text x="34.0300%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="33.9517%" y="69" width="0.1677%" height="15" fill="rgb(244,70,9)" fg:x="10121" fg:w="50"/><text x="34.2447%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="34.1194%" y="69" width="0.1677%" height="15" fill="rgb(217,125,39)" fg:x="10171" fg:w="50"/><text x="34.4124%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="34.2872%" y="69" width="0.2549%" height="15" fill="rgb(235,36,10)" fg:x="10221" fg:w="76"/><text x="34.5801%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="34.5421%" y="69" width="0.0839%" height="15" fill="rgb(251,123,47)" fg:x="10297" fg:w="25"/><text x="34.8351%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="34.6260%" y="69" width="0.3120%" height="15" fill="rgb(221,13,13)" fg:x="10322" fg:w="93"/><text x="34.9189%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="34.9379%" y="69" width="0.0839%" height="15" fill="rgb(238,131,9)" fg:x="10415" fg:w="25"/><text x="35.2309%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.0218%" y="69" width="0.3120%" height="15" fill="rgb(211,50,8)" fg:x="10440" fg:w="93"/><text x="35.3148%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.3338%" y="69" width="0.0839%" height="15" fill="rgb(245,182,24)" fg:x="10533" fg:w="25"/><text x="35.6267%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.4176%" y="69" width="0.3120%" height="15" fill="rgb(242,14,37)" fg:x="10558" fg:w="93"/><text x="35.7106%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.7296%" y="69" width="0.0839%" height="15" fill="rgb(246,228,12)" fg:x="10651" fg:w="25"/><text x="36.0226%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.8135%" y="69" width="0.3120%" height="15" fill="rgb(213,55,15)" fg:x="10676" fg:w="93"/><text x="36.1065%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="36.1255%" y="69" width="0.0839%" height="15" fill="rgb(209,9,3)" fg:x="10769" fg:w="25"/><text x="36.4184%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="36.2093%" y="69" width="0.3120%" height="15" fill="rgb(230,59,30)" fg:x="10794" fg:w="93"/><text x="36.5023%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="36.5213%" y="69" width="0.0839%" height="15" fill="rgb(209,121,21)" fg:x="10887" fg:w="25"/><text x="36.8143%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="36.6052%" y="69" width="0.7179%" height="15" fill="rgb(220,109,13)" fg:x="10912" fg:w="214"/><text x="36.8981%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="37.3230%" y="69" width="0.2147%" height="15" fill="rgb(232,18,1)" fg:x="11126" fg:w="64"/><text x="37.6160%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="37.5377%" y="53" width="0.1677%" height="15" fill="rgb(215,41,42)" fg:x="11190" fg:w="50"/><text x="37.8307%" y="63.50"></text></g><g><title>utf8_validate (314 instructions, 1.05%)</title><rect x="37.7055%" y="53" width="1.0533%" height="15" fill="rgb(224,123,36)" fg:x="11240" fg:w="314"/><text x="37.9984%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="38.7588%" y="37" width="0.1879%" height="15" fill="rgb(240,125,3)" fg:x="11554" fg:w="56"/><text x="39.0518%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="38.7588%" y="53" width="0.2315%" height="15" fill="rgb(205,98,50)" fg:x="11554" fg:w="69"/><text x="39.0518%" y="63.50"></text></g><g><title>memcpy (338 instructions, 1.13%)</title><rect x="38.9903%" y="53" width="1.1338%" height="15" fill="rgb(205,185,37)" fg:x="11623" fg:w="338"/><text x="39.2832%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (840 instructions, 2.82%)</title><rect x="37.5377%" y="69" width="2.8178%" height="15" fill="rgb(238,207,15)" fg:x="11190" fg:w="840"/><text x="37.8307%" y="79.50">@d..</text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="40.3556%" y="69" width="0.0201%" height="15" fill="rgb(213,199,42)" fg:x="12030" fg:w="6"/><text x="40.6486%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="40.3757%" y="69" width="0.2147%" height="15" fill="rgb(235,201,11)" fg:x="12036" fg:w="64"/><text x="40.6687%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="40.5904%" y="69" width="0.1677%" height="15" fill="rgb(207,46,11)" fg:x="12100" fg:w="50"/><text x="40.8834%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="40.7581%" y="53" width="0.1677%" height="15" fill="rgb(241,35,35)" fg:x="12150" fg:w="50"/><text x="41.0511%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="40.7581%" y="69" width="0.2885%" height="15" fill="rgb(243,32,47)" fg:x="12150" fg:w="86"/><text x="41.0511%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="41.0466%" y="69" width="0.2147%" height="15" fill="rgb(247,202,23)" fg:x="12236" fg:w="64"/><text x="41.3396%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="41.2613%" y="53" width="0.1677%" height="15" fill="rgb(219,102,11)" fg:x="12300" fg:w="50"/><text x="41.5543%" y="63.50"></text></g><g><title>utf8_validate (172 instructions, 0.58%)</title><rect x="41.4291%" y="53" width="0.5770%" height="15" fill="rgb(243,110,44)" fg:x="12350" fg:w="172"/><text x="41.7220%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="42.0060%" y="37" width="0.1879%" height="15" fill="rgb(222,74,54)" fg:x="12522" fg:w="56"/><text x="42.2990%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="42.0060%" y="53" width="0.2315%" height="15" fill="rgb(216,99,12)" fg:x="12522" fg:w="69"/><text x="42.2990%" y="63.50"></text></g><g><title>memcpy (115 instructions, 0.39%)</title><rect x="42.2375%" y="53" width="0.3858%" height="15" fill="rgb(226,22,26)" fg:x="12591" fg:w="115"/><text x="42.5305%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (475 instructions, 1.59%)</title><rect x="41.2613%" y="69" width="1.5934%" height="15" fill="rgb(217,163,10)" fg:x="12300" fg:w="475"/><text x="41.5543%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="42.8547%" y="53" width="0.1677%" height="15" fill="rgb(213,25,53)" fg:x="12775" fg:w="50"/><text x="43.1477%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="42.8547%" y="69" width="0.2885%" height="15" fill="rgb(252,105,26)" fg:x="12775" fg:w="86"/><text x="43.1477%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="43.1432%" y="69" width="0.2147%" height="15" fill="rgb(220,39,43)" fg:x="12861" fg:w="64"/><text x="43.4362%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="43.3579%" y="69" width="0.2147%" height="15" fill="rgb(229,68,48)" fg:x="12925" fg:w="64"/><text x="43.6509%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="43.5726%" y="69" width="0.1677%" height="15" fill="rgb(252,8,32)" fg:x="12989" fg:w="50"/><text x="43.8656%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="43.7404%" y="69" width="0.1677%" height="15" fill="rgb(223,20,43)" fg:x="13039" fg:w="50"/><text x="44.0333%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="43.9081%" y="69" width="0.2549%" height="15" fill="rgb(229,81,49)" fg:x="13089" fg:w="76"/><text x="44.2011%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="44.1630%" y="69" width="0.0839%" height="15" fill="rgb(236,28,36)" fg:x="13165" fg:w="25"/><text x="44.4560%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="44.2469%" y="69" width="0.3120%" height="15" fill="rgb(249,185,26)" fg:x="13190" fg:w="93"/><text x="44.5399%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="44.5589%" y="69" width="0.0839%" height="15" fill="rgb(249,174,33)" fg:x="13283" fg:w="25"/><text x="44.8518%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="44.6427%" y="69" width="0.3120%" height="15" fill="rgb(233,201,37)" fg:x="13308" fg:w="93"/><text x="44.9357%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="44.9547%" y="69" width="0.0839%" height="15" fill="rgb(221,78,26)" fg:x="13401" fg:w="25"/><text x="45.2477%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="45.0386%" y="69" width="0.3120%" height="15" fill="rgb(250,127,30)" fg:x="13426" fg:w="93"/><text x="45.3315%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.3506%" y="69" width="0.0839%" height="15" fill="rgb(230,49,44)" fg:x="13519" fg:w="25"/><text x="45.6435%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="45.4344%" y="69" width="0.3120%" height="15" fill="rgb(229,67,23)" fg:x="13544" fg:w="93"/><text x="45.7274%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.7464%" y="69" width="0.0839%" height="15" fill="rgb(249,83,47)" fg:x="13637" fg:w="25"/><text x="46.0394%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="45.8303%" y="69" width="0.3120%" height="15" fill="rgb(215,43,3)" fg:x="13662" fg:w="93"/><text x="46.1232%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="46.1422%" y="69" width="0.0839%" height="15" fill="rgb(238,154,13)" fg:x="13755" fg:w="25"/><text x="46.4352%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="46.2261%" y="69" width="0.7179%" height="15" fill="rgb(219,56,2)" fg:x="13780" fg:w="214"/><text x="46.5191%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="46.9440%" y="69" width="0.2147%" height="15" fill="rgb(233,0,4)" fg:x="13994" fg:w="64"/><text x="47.2369%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="47.1587%" y="53" width="0.1677%" height="15" fill="rgb(235,30,7)" fg:x="14058" fg:w="50"/><text x="47.4516%" y="63.50"></text></g><g><title>utf8_validate (188 instructions, 0.63%)</title><rect x="47.3264%" y="53" width="0.6307%" height="15" fill="rgb(250,79,13)" fg:x="14108" fg:w="188"/><text x="47.6194%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="47.9571%" y="37" width="0.1879%" height="15" fill="rgb(211,146,34)" fg:x="14296" fg:w="56"/><text x="48.2500%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="47.9571%" y="53" width="0.2315%" height="15" fill="rgb(228,22,38)" fg:x="14296" fg:w="69"/><text x="48.2500%" y="63.50"></text></g><g><title>memcpy (90 instructions, 0.30%)</title><rect x="48.1885%" y="53" width="0.3019%" height="15" fill="rgb(235,168,5)" fg:x="14365" fg:w="90"/><text x="48.4815%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (466 instructions, 1.56%)</title><rect x="47.1587%" y="69" width="1.5632%" height="15" fill="rgb(221,155,16)" fg:x="14058" fg:w="466"/><text x="47.4516%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="48.7219%" y="69" width="0.0201%" height="15" fill="rgb(215,215,53)" fg:x="14524" fg:w="6"/><text x="49.0149%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="48.7420%" y="69" width="0.2147%" height="15" fill="rgb(223,4,10)" fg:x="14530" fg:w="64"/><text x="49.0350%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="48.9567%" y="69" width="0.1677%" height="15" fill="rgb(234,103,6)" fg:x="14594" fg:w="50"/><text x="49.2497%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="49.1245%" y="53" width="0.1677%" height="15" fill="rgb(227,97,0)" fg:x="14644" fg:w="50"/><text x="49.4174%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="49.1245%" y="69" width="0.2885%" height="15" fill="rgb(234,150,53)" fg:x="14644" fg:w="86"/><text x="49.4174%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="49.4129%" y="69" width="0.2147%" height="15" fill="rgb(228,201,54)" fg:x="14730" fg:w="64"/><text x="49.7059%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="49.6276%" y="53" width="0.1677%" height="15" fill="rgb(222,22,37)" fg:x="14794" fg:w="50"/><text x="49.9206%" y="63.50"></text></g><g><title>utf8_validate (213 instructions, 0.71%)</title><rect x="49.7954%" y="53" width="0.7145%" height="15" fill="rgb(237,53,32)" fg:x="14844" fg:w="213"/><text x="50.0883%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="50.5099%" y="37" width="0.1879%" height="15" fill="rgb(233,25,53)" fg:x="15057" fg:w="56"/><text x="50.8029%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="50.5099%" y="53" width="0.2315%" height="15" fill="rgb(210,40,34)" fg:x="15057" fg:w="69"/><text x="50.8029%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.52%)</title><rect x="50.7414%" y="53" width="0.5233%" height="15" fill="rgb(241,220,44)" fg:x="15126" fg:w="156"/><text x="51.0343%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (557 instructions, 1.87%)</title><rect x="49.6276%" y="69" width="1.8685%" height="15" fill="rgb(235,28,35)" fg:x="14794" fg:w="557"/><text x="49.9206%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="51.4961%" y="53" width="0.1677%" height="15" fill="rgb(210,56,17)" fg:x="15351" fg:w="50"/><text x="51.7891%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="51.4961%" y="69" width="0.2885%" height="15" fill="rgb(224,130,29)" fg:x="15351" fg:w="86"/><text x="51.7891%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="51.7846%" y="69" width="0.2147%" height="15" fill="rgb(235,212,8)" fg:x="15437" fg:w="64"/><text x="52.0776%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="51.9993%" y="69" width="0.2147%" height="15" fill="rgb(223,33,50)" fg:x="15501" fg:w="64"/><text x="52.2923%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="52.2140%" y="69" width="0.1677%" height="15" fill="rgb(219,149,13)" fg:x="15565" fg:w="50"/><text x="52.5070%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="52.3818%" y="69" width="0.1677%" height="15" fill="rgb(250,156,29)" fg:x="15615" fg:w="50"/><text x="52.6747%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="52.5495%" y="69" width="0.2549%" height="15" fill="rgb(216,193,19)" fg:x="15665" fg:w="76"/><text x="52.8424%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="52.8044%" y="69" width="0.0839%" height="15" fill="rgb(216,135,14)" fg:x="15741" fg:w="25"/><text x="53.0974%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="52.8883%" y="69" width="0.3120%" height="15" fill="rgb(241,47,5)" fg:x="15766" fg:w="93"/><text x="53.1813%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.2003%" y="69" width="0.0839%" height="15" fill="rgb(233,42,35)" fg:x="15859" fg:w="25"/><text x="53.4932%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="53.2841%" y="69" width="0.3120%" height="15" fill="rgb(231,13,6)" fg:x="15884" fg:w="93"/><text x="53.5771%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.5961%" y="69" width="0.0839%" height="15" fill="rgb(207,181,40)" fg:x="15977" fg:w="25"/><text x="53.8891%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="53.6800%" y="69" width="0.3120%" height="15" fill="rgb(254,173,49)" fg:x="16002" fg:w="93"/><text x="53.9729%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.9919%" y="69" width="0.0839%" height="15" fill="rgb(221,1,38)" fg:x="16095" fg:w="25"/><text x="54.2849%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="54.0758%" y="69" width="0.3120%" height="15" fill="rgb(206,124,46)" fg:x="16120" fg:w="93"/><text x="54.3688%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.3878%" y="69" width="0.0839%" height="15" fill="rgb(249,21,11)" fg:x="16213" fg:w="25"/><text x="54.6808%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="54.4717%" y="69" width="0.3120%" height="15" fill="rgb(222,201,40)" fg:x="16238" fg:w="93"/><text x="54.7646%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.7836%" y="69" width="0.0839%" height="15" fill="rgb(235,61,29)" fg:x="16331" fg:w="25"/><text x="55.0766%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="54.8675%" y="69" width="0.7179%" height="15" fill="rgb(219,207,3)" fg:x="16356" fg:w="214"/><text x="55.1605%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="55.5854%" y="69" width="0.2147%" height="15" fill="rgb(222,56,46)" fg:x="16570" fg:w="64"/><text x="55.8783%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="55.8001%" y="53" width="0.1677%" height="15" fill="rgb(239,76,54)" fg:x="16634" fg:w="50"/><text x="56.0930%" y="63.50"></text></g><g><title>utf8_validate (181 instructions, 0.61%)</title><rect x="55.9678%" y="53" width="0.6072%" height="15" fill="rgb(231,124,27)" fg:x="16684" fg:w="181"/><text x="56.2608%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="56.5750%" y="37" width="0.1879%" height="15" fill="rgb(249,195,6)" fg:x="16865" fg:w="56"/><text x="56.8679%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="56.5750%" y="53" width="0.2315%" height="15" fill="rgb(237,174,47)" fg:x="16865" fg:w="69"/><text x="56.8679%" y="63.50"></text></g><g><title>memcpy (123 instructions, 0.41%)</title><rect x="56.8064%" y="53" width="0.4126%" height="15" fill="rgb(206,201,31)" fg:x="16934" fg:w="123"/><text x="57.0994%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (492 instructions, 1.65%)</title><rect x="55.8001%" y="69" width="1.6505%" height="15" fill="rgb(231,57,52)" fg:x="16634" fg:w="492"/><text x="56.0930%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="57.4505%" y="69" width="0.0201%" height="15" fill="rgb(248,177,22)" fg:x="17126" fg:w="6"/><text x="57.7435%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="57.4706%" y="69" width="0.2147%" height="15" fill="rgb(215,211,37)" fg:x="17132" fg:w="64"/><text x="57.7636%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="57.6853%" y="69" width="0.1677%" height="15" fill="rgb(241,128,51)" fg:x="17196" fg:w="50"/><text x="57.9783%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="57.8531%" y="53" width="0.1677%" height="15" fill="rgb(227,165,31)" fg:x="17246" fg:w="50"/><text x="58.1460%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="57.8531%" y="69" width="0.2885%" height="15" fill="rgb(228,167,24)" fg:x="17246" fg:w="86"/><text x="58.1460%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="58.1416%" y="69" width="0.2147%" height="15" fill="rgb(228,143,12)" fg:x="17332" fg:w="64"/><text x="58.4345%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="58.3563%" y="53" width="0.1677%" height="15" fill="rgb(249,149,8)" fg:x="17396" fg:w="50"/><text x="58.6492%" y="63.50"></text></g><g><title>utf8_validate (226 instructions, 0.76%)</title><rect x="58.5240%" y="53" width="0.7581%" height="15" fill="rgb(243,35,44)" fg:x="17446" fg:w="226"/><text x="58.8170%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="59.2821%" y="37" width="0.1879%" height="15" fill="rgb(246,89,9)" fg:x="17672" fg:w="56"/><text x="59.5751%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::hafd980fe8aecbf06 (69 instructions, 0.23%)</title><rect x="59.2821%" y="53" width="0.2315%" height="15" fill="rgb(233,213,13)" fg:x="17672" fg:w="69"/><text x="59.5751%" y="63.50"></text></g><g><title>memcpy (160 instructions, 0.54%)</title><rect x="59.5136%" y="53" width="0.5367%" height="15" fill="rgb(233,141,41)" fg:x="17741" fg:w="160"/><text x="59.8066%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (574 instructions, 1.93%)</title><rect x="58.3563%" y="69" width="1.9255%" height="15" fill="rgb(239,167,4)" fg:x="17396" fg:w="574"/><text x="58.6492%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="60.2818%" y="53" width="0.1677%" height="15" fill="rgb(209,217,16)" fg:x="17970" fg:w="50"/><text x="60.5748%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="60.2818%" y="69" width="0.2885%" height="15" fill="rgb(219,88,35)" fg:x="17970" fg:w="86"/><text x="60.5748%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="60.5703%" y="69" width="0.2147%" height="15" fill="rgb(220,193,23)" fg:x="18056" fg:w="64"/><text x="60.8632%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="60.7850%" y="69" width="0.2147%" height="15" fill="rgb(230,90,52)" fg:x="18120" fg:w="64"/><text x="61.0779%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="60.9997%" y="69" width="0.1677%" height="15" fill="rgb(252,106,19)" fg:x="18184" fg:w="50"/><text x="61.2926%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="61.1674%" y="69" width="0.1677%" height="15" fill="rgb(206,74,20)" fg:x="18234" fg:w="50"/><text x="61.4604%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="61.3351%" y="69" width="0.2549%" height="15" fill="rgb(230,138,44)" fg:x="18284" fg:w="76"/><text x="61.6281%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="61.5901%" y="69" width="0.0839%" height="15" fill="rgb(235,182,43)" fg:x="18360" fg:w="25"/><text x="61.8830%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="61.6739%" y="69" width="0.3120%" height="15" fill="rgb(242,16,51)" fg:x="18385" fg:w="93"/><text x="61.9669%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="61.9859%" y="69" width="0.0839%" height="15" fill="rgb(248,9,4)" fg:x="18478" fg:w="25"/><text x="62.2789%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="62.0698%" y="69" width="0.7179%" height="15" fill="rgb(210,31,22)" fg:x="18503" fg:w="214"/><text x="62.3627%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="62.7877%" y="69" width="0.2147%" height="15" fill="rgb(239,54,39)" fg:x="18717" fg:w="64"/><text x="63.0806%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="63.0023%" y="69" width="0.0201%" height="15" fill="rgb(230,99,41)" fg:x="18781" fg:w="6"/><text x="63.2953%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="63.0225%" y="53" width="0.7179%" height="15" fill="rgb(253,106,12)" fg:x="18787" fg:w="214"/><text x="63.3154%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="63.0225%" y="69" width="0.8386%" height="15" fill="rgb(213,46,41)" fg:x="18787" fg:w="250"/><text x="63.3154%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="63.8611%" y="69" width="0.2147%" height="15" fill="rgb(215,133,35)" fg:x="19037" fg:w="64"/><text x="64.1541%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="64.0758%" y="69" width="0.2147%" height="15" fill="rgb(213,28,5)" fg:x="19101" fg:w="64"/><text x="64.3688%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="64.2905%" y="69" width="0.1677%" height="15" fill="rgb(215,77,49)" fg:x="19165" fg:w="50"/><text x="64.5835%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="64.4582%" y="69" width="0.1677%" height="15" fill="rgb(248,100,22)" fg:x="19215" fg:w="50"/><text x="64.7512%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="64.6260%" y="69" width="0.2549%" height="15" fill="rgb(208,67,9)" fg:x="19265" fg:w="76"/><text x="64.9189%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="64.8809%" y="69" width="0.0839%" height="15" fill="rgb(219,133,21)" fg:x="19341" fg:w="25"/><text x="65.1739%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="64.9648%" y="69" width="0.7179%" height="15" fill="rgb(246,46,29)" fg:x="19366" fg:w="214"/><text x="65.2577%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="65.6827%" y="69" width="0.2147%" height="15" fill="rgb(246,185,52)" fg:x="19580" fg:w="64"/><text x="65.9756%" y="79.50"></text></g><g><title>@deserialize_go&lt;u&gt; (28 instructions, 0.09%)</title><rect x="65.8973%" y="69" width="0.0939%" height="15" fill="rgb(252,136,11)" fg:x="19644" fg:w="28"/><text x="66.1903%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="65.9913%" y="69" width="0.0201%" height="15" fill="rgb(219,138,53)" fg:x="19672" fg:w="6"/><text x="66.2842%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (16,052 instructions, 53.85%)</title><rect x="25.1258%" y="85" width="53.8477%" height="15" fill="rgb(211,51,23)" fg:x="7490" fg:w="16052"/><text x="25.4188%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,..</text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="78.9735%" y="69" width="0.1879%" height="15" fill="rgb(247,221,28)" fg:x="23542" fg:w="56"/><text x="79.2665%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="79.1614%" y="69" width="0.0570%" height="15" fill="rgb(251,222,45)" fg:x="23598" fg:w="17"/><text x="79.4543%" y="79.50"></text></g><g><title>Blob.compare_eq (769 instructions, 2.58%)</title><rect x="79.2184%" y="37" width="2.5797%" height="15" fill="rgb(217,162,53)" fg:x="23615" fg:w="769"/><text x="79.5114%" y="47.50">B..</text></g><g><title>anon-func-154.35 (778 instructions, 2.61%)</title><rect x="79.2184%" y="53" width="2.6099%" height="15" fill="rgb(229,93,14)" fg:x="23615" fg:w="778"/><text x="79.5114%" y="63.50">a..</text></g><g><title>some (841 instructions, 2.82%)</title><rect x="79.2184%" y="69" width="2.8212%" height="15" fill="rgb(209,67,49)" fg:x="23615" fg:w="841"/><text x="79.5114%" y="79.50">so..</text></g><g><title>rec (10 instructions, 0.03%)</title><rect x="82.0396%" y="69" width="0.0335%" height="15" fill="rgb(213,87,29)" fg:x="24456" fg:w="10"/><text x="82.3326%" y="79.50"></text></g><g><title>B_add (27 instructions, 0.09%)</title><rect x="82.0731%" y="69" width="0.0906%" height="15" fill="rgb(205,151,52)" fg:x="24466" fg:w="27"/><text x="82.3661%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="82.1637%" y="53" width="0.0570%" height="15" fill="rgb(253,215,39)" fg:x="24493" fg:w="17"/><text x="82.4567%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (41 instructions, 0.14%)</title><rect x="82.2207%" y="53" width="0.1375%" height="15" fill="rgb(221,220,41)" fg:x="24510" fg:w="41"/><text x="82.5137%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="82.3583%" y="53" width="0.1107%" height="15" fill="rgb(218,133,21)" fg:x="24551" fg:w="33"/><text x="82.6512%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="82.4690%" y="53" width="0.1879%" height="15" fill="rgb(221,193,43)" fg:x="24584" fg:w="56"/><text x="82.7619%" y="63.50"></text></g><g><title>memcpy (142 instructions, 0.48%)</title><rect x="82.6568%" y="53" width="0.4764%" height="15" fill="rgb(240,128,52)" fg:x="24640" fg:w="142"/><text x="82.9498%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb8cdbfe044f1d3b9 (56 instructions, 0.19%)</title><rect x="83.1332%" y="53" width="0.1879%" height="15" fill="rgb(253,114,12)" fg:x="24782" fg:w="56"/><text x="83.4261%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="83.3210%" y="53" width="0.0369%" height="15" fill="rgb(215,223,47)" fg:x="24838" fg:w="11"/><text x="83.6140%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="83.3579%" y="53" width="0.0570%" height="15" fill="rgb(248,225,23)" fg:x="24849" fg:w="17"/><text x="83.6509%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="83.4150%" y="37" width="0.0369%" height="15" fill="rgb(250,108,0)" fg:x="24866" fg:w="11"/><text x="83.7079%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.17%)</title><rect x="83.4150%" y="53" width="0.1711%" height="15" fill="rgb(228,208,7)" fg:x="24866" fg:w="51"/><text x="83.7079%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="83.5860%" y="53" width="0.1107%" height="15" fill="rgb(244,45,10)" fg:x="24917" fg:w="33"/><text x="83.8790%" y="63.50"></text></g><g><title>$lambda.33 (1,766 instructions, 5.92%)</title><rect x="82.1637%" y="69" width="5.9242%" height="15" fill="rgb(207,125,25)" fg:x="24493" fg:w="1766"/><text x="82.4567%" y="79.50">$lambd..</text></g><g><title>$lambda.2 (4,060 instructions, 13.62%)</title><rect x="78.9735%" y="85" width="13.6196%" height="15" fill="rgb(210,195,18)" fg:x="23542" fg:w="4060"/><text x="79.2665%" y="95.50">$lambda.2</text></g><g><title>schedule_copying_gc (108 instructions, 0.36%)</title><rect x="92.5931%" y="85" width="0.3623%" height="15" fill="rgb(249,80,12)" fg:x="27602" fg:w="108"/><text x="92.8861%" y="95.50"></text></g><g><title>trans_state4 (16 instructions, 0.05%)</title><rect x="92.9554%" y="85" width="0.0537%" height="15" fill="rgb(221,65,9)" fg:x="27710" fg:w="16"/><text x="93.2484%" y="95.50"></text></g><g><title>all (29,810 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="29810"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (29,810 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="29810"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>