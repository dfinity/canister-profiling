<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="29869"><g><title>trans_state5 (10 instructions, 0.03%)</title><rect x="0.0000%" y="85" width="0.0335%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="0.0335%" y="85" width="0.1875%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="56"/><text x="0.3264%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="0.2210%" y="69" width="0.1674%" height="15" fill="rgb(221,193,54)" fg:x="66" fg:w="50"/><text x="0.5139%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="0.3884%" y="69" width="0.1875%" height="15" fill="rgb(248,212,6)" fg:x="116" fg:w="56"/><text x="0.6813%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="0.5758%" y="69" width="0.2143%" height="15" fill="rgb(208,68,35)" fg:x="172" fg:w="64"/><text x="0.8688%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="0.7901%" y="69" width="0.2143%" height="15" fill="rgb(232,128,0)" fg:x="236" fg:w="64"/><text x="1.0831%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="1.0044%" y="69" width="0.0402%" height="15" fill="rgb(207,160,47)" fg:x="300" fg:w="12"/><text x="1.2974%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="1.0446%" y="69" width="0.2143%" height="15" fill="rgb(228,23,34)" fg:x="312" fg:w="64"/><text x="1.3375%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="1.2588%" y="69" width="0.1674%" height="15" fill="rgb(218,30,26)" fg:x="376" fg:w="50"/><text x="1.5518%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="1.4262%" y="69" width="0.7165%" height="15" fill="rgb(220,122,19)" fg:x="426" fg:w="214"/><text x="1.7192%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="2.1427%" y="69" width="0.2143%" height="15" fill="rgb(250,228,42)" fg:x="640" fg:w="64"/><text x="2.4357%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="2.3570%" y="69" width="0.0402%" height="15" fill="rgb(240,193,28)" fg:x="704" fg:w="12"/><text x="2.6499%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="2.3971%" y="69" width="0.7165%" height="15" fill="rgb(216,20,37)" fg:x="716" fg:w="214"/><text x="2.6901%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="3.1136%" y="69" width="0.2143%" height="15" fill="rgb(206,188,39)" fg:x="930" fg:w="64"/><text x="3.4066%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="3.3279%" y="69" width="0.0402%" height="15" fill="rgb(217,207,13)" fg:x="994" fg:w="12"/><text x="3.6208%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="3.3680%" y="69" width="0.7165%" height="15" fill="rgb(231,73,38)" fg:x="1006" fg:w="214"/><text x="3.6610%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.0845%" y="69" width="0.2143%" height="15" fill="rgb(225,20,46)" fg:x="1220" fg:w="64"/><text x="4.3775%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="4.2988%" y="69" width="0.0402%" height="15" fill="rgb(210,31,41)" fg:x="1284" fg:w="12"/><text x="4.5917%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.3389%" y="69" width="0.2143%" height="15" fill="rgb(221,200,47)" fg:x="1296" fg:w="64"/><text x="4.6319%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.5532%" y="69" width="0.2143%" height="15" fill="rgb(226,26,5)" fg:x="1360" fg:w="64"/><text x="4.8462%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="4.7675%" y="69" width="0.0402%" height="15" fill="rgb(249,33,26)" fg:x="1424" fg:w="12"/><text x="5.0605%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.8077%" y="69" width="0.2143%" height="15" fill="rgb(235,183,28)" fg:x="1436" fg:w="64"/><text x="5.1006%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.0219%" y="69" width="0.2143%" height="15" fill="rgb(221,5,38)" fg:x="1500" fg:w="64"/><text x="5.3149%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="5.2362%" y="69" width="0.0402%" height="15" fill="rgb(247,18,42)" fg:x="1564" fg:w="12"/><text x="5.5292%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.2764%" y="69" width="0.2143%" height="15" fill="rgb(241,131,45)" fg:x="1576" fg:w="64"/><text x="5.5693%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="5.4906%" y="69" width="0.1674%" height="15" fill="rgb(249,31,29)" fg:x="1640" fg:w="50"/><text x="5.7836%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="5.6580%" y="69" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="1690" fg:w="50"/><text x="5.9510%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.8254%" y="69" width="0.2143%" height="15" fill="rgb(238,160,17)" fg:x="1740" fg:w="64"/><text x="6.1184%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="6.0397%" y="69" width="0.0402%" height="15" fill="rgb(214,148,48)" fg:x="1804" fg:w="12"/><text x="6.3327%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="6.0799%" y="69" width="0.1674%" height="15" fill="rgb(232,36,49)" fg:x="1816" fg:w="50"/><text x="6.3729%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.2473%" y="69" width="0.2143%" height="15" fill="rgb(209,103,24)" fg:x="1866" fg:w="64"/><text x="6.5402%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="6.4615%" y="69" width="0.0402%" height="15" fill="rgb(229,88,8)" fg:x="1930" fg:w="12"/><text x="6.7545%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.5017%" y="69" width="0.2143%" height="15" fill="rgb(213,181,19)" fg:x="1942" fg:w="64"/><text x="6.7947%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="6.7160%" y="69" width="0.1674%" height="15" fill="rgb(254,191,54)" fg:x="2006" fg:w="50"/><text x="7.0090%" y="79.50"></text></g><g><title>leb128_decode (173 instructions, 0.58%)</title><rect x="6.8834%" y="69" width="0.5792%" height="15" fill="rgb(241,83,37)" fg:x="2056" fg:w="173"/><text x="7.1764%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="7.4626%" y="69" width="0.2143%" height="15" fill="rgb(233,36,39)" fg:x="2229" fg:w="64"/><text x="7.7556%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="7.6769%" y="69" width="0.0402%" height="15" fill="rgb(226,3,54)" fg:x="2293" fg:w="12"/><text x="7.9698%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="7.7170%" y="69" width="0.7165%" height="15" fill="rgb(245,192,40)" fg:x="2305" fg:w="214"/><text x="8.0100%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="8.4335%" y="69" width="0.2143%" height="15" fill="rgb(238,167,29)" fg:x="2519" fg:w="64"/><text x="8.7265%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="8.6478%" y="69" width="0.0402%" height="15" fill="rgb(232,182,51)" fg:x="2583" fg:w="12"/><text x="8.9407%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="8.6879%" y="69" width="0.7165%" height="15" fill="rgb(231,60,39)" fg:x="2595" fg:w="214"/><text x="8.9809%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="9.4044%" y="69" width="0.2143%" height="15" fill="rgb(208,69,12)" fg:x="2809" fg:w="64"/><text x="9.6974%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="9.6187%" y="69" width="0.0402%" height="15" fill="rgb(235,93,37)" fg:x="2873" fg:w="12"/><text x="9.9116%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="9.6588%" y="69" width="0.7165%" height="15" fill="rgb(213,116,39)" fg:x="2885" fg:w="214"/><text x="9.9518%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="10.3753%" y="69" width="0.2143%" height="15" fill="rgb(222,207,29)" fg:x="3099" fg:w="64"/><text x="10.6683%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="10.5896%" y="69" width="0.0402%" height="15" fill="rgb(206,96,30)" fg:x="3163" fg:w="12"/><text x="10.8825%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="10.6297%" y="69" width="0.7165%" height="15" fill="rgb(218,138,4)" fg:x="3175" fg:w="214"/><text x="10.9227%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="11.3462%" y="69" width="0.2143%" height="15" fill="rgb(250,191,14)" fg:x="3389" fg:w="64"/><text x="11.6392%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="11.5605%" y="69" width="0.0402%" height="15" fill="rgb(239,60,40)" fg:x="3453" fg:w="12"/><text x="11.8534%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="11.6007%" y="69" width="0.7165%" height="15" fill="rgb(206,27,48)" fg:x="3465" fg:w="214"/><text x="11.8936%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="12.3171%" y="69" width="0.2143%" height="15" fill="rgb(225,35,8)" fg:x="3679" fg:w="64"/><text x="12.6101%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="12.5314%" y="69" width="0.0402%" height="15" fill="rgb(250,213,24)" fg:x="3743" fg:w="12"/><text x="12.8244%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="12.5716%" y="69" width="0.7165%" height="15" fill="rgb(247,123,22)" fg:x="3755" fg:w="214"/><text x="12.8645%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="13.2880%" y="69" width="0.2143%" height="15" fill="rgb(231,138,38)" fg:x="3969" fg:w="64"/><text x="13.5810%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="13.5023%" y="69" width="0.0402%" height="15" fill="rgb(231,145,46)" fg:x="4033" fg:w="12"/><text x="13.7953%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="13.5425%" y="69" width="0.2143%" height="15" fill="rgb(251,118,11)" fg:x="4045" fg:w="64"/><text x="13.8354%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="13.7567%" y="69" width="0.1674%" height="15" fill="rgb(217,147,25)" fg:x="4109" fg:w="50"/><text x="14.0497%" y="79.50"></text></g><g><title>leb128_decode (173 instructions, 0.58%)</title><rect x="13.9241%" y="69" width="0.5792%" height="15" fill="rgb(247,81,37)" fg:x="4159" fg:w="173"/><text x="14.2171%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="14.5033%" y="69" width="0.2143%" height="15" fill="rgb(209,12,38)" fg:x="4332" fg:w="64"/><text x="14.7963%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="14.7176%" y="69" width="0.0402%" height="15" fill="rgb(227,1,9)" fg:x="4396" fg:w="12"/><text x="15.0106%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="14.7578%" y="69" width="0.7165%" height="15" fill="rgb(248,47,43)" fg:x="4408" fg:w="214"/><text x="15.0507%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.4742%" y="69" width="0.2143%" height="15" fill="rgb(221,10,30)" fg:x="4622" fg:w="64"/><text x="15.7672%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="15.6885%" y="69" width="0.0402%" height="15" fill="rgb(210,229,1)" fg:x="4686" fg:w="12"/><text x="15.9815%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.7287%" y="69" width="0.2143%" height="15" fill="rgb(222,148,37)" fg:x="4698" fg:w="64"/><text x="16.0217%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.9430%" y="69" width="0.2143%" height="15" fill="rgb(234,67,33)" fg:x="4762" fg:w="64"/><text x="16.2359%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.1572%" y="69" width="0.2143%" height="15" fill="rgb(247,98,35)" fg:x="4826" fg:w="64"/><text x="16.4502%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.3715%" y="69" width="0.2143%" height="15" fill="rgb(247,138,52)" fg:x="4890" fg:w="64"/><text x="16.6645%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.5858%" y="69" width="0.2143%" height="15" fill="rgb(213,79,30)" fg:x="4954" fg:w="64"/><text x="16.8787%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.8000%" y="69" width="0.2143%" height="15" fill="rgb(246,177,23)" fg:x="5018" fg:w="64"/><text x="17.0930%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.0143%" y="69" width="0.2143%" height="15" fill="rgb(230,62,27)" fg:x="5082" fg:w="64"/><text x="17.3073%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="17.2286%" y="69" width="0.1674%" height="15" fill="rgb(216,154,8)" fg:x="5146" fg:w="50"/><text x="17.5215%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.3960%" y="69" width="0.2143%" height="15" fill="rgb(244,35,45)" fg:x="5196" fg:w="64"/><text x="17.6889%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (22 instructions, 0.07%)</title><rect x="17.6102%" y="69" width="0.0737%" height="15" fill="rgb(251,115,12)" fg:x="5260" fg:w="22"/><text x="17.9032%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.6839%" y="69" width="0.2143%" height="15" fill="rgb(240,54,50)" fg:x="5282" fg:w="64"/><text x="17.9769%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.04%)</title><rect x="17.8982%" y="69" width="0.0402%" height="15" fill="rgb(233,84,52)" fg:x="5346" fg:w="12"/><text x="18.1911%" y="79.50"></text></g><g><title>parse_idl_header (6,753 instructions, 22.61%)</title><rect x="0.2210%" y="85" width="22.6087%" height="15" fill="rgb(207,117,47)" fg:x="66" fg:w="6753"/><text x="0.5139%" y="95.50">parse_idl_header</text></g><g><title>memset (6 instructions, 0.02%)</title><rect x="22.8297%" y="69" width="0.0201%" height="15" fill="rgb(249,43,39)" fg:x="6819" fg:w="6"/><text x="23.1227%" y="79.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.05%)</title><rect x="22.8297%" y="85" width="0.0502%" height="15" fill="rgb(209,38,44)" fg:x="6819" fg:w="15"/><text x="23.1227%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="22.8799%" y="85" width="0.1674%" height="15" fill="rgb(236,212,23)" fg:x="6834" fg:w="50"/><text x="23.1729%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="23.0473%" y="85" width="0.2143%" height="15" fill="rgb(242,79,21)" fg:x="6884" fg:w="64"/><text x="23.3403%" y="95.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="23.2616%" y="69" width="0.1674%" height="15" fill="rgb(211,96,35)" fg:x="6948" fg:w="50"/><text x="23.5545%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="23.4290%" y="69" width="0.1875%" height="15" fill="rgb(253,215,40)" fg:x="6998" fg:w="56"/><text x="23.7219%" y="79.50"></text></g><g><title>memcpy (167 instructions, 0.56%)</title><rect x="23.6165%" y="69" width="0.5591%" height="15" fill="rgb(211,81,21)" fg:x="7054" fg:w="167"/><text x="23.9094%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (380 instructions, 1.27%)</title><rect x="23.2616%" y="85" width="1.2722%" height="15" fill="rgb(208,190,38)" fg:x="6948" fg:w="380"/><text x="23.5545%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="24.5338%" y="85" width="0.2143%" height="15" fill="rgb(235,213,38)" fg:x="7328" fg:w="64"/><text x="24.8268%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="24.7481%" y="69" width="0.2143%" height="15" fill="rgb(237,122,38)" fg:x="7392" fg:w="64"/><text x="25.0410%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="24.9623%" y="69" width="0.2143%" height="15" fill="rgb(244,218,35)" fg:x="7456" fg:w="64"/><text x="25.2553%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="25.1766%" y="69" width="0.1674%" height="15" fill="rgb(240,68,47)" fg:x="7520" fg:w="50"/><text x="25.4696%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.20%)</title><rect x="25.3440%" y="69" width="0.2009%" height="15" fill="rgb(210,16,53)" fg:x="7570" fg:w="60"/><text x="25.6370%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.5449%" y="69" width="0.2143%" height="15" fill="rgb(235,124,12)" fg:x="7630" fg:w="64"/><text x="25.8378%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="25.7591%" y="69" width="0.1674%" height="15" fill="rgb(224,169,11)" fg:x="7694" fg:w="50"/><text x="26.0521%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (20 instructions, 0.07%)</title><rect x="25.9265%" y="69" width="0.0670%" height="15" fill="rgb(250,166,2)" fg:x="7744" fg:w="20"/><text x="26.2195%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="25.9935%" y="53" width="0.7165%" height="15" fill="rgb(242,216,29)" fg:x="7764" fg:w="214"/><text x="26.2865%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="25.9935%" y="69" width="0.8370%" height="15" fill="rgb(230,116,27)" fg:x="7764" fg:w="250"/><text x="26.2865%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="26.8305%" y="69" width="0.2143%" height="15" fill="rgb(228,99,48)" fg:x="8014" fg:w="64"/><text x="27.1235%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.0448%" y="53" width="0.2143%" height="15" fill="rgb(253,11,6)" fg:x="8078" fg:w="64"/><text x="27.3377%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.2590%" y="53" width="0.2143%" height="15" fill="rgb(247,143,39)" fg:x="8142" fg:w="64"/><text x="27.5520%" y="63.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="27.4733%" y="53" width="0.1674%" height="15" fill="rgb(236,97,10)" fg:x="8206" fg:w="50"/><text x="27.7663%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="27.6407%" y="53" width="0.1875%" height="15" fill="rgb(233,208,19)" fg:x="8256" fg:w="56"/><text x="27.9337%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.52%)</title><rect x="27.8282%" y="53" width="0.5223%" height="15" fill="rgb(216,164,2)" fg:x="8312" fg:w="156"/><text x="28.1212%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (513 instructions, 1.72%)</title><rect x="27.0448%" y="69" width="1.7175%" height="15" fill="rgb(220,129,5)" fg:x="8078" fg:w="513"/><text x="27.3377%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="28.7623%" y="53" width="0.7165%" height="15" fill="rgb(242,17,10)" fg:x="8591" fg:w="214"/><text x="29.0552%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="28.7623%" y="69" width="0.8370%" height="15" fill="rgb(242,107,0)" fg:x="8591" fg:w="250"/><text x="29.0552%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="29.5993%" y="69" width="0.2143%" height="15" fill="rgb(251,28,31)" fg:x="8841" fg:w="64"/><text x="29.8922%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="29.8135%" y="69" width="0.2143%" height="15" fill="rgb(233,223,10)" fg:x="8905" fg:w="64"/><text x="30.1065%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.0278%" y="69" width="0.2143%" height="15" fill="rgb(215,21,27)" fg:x="8969" fg:w="64"/><text x="30.3208%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="30.2421%" y="69" width="0.1674%" height="15" fill="rgb(232,23,21)" fg:x="9033" fg:w="50"/><text x="30.5350%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.20%)</title><rect x="30.4095%" y="69" width="0.2009%" height="15" fill="rgb(244,5,23)" fg:x="9083" fg:w="60"/><text x="30.7024%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.6103%" y="69" width="0.2143%" height="15" fill="rgb(226,81,46)" fg:x="9143" fg:w="64"/><text x="30.9033%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="30.8246%" y="69" width="0.1674%" height="15" fill="rgb(247,70,30)" fg:x="9207" fg:w="50"/><text x="31.1176%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="30.9920%" y="53" width="0.1674%" height="15" fill="rgb(212,68,19)" fg:x="9257" fg:w="50"/><text x="31.2850%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="30.9920%" y="69" width="0.2879%" height="15" fill="rgb(240,187,13)" fg:x="9257" fg:w="86"/><text x="31.2850%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="31.2799%" y="69" width="0.2143%" height="15" fill="rgb(223,113,26)" fg:x="9343" fg:w="64"/><text x="31.5729%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="31.4942%" y="53" width="0.1674%" height="15" fill="rgb(206,192,2)" fg:x="9407" fg:w="50"/><text x="31.7872%" y="63.50"></text></g><g><title>utf8_validate (162 instructions, 0.54%)</title><rect x="31.6616%" y="53" width="0.5424%" height="15" fill="rgb(241,108,4)" fg:x="9457" fg:w="162"/><text x="31.9546%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="32.2040%" y="37" width="0.1875%" height="15" fill="rgb(247,173,49)" fg:x="9619" fg:w="56"/><text x="32.4969%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="32.2040%" y="53" width="0.2310%" height="15" fill="rgb(224,114,35)" fg:x="9619" fg:w="69"/><text x="32.4969%" y="63.50"></text></g><g><title>memcpy (72 instructions, 0.24%)</title><rect x="32.4350%" y="53" width="0.2411%" height="15" fill="rgb(245,159,27)" fg:x="9688" fg:w="72"/><text x="32.7279%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (422 instructions, 1.41%)</title><rect x="31.4942%" y="69" width="1.4128%" height="15" fill="rgb(245,172,44)" fg:x="9407" fg:w="422"/><text x="31.7872%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="32.9070%" y="53" width="0.1674%" height="15" fill="rgb(236,23,11)" fg:x="9829" fg:w="50"/><text x="33.2000%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="32.9070%" y="69" width="0.2879%" height="15" fill="rgb(205,117,38)" fg:x="9829" fg:w="86"/><text x="33.2000%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="33.1950%" y="69" width="0.2143%" height="15" fill="rgb(237,72,25)" fg:x="9915" fg:w="64"/><text x="33.4879%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="33.4092%" y="69" width="0.2143%" height="15" fill="rgb(244,70,9)" fg:x="9979" fg:w="64"/><text x="33.7022%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="33.6235%" y="69" width="0.1674%" height="15" fill="rgb(217,125,39)" fg:x="10043" fg:w="50"/><text x="33.9165%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="33.7909%" y="69" width="0.1674%" height="15" fill="rgb(235,36,10)" fg:x="10093" fg:w="50"/><text x="34.0839%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="33.9583%" y="69" width="0.2544%" height="15" fill="rgb(251,123,47)" fg:x="10143" fg:w="76"/><text x="34.2513%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="34.2127%" y="69" width="0.0837%" height="15" fill="rgb(221,13,13)" fg:x="10219" fg:w="25"/><text x="34.5057%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="34.2964%" y="69" width="0.3114%" height="15" fill="rgb(238,131,9)" fg:x="10244" fg:w="93"/><text x="34.5894%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="34.6078%" y="69" width="0.0837%" height="15" fill="rgb(211,50,8)" fg:x="10337" fg:w="25"/><text x="34.9008%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="34.6915%" y="69" width="0.3114%" height="15" fill="rgb(245,182,24)" fg:x="10362" fg:w="93"/><text x="34.9845%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.0028%" y="69" width="0.0837%" height="15" fill="rgb(242,14,37)" fg:x="10455" fg:w="25"/><text x="35.2958%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.0865%" y="69" width="0.3114%" height="15" fill="rgb(246,228,12)" fg:x="10480" fg:w="93"/><text x="35.3795%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.3979%" y="69" width="0.0837%" height="15" fill="rgb(213,55,15)" fg:x="10573" fg:w="25"/><text x="35.6909%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.4816%" y="69" width="0.3114%" height="15" fill="rgb(209,9,3)" fg:x="10598" fg:w="93"/><text x="35.7746%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.7930%" y="69" width="0.0837%" height="15" fill="rgb(230,59,30)" fg:x="10691" fg:w="25"/><text x="36.0859%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="35.8767%" y="69" width="0.3114%" height="15" fill="rgb(209,121,21)" fg:x="10716" fg:w="93"/><text x="36.1696%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="36.1880%" y="69" width="0.0837%" height="15" fill="rgb(220,109,13)" fg:x="10809" fg:w="25"/><text x="36.4810%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="36.2717%" y="69" width="0.7165%" height="15" fill="rgb(232,18,1)" fg:x="10834" fg:w="214"/><text x="36.5647%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="36.9882%" y="69" width="0.2143%" height="15" fill="rgb(215,41,42)" fg:x="11048" fg:w="64"/><text x="37.2812%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="37.2025%" y="69" width="0.0670%" height="15" fill="rgb(224,123,36)" fg:x="11112" fg:w="20"/><text x="37.4954%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="37.2694%" y="53" width="0.1674%" height="15" fill="rgb(240,125,3)" fg:x="11132" fg:w="50"/><text x="37.5624%" y="63.50"></text></g><g><title>utf8_validate (314 instructions, 1.05%)</title><rect x="37.4368%" y="53" width="1.0513%" height="15" fill="rgb(205,98,50)" fg:x="11182" fg:w="314"/><text x="37.7298%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="38.4881%" y="37" width="0.1875%" height="15" fill="rgb(205,185,37)" fg:x="11496" fg:w="56"/><text x="38.7810%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="38.4881%" y="53" width="0.2310%" height="15" fill="rgb(238,207,15)" fg:x="11496" fg:w="69"/><text x="38.7810%" y="63.50"></text></g><g><title>memcpy (338 instructions, 1.13%)</title><rect x="38.7191%" y="53" width="1.1316%" height="15" fill="rgb(213,199,42)" fg:x="11565" fg:w="338"/><text x="39.0120%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (840 instructions, 2.81%)</title><rect x="37.2694%" y="69" width="2.8123%" height="15" fill="rgb(235,201,11)" fg:x="11132" fg:w="840"/><text x="37.5624%" y="79.50">@d..</text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="40.0817%" y="69" width="0.0201%" height="15" fill="rgb(207,46,11)" fg:x="11972" fg:w="6"/><text x="40.3747%" y="79.50"></text></g><g><title>to_2_tuple (28 instructions, 0.09%)</title><rect x="40.1018%" y="69" width="0.0937%" height="15" fill="rgb(241,35,35)" fg:x="11978" fg:w="28"/><text x="40.3947%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="40.1955%" y="69" width="0.2143%" height="15" fill="rgb(243,32,47)" fg:x="12006" fg:w="64"/><text x="40.4885%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="40.4098%" y="69" width="0.1674%" height="15" fill="rgb(247,202,23)" fg:x="12070" fg:w="50"/><text x="40.7028%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="40.5772%" y="53" width="0.1674%" height="15" fill="rgb(219,102,11)" fg:x="12120" fg:w="50"/><text x="40.8702%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="40.5772%" y="69" width="0.2879%" height="15" fill="rgb(243,110,44)" fg:x="12120" fg:w="86"/><text x="40.8702%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="40.8651%" y="69" width="0.2143%" height="15" fill="rgb(222,74,54)" fg:x="12206" fg:w="64"/><text x="41.1581%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="41.0794%" y="53" width="0.1674%" height="15" fill="rgb(216,99,12)" fg:x="12270" fg:w="50"/><text x="41.3723%" y="63.50"></text></g><g><title>utf8_validate (172 instructions, 0.58%)</title><rect x="41.2468%" y="53" width="0.5758%" height="15" fill="rgb(226,22,26)" fg:x="12320" fg:w="172"/><text x="41.5397%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="41.8226%" y="37" width="0.1875%" height="15" fill="rgb(217,163,10)" fg:x="12492" fg:w="56"/><text x="42.1156%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="41.8226%" y="53" width="0.2310%" height="15" fill="rgb(213,25,53)" fg:x="12492" fg:w="69"/><text x="42.1156%" y="63.50"></text></g><g><title>memcpy (115 instructions, 0.39%)</title><rect x="42.0536%" y="53" width="0.3850%" height="15" fill="rgb(252,105,26)" fg:x="12561" fg:w="115"/><text x="42.3466%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (475 instructions, 1.59%)</title><rect x="41.0794%" y="69" width="1.5903%" height="15" fill="rgb(220,39,43)" fg:x="12270" fg:w="475"/><text x="41.3723%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="42.6697%" y="53" width="0.1674%" height="15" fill="rgb(229,68,48)" fg:x="12745" fg:w="50"/><text x="42.9626%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="42.6697%" y="69" width="0.2879%" height="15" fill="rgb(252,8,32)" fg:x="12745" fg:w="86"/><text x="42.9626%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="42.9576%" y="69" width="0.2143%" height="15" fill="rgb(223,20,43)" fg:x="12831" fg:w="64"/><text x="43.2506%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="43.1719%" y="69" width="0.2143%" height="15" fill="rgb(229,81,49)" fg:x="12895" fg:w="64"/><text x="43.4648%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="43.3861%" y="69" width="0.1674%" height="15" fill="rgb(236,28,36)" fg:x="12959" fg:w="50"/><text x="43.6791%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="43.5535%" y="69" width="0.1674%" height="15" fill="rgb(249,185,26)" fg:x="13009" fg:w="50"/><text x="43.8465%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="43.7209%" y="69" width="0.2544%" height="15" fill="rgb(249,174,33)" fg:x="13059" fg:w="76"/><text x="44.0139%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="43.9754%" y="69" width="0.0837%" height="15" fill="rgb(233,201,37)" fg:x="13135" fg:w="25"/><text x="44.2683%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="44.0591%" y="69" width="0.3114%" height="15" fill="rgb(221,78,26)" fg:x="13160" fg:w="93"/><text x="44.3520%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="44.3704%" y="69" width="0.0837%" height="15" fill="rgb(250,127,30)" fg:x="13253" fg:w="25"/><text x="44.6634%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="44.4541%" y="69" width="0.3114%" height="15" fill="rgb(230,49,44)" fg:x="13278" fg:w="93"/><text x="44.7471%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="44.7655%" y="69" width="0.0837%" height="15" fill="rgb(229,67,23)" fg:x="13371" fg:w="25"/><text x="45.0584%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="44.8492%" y="69" width="0.3114%" height="15" fill="rgb(249,83,47)" fg:x="13396" fg:w="93"/><text x="45.1421%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.1605%" y="69" width="0.0837%" height="15" fill="rgb(215,43,3)" fg:x="13489" fg:w="25"/><text x="45.4535%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="45.2442%" y="69" width="0.3114%" height="15" fill="rgb(238,154,13)" fg:x="13514" fg:w="93"/><text x="45.5372%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.5556%" y="69" width="0.0837%" height="15" fill="rgb(219,56,2)" fg:x="13607" fg:w="25"/><text x="45.8486%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="45.6393%" y="69" width="0.3114%" height="15" fill="rgb(233,0,4)" fg:x="13632" fg:w="93"/><text x="45.9323%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.9507%" y="69" width="0.0837%" height="15" fill="rgb(235,30,7)" fg:x="13725" fg:w="25"/><text x="46.2436%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="46.0343%" y="69" width="0.7165%" height="15" fill="rgb(250,79,13)" fg:x="13750" fg:w="214"/><text x="46.3273%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="46.7508%" y="69" width="0.2143%" height="15" fill="rgb(211,146,34)" fg:x="13964" fg:w="64"/><text x="47.0438%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="46.9651%" y="69" width="0.0670%" height="15" fill="rgb(228,22,38)" fg:x="14028" fg:w="20"/><text x="47.2580%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="47.0320%" y="53" width="0.1674%" height="15" fill="rgb(235,168,5)" fg:x="14048" fg:w="50"/><text x="47.3250%" y="63.50"></text></g><g><title>utf8_validate (188 instructions, 0.63%)</title><rect x="47.1994%" y="53" width="0.6294%" height="15" fill="rgb(221,155,16)" fg:x="14098" fg:w="188"/><text x="47.4924%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="47.8289%" y="37" width="0.1875%" height="15" fill="rgb(215,215,53)" fg:x="14286" fg:w="56"/><text x="48.1218%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="47.8289%" y="53" width="0.2310%" height="15" fill="rgb(223,4,10)" fg:x="14286" fg:w="69"/><text x="48.1218%" y="63.50"></text></g><g><title>memcpy (90 instructions, 0.30%)</title><rect x="48.0599%" y="53" width="0.3013%" height="15" fill="rgb(234,103,6)" fg:x="14355" fg:w="90"/><text x="48.3528%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (466 instructions, 1.56%)</title><rect x="47.0320%" y="69" width="1.5601%" height="15" fill="rgb(227,97,0)" fg:x="14048" fg:w="466"/><text x="47.3250%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="48.5922%" y="69" width="0.0201%" height="15" fill="rgb(234,150,53)" fg:x="14514" fg:w="6"/><text x="48.8852%" y="79.50"></text></g><g><title>to_2_tuple (28 instructions, 0.09%)</title><rect x="48.6123%" y="69" width="0.0937%" height="15" fill="rgb(228,201,54)" fg:x="14520" fg:w="28"/><text x="48.9052%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="48.7060%" y="69" width="0.2143%" height="15" fill="rgb(222,22,37)" fg:x="14548" fg:w="64"/><text x="48.9990%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="48.9203%" y="69" width="0.1674%" height="15" fill="rgb(237,53,32)" fg:x="14612" fg:w="50"/><text x="49.2133%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="49.0877%" y="53" width="0.1674%" height="15" fill="rgb(233,25,53)" fg:x="14662" fg:w="50"/><text x="49.3807%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="49.0877%" y="69" width="0.2879%" height="15" fill="rgb(210,40,34)" fg:x="14662" fg:w="86"/><text x="49.3807%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="49.3756%" y="69" width="0.2143%" height="15" fill="rgb(241,220,44)" fg:x="14748" fg:w="64"/><text x="49.6686%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="49.5899%" y="53" width="0.1674%" height="15" fill="rgb(235,28,35)" fg:x="14812" fg:w="50"/><text x="49.8828%" y="63.50"></text></g><g><title>utf8_validate (213 instructions, 0.71%)</title><rect x="49.7573%" y="53" width="0.7131%" height="15" fill="rgb(210,56,17)" fg:x="14862" fg:w="213"/><text x="50.0502%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="50.4704%" y="37" width="0.1875%" height="15" fill="rgb(224,130,29)" fg:x="15075" fg:w="56"/><text x="50.7634%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="50.4704%" y="53" width="0.2310%" height="15" fill="rgb(235,212,8)" fg:x="15075" fg:w="69"/><text x="50.7634%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.52%)</title><rect x="50.7014%" y="53" width="0.5223%" height="15" fill="rgb(223,33,50)" fg:x="15144" fg:w="156"/><text x="50.9944%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (557 instructions, 1.86%)</title><rect x="49.5899%" y="69" width="1.8648%" height="15" fill="rgb(219,149,13)" fg:x="14812" fg:w="557"/><text x="49.8828%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="51.4547%" y="53" width="0.1674%" height="15" fill="rgb(250,156,29)" fg:x="15369" fg:w="50"/><text x="51.7477%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="51.4547%" y="69" width="0.2879%" height="15" fill="rgb(216,193,19)" fg:x="15369" fg:w="86"/><text x="51.7477%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="51.7426%" y="69" width="0.2143%" height="15" fill="rgb(216,135,14)" fg:x="15455" fg:w="64"/><text x="52.0356%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="51.9569%" y="69" width="0.2143%" height="15" fill="rgb(241,47,5)" fg:x="15519" fg:w="64"/><text x="52.2498%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="52.1711%" y="69" width="0.1674%" height="15" fill="rgb(233,42,35)" fg:x="15583" fg:w="50"/><text x="52.4641%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="52.3385%" y="69" width="0.1674%" height="15" fill="rgb(231,13,6)" fg:x="15633" fg:w="50"/><text x="52.6315%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="52.5059%" y="69" width="0.2544%" height="15" fill="rgb(207,181,40)" fg:x="15683" fg:w="76"/><text x="52.7989%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="52.7604%" y="69" width="0.0837%" height="15" fill="rgb(254,173,49)" fg:x="15759" fg:w="25"/><text x="53.0534%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="52.8441%" y="69" width="0.3114%" height="15" fill="rgb(221,1,38)" fg:x="15784" fg:w="93"/><text x="53.1371%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.1554%" y="69" width="0.0837%" height="15" fill="rgb(206,124,46)" fg:x="15877" fg:w="25"/><text x="53.4484%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="53.2391%" y="69" width="0.3114%" height="15" fill="rgb(249,21,11)" fg:x="15902" fg:w="93"/><text x="53.5321%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.5505%" y="69" width="0.0837%" height="15" fill="rgb(222,201,40)" fg:x="15995" fg:w="25"/><text x="53.8435%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="53.6342%" y="69" width="0.3114%" height="15" fill="rgb(235,61,29)" fg:x="16020" fg:w="93"/><text x="53.9272%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.9456%" y="69" width="0.0837%" height="15" fill="rgb(219,207,3)" fg:x="16113" fg:w="25"/><text x="54.2385%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="54.0293%" y="69" width="0.3114%" height="15" fill="rgb(222,56,46)" fg:x="16138" fg:w="93"/><text x="54.3222%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.3406%" y="69" width="0.0837%" height="15" fill="rgb(239,76,54)" fg:x="16231" fg:w="25"/><text x="54.6336%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="54.4243%" y="69" width="0.3114%" height="15" fill="rgb(231,124,27)" fg:x="16256" fg:w="93"/><text x="54.7173%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.7357%" y="69" width="0.0837%" height="15" fill="rgb(249,195,6)" fg:x="16349" fg:w="25"/><text x="55.0286%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="54.8194%" y="69" width="0.7165%" height="15" fill="rgb(237,174,47)" fg:x="16374" fg:w="214"/><text x="55.1123%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="55.5358%" y="69" width="0.2143%" height="15" fill="rgb(206,201,31)" fg:x="16588" fg:w="64"/><text x="55.8288%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="55.7501%" y="69" width="0.0670%" height="15" fill="rgb(231,57,52)" fg:x="16652" fg:w="20"/><text x="56.0431%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="55.8171%" y="53" width="0.1674%" height="15" fill="rgb(248,177,22)" fg:x="16672" fg:w="50"/><text x="56.1100%" y="63.50"></text></g><g><title>utf8_validate (181 instructions, 0.61%)</title><rect x="55.9845%" y="53" width="0.6060%" height="15" fill="rgb(215,211,37)" fg:x="16722" fg:w="181"/><text x="56.2774%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="56.5904%" y="37" width="0.1875%" height="15" fill="rgb(241,128,51)" fg:x="16903" fg:w="56"/><text x="56.8834%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="56.5904%" y="53" width="0.2310%" height="15" fill="rgb(227,165,31)" fg:x="16903" fg:w="69"/><text x="56.8834%" y="63.50"></text></g><g><title>memcpy (123 instructions, 0.41%)</title><rect x="56.8215%" y="53" width="0.4118%" height="15" fill="rgb(228,167,24)" fg:x="16972" fg:w="123"/><text x="57.1144%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (492 instructions, 1.65%)</title><rect x="55.8171%" y="69" width="1.6472%" height="15" fill="rgb(228,143,12)" fg:x="16672" fg:w="492"/><text x="56.1100%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="57.4643%" y="69" width="0.0201%" height="15" fill="rgb(249,149,8)" fg:x="17164" fg:w="6"/><text x="57.7572%" y="79.50"></text></g><g><title>to_2_tuple (28 instructions, 0.09%)</title><rect x="57.4843%" y="69" width="0.0937%" height="15" fill="rgb(243,35,44)" fg:x="17170" fg:w="28"/><text x="57.7773%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="57.5781%" y="69" width="0.2143%" height="15" fill="rgb(246,89,9)" fg:x="17198" fg:w="64"/><text x="57.8711%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="57.7924%" y="69" width="0.1674%" height="15" fill="rgb(233,213,13)" fg:x="17262" fg:w="50"/><text x="58.0853%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="57.9598%" y="53" width="0.1674%" height="15" fill="rgb(233,141,41)" fg:x="17312" fg:w="50"/><text x="58.2527%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="57.9598%" y="69" width="0.2879%" height="15" fill="rgb(239,167,4)" fg:x="17312" fg:w="86"/><text x="58.2527%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="58.2477%" y="69" width="0.2143%" height="15" fill="rgb(209,217,16)" fg:x="17398" fg:w="64"/><text x="58.5407%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="58.4620%" y="53" width="0.1674%" height="15" fill="rgb(219,88,35)" fg:x="17462" fg:w="50"/><text x="58.7549%" y="63.50"></text></g><g><title>utf8_validate (226 instructions, 0.76%)</title><rect x="58.6293%" y="53" width="0.7566%" height="15" fill="rgb(220,193,23)" fg:x="17512" fg:w="226"/><text x="58.9223%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="59.3860%" y="37" width="0.1875%" height="15" fill="rgb(230,90,52)" fg:x="17738" fg:w="56"/><text x="59.6790%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::had1640504c1be483 (69 instructions, 0.23%)</title><rect x="59.3860%" y="53" width="0.2310%" height="15" fill="rgb(252,106,19)" fg:x="17738" fg:w="69"/><text x="59.6790%" y="63.50"></text></g><g><title>memcpy (160 instructions, 0.54%)</title><rect x="59.6170%" y="53" width="0.5357%" height="15" fill="rgb(206,74,20)" fg:x="17807" fg:w="160"/><text x="59.9100%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (574 instructions, 1.92%)</title><rect x="58.4620%" y="69" width="1.9217%" height="15" fill="rgb(230,138,44)" fg:x="17462" fg:w="574"/><text x="58.7549%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="60.3837%" y="53" width="0.1674%" height="15" fill="rgb(235,182,43)" fg:x="18036" fg:w="50"/><text x="60.6766%" y="63.50"></text></g><g><title>find_field (86 instructions, 0.29%)</title><rect x="60.3837%" y="69" width="0.2879%" height="15" fill="rgb(242,16,51)" fg:x="18036" fg:w="86"/><text x="60.6766%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="60.6716%" y="69" width="0.2143%" height="15" fill="rgb(248,9,4)" fg:x="18122" fg:w="64"/><text x="60.9646%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="60.8859%" y="69" width="0.2143%" height="15" fill="rgb(210,31,22)" fg:x="18186" fg:w="64"/><text x="61.1788%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="61.1001%" y="69" width="0.1674%" height="15" fill="rgb(239,54,39)" fg:x="18250" fg:w="50"/><text x="61.3931%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="61.2675%" y="69" width="0.1674%" height="15" fill="rgb(230,99,41)" fg:x="18300" fg:w="50"/><text x="61.5605%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="61.4349%" y="69" width="0.2544%" height="15" fill="rgb(253,106,12)" fg:x="18350" fg:w="76"/><text x="61.7279%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="61.6894%" y="69" width="0.0837%" height="15" fill="rgb(213,46,41)" fg:x="18426" fg:w="25"/><text x="61.9823%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.31%)</title><rect x="61.7731%" y="69" width="0.3114%" height="15" fill="rgb(215,133,35)" fg:x="18451" fg:w="93"/><text x="62.0660%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="62.0844%" y="69" width="0.0837%" height="15" fill="rgb(213,28,5)" fg:x="18544" fg:w="25"/><text x="62.3774%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="62.1681%" y="69" width="0.7165%" height="15" fill="rgb(215,77,49)" fg:x="18569" fg:w="214"/><text x="62.4611%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="62.8846%" y="69" width="0.2143%" height="15" fill="rgb(248,100,22)" fg:x="18783" fg:w="64"/><text x="63.1776%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="63.0989%" y="69" width="0.0670%" height="15" fill="rgb(208,67,9)" fg:x="18847" fg:w="20"/><text x="63.3918%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="63.1658%" y="69" width="0.0201%" height="15" fill="rgb(219,133,21)" fg:x="18867" fg:w="6"/><text x="63.4588%" y="79.50"></text></g><g><title>to_2_tuple (28 instructions, 0.09%)</title><rect x="63.1859%" y="69" width="0.0937%" height="15" fill="rgb(246,46,29)" fg:x="18873" fg:w="28"/><text x="63.4789%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="63.2797%" y="53" width="0.7165%" height="15" fill="rgb(246,185,52)" fg:x="18901" fg:w="214"/><text x="63.5726%" y="63.50"></text></g><g><title>find_field (250 instructions, 0.84%)</title><rect x="63.2797%" y="69" width="0.8370%" height="15" fill="rgb(252,136,11)" fg:x="18901" fg:w="250"/><text x="63.5726%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="64.1166%" y="69" width="0.2143%" height="15" fill="rgb(219,138,53)" fg:x="19151" fg:w="64"/><text x="64.4096%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="64.3309%" y="69" width="0.2143%" height="15" fill="rgb(211,51,23)" fg:x="19215" fg:w="64"/><text x="64.6239%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="64.5452%" y="69" width="0.1674%" height="15" fill="rgb(247,221,28)" fg:x="19279" fg:w="50"/><text x="64.8381%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.17%)</title><rect x="64.7126%" y="69" width="0.1674%" height="15" fill="rgb(251,222,45)" fg:x="19329" fg:w="50"/><text x="65.0055%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.25%)</title><rect x="64.8800%" y="69" width="0.2544%" height="15" fill="rgb(217,162,53)" fg:x="19379" fg:w="76"/><text x="65.1729%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="65.1344%" y="69" width="0.0837%" height="15" fill="rgb(229,93,14)" fg:x="19455" fg:w="25"/><text x="65.4274%" y="79.50"></text></g><g><title>leb128_decode (214 instructions, 0.72%)</title><rect x="65.2181%" y="69" width="0.7165%" height="15" fill="rgb(209,67,49)" fg:x="19480" fg:w="214"/><text x="65.5111%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="65.9346%" y="69" width="0.2143%" height="15" fill="rgb(213,87,29)" fg:x="19694" fg:w="64"/><text x="66.2275%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="66.1488%" y="69" width="0.0670%" height="15" fill="rgb(205,151,52)" fg:x="19758" fg:w="20"/><text x="66.4418%" y="79.50"></text></g><g><title>@deserialize_go&lt;u&gt; (28 instructions, 0.09%)</title><rect x="66.2158%" y="69" width="0.0937%" height="15" fill="rgb(253,215,39)" fg:x="19778" fg:w="28"/><text x="66.5088%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="66.3096%" y="69" width="0.0201%" height="15" fill="rgb(221,220,41)" fg:x="19806" fg:w="6"/><text x="66.6025%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (16,115 instructions, 53.95%)</title><rect x="24.7481%" y="85" width="53.9523%" height="15" fill="rgb(218,133,21)" fg:x="7392" fg:w="16115"/><text x="25.0410%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,N..</text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.07%)</title><rect x="78.7003%" y="85" width="0.0670%" height="15" fill="rgb(221,193,43)" fg:x="23507" fg:w="20"/><text x="78.9933%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="78.7673%" y="69" width="0.1875%" height="15" fill="rgb(240,128,52)" fg:x="23527" fg:w="56"/><text x="79.0603%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;1&gt; (20 instructions, 0.07%)</title><rect x="78.9548%" y="69" width="0.0670%" height="15" fill="rgb(253,114,12)" fg:x="23583" fg:w="20"/><text x="79.2477%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="79.0217%" y="69" width="0.0569%" height="15" fill="rgb(215,223,47)" fg:x="23603" fg:w="17"/><text x="79.3147%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.07%)</title><rect x="79.0786%" y="69" width="0.0670%" height="15" fill="rgb(248,225,23)" fg:x="23620" fg:w="20"/><text x="79.3716%" y="79.50"></text></g><g><title>opt_project (23 instructions, 0.08%)</title><rect x="79.1456%" y="53" width="0.0770%" height="15" fill="rgb(250,108,0)" fg:x="23640" fg:w="23"/><text x="79.4386%" y="63.50"></text></g><g><title>Blob.compare_eq (769 instructions, 2.57%)</title><rect x="79.2226%" y="37" width="2.5746%" height="15" fill="rgb(228,208,7)" fg:x="23663" fg:w="769"/><text x="79.5156%" y="47.50">B..</text></g><g><title>anon-func-154.35 (778 instructions, 2.60%)</title><rect x="79.2226%" y="53" width="2.6047%" height="15" fill="rgb(244,45,10)" fg:x="23663" fg:w="778"/><text x="79.5156%" y="63.50">a..</text></g><g><title>some (848 instructions, 2.84%)</title><rect x="79.1456%" y="69" width="2.8391%" height="15" fill="rgb(207,125,25)" fg:x="23640" fg:w="848"/><text x="79.4386%" y="79.50">so..</text></g><g><title>rec (10 instructions, 0.03%)</title><rect x="81.9847%" y="69" width="0.0335%" height="15" fill="rgb(210,195,18)" fg:x="24488" fg:w="10"/><text x="82.2776%" y="79.50"></text></g><g><title>Nat-&gt;Nat64 (17 instructions, 0.06%)</title><rect x="82.0181%" y="69" width="0.0569%" height="15" fill="rgb(249,80,12)" fg:x="24498" fg:w="17"/><text x="82.3111%" y="79.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;1&gt; (20 instructions, 0.07%)</title><rect x="82.0751%" y="69" width="0.0670%" height="15" fill="rgb(221,65,9)" fg:x="24515" fg:w="20"/><text x="82.3680%" y="79.50"></text></g><g><title>box_i64 (15 instructions, 0.05%)</title><rect x="82.1420%" y="69" width="0.0502%" height="15" fill="rgb(235,49,36)" fg:x="24535" fg:w="15"/><text x="82.4350%" y="79.50"></text></g><g><title>to_2_tuple (28 instructions, 0.09%)</title><rect x="82.1922%" y="69" width="0.0937%" height="15" fill="rgb(225,32,20)" fg:x="24550" fg:w="28"/><text x="82.4852%" y="79.50"></text></g><g><title>opt_inject (23 instructions, 0.08%)</title><rect x="82.2860%" y="69" width="0.0770%" height="15" fill="rgb(215,141,46)" fg:x="24578" fg:w="23"/><text x="82.5790%" y="79.50"></text></g><g><title>B_add (27 instructions, 0.09%)</title><rect x="82.3630%" y="69" width="0.0904%" height="15" fill="rgb(250,160,47)" fg:x="24601" fg:w="27"/><text x="82.6560%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.07%)</title><rect x="82.4534%" y="69" width="0.0670%" height="15" fill="rgb(216,222,40)" fg:x="24628" fg:w="20"/><text x="82.7463%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;1&gt; (20 instructions, 0.07%)</title><rect x="82.5203%" y="69" width="0.0670%" height="15" fill="rgb(234,217,39)" fg:x="24648" fg:w="20"/><text x="82.8133%" y="79.50"></text></g><g><title>box_i64 (15 instructions, 0.05%)</title><rect x="82.5873%" y="69" width="0.0502%" height="15" fill="rgb(207,178,40)" fg:x="24668" fg:w="15"/><text x="82.8803%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="82.6375%" y="53" width="0.0569%" height="15" fill="rgb(221,136,13)" fg:x="24683" fg:w="17"/><text x="82.9305%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (41 instructions, 0.14%)</title><rect x="82.6944%" y="53" width="0.1373%" height="15" fill="rgb(249,199,10)" fg:x="24700" fg:w="41"/><text x="82.9874%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="82.8317%" y="53" width="0.1105%" height="15" fill="rgb(249,222,13)" fg:x="24741" fg:w="33"/><text x="83.1247%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="82.9422%" y="53" width="0.1875%" height="15" fill="rgb(244,185,38)" fg:x="24774" fg:w="56"/><text x="83.2351%" y="63.50"></text></g><g><title>memcpy (142 instructions, 0.48%)</title><rect x="83.1297%" y="53" width="0.4754%" height="15" fill="rgb(236,202,9)" fg:x="24830" fg:w="142"/><text x="83.4226%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.19%)</title><rect x="83.6051%" y="53" width="0.1875%" height="15" fill="rgb(250,229,37)" fg:x="24972" fg:w="56"/><text x="83.8980%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="83.7926%" y="53" width="0.0368%" height="15" fill="rgb(206,174,23)" fg:x="25028" fg:w="11"/><text x="84.0855%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.06%)</title><rect x="83.8294%" y="53" width="0.0569%" height="15" fill="rgb(211,33,43)" fg:x="25039" fg:w="17"/><text x="84.1224%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="83.8863%" y="37" width="0.0368%" height="15" fill="rgb(245,58,50)" fg:x="25056" fg:w="11"/><text x="84.1793%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.17%)</title><rect x="83.8863%" y="53" width="0.1707%" height="15" fill="rgb(244,68,36)" fg:x="25056" fg:w="51"/><text x="84.1793%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="84.0570%" y="53" width="0.1105%" height="15" fill="rgb(232,229,15)" fg:x="25107" fg:w="33"/><text x="84.3500%" y="63.50"></text></g><g><title>reply_with_data (1,079 instructions, 3.61%)</title><rect x="84.1675%" y="53" width="3.6124%" height="15" fill="rgb(254,30,23)" fg:x="25140" fg:w="1079"/><text x="84.4605%" y="63.50">rep..</text></g><g><title>$lambda.37 (1,772 instructions, 5.93%)</title><rect x="82.6375%" y="69" width="5.9326%" height="15" fill="rgb(235,160,14)" fg:x="24683" fg:w="1772"/><text x="82.9305%" y="79.50">$lambd..</text></g><g><title>$lambda.1 (4,146 instructions, 13.88%)</title><rect x="78.7673%" y="85" width="13.8806%" height="15" fill="rgb(212,155,44)" fg:x="23527" fg:w="4146"/><text x="79.0603%" y="95.50">$lambda.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.36%)</title><rect x="92.6479%" y="85" width="0.3616%" height="15" fill="rgb(226,2,50)" fg:x="27673" fg:w="108"/><text x="92.9409%" y="95.50"></text></g><g><title>trans_state4 (16 instructions, 0.05%)</title><rect x="93.0095%" y="85" width="0.0536%" height="15" fill="rgb(234,177,6)" fg:x="27781" fg:w="16"/><text x="93.3024%" y="95.50"></text></g><g><title>all (29,869 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="29869"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (29,869 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="29869"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>