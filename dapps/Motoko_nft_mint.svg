<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="166" onload="init(evt)" viewBox="0 0 1024 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">NFT.mintDip721</text><text id="details" fill="rgb(0,0,0)" x="10" y="149.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="149.00"> </text><svg id="frames" x="10" width="1004" total_samples="31104"><g><title>trans_state5 (10 instructions, 0.03%)</title><rect x="0.0000%" y="85" width="0.0322%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2930%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (411 instructions, 1.32%)</title><rect x="0.0322%" y="69" width="1.3214%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="411"/><text x="0.3251%" y="79.50"></text></g><g><title>alloc_blob (419 instructions, 1.35%)</title><rect x="0.0322%" y="85" width="1.3471%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="419"/><text x="0.3251%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="1.3792%" y="69" width="0.1543%" height="15" fill="rgb(248,212,6)" fg:x="429" fg:w="48"/><text x="1.6722%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="1.5336%" y="69" width="0.1833%" height="15" fill="rgb(208,68,35)" fg:x="477" fg:w="57"/><text x="1.8265%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="1.7168%" y="69" width="0.2058%" height="15" fill="rgb(232,128,0)" fg:x="534" fg:w="64"/><text x="2.0098%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="1.9226%" y="69" width="0.2058%" height="15" fill="rgb(207,160,47)" fg:x="598" fg:w="64"/><text x="2.2156%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="2.1283%" y="69" width="0.0386%" height="15" fill="rgb(228,23,34)" fg:x="662" fg:w="12"/><text x="2.4213%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="2.1669%" y="69" width="0.2058%" height="15" fill="rgb(218,30,26)" fg:x="674" fg:w="64"/><text x="2.4599%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="2.3727%" y="69" width="0.1543%" height="15" fill="rgb(220,122,19)" fg:x="738" fg:w="48"/><text x="2.6657%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="2.5270%" y="69" width="0.7330%" height="15" fill="rgb(250,228,42)" fg:x="786" fg:w="228"/><text x="2.8200%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="3.2600%" y="69" width="0.2058%" height="15" fill="rgb(240,193,28)" fg:x="1014" fg:w="64"/><text x="3.5530%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="3.4658%" y="69" width="0.0386%" height="15" fill="rgb(216,20,37)" fg:x="1078" fg:w="12"/><text x="3.7588%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="3.5044%" y="69" width="0.7330%" height="15" fill="rgb(206,188,39)" fg:x="1090" fg:w="228"/><text x="3.7973%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="4.2374%" y="69" width="0.2058%" height="15" fill="rgb(217,207,13)" fg:x="1318" fg:w="64"/><text x="4.5304%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="4.4432%" y="69" width="0.0386%" height="15" fill="rgb(231,73,38)" fg:x="1382" fg:w="12"/><text x="4.7361%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="4.4817%" y="69" width="0.7330%" height="15" fill="rgb(225,20,46)" fg:x="1394" fg:w="228"/><text x="4.7747%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.2148%" y="69" width="0.2058%" height="15" fill="rgb(210,31,41)" fg:x="1622" fg:w="64"/><text x="5.5077%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="5.4205%" y="69" width="0.0386%" height="15" fill="rgb(221,200,47)" fg:x="1686" fg:w="12"/><text x="5.7135%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.4591%" y="69" width="0.2058%" height="15" fill="rgb(226,26,5)" fg:x="1698" fg:w="64"/><text x="5.7521%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.6649%" y="69" width="0.2058%" height="15" fill="rgb(249,33,26)" fg:x="1762" fg:w="64"/><text x="5.9578%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="5.8706%" y="69" width="0.0386%" height="15" fill="rgb(235,183,28)" fg:x="1826" fg:w="12"/><text x="6.1636%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="5.9092%" y="69" width="0.2058%" height="15" fill="rgb(221,5,38)" fg:x="1838" fg:w="64"/><text x="6.2022%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.1150%" y="69" width="0.2058%" height="15" fill="rgb(247,18,42)" fg:x="1902" fg:w="64"/><text x="6.4079%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="6.3207%" y="69" width="0.0386%" height="15" fill="rgb(241,131,45)" fg:x="1966" fg:w="12"/><text x="6.6137%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.3593%" y="69" width="0.2058%" height="15" fill="rgb(249,31,29)" fg:x="1978" fg:w="64"/><text x="6.6523%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="6.5651%" y="69" width="0.1543%" height="15" fill="rgb(225,111,53)" fg:x="2042" fg:w="48"/><text x="6.8580%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="6.7194%" y="69" width="0.1543%" height="15" fill="rgb(238,160,17)" fg:x="2090" fg:w="48"/><text x="7.0124%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="6.8737%" y="69" width="0.2058%" height="15" fill="rgb(214,148,48)" fg:x="2138" fg:w="64"/><text x="7.1667%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="7.0795%" y="69" width="0.0386%" height="15" fill="rgb(232,36,49)" fg:x="2202" fg:w="12"/><text x="7.3724%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="7.1181%" y="69" width="0.1543%" height="15" fill="rgb(209,103,24)" fg:x="2214" fg:w="48"/><text x="7.4110%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="7.2724%" y="69" width="0.2058%" height="15" fill="rgb(229,88,8)" fg:x="2262" fg:w="64"/><text x="7.5653%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="7.4781%" y="69" width="0.0386%" height="15" fill="rgb(213,181,19)" fg:x="2326" fg:w="12"/><text x="7.7711%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="7.5167%" y="69" width="0.2058%" height="15" fill="rgb(254,191,54)" fg:x="2338" fg:w="64"/><text x="7.8097%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="7.7225%" y="69" width="0.1543%" height="15" fill="rgb(241,83,37)" fg:x="2402" fg:w="48"/><text x="8.0154%" y="79.50"></text></g><g><title>leb128_decode (183 instructions, 0.59%)</title><rect x="7.8768%" y="69" width="0.5883%" height="15" fill="rgb(233,36,39)" fg:x="2450" fg:w="183"/><text x="8.1698%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="8.4651%" y="69" width="0.2058%" height="15" fill="rgb(226,3,54)" fg:x="2633" fg:w="64"/><text x="8.7581%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="8.6709%" y="69" width="0.0386%" height="15" fill="rgb(245,192,40)" fg:x="2697" fg:w="12"/><text x="8.9639%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="8.7095%" y="69" width="0.7330%" height="15" fill="rgb(238,167,29)" fg:x="2709" fg:w="228"/><text x="9.0025%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="9.4425%" y="69" width="0.2058%" height="15" fill="rgb(232,182,51)" fg:x="2937" fg:w="64"/><text x="9.7355%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="9.6483%" y="69" width="0.0386%" height="15" fill="rgb(231,60,39)" fg:x="3001" fg:w="12"/><text x="9.9412%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="9.6869%" y="69" width="0.7330%" height="15" fill="rgb(208,69,12)" fg:x="3013" fg:w="228"/><text x="9.9798%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="10.4199%" y="69" width="0.2058%" height="15" fill="rgb(235,93,37)" fg:x="3241" fg:w="64"/><text x="10.7129%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="10.6256%" y="69" width="0.0386%" height="15" fill="rgb(213,116,39)" fg:x="3305" fg:w="12"/><text x="10.9186%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="10.6642%" y="69" width="0.7330%" height="15" fill="rgb(222,207,29)" fg:x="3317" fg:w="228"/><text x="10.9572%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="11.3972%" y="69" width="0.2058%" height="15" fill="rgb(206,96,30)" fg:x="3545" fg:w="64"/><text x="11.6902%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="11.6030%" y="69" width="0.0386%" height="15" fill="rgb(218,138,4)" fg:x="3609" fg:w="12"/><text x="11.8960%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="11.6416%" y="69" width="0.7330%" height="15" fill="rgb(250,191,14)" fg:x="3621" fg:w="228"/><text x="11.9346%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="12.3746%" y="69" width="0.2058%" height="15" fill="rgb(239,60,40)" fg:x="3849" fg:w="64"/><text x="12.6676%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="12.5804%" y="69" width="0.0386%" height="15" fill="rgb(206,27,48)" fg:x="3913" fg:w="12"/><text x="12.8733%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="12.6190%" y="69" width="0.7330%" height="15" fill="rgb(225,35,8)" fg:x="3925" fg:w="228"/><text x="12.9119%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="13.3520%" y="69" width="0.2058%" height="15" fill="rgb(250,213,24)" fg:x="4153" fg:w="64"/><text x="13.6449%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="13.5577%" y="69" width="0.0386%" height="15" fill="rgb(247,123,22)" fg:x="4217" fg:w="12"/><text x="13.8507%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="13.5963%" y="69" width="0.7330%" height="15" fill="rgb(231,138,38)" fg:x="4229" fg:w="228"/><text x="13.8893%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="14.3293%" y="69" width="0.2058%" height="15" fill="rgb(231,145,46)" fg:x="4457" fg:w="64"/><text x="14.6223%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="14.5351%" y="69" width="0.0386%" height="15" fill="rgb(251,118,11)" fg:x="4521" fg:w="12"/><text x="14.8281%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="14.5737%" y="69" width="0.2058%" height="15" fill="rgb(217,147,25)" fg:x="4533" fg:w="64"/><text x="14.8667%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="14.7794%" y="69" width="0.1543%" height="15" fill="rgb(247,81,37)" fg:x="4597" fg:w="48"/><text x="15.0724%" y="79.50"></text></g><g><title>leb128_decode (183 instructions, 0.59%)</title><rect x="14.9338%" y="69" width="0.5883%" height="15" fill="rgb(209,12,38)" fg:x="4645" fg:w="183"/><text x="15.2267%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="15.5221%" y="69" width="0.2058%" height="15" fill="rgb(227,1,9)" fg:x="4828" fg:w="64"/><text x="15.8151%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="15.7279%" y="69" width="0.0386%" height="15" fill="rgb(248,47,43)" fg:x="4892" fg:w="12"/><text x="16.0208%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="15.7665%" y="69" width="0.7330%" height="15" fill="rgb(221,10,30)" fg:x="4904" fg:w="228"/><text x="16.0594%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.4995%" y="69" width="0.2058%" height="15" fill="rgb(210,229,1)" fg:x="5132" fg:w="64"/><text x="16.7925%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="16.7052%" y="69" width="0.0386%" height="15" fill="rgb(222,148,37)" fg:x="5196" fg:w="12"/><text x="16.9982%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.7438%" y="69" width="0.2058%" height="15" fill="rgb(234,67,33)" fg:x="5208" fg:w="64"/><text x="17.0368%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="16.9496%" y="69" width="0.2058%" height="15" fill="rgb(247,98,35)" fg:x="5272" fg:w="64"/><text x="17.2426%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.1553%" y="69" width="0.2058%" height="15" fill="rgb(247,138,52)" fg:x="5336" fg:w="64"/><text x="17.4483%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.3611%" y="69" width="0.2058%" height="15" fill="rgb(213,79,30)" fg:x="5400" fg:w="64"/><text x="17.6541%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.5669%" y="69" width="0.2058%" height="15" fill="rgb(246,177,23)" fg:x="5464" fg:w="64"/><text x="17.8598%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.7726%" y="69" width="0.2058%" height="15" fill="rgb(230,62,27)" fg:x="5528" fg:w="64"/><text x="18.0656%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="17.9784%" y="69" width="0.2058%" height="15" fill="rgb(216,154,8)" fg:x="5592" fg:w="64"/><text x="18.2714%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="18.1842%" y="69" width="0.1543%" height="15" fill="rgb(244,35,45)" fg:x="5656" fg:w="48"/><text x="18.4771%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="18.3385%" y="69" width="0.2058%" height="15" fill="rgb(251,115,12)" fg:x="5704" fg:w="64"/><text x="18.6314%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (17 instructions, 0.05%)</title><rect x="18.5442%" y="69" width="0.0547%" height="15" fill="rgb(240,54,50)" fg:x="5768" fg:w="17"/><text x="18.8372%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="18.5989%" y="69" width="0.2058%" height="15" fill="rgb(233,84,52)" fg:x="5785" fg:w="64"/><text x="18.8919%" y="79.50"></text></g><g><title>motoko_rts::idl::check_typearg::h3b881c31b9db46be (12 instructions, 0.04%)</title><rect x="18.8047%" y="69" width="0.0386%" height="15" fill="rgb(207,117,47)" fg:x="5849" fg:w="12"/><text x="19.0976%" y="79.50"></text></g><g><title>parse_idl_header (6,997 instructions, 22.50%)</title><rect x="1.3792%" y="85" width="22.4955%" height="15" fill="rgb(249,43,39)" fg:x="429" fg:w="6997"/><text x="1.6722%" y="95.50">parse_idl_header</text></g><g><title>memset (6 instructions, 0.02%)</title><rect x="23.8747%" y="69" width="0.0193%" height="15" fill="rgb(209,38,44)" fg:x="7426" fg:w="6"/><text x="24.1677%" y="79.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.05%)</title><rect x="23.8747%" y="85" width="0.0482%" height="15" fill="rgb(236,212,23)" fg:x="7426" fg:w="15"/><text x="24.1677%" y="95.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="23.9230%" y="85" width="0.1543%" height="15" fill="rgb(242,79,21)" fg:x="7441" fg:w="48"/><text x="24.2159%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="24.0773%" y="85" width="0.2058%" height="15" fill="rgb(211,96,35)" fg:x="7489" fg:w="64"/><text x="24.3703%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="24.2831%" y="69" width="0.0643%" height="15" fill="rgb(253,215,40)" fg:x="7553" fg:w="20"/><text x="24.5760%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="24.3474%" y="69" width="0.1543%" height="15" fill="rgb(211,81,21)" fg:x="7573" fg:w="48"/><text x="24.6403%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="24.5017%" y="53" width="0.1833%" height="15" fill="rgb(208,190,38)" fg:x="7621" fg:w="57"/><text x="24.7946%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.21%)</title><rect x="24.5017%" y="69" width="0.2090%" height="15" fill="rgb(235,213,38)" fg:x="7621" fg:w="65"/><text x="24.7946%" y="79.50"></text></g><g><title>memcpy (167 instructions, 0.54%)</title><rect x="24.7106%" y="69" width="0.5369%" height="15" fill="rgb(237,122,38)" fg:x="7686" fg:w="167"/><text x="25.0036%" y="79.50"></text></g><g><title>@deserialize_go&lt;P&gt; (413 instructions, 1.33%)</title><rect x="24.2831%" y="85" width="1.3278%" height="15" fill="rgb(244,218,35)" fg:x="7553" fg:w="413"/><text x="24.5760%" y="95.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.6109%" y="85" width="0.2058%" height="15" fill="rgb(240,68,47)" fg:x="7966" fg:w="64"/><text x="25.9038%" y="95.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="25.8166%" y="69" width="0.0643%" height="15" fill="rgb(210,16,53)" fg:x="8030" fg:w="20"/><text x="26.1096%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="25.8809%" y="69" width="0.2058%" height="15" fill="rgb(235,124,12)" fg:x="8050" fg:w="64"/><text x="26.1739%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="26.0867%" y="69" width="0.2058%" height="15" fill="rgb(224,169,11)" fg:x="8114" fg:w="64"/><text x="26.3796%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="26.2924%" y="69" width="0.1543%" height="15" fill="rgb(250,166,2)" fg:x="8178" fg:w="48"/><text x="26.5854%" y="79.50"></text></g><g><title>idl_limit_check (14 instructions, 0.05%)</title><rect x="26.4468%" y="69" width="0.0450%" height="15" fill="rgb(242,216,29)" fg:x="8226" fg:w="14"/><text x="26.7397%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::heebb6365e1e316bb (60 instructions, 0.19%)</title><rect x="26.4918%" y="53" width="0.1929%" height="15" fill="rgb(230,116,27)" fg:x="8240" fg:w="60"/><text x="26.7847%" y="63.50"></text></g><g><title>alloc_array (68 instructions, 0.22%)</title><rect x="26.4918%" y="69" width="0.2186%" height="15" fill="rgb(228,99,48)" fg:x="8240" fg:w="68"/><text x="26.7847%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="26.7104%" y="69" width="0.0643%" height="15" fill="rgb(253,11,6)" fg:x="8308" fg:w="20"/><text x="27.0034%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="26.7747%" y="69" width="0.2058%" height="15" fill="rgb(247,143,39)" fg:x="8328" fg:w="64"/><text x="27.0677%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="26.9805%" y="69" width="0.1543%" height="15" fill="rgb(236,97,10)" fg:x="8392" fg:w="48"/><text x="27.2734%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="27.1348%" y="53" width="0.7330%" height="15" fill="rgb(233,208,19)" fg:x="8440" fg:w="228"/><text x="27.4277%" y="63.50"></text></g><g><title>find_field (264 instructions, 0.85%)</title><rect x="27.1348%" y="69" width="0.8488%" height="15" fill="rgb(216,164,2)" fg:x="8440" fg:w="264"/><text x="27.4277%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="27.9835%" y="69" width="0.2058%" height="15" fill="rgb(220,129,5)" fg:x="8704" fg:w="64"/><text x="28.2765%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="28.1893%" y="53" width="0.0643%" height="15" fill="rgb(242,17,10)" fg:x="8768" fg:w="20"/><text x="28.4823%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="28.2536%" y="53" width="0.2058%" height="15" fill="rgb(242,107,0)" fg:x="8788" fg:w="64"/><text x="28.5466%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="28.4594%" y="53" width="0.2058%" height="15" fill="rgb(251,28,31)" fg:x="8852" fg:w="64"/><text x="28.7523%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="28.6651%" y="53" width="0.1543%" height="15" fill="rgb(233,223,10)" fg:x="8916" fg:w="48"/><text x="28.9581%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="28.8194%" y="37" width="0.1833%" height="15" fill="rgb(215,21,27)" fg:x="8964" fg:w="57"/><text x="29.1124%" y="47.50"></text></g><g><title>alloc_blob (65 instructions, 0.21%)</title><rect x="28.8194%" y="53" width="0.2090%" height="15" fill="rgb(232,23,21)" fg:x="8964" fg:w="65"/><text x="29.1124%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.50%)</title><rect x="29.0284%" y="53" width="0.5015%" height="15" fill="rgb(244,5,23)" fg:x="9029" fg:w="156"/><text x="29.3214%" y="63.50"></text></g><g><title>@deserialize_go&lt;B&gt; (547 instructions, 1.76%)</title><rect x="28.1893%" y="69" width="1.7586%" height="15" fill="rgb(226,81,46)" fg:x="8768" fg:w="547"/><text x="28.4823%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="29.9479%" y="53" width="0.7330%" height="15" fill="rgb(247,70,30)" fg:x="9315" fg:w="228"/><text x="30.2409%" y="63.50"></text></g><g><title>find_field (264 instructions, 0.85%)</title><rect x="29.9479%" y="69" width="0.8488%" height="15" fill="rgb(212,68,19)" fg:x="9315" fg:w="264"/><text x="30.2409%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="30.7967%" y="69" width="0.2058%" height="15" fill="rgb(240,187,13)" fg:x="9579" fg:w="64"/><text x="31.0897%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="31.0024%" y="69" width="0.0643%" height="15" fill="rgb(223,113,26)" fg:x="9643" fg:w="20"/><text x="31.2954%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="31.0667%" y="69" width="0.2058%" height="15" fill="rgb(206,192,2)" fg:x="9663" fg:w="64"/><text x="31.3597%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="31.2725%" y="69" width="0.2058%" height="15" fill="rgb(241,108,4)" fg:x="9727" fg:w="64"/><text x="31.5655%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="31.4783%" y="69" width="0.1543%" height="15" fill="rgb(247,173,49)" fg:x="9791" fg:w="48"/><text x="31.7712%" y="79.50"></text></g><g><title>idl_limit_check (14 instructions, 0.05%)</title><rect x="31.6326%" y="69" width="0.0450%" height="15" fill="rgb(224,114,35)" fg:x="9839" fg:w="14"/><text x="31.9256%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::heebb6365e1e316bb (60 instructions, 0.19%)</title><rect x="31.6776%" y="53" width="0.1929%" height="15" fill="rgb(245,159,27)" fg:x="9853" fg:w="60"/><text x="31.9706%" y="63.50"></text></g><g><title>alloc_array (68 instructions, 0.22%)</title><rect x="31.6776%" y="69" width="0.2186%" height="15" fill="rgb(245,172,44)" fg:x="9853" fg:w="68"/><text x="31.9706%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="31.8962%" y="69" width="0.0643%" height="15" fill="rgb(236,23,11)" fg:x="9921" fg:w="20"/><text x="32.1892%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="31.9605%" y="69" width="0.2058%" height="15" fill="rgb(205,117,38)" fg:x="9941" fg:w="64"/><text x="32.2535%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="32.1663%" y="69" width="0.1543%" height="15" fill="rgb(237,72,25)" fg:x="10005" fg:w="48"/><text x="32.4592%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="32.3206%" y="53" width="0.1543%" height="15" fill="rgb(244,70,9)" fg:x="10053" fg:w="48"/><text x="32.6136%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="32.3206%" y="69" width="0.2701%" height="15" fill="rgb(217,125,39)" fg:x="10053" fg:w="84"/><text x="32.6136%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="32.5907%" y="69" width="0.2058%" height="15" fill="rgb(235,36,10)" fg:x="10137" fg:w="64"/><text x="32.8836%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="32.7964%" y="53" width="0.0643%" height="15" fill="rgb(251,123,47)" fg:x="10201" fg:w="20"/><text x="33.0894%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="32.8607%" y="53" width="0.1543%" height="15" fill="rgb(221,13,13)" fg:x="10221" fg:w="48"/><text x="33.1537%" y="63.50"></text></g><g><title>utf8_validate (162 instructions, 0.52%)</title><rect x="33.0150%" y="53" width="0.5208%" height="15" fill="rgb(238,131,9)" fg:x="10269" fg:w="162"/><text x="33.3080%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="33.5359%" y="37" width="0.1833%" height="15" fill="rgb(211,50,8)" fg:x="10431" fg:w="57"/><text x="33.8288%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="33.5359%" y="53" width="0.2283%" height="15" fill="rgb(245,182,24)" fg:x="10431" fg:w="71"/><text x="33.8288%" y="63.50"></text></g><g><title>memcpy (72 instructions, 0.23%)</title><rect x="33.7641%" y="53" width="0.2315%" height="15" fill="rgb(242,14,37)" fg:x="10502" fg:w="72"/><text x="34.0571%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (450 instructions, 1.45%)</title><rect x="32.7964%" y="69" width="1.4468%" height="15" fill="rgb(246,228,12)" fg:x="10201" fg:w="450"/><text x="33.0894%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="34.2432%" y="53" width="0.1543%" height="15" fill="rgb(213,55,15)" fg:x="10651" fg:w="48"/><text x="34.5362%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="34.2432%" y="69" width="0.2701%" height="15" fill="rgb(209,9,3)" fg:x="10651" fg:w="84"/><text x="34.5362%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="34.5132%" y="69" width="0.2058%" height="15" fill="rgb(230,59,30)" fg:x="10735" fg:w="64"/><text x="34.8062%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="34.7190%" y="69" width="0.0643%" height="15" fill="rgb(209,121,21)" fg:x="10799" fg:w="20"/><text x="35.0120%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="34.7833%" y="69" width="0.2058%" height="15" fill="rgb(220,109,13)" fg:x="10819" fg:w="64"/><text x="35.0763%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="34.9891%" y="69" width="0.1543%" height="15" fill="rgb(232,18,1)" fg:x="10883" fg:w="48"/><text x="35.2820%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="35.1434%" y="69" width="0.1543%" height="15" fill="rgb(215,41,42)" fg:x="10931" fg:w="48"/><text x="35.4364%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.24%)</title><rect x="35.2977%" y="69" width="0.2443%" height="15" fill="rgb(224,123,36)" fg:x="10979" fg:w="76"/><text x="35.5907%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.5421%" y="69" width="0.0804%" height="15" fill="rgb(240,125,3)" fg:x="11055" fg:w="25"/><text x="35.8350%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="35.6224%" y="69" width="0.2990%" height="15" fill="rgb(205,98,50)" fg:x="11080" fg:w="93"/><text x="35.9154%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="35.9214%" y="69" width="0.0804%" height="15" fill="rgb(205,185,37)" fg:x="11173" fg:w="25"/><text x="36.2144%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="36.0018%" y="69" width="0.2990%" height="15" fill="rgb(238,207,15)" fg:x="11198" fg:w="93"/><text x="36.2948%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="36.3008%" y="69" width="0.0804%" height="15" fill="rgb(213,199,42)" fg:x="11291" fg:w="25"/><text x="36.5938%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="36.3812%" y="69" width="0.2990%" height="15" fill="rgb(235,201,11)" fg:x="11316" fg:w="93"/><text x="36.6741%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="36.6802%" y="69" width="0.0804%" height="15" fill="rgb(207,46,11)" fg:x="11409" fg:w="25"/><text x="36.9731%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="36.7605%" y="69" width="0.2990%" height="15" fill="rgb(241,35,35)" fg:x="11434" fg:w="93"/><text x="37.0535%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="37.0595%" y="69" width="0.0804%" height="15" fill="rgb(243,32,47)" fg:x="11527" fg:w="25"/><text x="37.3525%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="37.1399%" y="69" width="0.2990%" height="15" fill="rgb(247,202,23)" fg:x="11552" fg:w="93"/><text x="37.4329%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="37.4389%" y="69" width="0.0804%" height="15" fill="rgb(219,102,11)" fg:x="11645" fg:w="25"/><text x="37.7319%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="37.5193%" y="69" width="0.7330%" height="15" fill="rgb(243,110,44)" fg:x="11670" fg:w="228"/><text x="37.8123%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="38.2523%" y="69" width="0.2058%" height="15" fill="rgb(222,74,54)" fg:x="11898" fg:w="64"/><text x="38.5453%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="38.4581%" y="53" width="0.0643%" height="15" fill="rgb(216,99,12)" fg:x="11962" fg:w="20"/><text x="38.7510%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="38.5224%" y="53" width="0.1543%" height="15" fill="rgb(226,22,26)" fg:x="11982" fg:w="48"/><text x="38.8153%" y="63.50"></text></g><g><title>utf8_validate (314 instructions, 1.01%)</title><rect x="38.6767%" y="53" width="1.0095%" height="15" fill="rgb(217,163,10)" fg:x="12030" fg:w="314"/><text x="38.9697%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="39.6862%" y="37" width="0.1833%" height="15" fill="rgb(213,25,53)" fg:x="12344" fg:w="57"/><text x="39.9792%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="39.6862%" y="53" width="0.2283%" height="15" fill="rgb(252,105,26)" fg:x="12344" fg:w="71"/><text x="39.9792%" y="63.50"></text></g><g><title>memcpy (338 instructions, 1.09%)</title><rect x="39.9145%" y="53" width="1.0867%" height="15" fill="rgb(220,39,43)" fg:x="12415" fg:w="338"/><text x="40.2074%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (868 instructions, 2.79%)</title><rect x="38.4581%" y="69" width="2.7906%" height="15" fill="rgb(229,68,48)" fg:x="11962" fg:w="868"/><text x="38.7510%" y="79.50">@d..</text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="41.2487%" y="69" width="0.0193%" height="15" fill="rgb(252,8,32)" fg:x="12830" fg:w="6"/><text x="41.5417%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="41.2680%" y="69" width="0.0643%" height="15" fill="rgb(223,20,43)" fg:x="12836" fg:w="20"/><text x="41.5610%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="41.3323%" y="69" width="0.2058%" height="15" fill="rgb(229,81,49)" fg:x="12856" fg:w="64"/><text x="41.6253%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="41.5381%" y="69" width="0.1543%" height="15" fill="rgb(236,28,36)" fg:x="12920" fg:w="48"/><text x="41.8310%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="41.6924%" y="53" width="0.1543%" height="15" fill="rgb(249,185,26)" fg:x="12968" fg:w="48"/><text x="41.9854%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="41.6924%" y="69" width="0.2701%" height="15" fill="rgb(249,174,33)" fg:x="12968" fg:w="84"/><text x="41.9854%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="41.9624%" y="69" width="0.2058%" height="15" fill="rgb(233,201,37)" fg:x="13052" fg:w="64"/><text x="42.2554%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="42.1682%" y="53" width="0.0643%" height="15" fill="rgb(221,78,26)" fg:x="13116" fg:w="20"/><text x="42.4612%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="42.2325%" y="53" width="0.1543%" height="15" fill="rgb(250,127,30)" fg:x="13136" fg:w="48"/><text x="42.5255%" y="63.50"></text></g><g><title>utf8_validate (172 instructions, 0.55%)</title><rect x="42.3868%" y="53" width="0.5530%" height="15" fill="rgb(230,49,44)" fg:x="13184" fg:w="172"/><text x="42.6798%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="42.9398%" y="37" width="0.1833%" height="15" fill="rgb(229,67,23)" fg:x="13356" fg:w="57"/><text x="43.2328%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="42.9398%" y="53" width="0.2283%" height="15" fill="rgb(249,83,47)" fg:x="13356" fg:w="71"/><text x="43.2328%" y="63.50"></text></g><g><title>memcpy (115 instructions, 0.37%)</title><rect x="43.1681%" y="53" width="0.3697%" height="15" fill="rgb(215,43,3)" fg:x="13427" fg:w="115"/><text x="43.4611%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (503 instructions, 1.62%)</title><rect x="42.1682%" y="69" width="1.6172%" height="15" fill="rgb(238,154,13)" fg:x="13116" fg:w="503"/><text x="42.4612%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="43.7854%" y="53" width="0.1543%" height="15" fill="rgb(219,56,2)" fg:x="13619" fg:w="48"/><text x="44.0783%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="43.7854%" y="69" width="0.2701%" height="15" fill="rgb(233,0,4)" fg:x="13619" fg:w="84"/><text x="44.0783%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="44.0554%" y="69" width="0.2058%" height="15" fill="rgb(235,30,7)" fg:x="13703" fg:w="64"/><text x="44.3484%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="44.2612%" y="69" width="0.0643%" height="15" fill="rgb(250,79,13)" fg:x="13767" fg:w="20"/><text x="44.5542%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="44.3255%" y="69" width="0.2058%" height="15" fill="rgb(211,146,34)" fg:x="13787" fg:w="64"/><text x="44.6185%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="44.5312%" y="69" width="0.1543%" height="15" fill="rgb(228,22,38)" fg:x="13851" fg:w="48"/><text x="44.8242%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="44.6856%" y="69" width="0.1543%" height="15" fill="rgb(235,168,5)" fg:x="13899" fg:w="48"/><text x="44.9785%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.24%)</title><rect x="44.8399%" y="69" width="0.2443%" height="15" fill="rgb(221,155,16)" fg:x="13947" fg:w="76"/><text x="45.1329%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.0842%" y="69" width="0.0804%" height="15" fill="rgb(215,215,53)" fg:x="14023" fg:w="25"/><text x="45.3772%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="45.1646%" y="69" width="0.2990%" height="15" fill="rgb(223,4,10)" fg:x="14048" fg:w="93"/><text x="45.4576%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.4636%" y="69" width="0.0804%" height="15" fill="rgb(234,103,6)" fg:x="14141" fg:w="25"/><text x="45.7566%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="45.5440%" y="69" width="0.2990%" height="15" fill="rgb(227,97,0)" fg:x="14166" fg:w="93"/><text x="45.8370%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="45.8430%" y="69" width="0.0804%" height="15" fill="rgb(234,150,53)" fg:x="14259" fg:w="25"/><text x="46.1359%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="45.9234%" y="69" width="0.2990%" height="15" fill="rgb(228,201,54)" fg:x="14284" fg:w="93"/><text x="46.2163%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="46.2224%" y="69" width="0.0804%" height="15" fill="rgb(222,22,37)" fg:x="14377" fg:w="25"/><text x="46.5153%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="46.3027%" y="69" width="0.2990%" height="15" fill="rgb(237,53,32)" fg:x="14402" fg:w="93"/><text x="46.5957%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="46.6017%" y="69" width="0.0804%" height="15" fill="rgb(233,25,53)" fg:x="14495" fg:w="25"/><text x="46.8947%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="46.6821%" y="69" width="0.2990%" height="15" fill="rgb(210,40,34)" fg:x="14520" fg:w="93"/><text x="46.9751%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="46.9811%" y="69" width="0.0804%" height="15" fill="rgb(241,220,44)" fg:x="14613" fg:w="25"/><text x="47.2741%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="47.0615%" y="69" width="0.7330%" height="15" fill="rgb(235,28,35)" fg:x="14638" fg:w="228"/><text x="47.3544%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="47.7945%" y="69" width="0.2058%" height="15" fill="rgb(210,56,17)" fg:x="14866" fg:w="64"/><text x="48.0875%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="48.0003%" y="53" width="0.0643%" height="15" fill="rgb(224,130,29)" fg:x="14930" fg:w="20"/><text x="48.2932%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="48.0646%" y="53" width="0.1543%" height="15" fill="rgb(235,212,8)" fg:x="14950" fg:w="48"/><text x="48.3575%" y="63.50"></text></g><g><title>utf8_validate (188 instructions, 0.60%)</title><rect x="48.2189%" y="53" width="0.6044%" height="15" fill="rgb(223,33,50)" fg:x="14998" fg:w="188"/><text x="48.5118%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="48.8233%" y="37" width="0.1833%" height="15" fill="rgb(219,149,13)" fg:x="15186" fg:w="57"/><text x="49.1163%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="48.8233%" y="53" width="0.2283%" height="15" fill="rgb(250,156,29)" fg:x="15186" fg:w="71"/><text x="49.1163%" y="63.50"></text></g><g><title>memcpy (90 instructions, 0.29%)</title><rect x="49.0516%" y="53" width="0.2894%" height="15" fill="rgb(216,193,19)" fg:x="15257" fg:w="90"/><text x="49.3445%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (494 instructions, 1.59%)</title><rect x="48.0003%" y="69" width="1.5882%" height="15" fill="rgb(216,135,14)" fg:x="14930" fg:w="494"/><text x="48.2932%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="49.5885%" y="69" width="0.0193%" height="15" fill="rgb(241,47,5)" fg:x="15424" fg:w="6"/><text x="49.8814%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="49.6078%" y="69" width="0.0643%" height="15" fill="rgb(233,42,35)" fg:x="15430" fg:w="20"/><text x="49.9007%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="49.6721%" y="69" width="0.2058%" height="15" fill="rgb(231,13,6)" fg:x="15450" fg:w="64"/><text x="49.9650%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="49.8778%" y="69" width="0.1543%" height="15" fill="rgb(207,181,40)" fg:x="15514" fg:w="48"/><text x="50.1708%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="50.0322%" y="53" width="0.1543%" height="15" fill="rgb(254,173,49)" fg:x="15562" fg:w="48"/><text x="50.3251%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="50.0322%" y="69" width="0.2701%" height="15" fill="rgb(221,1,38)" fg:x="15562" fg:w="84"/><text x="50.3251%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="50.3022%" y="69" width="0.2058%" height="15" fill="rgb(206,124,46)" fg:x="15646" fg:w="64"/><text x="50.5952%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="50.5080%" y="53" width="0.0643%" height="15" fill="rgb(249,21,11)" fg:x="15710" fg:w="20"/><text x="50.8009%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="50.5723%" y="53" width="0.1543%" height="15" fill="rgb(222,201,40)" fg:x="15730" fg:w="48"/><text x="50.8652%" y="63.50"></text></g><g><title>utf8_validate (213 instructions, 0.68%)</title><rect x="50.7266%" y="53" width="0.6848%" height="15" fill="rgb(235,61,29)" fg:x="15778" fg:w="213"/><text x="51.0196%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="51.4114%" y="37" width="0.1833%" height="15" fill="rgb(219,207,3)" fg:x="15991" fg:w="57"/><text x="51.7044%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="51.4114%" y="53" width="0.2283%" height="15" fill="rgb(222,56,46)" fg:x="15991" fg:w="71"/><text x="51.7044%" y="63.50"></text></g><g><title>memcpy (156 instructions, 0.50%)</title><rect x="51.6397%" y="53" width="0.5015%" height="15" fill="rgb(239,76,54)" fg:x="16062" fg:w="156"/><text x="51.9326%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (585 instructions, 1.88%)</title><rect x="50.5080%" y="69" width="1.8808%" height="15" fill="rgb(231,124,27)" fg:x="15710" fg:w="585"/><text x="50.8009%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="52.3888%" y="53" width="0.1543%" height="15" fill="rgb(249,195,6)" fg:x="16295" fg:w="48"/><text x="52.6817%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="52.3888%" y="69" width="0.2701%" height="15" fill="rgb(237,174,47)" fg:x="16295" fg:w="84"/><text x="52.6817%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="52.6588%" y="69" width="0.2058%" height="15" fill="rgb(206,201,31)" fg:x="16379" fg:w="64"/><text x="52.9518%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="52.8646%" y="69" width="0.0643%" height="15" fill="rgb(231,57,52)" fg:x="16443" fg:w="20"/><text x="53.1576%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="52.9289%" y="69" width="0.2058%" height="15" fill="rgb(248,177,22)" fg:x="16463" fg:w="64"/><text x="53.2219%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="53.1346%" y="69" width="0.1543%" height="15" fill="rgb(215,211,37)" fg:x="16527" fg:w="48"/><text x="53.4276%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="53.2890%" y="69" width="0.1543%" height="15" fill="rgb(241,128,51)" fg:x="16575" fg:w="48"/><text x="53.5819%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.24%)</title><rect x="53.4433%" y="69" width="0.2443%" height="15" fill="rgb(227,165,31)" fg:x="16623" fg:w="76"/><text x="53.7363%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="53.6876%" y="69" width="0.0804%" height="15" fill="rgb(228,167,24)" fg:x="16699" fg:w="25"/><text x="53.9806%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="53.7680%" y="69" width="0.2990%" height="15" fill="rgb(228,143,12)" fg:x="16724" fg:w="93"/><text x="54.0610%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.0670%" y="69" width="0.0804%" height="15" fill="rgb(249,149,8)" fg:x="16817" fg:w="25"/><text x="54.3600%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="54.1474%" y="69" width="0.2990%" height="15" fill="rgb(243,35,44)" fg:x="16842" fg:w="93"/><text x="54.4403%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.4464%" y="69" width="0.0804%" height="15" fill="rgb(246,89,9)" fg:x="16935" fg:w="25"/><text x="54.7393%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="54.5267%" y="69" width="0.2990%" height="15" fill="rgb(233,213,13)" fg:x="16960" fg:w="93"/><text x="54.8197%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="54.8257%" y="69" width="0.0804%" height="15" fill="rgb(233,141,41)" fg:x="17053" fg:w="25"/><text x="55.1187%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="54.9061%" y="69" width="0.2990%" height="15" fill="rgb(239,167,4)" fg:x="17078" fg:w="93"/><text x="55.1991%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="55.2051%" y="69" width="0.0804%" height="15" fill="rgb(209,217,16)" fg:x="17171" fg:w="25"/><text x="55.4981%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="55.2855%" y="69" width="0.2990%" height="15" fill="rgb(219,88,35)" fg:x="17196" fg:w="93"/><text x="55.5785%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="55.5845%" y="69" width="0.0804%" height="15" fill="rgb(220,193,23)" fg:x="17289" fg:w="25"/><text x="55.8775%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="55.6649%" y="69" width="0.7330%" height="15" fill="rgb(230,90,52)" fg:x="17314" fg:w="228"/><text x="55.9578%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="56.3979%" y="69" width="0.2058%" height="15" fill="rgb(252,106,19)" fg:x="17542" fg:w="64"/><text x="56.6909%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="56.6037%" y="53" width="0.0643%" height="15" fill="rgb(206,74,20)" fg:x="17606" fg:w="20"/><text x="56.8966%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="56.6680%" y="53" width="0.1543%" height="15" fill="rgb(230,138,44)" fg:x="17626" fg:w="48"/><text x="56.9609%" y="63.50"></text></g><g><title>utf8_validate (181 instructions, 0.58%)</title><rect x="56.8223%" y="53" width="0.5819%" height="15" fill="rgb(235,182,43)" fg:x="17674" fg:w="181"/><text x="57.1152%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="57.4042%" y="37" width="0.1833%" height="15" fill="rgb(242,16,51)" fg:x="17855" fg:w="57"/><text x="57.6972%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="57.4042%" y="53" width="0.2283%" height="15" fill="rgb(248,9,4)" fg:x="17855" fg:w="71"/><text x="57.6972%" y="63.50"></text></g><g><title>memcpy (123 instructions, 0.40%)</title><rect x="57.6325%" y="53" width="0.3954%" height="15" fill="rgb(210,31,22)" fg:x="17926" fg:w="123"/><text x="57.9254%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (520 instructions, 1.67%)</title><rect x="56.6037%" y="69" width="1.6718%" height="15" fill="rgb(239,54,39)" fg:x="17606" fg:w="520"/><text x="56.8966%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="58.2755%" y="69" width="0.0193%" height="15" fill="rgb(230,99,41)" fg:x="18126" fg:w="6"/><text x="58.5684%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="58.2948%" y="69" width="0.0643%" height="15" fill="rgb(253,106,12)" fg:x="18132" fg:w="20"/><text x="58.5877%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="58.3591%" y="69" width="0.2058%" height="15" fill="rgb(213,46,41)" fg:x="18152" fg:w="64"/><text x="58.6520%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="58.5648%" y="69" width="0.1543%" height="15" fill="rgb(215,133,35)" fg:x="18216" fg:w="48"/><text x="58.8578%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="58.7191%" y="53" width="0.1543%" height="15" fill="rgb(213,28,5)" fg:x="18264" fg:w="48"/><text x="59.0121%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="58.7191%" y="69" width="0.2701%" height="15" fill="rgb(215,77,49)" fg:x="18264" fg:w="84"/><text x="59.0121%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="58.9892%" y="69" width="0.2058%" height="15" fill="rgb(248,100,22)" fg:x="18348" fg:w="64"/><text x="59.2822%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="59.1950%" y="53" width="0.0643%" height="15" fill="rgb(208,67,9)" fg:x="18412" fg:w="20"/><text x="59.4879%" y="63.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="59.2593%" y="53" width="0.1543%" height="15" fill="rgb(219,133,21)" fg:x="18432" fg:w="48"/><text x="59.5522%" y="63.50"></text></g><g><title>utf8_validate (226 instructions, 0.73%)</title><rect x="59.4136%" y="53" width="0.7266%" height="15" fill="rgb(246,46,29)" fg:x="18480" fg:w="226"/><text x="59.7065%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="60.1402%" y="37" width="0.1833%" height="15" fill="rgb(246,185,52)" fg:x="18706" fg:w="57"/><text x="60.4331%" y="47.50"></text></g><g><title>motoko_rts::text::alloc_text_blob::h85b8c81303dbbeb1 (71 instructions, 0.23%)</title><rect x="60.1402%" y="53" width="0.2283%" height="15" fill="rgb(252,136,11)" fg:x="18706" fg:w="71"/><text x="60.4331%" y="63.50"></text></g><g><title>memcpy (160 instructions, 0.51%)</title><rect x="60.3684%" y="53" width="0.5144%" height="15" fill="rgb(219,138,53)" fg:x="18777" fg:w="160"/><text x="60.6614%" y="63.50"></text></g><g><title>@deserialize_go&lt;t&gt; (602 instructions, 1.94%)</title><rect x="59.1950%" y="69" width="1.9354%" height="15" fill="rgb(211,51,23)" fg:x="18412" fg:w="602"/><text x="59.4879%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="61.1304%" y="53" width="0.1543%" height="15" fill="rgb(247,221,28)" fg:x="19014" fg:w="48"/><text x="61.4234%" y="63.50"></text></g><g><title>find_field (84 instructions, 0.27%)</title><rect x="61.1304%" y="69" width="0.2701%" height="15" fill="rgb(251,222,45)" fg:x="19014" fg:w="84"/><text x="61.4234%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="61.4005%" y="69" width="0.2058%" height="15" fill="rgb(217,162,53)" fg:x="19098" fg:w="64"/><text x="61.6934%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="61.6062%" y="69" width="0.0643%" height="15" fill="rgb(229,93,14)" fg:x="19162" fg:w="20"/><text x="61.8992%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="61.6705%" y="69" width="0.2058%" height="15" fill="rgb(209,67,49)" fg:x="19182" fg:w="64"/><text x="61.9635%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="61.8763%" y="69" width="0.1543%" height="15" fill="rgb(213,87,29)" fg:x="19246" fg:w="48"/><text x="62.1693%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="62.0306%" y="69" width="0.1543%" height="15" fill="rgb(205,151,52)" fg:x="19294" fg:w="48"/><text x="62.3236%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.24%)</title><rect x="62.1849%" y="69" width="0.2443%" height="15" fill="rgb(253,215,39)" fg:x="19342" fg:w="76"/><text x="62.4779%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="62.4293%" y="69" width="0.0804%" height="15" fill="rgb(221,220,41)" fg:x="19418" fg:w="25"/><text x="62.7222%" y="79.50"></text></g><g><title>skip_leb128 (93 instructions, 0.30%)</title><rect x="62.5096%" y="69" width="0.2990%" height="15" fill="rgb(218,133,21)" fg:x="19443" fg:w="93"/><text x="62.8026%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="62.8086%" y="69" width="0.0804%" height="15" fill="rgb(221,193,43)" fg:x="19536" fg:w="25"/><text x="63.1016%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="62.8890%" y="69" width="0.7330%" height="15" fill="rgb(240,128,52)" fg:x="19561" fg:w="228"/><text x="63.1820%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="63.6220%" y="69" width="0.2058%" height="15" fill="rgb(253,114,12)" fg:x="19789" fg:w="64"/><text x="63.9150%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="63.8278%" y="69" width="0.0643%" height="15" fill="rgb(215,223,47)" fg:x="19853" fg:w="20"/><text x="64.1208%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="63.8921%" y="69" width="0.0193%" height="15" fill="rgb(248,225,23)" fg:x="19873" fg:w="6"/><text x="64.1851%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="63.9114%" y="53" width="0.7330%" height="15" fill="rgb(250,108,0)" fg:x="19879" fg:w="228"/><text x="64.2044%" y="63.50"></text></g><g><title>find_field (264 instructions, 0.85%)</title><rect x="63.9114%" y="69" width="0.8488%" height="15" fill="rgb(228,208,7)" fg:x="19879" fg:w="264"/><text x="64.2044%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="64.7602%" y="69" width="0.2058%" height="15" fill="rgb(244,45,10)" fg:x="20143" fg:w="64"/><text x="65.0531%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="64.9659%" y="69" width="0.0643%" height="15" fill="rgb(207,125,25)" fg:x="20207" fg:w="20"/><text x="65.2589%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="65.0302%" y="69" width="0.2058%" height="15" fill="rgb(210,195,18)" fg:x="20227" fg:w="64"/><text x="65.3232%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="65.2360%" y="69" width="0.1543%" height="15" fill="rgb(249,80,12)" fg:x="20291" fg:w="48"/><text x="65.5290%" y="79.50"></text></g><g><title>leb128_decode (48 instructions, 0.15%)</title><rect x="65.3903%" y="69" width="0.1543%" height="15" fill="rgb(221,65,9)" fg:x="20339" fg:w="48"/><text x="65.6833%" y="79.50"></text></g><g><title>skip_leb128 (76 instructions, 0.24%)</title><rect x="65.5446%" y="69" width="0.2443%" height="15" fill="rgb(235,49,36)" fg:x="20387" fg:w="76"/><text x="65.8376%" y="79.50"></text></g><g><title>skip_leb128 (25 instructions, 0.08%)</title><rect x="65.7890%" y="69" width="0.0804%" height="15" fill="rgb(225,32,20)" fg:x="20463" fg:w="25"/><text x="66.0819%" y="79.50"></text></g><g><title>leb128_decode (228 instructions, 0.73%)</title><rect x="65.8693%" y="69" width="0.7330%" height="15" fill="rgb(215,141,46)" fg:x="20488" fg:w="228"/><text x="66.1623%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.21%)</title><rect x="66.6024%" y="69" width="0.2058%" height="15" fill="rgb(250,160,47)" fg:x="20716" fg:w="64"/><text x="66.8953%" y="79.50"></text></g><g><title>idl_limit_check (20 instructions, 0.06%)</title><rect x="66.8081%" y="53" width="0.0643%" height="15" fill="rgb(216,222,40)" fg:x="20780" fg:w="20"/><text x="67.1011%" y="63.50"></text></g><g><title>@deserialize_go&lt;u&gt; (55 instructions, 0.18%)</title><rect x="66.8081%" y="69" width="0.1768%" height="15" fill="rgb(234,217,39)" fg:x="20780" fg:w="55"/><text x="67.1011%" y="79.50"></text></g><g><title>skip_fields (6 instructions, 0.02%)</title><rect x="66.9850%" y="69" width="0.0193%" height="15" fill="rgb(207,178,40)" fg:x="20835" fg:w="6"/><text x="67.2779%" y="79.50"></text></g><g><title>@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,Nat32Content:n32,Nat64Content:n64,Nat8Content:n8,NatContent:N,TextContent:t)),purpose:v(Preview:u,Rendered:u))&gt; (16,781 instructions, 53.95%)</title><rect x="25.8166%" y="85" width="53.9513%" height="15" fill="rgb(221,136,13)" fg:x="8030" fg:w="16781"/><text x="26.1096%" y="95.50">@deserialize_go&lt;vr(data:B,key_val_data:v(tv(BlobContent:B,Nat16Content:n16,N..</text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="79.7679%" y="53" width="0.1833%" height="15" fill="rgb(249,199,10)" fg:x="24811" fg:w="57"/><text x="80.0608%" y="63.50"></text></g><g><title>alloc_blob (65 instructions, 0.21%)</title><rect x="79.7679%" y="69" width="0.2090%" height="15" fill="rgb(249,222,13)" fg:x="24811" fg:w="65"/><text x="80.0608%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.05%)</title><rect x="79.9769%" y="69" width="0.0547%" height="15" fill="rgb(244,185,38)" fg:x="24876" fg:w="17"/><text x="80.2698%" y="79.50"></text></g><g><title>Blob.compare_eq (769 instructions, 2.47%)</title><rect x="80.0315%" y="37" width="2.4724%" height="15" fill="rgb(236,202,9)" fg:x="24893" fg:w="769"/><text x="80.3245%" y="47.50">B..</text></g><g><title>@anon-func-154.35 (778 instructions, 2.50%)</title><rect x="80.0315%" y="53" width="2.5013%" height="15" fill="rgb(250,229,37)" fg:x="24893" fg:w="778"/><text x="80.3245%" y="63.50">@..</text></g><g><title>some (841 instructions, 2.70%)</title><rect x="80.0315%" y="69" width="2.7038%" height="15" fill="rgb(206,174,23)" fg:x="24893" fg:w="841"/><text x="80.3245%" y="79.50">s..</text></g><g><title>rec (10 instructions, 0.03%)</title><rect x="82.7353%" y="69" width="0.0322%" height="15" fill="rgb(211,33,43)" fg:x="25734" fg:w="10"/><text x="83.0283%" y="79.50"></text></g><g><title>B_add (27 instructions, 0.09%)</title><rect x="82.7675%" y="69" width="0.0868%" height="15" fill="rgb(245,58,50)" fg:x="25744" fg:w="27"/><text x="83.0605%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.05%)</title><rect x="82.8543%" y="53" width="0.0547%" height="15" fill="rgb(244,68,36)" fg:x="25771" fg:w="17"/><text x="83.1473%" y="63.50"></text></g><g><title>@buffer_size&lt;N&gt; (41 instructions, 0.13%)</title><rect x="82.9090%" y="53" width="0.1318%" height="15" fill="rgb(232,229,15)" fg:x="25788" fg:w="41"/><text x="83.2019%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="83.0408%" y="53" width="0.1061%" height="15" fill="rgb(254,30,23)" fg:x="25829" fg:w="33"/><text x="83.3337%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="83.1469%" y="37" width="0.1833%" height="15" fill="rgb(235,160,14)" fg:x="25862" fg:w="57"/><text x="83.4398%" y="47.50"></text></g><g><title>alloc_blob (65 instructions, 0.21%)</title><rect x="83.1469%" y="53" width="0.2090%" height="15" fill="rgb(212,155,44)" fg:x="25862" fg:w="65"/><text x="83.4398%" y="63.50"></text></g><g><title>memcpy (142 instructions, 0.46%)</title><rect x="83.3558%" y="53" width="0.4565%" height="15" fill="rgb(226,2,50)" fg:x="25927" fg:w="142"/><text x="83.6488%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h7cce318ad19e4bea (57 instructions, 0.18%)</title><rect x="83.8124%" y="37" width="0.1833%" height="15" fill="rgb(234,177,6)" fg:x="26069" fg:w="57"/><text x="84.1053%" y="47.50"></text></g><g><title>alloc_blob (65 instructions, 0.21%)</title><rect x="83.8124%" y="53" width="0.2090%" height="15" fill="rgb(217,24,9)" fg:x="26069" fg:w="65"/><text x="84.1053%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="84.0213%" y="53" width="0.0354%" height="15" fill="rgb(220,13,46)" fg:x="26134" fg:w="11"/><text x="84.3143%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (17 instructions, 0.05%)</title><rect x="84.0567%" y="53" width="0.0547%" height="15" fill="rgb(239,221,27)" fg:x="26145" fg:w="17"/><text x="84.3497%" y="63.50"></text></g><g><title>leb128_encode (11 instructions, 0.04%)</title><rect x="84.1114%" y="37" width="0.0354%" height="15" fill="rgb(222,198,25)" fg:x="26162" fg:w="11"/><text x="84.4043%" y="47.50"></text></g><g><title>@serialize_go&lt;N&gt; (51 instructions, 0.16%)</title><rect x="84.1114%" y="53" width="0.1640%" height="15" fill="rgb(211,99,13)" fg:x="26162" fg:w="51"/><text x="84.4043%" y="63.50"></text></g><g><title>obj_idx&lt;0&gt; (33 instructions, 0.11%)</title><rect x="84.2753%" y="53" width="0.1061%" height="15" fill="rgb(232,111,31)" fg:x="26213" fg:w="33"/><text x="84.5683%" y="63.50"></text></g><g><title>$lambda.34 (1,786 instructions, 5.74%)</title><rect x="82.8543%" y="69" width="5.7420%" height="15" fill="rgb(245,82,37)" fg:x="25771" fg:w="1786"/><text x="83.1473%" y="79.50">$lambd..</text></g><g><title>$lambda.2 (4,082 instructions, 13.12%)</title><rect x="79.7679%" y="85" width="13.1237%" height="15" fill="rgb(227,149,46)" fg:x="24811" fg:w="4082"/><text x="80.0608%" y="95.50">$lambda.2</text></g><g><title>schedule_copying_gc (108 instructions, 0.35%)</title><rect x="92.8916%" y="85" width="0.3472%" height="15" fill="rgb(218,36,50)" fg:x="28893" fg:w="108"/><text x="93.1846%" y="95.50"></text></g><g><title>trans_state4 (11 instructions, 0.04%)</title><rect x="93.2388%" y="85" width="0.0354%" height="15" fill="rgb(226,80,48)" fg:x="29001" fg:w="11"/><text x="93.5318%" y="95.50"></text></g><g><title>all (31,104 instructions, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="31104"/><text x="0.2930%" y="127.50"></text></g><g><title>mintDip721 (31,104 instructions, 100.00%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="31104"/><text x="0.2930%" y="111.50">mintDip721</text></g></svg></svg>