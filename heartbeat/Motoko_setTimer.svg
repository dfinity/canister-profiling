<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="486" onload="init(evt)" viewBox="0 0 1024 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.setTimer(0)</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="469.00"> </text><svg id="frames" x="10" width="1004" total_samples="15227"><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="0.0000%" y="405" width="0.0525%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="8"/><text x="0.2930%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="0.0525%" y="405" width="0.2167%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="33"/><text x="0.3455%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="0.2693%" y="373" width="0.3021%" height="15" fill="rgb(211,81,21)" fg:x="41" fg:w="46"/><text x="0.5622%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="0.5714%" y="373" width="0.2167%" height="15" fill="rgb(208,190,38)" fg:x="87" fg:w="33"/><text x="0.8643%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="0.7881%" y="373" width="0.3021%" height="15" fill="rgb(235,213,38)" fg:x="120" fg:w="46"/><text x="1.0810%" y="383.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="1.0902%" y="373" width="0.3940%" height="15" fill="rgb(237,122,38)" fg:x="166" fg:w="60"/><text x="1.3831%" y="383.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.06%)</title><rect x="1.4842%" y="373" width="0.0591%" height="15" fill="rgb(244,218,35)" fg:x="226" fg:w="9"/><text x="1.7772%" y="383.50"></text></g><g><title>parse_idl_header (270 instructions, 1.77%)</title><rect x="0.2693%" y="389" width="1.7732%" height="15" fill="rgb(240,68,47)" fg:x="41" fg:w="270"/><text x="0.5622%" y="399.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="2.0424%" y="373" width="0.0263%" height="15" fill="rgb(210,16,53)" fg:x="311" fg:w="4"/><text x="2.3354%" y="383.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="2.0424%" y="389" width="0.0525%" height="15" fill="rgb(235,124,12)" fg:x="311" fg:w="8"/><text x="2.3354%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="2.0950%" y="389" width="0.3021%" height="15" fill="rgb(224,169,11)" fg:x="319" fg:w="46"/><text x="2.3879%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="2.3971%" y="389" width="0.3940%" height="15" fill="rgb(250,166,2)" fg:x="365" fg:w="60"/><text x="2.6900%" y="399.50"></text></g><g><title>@deserialize&lt;N&gt; (634 instructions, 4.16%)</title><rect x="0.2693%" y="405" width="4.1637%" height="15" fill="rgb(242,216,29)" fg:x="41" fg:w="634"/><text x="0.5622%" y="415.50">@des..</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="4.4329%" y="405" width="0.0985%" height="15" fill="rgb(230,116,27)" fg:x="675" fg:w="15"/><text x="4.7259%" y="415.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="4.5314%" y="389" width="0.0985%" height="15" fill="rgb(228,99,48)" fg:x="690" fg:w="15"/><text x="4.8244%" y="399.50"></text></g><g><title>B_mul (26 instructions, 0.17%)</title><rect x="4.6299%" y="389" width="0.1707%" height="15" fill="rgb(253,11,6)" fg:x="705" fg:w="26"/><text x="4.9229%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="4.8007%" y="389" width="0.0854%" height="15" fill="rgb(247,143,39)" fg:x="731" fg:w="13"/><text x="5.0937%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="4.8861%" y="389" width="0.0985%" height="15" fill="rgb(236,97,10)" fg:x="744" fg:w="15"/><text x="5.1790%" y="399.50"></text></g><g><title>B_add (24 instructions, 0.16%)</title><rect x="4.9846%" y="389" width="0.1576%" height="15" fill="rgb(233,208,19)" fg:x="759" fg:w="24"/><text x="5.2775%" y="399.50"></text></g><g><title>add&lt;Nat64&gt; (12 instructions, 0.08%)</title><rect x="5.1422%" y="389" width="0.0788%" height="15" fill="rgb(216,164,2)" fg:x="783" fg:w="12"/><text x="5.4352%" y="399.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="5.2210%" y="389" width="0.1707%" height="15" fill="rgb(220,129,5)" fg:x="795" fg:w="26"/><text x="5.5140%" y="399.50"></text></g><g><title>@prune (9 instructions, 0.06%)</title><rect x="5.3917%" y="389" width="0.0591%" height="15" fill="rgb(242,17,10)" fg:x="821" fg:w="9"/><text x="5.6847%" y="399.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="5.4508%" y="373" width="0.0985%" height="15" fill="rgb(242,107,0)" fg:x="830" fg:w="15"/><text x="5.7438%" y="383.50"></text></g><g><title>alloc_size&lt;9&gt;_tag&lt;1&gt; (15 instructions, 0.10%)</title><rect x="5.5494%" y="373" width="0.0985%" height="15" fill="rgb(251,28,31)" fg:x="845" fg:w="15"/><text x="5.8423%" y="383.50"></text></g><g><title>insert (84 instructions, 0.55%)</title><rect x="5.4508%" y="389" width="0.5517%" height="15" fill="rgb(233,223,10)" fg:x="830" fg:w="84"/><text x="5.7438%" y="399.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="6.0025%" y="389" width="0.1182%" height="15" fill="rgb(215,21,27)" fg:x="914" fg:w="18"/><text x="6.2955%" y="399.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="6.1207%" y="373" width="0.1182%" height="15" fill="rgb(232,23,21)" fg:x="932" fg:w="18"/><text x="6.4137%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="6.2389%" y="373" width="0.1051%" height="15" fill="rgb(244,5,23)" fg:x="950" fg:w="16"/><text x="6.5319%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="6.3440%" y="373" width="0.0460%" height="15" fill="rgb(226,81,46)" fg:x="966" fg:w="7"/><text x="6.6370%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="6.3900%" y="373" width="0.1051%" height="15" fill="rgb(247,70,30)" fg:x="973" fg:w="16"/><text x="6.6829%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="6.4950%" y="373" width="0.1182%" height="15" fill="rgb(212,68,19)" fg:x="989" fg:w="18"/><text x="6.7880%" y="383.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="6.6133%" y="373" width="0.1707%" height="15" fill="rgb(240,187,13)" fg:x="1007" fg:w="26"/><text x="6.9062%" y="383.50"></text></g><g><title>@nextExpiration (146 instructions, 0.96%)</title><rect x="6.1207%" y="389" width="0.9588%" height="15" fill="rgb(223,113,26)" fg:x="932" fg:w="146"/><text x="6.4137%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="7.0795%" y="373" width="0.2167%" height="15" fill="rgb(206,192,2)" fg:x="1078" fg:w="33"/><text x="7.3725%" y="383.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="7.2963%" y="373" width="0.4203%" height="15" fill="rgb(241,108,4)" fg:x="1111" fg:w="64"/><text x="7.5892%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="7.7166%" y="373" width="0.2167%" height="15" fill="rgb(247,173,49)" fg:x="1175" fg:w="33"/><text x="8.0095%" y="383.50"></text></g><g><title>leb128_encode (9 instructions, 0.06%)</title><rect x="7.9333%" y="373" width="0.0591%" height="15" fill="rgb(224,114,35)" fg:x="1208" fg:w="9"/><text x="8.2262%" y="383.50"></text></g><g><title>reply_with_data (32 instructions, 0.21%)</title><rect x="7.9924%" y="373" width="0.2102%" height="15" fill="rgb(245,159,27)" fg:x="1217" fg:w="32"/><text x="8.2854%" y="383.50"></text></g><g><title>$lambda.23 (279 instructions, 1.83%)</title><rect x="7.0795%" y="389" width="1.8323%" height="15" fill="rgb(245,172,44)" fg:x="1078" fg:w="279"/><text x="7.3725%" y="399.50"></text></g><g><title>$lambda.4 (789 instructions, 5.18%)</title><rect x="4.5314%" y="405" width="5.1816%" height="15" fill="rgb(236,23,11)" fg:x="690" fg:w="789"/><text x="4.8244%" y="415.50">$lamb..</text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="9.7130%" y="405" width="0.2955%" height="15" fill="rgb(205,117,38)" fg:x="1479" fg:w="45"/><text x="10.0060%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="10.0085%" y="405" width="0.0854%" height="15" fill="rgb(237,72,25)" fg:x="1524" fg:w="13"/><text x="10.3015%" y="415.50"></text></g><g><title>setTimer (2,008 instructions, 13.19%)</title><rect x="0.0000%" y="421" width="13.1871%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="2008"/><text x="0.2930%" y="431.50">setTimer</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.1871%" y="389" width="0.0985%" height="15" fill="rgb(217,125,39)" fg:x="2008" fg:w="15"/><text x="13.4801%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.2856%" y="389" width="0.0985%" height="15" fill="rgb(235,36,10)" fg:x="2023" fg:w="15"/><text x="13.5786%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.3841%" y="389" width="0.0985%" height="15" fill="rgb(251,123,47)" fg:x="2038" fg:w="15"/><text x="13.6771%" y="399.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="13.4826%" y="389" width="0.0328%" height="15" fill="rgb(221,13,13)" fg:x="2053" fg:w="5"/><text x="13.7756%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.5155%" y="389" width="0.0985%" height="15" fill="rgb(238,131,9)" fg:x="2058" fg:w="15"/><text x="13.8084%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.6140%" y="389" width="0.0985%" height="15" fill="rgb(211,50,8)" fg:x="2073" fg:w="15"/><text x="13.9069%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.7125%" y="389" width="0.0985%" height="15" fill="rgb(245,182,24)" fg:x="2088" fg:w="15"/><text x="14.0055%" y="399.50"></text></g><g><title>@new_async (179 instructions, 1.18%)</title><rect x="13.1871%" y="405" width="1.1755%" height="15" fill="rgb(242,14,37)" fg:x="2008" fg:w="179"/><text x="13.4801%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="14.3626%" y="405" width="0.0985%" height="15" fill="rgb(246,228,12)" fg:x="2187" fg:w="15"/><text x="14.6556%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="14.4612%" y="405" width="0.0985%" height="15" fill="rgb(213,55,15)" fg:x="2202" fg:w="15"/><text x="14.7541%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="14.5597%" y="389" width="0.2167%" height="15" fill="rgb(209,9,3)" fg:x="2217" fg:w="33"/><text x="14.8526%" y="399.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="14.5597%" y="405" width="0.2824%" height="15" fill="rgb(230,59,30)" fg:x="2217" fg:w="43"/><text x="14.8526%" y="415.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="14.8421%" y="405" width="0.1510%" height="15" fill="rgb(209,121,21)" fg:x="2260" fg:w="23"/><text x="15.1350%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="14.9931%" y="389" width="0.2167%" height="15" fill="rgb(220,109,13)" fg:x="2283" fg:w="33"/><text x="15.2861%" y="399.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="14.9931%" y="405" width="0.2824%" height="15" fill="rgb(232,18,1)" fg:x="2283" fg:w="43"/><text x="15.2861%" y="415.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="15.2755%" y="405" width="0.1510%" height="15" fill="rgb(215,41,42)" fg:x="2326" fg:w="23"/><text x="15.5685%" y="415.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="15.4265%" y="405" width="0.0985%" height="15" fill="rgb(224,123,36)" fg:x="2349" fg:w="15"/><text x="15.7195%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (36 instructions, 0.24%)</title><rect x="15.5251%" y="389" width="0.2364%" height="15" fill="rgb(240,125,3)" fg:x="2364" fg:w="36"/><text x="15.8180%" y="399.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (7 instructions, 0.05%)</title><rect x="15.7615%" y="389" width="0.0460%" height="15" fill="rgb(205,98,50)" fg:x="2400" fg:w="7"/><text x="16.0544%" y="399.50"></text></g><g><title>remember_continuation (3,699 instructions, 24.29%)</title><rect x="15.5251%" y="405" width="24.2924%" height="15" fill="rgb(205,185,37)" fg:x="2364" fg:w="3699"/><text x="15.8180%" y="415.50">remember_continuation</text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="39.8174%" y="405" width="0.0591%" height="15" fill="rgb(238,207,15)" fg:x="6063" fg:w="9"/><text x="40.1104%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="39.8765%" y="389" width="0.2167%" height="15" fill="rgb(213,199,42)" fg:x="6072" fg:w="33"/><text x="40.1695%" y="399.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="40.0933%" y="389" width="0.4203%" height="15" fill="rgb(235,201,11)" fg:x="6105" fg:w="64"/><text x="40.3862%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="40.5136%" y="389" width="0.2167%" height="15" fill="rgb(207,46,11)" fg:x="6169" fg:w="33"/><text x="40.8065%" y="399.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 1.32%)</title><rect x="39.8765%" y="405" width="1.3200%" height="15" fill="rgb(241,35,35)" fg:x="6072" fg:w="201"/><text x="40.1695%" y="415.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="41.1966%" y="389" width="0.0328%" height="15" fill="rgb(243,32,47)" fg:x="6273" fg:w="5"/><text x="41.4895%" y="399.50"></text></g><g><title>@add_cycles (16 instructions, 0.11%)</title><rect x="41.1966%" y="405" width="0.1051%" height="15" fill="rgb(247,202,23)" fg:x="6273" fg:w="16"/><text x="41.4895%" y="415.50"></text></g><g><title>canister_global_timer (4,606 instructions, 30.25%)</title><rect x="13.1871%" y="421" width="30.2489%" height="15" fill="rgb(219,102,11)" fg:x="2008" fg:w="4606"/><text x="13.4801%" y="431.50">canister_global_timer</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="43.4360%" y="405" width="0.0525%" height="15" fill="rgb(243,110,44)" fg:x="6614" fg:w="8"/><text x="43.7290%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="43.4885%" y="405" width="0.2167%" height="15" fill="rgb(222,74,54)" fg:x="6622" fg:w="33"/><text x="43.7815%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="43.7053%" y="405" width="0.2167%" height="15" fill="rgb(216,99,12)" fg:x="6655" fg:w="33"/><text x="43.9982%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.41%)</title><rect x="43.9220%" y="405" width="1.4120%" height="15" fill="rgb(226,22,26)" fg:x="6688" fg:w="215"/><text x="44.2149%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="45.3339%" y="405" width="0.2167%" height="15" fill="rgb(217,163,10)" fg:x="6903" fg:w="33"/><text x="45.6269%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="45.5507%" y="389" width="0.3021%" height="15" fill="rgb(213,25,53)" fg:x="6936" fg:w="46"/><text x="45.8436%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="45.8528%" y="389" width="0.2167%" height="15" fill="rgb(252,105,26)" fg:x="6982" fg:w="33"/><text x="46.1457%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="46.0695%" y="389" width="0.3021%" height="15" fill="rgb(220,39,43)" fg:x="7015" fg:w="46"/><text x="46.3625%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="46.3716%" y="389" width="0.3940%" height="15" fill="rgb(229,68,48)" fg:x="7061" fg:w="60"/><text x="46.6645%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.06%)</title><rect x="46.7656%" y="389" width="0.0591%" height="15" fill="rgb(252,8,32)" fg:x="7121" fg:w="9"/><text x="47.0586%" y="399.50"></text></g><g><title>parse_idl_header (270 instructions, 1.77%)</title><rect x="45.5507%" y="405" width="1.7732%" height="15" fill="rgb(223,20,43)" fg:x="6936" fg:w="270"/><text x="45.8436%" y="415.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="47.3238%" y="389" width="0.0263%" height="15" fill="rgb(229,81,49)" fg:x="7206" fg:w="4"/><text x="47.6168%" y="399.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="47.3238%" y="405" width="0.0525%" height="15" fill="rgb(236,28,36)" fg:x="7206" fg:w="8"/><text x="47.6168%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="47.3764%" y="405" width="0.3021%" height="15" fill="rgb(249,185,26)" fg:x="7214" fg:w="46"/><text x="47.6693%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="47.6785%" y="405" width="0.3940%" height="15" fill="rgb(249,174,33)" fg:x="7260" fg:w="60"/><text x="47.9714%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="48.0725%" y="405" width="0.0591%" height="15" fill="rgb(233,201,37)" fg:x="7320" fg:w="9"/><text x="48.3655%" y="415.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.1316%" y="389" width="0.0985%" height="15" fill="rgb(221,78,26)" fg:x="7329" fg:w="15"/><text x="48.4246%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.2301%" y="389" width="0.0985%" height="15" fill="rgb(250,127,30)" fg:x="7344" fg:w="15"/><text x="48.5231%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.3286%" y="389" width="0.0985%" height="15" fill="rgb(230,49,44)" fg:x="7359" fg:w="15"/><text x="48.6216%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.4271%" y="389" width="0.0985%" height="15" fill="rgb(229,67,23)" fg:x="7374" fg:w="15"/><text x="48.7201%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.5256%" y="389" width="0.0985%" height="15" fill="rgb(249,83,47)" fg:x="7389" fg:w="15"/><text x="48.8186%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.6242%" y="389" width="0.0985%" height="15" fill="rgb(215,43,3)" fg:x="7404" fg:w="15"/><text x="48.9171%" y="399.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="48.7227%" y="389" width="0.1707%" height="15" fill="rgb(238,154,13)" fg:x="7419" fg:w="26"/><text x="49.0156%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (36 instructions, 0.24%)</title><rect x="48.8934%" y="373" width="0.2364%" height="15" fill="rgb(219,56,2)" fg:x="7445" fg:w="36"/><text x="49.1864%" y="383.50"></text></g><g><title>Array_init (178 instructions, 1.17%)</title><rect x="48.8934%" y="389" width="1.1690%" height="15" fill="rgb(233,0,4)" fg:x="7445" fg:w="178"/><text x="49.1864%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.0624%" y="389" width="0.0985%" height="15" fill="rgb(235,30,7)" fg:x="7623" fg:w="15"/><text x="50.3554%" y="399.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="50.1609%" y="373" width="0.1182%" height="15" fill="rgb(250,79,13)" fg:x="7638" fg:w="18"/><text x="50.4539%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="50.2791%" y="373" width="0.1051%" height="15" fill="rgb(211,146,34)" fg:x="7656" fg:w="16"/><text x="50.5721%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.12%)</title><rect x="50.3842%" y="373" width="0.1182%" height="15" fill="rgb(228,22,38)" fg:x="7672" fg:w="18"/><text x="50.6772%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="50.5024%" y="373" width="0.1051%" height="15" fill="rgb(235,168,5)" fg:x="7690" fg:w="16"/><text x="50.7954%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="50.6075%" y="373" width="0.1182%" height="15" fill="rgb(221,155,16)" fg:x="7706" fg:w="18"/><text x="50.9004%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="50.7257%" y="373" width="0.1051%" height="15" fill="rgb(215,215,53)" fg:x="7724" fg:w="16"/><text x="51.0187%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="50.8308%" y="373" width="0.1182%" height="15" fill="rgb(223,4,10)" fg:x="7740" fg:w="18"/><text x="51.1237%" y="383.50"></text></g><g><title>B_lt (10 instructions, 0.07%)</title><rect x="50.9490%" y="373" width="0.0657%" height="15" fill="rgb(234,103,6)" fg:x="7758" fg:w="10"/><text x="51.2419%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="51.0146%" y="373" width="0.1182%" height="15" fill="rgb(227,97,0)" fg:x="7768" fg:w="18"/><text x="51.3076%" y="383.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.11%)</title><rect x="51.1329%" y="373" width="0.1051%" height="15" fill="rgb(234,150,53)" fg:x="7786" fg:w="16"/><text x="51.4258%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="51.2379%" y="373" width="0.1182%" height="15" fill="rgb(228,201,54)" fg:x="7802" fg:w="18"/><text x="51.5309%" y="383.50"></text></g><g><title>obj_idx&lt;5&gt; (16 instructions, 0.11%)</title><rect x="51.3561%" y="373" width="0.1051%" height="15" fill="rgb(222,22,37)" fg:x="7820" fg:w="16"/><text x="51.6491%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="51.4612%" y="373" width="0.1051%" height="15" fill="rgb(237,53,32)" fg:x="7836" fg:w="16"/><text x="51.7542%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="51.5663%" y="373" width="0.1182%" height="15" fill="rgb(233,25,53)" fg:x="7852" fg:w="18"/><text x="51.8593%" y="383.50"></text></g><g><title>B_add (24 instructions, 0.16%)</title><rect x="51.6845%" y="373" width="0.1576%" height="15" fill="rgb(210,40,34)" fg:x="7870" fg:w="24"/><text x="51.9775%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.11%)</title><rect x="51.8421%" y="373" width="0.1051%" height="15" fill="rgb(241,220,44)" fg:x="7894" fg:w="16"/><text x="52.1351%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.12%)</title><rect x="51.9472%" y="373" width="0.1182%" height="15" fill="rgb(235,28,35)" fg:x="7910" fg:w="18"/><text x="52.2402%" y="383.50"></text></g><g><title>gatherExpired (411 instructions, 2.70%)</title><rect x="50.1609%" y="389" width="2.6992%" height="15" fill="rgb(210,56,17)" fg:x="7638" fg:w="411"/><text x="50.4539%" y="399.50">g..</text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="52.8601%" y="373" width="0.1182%" height="15" fill="rgb(224,130,29)" fg:x="8049" fg:w="18"/><text x="53.1530%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="52.9783%" y="373" width="0.1051%" height="15" fill="rgb(235,212,8)" fg:x="8067" fg:w="16"/><text x="53.2712%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="53.0833%" y="373" width="0.0460%" height="15" fill="rgb(223,33,50)" fg:x="8083" fg:w="7"/><text x="53.3763%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="53.1293%" y="373" width="0.1051%" height="15" fill="rgb(219,149,13)" fg:x="8090" fg:w="16"/><text x="53.4223%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="53.2344%" y="373" width="0.1182%" height="15" fill="rgb(250,156,29)" fg:x="8106" fg:w="18"/><text x="53.5274%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.11%)</title><rect x="53.3526%" y="373" width="0.1051%" height="15" fill="rgb(216,193,19)" fg:x="8124" fg:w="16"/><text x="53.6456%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="53.4577%" y="373" width="0.0460%" height="15" fill="rgb(216,135,14)" fg:x="8140" fg:w="7"/><text x="53.7506%" y="383.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="53.5036%" y="373" width="0.0854%" height="15" fill="rgb(241,47,5)" fg:x="8147" fg:w="13"/><text x="53.7966%" y="383.50"></text></g><g><title>@nextExpiration (168 instructions, 1.10%)</title><rect x="52.8601%" y="389" width="1.1033%" height="15" fill="rgb(233,42,35)" fg:x="8049" fg:w="168"/><text x="53.1530%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="53.9634%" y="389" width="0.0854%" height="15" fill="rgb(231,13,6)" fg:x="8217" fg:w="13"/><text x="54.2563%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.0487%" y="389" width="0.0985%" height="15" fill="rgb(207,181,40)" fg:x="8230" fg:w="15"/><text x="54.3417%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.1472%" y="389" width="0.0985%" height="15" fill="rgb(254,173,49)" fg:x="8245" fg:w="15"/><text x="54.4402%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.2457%" y="389" width="0.0985%" height="15" fill="rgb(221,1,38)" fg:x="8260" fg:w="15"/><text x="54.5387%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.3443%" y="389" width="0.0985%" height="15" fill="rgb(206,124,46)" fg:x="8275" fg:w="15"/><text x="54.6372%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.4428%" y="373" width="0.0985%" height="15" fill="rgb(249,21,11)" fg:x="8290" fg:w="15"/><text x="54.7357%" y="383.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="54.5413%" y="373" width="0.0985%" height="15" fill="rgb(222,201,40)" fg:x="8305" fg:w="15"/><text x="54.8342%" y="383.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="54.6398%" y="373" width="0.1182%" height="15" fill="rgb(235,61,29)" fg:x="8320" fg:w="18"/><text x="54.9328%" y="383.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.7580%" y="341" width="0.0985%" height="15" fill="rgb(219,207,3)" fg:x="8338" fg:w="15"/><text x="55.0510%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.8565%" y="341" width="0.0985%" height="15" fill="rgb(222,56,46)" fg:x="8353" fg:w="15"/><text x="55.1495%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.9550%" y="341" width="0.0985%" height="15" fill="rgb(239,76,54)" fg:x="8368" fg:w="15"/><text x="55.2480%" y="351.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="55.0535%" y="341" width="0.0328%" height="15" fill="rgb(231,124,27)" fg:x="8383" fg:w="5"/><text x="55.3465%" y="351.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.0864%" y="341" width="0.0985%" height="15" fill="rgb(249,195,6)" fg:x="8388" fg:w="15"/><text x="55.3793%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.1849%" y="341" width="0.0985%" height="15" fill="rgb(237,174,47)" fg:x="8403" fg:w="15"/><text x="55.4778%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.2834%" y="341" width="0.0985%" height="15" fill="rgb(206,201,31)" fg:x="8418" fg:w="15"/><text x="55.5763%" y="351.50"></text></g><g><title>@new_async (179 instructions, 1.18%)</title><rect x="54.7580%" y="357" width="1.1755%" height="15" fill="rgb(231,57,52)" fg:x="8338" fg:w="179"/><text x="55.0510%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.9335%" y="357" width="0.0985%" height="15" fill="rgb(248,177,22)" fg:x="8517" fg:w="15"/><text x="56.2265%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="56.0320%" y="357" width="0.0985%" height="15" fill="rgb(215,211,37)" fg:x="8532" fg:w="15"/><text x="56.3250%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="56.1306%" y="341" width="0.2167%" height="15" fill="rgb(241,128,51)" fg:x="8547" fg:w="33"/><text x="56.4235%" y="351.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="56.1306%" y="357" width="0.2824%" height="15" fill="rgb(227,165,31)" fg:x="8547" fg:w="43"/><text x="56.4235%" y="367.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="56.4130%" y="357" width="0.1510%" height="15" fill="rgb(228,167,24)" fg:x="8590" fg:w="23"/><text x="56.7059%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="56.5640%" y="341" width="0.2167%" height="15" fill="rgb(228,143,12)" fg:x="8613" fg:w="33"/><text x="56.8570%" y="351.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="56.5640%" y="357" width="0.2824%" height="15" fill="rgb(249,149,8)" fg:x="8613" fg:w="43"/><text x="56.8570%" y="367.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="56.8464%" y="357" width="0.1510%" height="15" fill="rgb(243,35,44)" fg:x="8656" fg:w="23"/><text x="57.1394%" y="367.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="56.9974%" y="357" width="0.0985%" height="15" fill="rgb(246,89,9)" fg:x="8679" fg:w="15"/><text x="57.2904%" y="367.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (7 instructions, 0.05%)</title><rect x="57.0959%" y="341" width="0.0460%" height="15" fill="rgb(233,213,13)" fg:x="8694" fg:w="7"/><text x="57.3889%" y="351.50"></text></g><g><title>remember_continuation (58 instructions, 0.38%)</title><rect x="57.0959%" y="357" width="0.3809%" height="15" fill="rgb(233,141,41)" fg:x="8694" fg:w="58"/><text x="57.3889%" y="367.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="57.4769%" y="357" width="0.0591%" height="15" fill="rgb(239,167,4)" fg:x="8752" fg:w="9"/><text x="57.7698%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="57.5360%" y="341" width="0.2167%" height="15" fill="rgb(209,217,16)" fg:x="8761" fg:w="33"/><text x="57.8289%" y="351.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="57.7527%" y="341" width="0.4203%" height="15" fill="rgb(219,88,35)" fg:x="8794" fg:w="64"/><text x="58.0456%" y="351.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="58.1730%" y="341" width="0.2167%" height="15" fill="rgb(220,193,23)" fg:x="8858" fg:w="33"/><text x="58.4660%" y="351.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 1.32%)</title><rect x="57.5360%" y="357" width="1.3200%" height="15" fill="rgb(230,90,52)" fg:x="8761" fg:w="201"/><text x="57.8289%" y="367.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="58.8560%" y="341" width="0.0328%" height="15" fill="rgb(252,106,19)" fg:x="8962" fg:w="5"/><text x="59.1489%" y="351.50"></text></g><g><title>@add_cycles (16 instructions, 0.11%)</title><rect x="58.8560%" y="357" width="0.1051%" height="15" fill="rgb(206,74,20)" fg:x="8962" fg:w="16"/><text x="59.1489%" y="367.50"></text></g><g><title>anon-func-5.34 (761 instructions, 5.00%)</title><rect x="54.7580%" y="373" width="4.9977%" height="15" fill="rgb(230,138,44)" fg:x="8338" fg:w="761"/><text x="55.0510%" y="383.50">anon-..</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="59.7557%" y="341" width="0.0985%" height="15" fill="rgb(235,182,43)" fg:x="9099" fg:w="15"/><text x="60.0487%" y="351.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="59.8542%" y="341" width="0.0985%" height="15" fill="rgb(242,16,51)" fg:x="9114" fg:w="15"/><text x="60.1472%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="59.9527%" y="309" width="0.0985%" height="15" fill="rgb(248,9,4)" fg:x="9129" fg:w="15"/><text x="60.2457%" y="319.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.0512%" y="309" width="0.0985%" height="15" fill="rgb(210,31,22)" fg:x="9144" fg:w="15"/><text x="60.3442%" y="319.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.1497%" y="277" width="0.0985%" height="15" fill="rgb(239,54,39)" fg:x="9159" fg:w="15"/><text x="60.4427%" y="287.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.2482%" y="277" width="0.0985%" height="15" fill="rgb(230,99,41)" fg:x="9174" fg:w="15"/><text x="60.5412%" y="287.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.3468%" y="245" width="0.0985%" height="15" fill="rgb(253,106,12)" fg:x="9189" fg:w="15"/><text x="60.6397%" y="255.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.4453%" y="245" width="0.0985%" height="15" fill="rgb(213,46,41)" fg:x="9204" fg:w="15"/><text x="60.7382%" y="255.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.5438%" y="213" width="0.0985%" height="15" fill="rgb(215,133,35)" fg:x="9219" fg:w="15"/><text x="60.8367%" y="223.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.6423%" y="213" width="0.0985%" height="15" fill="rgb(213,28,5)" fg:x="9234" fg:w="15"/><text x="60.9352%" y="223.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.7408%" y="181" width="0.0985%" height="15" fill="rgb(215,77,49)" fg:x="9249" fg:w="15"/><text x="61.0338%" y="191.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.8393%" y="181" width="0.0985%" height="15" fill="rgb(248,100,22)" fg:x="9264" fg:w="15"/><text x="61.1323%" y="191.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.9378%" y="149" width="0.0985%" height="15" fill="rgb(208,67,9)" fg:x="9279" fg:w="15"/><text x="61.2308%" y="159.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.0363%" y="149" width="0.0985%" height="15" fill="rgb(219,133,21)" fg:x="9294" fg:w="15"/><text x="61.3293%" y="159.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="61.1348%" y="117" width="0.0985%" height="15" fill="rgb(246,46,29)" fg:x="9309" fg:w="15"/><text x="61.4278%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.2333%" y="117" width="0.0985%" height="15" fill="rgb(246,185,52)" fg:x="9324" fg:w="15"/><text x="61.5263%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="61.3318%" y="85" width="0.0985%" height="15" fill="rgb(252,136,11)" fg:x="9339" fg:w="15"/><text x="61.6248%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.4304%" y="85" width="0.0985%" height="15" fill="rgb(219,138,53)" fg:x="9354" fg:w="15"/><text x="61.7233%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="61.5289%" y="37" width="0.2167%" height="15" fill="rgb(211,51,23)" fg:x="9369" fg:w="33"/><text x="61.8218%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.40%)</title><rect x="61.7456%" y="37" width="0.4006%" height="15" fill="rgb(247,221,28)" fg:x="9402" fg:w="61"/><text x="62.0386%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="62.1462%" y="37" width="0.2167%" height="15" fill="rgb(251,222,45)" fg:x="9463" fg:w="33"/><text x="62.4392%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.20%)</title><rect x="62.3629%" y="37" width="0.1970%" height="15" fill="rgb(217,162,53)" fg:x="9496" fg:w="30"/><text x="62.6559%" y="47.50"></text></g><g><title>$lambda.19 (218 instructions, 1.43%)</title><rect x="61.5289%" y="53" width="1.4317%" height="15" fill="rgb(229,93,14)" fg:x="9369" fg:w="218"/><text x="61.8218%" y="63.50"></text></g><g><title>$loop/0 (243 instructions, 1.60%)</title><rect x="61.5289%" y="69" width="1.5958%" height="15" fill="rgb(209,67,49)" fg:x="9369" fg:w="243"/><text x="61.8218%" y="79.50"></text></g><g><title>$k/9 (259 instructions, 1.70%)</title><rect x="61.5289%" y="85" width="1.7009%" height="15" fill="rgb(213,87,29)" fg:x="9369" fg:w="259"/><text x="61.8218%" y="95.50"></text></g><g><title>$loop/0 (349 instructions, 2.29%)</title><rect x="61.3318%" y="101" width="2.2920%" height="15" fill="rgb(205,151,52)" fg:x="9339" fg:w="349"/><text x="61.6248%" y="111.50">$..</text></g><g><title>$k/9 (365 instructions, 2.40%)</title><rect x="61.3318%" y="117" width="2.3971%" height="15" fill="rgb(253,215,39)" fg:x="9339" fg:w="365"/><text x="61.6248%" y="127.50">$..</text></g><g><title>$loop/0 (455 instructions, 2.99%)</title><rect x="61.1348%" y="133" width="2.9881%" height="15" fill="rgb(221,220,41)" fg:x="9309" fg:w="455"/><text x="61.4278%" y="143.50">$l..</text></g><g><title>$k/9 (471 instructions, 3.09%)</title><rect x="61.1348%" y="149" width="3.0932%" height="15" fill="rgb(218,133,21)" fg:x="9309" fg:w="471"/><text x="61.4278%" y="159.50">$k..</text></g><g><title>$loop/0 (561 instructions, 3.68%)</title><rect x="60.9378%" y="165" width="3.6842%" height="15" fill="rgb(221,193,43)" fg:x="9279" fg:w="561"/><text x="61.2308%" y="175.50">$lo..</text></g><g><title>$k/9 (577 instructions, 3.79%)</title><rect x="60.9378%" y="181" width="3.7893%" height="15" fill="rgb(240,128,52)" fg:x="9279" fg:w="577"/><text x="61.2308%" y="191.50">$k/9</text></g><g><title>$loop/0 (667 instructions, 4.38%)</title><rect x="60.7408%" y="197" width="4.3804%" height="15" fill="rgb(253,114,12)" fg:x="9249" fg:w="667"/><text x="61.0338%" y="207.50">$loo..</text></g><g><title>$k/9 (683 instructions, 4.49%)</title><rect x="60.7408%" y="213" width="4.4855%" height="15" fill="rgb(215,223,47)" fg:x="9249" fg:w="683"/><text x="61.0338%" y="223.50">$k/9</text></g><g><title>$loop/0 (773 instructions, 5.08%)</title><rect x="60.5438%" y="229" width="5.0765%" height="15" fill="rgb(248,225,23)" fg:x="9219" fg:w="773"/><text x="60.8367%" y="239.50">$loop..</text></g><g><title>$k/9 (789 instructions, 5.18%)</title><rect x="60.5438%" y="245" width="5.1816%" height="15" fill="rgb(250,108,0)" fg:x="9219" fg:w="789"/><text x="60.8367%" y="255.50">$k/9</text></g><g><title>$loop/0 (879 instructions, 5.77%)</title><rect x="60.3468%" y="261" width="5.7726%" height="15" fill="rgb(228,208,7)" fg:x="9189" fg:w="879"/><text x="60.6397%" y="271.50">$loop/0</text></g><g><title>$k/9 (895 instructions, 5.88%)</title><rect x="60.3468%" y="277" width="5.8777%" height="15" fill="rgb(244,45,10)" fg:x="9189" fg:w="895"/><text x="60.6397%" y="287.50">$k/9</text></g><g><title>$loop/0 (985 instructions, 6.47%)</title><rect x="60.1497%" y="293" width="6.4688%" height="15" fill="rgb(207,125,25)" fg:x="9159" fg:w="985"/><text x="60.4427%" y="303.50">$loop/0</text></g><g><title>$k/9 (1,001 instructions, 6.57%)</title><rect x="60.1497%" y="309" width="6.5738%" height="15" fill="rgb(210,195,18)" fg:x="9159" fg:w="1001"/><text x="60.4427%" y="319.50">$k/9</text></g><g><title>$loop/0 (1,091 instructions, 7.16%)</title><rect x="59.9527%" y="325" width="7.1649%" height="15" fill="rgb(249,80,12)" fg:x="9129" fg:w="1091"/><text x="60.2457%" y="335.50">$loop/0</text></g><g><title>$k/9 (1,107 instructions, 7.27%)</title><rect x="59.9527%" y="341" width="7.2700%" height="15" fill="rgb(221,65,9)" fg:x="9129" fg:w="1107"/><text x="60.2457%" y="351.50">$k/9</text></g><g><title>$loop/0 (1,197 instructions, 7.86%)</title><rect x="59.7557%" y="357" width="7.8610%" height="15" fill="rgb(235,49,36)" fg:x="9099" fg:w="1197"/><text x="60.0487%" y="367.50">$loop/0</text></g><g><title>$k/9 (1,213 instructions, 7.97%)</title><rect x="59.7557%" y="373" width="7.9661%" height="15" fill="rgb(225,32,20)" fg:x="9099" fg:w="1213"/><text x="60.0487%" y="383.50">$k/9</text></g><g><title>$loop/0 (2,088 instructions, 13.71%)</title><rect x="54.4428%" y="389" width="13.7125%" height="15" fill="rgb(215,141,46)" fg:x="8290" fg:w="2088"/><text x="54.7357%" y="399.50">$loop/0</text></g><g><title>anon_async.1 (3,237 instructions, 21.26%)</title><rect x="48.1316%" y="405" width="21.2583%" height="15" fill="rgb(250,160,47)" fg:x="7329" fg:w="3237"/><text x="48.4246%" y="415.50">anon_async.1</text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="69.3899%" y="405" width="0.2955%" height="15" fill="rgb(216,222,40)" fg:x="10566" fg:w="45"/><text x="69.6829%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="69.6854%" y="405" width="0.0854%" height="15" fill="rgb(234,217,39)" fg:x="10611" fg:w="13"/><text x="69.9784%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="74.5649%" y="405" width="0.0525%" height="15" fill="rgb(207,178,40)" fg:x="11354" fg:w="8"/><text x="74.8579%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="74.6175%" y="405" width="0.2167%" height="15" fill="rgb(221,136,13)" fg:x="11362" fg:w="33"/><text x="74.9104%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="74.8342%" y="405" width="0.2167%" height="15" fill="rgb(249,199,10)" fg:x="11395" fg:w="33"/><text x="75.1271%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.41%)</title><rect x="75.0509%" y="405" width="1.4120%" height="15" fill="rgb(249,222,13)" fg:x="11428" fg:w="215"/><text x="75.3439%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="76.4629%" y="405" width="0.2167%" height="15" fill="rgb(244,185,38)" fg:x="11643" fg:w="33"/><text x="76.7558%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="76.6796%" y="389" width="0.3021%" height="15" fill="rgb(236,202,9)" fg:x="11676" fg:w="46"/><text x="76.9726%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="76.9817%" y="389" width="0.2167%" height="15" fill="rgb(250,229,37)" fg:x="11722" fg:w="33"/><text x="77.2746%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="77.1984%" y="389" width="0.3021%" height="15" fill="rgb(206,174,23)" fg:x="11755" fg:w="46"/><text x="77.4914%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="77.5005%" y="389" width="0.3940%" height="15" fill="rgb(211,33,43)" fg:x="11801" fg:w="60"/><text x="77.7935%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (9 instructions, 0.06%)</title><rect x="77.8945%" y="389" width="0.0591%" height="15" fill="rgb(245,58,50)" fg:x="11861" fg:w="9"/><text x="78.1875%" y="399.50"></text></g><g><title>parse_idl_header (270 instructions, 1.77%)</title><rect x="76.6796%" y="405" width="1.7732%" height="15" fill="rgb(244,68,36)" fg:x="11676" fg:w="270"/><text x="76.9726%" y="415.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="78.4527%" y="389" width="0.0263%" height="15" fill="rgb(232,229,15)" fg:x="11946" fg:w="4"/><text x="78.7457%" y="399.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="78.4527%" y="405" width="0.0525%" height="15" fill="rgb(254,30,23)" fg:x="11946" fg:w="8"/><text x="78.7457%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="78.5053%" y="405" width="0.3021%" height="15" fill="rgb(235,160,14)" fg:x="11954" fg:w="46"/><text x="78.7983%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="78.8074%" y="405" width="0.3940%" height="15" fill="rgb(212,155,44)" fg:x="12000" fg:w="60"/><text x="79.1004%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="79.2014%" y="405" width="0.0591%" height="15" fill="rgb(226,2,50)" fg:x="12060" fg:w="9"/><text x="79.4944%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="79.2605%" y="373" width="0.2167%" height="15" fill="rgb(234,177,6)" fg:x="12069" fg:w="33"/><text x="79.5535%" y="383.50"></text></g><g><title>memcpy (61 instructions, 0.40%)</title><rect x="79.4772%" y="373" width="0.4006%" height="15" fill="rgb(217,24,9)" fg:x="12102" fg:w="61"/><text x="79.7702%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="79.8778%" y="373" width="0.2167%" height="15" fill="rgb(220,13,46)" fg:x="12163" fg:w="33"/><text x="80.1708%" y="383.50"></text></g><g><title>reply_with_data (30 instructions, 0.20%)</title><rect x="80.0946%" y="373" width="0.1970%" height="15" fill="rgb(239,221,27)" fg:x="12196" fg:w="30"/><text x="80.3875%" y="383.50"></text></g><g><title>$lambda.19 (218 instructions, 1.43%)</title><rect x="79.2605%" y="389" width="1.4317%" height="15" fill="rgb(222,198,25)" fg:x="12069" fg:w="218"/><text x="79.5535%" y="399.50"></text></g><g><title>anon_async (222 instructions, 1.46%)</title><rect x="79.2605%" y="405" width="1.4579%" height="15" fill="rgb(211,99,13)" fg:x="12069" fg:w="222"/><text x="79.5535%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="80.7185%" y="405" width="0.2955%" height="15" fill="rgb(232,111,31)" fg:x="12291" fg:w="45"/><text x="81.0114%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="81.0140%" y="405" width="0.0854%" height="15" fill="rgb(245,82,37)" fg:x="12336" fg:w="13"/><text x="81.3070%" y="415.50"></text></g><g><title>__motoko_async_helper (6,465 instructions, 42.46%)</title><rect x="43.4360%" y="421" width="42.4575%" height="15" fill="rgb(227,149,46)" fg:x="6614" fg:w="6465"/><text x="43.7290%" y="431.50">__motoko_async_helper</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="85.8935%" y="405" width="0.0525%" height="15" fill="rgb(218,36,50)" fg:x="13079" fg:w="8"/><text x="86.1864%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.30%)</title><rect x="85.9460%" y="405" width="0.2955%" height="15" fill="rgb(226,80,48)" fg:x="13087" fg:w="45"/><text x="86.2390%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="86.2415%" y="405" width="0.2167%" height="15" fill="rgb(238,224,15)" fg:x="13132" fg:w="33"/><text x="86.5345%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="86.4583%" y="373" width="0.3021%" height="15" fill="rgb(241,136,10)" fg:x="13165" fg:w="46"/><text x="86.7512%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="86.7604%" y="373" width="0.2167%" height="15" fill="rgb(208,32,45)" fg:x="13211" fg:w="33"/><text x="87.0533%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="86.9771%" y="373" width="0.3021%" height="15" fill="rgb(207,135,9)" fg:x="13244" fg:w="46"/><text x="87.2700%" y="383.50"></text></g><g><title>parse_idl_header (192 instructions, 1.26%)</title><rect x="86.4583%" y="389" width="1.2609%" height="15" fill="rgb(206,86,44)" fg:x="13165" fg:w="192"/><text x="86.7512%" y="399.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="87.7192%" y="373" width="0.0263%" height="15" fill="rgb(245,177,15)" fg:x="13357" fg:w="4"/><text x="88.0122%" y="383.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="87.7192%" y="389" width="0.0525%" height="15" fill="rgb(206,64,50)" fg:x="13357" fg:w="8"/><text x="88.0122%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="87.7717%" y="389" width="0.3021%" height="15" fill="rgb(234,36,40)" fg:x="13365" fg:w="46"/><text x="88.0647%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (363 instructions, 2.38%)</title><rect x="86.4583%" y="405" width="2.3839%" height="15" fill="rgb(213,64,8)" fg:x="13165" fg:w="363"/><text x="86.7512%" y="415.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="88.8422%" y="373" width="0.0985%" height="15" fill="rgb(210,75,36)" fg:x="13528" fg:w="15"/><text x="89.1352%" y="383.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="88.9407%" y="373" width="0.1510%" height="15" fill="rgb(229,88,21)" fg:x="13543" fg:w="23"/><text x="89.2337%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="89.0917%" y="373" width="0.1182%" height="15" fill="rgb(252,204,47)" fg:x="13566" fg:w="18"/><text x="89.3847%" y="383.50"></text></g><g><title>fulfill (106 instructions, 0.70%)</title><rect x="88.8422%" y="389" width="0.6961%" height="15" fill="rgb(208,77,27)" fg:x="13528" fg:w="106"/><text x="89.1352%" y="399.50"></text></g><g><title>$lambda.6 (113 instructions, 0.74%)</title><rect x="88.8422%" y="405" width="0.7421%" height="15" fill="rgb(221,76,26)" fg:x="13528" fg:w="113"/><text x="89.1352%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="89.5843%" y="405" width="0.2955%" height="15" fill="rgb(225,139,18)" fg:x="13641" fg:w="45"/><text x="89.8773%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="89.8798%" y="405" width="0.0854%" height="15" fill="rgb(230,137,11)" fg:x="13686" fg:w="13"/><text x="90.1728%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="92.9467%" y="405" width="0.0525%" height="15" fill="rgb(212,28,1)" fg:x="14153" fg:w="8"/><text x="93.2397%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.30%)</title><rect x="92.9993%" y="405" width="0.2955%" height="15" fill="rgb(248,164,17)" fg:x="14161" fg:w="45"/><text x="93.2922%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="93.2948%" y="405" width="0.2167%" height="15" fill="rgb(222,171,42)" fg:x="14206" fg:w="33"/><text x="93.5878%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="93.5115%" y="373" width="0.3021%" height="15" fill="rgb(243,84,45)" fg:x="14239" fg:w="46"/><text x="93.8045%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (33 instructions, 0.22%)</title><rect x="93.8136%" y="373" width="0.2167%" height="15" fill="rgb(252,49,23)" fg:x="14285" fg:w="33"/><text x="94.1066%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="94.0303%" y="373" width="0.3021%" height="15" fill="rgb(215,19,7)" fg:x="14318" fg:w="46"/><text x="94.3233%" y="383.50"></text></g><g><title>parse_idl_header (192 instructions, 1.26%)</title><rect x="93.5115%" y="389" width="1.2609%" height="15" fill="rgb(238,81,41)" fg:x="14239" fg:w="192"/><text x="93.8045%" y="399.50"></text></g><g><title>memset (4 instructions, 0.03%)</title><rect x="94.7724%" y="373" width="0.0263%" height="15" fill="rgb(210,199,37)" fg:x="14431" fg:w="4"/><text x="95.0654%" y="383.50"></text></g><g><title>idl_sub_buf_init (8 instructions, 0.05%)</title><rect x="94.7724%" y="389" width="0.0525%" height="15" fill="rgb(244,192,49)" fg:x="14431" fg:w="8"/><text x="95.0654%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="94.8250%" y="389" width="0.3021%" height="15" fill="rgb(226,211,11)" fg:x="14439" fg:w="46"/><text x="95.1180%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (363 instructions, 2.38%)</title><rect x="93.5115%" y="405" width="2.3839%" height="15" fill="rgb(236,162,54)" fg:x="14239" fg:w="363"/><text x="93.8045%" y="415.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="95.8954%" y="373" width="0.0985%" height="15" fill="rgb(220,229,9)" fg:x="14602" fg:w="15"/><text x="96.1884%" y="383.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="95.9940%" y="373" width="0.1510%" height="15" fill="rgb(250,87,22)" fg:x="14617" fg:w="23"/><text x="96.2869%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="96.1450%" y="373" width="0.1182%" height="15" fill="rgb(239,43,17)" fg:x="14640" fg:w="18"/><text x="96.4380%" y="383.50"></text></g><g><title>fulfill (106 instructions, 0.70%)</title><rect x="95.8954%" y="389" width="0.6961%" height="15" fill="rgb(231,177,25)" fg:x="14602" fg:w="106"/><text x="96.1884%" y="399.50"></text></g><g><title>$lambda.6 (113 instructions, 0.74%)</title><rect x="95.8954%" y="405" width="0.7421%" height="15" fill="rgb(219,179,1)" fg:x="14602" fg:w="113"/><text x="96.1884%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="96.6376%" y="405" width="0.2955%" height="15" fill="rgb(238,219,53)" fg:x="14715" fg:w="45"/><text x="96.9305%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="96.9331%" y="405" width="0.0854%" height="15" fill="rgb(232,167,36)" fg:x="14760" fg:w="13"/><text x="97.2260%" y="415.50"></text></g><g><title>all (15,227 instructions, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="15227"/><text x="0.2930%" y="447.50"></text></g><g><title>@callback&lt;u&gt; (2,148 instructions, 14.11%)</title><rect x="85.8935%" y="421" width="14.1065%" height="15" fill="rgb(224,6,22)" fg:x="13079" fg:w="2148"/><text x="86.1864%" y="431.50">@callback&lt;u&gt;</text></g></svg></svg>