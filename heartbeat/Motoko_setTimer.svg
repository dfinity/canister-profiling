<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="486" onload="init(evt)" viewBox="0 0 1024 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.setTimer(0)</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="469.00"> </text><svg id="frames" x="10" width="1004" total_samples="17762"><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="0.0000%" y="405" width="0.0450%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="8"/><text x="0.2930%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="0.0450%" y="405" width="0.1689%" height="15" fill="rgb(250,166,2)" fg:x="8" fg:w="30"/><text x="0.3380%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="0.2139%" y="373" width="0.2590%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="46"/><text x="0.5069%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="0.4729%" y="373" width="0.1689%" height="15" fill="rgb(230,116,27)" fg:x="84" fg:w="30"/><text x="0.7659%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="0.6418%" y="373" width="0.2590%" height="15" fill="rgb(228,99,48)" fg:x="114" fg:w="46"/><text x="0.9348%" y="383.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="0.9008%" y="373" width="0.3378%" height="15" fill="rgb(253,11,6)" fg:x="160" fg:w="60"/><text x="1.1938%" y="383.50"></text></g><g><title>parse_idl_header (264 instructions, 1.49%)</title><rect x="0.2139%" y="389" width="1.4863%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="264"/><text x="0.5069%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="1.7003%" y="373" width="0.0169%" height="15" fill="rgb(236,97,10)" fg:x="302" fg:w="3"/><text x="1.9932%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="1.7003%" y="389" width="0.0338%" height="15" fill="rgb(233,208,19)" fg:x="302" fg:w="6"/><text x="1.9932%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="1.7340%" y="389" width="0.2590%" height="15" fill="rgb(216,164,2)" fg:x="308" fg:w="46"/><text x="2.0270%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="1.9930%" y="389" width="0.3378%" height="15" fill="rgb(220,129,5)" fg:x="354" fg:w="60"/><text x="2.2860%" y="399.50"></text></g><g><title>@deserialize&lt;N&gt; (626 instructions, 3.52%)</title><rect x="0.2139%" y="405" width="3.5244%" height="15" fill="rgb(242,17,10)" fg:x="38" fg:w="626"/><text x="0.5069%" y="415.50">@de..</text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="3.7383%" y="405" width="0.1239%" height="15" fill="rgb(242,107,0)" fg:x="664" fg:w="22"/><text x="4.0313%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="3.8622%" y="389" width="0.1239%" height="15" fill="rgb(251,28,31)" fg:x="686" fg:w="22"/><text x="4.1551%" y="399.50"></text></g><g><title>B_mul (26 instructions, 0.15%)</title><rect x="3.9860%" y="389" width="0.1464%" height="15" fill="rgb(233,223,10)" fg:x="708" fg:w="26"/><text x="4.2790%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.07%)</title><rect x="4.1324%" y="389" width="0.0732%" height="15" fill="rgb(215,21,27)" fg:x="734" fg:w="13"/><text x="4.4254%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="4.2056%" y="389" width="0.1239%" height="15" fill="rgb(232,23,21)" fg:x="747" fg:w="22"/><text x="4.4986%" y="399.50"></text></g><g><title>B_add (24 instructions, 0.14%)</title><rect x="4.3295%" y="389" width="0.1351%" height="15" fill="rgb(244,5,23)" fg:x="769" fg:w="24"/><text x="4.6224%" y="399.50"></text></g><g><title>add&lt;Nat64&gt; (12 instructions, 0.07%)</title><rect x="4.4646%" y="389" width="0.0676%" height="15" fill="rgb(226,81,46)" fg:x="793" fg:w="12"/><text x="4.7576%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="4.5321%" y="389" width="0.1239%" height="15" fill="rgb(247,70,30)" fg:x="805" fg:w="22"/><text x="4.8251%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="4.6560%" y="373" width="0.1239%" height="15" fill="rgb(212,68,19)" fg:x="827" fg:w="22"/><text x="4.9490%" y="383.50"></text></g><g><title>box_i64 (40 instructions, 0.23%)</title><rect x="4.6560%" y="389" width="0.2252%" height="15" fill="rgb(240,187,13)" fg:x="827" fg:w="40"/><text x="4.9490%" y="399.50"></text></g><g><title>@prune (9 instructions, 0.05%)</title><rect x="4.8812%" y="389" width="0.0507%" height="15" fill="rgb(223,113,26)" fg:x="867" fg:w="9"/><text x="5.1742%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="4.9319%" y="373" width="0.1239%" height="15" fill="rgb(206,192,2)" fg:x="876" fg:w="22"/><text x="5.2248%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="5.0557%" y="373" width="0.1239%" height="15" fill="rgb(241,108,4)" fg:x="898" fg:w="22"/><text x="5.3487%" y="383.50"></text></g><g><title>insert (106 instructions, 0.60%)</title><rect x="4.9319%" y="389" width="0.5968%" height="15" fill="rgb(247,173,49)" fg:x="876" fg:w="106"/><text x="5.2248%" y="399.50"></text></g><g><title>opt_inject (14 instructions, 0.08%)</title><rect x="5.5287%" y="389" width="0.0788%" height="15" fill="rgb(224,114,35)" fg:x="982" fg:w="14"/><text x="5.8216%" y="399.50"></text></g><g><title>opt_project (14 instructions, 0.08%)</title><rect x="5.6075%" y="373" width="0.0788%" height="15" fill="rgb(245,159,27)" fg:x="996" fg:w="14"/><text x="5.9004%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.09%)</title><rect x="5.6863%" y="373" width="0.0901%" height="15" fill="rgb(245,172,44)" fg:x="1010" fg:w="16"/><text x="5.9793%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.04%)</title><rect x="5.7764%" y="373" width="0.0394%" height="15" fill="rgb(236,23,11)" fg:x="1026" fg:w="7"/><text x="6.0693%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.09%)</title><rect x="5.8158%" y="373" width="0.0901%" height="15" fill="rgb(205,117,38)" fg:x="1033" fg:w="16"/><text x="6.1088%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="5.9059%" y="373" width="0.1013%" height="15" fill="rgb(237,72,25)" fg:x="1049" fg:w="18"/><text x="6.1988%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="6.0072%" y="357" width="0.1239%" height="15" fill="rgb(244,70,9)" fg:x="1067" fg:w="22"/><text x="6.3002%" y="367.50"></text></g><g><title>box_i64 (40 instructions, 0.23%)</title><rect x="6.0072%" y="373" width="0.2252%" height="15" fill="rgb(217,125,39)" fg:x="1067" fg:w="40"/><text x="6.3002%" y="383.50"></text></g><g><title>@nextExpiration (156 instructions, 0.88%)</title><rect x="5.6075%" y="389" width="0.8783%" height="15" fill="rgb(235,36,10)" fg:x="996" fg:w="156"/><text x="5.9004%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="6.4858%" y="373" width="0.1689%" height="15" fill="rgb(251,123,47)" fg:x="1152" fg:w="30"/><text x="6.7787%" y="383.50"></text></g><g><title>memcpy (64 instructions, 0.36%)</title><rect x="6.6547%" y="373" width="0.3603%" height="15" fill="rgb(221,13,13)" fg:x="1182" fg:w="64"/><text x="6.9476%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="7.0150%" y="373" width="0.1689%" height="15" fill="rgb(238,131,9)" fg:x="1246" fg:w="30"/><text x="7.3079%" y="383.50"></text></g><g><title>leb128_encode (9 instructions, 0.05%)</title><rect x="7.1839%" y="373" width="0.0507%" height="15" fill="rgb(211,50,8)" fg:x="1276" fg:w="9"/><text x="7.4768%" y="383.50"></text></g><g><title>reply_with_data (32 instructions, 0.18%)</title><rect x="7.2345%" y="373" width="0.1802%" height="15" fill="rgb(245,182,24)" fg:x="1285" fg:w="32"/><text x="7.5275%" y="383.50"></text></g><g><title>$lambda.23 (273 instructions, 1.54%)</title><rect x="6.4858%" y="389" width="1.5370%" height="15" fill="rgb(242,14,37)" fg:x="1152" fg:w="273"/><text x="6.7787%" y="399.50"></text></g><g><title>$lambda.3 (861 instructions, 4.85%)</title><rect x="3.8622%" y="405" width="4.8474%" height="15" fill="rgb(246,228,12)" fg:x="686" fg:w="861"/><text x="4.1551%" y="415.50">$lamb..</text></g><g><title>schedule_copying_gc (43 instructions, 0.24%)</title><rect x="8.7096%" y="405" width="0.2421%" height="15" fill="rgb(213,55,15)" fg:x="1547" fg:w="43"/><text x="9.0026%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.07%)</title><rect x="8.9517%" y="405" width="0.0732%" height="15" fill="rgb(209,9,3)" fg:x="1590" fg:w="13"/><text x="9.2447%" y="415.50"></text></g><g><title>setTimer (2,078 instructions, 11.70%)</title><rect x="0.0000%" y="421" width="11.6991%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="2078"/><text x="0.2930%" y="431.50">setTimer</text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="11.6991%" y="389" width="0.1239%" height="15" fill="rgb(209,121,21)" fg:x="2078" fg:w="22"/><text x="11.9921%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="11.8230%" y="389" width="0.1239%" height="15" fill="rgb(220,109,13)" fg:x="2100" fg:w="22"/><text x="12.1160%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="11.9469%" y="389" width="0.1239%" height="15" fill="rgb(232,18,1)" fg:x="2122" fg:w="22"/><text x="12.2398%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="12.0707%" y="389" width="0.1239%" height="15" fill="rgb(215,41,42)" fg:x="2144" fg:w="22"/><text x="12.3637%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="12.1946%" y="389" width="0.1239%" height="15" fill="rgb(224,123,36)" fg:x="2166" fg:w="22"/><text x="12.4875%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="12.3184%" y="389" width="0.1239%" height="15" fill="rgb(240,125,3)" fg:x="2188" fg:w="22"/><text x="12.6114%" y="399.50"></text></g><g><title>@new_async (231 instructions, 1.30%)</title><rect x="11.6991%" y="405" width="1.3005%" height="15" fill="rgb(205,98,50)" fg:x="2078" fg:w="231"/><text x="11.9921%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="12.9997%" y="405" width="0.1239%" height="15" fill="rgb(205,185,37)" fg:x="2309" fg:w="22"/><text x="13.2926%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="13.1235%" y="405" width="0.1239%" height="15" fill="rgb(238,207,15)" fg:x="2331" fg:w="22"/><text x="13.4165%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="13.2474%" y="389" width="0.1689%" height="15" fill="rgb(213,199,42)" fg:x="2353" fg:w="30"/><text x="13.5404%" y="399.50"></text></g><g><title>canister_self (40 instructions, 0.23%)</title><rect x="13.2474%" y="405" width="0.2252%" height="15" fill="rgb(235,201,11)" fg:x="2353" fg:w="40"/><text x="13.5404%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="13.4726%" y="389" width="0.1239%" height="15" fill="rgb(207,46,11)" fg:x="2393" fg:w="22"/><text x="13.7656%" y="399.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="13.4726%" y="405" width="0.2083%" height="15" fill="rgb(241,35,35)" fg:x="2393" fg:w="37"/><text x="13.7656%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="13.6809%" y="389" width="0.1689%" height="15" fill="rgb(243,32,47)" fg:x="2430" fg:w="30"/><text x="13.9739%" y="399.50"></text></g><g><title>canister_self (40 instructions, 0.23%)</title><rect x="13.6809%" y="405" width="0.2252%" height="15" fill="rgb(247,202,23)" fg:x="2430" fg:w="40"/><text x="13.9739%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="13.9061%" y="389" width="0.1239%" height="15" fill="rgb(219,102,11)" fg:x="2470" fg:w="22"/><text x="14.1991%" y="399.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="13.9061%" y="405" width="0.2083%" height="15" fill="rgb(243,110,44)" fg:x="2470" fg:w="37"/><text x="14.1991%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="14.1144%" y="405" width="0.1239%" height="15" fill="rgb(222,74,54)" fg:x="2507" fg:w="22"/><text x="14.4074%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.20%)</title><rect x="14.2383%" y="389" width="0.1970%" height="15" fill="rgb(216,99,12)" fg:x="2529" fg:w="35"/><text x="14.5312%" y="399.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (7 instructions, 0.04%)</title><rect x="14.4353%" y="389" width="0.0394%" height="15" fill="rgb(226,22,26)" fg:x="2564" fg:w="7"/><text x="14.7283%" y="399.50"></text></g><g><title>remember_continuation (3,698 instructions, 20.82%)</title><rect x="14.2383%" y="405" width="20.8197%" height="15" fill="rgb(217,163,10)" fg:x="2529" fg:w="3698"/><text x="14.5312%" y="415.50">remember_continuation</text></g><g><title>box_i32 (9 instructions, 0.05%)</title><rect x="35.0580%" y="405" width="0.0507%" height="15" fill="rgb(213,25,53)" fg:x="6227" fg:w="9"/><text x="35.3510%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="35.1087%" y="389" width="0.1689%" height="15" fill="rgb(252,105,26)" fg:x="6236" fg:w="30"/><text x="35.4016%" y="399.50"></text></g><g><title>memcpy (64 instructions, 0.36%)</title><rect x="35.2776%" y="389" width="0.3603%" height="15" fill="rgb(220,39,43)" fg:x="6266" fg:w="64"/><text x="35.5705%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="35.6379%" y="389" width="0.1689%" height="15" fill="rgb(229,68,48)" fg:x="6330" fg:w="30"/><text x="35.9308%" y="399.50"></text></g><g><title>@serialize&lt;n32&gt; (195 instructions, 1.10%)</title><rect x="35.1087%" y="405" width="1.0978%" height="15" fill="rgb(252,8,32)" fg:x="6236" fg:w="195"/><text x="35.4016%" y="415.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (34 instructions, 0.19%)</title><rect x="36.2065%" y="325" width="0.1914%" height="15" fill="rgb(223,20,43)" fg:x="6431" fg:w="34"/><text x="36.4995%" y="335.50"></text></g><g><title>memset (233 instructions, 1.31%)</title><rect x="36.3979%" y="325" width="1.3118%" height="15" fill="rgb(229,81,49)" fg:x="6465" fg:w="233"/><text x="36.6909%" y="335.50"></text></g><g><title>mp_calloc (291 instructions, 1.64%)</title><rect x="36.2065%" y="341" width="1.6383%" height="15" fill="rgb(236,28,36)" fg:x="6431" fg:w="291"/><text x="36.4995%" y="351.50"></text></g><g><title>mp_init (306 instructions, 1.72%)</title><rect x="36.2065%" y="357" width="1.7228%" height="15" fill="rgb(249,185,26)" fg:x="6431" fg:w="306"/><text x="36.4995%" y="367.50"></text></g><g><title>mp_set_u64 (479 instructions, 2.70%)</title><rect x="37.9293%" y="357" width="2.6968%" height="15" fill="rgb(249,174,33)" fg:x="6737" fg:w="479"/><text x="38.2223%" y="367.50">m..</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (30 instructions, 0.17%)</title><rect x="40.6261%" y="357" width="0.1689%" height="15" fill="rgb(233,201,37)" fg:x="7216" fg:w="30"/><text x="40.9190%" y="367.50"></text></g><g><title>bigint_of_int64 (864 instructions, 4.86%)</title><rect x="36.2065%" y="373" width="4.8643%" height="15" fill="rgb(221,78,26)" fg:x="6431" fg:w="864"/><text x="36.4995%" y="383.50">bigin..</text></g><g><title>mp_cmp_mag (17 instructions, 0.10%)</title><rect x="41.0708%" y="357" width="0.0957%" height="15" fill="rgb(250,127,30)" fg:x="7295" fg:w="17"/><text x="41.3638%" y="367.50"></text></g><g><title>mp_cmp (31 instructions, 0.17%)</title><rect x="41.0708%" y="373" width="0.1745%" height="15" fill="rgb(230,49,44)" fg:x="7295" fg:w="31"/><text x="41.3638%" y="383.50"></text></g><g><title>B_lt (935 instructions, 5.26%)</title><rect x="36.2065%" y="389" width="5.2640%" height="15" fill="rgb(229,67,23)" fg:x="6431" fg:w="935"/><text x="36.4995%" y="399.50">B_lt</text></g><g><title>@add_cycles (965 instructions, 5.43%)</title><rect x="36.2065%" y="405" width="5.4329%" height="15" fill="rgb(249,83,47)" fg:x="6431" fg:w="965"/><text x="36.4995%" y="415.50">@add_..</text></g><g><title>canister_global_timer (5,655 instructions, 31.84%)</title><rect x="11.6991%" y="421" width="31.8376%" height="15" fill="rgb(215,43,3)" fg:x="2078" fg:w="5655"/><text x="11.9921%" y="431.50">canister_global_timer</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="43.5368%" y="405" width="0.0450%" height="15" fill="rgb(238,154,13)" fg:x="7733" fg:w="8"/><text x="43.8297%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="43.5818%" y="405" width="0.1689%" height="15" fill="rgb(219,56,2)" fg:x="7741" fg:w="30"/><text x="43.8748%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="43.7507%" y="405" width="0.1689%" height="15" fill="rgb(233,0,4)" fg:x="7771" fg:w="30"/><text x="44.0437%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.21%)</title><rect x="43.9196%" y="405" width="1.2104%" height="15" fill="rgb(235,30,7)" fg:x="7801" fg:w="215"/><text x="44.2126%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="45.1301%" y="405" width="0.1689%" height="15" fill="rgb(250,79,13)" fg:x="8016" fg:w="30"/><text x="45.4230%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="45.2990%" y="389" width="0.2590%" height="15" fill="rgb(211,146,34)" fg:x="8046" fg:w="46"/><text x="45.5919%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="45.5579%" y="389" width="0.1689%" height="15" fill="rgb(228,22,38)" fg:x="8092" fg:w="30"/><text x="45.8509%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="45.7268%" y="389" width="0.2590%" height="15" fill="rgb(235,168,5)" fg:x="8122" fg:w="46"/><text x="46.0198%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="45.9858%" y="389" width="0.3378%" height="15" fill="rgb(221,155,16)" fg:x="8168" fg:w="60"/><text x="46.2788%" y="399.50"></text></g><g><title>parse_idl_header (264 instructions, 1.49%)</title><rect x="45.2990%" y="405" width="1.4863%" height="15" fill="rgb(215,215,53)" fg:x="8046" fg:w="264"/><text x="45.5919%" y="415.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="46.7853%" y="389" width="0.0169%" height="15" fill="rgb(223,4,10)" fg:x="8310" fg:w="3"/><text x="47.0782%" y="399.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="46.7853%" y="405" width="0.0338%" height="15" fill="rgb(234,103,6)" fg:x="8310" fg:w="6"/><text x="47.0782%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="46.8191%" y="405" width="0.2590%" height="15" fill="rgb(227,97,0)" fg:x="8316" fg:w="46"/><text x="47.1120%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="47.0780%" y="405" width="0.3378%" height="15" fill="rgb(234,150,53)" fg:x="8362" fg:w="60"/><text x="47.3710%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.05%)</title><rect x="47.4158%" y="405" width="0.0507%" height="15" fill="rgb(228,201,54)" fg:x="8422" fg:w="9"/><text x="47.7088%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="47.4665%" y="389" width="0.1239%" height="15" fill="rgb(222,22,37)" fg:x="8431" fg:w="22"/><text x="47.7595%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="47.5904%" y="389" width="0.1239%" height="15" fill="rgb(237,53,32)" fg:x="8453" fg:w="22"/><text x="47.8833%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="47.7142%" y="389" width="0.1239%" height="15" fill="rgb(233,25,53)" fg:x="8475" fg:w="22"/><text x="48.0072%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="47.8381%" y="389" width="0.1239%" height="15" fill="rgb(210,40,34)" fg:x="8497" fg:w="22"/><text x="48.1311%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="47.9619%" y="389" width="0.1239%" height="15" fill="rgb(241,220,44)" fg:x="8519" fg:w="22"/><text x="48.2549%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="48.0858%" y="389" width="0.1239%" height="15" fill="rgb(235,28,35)" fg:x="8541" fg:w="22"/><text x="48.3788%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="48.2097%" y="373" width="0.1239%" height="15" fill="rgb(210,56,17)" fg:x="8563" fg:w="22"/><text x="48.5026%" y="383.50"></text></g><g><title>box_i64 (40 instructions, 0.23%)</title><rect x="48.2097%" y="389" width="0.2252%" height="15" fill="rgb(224,130,29)" fg:x="8563" fg:w="40"/><text x="48.5026%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (35 instructions, 0.20%)</title><rect x="48.4349%" y="373" width="0.1970%" height="15" fill="rgb(235,212,8)" fg:x="8603" fg:w="35"/><text x="48.7278%" y="383.50"></text></g><g><title>Array_init (177 instructions, 1.00%)</title><rect x="48.4349%" y="389" width="0.9965%" height="15" fill="rgb(223,33,50)" fg:x="8603" fg:w="177"/><text x="48.7278%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="49.4314%" y="389" width="0.1239%" height="15" fill="rgb(219,149,13)" fg:x="8780" fg:w="22"/><text x="49.7243%" y="399.50"></text></g><g><title>opt_project (14 instructions, 0.08%)</title><rect x="49.5552%" y="373" width="0.0788%" height="15" fill="rgb(250,156,29)" fg:x="8802" fg:w="14"/><text x="49.8482%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.09%)</title><rect x="49.6341%" y="373" width="0.0901%" height="15" fill="rgb(216,193,19)" fg:x="8816" fg:w="16"/><text x="49.9270%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.10%)</title><rect x="49.7241%" y="373" width="0.1013%" height="15" fill="rgb(216,135,14)" fg:x="8832" fg:w="18"/><text x="50.0171%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.09%)</title><rect x="49.8255%" y="373" width="0.0901%" height="15" fill="rgb(241,47,5)" fg:x="8850" fg:w="16"/><text x="50.1184%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="49.9156%" y="373" width="0.1013%" height="15" fill="rgb(233,42,35)" fg:x="8866" fg:w="18"/><text x="50.2085%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.09%)</title><rect x="50.0169%" y="373" width="0.0901%" height="15" fill="rgb(231,13,6)" fg:x="8884" fg:w="16"/><text x="50.3099%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="50.1070%" y="373" width="0.1013%" height="15" fill="rgb(207,181,40)" fg:x="8900" fg:w="18"/><text x="50.3999%" y="383.50"></text></g><g><title>B_lt (10 instructions, 0.06%)</title><rect x="50.2083%" y="373" width="0.0563%" height="15" fill="rgb(254,173,49)" fg:x="8918" fg:w="10"/><text x="50.5013%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="50.2646%" y="373" width="0.1013%" height="15" fill="rgb(221,1,38)" fg:x="8928" fg:w="18"/><text x="50.5576%" y="383.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.09%)</title><rect x="50.3659%" y="373" width="0.0901%" height="15" fill="rgb(206,124,46)" fg:x="8946" fg:w="16"/><text x="50.6589%" y="383.50"></text></g><g><title>opt_inject (14 instructions, 0.08%)</title><rect x="50.4560%" y="373" width="0.0788%" height="15" fill="rgb(249,21,11)" fg:x="8962" fg:w="14"/><text x="50.7490%" y="383.50"></text></g><g><title>obj_idx&lt;5&gt; (16 instructions, 0.09%)</title><rect x="50.5348%" y="373" width="0.0901%" height="15" fill="rgb(222,201,40)" fg:x="8976" fg:w="16"/><text x="50.8278%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.09%)</title><rect x="50.6249%" y="373" width="0.0901%" height="15" fill="rgb(235,61,29)" fg:x="8992" fg:w="16"/><text x="50.9179%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="50.7150%" y="373" width="0.1013%" height="15" fill="rgb(219,207,3)" fg:x="9008" fg:w="18"/><text x="51.0080%" y="383.50"></text></g><g><title>B_add (24 instructions, 0.14%)</title><rect x="50.8163%" y="373" width="0.1351%" height="15" fill="rgb(222,56,46)" fg:x="9026" fg:w="24"/><text x="51.1093%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.09%)</title><rect x="50.9515%" y="373" width="0.0901%" height="15" fill="rgb(239,76,54)" fg:x="9050" fg:w="16"/><text x="51.2444%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.10%)</title><rect x="51.0415%" y="373" width="0.1013%" height="15" fill="rgb(231,124,27)" fg:x="9066" fg:w="18"/><text x="51.3345%" y="383.50"></text></g><g><title>gatherExpired (403 instructions, 2.27%)</title><rect x="49.5552%" y="389" width="2.2689%" height="15" fill="rgb(249,195,6)" fg:x="8802" fg:w="403"/><text x="49.8482%" y="399.50">g..</text></g><g><title>opt_project (14 instructions, 0.08%)</title><rect x="51.8241%" y="373" width="0.0788%" height="15" fill="rgb(237,174,47)" fg:x="9205" fg:w="14"/><text x="52.1171%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.09%)</title><rect x="51.9029%" y="373" width="0.0901%" height="15" fill="rgb(206,201,31)" fg:x="9219" fg:w="16"/><text x="52.1959%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.04%)</title><rect x="51.9930%" y="373" width="0.0394%" height="15" fill="rgb(231,57,52)" fg:x="9235" fg:w="7"/><text x="52.2860%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.09%)</title><rect x="52.0324%" y="373" width="0.0901%" height="15" fill="rgb(248,177,22)" fg:x="9242" fg:w="16"/><text x="52.3254%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.10%)</title><rect x="52.1225%" y="373" width="0.1013%" height="15" fill="rgb(215,211,37)" fg:x="9258" fg:w="18"/><text x="52.4155%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.09%)</title><rect x="52.2238%" y="373" width="0.0901%" height="15" fill="rgb(241,128,51)" fg:x="9276" fg:w="16"/><text x="52.5168%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.04%)</title><rect x="52.3139%" y="373" width="0.0394%" height="15" fill="rgb(227,165,31)" fg:x="9292" fg:w="7"/><text x="52.6069%" y="383.50"></text></g><g><title>box_i64 (13 instructions, 0.07%)</title><rect x="52.3533%" y="373" width="0.0732%" height="15" fill="rgb(228,167,24)" fg:x="9299" fg:w="13"/><text x="52.6463%" y="383.50"></text></g><g><title>@nextExpiration (164 instructions, 0.92%)</title><rect x="51.8241%" y="389" width="0.9233%" height="15" fill="rgb(228,143,12)" fg:x="9205" fg:w="164"/><text x="52.1171%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.07%)</title><rect x="52.7474%" y="389" width="0.0732%" height="15" fill="rgb(249,149,8)" fg:x="9369" fg:w="13"/><text x="53.0404%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="52.8206%" y="389" width="0.1239%" height="15" fill="rgb(243,35,44)" fg:x="9382" fg:w="22"/><text x="53.1136%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="52.9445%" y="389" width="0.1239%" height="15" fill="rgb(246,89,9)" fg:x="9404" fg:w="22"/><text x="53.2375%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.0683%" y="389" width="0.1239%" height="15" fill="rgb(233,213,13)" fg:x="9426" fg:w="22"/><text x="53.3613%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.1922%" y="389" width="0.1239%" height="15" fill="rgb(233,141,41)" fg:x="9448" fg:w="22"/><text x="53.4852%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.3161%" y="389" width="0.1239%" height="15" fill="rgb(239,167,4)" fg:x="9470" fg:w="22"/><text x="53.6090%" y="399.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.4399%" y="373" width="0.1239%" height="15" fill="rgb(209,217,16)" fg:x="9492" fg:w="22"/><text x="53.7329%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.5638%" y="373" width="0.1239%" height="15" fill="rgb(219,88,35)" fg:x="9514" fg:w="22"/><text x="53.8568%" y="383.50"></text></g><g><title>opt_project (14 instructions, 0.08%)</title><rect x="53.6876%" y="373" width="0.0788%" height="15" fill="rgb(220,193,23)" fg:x="9536" fg:w="14"/><text x="53.9806%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.7665%" y="341" width="0.1239%" height="15" fill="rgb(230,90,52)" fg:x="9550" fg:w="22"/><text x="54.0594%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="53.8903%" y="341" width="0.1239%" height="15" fill="rgb(252,106,19)" fg:x="9572" fg:w="22"/><text x="54.1833%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="54.0142%" y="341" width="0.1239%" height="15" fill="rgb(206,74,20)" fg:x="9594" fg:w="22"/><text x="54.3072%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="54.1380%" y="341" width="0.1239%" height="15" fill="rgb(230,138,44)" fg:x="9616" fg:w="22"/><text x="54.4310%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="54.2619%" y="341" width="0.1239%" height="15" fill="rgb(235,182,43)" fg:x="9638" fg:w="22"/><text x="54.5549%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="54.3858%" y="341" width="0.1239%" height="15" fill="rgb(242,16,51)" fg:x="9660" fg:w="22"/><text x="54.6787%" y="351.50"></text></g><g><title>@new_async (231 instructions, 1.30%)</title><rect x="53.7665%" y="357" width="1.3005%" height="15" fill="rgb(248,9,4)" fg:x="9550" fg:w="231"/><text x="54.0594%" y="367.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="55.0670%" y="357" width="0.1239%" height="15" fill="rgb(210,31,22)" fg:x="9781" fg:w="22"/><text x="55.3600%" y="367.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="55.1909%" y="357" width="0.1239%" height="15" fill="rgb(239,54,39)" fg:x="9803" fg:w="22"/><text x="55.4838%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="55.3147%" y="341" width="0.1689%" height="15" fill="rgb(230,99,41)" fg:x="9825" fg:w="30"/><text x="55.6077%" y="351.50"></text></g><g><title>canister_self (40 instructions, 0.23%)</title><rect x="55.3147%" y="357" width="0.2252%" height="15" fill="rgb(253,106,12)" fg:x="9825" fg:w="40"/><text x="55.6077%" y="367.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="55.5399%" y="341" width="0.1239%" height="15" fill="rgb(213,46,41)" fg:x="9865" fg:w="22"/><text x="55.8329%" y="351.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="55.5399%" y="357" width="0.2083%" height="15" fill="rgb(215,133,35)" fg:x="9865" fg:w="37"/><text x="55.8329%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="55.7482%" y="341" width="0.1689%" height="15" fill="rgb(213,28,5)" fg:x="9902" fg:w="30"/><text x="56.0412%" y="351.50"></text></g><g><title>canister_self (40 instructions, 0.23%)</title><rect x="55.7482%" y="357" width="0.2252%" height="15" fill="rgb(215,77,49)" fg:x="9902" fg:w="40"/><text x="56.0412%" y="367.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="55.9734%" y="341" width="0.1239%" height="15" fill="rgb(248,100,22)" fg:x="9942" fg:w="22"/><text x="56.2664%" y="351.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="55.9734%" y="357" width="0.2083%" height="15" fill="rgb(208,67,9)" fg:x="9942" fg:w="37"/><text x="56.2664%" y="367.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="56.1817%" y="357" width="0.1239%" height="15" fill="rgb(219,133,21)" fg:x="9979" fg:w="22"/><text x="56.4747%" y="367.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::hbe4ac6bb174d9c09 (7 instructions, 0.04%)</title><rect x="56.3056%" y="341" width="0.0394%" height="15" fill="rgb(246,46,29)" fg:x="10001" fg:w="7"/><text x="56.5986%" y="351.50"></text></g><g><title>remember_continuation (58 instructions, 0.33%)</title><rect x="56.3056%" y="357" width="0.3265%" height="15" fill="rgb(246,185,52)" fg:x="10001" fg:w="58"/><text x="56.5986%" y="367.50"></text></g><g><title>box_i32 (9 instructions, 0.05%)</title><rect x="56.6321%" y="357" width="0.0507%" height="15" fill="rgb(252,136,11)" fg:x="10059" fg:w="9"/><text x="56.9251%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="56.6828%" y="341" width="0.1689%" height="15" fill="rgb(219,138,53)" fg:x="10068" fg:w="30"/><text x="56.9758%" y="351.50"></text></g><g><title>memcpy (64 instructions, 0.36%)</title><rect x="56.8517%" y="341" width="0.3603%" height="15" fill="rgb(211,51,23)" fg:x="10098" fg:w="64"/><text x="57.1447%" y="351.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="57.2120%" y="341" width="0.1689%" height="15" fill="rgb(247,221,28)" fg:x="10162" fg:w="30"/><text x="57.5050%" y="351.50"></text></g><g><title>@serialize&lt;n32&gt; (195 instructions, 1.10%)</title><rect x="56.6828%" y="357" width="1.0978%" height="15" fill="rgb(251,222,45)" fg:x="10068" fg:w="195"/><text x="56.9758%" y="367.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::h6355501f33786335 (34 instructions, 0.19%)</title><rect x="57.7807%" y="277" width="0.1914%" height="15" fill="rgb(217,162,53)" fg:x="10263" fg:w="34"/><text x="58.0736%" y="287.50"></text></g><g><title>memset (233 instructions, 1.31%)</title><rect x="57.9721%" y="277" width="1.3118%" height="15" fill="rgb(229,93,14)" fg:x="10297" fg:w="233"/><text x="58.2650%" y="287.50"></text></g><g><title>mp_calloc (291 instructions, 1.64%)</title><rect x="57.7807%" y="293" width="1.6383%" height="15" fill="rgb(209,67,49)" fg:x="10263" fg:w="291"/><text x="58.0736%" y="303.50"></text></g><g><title>mp_init (306 instructions, 1.72%)</title><rect x="57.7807%" y="309" width="1.7228%" height="15" fill="rgb(213,87,29)" fg:x="10263" fg:w="306"/><text x="58.0736%" y="319.50"></text></g><g><title>mp_set_u64 (479 instructions, 2.70%)</title><rect x="59.5034%" y="309" width="2.6968%" height="15" fill="rgb(205,151,52)" fg:x="10569" fg:w="479"/><text x="59.7964%" y="319.50">m..</text></g><g><title>motoko_rts::bigint::persist_bigint::hfac9333f501b1524 (30 instructions, 0.17%)</title><rect x="62.2002%" y="309" width="0.1689%" height="15" fill="rgb(253,215,39)" fg:x="11048" fg:w="30"/><text x="62.4932%" y="319.50"></text></g><g><title>bigint_of_int64 (864 instructions, 4.86%)</title><rect x="57.7807%" y="325" width="4.8643%" height="15" fill="rgb(221,220,41)" fg:x="10263" fg:w="864"/><text x="58.0736%" y="335.50">bigin..</text></g><g><title>mp_cmp_mag (17 instructions, 0.10%)</title><rect x="62.6450%" y="309" width="0.0957%" height="15" fill="rgb(218,133,21)" fg:x="11127" fg:w="17"/><text x="62.9379%" y="319.50"></text></g><g><title>mp_cmp (31 instructions, 0.17%)</title><rect x="62.6450%" y="325" width="0.1745%" height="15" fill="rgb(221,193,43)" fg:x="11127" fg:w="31"/><text x="62.9379%" y="335.50"></text></g><g><title>B_lt (935 instructions, 5.26%)</title><rect x="57.7807%" y="341" width="5.2640%" height="15" fill="rgb(240,128,52)" fg:x="10263" fg:w="935"/><text x="58.0736%" y="351.50">B_lt</text></g><g><title>@add_cycles (965 instructions, 5.43%)</title><rect x="57.7807%" y="357" width="5.4329%" height="15" fill="rgb(253,114,12)" fg:x="10263" fg:w="965"/><text x="58.0736%" y="367.50">@add_..</text></g><g><title>anon-func-5.34 (1,811 instructions, 10.20%)</title><rect x="53.7665%" y="373" width="10.1959%" height="15" fill="rgb(215,223,47)" fg:x="9550" fg:w="1811"/><text x="54.0594%" y="383.50">anon-func-5...</text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="63.9624%" y="341" width="0.1239%" height="15" fill="rgb(248,225,23)" fg:x="11361" fg:w="22"/><text x="64.2554%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.0863%" y="341" width="0.1239%" height="15" fill="rgb(250,108,0)" fg:x="11383" fg:w="22"/><text x="64.3792%" y="351.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.2101%" y="309" width="0.1239%" height="15" fill="rgb(228,208,7)" fg:x="11405" fg:w="22"/><text x="64.5031%" y="319.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.3340%" y="309" width="0.1239%" height="15" fill="rgb(244,45,10)" fg:x="11427" fg:w="22"/><text x="64.6269%" y="319.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.4578%" y="277" width="0.1239%" height="15" fill="rgb(207,125,25)" fg:x="11449" fg:w="22"/><text x="64.7508%" y="287.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.5817%" y="277" width="0.1239%" height="15" fill="rgb(210,195,18)" fg:x="11471" fg:w="22"/><text x="64.8747%" y="287.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.7056%" y="245" width="0.1239%" height="15" fill="rgb(249,80,12)" fg:x="11493" fg:w="22"/><text x="64.9985%" y="255.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.8294%" y="245" width="0.1239%" height="15" fill="rgb(221,65,9)" fg:x="11515" fg:w="22"/><text x="65.1224%" y="255.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="64.9533%" y="213" width="0.1239%" height="15" fill="rgb(235,49,36)" fg:x="11537" fg:w="22"/><text x="65.2462%" y="223.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.0771%" y="213" width="0.1239%" height="15" fill="rgb(225,32,20)" fg:x="11559" fg:w="22"/><text x="65.3701%" y="223.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.2010%" y="181" width="0.1239%" height="15" fill="rgb(215,141,46)" fg:x="11581" fg:w="22"/><text x="65.4940%" y="191.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.3249%" y="181" width="0.1239%" height="15" fill="rgb(250,160,47)" fg:x="11603" fg:w="22"/><text x="65.6178%" y="191.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.4487%" y="149" width="0.1239%" height="15" fill="rgb(216,222,40)" fg:x="11625" fg:w="22"/><text x="65.7417%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.5726%" y="149" width="0.1239%" height="15" fill="rgb(234,217,39)" fg:x="11647" fg:w="22"/><text x="65.8655%" y="159.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.6964%" y="117" width="0.1239%" height="15" fill="rgb(207,178,40)" fg:x="11669" fg:w="22"/><text x="65.9894%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.8203%" y="117" width="0.1239%" height="15" fill="rgb(221,136,13)" fg:x="11691" fg:w="22"/><text x="66.1133%" y="127.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="65.9442%" y="85" width="0.1239%" height="15" fill="rgb(249,199,10)" fg:x="11713" fg:w="22"/><text x="66.2371%" y="95.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="66.0680%" y="85" width="0.1239%" height="15" fill="rgb(249,222,13)" fg:x="11735" fg:w="22"/><text x="66.3610%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="66.1919%" y="37" width="0.1689%" height="15" fill="rgb(244,185,38)" fg:x="11757" fg:w="30"/><text x="66.4848%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.34%)</title><rect x="66.3608%" y="37" width="0.3434%" height="15" fill="rgb(236,202,9)" fg:x="11787" fg:w="61"/><text x="66.6537%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="66.7042%" y="37" width="0.1689%" height="15" fill="rgb(250,229,37)" fg:x="11848" fg:w="30"/><text x="66.9972%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.17%)</title><rect x="66.8731%" y="37" width="0.1689%" height="15" fill="rgb(206,174,23)" fg:x="11878" fg:w="30"/><text x="67.1661%" y="47.50"></text></g><g><title>$lambda.19 (212 instructions, 1.19%)</title><rect x="66.1919%" y="53" width="1.1936%" height="15" fill="rgb(211,33,43)" fg:x="11757" fg:w="212"/><text x="66.4848%" y="63.50"></text></g><g><title>$loop/0 (237 instructions, 1.33%)</title><rect x="66.1919%" y="69" width="1.3343%" height="15" fill="rgb(245,58,50)" fg:x="11757" fg:w="237"/><text x="66.4848%" y="79.50"></text></g><g><title>$k/9 (253 instructions, 1.42%)</title><rect x="66.1919%" y="85" width="1.4244%" height="15" fill="rgb(244,68,36)" fg:x="11757" fg:w="253"/><text x="66.4848%" y="95.50"></text></g><g><title>$loop/0 (365 instructions, 2.05%)</title><rect x="65.9442%" y="101" width="2.0549%" height="15" fill="rgb(232,229,15)" fg:x="11713" fg:w="365"/><text x="66.2371%" y="111.50"></text></g><g><title>$k/9 (381 instructions, 2.15%)</title><rect x="65.9442%" y="117" width="2.1450%" height="15" fill="rgb(254,30,23)" fg:x="11713" fg:w="381"/><text x="66.2371%" y="127.50">$..</text></g><g><title>$loop/0 (493 instructions, 2.78%)</title><rect x="65.6964%" y="133" width="2.7756%" height="15" fill="rgb(235,160,14)" fg:x="11669" fg:w="493"/><text x="65.9894%" y="143.50">$l..</text></g><g><title>$k/9 (509 instructions, 2.87%)</title><rect x="65.6964%" y="149" width="2.8657%" height="15" fill="rgb(212,155,44)" fg:x="11669" fg:w="509"/><text x="65.9894%" y="159.50">$k..</text></g><g><title>$loop/0 (621 instructions, 3.50%)</title><rect x="65.4487%" y="165" width="3.4962%" height="15" fill="rgb(226,2,50)" fg:x="11625" fg:w="621"/><text x="65.7417%" y="175.50">$lo..</text></g><g><title>$k/9 (637 instructions, 3.59%)</title><rect x="65.4487%" y="181" width="3.5863%" height="15" fill="rgb(234,177,6)" fg:x="11625" fg:w="637"/><text x="65.7417%" y="191.50">$k/9</text></g><g><title>$loop/0 (749 instructions, 4.22%)</title><rect x="65.2010%" y="197" width="4.2169%" height="15" fill="rgb(217,24,9)" fg:x="11581" fg:w="749"/><text x="65.4940%" y="207.50">$loo..</text></g><g><title>$k/9 (765 instructions, 4.31%)</title><rect x="65.2010%" y="213" width="4.3069%" height="15" fill="rgb(220,13,46)" fg:x="11581" fg:w="765"/><text x="65.4940%" y="223.50">$k/9</text></g><g><title>$loop/0 (877 instructions, 4.94%)</title><rect x="64.9533%" y="229" width="4.9375%" height="15" fill="rgb(239,221,27)" fg:x="11537" fg:w="877"/><text x="65.2462%" y="239.50">$loop..</text></g><g><title>$k/9 (893 instructions, 5.03%)</title><rect x="64.9533%" y="245" width="5.0276%" height="15" fill="rgb(222,198,25)" fg:x="11537" fg:w="893"/><text x="65.2462%" y="255.50">$k/9</text></g><g><title>$loop/0 (1,005 instructions, 5.66%)</title><rect x="64.7056%" y="261" width="5.6581%" height="15" fill="rgb(211,99,13)" fg:x="11493" fg:w="1005"/><text x="64.9985%" y="271.50">$loop/0</text></g><g><title>$k/9 (1,021 instructions, 5.75%)</title><rect x="64.7056%" y="277" width="5.7482%" height="15" fill="rgb(232,111,31)" fg:x="11493" fg:w="1021"/><text x="64.9985%" y="287.50">$k/9</text></g><g><title>$loop/0 (1,133 instructions, 6.38%)</title><rect x="64.4578%" y="293" width="6.3788%" height="15" fill="rgb(245,82,37)" fg:x="11449" fg:w="1133"/><text x="64.7508%" y="303.50">$loop/0</text></g><g><title>$k/9 (1,149 instructions, 6.47%)</title><rect x="64.4578%" y="309" width="6.4689%" height="15" fill="rgb(227,149,46)" fg:x="11449" fg:w="1149"/><text x="64.7508%" y="319.50">$k/9</text></g><g><title>$loop/0 (1,261 instructions, 7.10%)</title><rect x="64.2101%" y="325" width="7.0994%" height="15" fill="rgb(218,36,50)" fg:x="11405" fg:w="1261"/><text x="64.5031%" y="335.50">$loop/0</text></g><g><title>$k/9 (1,277 instructions, 7.19%)</title><rect x="64.2101%" y="341" width="7.1895%" height="15" fill="rgb(226,80,48)" fg:x="11405" fg:w="1277"/><text x="64.5031%" y="351.50">$k/9</text></g><g><title>$loop/0 (1,389 instructions, 7.82%)</title><rect x="63.9624%" y="357" width="7.8201%" height="15" fill="rgb(238,224,15)" fg:x="11361" fg:w="1389"/><text x="64.2554%" y="367.50">$loop/0</text></g><g><title>$k/9 (1,405 instructions, 7.91%)</title><rect x="63.9624%" y="373" width="7.9101%" height="15" fill="rgb(241,136,10)" fg:x="11361" fg:w="1405"/><text x="64.2554%" y="383.50">$k/9</text></g><g><title>$loop/0 (3,348 instructions, 18.85%)</title><rect x="53.4399%" y="389" width="18.8492%" height="15" fill="rgb(208,32,45)" fg:x="9492" fg:w="3348"/><text x="53.7329%" y="399.50">$loop/0</text></g><g><title>anon_async.1 (4,633 instructions, 26.08%)</title><rect x="47.4665%" y="405" width="26.0838%" height="15" fill="rgb(207,135,9)" fg:x="8431" fg:w="4633"/><text x="47.7595%" y="415.50">anon_async.1</text></g><g><title>schedule_copying_gc (43 instructions, 0.24%)</title><rect x="73.5503%" y="405" width="0.2421%" height="15" fill="rgb(206,86,44)" fg:x="13064" fg:w="43"/><text x="73.8432%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.07%)</title><rect x="73.7924%" y="405" width="0.0732%" height="15" fill="rgb(245,177,15)" fg:x="13107" fg:w="13"/><text x="74.0853%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="77.9755%" y="405" width="0.0450%" height="15" fill="rgb(206,64,50)" fg:x="13850" fg:w="8"/><text x="78.2684%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="78.0205%" y="405" width="0.1689%" height="15" fill="rgb(234,36,40)" fg:x="13858" fg:w="30"/><text x="78.3135%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="78.1894%" y="405" width="0.1689%" height="15" fill="rgb(213,64,8)" fg:x="13888" fg:w="30"/><text x="78.4824%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.21%)</title><rect x="78.3583%" y="405" width="1.2104%" height="15" fill="rgb(210,75,36)" fg:x="13918" fg:w="215"/><text x="78.6513%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="79.5687%" y="405" width="0.1689%" height="15" fill="rgb(229,88,21)" fg:x="14133" fg:w="30"/><text x="79.8617%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="79.7376%" y="389" width="0.2590%" height="15" fill="rgb(252,204,47)" fg:x="14163" fg:w="46"/><text x="80.0306%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="79.9966%" y="389" width="0.1689%" height="15" fill="rgb(208,77,27)" fg:x="14209" fg:w="30"/><text x="80.2896%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="80.1655%" y="389" width="0.2590%" height="15" fill="rgb(221,76,26)" fg:x="14239" fg:w="46"/><text x="80.4585%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="80.4245%" y="389" width="0.3378%" height="15" fill="rgb(225,139,18)" fg:x="14285" fg:w="60"/><text x="80.7175%" y="399.50"></text></g><g><title>parse_idl_header (264 instructions, 1.49%)</title><rect x="79.7376%" y="405" width="1.4863%" height="15" fill="rgb(230,137,11)" fg:x="14163" fg:w="264"/><text x="80.0306%" y="415.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="81.2240%" y="389" width="0.0169%" height="15" fill="rgb(212,28,1)" fg:x="14427" fg:w="3"/><text x="81.5169%" y="399.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="81.2240%" y="405" width="0.0338%" height="15" fill="rgb(248,164,17)" fg:x="14427" fg:w="6"/><text x="81.5169%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="81.2577%" y="405" width="0.2590%" height="15" fill="rgb(222,171,42)" fg:x="14433" fg:w="46"/><text x="81.5507%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.34%)</title><rect x="81.5167%" y="405" width="0.3378%" height="15" fill="rgb(243,84,45)" fg:x="14479" fg:w="60"/><text x="81.8097%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.05%)</title><rect x="81.8545%" y="405" width="0.0507%" height="15" fill="rgb(252,49,23)" fg:x="14539" fg:w="9"/><text x="82.1475%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="81.9052%" y="373" width="0.1689%" height="15" fill="rgb(215,19,7)" fg:x="14548" fg:w="30"/><text x="82.1982%" y="383.50"></text></g><g><title>memcpy (61 instructions, 0.34%)</title><rect x="82.0741%" y="373" width="0.3434%" height="15" fill="rgb(238,81,41)" fg:x="14578" fg:w="61"/><text x="82.3671%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="82.4175%" y="373" width="0.1689%" height="15" fill="rgb(210,199,37)" fg:x="14639" fg:w="30"/><text x="82.7105%" y="383.50"></text></g><g><title>reply_with_data (30 instructions, 0.17%)</title><rect x="82.5864%" y="373" width="0.1689%" height="15" fill="rgb(244,192,49)" fg:x="14669" fg:w="30"/><text x="82.8794%" y="383.50"></text></g><g><title>$lambda.19 (212 instructions, 1.19%)</title><rect x="81.9052%" y="389" width="1.1936%" height="15" fill="rgb(226,211,11)" fg:x="14548" fg:w="212"/><text x="82.1982%" y="399.50"></text></g><g><title>anon_async (216 instructions, 1.22%)</title><rect x="81.9052%" y="405" width="1.2161%" height="15" fill="rgb(236,162,54)" fg:x="14548" fg:w="216"/><text x="82.1982%" y="415.50"></text></g><g><title>schedule_copying_gc (43 instructions, 0.24%)</title><rect x="83.1213%" y="405" width="0.2421%" height="15" fill="rgb(220,229,9)" fg:x="14764" fg:w="43"/><text x="83.4142%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.07%)</title><rect x="83.3634%" y="405" width="0.0732%" height="15" fill="rgb(250,87,22)" fg:x="14807" fg:w="13"/><text x="83.6563%" y="415.50"></text></g><g><title>__motoko_async_helper (7,817 instructions, 44.01%)</title><rect x="43.5368%" y="421" width="44.0097%" height="15" fill="rgb(239,43,17)" fg:x="7733" fg:w="7817"/><text x="43.8297%" y="431.50">__motoko_async_helper</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="87.5464%" y="405" width="0.0450%" height="15" fill="rgb(231,177,25)" fg:x="15550" fg:w="8"/><text x="87.8394%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.25%)</title><rect x="87.5915%" y="405" width="0.2533%" height="15" fill="rgb(219,179,1)" fg:x="15558" fg:w="45"/><text x="87.8845%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="87.8448%" y="405" width="0.1689%" height="15" fill="rgb(238,219,53)" fg:x="15603" fg:w="30"/><text x="88.1378%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="88.0137%" y="373" width="0.2590%" height="15" fill="rgb(232,167,36)" fg:x="15633" fg:w="46"/><text x="88.3067%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="88.2727%" y="373" width="0.1689%" height="15" fill="rgb(244,19,51)" fg:x="15679" fg:w="30"/><text x="88.5657%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="88.4416%" y="373" width="0.2590%" height="15" fill="rgb(224,6,22)" fg:x="15709" fg:w="46"/><text x="88.7346%" y="383.50"></text></g><g><title>parse_idl_header (189 instructions, 1.06%)</title><rect x="88.0137%" y="389" width="1.0641%" height="15" fill="rgb(224,145,5)" fg:x="15633" fg:w="189"/><text x="88.3067%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="89.0778%" y="373" width="0.0169%" height="15" fill="rgb(234,130,49)" fg:x="15822" fg:w="3"/><text x="89.3708%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="89.0778%" y="389" width="0.0338%" height="15" fill="rgb(254,6,2)" fg:x="15822" fg:w="6"/><text x="89.3708%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="89.1116%" y="389" width="0.2590%" height="15" fill="rgb(208,96,46)" fg:x="15828" fg:w="46"/><text x="89.4046%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (358 instructions, 2.02%)</title><rect x="88.0137%" y="405" width="2.0155%" height="15" fill="rgb(239,3,39)" fg:x="15633" fg:w="358"/><text x="88.3067%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="90.0293%" y="373" width="0.1239%" height="15" fill="rgb(233,210,1)" fg:x="15991" fg:w="22"/><text x="90.3222%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="90.1531%" y="357" width="0.1239%" height="15" fill="rgb(244,137,37)" fg:x="16013" fg:w="22"/><text x="90.4461%" y="367.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="90.1531%" y="373" width="0.2083%" height="15" fill="rgb(240,136,2)" fg:x="16013" fg:w="37"/><text x="90.4461%" y="383.50"></text></g><g><title>opt_inject (14 instructions, 0.08%)</title><rect x="90.3614%" y="373" width="0.0788%" height="15" fill="rgb(239,18,37)" fg:x="16050" fg:w="14"/><text x="90.6544%" y="383.50"></text></g><g><title>fulfill (148 instructions, 0.83%)</title><rect x="90.0293%" y="389" width="0.8332%" height="15" fill="rgb(218,185,22)" fg:x="15991" fg:w="148"/><text x="90.3222%" y="399.50"></text></g><g><title>$lambda.6 (155 instructions, 0.87%)</title><rect x="90.0293%" y="405" width="0.8726%" height="15" fill="rgb(225,218,4)" fg:x="15991" fg:w="155"/><text x="90.3222%" y="415.50"></text></g><g><title>schedule_copying_gc (43 instructions, 0.24%)</title><rect x="90.9019%" y="405" width="0.2421%" height="15" fill="rgb(230,182,32)" fg:x="16146" fg:w="43"/><text x="91.1949%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.07%)</title><rect x="91.1440%" y="405" width="0.0732%" height="15" fill="rgb(242,56,43)" fg:x="16189" fg:w="13"/><text x="91.4370%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="93.7732%" y="405" width="0.0450%" height="15" fill="rgb(233,99,24)" fg:x="16656" fg:w="8"/><text x="94.0662%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.25%)</title><rect x="93.8183%" y="405" width="0.2533%" height="15" fill="rgb(234,209,42)" fg:x="16664" fg:w="45"/><text x="94.1112%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="94.0716%" y="405" width="0.1689%" height="15" fill="rgb(227,7,12)" fg:x="16709" fg:w="30"/><text x="94.3646%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="94.2405%" y="373" width="0.2590%" height="15" fill="rgb(245,203,43)" fg:x="16739" fg:w="46"/><text x="94.5335%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (30 instructions, 0.17%)</title><rect x="94.4995%" y="373" width="0.1689%" height="15" fill="rgb(238,205,33)" fg:x="16785" fg:w="30"/><text x="94.7925%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="94.6684%" y="373" width="0.2590%" height="15" fill="rgb(231,56,7)" fg:x="16815" fg:w="46"/><text x="94.9614%" y="383.50"></text></g><g><title>parse_idl_header (189 instructions, 1.06%)</title><rect x="94.2405%" y="389" width="1.0641%" height="15" fill="rgb(244,186,29)" fg:x="16739" fg:w="189"/><text x="94.5335%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="95.3046%" y="373" width="0.0169%" height="15" fill="rgb(234,111,31)" fg:x="16928" fg:w="3"/><text x="95.5976%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.03%)</title><rect x="95.3046%" y="389" width="0.0338%" height="15" fill="rgb(241,149,10)" fg:x="16928" fg:w="6"/><text x="95.5976%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.26%)</title><rect x="95.3384%" y="389" width="0.2590%" height="15" fill="rgb(249,206,44)" fg:x="16934" fg:w="46"/><text x="95.6313%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (358 instructions, 2.02%)</title><rect x="94.2405%" y="405" width="2.0155%" height="15" fill="rgb(251,153,30)" fg:x="16739" fg:w="358"/><text x="94.5335%" y="415.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="96.2561%" y="373" width="0.1239%" height="15" fill="rgb(239,152,38)" fg:x="17097" fg:w="22"/><text x="96.5490%" y="383.50"></text></g><g><title>alloc_words (22 instructions, 0.12%)</title><rect x="96.3799%" y="357" width="0.1239%" height="15" fill="rgb(249,139,47)" fg:x="17119" fg:w="22"/><text x="96.6729%" y="367.50"></text></g><g><title>to_2_tuple (37 instructions, 0.21%)</title><rect x="96.3799%" y="373" width="0.2083%" height="15" fill="rgb(244,64,35)" fg:x="17119" fg:w="37"/><text x="96.6729%" y="383.50"></text></g><g><title>opt_inject (14 instructions, 0.08%)</title><rect x="96.5882%" y="373" width="0.0788%" height="15" fill="rgb(216,46,15)" fg:x="17156" fg:w="14"/><text x="96.8812%" y="383.50"></text></g><g><title>fulfill (148 instructions, 0.83%)</title><rect x="96.2561%" y="389" width="0.8332%" height="15" fill="rgb(250,74,19)" fg:x="17097" fg:w="148"/><text x="96.5490%" y="399.50"></text></g><g><title>$lambda.6 (155 instructions, 0.87%)</title><rect x="96.2561%" y="405" width="0.8726%" height="15" fill="rgb(249,42,33)" fg:x="17097" fg:w="155"/><text x="96.5490%" y="415.50"></text></g><g><title>schedule_copying_gc (43 instructions, 0.24%)</title><rect x="97.1287%" y="405" width="0.2421%" height="15" fill="rgb(242,149,17)" fg:x="17252" fg:w="43"/><text x="97.4217%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.07%)</title><rect x="97.3708%" y="405" width="0.0732%" height="15" fill="rgb(244,29,21)" fg:x="17295" fg:w="13"/><text x="97.6638%" y="415.50"></text></g><g><title>all (17,762 instructions, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="17762"/><text x="0.2930%" y="447.50"></text></g><g><title>@callback&lt;u&gt; (2,212 instructions, 12.45%)</title><rect x="87.5464%" y="421" width="12.4536%" height="15" fill="rgb(211,67,2)" fg:x="15550" fg:w="2212"/><text x="87.8394%" y="431.50">@callback&lt;u&gt;</text></g></svg></svg>