<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="486" onload="init(evt)" viewBox="0 0 1024 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.setTimer(0)</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="469.00"> </text><svg id="frames" x="10" width="1004" total_samples="51467"><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="0.0000%" y="405" width="0.0194%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="10"/><text x="0.2930%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="0.0194%" y="405" width="0.1088%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="56"/><text x="0.3124%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.1282%" y="373" width="0.0971%" height="15" fill="rgb(234,67,33)" fg:x="66" fg:w="50"/><text x="0.4212%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="0.2254%" y="373" width="0.1088%" height="15" fill="rgb(247,98,35)" fg:x="116" fg:w="56"/><text x="0.5184%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.3342%" y="373" width="0.0971%" height="15" fill="rgb(247,138,52)" fg:x="172" fg:w="50"/><text x="0.6272%" y="383.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="0.4313%" y="373" width="0.1244%" height="15" fill="rgb(213,79,30)" fg:x="222" fg:w="64"/><text x="0.7243%" y="383.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.02%)</title><rect x="0.5557%" y="373" width="0.0233%" height="15" fill="rgb(246,177,23)" fg:x="286" fg:w="12"/><text x="0.8487%" y="383.50"></text></g><g><title>parse_idl_header (340 instructions, 0.66%)</title><rect x="0.1282%" y="389" width="0.6606%" height="15" fill="rgb(230,62,27)" fg:x="66" fg:w="340"/><text x="0.4212%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="0.7889%" y="373" width="0.0117%" height="15" fill="rgb(216,154,8)" fg:x="406" fg:w="6"/><text x="1.0818%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="0.7889%" y="389" width="0.0291%" height="15" fill="rgb(244,35,45)" fg:x="406" fg:w="15"/><text x="1.0818%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.8180%" y="389" width="0.0971%" height="15" fill="rgb(251,115,12)" fg:x="421" fg:w="50"/><text x="1.1110%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="0.9151%" y="389" width="0.1244%" height="15" fill="rgb(240,54,50)" fg:x="471" fg:w="64"/><text x="1.2081%" y="399.50"></text></g><g><title>@deserialize&lt;N&gt; (804 instructions, 1.56%)</title><rect x="0.1282%" y="405" width="1.5622%" height="15" fill="rgb(233,84,52)" fg:x="66" fg:w="804"/><text x="0.4212%" y="415.50"></text></g><g><title>B_mul (29 instructions, 0.06%)</title><rect x="1.6904%" y="389" width="0.0563%" height="15" fill="rgb(207,117,47)" fg:x="870" fg:w="29"/><text x="1.9834%" y="399.50"></text></g><g><title>B_add (27 instructions, 0.05%)</title><rect x="1.7468%" y="389" width="0.0525%" height="15" fill="rgb(249,43,39)" fg:x="899" fg:w="27"/><text x="2.0397%" y="399.50"></text></g><g><title>add&lt;Nat64&gt; (14 instructions, 0.03%)</title><rect x="1.7992%" y="389" width="0.0272%" height="15" fill="rgb(209,38,44)" fg:x="926" fg:w="14"/><text x="2.0922%" y="399.50"></text></g><g><title>@prune (10 instructions, 0.02%)</title><rect x="1.8264%" y="389" width="0.0194%" height="15" fill="rgb(236,212,23)" fg:x="940" fg:w="10"/><text x="2.1194%" y="399.50"></text></g><g><title>insert (92 instructions, 0.18%)</title><rect x="1.8458%" y="389" width="0.1788%" height="15" fill="rgb(242,79,21)" fg:x="950" fg:w="92"/><text x="2.1388%" y="399.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="2.0246%" y="373" width="0.0330%" height="15" fill="rgb(211,96,35)" fg:x="1042" fg:w="17"/><text x="2.3176%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="2.0576%" y="373" width="0.0175%" height="15" fill="rgb(253,215,40)" fg:x="1059" fg:w="9"/><text x="2.3506%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="2.0751%" y="373" width="0.0330%" height="15" fill="rgb(211,81,21)" fg:x="1068" fg:w="17"/><text x="2.3681%" y="383.50"></text></g><g><title>@nextExpiration (166 instructions, 0.32%)</title><rect x="2.0246%" y="389" width="0.3225%" height="15" fill="rgb(208,190,38)" fg:x="1042" fg:w="166"/><text x="2.3176%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="2.3471%" y="373" width="0.1088%" height="15" fill="rgb(235,213,38)" fg:x="1208" fg:w="56"/><text x="2.6401%" y="383.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="2.4559%" y="373" width="0.1399%" height="15" fill="rgb(237,122,38)" fg:x="1264" fg:w="72"/><text x="2.7489%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="2.5958%" y="373" width="0.1088%" height="15" fill="rgb(244,218,35)" fg:x="1336" fg:w="56"/><text x="2.8888%" y="383.50"></text></g><g><title>leb128_encode (11 instructions, 0.02%)</title><rect x="2.7046%" y="373" width="0.0214%" height="15" fill="rgb(240,68,47)" fg:x="1392" fg:w="11"/><text x="2.9976%" y="383.50"></text></g><g><title>$lambda.16 (1,374 instructions, 2.67%)</title><rect x="2.3471%" y="389" width="2.6697%" height="15" fill="rgb(210,16,53)" fg:x="1208" fg:w="1374"/><text x="2.6401%" y="399.50">$..</text></g><g><title>$lambda.4 (2,985 instructions, 5.80%)</title><rect x="1.6904%" y="405" width="5.7998%" height="15" fill="rgb(235,124,12)" fg:x="870" fg:w="2985"/><text x="1.9834%" y="415.50">$lambd..</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="7.4902%" y="405" width="0.2098%" height="15" fill="rgb(224,169,11)" fg:x="3855" fg:w="108"/><text x="7.7832%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="7.7001%" y="405" width="0.0311%" height="15" fill="rgb(250,166,2)" fg:x="3963" fg:w="16"/><text x="7.9930%" y="415.50"></text></g><g><title>setTimer (5,492 instructions, 10.67%)</title><rect x="0.0000%" y="421" width="10.6709%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="5492"/><text x="0.2930%" y="431.50">setTimer</text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="10.6709%" y="389" width="0.0136%" height="15" fill="rgb(230,116,27)" fg:x="5492" fg:w="7"/><text x="10.9639%" y="399.50"></text></g><g><title>@new_async (197 instructions, 0.38%)</title><rect x="10.6709%" y="405" width="0.3828%" height="15" fill="rgb(228,99,48)" fg:x="5492" fg:w="197"/><text x="10.9639%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="11.0537%" y="405" width="0.1088%" height="15" fill="rgb(253,11,6)" fg:x="5689" fg:w="56"/><text x="11.3467%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="11.1625%" y="405" width="0.1088%" height="15" fill="rgb(247,143,39)" fg:x="5745" fg:w="56"/><text x="11.4555%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::h70771860c5664387 (60 instructions, 0.12%)</title><rect x="11.2713%" y="389" width="0.1166%" height="15" fill="rgb(236,97,10)" fg:x="5801" fg:w="60"/><text x="11.5643%" y="399.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h3e6b5954b9a0df32 (9 instructions, 0.02%)</title><rect x="11.3879%" y="389" width="0.0175%" height="15" fill="rgb(233,208,19)" fg:x="5861" fg:w="9"/><text x="11.6808%" y="399.50"></text></g><g><title>remember_continuation (3,993 instructions, 7.76%)</title><rect x="11.2713%" y="405" width="7.7584%" height="15" fill="rgb(216,164,2)" fg:x="5801" fg:w="3993"/><text x="11.5643%" y="415.50">remember_..</text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="19.0297%" y="389" width="0.1088%" height="15" fill="rgb(220,129,5)" fg:x="9794" fg:w="56"/><text x="19.3226%" y="399.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="19.1385%" y="389" width="0.1399%" height="15" fill="rgb(242,17,10)" fg:x="9850" fg:w="72"/><text x="19.4314%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="19.2784%" y="389" width="0.1088%" height="15" fill="rgb(242,107,0)" fg:x="9922" fg:w="56"/><text x="19.5713%" y="399.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.55%)</title><rect x="19.0297%" y="405" width="0.5460%" height="15" fill="rgb(251,28,31)" fg:x="9794" fg:w="281"/><text x="19.3226%" y="415.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="19.5757%" y="389" width="0.0136%" height="15" fill="rgb(233,223,10)" fg:x="10075" fg:w="7"/><text x="19.8686%" y="399.50"></text></g><g><title>@add_cycles (24 instructions, 0.05%)</title><rect x="19.5757%" y="405" width="0.0466%" height="15" fill="rgb(215,21,27)" fg:x="10075" fg:w="24"/><text x="19.8686%" y="415.50"></text></g><g><title>canister_global_timer (14,634 instructions, 28.43%)</title><rect x="10.6709%" y="421" width="28.4338%" height="15" fill="rgb(232,23,21)" fg:x="5492" fg:w="14634"/><text x="10.9639%" y="431.50">canister_global_timer</text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="39.1047%" y="405" width="0.0194%" height="15" fill="rgb(244,5,23)" fg:x="20126" fg:w="10"/><text x="39.3976%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="39.1241%" y="405" width="0.1088%" height="15" fill="rgb(226,81,46)" fg:x="20136" fg:w="56"/><text x="39.4171%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="39.2329%" y="405" width="0.1088%" height="15" fill="rgb(247,70,30)" fg:x="20192" fg:w="56"/><text x="39.5259%" y="415.50"></text></g><g><title>memcmp (238 instructions, 0.46%)</title><rect x="39.3417%" y="405" width="0.4624%" height="15" fill="rgb(212,68,19)" fg:x="20248" fg:w="238"/><text x="39.6347%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="39.8041%" y="405" width="0.1088%" height="15" fill="rgb(240,187,13)" fg:x="20486" fg:w="56"/><text x="40.0971%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="39.9130%" y="389" width="0.0971%" height="15" fill="rgb(223,113,26)" fg:x="20542" fg:w="50"/><text x="40.2059%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="40.0101%" y="389" width="0.1088%" height="15" fill="rgb(206,192,2)" fg:x="20592" fg:w="56"/><text x="40.3031%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="40.1189%" y="389" width="0.0971%" height="15" fill="rgb(241,108,4)" fg:x="20648" fg:w="50"/><text x="40.4119%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="40.2161%" y="389" width="0.1244%" height="15" fill="rgb(247,173,49)" fg:x="20698" fg:w="64"/><text x="40.5090%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.02%)</title><rect x="40.3404%" y="389" width="0.0233%" height="15" fill="rgb(224,114,35)" fg:x="20762" fg:w="12"/><text x="40.6334%" y="399.50"></text></g><g><title>parse_idl_header (340 instructions, 0.66%)</title><rect x="39.9130%" y="405" width="0.6606%" height="15" fill="rgb(245,159,27)" fg:x="20542" fg:w="340"/><text x="40.2059%" y="415.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="40.5736%" y="389" width="0.0117%" height="15" fill="rgb(245,172,44)" fg:x="20882" fg:w="6"/><text x="40.8665%" y="399.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="40.5736%" y="405" width="0.0291%" height="15" fill="rgb(236,23,11)" fg:x="20882" fg:w="15"/><text x="40.8665%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="40.6027%" y="405" width="0.0971%" height="15" fill="rgb(205,117,38)" fg:x="20897" fg:w="50"/><text x="40.8957%" y="415.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="40.6999%" y="405" width="0.1244%" height="15" fill="rgb(237,72,25)" fg:x="20947" fg:w="64"/><text x="40.9928%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::h70771860c5664387 (60 instructions, 0.12%)</title><rect x="40.8242%" y="373" width="0.1166%" height="15" fill="rgb(244,70,9)" fg:x="21011" fg:w="60"/><text x="41.1172%" y="383.50"></text></g><g><title>Array_init (229 instructions, 0.44%)</title><rect x="40.8242%" y="389" width="0.4449%" height="15" fill="rgb(217,125,39)" fg:x="21011" fg:w="229"/><text x="41.1172%" y="399.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="41.2692%" y="373" width="0.0330%" height="15" fill="rgb(235,36,10)" fg:x="21240" fg:w="17"/><text x="41.5621%" y="383.50"></text></g><g><title>gatherExpired (21 instructions, 0.04%)</title><rect x="41.3022%" y="373" width="0.0408%" height="15" fill="rgb(251,123,47)" fg:x="21257" fg:w="21"/><text x="41.5952%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.3430%" y="373" width="0.0330%" height="15" fill="rgb(221,13,13)" fg:x="21278" fg:w="17"/><text x="41.6360%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.3760%" y="373" width="0.0330%" height="15" fill="rgb(238,131,9)" fg:x="21295" fg:w="17"/><text x="41.6690%" y="383.50"></text></g><g><title>B_lt (12 instructions, 0.02%)</title><rect x="41.4091%" y="373" width="0.0233%" height="15" fill="rgb(211,50,8)" fg:x="21312" fg:w="12"/><text x="41.7020%" y="383.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.03%)</title><rect x="41.4324%" y="373" width="0.0330%" height="15" fill="rgb(245,182,24)" fg:x="21324" fg:w="17"/><text x="41.7253%" y="383.50"></text></g><g><title>obj_idx&lt;5&gt; (17 instructions, 0.03%)</title><rect x="41.4654%" y="373" width="0.0330%" height="15" fill="rgb(242,14,37)" fg:x="21341" fg:w="17"/><text x="41.7584%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.4984%" y="373" width="0.0330%" height="15" fill="rgb(246,228,12)" fg:x="21358" fg:w="17"/><text x="41.7914%" y="383.50"></text></g><g><title>B_add (27 instructions, 0.05%)</title><rect x="41.5315%" y="373" width="0.0525%" height="15" fill="rgb(213,55,15)" fg:x="21375" fg:w="27"/><text x="41.8244%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (17 instructions, 0.03%)</title><rect x="41.5839%" y="373" width="0.0330%" height="15" fill="rgb(209,9,3)" fg:x="21402" fg:w="17"/><text x="41.8769%" y="383.50"></text></g><g><title>gatherExpired (21 instructions, 0.04%)</title><rect x="41.6170%" y="373" width="0.0408%" height="15" fill="rgb(230,59,30)" fg:x="21419" fg:w="21"/><text x="41.9099%" y="383.50"></text></g><g><title>gatherExpired (467 instructions, 0.91%)</title><rect x="41.2692%" y="389" width="0.9074%" height="15" fill="rgb(209,121,21)" fg:x="21240" fg:w="467"/><text x="41.5621%" y="399.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="42.1765%" y="373" width="0.0330%" height="15" fill="rgb(220,109,13)" fg:x="21707" fg:w="17"/><text x="42.4695%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="42.2096%" y="373" width="0.0175%" height="15" fill="rgb(232,18,1)" fg:x="21724" fg:w="9"/><text x="42.5025%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="42.2271%" y="373" width="0.0330%" height="15" fill="rgb(215,41,42)" fg:x="21733" fg:w="17"/><text x="42.5200%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (17 instructions, 0.03%)</title><rect x="42.2601%" y="373" width="0.0330%" height="15" fill="rgb(224,123,36)" fg:x="21750" fg:w="17"/><text x="42.5531%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="42.2931%" y="373" width="0.0175%" height="15" fill="rgb(240,125,3)" fg:x="21767" fg:w="9"/><text x="42.5861%" y="383.50"></text></g><g><title>@nextExpiration (196 instructions, 0.38%)</title><rect x="42.1765%" y="389" width="0.3808%" height="15" fill="rgb(205,98,50)" fg:x="21707" fg:w="196"/><text x="42.4695%" y="399.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="42.5574%" y="341" width="0.0136%" height="15" fill="rgb(205,185,37)" fg:x="21903" fg:w="7"/><text x="42.8503%" y="351.50"></text></g><g><title>@new_async (197 instructions, 0.38%)</title><rect x="42.5574%" y="357" width="0.3828%" height="15" fill="rgb(238,207,15)" fg:x="21903" fg:w="197"/><text x="42.8503%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="42.9401%" y="357" width="0.1088%" height="15" fill="rgb(213,199,42)" fg:x="22100" fg:w="56"/><text x="43.2331%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="43.0489%" y="357" width="0.1088%" height="15" fill="rgb(235,201,11)" fg:x="22156" fg:w="56"/><text x="43.3419%" y="367.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h3e6b5954b9a0df32 (9 instructions, 0.02%)</title><rect x="43.1578%" y="341" width="0.0175%" height="15" fill="rgb(207,46,11)" fg:x="22212" fg:w="9"/><text x="43.4507%" y="351.50"></text></g><g><title>remember_continuation (68 instructions, 0.13%)</title><rect x="43.1578%" y="357" width="0.1321%" height="15" fill="rgb(241,35,35)" fg:x="22212" fg:w="68"/><text x="43.4507%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="43.2899%" y="341" width="0.1088%" height="15" fill="rgb(243,32,47)" fg:x="22280" fg:w="56"/><text x="43.5828%" y="351.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="43.3987%" y="341" width="0.1399%" height="15" fill="rgb(247,202,23)" fg:x="22336" fg:w="72"/><text x="43.6917%" y="351.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="43.5386%" y="341" width="0.1088%" height="15" fill="rgb(219,102,11)" fg:x="22408" fg:w="56"/><text x="43.8315%" y="351.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.55%)</title><rect x="43.2899%" y="357" width="0.5460%" height="15" fill="rgb(243,110,44)" fg:x="22280" fg:w="281"/><text x="43.5828%" y="367.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="43.8359%" y="341" width="0.0136%" height="15" fill="rgb(222,74,54)" fg:x="22561" fg:w="7"/><text x="44.1288%" y="351.50"></text></g><g><title>@add_cycles (24 instructions, 0.05%)</title><rect x="43.8359%" y="357" width="0.0466%" height="15" fill="rgb(216,99,12)" fg:x="22561" fg:w="24"/><text x="44.1288%" y="367.50"></text></g><g><title>anon-func-5.34 (10,499 instructions, 20.40%)</title><rect x="42.5574%" y="373" width="20.3995%" height="15" fill="rgb(226,22,26)" fg:x="21903" fg:w="10499"/><text x="42.8503%" y="383.50">anon-func-5.34</text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="62.9568%" y="37" width="0.1088%" height="15" fill="rgb(217,163,10)" fg:x="32402" fg:w="56"/><text x="63.2498%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.14%)</title><rect x="63.0657%" y="37" width="0.1360%" height="15" fill="rgb(213,25,53)" fg:x="32458" fg:w="70"/><text x="63.3586%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="63.2017%" y="37" width="0.1088%" height="15" fill="rgb(252,105,26)" fg:x="32528" fg:w="56"/><text x="63.4946%" y="47.50"></text></g><g><title>$lambda.13 (1,285 instructions, 2.50%)</title><rect x="62.9568%" y="53" width="2.4967%" height="15" fill="rgb(220,39,43)" fg:x="32402" fg:w="1285"/><text x="63.2498%" y="63.50">$..</text></g><g><title>$loop/0 (1,321 instructions, 2.57%)</title><rect x="62.9568%" y="69" width="2.5667%" height="15" fill="rgb(229,68,48)" fg:x="32402" fg:w="1321"/><text x="63.2498%" y="79.50">$..</text></g><g><title>$k/9 (1,347 instructions, 2.62%)</title><rect x="62.9568%" y="85" width="2.6172%" height="15" fill="rgb(252,8,32)" fg:x="32402" fg:w="1347"/><text x="63.2498%" y="95.50">$..</text></g><g><title>$loop/0 (1,453 instructions, 2.82%)</title><rect x="62.9568%" y="101" width="2.8232%" height="15" fill="rgb(223,20,43)" fg:x="32402" fg:w="1453"/><text x="63.2498%" y="111.50">$l..</text></g><g><title>$k/9 (1,479 instructions, 2.87%)</title><rect x="62.9568%" y="117" width="2.8737%" height="15" fill="rgb(229,81,49)" fg:x="32402" fg:w="1479"/><text x="63.2498%" y="127.50">$k..</text></g><g><title>$loop/0 (1,585 instructions, 3.08%)</title><rect x="62.9568%" y="133" width="3.0796%" height="15" fill="rgb(236,28,36)" fg:x="32402" fg:w="1585"/><text x="63.2498%" y="143.50">$l..</text></g><g><title>$k/9 (1,611 instructions, 3.13%)</title><rect x="62.9568%" y="149" width="3.1302%" height="15" fill="rgb(249,185,26)" fg:x="32402" fg:w="1611"/><text x="63.2498%" y="159.50">$k..</text></g><g><title>$loop/0 (1,717 instructions, 3.34%)</title><rect x="62.9568%" y="165" width="3.3361%" height="15" fill="rgb(249,174,33)" fg:x="32402" fg:w="1717"/><text x="63.2498%" y="175.50">$l..</text></g><g><title>$k/9 (1,743 instructions, 3.39%)</title><rect x="62.9568%" y="181" width="3.3866%" height="15" fill="rgb(233,201,37)" fg:x="32402" fg:w="1743"/><text x="63.2498%" y="191.50">$k..</text></g><g><title>$loop/0 (1,849 instructions, 3.59%)</title><rect x="62.9568%" y="197" width="3.5926%" height="15" fill="rgb(221,78,26)" fg:x="32402" fg:w="1849"/><text x="63.2498%" y="207.50">$lo..</text></g><g><title>$k/9 (1,875 instructions, 3.64%)</title><rect x="62.9568%" y="213" width="3.6431%" height="15" fill="rgb(250,127,30)" fg:x="32402" fg:w="1875"/><text x="63.2498%" y="223.50">$k/9</text></g><g><title>$loop/0 (1,981 instructions, 3.85%)</title><rect x="62.9568%" y="229" width="3.8491%" height="15" fill="rgb(230,49,44)" fg:x="32402" fg:w="1981"/><text x="63.2498%" y="239.50">$lo..</text></g><g><title>$k/9 (2,007 instructions, 3.90%)</title><rect x="62.9568%" y="245" width="3.8996%" height="15" fill="rgb(229,67,23)" fg:x="32402" fg:w="2007"/><text x="63.2498%" y="255.50">$k/9</text></g><g><title>$loop/0 (2,113 instructions, 4.11%)</title><rect x="62.9568%" y="261" width="4.1055%" height="15" fill="rgb(249,83,47)" fg:x="32402" fg:w="2113"/><text x="63.2498%" y="271.50">$lo..</text></g><g><title>$k/9 (2,139 instructions, 4.16%)</title><rect x="62.9568%" y="277" width="4.1561%" height="15" fill="rgb(215,43,3)" fg:x="32402" fg:w="2139"/><text x="63.2498%" y="287.50">$k/9</text></g><g><title>$loop/0 (2,245 instructions, 4.36%)</title><rect x="62.9568%" y="293" width="4.3620%" height="15" fill="rgb(238,154,13)" fg:x="32402" fg:w="2245"/><text x="63.2498%" y="303.50">$loo..</text></g><g><title>$k/9 (2,271 instructions, 4.41%)</title><rect x="62.9568%" y="309" width="4.4125%" height="15" fill="rgb(219,56,2)" fg:x="32402" fg:w="2271"/><text x="63.2498%" y="319.50">$k/9</text></g><g><title>$loop/0 (2,377 instructions, 4.62%)</title><rect x="62.9568%" y="325" width="4.6185%" height="15" fill="rgb(233,0,4)" fg:x="32402" fg:w="2377"/><text x="63.2498%" y="335.50">$loo..</text></g><g><title>$k/9 (2,403 instructions, 4.67%)</title><rect x="62.9568%" y="341" width="4.6690%" height="15" fill="rgb(235,30,7)" fg:x="32402" fg:w="2403"/><text x="63.2498%" y="351.50">$k/9</text></g><g><title>$loop/0 (2,509 instructions, 4.87%)</title><rect x="62.9568%" y="357" width="4.8750%" height="15" fill="rgb(250,79,13)" fg:x="32402" fg:w="2509"/><text x="63.2498%" y="367.50">$loop..</text></g><g><title>$k/9 (2,535 instructions, 4.93%)</title><rect x="62.9568%" y="373" width="4.9255%" height="15" fill="rgb(211,146,34)" fg:x="32402" fg:w="2535"/><text x="63.2498%" y="383.50">$k/9</text></g><g><title>$loop/0 (13,177 instructions, 25.60%)</title><rect x="42.5574%" y="389" width="25.6028%" height="15" fill="rgb(228,22,38)" fg:x="21903" fg:w="13177"/><text x="42.8503%" y="399.50">$loop/0</text></g><g><title>anon_async.1 (15,532 instructions, 30.18%)</title><rect x="40.8242%" y="405" width="30.1786%" height="15" fill="rgb(235,168,5)" fg:x="21011" fg:w="15532"/><text x="41.1172%" y="415.50">anon_async.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="71.0028%" y="405" width="0.2098%" height="15" fill="rgb(221,155,16)" fg:x="36543" fg:w="108"/><text x="71.2957%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="71.2126%" y="405" width="0.0311%" height="15" fill="rgb(215,215,53)" fg:x="36651" fg:w="16"/><text x="71.5056%" y="415.50"></text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="78.8136%" y="405" width="0.0194%" height="15" fill="rgb(223,4,10)" fg:x="40563" fg:w="10"/><text x="79.1066%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="78.8330%" y="405" width="0.1088%" height="15" fill="rgb(234,103,6)" fg:x="40573" fg:w="56"/><text x="79.1260%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="78.9418%" y="405" width="0.1088%" height="15" fill="rgb(227,97,0)" fg:x="40629" fg:w="56"/><text x="79.2348%" y="415.50"></text></g><g><title>memcmp (238 instructions, 0.46%)</title><rect x="79.0507%" y="405" width="0.4624%" height="15" fill="rgb(234,150,53)" fg:x="40685" fg:w="238"/><text x="79.3436%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="79.5131%" y="405" width="0.1088%" height="15" fill="rgb(228,201,54)" fg:x="40923" fg:w="56"/><text x="79.8061%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="79.6219%" y="389" width="0.0971%" height="15" fill="rgb(222,22,37)" fg:x="40979" fg:w="50"/><text x="79.9149%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="79.7190%" y="389" width="0.1088%" height="15" fill="rgb(237,53,32)" fg:x="41029" fg:w="56"/><text x="80.0120%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="79.8279%" y="389" width="0.0971%" height="15" fill="rgb(233,25,53)" fg:x="41085" fg:w="50"/><text x="80.1208%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="79.9250%" y="389" width="0.1244%" height="15" fill="rgb(210,40,34)" fg:x="41135" fg:w="64"/><text x="80.2180%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h53f71f4a4e97da09 (12 instructions, 0.02%)</title><rect x="80.0494%" y="389" width="0.0233%" height="15" fill="rgb(241,220,44)" fg:x="41199" fg:w="12"/><text x="80.3423%" y="399.50"></text></g><g><title>parse_idl_header (340 instructions, 0.66%)</title><rect x="79.6219%" y="405" width="0.6606%" height="15" fill="rgb(235,28,35)" fg:x="40979" fg:w="340"/><text x="79.9149%" y="415.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="80.2825%" y="389" width="0.0117%" height="15" fill="rgb(210,56,17)" fg:x="41319" fg:w="6"/><text x="80.5755%" y="399.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="80.2825%" y="405" width="0.0291%" height="15" fill="rgb(224,130,29)" fg:x="41319" fg:w="15"/><text x="80.5755%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="80.3117%" y="405" width="0.0971%" height="15" fill="rgb(235,212,8)" fg:x="41334" fg:w="50"/><text x="80.6046%" y="415.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="80.4088%" y="405" width="0.1244%" height="15" fill="rgb(223,33,50)" fg:x="41384" fg:w="64"/><text x="80.7018%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="80.5332%" y="373" width="0.1088%" height="15" fill="rgb(219,149,13)" fg:x="41448" fg:w="56"/><text x="80.8261%" y="383.50"></text></g><g><title>memcpy (70 instructions, 0.14%)</title><rect x="80.6420%" y="373" width="0.1360%" height="15" fill="rgb(250,156,29)" fg:x="41504" fg:w="70"/><text x="80.9349%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="80.7780%" y="373" width="0.1088%" height="15" fill="rgb(216,193,19)" fg:x="41574" fg:w="56"/><text x="81.0709%" y="383.50"></text></g><g><title>$lambda.13 (1,285 instructions, 2.50%)</title><rect x="80.5332%" y="389" width="2.4967%" height="15" fill="rgb(216,135,14)" fg:x="41448" fg:w="1285"/><text x="80.8261%" y="399.50">$..</text></g><g><title>anon_async (1,299 instructions, 2.52%)</title><rect x="80.5332%" y="405" width="2.5239%" height="15" fill="rgb(241,47,5)" fg:x="41448" fg:w="1299"/><text x="80.8261%" y="415.50">a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="83.0571%" y="405" width="0.2098%" height="15" fill="rgb(233,42,35)" fg:x="42747" fg:w="108"/><text x="83.3501%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="83.2669%" y="405" width="0.0311%" height="15" fill="rgb(231,13,6)" fg:x="42855" fg:w="16"/><text x="83.5599%" y="415.50"></text></g><g><title>__motoko_async_helper (26,641 instructions, 51.76%)</title><rect x="39.1047%" y="421" width="51.7633%" height="15" fill="rgb(207,181,40)" fg:x="20126" fg:w="26641"/><text x="39.3976%" y="431.50">__motoko_async_helper</text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="90.8679%" y="405" width="0.0194%" height="15" fill="rgb(254,173,49)" fg:x="46767" fg:w="10"/><text x="91.1609%" y="415.50"></text></g><g><title>recall_continuation (49 instructions, 0.10%)</title><rect x="90.8874%" y="405" width="0.0952%" height="15" fill="rgb(221,1,38)" fg:x="46777" fg:w="49"/><text x="91.1803%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="90.9826%" y="405" width="0.1088%" height="15" fill="rgb(206,124,46)" fg:x="46826" fg:w="56"/><text x="91.2755%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.0914%" y="373" width="0.0971%" height="15" fill="rgb(249,21,11)" fg:x="46882" fg:w="50"/><text x="91.3843%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="91.1885%" y="373" width="0.1088%" height="15" fill="rgb(222,201,40)" fg:x="46932" fg:w="56"/><text x="91.4815%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.2973%" y="373" width="0.0971%" height="15" fill="rgb(235,61,29)" fg:x="46988" fg:w="50"/><text x="91.5903%" y="383.50"></text></g><g><title>parse_idl_header (245 instructions, 0.48%)</title><rect x="91.0914%" y="389" width="0.4760%" height="15" fill="rgb(219,207,3)" fg:x="46882" fg:w="245"/><text x="91.3843%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="91.5674%" y="373" width="0.0117%" height="15" fill="rgb(222,56,46)" fg:x="47127" fg:w="6"/><text x="91.8604%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="91.5674%" y="389" width="0.0291%" height="15" fill="rgb(239,76,54)" fg:x="47127" fg:w="15"/><text x="91.8604%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.5966%" y="389" width="0.0971%" height="15" fill="rgb(231,124,27)" fg:x="47142" fg:w="50"/><text x="91.8895%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 0.92%)</title><rect x="91.0914%" y="405" width="0.9210%" height="15" fill="rgb(249,195,6)" fg:x="46882" fg:w="474"/><text x="91.3843%" y="415.50"></text></g><g><title>fulfill (124 instructions, 0.24%)</title><rect x="92.0124%" y="389" width="0.2409%" height="15" fill="rgb(237,174,47)" fg:x="47356" fg:w="124"/><text x="92.3053%" y="399.50"></text></g><g><title>$lambda.20 (141 instructions, 0.27%)</title><rect x="92.0124%" y="405" width="0.2740%" height="15" fill="rgb(206,201,31)" fg:x="47356" fg:w="141"/><text x="92.3053%" y="415.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="92.2863%" y="405" width="0.2098%" height="15" fill="rgb(231,57,52)" fg:x="47497" fg:w="108"/><text x="92.5793%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="92.4962%" y="405" width="0.0311%" height="15" fill="rgb(248,177,22)" fg:x="47605" fg:w="16"/><text x="92.7891%" y="415.50"></text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="95.4340%" y="405" width="0.0194%" height="15" fill="rgb(215,211,37)" fg:x="49117" fg:w="10"/><text x="95.7269%" y="415.50"></text></g><g><title>recall_continuation (49 instructions, 0.10%)</title><rect x="95.4534%" y="405" width="0.0952%" height="15" fill="rgb(241,128,51)" fg:x="49127" fg:w="49"/><text x="95.7464%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="95.5486%" y="405" width="0.1088%" height="15" fill="rgb(227,165,31)" fg:x="49176" fg:w="56"/><text x="95.8416%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="95.6574%" y="373" width="0.0971%" height="15" fill="rgb(228,167,24)" fg:x="49232" fg:w="50"/><text x="95.9504%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h87fa1d046288d69e (56 instructions, 0.11%)</title><rect x="95.7546%" y="373" width="0.1088%" height="15" fill="rgb(228,143,12)" fg:x="49282" fg:w="56"/><text x="96.0475%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="95.8634%" y="373" width="0.0971%" height="15" fill="rgb(249,149,8)" fg:x="49338" fg:w="50"/><text x="96.1563%" y="383.50"></text></g><g><title>parse_idl_header (245 instructions, 0.48%)</title><rect x="95.6574%" y="389" width="0.4760%" height="15" fill="rgb(243,35,44)" fg:x="49232" fg:w="245"/><text x="95.9504%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="96.1334%" y="373" width="0.0117%" height="15" fill="rgb(246,89,9)" fg:x="49477" fg:w="6"/><text x="96.4264%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="96.1334%" y="389" width="0.0291%" height="15" fill="rgb(233,213,13)" fg:x="49477" fg:w="15"/><text x="96.4264%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="96.1626%" y="389" width="0.0971%" height="15" fill="rgb(233,141,41)" fg:x="49492" fg:w="50"/><text x="96.4556%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 0.92%)</title><rect x="95.6574%" y="405" width="0.9210%" height="15" fill="rgb(239,167,4)" fg:x="49232" fg:w="474"/><text x="95.9504%" y="415.50"></text></g><g><title>fulfill (124 instructions, 0.24%)</title><rect x="96.5784%" y="389" width="0.2409%" height="15" fill="rgb(209,217,16)" fg:x="49706" fg:w="124"/><text x="96.8714%" y="399.50"></text></g><g><title>$lambda.20 (141 instructions, 0.27%)</title><rect x="96.5784%" y="405" width="0.2740%" height="15" fill="rgb(219,88,35)" fg:x="49706" fg:w="141"/><text x="96.8714%" y="415.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="96.8524%" y="405" width="0.2098%" height="15" fill="rgb(220,193,23)" fg:x="49847" fg:w="108"/><text x="97.1453%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="97.0622%" y="405" width="0.0311%" height="15" fill="rgb(230,90,52)" fg:x="49955" fg:w="16"/><text x="97.3552%" y="415.50"></text></g><g><title>all (51,467 instructions, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="51467"/><text x="0.2930%" y="447.50"></text></g><g><title>@callback&lt;u&gt; (4,700 instructions, 9.13%)</title><rect x="90.8679%" y="421" width="9.1321%" height="15" fill="rgb(206,74,20)" fg:x="46767" fg:w="4700"/><text x="91.1609%" y="431.50">@callback&lt;u&gt;</text></g></svg></svg>