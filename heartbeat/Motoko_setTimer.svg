<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="486" onload="init(evt)" viewBox="0 0 1024 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.setTimer(0)</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="469.00"> </text><svg id="frames" x="10" width="1004" total_samples="52177"><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="0.0000%" y="405" width="0.0192%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="10"/><text x="0.2930%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="0.0192%" y="405" width="0.1073%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="56"/><text x="0.3121%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.1265%" y="373" width="0.0958%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="50"/><text x="0.4195%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="0.2223%" y="373" width="0.1073%" height="15" fill="rgb(235,213,38)" fg:x="116" fg:w="56"/><text x="0.5153%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.3296%" y="373" width="0.0958%" height="15" fill="rgb(237,122,38)" fg:x="172" fg:w="50"/><text x="0.6226%" y="383.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="0.4255%" y="373" width="0.1227%" height="15" fill="rgb(244,218,35)" fg:x="222" fg:w="64"/><text x="0.7184%" y="383.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.02%)</title><rect x="0.5481%" y="373" width="0.0230%" height="15" fill="rgb(240,68,47)" fg:x="286" fg:w="12"/><text x="0.8411%" y="383.50"></text></g><g><title>parse_idl_header (339 instructions, 0.65%)</title><rect x="0.1265%" y="389" width="0.6497%" height="15" fill="rgb(210,16,53)" fg:x="66" fg:w="339"/><text x="0.4195%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="0.7762%" y="373" width="0.0115%" height="15" fill="rgb(235,124,12)" fg:x="405" fg:w="6"/><text x="1.0692%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="0.7762%" y="389" width="0.0287%" height="15" fill="rgb(224,169,11)" fg:x="405" fg:w="15"/><text x="1.0692%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="0.8050%" y="389" width="0.0958%" height="15" fill="rgb(250,166,2)" fg:x="420" fg:w="50"/><text x="1.0979%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="0.9008%" y="389" width="0.1227%" height="15" fill="rgb(242,216,29)" fg:x="470" fg:w="64"/><text x="1.1937%" y="399.50"></text></g><g><title>@deserialize&lt;N&gt; (803 instructions, 1.54%)</title><rect x="0.1265%" y="405" width="1.5390%" height="15" fill="rgb(230,116,27)" fg:x="66" fg:w="803"/><text x="0.4195%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="1.6655%" y="405" width="0.0383%" height="15" fill="rgb(228,99,48)" fg:x="869" fg:w="20"/><text x="1.9585%" y="415.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.04%)</title><rect x="1.7038%" y="389" width="0.0383%" height="15" fill="rgb(253,11,6)" fg:x="889" fg:w="20"/><text x="1.9968%" y="399.50"></text></g><g><title>B_mul (29 instructions, 0.06%)</title><rect x="1.7421%" y="389" width="0.0556%" height="15" fill="rgb(247,143,39)" fg:x="909" fg:w="29"/><text x="2.0351%" y="399.50"></text></g><g><title>box_i64 (15 instructions, 0.03%)</title><rect x="1.7977%" y="389" width="0.0287%" height="15" fill="rgb(236,97,10)" fg:x="938" fg:w="15"/><text x="2.0907%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="1.8265%" y="389" width="0.0383%" height="15" fill="rgb(233,208,19)" fg:x="953" fg:w="20"/><text x="2.1194%" y="399.50"></text></g><g><title>B_add (27 instructions, 0.05%)</title><rect x="1.8648%" y="389" width="0.0517%" height="15" fill="rgb(216,164,2)" fg:x="973" fg:w="27"/><text x="2.1578%" y="399.50"></text></g><g><title>add&lt;Nat64&gt; (14 instructions, 0.03%)</title><rect x="1.9166%" y="389" width="0.0268%" height="15" fill="rgb(220,129,5)" fg:x="1000" fg:w="14"/><text x="2.2095%" y="399.50"></text></g><g><title>box_i64 (32 instructions, 0.06%)</title><rect x="1.9434%" y="389" width="0.0613%" height="15" fill="rgb(242,17,10)" fg:x="1014" fg:w="32"/><text x="2.2364%" y="399.50"></text></g><g><title>@prune (10 instructions, 0.02%)</title><rect x="2.0047%" y="389" width="0.0192%" height="15" fill="rgb(242,107,0)" fg:x="1046" fg:w="10"/><text x="2.2977%" y="399.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;5&gt; (20 instructions, 0.04%)</title><rect x="2.0239%" y="373" width="0.0383%" height="15" fill="rgb(251,28,31)" fg:x="1056" fg:w="20"/><text x="2.3168%" y="383.50"></text></g><g><title>alloc_size&lt;9&gt;_tag&lt;1&gt; (20 instructions, 0.04%)</title><rect x="2.0622%" y="373" width="0.0383%" height="15" fill="rgb(233,223,10)" fg:x="1076" fg:w="20"/><text x="2.3552%" y="383.50"></text></g><g><title>insert (104 instructions, 0.20%)</title><rect x="2.0239%" y="389" width="0.1993%" height="15" fill="rgb(215,21,27)" fg:x="1056" fg:w="104"/><text x="2.3168%" y="399.50"></text></g><g><title>opt_inject (23 instructions, 0.04%)</title><rect x="2.2232%" y="389" width="0.0441%" height="15" fill="rgb(232,23,21)" fg:x="1160" fg:w="23"/><text x="2.5162%" y="399.50"></text></g><g><title>opt_project (23 instructions, 0.04%)</title><rect x="2.2673%" y="373" width="0.0441%" height="15" fill="rgb(244,5,23)" fg:x="1183" fg:w="23"/><text x="2.5603%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="2.3114%" y="373" width="0.0326%" height="15" fill="rgb(226,81,46)" fg:x="1206" fg:w="17"/><text x="2.6043%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="2.3439%" y="373" width="0.0172%" height="15" fill="rgb(247,70,30)" fg:x="1223" fg:w="9"/><text x="2.6369%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="2.3612%" y="373" width="0.0326%" height="15" fill="rgb(212,68,19)" fg:x="1232" fg:w="17"/><text x="2.6542%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="2.3938%" y="373" width="0.0402%" height="15" fill="rgb(240,187,13)" fg:x="1249" fg:w="21"/><text x="2.6867%" y="383.50"></text></g><g><title>box_i64 (32 instructions, 0.06%)</title><rect x="2.4340%" y="373" width="0.0613%" height="15" fill="rgb(223,113,26)" fg:x="1270" fg:w="32"/><text x="2.7270%" y="383.50"></text></g><g><title>@nextExpiration (196 instructions, 0.38%)</title><rect x="2.2673%" y="389" width="0.3756%" height="15" fill="rgb(206,192,2)" fg:x="1183" fg:w="196"/><text x="2.5603%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="2.6429%" y="373" width="0.1073%" height="15" fill="rgb(241,108,4)" fg:x="1379" fg:w="56"/><text x="2.9359%" y="383.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="2.7503%" y="373" width="0.1380%" height="15" fill="rgb(247,173,49)" fg:x="1435" fg:w="72"/><text x="3.0432%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="2.8882%" y="373" width="0.1073%" height="15" fill="rgb(224,114,35)" fg:x="1507" fg:w="56"/><text x="3.1812%" y="383.50"></text></g><g><title>leb128_encode (11 instructions, 0.02%)</title><rect x="2.9956%" y="373" width="0.0211%" height="15" fill="rgb(245,159,27)" fg:x="1563" fg:w="11"/><text x="3.2885%" y="383.50"></text></g><g><title>reply_with_data (1,021 instructions, 1.96%)</title><rect x="3.0167%" y="373" width="1.9568%" height="15" fill="rgb(245,172,44)" fg:x="1574" fg:w="1021"/><text x="3.3096%" y="383.50"></text></g><g><title>$lambda.23 (1,382 instructions, 2.65%)</title><rect x="2.6429%" y="389" width="2.6487%" height="15" fill="rgb(236,23,11)" fg:x="1379" fg:w="1382"/><text x="2.9359%" y="399.50">$..</text></g><g><title>$lambda.4 (3,070 instructions, 5.88%)</title><rect x="1.7038%" y="405" width="5.8838%" height="15" fill="rgb(205,117,38)" fg:x="889" fg:w="3070"/><text x="1.9968%" y="415.50">$lambd..</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="7.5876%" y="405" width="0.2070%" height="15" fill="rgb(237,72,25)" fg:x="3959" fg:w="108"/><text x="7.8806%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="7.7946%" y="405" width="0.0307%" height="15" fill="rgb(244,70,9)" fg:x="4067" fg:w="16"/><text x="8.0876%" y="415.50"></text></g><g><title>setTimer (5,584 instructions, 10.70%)</title><rect x="0.0000%" y="421" width="10.7020%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="5584"/><text x="0.2930%" y="431.50">setTimer</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="10.7020%" y="389" width="0.0383%" height="15" fill="rgb(235,36,10)" fg:x="5584" fg:w="20"/><text x="10.9950%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="10.7404%" y="389" width="0.0383%" height="15" fill="rgb(251,123,47)" fg:x="5604" fg:w="20"/><text x="11.0333%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="10.7787%" y="389" width="0.0383%" height="15" fill="rgb(221,13,13)" fg:x="5624" fg:w="20"/><text x="11.0717%" y="399.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="10.8170%" y="389" width="0.0134%" height="15" fill="rgb(238,131,9)" fg:x="5644" fg:w="7"/><text x="11.1100%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="10.8304%" y="389" width="0.0383%" height="15" fill="rgb(211,50,8)" fg:x="5651" fg:w="20"/><text x="11.1234%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="10.8688%" y="389" width="0.0383%" height="15" fill="rgb(245,182,24)" fg:x="5671" fg:w="20"/><text x="11.1617%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="10.9071%" y="389" width="0.0383%" height="15" fill="rgb(242,14,37)" fg:x="5691" fg:w="20"/><text x="11.2001%" y="399.50"></text></g><g><title>@new_async (243 instructions, 0.47%)</title><rect x="10.7020%" y="405" width="0.4657%" height="15" fill="rgb(246,228,12)" fg:x="5584" fg:w="243"/><text x="10.9950%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="11.1678%" y="405" width="0.0383%" height="15" fill="rgb(213,55,15)" fg:x="5827" fg:w="20"/><text x="11.4607%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="11.2061%" y="405" width="0.0383%" height="15" fill="rgb(209,9,3)" fg:x="5847" fg:w="20"/><text x="11.4991%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="11.2444%" y="389" width="0.1073%" height="15" fill="rgb(230,59,30)" fg:x="5867" fg:w="56"/><text x="11.5374%" y="399.50"></text></g><g><title>canister_self (1,089 instructions, 2.09%)</title><rect x="11.2444%" y="405" width="2.0871%" height="15" fill="rgb(209,121,21)" fg:x="5867" fg:w="1089"/><text x="11.5374%" y="415.50">c..</text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="13.3315%" y="405" width="0.0537%" height="15" fill="rgb(220,109,13)" fg:x="6956" fg:w="28"/><text x="13.6245%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="13.3852%" y="389" width="0.1073%" height="15" fill="rgb(232,18,1)" fg:x="6984" fg:w="56"/><text x="13.6782%" y="399.50"></text></g><g><title>canister_self (1,089 instructions, 2.09%)</title><rect x="13.3852%" y="405" width="2.0871%" height="15" fill="rgb(215,41,42)" fg:x="6984" fg:w="1089"/><text x="13.6782%" y="415.50">c..</text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="15.4723%" y="405" width="0.0537%" height="15" fill="rgb(224,123,36)" fg:x="8073" fg:w="28"/><text x="15.7653%" y="415.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (20 instructions, 0.04%)</title><rect x="15.5260%" y="405" width="0.0383%" height="15" fill="rgb(240,125,3)" fg:x="8101" fg:w="20"/><text x="15.8190%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.11%)</title><rect x="15.5643%" y="389" width="0.1150%" height="15" fill="rgb(205,98,50)" fg:x="8121" fg:w="60"/><text x="15.8573%" y="399.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (9 instructions, 0.02%)</title><rect x="15.6793%" y="389" width="0.0172%" height="15" fill="rgb(205,185,37)" fg:x="8181" fg:w="9"/><text x="15.9723%" y="399.50"></text></g><g><title>remember_continuation (3,993 instructions, 7.65%)</title><rect x="15.5643%" y="405" width="7.6528%" height="15" fill="rgb(238,207,15)" fg:x="8121" fg:w="3993"/><text x="15.8573%" y="415.50">remember_..</text></g><g><title>box_i32 (11 instructions, 0.02%)</title><rect x="23.2171%" y="405" width="0.0211%" height="15" fill="rgb(213,199,42)" fg:x="12114" fg:w="11"/><text x="23.5101%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="23.2382%" y="389" width="0.1073%" height="15" fill="rgb(235,201,11)" fg:x="12125" fg:w="56"/><text x="23.5312%" y="399.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="23.3455%" y="389" width="0.1380%" height="15" fill="rgb(207,46,11)" fg:x="12181" fg:w="72"/><text x="23.6385%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="23.4835%" y="389" width="0.1073%" height="15" fill="rgb(241,35,35)" fg:x="12253" fg:w="56"/><text x="23.7765%" y="399.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.54%)</title><rect x="23.2382%" y="405" width="0.5386%" height="15" fill="rgb(243,32,47)" fg:x="12125" fg:w="281"/><text x="23.5312%" y="415.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="23.7768%" y="389" width="0.0134%" height="15" fill="rgb(247,202,23)" fg:x="12406" fg:w="7"/><text x="24.0697%" y="399.50"></text></g><g><title>@add_cycles (24 instructions, 0.05%)</title><rect x="23.7768%" y="405" width="0.0460%" height="15" fill="rgb(219,102,11)" fg:x="12406" fg:w="24"/><text x="24.0697%" y="415.50"></text></g><g><title>canister_global_timer (14,739 instructions, 28.25%)</title><rect x="10.7020%" y="421" width="28.2481%" height="15" fill="rgb(243,110,44)" fg:x="5584" fg:w="14739"/><text x="10.9950%" y="431.50">canister_global_timer</text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="38.9501%" y="405" width="0.0192%" height="15" fill="rgb(222,74,54)" fg:x="20323" fg:w="10"/><text x="39.2431%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="38.9693%" y="405" width="0.1073%" height="15" fill="rgb(216,99,12)" fg:x="20333" fg:w="56"/><text x="39.2622%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="39.0766%" y="405" width="0.1073%" height="15" fill="rgb(226,22,26)" fg:x="20389" fg:w="56"/><text x="39.3696%" y="415.50"></text></g><g><title>memcmp (238 instructions, 0.46%)</title><rect x="39.1839%" y="405" width="0.4561%" height="15" fill="rgb(217,163,10)" fg:x="20445" fg:w="238"/><text x="39.4769%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="39.6401%" y="405" width="0.1073%" height="15" fill="rgb(213,25,53)" fg:x="20683" fg:w="56"/><text x="39.9330%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="39.7474%" y="389" width="0.0958%" height="15" fill="rgb(252,105,26)" fg:x="20739" fg:w="50"/><text x="40.0404%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="39.8432%" y="389" width="0.1073%" height="15" fill="rgb(220,39,43)" fg:x="20789" fg:w="56"/><text x="40.1362%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="39.9506%" y="389" width="0.0958%" height="15" fill="rgb(229,68,48)" fg:x="20845" fg:w="50"/><text x="40.2435%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="40.0464%" y="389" width="0.1227%" height="15" fill="rgb(252,8,32)" fg:x="20895" fg:w="64"/><text x="40.3393%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.02%)</title><rect x="40.1690%" y="389" width="0.0230%" height="15" fill="rgb(223,20,43)" fg:x="20959" fg:w="12"/><text x="40.4620%" y="399.50"></text></g><g><title>parse_idl_header (339 instructions, 0.65%)</title><rect x="39.7474%" y="405" width="0.6497%" height="15" fill="rgb(229,81,49)" fg:x="20739" fg:w="339"/><text x="40.0404%" y="415.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="40.3971%" y="389" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="21078" fg:w="6"/><text x="40.6901%" y="399.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="40.3971%" y="405" width="0.0287%" height="15" fill="rgb(249,185,26)" fg:x="21078" fg:w="15"/><text x="40.6901%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="40.4259%" y="405" width="0.0958%" height="15" fill="rgb(249,174,33)" fg:x="21093" fg:w="50"/><text x="40.7188%" y="415.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="40.5217%" y="405" width="0.1227%" height="15" fill="rgb(233,201,37)" fg:x="21143" fg:w="64"/><text x="40.8147%" y="415.50"></text></g><g><title>box_i32 (11 instructions, 0.02%)</title><rect x="40.6443%" y="405" width="0.0211%" height="15" fill="rgb(221,78,26)" fg:x="21207" fg:w="11"/><text x="40.9373%" y="415.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.6654%" y="389" width="0.0383%" height="15" fill="rgb(250,127,30)" fg:x="21218" fg:w="20"/><text x="40.9584%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.7038%" y="389" width="0.0383%" height="15" fill="rgb(230,49,44)" fg:x="21238" fg:w="20"/><text x="40.9967%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.7421%" y="389" width="0.0383%" height="15" fill="rgb(229,67,23)" fg:x="21258" fg:w="20"/><text x="41.0351%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.7804%" y="389" width="0.0383%" height="15" fill="rgb(249,83,47)" fg:x="21278" fg:w="20"/><text x="41.0734%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.8188%" y="389" width="0.0383%" height="15" fill="rgb(215,43,3)" fg:x="21298" fg:w="20"/><text x="41.1117%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="40.8571%" y="389" width="0.0383%" height="15" fill="rgb(238,154,13)" fg:x="21318" fg:w="20"/><text x="41.1501%" y="399.50"></text></g><g><title>box_i64 (32 instructions, 0.06%)</title><rect x="40.8954%" y="389" width="0.0613%" height="15" fill="rgb(219,56,2)" fg:x="21338" fg:w="32"/><text x="41.1884%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.11%)</title><rect x="40.9567%" y="373" width="0.1150%" height="15" fill="rgb(233,0,4)" fg:x="21370" fg:w="60"/><text x="41.2497%" y="383.50"></text></g><g><title>Array_init (229 instructions, 0.44%)</title><rect x="40.9567%" y="389" width="0.4389%" height="15" fill="rgb(235,30,7)" fg:x="21370" fg:w="229"/><text x="41.2497%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="41.3956%" y="389" width="0.0383%" height="15" fill="rgb(250,79,13)" fg:x="21599" fg:w="20"/><text x="41.6886%" y="399.50"></text></g><g><title>opt_project (23 instructions, 0.04%)</title><rect x="41.4340%" y="373" width="0.0441%" height="15" fill="rgb(211,146,34)" fg:x="21619" fg:w="23"/><text x="41.7269%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="41.4780%" y="373" width="0.0326%" height="15" fill="rgb(228,22,38)" fg:x="21642" fg:w="17"/><text x="41.7710%" y="383.50"></text></g><g><title>gatherExpired (21 instructions, 0.04%)</title><rect x="41.5106%" y="373" width="0.0402%" height="15" fill="rgb(235,168,5)" fg:x="21659" fg:w="21"/><text x="41.8036%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.5509%" y="373" width="0.0326%" height="15" fill="rgb(221,155,16)" fg:x="21680" fg:w="17"/><text x="41.8438%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="41.5835%" y="373" width="0.0402%" height="15" fill="rgb(215,215,53)" fg:x="21697" fg:w="21"/><text x="41.8764%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.6237%" y="373" width="0.0326%" height="15" fill="rgb(223,4,10)" fg:x="21718" fg:w="17"/><text x="41.9167%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="41.6563%" y="373" width="0.0402%" height="15" fill="rgb(234,103,6)" fg:x="21735" fg:w="21"/><text x="41.9493%" y="383.50"></text></g><g><title>B_lt (12 instructions, 0.02%)</title><rect x="41.6965%" y="373" width="0.0230%" height="15" fill="rgb(227,97,0)" fg:x="21756" fg:w="12"/><text x="41.9895%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="41.7195%" y="373" width="0.0402%" height="15" fill="rgb(234,150,53)" fg:x="21768" fg:w="21"/><text x="42.0125%" y="383.50"></text></g><g><title>obj_idx&lt;1&gt; (17 instructions, 0.03%)</title><rect x="41.7598%" y="373" width="0.0326%" height="15" fill="rgb(228,201,54)" fg:x="21789" fg:w="17"/><text x="42.0527%" y="383.50"></text></g><g><title>opt_inject (23 instructions, 0.04%)</title><rect x="41.7924%" y="373" width="0.0441%" height="15" fill="rgb(222,22,37)" fg:x="21806" fg:w="23"/><text x="42.0853%" y="383.50"></text></g><g><title>obj_idx&lt;5&gt; (17 instructions, 0.03%)</title><rect x="41.8364%" y="373" width="0.0326%" height="15" fill="rgb(237,53,32)" fg:x="21829" fg:w="17"/><text x="42.1294%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="41.8690%" y="373" width="0.0326%" height="15" fill="rgb(233,25,53)" fg:x="21846" fg:w="17"/><text x="42.1620%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="41.9016%" y="373" width="0.0402%" height="15" fill="rgb(210,40,34)" fg:x="21863" fg:w="21"/><text x="42.1946%" y="383.50"></text></g><g><title>B_add (27 instructions, 0.05%)</title><rect x="41.9419%" y="373" width="0.0517%" height="15" fill="rgb(241,220,44)" fg:x="21884" fg:w="27"/><text x="42.2348%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (17 instructions, 0.03%)</title><rect x="41.9936%" y="373" width="0.0326%" height="15" fill="rgb(235,28,35)" fg:x="21911" fg:w="17"/><text x="42.2866%" y="383.50"></text></g><g><title>gatherExpired (21 instructions, 0.04%)</title><rect x="42.0262%" y="373" width="0.0402%" height="15" fill="rgb(210,56,17)" fg:x="21928" fg:w="21"/><text x="42.3191%" y="383.50"></text></g><g><title>gatherExpired (541 instructions, 1.04%)</title><rect x="41.4340%" y="389" width="1.0369%" height="15" fill="rgb(224,130,29)" fg:x="21619" fg:w="541"/><text x="41.7269%" y="399.50"></text></g><g><title>opt_project (23 instructions, 0.04%)</title><rect x="42.4708%" y="373" width="0.0441%" height="15" fill="rgb(235,212,8)" fg:x="22160" fg:w="23"/><text x="42.7638%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (17 instructions, 0.03%)</title><rect x="42.5149%" y="373" width="0.0326%" height="15" fill="rgb(223,33,50)" fg:x="22183" fg:w="17"/><text x="42.8079%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="42.5475%" y="373" width="0.0172%" height="15" fill="rgb(219,149,13)" fg:x="22200" fg:w="9"/><text x="42.8405%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (17 instructions, 0.03%)</title><rect x="42.5647%" y="373" width="0.0326%" height="15" fill="rgb(250,156,29)" fg:x="22209" fg:w="17"/><text x="42.8577%" y="383.50"></text></g><g><title>Array.idx_bigint (21 instructions, 0.04%)</title><rect x="42.5973%" y="373" width="0.0402%" height="15" fill="rgb(216,193,19)" fg:x="22226" fg:w="21"/><text x="42.8903%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (17 instructions, 0.03%)</title><rect x="42.6376%" y="373" width="0.0326%" height="15" fill="rgb(216,135,14)" fg:x="22247" fg:w="17"/><text x="42.9305%" y="383.50"></text></g><g><title>@nextExpiration (9 instructions, 0.02%)</title><rect x="42.6701%" y="373" width="0.0172%" height="15" fill="rgb(241,47,5)" fg:x="22264" fg:w="9"/><text x="42.9631%" y="383.50"></text></g><g><title>box_i64 (15 instructions, 0.03%)</title><rect x="42.6874%" y="373" width="0.0287%" height="15" fill="rgb(233,42,35)" fg:x="22273" fg:w="15"/><text x="42.9804%" y="383.50"></text></g><g><title>@nextExpiration (226 instructions, 0.43%)</title><rect x="42.4708%" y="389" width="0.4331%" height="15" fill="rgb(231,13,6)" fg:x="22160" fg:w="226"/><text x="42.7638%" y="399.50"></text></g><g><title>box_i64 (15 instructions, 0.03%)</title><rect x="42.9040%" y="389" width="0.0287%" height="15" fill="rgb(207,181,40)" fg:x="22386" fg:w="15"/><text x="43.1969%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="42.9327%" y="389" width="0.0383%" height="15" fill="rgb(254,173,49)" fg:x="22401" fg:w="20"/><text x="43.2257%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="42.9710%" y="389" width="0.0383%" height="15" fill="rgb(221,1,38)" fg:x="22421" fg:w="20"/><text x="43.2640%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.0094%" y="389" width="0.0383%" height="15" fill="rgb(206,124,46)" fg:x="22441" fg:w="20"/><text x="43.3023%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.0477%" y="389" width="0.0383%" height="15" fill="rgb(249,21,11)" fg:x="22461" fg:w="20"/><text x="43.3407%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.0860%" y="373" width="0.0383%" height="15" fill="rgb(222,201,40)" fg:x="22481" fg:w="20"/><text x="43.3790%" y="383.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.1244%" y="373" width="0.0383%" height="15" fill="rgb(235,61,29)" fg:x="22501" fg:w="20"/><text x="43.4173%" y="383.50"></text></g><g><title>opt_project (23 instructions, 0.04%)</title><rect x="43.1627%" y="373" width="0.0441%" height="15" fill="rgb(219,207,3)" fg:x="22521" fg:w="23"/><text x="43.4557%" y="383.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.2068%" y="341" width="0.0383%" height="15" fill="rgb(222,56,46)" fg:x="22544" fg:w="20"/><text x="43.4997%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.2451%" y="341" width="0.0383%" height="15" fill="rgb(239,76,54)" fg:x="22564" fg:w="20"/><text x="43.5381%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="43.2834%" y="341" width="0.0383%" height="15" fill="rgb(231,124,27)" fg:x="22584" fg:w="20"/><text x="43.5764%" y="351.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="43.3218%" y="341" width="0.0134%" height="15" fill="rgb(249,195,6)" fg:x="22604" fg:w="7"/><text x="43.6147%" y="351.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.3352%" y="341" width="0.0383%" height="15" fill="rgb(237,174,47)" fg:x="22611" fg:w="20"/><text x="43.6282%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.3735%" y="341" width="0.0383%" height="15" fill="rgb(206,201,31)" fg:x="22631" fg:w="20"/><text x="43.6665%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.4118%" y="341" width="0.0383%" height="15" fill="rgb(231,57,52)" fg:x="22651" fg:w="20"/><text x="43.7048%" y="351.50"></text></g><g><title>@new_async (243 instructions, 0.47%)</title><rect x="43.2068%" y="357" width="0.4657%" height="15" fill="rgb(248,177,22)" fg:x="22544" fg:w="243"/><text x="43.4997%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.6725%" y="357" width="0.0383%" height="15" fill="rgb(215,211,37)" fg:x="22787" fg:w="20"/><text x="43.9655%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="43.7108%" y="357" width="0.0383%" height="15" fill="rgb(241,128,51)" fg:x="22807" fg:w="20"/><text x="44.0038%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="43.7492%" y="341" width="0.1073%" height="15" fill="rgb(227,165,31)" fg:x="22827" fg:w="56"/><text x="44.0421%" y="351.50"></text></g><g><title>canister_self (1,089 instructions, 2.09%)</title><rect x="43.7492%" y="357" width="2.0871%" height="15" fill="rgb(228,167,24)" fg:x="22827" fg:w="1089"/><text x="44.0421%" y="367.50">c..</text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="45.8363%" y="357" width="0.0537%" height="15" fill="rgb(228,143,12)" fg:x="23916" fg:w="28"/><text x="46.1293%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="45.8900%" y="341" width="0.1073%" height="15" fill="rgb(249,149,8)" fg:x="23944" fg:w="56"/><text x="46.1829%" y="351.50"></text></g><g><title>canister_self (1,089 instructions, 2.09%)</title><rect x="45.8900%" y="357" width="2.0871%" height="15" fill="rgb(243,35,44)" fg:x="23944" fg:w="1089"/><text x="46.1829%" y="367.50">c..</text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="47.9771%" y="357" width="0.0537%" height="15" fill="rgb(246,89,9)" fg:x="25033" fg:w="28"/><text x="48.2700%" y="367.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (20 instructions, 0.04%)</title><rect x="48.0307%" y="357" width="0.0383%" height="15" fill="rgb(233,213,13)" fg:x="25061" fg:w="20"/><text x="48.3237%" y="367.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (9 instructions, 0.02%)</title><rect x="48.0691%" y="341" width="0.0172%" height="15" fill="rgb(233,141,41)" fg:x="25081" fg:w="9"/><text x="48.3620%" y="351.50"></text></g><g><title>remember_continuation (68 instructions, 0.13%)</title><rect x="48.0691%" y="357" width="0.1303%" height="15" fill="rgb(239,167,4)" fg:x="25081" fg:w="68"/><text x="48.3620%" y="367.50"></text></g><g><title>box_i32 (11 instructions, 0.02%)</title><rect x="48.1994%" y="357" width="0.0211%" height="15" fill="rgb(209,217,16)" fg:x="25149" fg:w="11"/><text x="48.4924%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="48.2205%" y="341" width="0.1073%" height="15" fill="rgb(219,88,35)" fg:x="25160" fg:w="56"/><text x="48.5134%" y="351.50"></text></g><g><title>memcpy (72 instructions, 0.14%)</title><rect x="48.3278%" y="341" width="0.1380%" height="15" fill="rgb(220,193,23)" fg:x="25216" fg:w="72"/><text x="48.6208%" y="351.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="48.4658%" y="341" width="0.1073%" height="15" fill="rgb(230,90,52)" fg:x="25288" fg:w="56"/><text x="48.7588%" y="351.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 0.54%)</title><rect x="48.2205%" y="357" width="0.5386%" height="15" fill="rgb(252,106,19)" fg:x="25160" fg:w="281"/><text x="48.5134%" y="367.50"></text></g><g><title>B_eq (7 instructions, 0.01%)</title><rect x="48.7590%" y="341" width="0.0134%" height="15" fill="rgb(206,74,20)" fg:x="25441" fg:w="7"/><text x="49.0520%" y="351.50"></text></g><g><title>@add_cycles (24 instructions, 0.05%)</title><rect x="48.7590%" y="357" width="0.0460%" height="15" fill="rgb(230,138,44)" fg:x="25441" fg:w="24"/><text x="49.0520%" y="367.50"></text></g><g><title>anon-func-5.34 (10,604 instructions, 20.32%)</title><rect x="43.2068%" y="373" width="20.3231%" height="15" fill="rgb(235,182,43)" fg:x="22544" fg:w="10604"/><text x="43.4997%" y="383.50">anon-func-5.34</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.5299%" y="341" width="0.0383%" height="15" fill="rgb(242,16,51)" fg:x="33148" fg:w="20"/><text x="63.8229%" y="351.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.5682%" y="341" width="0.0383%" height="15" fill="rgb(248,9,4)" fg:x="33168" fg:w="20"/><text x="63.8612%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.6066%" y="309" width="0.0383%" height="15" fill="rgb(210,31,22)" fg:x="33188" fg:w="20"/><text x="63.8995%" y="319.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.6449%" y="309" width="0.0383%" height="15" fill="rgb(239,54,39)" fg:x="33208" fg:w="20"/><text x="63.9379%" y="319.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.6832%" y="277" width="0.0383%" height="15" fill="rgb(230,99,41)" fg:x="33228" fg:w="20"/><text x="63.9762%" y="287.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.7216%" y="277" width="0.0383%" height="15" fill="rgb(253,106,12)" fg:x="33248" fg:w="20"/><text x="64.0145%" y="287.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.7599%" y="245" width="0.0383%" height="15" fill="rgb(213,46,41)" fg:x="33268" fg:w="20"/><text x="64.0529%" y="255.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.7982%" y="245" width="0.0383%" height="15" fill="rgb(215,133,35)" fg:x="33288" fg:w="20"/><text x="64.0912%" y="255.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.8366%" y="213" width="0.0383%" height="15" fill="rgb(213,28,5)" fg:x="33308" fg:w="20"/><text x="64.1295%" y="223.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.8749%" y="213" width="0.0383%" height="15" fill="rgb(215,77,49)" fg:x="33328" fg:w="20"/><text x="64.1679%" y="223.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.9132%" y="181" width="0.0383%" height="15" fill="rgb(248,100,22)" fg:x="33348" fg:w="20"/><text x="64.2062%" y="191.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="63.9515%" y="181" width="0.0383%" height="15" fill="rgb(208,67,9)" fg:x="33368" fg:w="20"/><text x="64.2445%" y="191.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="63.9899%" y="149" width="0.0383%" height="15" fill="rgb(219,133,21)" fg:x="33388" fg:w="20"/><text x="64.2828%" y="159.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="64.0282%" y="149" width="0.0383%" height="15" fill="rgb(246,46,29)" fg:x="33408" fg:w="20"/><text x="64.3212%" y="159.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="64.0665%" y="117" width="0.0383%" height="15" fill="rgb(246,185,52)" fg:x="33428" fg:w="20"/><text x="64.3595%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="64.1049%" y="117" width="0.0383%" height="15" fill="rgb(252,136,11)" fg:x="33448" fg:w="20"/><text x="64.3978%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.04%)</title><rect x="64.1432%" y="85" width="0.0383%" height="15" fill="rgb(219,138,53)" fg:x="33468" fg:w="20"/><text x="64.4362%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (20 instructions, 0.04%)</title><rect x="64.1815%" y="85" width="0.0383%" height="15" fill="rgb(211,51,23)" fg:x="33488" fg:w="20"/><text x="64.4745%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="64.2199%" y="37" width="0.1073%" height="15" fill="rgb(247,221,28)" fg:x="33508" fg:w="56"/><text x="64.5128%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.13%)</title><rect x="64.3272%" y="37" width="0.1342%" height="15" fill="rgb(251,222,45)" fg:x="33564" fg:w="70"/><text x="64.6202%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="64.4614%" y="37" width="0.1073%" height="15" fill="rgb(217,162,53)" fg:x="33634" fg:w="56"/><text x="64.7543%" y="47.50"></text></g><g><title>reply_with_data (1,019 instructions, 1.95%)</title><rect x="64.5687%" y="37" width="1.9530%" height="15" fill="rgb(229,93,14)" fg:x="33690" fg:w="1019"/><text x="64.8616%" y="47.50"></text></g><g><title>$lambda.19 (1,293 instructions, 2.48%)</title><rect x="64.2199%" y="53" width="2.4781%" height="15" fill="rgb(209,67,49)" fg:x="33508" fg:w="1293"/><text x="64.5128%" y="63.50">$..</text></g><g><title>$loop/0 (1,329 instructions, 2.55%)</title><rect x="64.2199%" y="69" width="2.5471%" height="15" fill="rgb(213,87,29)" fg:x="33508" fg:w="1329"/><text x="64.5128%" y="79.50">$..</text></g><g><title>$k/9 (1,355 instructions, 2.60%)</title><rect x="64.2199%" y="85" width="2.5969%" height="15" fill="rgb(205,151,52)" fg:x="33508" fg:w="1355"/><text x="64.5128%" y="95.50">$..</text></g><g><title>$loop/0 (1,477 instructions, 2.83%)</title><rect x="64.1432%" y="101" width="2.8307%" height="15" fill="rgb(253,215,39)" fg:x="33468" fg:w="1477"/><text x="64.4362%" y="111.50">$l..</text></g><g><title>$k/9 (1,503 instructions, 2.88%)</title><rect x="64.1432%" y="117" width="2.8806%" height="15" fill="rgb(221,220,41)" fg:x="33468" fg:w="1503"/><text x="64.4362%" y="127.50">$k..</text></g><g><title>$loop/0 (1,625 instructions, 3.11%)</title><rect x="64.0665%" y="133" width="3.1144%" height="15" fill="rgb(218,133,21)" fg:x="33428" fg:w="1625"/><text x="64.3595%" y="143.50">$l..</text></g><g><title>$k/9 (1,651 instructions, 3.16%)</title><rect x="64.0665%" y="149" width="3.1642%" height="15" fill="rgb(221,193,43)" fg:x="33428" fg:w="1651"/><text x="64.3595%" y="159.50">$k..</text></g><g><title>$loop/0 (1,773 instructions, 3.40%)</title><rect x="63.9899%" y="165" width="3.3980%" height="15" fill="rgb(240,128,52)" fg:x="33388" fg:w="1773"/><text x="64.2828%" y="175.50">$l..</text></g><g><title>$k/9 (1,799 instructions, 3.45%)</title><rect x="63.9899%" y="181" width="3.4479%" height="15" fill="rgb(253,114,12)" fg:x="33388" fg:w="1799"/><text x="64.2828%" y="191.50">$k..</text></g><g><title>$loop/0 (1,921 instructions, 3.68%)</title><rect x="63.9132%" y="197" width="3.6817%" height="15" fill="rgb(215,223,47)" fg:x="33348" fg:w="1921"/><text x="64.2062%" y="207.50">$lo..</text></g><g><title>$k/9 (1,947 instructions, 3.73%)</title><rect x="63.9132%" y="213" width="3.7315%" height="15" fill="rgb(248,225,23)" fg:x="33348" fg:w="1947"/><text x="64.2062%" y="223.50">$k/9</text></g><g><title>$loop/0 (2,069 instructions, 3.97%)</title><rect x="63.8366%" y="229" width="3.9653%" height="15" fill="rgb(250,108,0)" fg:x="33308" fg:w="2069"/><text x="64.1295%" y="239.50">$lo..</text></g><g><title>$k/9 (2,095 instructions, 4.02%)</title><rect x="63.8366%" y="245" width="4.0152%" height="15" fill="rgb(228,208,7)" fg:x="33308" fg:w="2095"/><text x="64.1295%" y="255.50">$k/9</text></g><g><title>$loop/0 (2,217 instructions, 4.25%)</title><rect x="63.7599%" y="261" width="4.2490%" height="15" fill="rgb(244,45,10)" fg:x="33268" fg:w="2217"/><text x="64.0529%" y="271.50">$loo..</text></g><g><title>$k/9 (2,243 instructions, 4.30%)</title><rect x="63.7599%" y="277" width="4.2988%" height="15" fill="rgb(207,125,25)" fg:x="33268" fg:w="2243"/><text x="64.0529%" y="287.50">$k/9</text></g><g><title>$loop/0 (2,365 instructions, 4.53%)</title><rect x="63.6832%" y="293" width="4.5326%" height="15" fill="rgb(210,195,18)" fg:x="33228" fg:w="2365"/><text x="63.9762%" y="303.50">$loo..</text></g><g><title>$k/9 (2,391 instructions, 4.58%)</title><rect x="63.6832%" y="309" width="4.5825%" height="15" fill="rgb(249,80,12)" fg:x="33228" fg:w="2391"/><text x="63.9762%" y="319.50">$k/9</text></g><g><title>$loop/0 (2,513 instructions, 4.82%)</title><rect x="63.6066%" y="325" width="4.8163%" height="15" fill="rgb(221,65,9)" fg:x="33188" fg:w="2513"/><text x="63.8995%" y="335.50">$loo..</text></g><g><title>$k/9 (2,539 instructions, 4.87%)</title><rect x="63.6066%" y="341" width="4.8661%" height="15" fill="rgb(235,49,36)" fg:x="33188" fg:w="2539"/><text x="63.8995%" y="351.50">$k/9</text></g><g><title>$loop/0 (2,661 instructions, 5.10%)</title><rect x="63.5299%" y="357" width="5.0999%" height="15" fill="rgb(225,32,20)" fg:x="33148" fg:w="2661"/><text x="63.8229%" y="367.50">$loop..</text></g><g><title>$k/9 (2,687 instructions, 5.15%)</title><rect x="63.5299%" y="373" width="5.1498%" height="15" fill="rgb(215,141,46)" fg:x="33148" fg:w="2687"/><text x="63.8229%" y="383.50">$k/9</text></g><g><title>$loop/0 (13,456 instructions, 25.79%)</title><rect x="43.0860%" y="389" width="25.7891%" height="15" fill="rgb(250,160,47)" fg:x="22481" fg:w="13456"/><text x="43.3790%" y="399.50">$loop/0</text></g><g><title>anon_async.1 (16,007 instructions, 30.68%)</title><rect x="40.6654%" y="405" width="30.6783%" height="15" fill="rgb(216,222,40)" fg:x="21218" fg:w="16007"/><text x="40.9584%" y="415.50">anon_async.1</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="71.3437%" y="405" width="0.2070%" height="15" fill="rgb(234,217,39)" fg:x="37225" fg:w="108"/><text x="71.6367%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="71.5507%" y="405" width="0.0307%" height="15" fill="rgb(207,178,40)" fg:x="37333" fg:w="16"/><text x="71.8437%" y="415.50"></text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="79.0367%" y="405" width="0.0192%" height="15" fill="rgb(221,136,13)" fg:x="41239" fg:w="10"/><text x="79.3297%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="79.0559%" y="405" width="0.1073%" height="15" fill="rgb(249,199,10)" fg:x="41249" fg:w="56"/><text x="79.3489%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="79.1632%" y="405" width="0.1073%" height="15" fill="rgb(249,222,13)" fg:x="41305" fg:w="56"/><text x="79.4562%" y="415.50"></text></g><g><title>memcmp (238 instructions, 0.46%)</title><rect x="79.2706%" y="405" width="0.4561%" height="15" fill="rgb(244,185,38)" fg:x="41361" fg:w="238"/><text x="79.5635%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="79.7267%" y="405" width="0.1073%" height="15" fill="rgb(236,202,9)" fg:x="41599" fg:w="56"/><text x="80.0197%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="79.8340%" y="389" width="0.0958%" height="15" fill="rgb(250,229,37)" fg:x="41655" fg:w="50"/><text x="80.1270%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="79.9299%" y="389" width="0.1073%" height="15" fill="rgb(206,174,23)" fg:x="41705" fg:w="56"/><text x="80.2228%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="80.0372%" y="389" width="0.0958%" height="15" fill="rgb(211,33,43)" fg:x="41761" fg:w="50"/><text x="80.3301%" y="399.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="80.1330%" y="389" width="0.1227%" height="15" fill="rgb(245,58,50)" fg:x="41811" fg:w="64"/><text x="80.4260%" y="399.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.02%)</title><rect x="80.2557%" y="389" width="0.0230%" height="15" fill="rgb(244,68,36)" fg:x="41875" fg:w="12"/><text x="80.5486%" y="399.50"></text></g><g><title>parse_idl_header (339 instructions, 0.65%)</title><rect x="79.8340%" y="405" width="0.6497%" height="15" fill="rgb(232,229,15)" fg:x="41655" fg:w="339"/><text x="80.1270%" y="415.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="80.4837%" y="389" width="0.0115%" height="15" fill="rgb(254,30,23)" fg:x="41994" fg:w="6"/><text x="80.7767%" y="399.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="80.4837%" y="405" width="0.0287%" height="15" fill="rgb(235,160,14)" fg:x="41994" fg:w="15"/><text x="80.7767%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="80.5125%" y="405" width="0.0958%" height="15" fill="rgb(212,155,44)" fg:x="42009" fg:w="50"/><text x="80.8055%" y="415.50"></text></g><g><title>sleb128_decode (64 instructions, 0.12%)</title><rect x="80.6083%" y="405" width="0.1227%" height="15" fill="rgb(226,2,50)" fg:x="42059" fg:w="64"/><text x="80.9013%" y="415.50"></text></g><g><title>box_i32 (11 instructions, 0.02%)</title><rect x="80.7310%" y="405" width="0.0211%" height="15" fill="rgb(234,177,6)" fg:x="42123" fg:w="11"/><text x="81.0239%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="80.7521%" y="373" width="0.1073%" height="15" fill="rgb(217,24,9)" fg:x="42134" fg:w="56"/><text x="81.0450%" y="383.50"></text></g><g><title>memcpy (70 instructions, 0.13%)</title><rect x="80.8594%" y="373" width="0.1342%" height="15" fill="rgb(220,13,46)" fg:x="42190" fg:w="70"/><text x="81.1524%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="80.9935%" y="373" width="0.1073%" height="15" fill="rgb(239,221,27)" fg:x="42260" fg:w="56"/><text x="81.2865%" y="383.50"></text></g><g><title>reply_with_data (1,019 instructions, 1.95%)</title><rect x="81.1009%" y="373" width="1.9530%" height="15" fill="rgb(222,198,25)" fg:x="42316" fg:w="1019"/><text x="81.3938%" y="383.50"></text></g><g><title>$lambda.19 (1,293 instructions, 2.48%)</title><rect x="80.7521%" y="389" width="2.4781%" height="15" fill="rgb(211,99,13)" fg:x="42134" fg:w="1293"/><text x="81.0450%" y="399.50">$..</text></g><g><title>anon_async (1,307 instructions, 2.50%)</title><rect x="80.7521%" y="405" width="2.5049%" height="15" fill="rgb(232,111,31)" fg:x="42134" fg:w="1307"/><text x="81.0450%" y="415.50">a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="83.2570%" y="405" width="0.2070%" height="15" fill="rgb(245,82,37)" fg:x="43441" fg:w="108"/><text x="83.5500%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="83.4640%" y="405" width="0.0307%" height="15" fill="rgb(227,149,46)" fg:x="43549" fg:w="16"/><text x="83.7569%" y="415.50"></text></g><g><title>__motoko_async_helper (27,132 instructions, 52.00%)</title><rect x="38.9501%" y="421" width="51.9999%" height="15" fill="rgb(218,36,50)" fg:x="20323" fg:w="27132"/><text x="39.2431%" y="431.50">__motoko_async_helper</text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="90.9500%" y="405" width="0.0192%" height="15" fill="rgb(226,80,48)" fg:x="47455" fg:w="10"/><text x="91.2430%" y="415.50"></text></g><g><title>recall_continuation (49 instructions, 0.09%)</title><rect x="90.9692%" y="405" width="0.0939%" height="15" fill="rgb(238,224,15)" fg:x="47465" fg:w="49"/><text x="91.2622%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="91.0631%" y="405" width="0.1073%" height="15" fill="rgb(241,136,10)" fg:x="47514" fg:w="56"/><text x="91.3561%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.1704%" y="373" width="0.0958%" height="15" fill="rgb(208,32,45)" fg:x="47570" fg:w="50"/><text x="91.4634%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="91.2663%" y="373" width="0.1073%" height="15" fill="rgb(207,135,9)" fg:x="47620" fg:w="56"/><text x="91.5592%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.3736%" y="373" width="0.0958%" height="15" fill="rgb(206,86,44)" fg:x="47676" fg:w="50"/><text x="91.6666%" y="383.50"></text></g><g><title>parse_idl_header (245 instructions, 0.47%)</title><rect x="91.1704%" y="389" width="0.4696%" height="15" fill="rgb(245,177,15)" fg:x="47570" fg:w="245"/><text x="91.4634%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="91.6400%" y="373" width="0.0115%" height="15" fill="rgb(206,64,50)" fg:x="47815" fg:w="6"/><text x="91.9330%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="91.6400%" y="389" width="0.0287%" height="15" fill="rgb(234,36,40)" fg:x="47815" fg:w="15"/><text x="91.9330%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="91.6687%" y="389" width="0.0958%" height="15" fill="rgb(213,64,8)" fg:x="47830" fg:w="50"/><text x="91.9617%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 0.91%)</title><rect x="91.1704%" y="405" width="0.9084%" height="15" fill="rgb(210,75,36)" fg:x="47570" fg:w="474"/><text x="91.4634%" y="415.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.04%)</title><rect x="92.0789%" y="373" width="0.0383%" height="15" fill="rgb(229,88,21)" fg:x="48044" fg:w="20"/><text x="92.3719%" y="383.50"></text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="92.1172%" y="373" width="0.0537%" height="15" fill="rgb(252,204,47)" fg:x="48064" fg:w="28"/><text x="92.4102%" y="383.50"></text></g><g><title>opt_inject (23 instructions, 0.04%)</title><rect x="92.1709%" y="373" width="0.0441%" height="15" fill="rgb(208,77,27)" fg:x="48092" fg:w="23"/><text x="92.4638%" y="383.50"></text></g><g><title>fulfill (147 instructions, 0.28%)</title><rect x="92.0789%" y="389" width="0.2817%" height="15" fill="rgb(221,76,26)" fg:x="48044" fg:w="147"/><text x="92.3719%" y="399.50"></text></g><g><title>$lambda.6 (164 instructions, 0.31%)</title><rect x="92.0789%" y="405" width="0.3143%" height="15" fill="rgb(225,139,18)" fg:x="48044" fg:w="164"/><text x="92.3719%" y="415.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="92.3932%" y="405" width="0.2070%" height="15" fill="rgb(230,137,11)" fg:x="48208" fg:w="108"/><text x="92.6862%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="92.6002%" y="405" width="0.0307%" height="15" fill="rgb(212,28,1)" fg:x="48316" fg:w="16"/><text x="92.8932%" y="415.50"></text></g><g><title>trans_state5 (10 instructions, 0.02%)</title><rect x="95.4750%" y="405" width="0.0192%" height="15" fill="rgb(248,164,17)" fg:x="49816" fg:w="10"/><text x="95.7680%" y="415.50"></text></g><g><title>recall_continuation (49 instructions, 0.09%)</title><rect x="95.4942%" y="405" width="0.0939%" height="15" fill="rgb(222,171,42)" fg:x="49826" fg:w="49"/><text x="95.7872%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="95.5881%" y="405" width="0.1073%" height="15" fill="rgb(243,84,45)" fg:x="49875" fg:w="56"/><text x="95.8811%" y="415.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="95.6954%" y="373" width="0.0958%" height="15" fill="rgb(252,49,23)" fg:x="49931" fg:w="50"/><text x="95.9884%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.11%)</title><rect x="95.7912%" y="373" width="0.1073%" height="15" fill="rgb(215,19,7)" fg:x="49981" fg:w="56"/><text x="96.0842%" y="383.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="95.8986%" y="373" width="0.0958%" height="15" fill="rgb(238,81,41)" fg:x="50037" fg:w="50"/><text x="96.1915%" y="383.50"></text></g><g><title>parse_idl_header (245 instructions, 0.47%)</title><rect x="95.6954%" y="389" width="0.4696%" height="15" fill="rgb(210,199,37)" fg:x="49931" fg:w="245"/><text x="95.9884%" y="399.50"></text></g><g><title>memset (6 instructions, 0.01%)</title><rect x="96.1650%" y="373" width="0.0115%" height="15" fill="rgb(244,192,49)" fg:x="50176" fg:w="6"/><text x="96.4579%" y="383.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.03%)</title><rect x="96.1650%" y="389" width="0.0287%" height="15" fill="rgb(226,211,11)" fg:x="50176" fg:w="15"/><text x="96.4579%" y="399.50"></text></g><g><title>leb128_decode (50 instructions, 0.10%)</title><rect x="96.1937%" y="389" width="0.0958%" height="15" fill="rgb(236,162,54)" fg:x="50191" fg:w="50"/><text x="96.4867%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 0.91%)</title><rect x="95.6954%" y="405" width="0.9084%" height="15" fill="rgb(220,229,9)" fg:x="49931" fg:w="474"/><text x="95.9884%" y="415.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.04%)</title><rect x="96.6039%" y="373" width="0.0383%" height="15" fill="rgb(250,87,22)" fg:x="50405" fg:w="20"/><text x="96.8968%" y="383.50"></text></g><g><title>to_2_tuple (28 instructions, 0.05%)</title><rect x="96.6422%" y="373" width="0.0537%" height="15" fill="rgb(239,43,17)" fg:x="50425" fg:w="28"/><text x="96.9352%" y="383.50"></text></g><g><title>opt_inject (23 instructions, 0.04%)</title><rect x="96.6959%" y="373" width="0.0441%" height="15" fill="rgb(231,177,25)" fg:x="50453" fg:w="23"/><text x="96.9888%" y="383.50"></text></g><g><title>fulfill (147 instructions, 0.28%)</title><rect x="96.6039%" y="389" width="0.2817%" height="15" fill="rgb(219,179,1)" fg:x="50405" fg:w="147"/><text x="96.8968%" y="399.50"></text></g><g><title>$lambda.6 (164 instructions, 0.31%)</title><rect x="96.6039%" y="405" width="0.3143%" height="15" fill="rgb(238,219,53)" fg:x="50405" fg:w="164"/><text x="96.8968%" y="415.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.21%)</title><rect x="96.9182%" y="405" width="0.2070%" height="15" fill="rgb(232,167,36)" fg:x="50569" fg:w="108"/><text x="97.2112%" y="415.50"></text></g><g><title>trans_state4 (16 instructions, 0.03%)</title><rect x="97.1252%" y="405" width="0.0307%" height="15" fill="rgb(244,19,51)" fg:x="50677" fg:w="16"/><text x="97.4181%" y="415.50"></text></g><g><title>all (52,177 instructions, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="52177"/><text x="0.2930%" y="447.50"></text></g><g><title>@callback&lt;u&gt; (4,722 instructions, 9.05%)</title><rect x="90.9500%" y="421" width="9.0500%" height="15" fill="rgb(224,145,5)" fg:x="47455" fg:w="4722"/><text x="91.2430%" y="431.50">@callback&lt;u&gt;</text></g></svg></svg>