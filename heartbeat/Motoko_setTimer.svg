<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="486" onload="init(evt)" viewBox="0 0 1024 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.setTimer(0)</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="469.00"> </text><svg id="frames" x="10" width="1004" total_samples="15208"><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="0.0000%" y="405" width="0.0526%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="8"/><text x="0.2930%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="0.0526%" y="405" width="0.2170%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="33"/><text x="0.3456%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="0.2696%" y="373" width="0.3025%" height="15" fill="rgb(253,215,40)" fg:x="41" fg:w="46"/><text x="0.5626%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="0.5721%" y="373" width="0.2170%" height="15" fill="rgb(211,81,21)" fg:x="87" fg:w="33"/><text x="0.8650%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="0.7891%" y="373" width="0.3025%" height="15" fill="rgb(208,190,38)" fg:x="120" fg:w="46"/><text x="1.0820%" y="383.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="1.0915%" y="373" width="0.3945%" height="15" fill="rgb(235,213,38)" fg:x="166" fg:w="60"/><text x="1.3845%" y="383.50"></text></g><g><title>parse_idl_header (267 instructions, 1.76%)</title><rect x="0.2696%" y="389" width="1.7557%" height="15" fill="rgb(237,122,38)" fg:x="41" fg:w="267"/><text x="0.5626%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="2.0252%" y="373" width="0.0197%" height="15" fill="rgb(244,218,35)" fg:x="308" fg:w="3"/><text x="2.3182%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.04%)</title><rect x="2.0252%" y="389" width="0.0395%" height="15" fill="rgb(240,68,47)" fg:x="308" fg:w="6"/><text x="2.3182%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="2.0647%" y="389" width="0.3025%" height="15" fill="rgb(210,16,53)" fg:x="314" fg:w="46"/><text x="2.3577%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="2.3672%" y="389" width="0.3945%" height="15" fill="rgb(235,124,12)" fg:x="360" fg:w="60"/><text x="2.6601%" y="399.50"></text></g><g><title>@deserialize&lt;N&gt; (629 instructions, 4.14%)</title><rect x="0.2696%" y="405" width="4.1360%" height="15" fill="rgb(224,169,11)" fg:x="41" fg:w="629"/><text x="0.5626%" y="415.50">@de..</text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="4.4056%" y="405" width="0.0986%" height="15" fill="rgb(250,166,2)" fg:x="670" fg:w="15"/><text x="4.6985%" y="415.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="4.5042%" y="389" width="0.0986%" height="15" fill="rgb(242,216,29)" fg:x="685" fg:w="15"/><text x="4.7972%" y="399.50"></text></g><g><title>B_mul (26 instructions, 0.17%)</title><rect x="4.6028%" y="389" width="0.1710%" height="15" fill="rgb(230,116,27)" fg:x="700" fg:w="26"/><text x="4.8958%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="4.7738%" y="389" width="0.0855%" height="15" fill="rgb(228,99,48)" fg:x="726" fg:w="13"/><text x="5.0668%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="4.8593%" y="389" width="0.0986%" height="15" fill="rgb(253,11,6)" fg:x="739" fg:w="15"/><text x="5.1523%" y="399.50"></text></g><g><title>B_add (24 instructions, 0.16%)</title><rect x="4.9579%" y="389" width="0.1578%" height="15" fill="rgb(247,143,39)" fg:x="754" fg:w="24"/><text x="5.2509%" y="399.50"></text></g><g><title>add&lt;Nat64&gt; (12 instructions, 0.08%)</title><rect x="5.1157%" y="389" width="0.0789%" height="15" fill="rgb(236,97,10)" fg:x="778" fg:w="12"/><text x="5.4087%" y="399.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="5.1946%" y="389" width="0.1710%" height="15" fill="rgb(233,208,19)" fg:x="790" fg:w="26"/><text x="5.4876%" y="399.50"></text></g><g><title>@prune (9 instructions, 0.06%)</title><rect x="5.3656%" y="389" width="0.0592%" height="15" fill="rgb(216,164,2)" fg:x="816" fg:w="9"/><text x="5.6586%" y="399.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="5.4248%" y="373" width="0.0986%" height="15" fill="rgb(220,129,5)" fg:x="825" fg:w="15"/><text x="5.7177%" y="383.50"></text></g><g><title>alloc_size&lt;9&gt;_tag&lt;1&gt; (15 instructions, 0.10%)</title><rect x="5.5234%" y="373" width="0.0986%" height="15" fill="rgb(242,17,10)" fg:x="840" fg:w="15"/><text x="5.8164%" y="383.50"></text></g><g><title>insert (84 instructions, 0.55%)</title><rect x="5.4248%" y="389" width="0.5523%" height="15" fill="rgb(242,107,0)" fg:x="825" fg:w="84"/><text x="5.7177%" y="399.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="5.9771%" y="389" width="0.1184%" height="15" fill="rgb(251,28,31)" fg:x="909" fg:w="18"/><text x="6.2701%" y="399.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="6.0955%" y="373" width="0.1184%" height="15" fill="rgb(233,223,10)" fg:x="927" fg:w="18"/><text x="6.3884%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="6.2138%" y="373" width="0.1052%" height="15" fill="rgb(215,21,27)" fg:x="945" fg:w="16"/><text x="6.5068%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="6.3190%" y="373" width="0.0460%" height="15" fill="rgb(232,23,21)" fg:x="961" fg:w="7"/><text x="6.6120%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="6.3651%" y="373" width="0.1052%" height="15" fill="rgb(244,5,23)" fg:x="968" fg:w="16"/><text x="6.6580%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="6.4703%" y="373" width="0.1184%" height="15" fill="rgb(226,81,46)" fg:x="984" fg:w="18"/><text x="6.7632%" y="383.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="6.5886%" y="373" width="0.1710%" height="15" fill="rgb(247,70,30)" fg:x="1002" fg:w="26"/><text x="6.8816%" y="383.50"></text></g><g><title>@nextExpiration (146 instructions, 0.96%)</title><rect x="6.0955%" y="389" width="0.9600%" height="15" fill="rgb(212,68,19)" fg:x="927" fg:w="146"/><text x="6.3884%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="7.0555%" y="373" width="0.2170%" height="15" fill="rgb(240,187,13)" fg:x="1073" fg:w="33"/><text x="7.3485%" y="383.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="7.2725%" y="373" width="0.4208%" height="15" fill="rgb(223,113,26)" fg:x="1106" fg:w="64"/><text x="7.5655%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="7.6933%" y="373" width="0.2170%" height="15" fill="rgb(206,192,2)" fg:x="1170" fg:w="33"/><text x="7.9863%" y="383.50"></text></g><g><title>leb128_encode (9 instructions, 0.06%)</title><rect x="7.9103%" y="373" width="0.0592%" height="15" fill="rgb(241,108,4)" fg:x="1203" fg:w="9"/><text x="8.2033%" y="383.50"></text></g><g><title>reply_with_data (32 instructions, 0.21%)</title><rect x="7.9695%" y="373" width="0.2104%" height="15" fill="rgb(247,173,49)" fg:x="1212" fg:w="32"/><text x="8.2625%" y="383.50"></text></g><g><title>$lambda.23 (279 instructions, 1.83%)</title><rect x="7.0555%" y="389" width="1.8346%" height="15" fill="rgb(224,114,35)" fg:x="1073" fg:w="279"/><text x="7.3485%" y="399.50"></text></g><g><title>$lambda.4 (789 instructions, 5.19%)</title><rect x="4.5042%" y="405" width="5.1881%" height="15" fill="rgb(245,159,27)" fg:x="685" fg:w="789"/><text x="4.7972%" y="415.50">$lamb..</text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="9.6923%" y="405" width="0.2959%" height="15" fill="rgb(245,172,44)" fg:x="1474" fg:w="45"/><text x="9.9852%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="9.9882%" y="405" width="0.0855%" height="15" fill="rgb(236,23,11)" fg:x="1519" fg:w="13"/><text x="10.2811%" y="415.50"></text></g><g><title>setTimer (2,003 instructions, 13.17%)</title><rect x="0.0000%" y="421" width="13.1707%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="2003"/><text x="0.2930%" y="431.50">setTimer</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.1707%" y="389" width="0.0986%" height="15" fill="rgb(237,72,25)" fg:x="2003" fg:w="15"/><text x="13.4637%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.2693%" y="389" width="0.0986%" height="15" fill="rgb(244,70,9)" fg:x="2018" fg:w="15"/><text x="13.5623%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="13.3680%" y="389" width="0.0986%" height="15" fill="rgb(217,125,39)" fg:x="2033" fg:w="15"/><text x="13.6609%" y="399.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="13.4666%" y="389" width="0.0329%" height="15" fill="rgb(235,36,10)" fg:x="2048" fg:w="5"/><text x="13.7596%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.4995%" y="389" width="0.0986%" height="15" fill="rgb(251,123,47)" fg:x="2053" fg:w="15"/><text x="13.7924%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.5981%" y="389" width="0.0986%" height="15" fill="rgb(221,13,13)" fg:x="2068" fg:w="15"/><text x="13.8911%" y="399.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="13.6967%" y="389" width="0.0986%" height="15" fill="rgb(238,131,9)" fg:x="2083" fg:w="15"/><text x="13.9897%" y="399.50"></text></g><g><title>@new_async (179 instructions, 1.18%)</title><rect x="13.1707%" y="405" width="1.1770%" height="15" fill="rgb(211,50,8)" fg:x="2003" fg:w="179"/><text x="13.4637%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="14.3477%" y="405" width="0.0986%" height="15" fill="rgb(245,182,24)" fg:x="2182" fg:w="15"/><text x="14.6407%" y="415.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="14.4463%" y="405" width="0.0986%" height="15" fill="rgb(242,14,37)" fg:x="2197" fg:w="15"/><text x="14.7393%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="14.5450%" y="389" width="0.2170%" height="15" fill="rgb(246,228,12)" fg:x="2212" fg:w="33"/><text x="14.8379%" y="399.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="14.5450%" y="405" width="0.2827%" height="15" fill="rgb(213,55,15)" fg:x="2212" fg:w="43"/><text x="14.8379%" y="415.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="14.8277%" y="405" width="0.1512%" height="15" fill="rgb(209,9,3)" fg:x="2255" fg:w="23"/><text x="15.1207%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="14.9790%" y="389" width="0.2170%" height="15" fill="rgb(230,59,30)" fg:x="2278" fg:w="33"/><text x="15.2719%" y="399.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="14.9790%" y="405" width="0.2827%" height="15" fill="rgb(209,121,21)" fg:x="2278" fg:w="43"/><text x="15.2719%" y="415.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="15.2617%" y="405" width="0.1512%" height="15" fill="rgb(220,109,13)" fg:x="2321" fg:w="23"/><text x="15.5547%" y="415.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="15.4129%" y="405" width="0.0986%" height="15" fill="rgb(232,18,1)" fg:x="2344" fg:w="15"/><text x="15.7059%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_array::haa7cdeb7ecf340fc (36 instructions, 0.24%)</title><rect x="15.5116%" y="389" width="0.2367%" height="15" fill="rgb(215,41,42)" fg:x="2359" fg:w="36"/><text x="15.8045%" y="399.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::hf8958edaecfd35c6 (7 instructions, 0.05%)</title><rect x="15.7483%" y="389" width="0.0460%" height="15" fill="rgb(224,123,36)" fg:x="2395" fg:w="7"/><text x="16.0413%" y="399.50"></text></g><g><title>remember_continuation (3,699 instructions, 24.32%)</title><rect x="15.5116%" y="405" width="24.3227%" height="15" fill="rgb(240,125,3)" fg:x="2359" fg:w="3699"/><text x="15.8045%" y="415.50">remember_continuation</text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="39.8343%" y="405" width="0.0592%" height="15" fill="rgb(205,98,50)" fg:x="6058" fg:w="9"/><text x="40.1273%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="39.8935%" y="389" width="0.2170%" height="15" fill="rgb(205,185,37)" fg:x="6067" fg:w="33"/><text x="40.1864%" y="399.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="40.1105%" y="389" width="0.4208%" height="15" fill="rgb(238,207,15)" fg:x="6100" fg:w="64"/><text x="40.4034%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="40.5313%" y="389" width="0.2170%" height="15" fill="rgb(213,199,42)" fg:x="6164" fg:w="33"/><text x="40.8243%" y="399.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 1.32%)</title><rect x="39.8935%" y="405" width="1.3217%" height="15" fill="rgb(235,201,11)" fg:x="6067" fg:w="201"/><text x="40.1864%" y="415.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="41.2151%" y="389" width="0.0329%" height="15" fill="rgb(207,46,11)" fg:x="6268" fg:w="5"/><text x="41.5081%" y="399.50"></text></g><g><title>@add_cycles (16 instructions, 0.11%)</title><rect x="41.2151%" y="405" width="0.1052%" height="15" fill="rgb(241,35,35)" fg:x="6268" fg:w="16"/><text x="41.5081%" y="415.50"></text></g><g><title>canister_global_timer (4,606 instructions, 30.29%)</title><rect x="13.1707%" y="421" width="30.2867%" height="15" fill="rgb(243,32,47)" fg:x="2003" fg:w="4606"/><text x="13.4637%" y="431.50">canister_global_timer</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="43.4574%" y="405" width="0.0526%" height="15" fill="rgb(247,202,23)" fg:x="6609" fg:w="8"/><text x="43.7504%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="43.5100%" y="405" width="0.2170%" height="15" fill="rgb(219,102,11)" fg:x="6617" fg:w="33"/><text x="43.8030%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="43.7270%" y="405" width="0.2170%" height="15" fill="rgb(243,110,44)" fg:x="6650" fg:w="33"/><text x="44.0200%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.41%)</title><rect x="43.9440%" y="405" width="1.4137%" height="15" fill="rgb(222,74,54)" fg:x="6683" fg:w="215"/><text x="44.2369%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="45.3577%" y="405" width="0.2170%" height="15" fill="rgb(216,99,12)" fg:x="6898" fg:w="33"/><text x="45.6507%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="45.5747%" y="389" width="0.3025%" height="15" fill="rgb(226,22,26)" fg:x="6931" fg:w="46"/><text x="45.8677%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="45.8772%" y="389" width="0.2170%" height="15" fill="rgb(217,163,10)" fg:x="6977" fg:w="33"/><text x="46.1701%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="46.0942%" y="389" width="0.3025%" height="15" fill="rgb(213,25,53)" fg:x="7010" fg:w="46"/><text x="46.3871%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="46.3966%" y="389" width="0.3945%" height="15" fill="rgb(252,105,26)" fg:x="7056" fg:w="60"/><text x="46.6896%" y="399.50"></text></g><g><title>parse_idl_header (267 instructions, 1.76%)</title><rect x="45.5747%" y="405" width="1.7557%" height="15" fill="rgb(220,39,43)" fg:x="6931" fg:w="267"/><text x="45.8677%" y="415.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="47.3304%" y="389" width="0.0197%" height="15" fill="rgb(229,68,48)" fg:x="7198" fg:w="3"/><text x="47.6233%" y="399.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.04%)</title><rect x="47.3304%" y="405" width="0.0395%" height="15" fill="rgb(252,8,32)" fg:x="7198" fg:w="6"/><text x="47.6233%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="47.3698%" y="405" width="0.3025%" height="15" fill="rgb(223,20,43)" fg:x="7204" fg:w="46"/><text x="47.6628%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="47.6723%" y="405" width="0.3945%" height="15" fill="rgb(229,81,49)" fg:x="7250" fg:w="60"/><text x="47.9652%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="48.0668%" y="405" width="0.0592%" height="15" fill="rgb(236,28,36)" fg:x="7310" fg:w="9"/><text x="48.3598%" y="415.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.1260%" y="389" width="0.0986%" height="15" fill="rgb(249,185,26)" fg:x="7319" fg:w="15"/><text x="48.4190%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.2246%" y="389" width="0.0986%" height="15" fill="rgb(249,174,33)" fg:x="7334" fg:w="15"/><text x="48.5176%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.3233%" y="389" width="0.0986%" height="15" fill="rgb(233,201,37)" fg:x="7349" fg:w="15"/><text x="48.6162%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.4219%" y="389" width="0.0986%" height="15" fill="rgb(221,78,26)" fg:x="7364" fg:w="15"/><text x="48.7149%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.5205%" y="389" width="0.0986%" height="15" fill="rgb(250,127,30)" fg:x="7379" fg:w="15"/><text x="48.8135%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="48.6191%" y="389" width="0.0986%" height="15" fill="rgb(230,49,44)" fg:x="7394" fg:w="15"/><text x="48.9121%" y="399.50"></text></g><g><title>box_i64 (26 instructions, 0.17%)</title><rect x="48.7178%" y="389" width="0.1710%" height="15" fill="rgb(229,67,23)" fg:x="7409" fg:w="26"/><text x="49.0107%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_array::haa7cdeb7ecf340fc (36 instructions, 0.24%)</title><rect x="48.8887%" y="373" width="0.2367%" height="15" fill="rgb(249,83,47)" fg:x="7435" fg:w="36"/><text x="49.1817%" y="383.50"></text></g><g><title>Array_init (178 instructions, 1.17%)</title><rect x="48.8887%" y="389" width="1.1704%" height="15" fill="rgb(215,43,3)" fg:x="7435" fg:w="178"/><text x="49.1817%" y="399.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="50.0592%" y="389" width="0.0986%" height="15" fill="rgb(238,154,13)" fg:x="7613" fg:w="15"/><text x="50.3521%" y="399.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="50.1578%" y="373" width="0.1184%" height="15" fill="rgb(219,56,2)" fg:x="7628" fg:w="18"/><text x="50.4508%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="50.2762%" y="373" width="0.1052%" height="15" fill="rgb(233,0,4)" fg:x="7646" fg:w="16"/><text x="50.5691%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.12%)</title><rect x="50.3814%" y="373" width="0.1184%" height="15" fill="rgb(235,30,7)" fg:x="7662" fg:w="18"/><text x="50.6743%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="50.4997%" y="373" width="0.1052%" height="15" fill="rgb(250,79,13)" fg:x="7680" fg:w="16"/><text x="50.7927%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="50.6049%" y="373" width="0.1184%" height="15" fill="rgb(211,146,34)" fg:x="7696" fg:w="18"/><text x="50.8979%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="50.7233%" y="373" width="0.1052%" height="15" fill="rgb(228,22,38)" fg:x="7714" fg:w="16"/><text x="51.0163%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="50.8285%" y="373" width="0.1184%" height="15" fill="rgb(235,168,5)" fg:x="7730" fg:w="18"/><text x="51.1215%" y="383.50"></text></g><g><title>B_lt (10 instructions, 0.07%)</title><rect x="50.9469%" y="373" width="0.0658%" height="15" fill="rgb(221,155,16)" fg:x="7748" fg:w="10"/><text x="51.2398%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="51.0126%" y="373" width="0.1184%" height="15" fill="rgb(215,215,53)" fg:x="7758" fg:w="18"/><text x="51.3056%" y="383.50"></text></g><g><title>obj_idx&lt;1&gt; (16 instructions, 0.11%)</title><rect x="51.1310%" y="373" width="0.1052%" height="15" fill="rgb(223,4,10)" fg:x="7776" fg:w="16"/><text x="51.4240%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="51.2362%" y="373" width="0.1184%" height="15" fill="rgb(234,103,6)" fg:x="7792" fg:w="18"/><text x="51.5292%" y="383.50"></text></g><g><title>obj_idx&lt;5&gt; (16 instructions, 0.11%)</title><rect x="51.3546%" y="373" width="0.1052%" height="15" fill="rgb(227,97,0)" fg:x="7810" fg:w="16"/><text x="51.6475%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="51.4598%" y="373" width="0.1052%" height="15" fill="rgb(234,150,53)" fg:x="7826" fg:w="16"/><text x="51.7527%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="51.5650%" y="373" width="0.1184%" height="15" fill="rgb(228,201,54)" fg:x="7842" fg:w="18"/><text x="51.8579%" y="383.50"></text></g><g><title>B_add (24 instructions, 0.16%)</title><rect x="51.6833%" y="373" width="0.1578%" height="15" fill="rgb(222,22,37)" fg:x="7860" fg:w="24"/><text x="51.9763%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.11%)</title><rect x="51.8411%" y="373" width="0.1052%" height="15" fill="rgb(237,53,32)" fg:x="7884" fg:w="16"/><text x="52.1341%" y="383.50"></text></g><g><title>gatherExpired (18 instructions, 0.12%)</title><rect x="51.9463%" y="373" width="0.1184%" height="15" fill="rgb(233,25,53)" fg:x="7900" fg:w="18"/><text x="52.2393%" y="383.50"></text></g><g><title>gatherExpired (411 instructions, 2.70%)</title><rect x="50.1578%" y="389" width="2.7025%" height="15" fill="rgb(210,40,34)" fg:x="7628" fg:w="411"/><text x="50.4508%" y="399.50">g..</text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="52.8603%" y="373" width="0.1184%" height="15" fill="rgb(241,220,44)" fg:x="8039" fg:w="18"/><text x="53.1533%" y="383.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.11%)</title><rect x="52.9787%" y="373" width="0.1052%" height="15" fill="rgb(235,28,35)" fg:x="8057" fg:w="16"/><text x="53.2717%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="53.0839%" y="373" width="0.0460%" height="15" fill="rgb(210,56,17)" fg:x="8073" fg:w="7"/><text x="53.3769%" y="383.50"></text></g><g><title>obj_idx&lt;3&gt; (16 instructions, 0.11%)</title><rect x="53.1299%" y="373" width="0.1052%" height="15" fill="rgb(224,130,29)" fg:x="8080" fg:w="16"/><text x="53.4229%" y="383.50"></text></g><g><title>Array.idx_bigint (18 instructions, 0.12%)</title><rect x="53.2351%" y="373" width="0.1184%" height="15" fill="rgb(235,212,8)" fg:x="8096" fg:w="18"/><text x="53.5281%" y="383.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.11%)</title><rect x="53.3535%" y="373" width="0.1052%" height="15" fill="rgb(223,33,50)" fg:x="8114" fg:w="16"/><text x="53.6465%" y="383.50"></text></g><g><title>@nextExpiration (7 instructions, 0.05%)</title><rect x="53.4587%" y="373" width="0.0460%" height="15" fill="rgb(219,149,13)" fg:x="8130" fg:w="7"/><text x="53.7517%" y="383.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="53.5047%" y="373" width="0.0855%" height="15" fill="rgb(250,156,29)" fg:x="8137" fg:w="13"/><text x="53.7977%" y="383.50"></text></g><g><title>@nextExpiration (168 instructions, 1.10%)</title><rect x="52.8603%" y="389" width="1.1047%" height="15" fill="rgb(216,193,19)" fg:x="8039" fg:w="168"/><text x="53.1533%" y="399.50"></text></g><g><title>box_i64 (13 instructions, 0.09%)</title><rect x="53.9650%" y="389" width="0.0855%" height="15" fill="rgb(216,135,14)" fg:x="8207" fg:w="13"/><text x="54.2580%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.0505%" y="389" width="0.0986%" height="15" fill="rgb(241,47,5)" fg:x="8220" fg:w="15"/><text x="54.3435%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.1491%" y="389" width="0.0986%" height="15" fill="rgb(233,42,35)" fg:x="8235" fg:w="15"/><text x="54.4421%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.2478%" y="389" width="0.0986%" height="15" fill="rgb(231,13,6)" fg:x="8250" fg:w="15"/><text x="54.5407%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.3464%" y="389" width="0.0986%" height="15" fill="rgb(207,181,40)" fg:x="8265" fg:w="15"/><text x="54.6394%" y="399.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.4450%" y="373" width="0.0986%" height="15" fill="rgb(254,173,49)" fg:x="8280" fg:w="15"/><text x="54.7380%" y="383.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="54.5437%" y="373" width="0.0986%" height="15" fill="rgb(221,1,38)" fg:x="8295" fg:w="15"/><text x="54.8366%" y="383.50"></text></g><g><title>opt_project (18 instructions, 0.12%)</title><rect x="54.6423%" y="373" width="0.1184%" height="15" fill="rgb(206,124,46)" fg:x="8310" fg:w="18"/><text x="54.9353%" y="383.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.7607%" y="341" width="0.0986%" height="15" fill="rgb(249,21,11)" fg:x="8328" fg:w="15"/><text x="55.0536%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.8593%" y="341" width="0.0986%" height="15" fill="rgb(222,201,40)" fg:x="8343" fg:w="15"/><text x="55.1523%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="54.9579%" y="341" width="0.0986%" height="15" fill="rgb(235,61,29)" fg:x="8358" fg:w="15"/><text x="55.2509%" y="351.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="55.0565%" y="341" width="0.0329%" height="15" fill="rgb(219,207,3)" fg:x="8373" fg:w="5"/><text x="55.3495%" y="351.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.0894%" y="341" width="0.0986%" height="15" fill="rgb(222,56,46)" fg:x="8378" fg:w="15"/><text x="55.3824%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.1881%" y="341" width="0.0986%" height="15" fill="rgb(239,76,54)" fg:x="8393" fg:w="15"/><text x="55.4810%" y="351.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.2867%" y="341" width="0.0986%" height="15" fill="rgb(231,124,27)" fg:x="8408" fg:w="15"/><text x="55.5797%" y="351.50"></text></g><g><title>@new_async (179 instructions, 1.18%)</title><rect x="54.7607%" y="357" width="1.1770%" height="15" fill="rgb(249,195,6)" fg:x="8328" fg:w="179"/><text x="55.0536%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="55.9377%" y="357" width="0.0986%" height="15" fill="rgb(237,174,47)" fg:x="8507" fg:w="15"/><text x="56.2306%" y="367.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="56.0363%" y="357" width="0.0986%" height="15" fill="rgb(206,201,31)" fg:x="8522" fg:w="15"/><text x="56.3293%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="56.1349%" y="341" width="0.2170%" height="15" fill="rgb(231,57,52)" fg:x="8537" fg:w="33"/><text x="56.4279%" y="351.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="56.1349%" y="357" width="0.2827%" height="15" fill="rgb(248,177,22)" fg:x="8537" fg:w="43"/><text x="56.4279%" y="367.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="56.4177%" y="357" width="0.1512%" height="15" fill="rgb(215,211,37)" fg:x="8580" fg:w="23"/><text x="56.7106%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="56.5689%" y="341" width="0.2170%" height="15" fill="rgb(241,128,51)" fg:x="8603" fg:w="33"/><text x="56.8619%" y="351.50"></text></g><g><title>canister_self (43 instructions, 0.28%)</title><rect x="56.5689%" y="357" width="0.2827%" height="15" fill="rgb(227,165,31)" fg:x="8603" fg:w="43"/><text x="56.8619%" y="367.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="56.8517%" y="357" width="0.1512%" height="15" fill="rgb(228,167,24)" fg:x="8646" fg:w="23"/><text x="57.1446%" y="367.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (15 instructions, 0.10%)</title><rect x="57.0029%" y="357" width="0.0986%" height="15" fill="rgb(228,143,12)" fg:x="8669" fg:w="15"/><text x="57.2959%" y="367.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::hf8958edaecfd35c6 (7 instructions, 0.05%)</title><rect x="57.1015%" y="341" width="0.0460%" height="15" fill="rgb(249,149,8)" fg:x="8684" fg:w="7"/><text x="57.3945%" y="351.50"></text></g><g><title>remember_continuation (58 instructions, 0.38%)</title><rect x="57.1015%" y="357" width="0.3814%" height="15" fill="rgb(243,35,44)" fg:x="8684" fg:w="58"/><text x="57.3945%" y="367.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="57.4829%" y="357" width="0.0592%" height="15" fill="rgb(246,89,9)" fg:x="8742" fg:w="9"/><text x="57.7759%" y="367.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="57.5421%" y="341" width="0.2170%" height="15" fill="rgb(233,213,13)" fg:x="8751" fg:w="33"/><text x="57.8351%" y="351.50"></text></g><g><title>memcpy (64 instructions, 0.42%)</title><rect x="57.7591%" y="341" width="0.4208%" height="15" fill="rgb(233,141,41)" fg:x="8784" fg:w="64"/><text x="58.0520%" y="351.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="58.1799%" y="341" width="0.2170%" height="15" fill="rgb(239,167,4)" fg:x="8848" fg:w="33"/><text x="58.4729%" y="351.50"></text></g><g><title>@serialize&lt;n32&gt; (201 instructions, 1.32%)</title><rect x="57.5421%" y="357" width="1.3217%" height="15" fill="rgb(209,217,16)" fg:x="8751" fg:w="201"/><text x="57.8351%" y="367.50"></text></g><g><title>B_eq (5 instructions, 0.03%)</title><rect x="58.8638%" y="341" width="0.0329%" height="15" fill="rgb(219,88,35)" fg:x="8952" fg:w="5"/><text x="59.1567%" y="351.50"></text></g><g><title>@add_cycles (16 instructions, 0.11%)</title><rect x="58.8638%" y="357" width="0.1052%" height="15" fill="rgb(220,193,23)" fg:x="8952" fg:w="16"/><text x="59.1567%" y="367.50"></text></g><g><title>anon-func-5.34 (761 instructions, 5.00%)</title><rect x="54.7607%" y="373" width="5.0039%" height="15" fill="rgb(230,90,52)" fg:x="8328" fg:w="761"/><text x="55.0536%" y="383.50">anon-..</text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="59.7646%" y="341" width="0.0986%" height="15" fill="rgb(252,106,19)" fg:x="9089" fg:w="15"/><text x="60.0576%" y="351.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="59.8632%" y="341" width="0.0986%" height="15" fill="rgb(206,74,20)" fg:x="9104" fg:w="15"/><text x="60.1562%" y="351.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="59.9619%" y="309" width="0.0986%" height="15" fill="rgb(230,138,44)" fg:x="9119" fg:w="15"/><text x="60.2548%" y="319.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.0605%" y="309" width="0.0986%" height="15" fill="rgb(235,182,43)" fg:x="9134" fg:w="15"/><text x="60.3535%" y="319.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.1591%" y="277" width="0.0986%" height="15" fill="rgb(242,16,51)" fg:x="9149" fg:w="15"/><text x="60.4521%" y="287.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.2578%" y="277" width="0.0986%" height="15" fill="rgb(248,9,4)" fg:x="9164" fg:w="15"/><text x="60.5507%" y="287.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.3564%" y="245" width="0.0986%" height="15" fill="rgb(210,31,22)" fg:x="9179" fg:w="15"/><text x="60.6494%" y="255.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.4550%" y="245" width="0.0986%" height="15" fill="rgb(239,54,39)" fg:x="9194" fg:w="15"/><text x="60.7480%" y="255.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.5537%" y="213" width="0.0986%" height="15" fill="rgb(230,99,41)" fg:x="9209" fg:w="15"/><text x="60.8466%" y="223.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.6523%" y="213" width="0.0986%" height="15" fill="rgb(253,106,12)" fg:x="9224" fg:w="15"/><text x="60.9453%" y="223.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.7509%" y="181" width="0.0986%" height="15" fill="rgb(213,46,41)" fg:x="9239" fg:w="15"/><text x="61.0439%" y="191.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="60.8496%" y="181" width="0.0986%" height="15" fill="rgb(215,133,35)" fg:x="9254" fg:w="15"/><text x="61.1425%" y="191.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="60.9482%" y="149" width="0.0986%" height="15" fill="rgb(213,28,5)" fg:x="9269" fg:w="15"/><text x="61.2412%" y="159.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.0468%" y="149" width="0.0986%" height="15" fill="rgb(215,77,49)" fg:x="9284" fg:w="15"/><text x="61.3398%" y="159.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="61.1454%" y="117" width="0.0986%" height="15" fill="rgb(248,100,22)" fg:x="9299" fg:w="15"/><text x="61.4384%" y="127.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.2441%" y="117" width="0.0986%" height="15" fill="rgb(208,67,9)" fg:x="9314" fg:w="15"/><text x="61.5371%" y="127.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (15 instructions, 0.10%)</title><rect x="61.3427%" y="85" width="0.0986%" height="15" fill="rgb(219,133,21)" fg:x="9329" fg:w="15"/><text x="61.6357%" y="95.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;11&gt; (15 instructions, 0.10%)</title><rect x="61.4413%" y="85" width="0.0986%" height="15" fill="rgb(246,46,29)" fg:x="9344" fg:w="15"/><text x="61.7343%" y="95.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="61.5400%" y="37" width="0.2170%" height="15" fill="rgb(246,185,52)" fg:x="9359" fg:w="33"/><text x="61.8329%" y="47.50"></text></g><g><title>memcpy (61 instructions, 0.40%)</title><rect x="61.7570%" y="37" width="0.4011%" height="15" fill="rgb(252,136,11)" fg:x="9392" fg:w="61"/><text x="62.0499%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="62.1581%" y="37" width="0.2170%" height="15" fill="rgb(219,138,53)" fg:x="9453" fg:w="33"/><text x="62.4510%" y="47.50"></text></g><g><title>reply_with_data (30 instructions, 0.20%)</title><rect x="62.3751%" y="37" width="0.1973%" height="15" fill="rgb(211,51,23)" fg:x="9486" fg:w="30"/><text x="62.6680%" y="47.50"></text></g><g><title>$lambda.19 (218 instructions, 1.43%)</title><rect x="61.5400%" y="53" width="1.4335%" height="15" fill="rgb(247,221,28)" fg:x="9359" fg:w="218"/><text x="61.8329%" y="63.50"></text></g><g><title>$loop/0 (243 instructions, 1.60%)</title><rect x="61.5400%" y="69" width="1.5978%" height="15" fill="rgb(251,222,45)" fg:x="9359" fg:w="243"/><text x="61.8329%" y="79.50"></text></g><g><title>$k/9 (259 instructions, 1.70%)</title><rect x="61.5400%" y="85" width="1.7031%" height="15" fill="rgb(217,162,53)" fg:x="9359" fg:w="259"/><text x="61.8329%" y="95.50"></text></g><g><title>$loop/0 (349 instructions, 2.29%)</title><rect x="61.3427%" y="101" width="2.2948%" height="15" fill="rgb(229,93,14)" fg:x="9329" fg:w="349"/><text x="61.6357%" y="111.50">$..</text></g><g><title>$k/9 (365 instructions, 2.40%)</title><rect x="61.3427%" y="117" width="2.4001%" height="15" fill="rgb(209,67,49)" fg:x="9329" fg:w="365"/><text x="61.6357%" y="127.50">$..</text></g><g><title>$loop/0 (455 instructions, 2.99%)</title><rect x="61.1454%" y="133" width="2.9918%" height="15" fill="rgb(213,87,29)" fg:x="9299" fg:w="455"/><text x="61.4384%" y="143.50">$l..</text></g><g><title>$k/9 (471 instructions, 3.10%)</title><rect x="61.1454%" y="149" width="3.0971%" height="15" fill="rgb(205,151,52)" fg:x="9299" fg:w="471"/><text x="61.4384%" y="159.50">$k..</text></g><g><title>$loop/0 (561 instructions, 3.69%)</title><rect x="60.9482%" y="165" width="3.6888%" height="15" fill="rgb(253,215,39)" fg:x="9269" fg:w="561"/><text x="61.2412%" y="175.50">$lo..</text></g><g><title>$k/9 (577 instructions, 3.79%)</title><rect x="60.9482%" y="181" width="3.7941%" height="15" fill="rgb(221,220,41)" fg:x="9269" fg:w="577"/><text x="61.2412%" y="191.50">$k/9</text></g><g><title>$loop/0 (667 instructions, 4.39%)</title><rect x="60.7509%" y="197" width="4.3858%" height="15" fill="rgb(218,133,21)" fg:x="9239" fg:w="667"/><text x="61.0439%" y="207.50">$loo..</text></g><g><title>$k/9 (683 instructions, 4.49%)</title><rect x="60.7509%" y="213" width="4.4911%" height="15" fill="rgb(221,193,43)" fg:x="9239" fg:w="683"/><text x="61.0439%" y="223.50">$k/9</text></g><g><title>$loop/0 (773 instructions, 5.08%)</title><rect x="60.5537%" y="229" width="5.0829%" height="15" fill="rgb(240,128,52)" fg:x="9209" fg:w="773"/><text x="60.8466%" y="239.50">$loop..</text></g><g><title>$k/9 (789 instructions, 5.19%)</title><rect x="60.5537%" y="245" width="5.1881%" height="15" fill="rgb(253,114,12)" fg:x="9209" fg:w="789"/><text x="60.8466%" y="255.50">$k/9</text></g><g><title>$loop/0 (879 instructions, 5.78%)</title><rect x="60.3564%" y="261" width="5.7799%" height="15" fill="rgb(215,223,47)" fg:x="9179" fg:w="879"/><text x="60.6494%" y="271.50">$loop/0</text></g><g><title>$k/9 (895 instructions, 5.89%)</title><rect x="60.3564%" y="277" width="5.8851%" height="15" fill="rgb(248,225,23)" fg:x="9179" fg:w="895"/><text x="60.6494%" y="287.50">$k/9</text></g><g><title>$loop/0 (985 instructions, 6.48%)</title><rect x="60.1591%" y="293" width="6.4769%" height="15" fill="rgb(250,108,0)" fg:x="9149" fg:w="985"/><text x="60.4521%" y="303.50">$loop/0</text></g><g><title>$k/9 (1,001 instructions, 6.58%)</title><rect x="60.1591%" y="309" width="6.5821%" height="15" fill="rgb(228,208,7)" fg:x="9149" fg:w="1001"/><text x="60.4521%" y="319.50">$k/9</text></g><g><title>$loop/0 (1,091 instructions, 7.17%)</title><rect x="59.9619%" y="325" width="7.1739%" height="15" fill="rgb(244,45,10)" fg:x="9119" fg:w="1091"/><text x="60.2548%" y="335.50">$loop/0</text></g><g><title>$k/9 (1,107 instructions, 7.28%)</title><rect x="59.9619%" y="341" width="7.2791%" height="15" fill="rgb(207,125,25)" fg:x="9119" fg:w="1107"/><text x="60.2548%" y="351.50">$k/9</text></g><g><title>$loop/0 (1,197 instructions, 7.87%)</title><rect x="59.7646%" y="357" width="7.8709%" height="15" fill="rgb(210,195,18)" fg:x="9089" fg:w="1197"/><text x="60.0576%" y="367.50">$loop/0</text></g><g><title>$k/9 (1,213 instructions, 7.98%)</title><rect x="59.7646%" y="373" width="7.9761%" height="15" fill="rgb(249,80,12)" fg:x="9089" fg:w="1213"/><text x="60.0576%" y="383.50">$k/9</text></g><g><title>$loop/0 (2,088 instructions, 13.73%)</title><rect x="54.4450%" y="389" width="13.7296%" height="15" fill="rgb(221,65,9)" fg:x="8280" fg:w="2088"/><text x="54.7380%" y="399.50">$loop/0</text></g><g><title>anon_async.1 (3,237 instructions, 21.28%)</title><rect x="48.1260%" y="405" width="21.2849%" height="15" fill="rgb(235,49,36)" fg:x="7319" fg:w="3237"/><text x="48.4190%" y="415.50">anon_async.1</text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="69.4108%" y="405" width="0.2959%" height="15" fill="rgb(225,32,20)" fg:x="10556" fg:w="45"/><text x="69.7038%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="69.7067%" y="405" width="0.0855%" height="15" fill="rgb(215,141,46)" fg:x="10601" fg:w="13"/><text x="69.9997%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="74.5923%" y="405" width="0.0526%" height="15" fill="rgb(250,160,47)" fg:x="11344" fg:w="8"/><text x="74.8853%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="74.6449%" y="405" width="0.2170%" height="15" fill="rgb(216,222,40)" fg:x="11352" fg:w="33"/><text x="74.9379%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="74.8619%" y="405" width="0.2170%" height="15" fill="rgb(234,217,39)" fg:x="11385" fg:w="33"/><text x="75.1549%" y="415.50"></text></g><g><title>memcmp (215 instructions, 1.41%)</title><rect x="75.0789%" y="405" width="1.4137%" height="15" fill="rgb(207,178,40)" fg:x="11418" fg:w="215"/><text x="75.3719%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="76.4926%" y="405" width="0.2170%" height="15" fill="rgb(221,136,13)" fg:x="11633" fg:w="33"/><text x="76.7856%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="76.7096%" y="389" width="0.3025%" height="15" fill="rgb(249,199,10)" fg:x="11666" fg:w="46"/><text x="77.0026%" y="399.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="77.0121%" y="389" width="0.2170%" height="15" fill="rgb(249,222,13)" fg:x="11712" fg:w="33"/><text x="77.3051%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="77.2291%" y="389" width="0.3025%" height="15" fill="rgb(244,185,38)" fg:x="11745" fg:w="46"/><text x="77.5221%" y="399.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="77.5316%" y="389" width="0.3945%" height="15" fill="rgb(236,202,9)" fg:x="11791" fg:w="60"/><text x="77.8245%" y="399.50"></text></g><g><title>parse_idl_header (267 instructions, 1.76%)</title><rect x="76.7096%" y="405" width="1.7557%" height="15" fill="rgb(250,229,37)" fg:x="11666" fg:w="267"/><text x="77.0026%" y="415.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="78.4653%" y="389" width="0.0197%" height="15" fill="rgb(206,174,23)" fg:x="11933" fg:w="3"/><text x="78.7583%" y="399.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.04%)</title><rect x="78.4653%" y="405" width="0.0395%" height="15" fill="rgb(211,33,43)" fg:x="11933" fg:w="6"/><text x="78.7583%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="78.5047%" y="405" width="0.3025%" height="15" fill="rgb(245,58,50)" fg:x="11939" fg:w="46"/><text x="78.7977%" y="415.50"></text></g><g><title>sleb128_decode (60 instructions, 0.39%)</title><rect x="78.8072%" y="405" width="0.3945%" height="15" fill="rgb(244,68,36)" fg:x="11985" fg:w="60"/><text x="79.1002%" y="415.50"></text></g><g><title>box_i32 (9 instructions, 0.06%)</title><rect x="79.2017%" y="405" width="0.0592%" height="15" fill="rgb(232,229,15)" fg:x="12045" fg:w="9"/><text x="79.4947%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="79.2609%" y="373" width="0.2170%" height="15" fill="rgb(254,30,23)" fg:x="12054" fg:w="33"/><text x="79.5539%" y="383.50"></text></g><g><title>memcpy (61 instructions, 0.40%)</title><rect x="79.4779%" y="373" width="0.4011%" height="15" fill="rgb(235,160,14)" fg:x="12087" fg:w="61"/><text x="79.7709%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="79.8790%" y="373" width="0.2170%" height="15" fill="rgb(212,155,44)" fg:x="12148" fg:w="33"/><text x="80.1720%" y="383.50"></text></g><g><title>reply_with_data (30 instructions, 0.20%)</title><rect x="80.0960%" y="373" width="0.1973%" height="15" fill="rgb(226,2,50)" fg:x="12181" fg:w="30"/><text x="80.3890%" y="383.50"></text></g><g><title>$lambda.19 (218 instructions, 1.43%)</title><rect x="79.2609%" y="389" width="1.4335%" height="15" fill="rgb(234,177,6)" fg:x="12054" fg:w="218"/><text x="79.5539%" y="399.50"></text></g><g><title>anon_async (222 instructions, 1.46%)</title><rect x="79.2609%" y="405" width="1.4598%" height="15" fill="rgb(217,24,9)" fg:x="12054" fg:w="222"/><text x="79.5539%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="80.7207%" y="405" width="0.2959%" height="15" fill="rgb(220,13,46)" fg:x="12276" fg:w="45"/><text x="81.0136%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="81.0166%" y="405" width="0.0855%" height="15" fill="rgb(239,221,27)" fg:x="12321" fg:w="13"/><text x="81.3095%" y="415.50"></text></g><g><title>__motoko_async_helper (6,455 instructions, 42.44%)</title><rect x="43.4574%" y="421" width="42.4448%" height="15" fill="rgb(222,198,25)" fg:x="6609" fg:w="6455"/><text x="43.7504%" y="431.50">__motoko_async_helper</text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="85.9022%" y="405" width="0.0526%" height="15" fill="rgb(211,99,13)" fg:x="13064" fg:w="8"/><text x="86.1951%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.30%)</title><rect x="85.9548%" y="405" width="0.2959%" height="15" fill="rgb(232,111,31)" fg:x="13072" fg:w="45"/><text x="86.2477%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="86.2507%" y="405" width="0.2170%" height="15" fill="rgb(245,82,37)" fg:x="13117" fg:w="33"/><text x="86.5436%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="86.4676%" y="373" width="0.3025%" height="15" fill="rgb(227,149,46)" fg:x="13150" fg:w="46"/><text x="86.7606%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="86.7701%" y="373" width="0.2170%" height="15" fill="rgb(218,36,50)" fg:x="13196" fg:w="33"/><text x="87.0631%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="86.9871%" y="373" width="0.3025%" height="15" fill="rgb(226,80,48)" fg:x="13229" fg:w="46"/><text x="87.2801%" y="383.50"></text></g><g><title>parse_idl_header (192 instructions, 1.26%)</title><rect x="86.4676%" y="389" width="1.2625%" height="15" fill="rgb(238,224,15)" fg:x="13150" fg:w="192"/><text x="86.7606%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="87.7301%" y="373" width="0.0197%" height="15" fill="rgb(241,136,10)" fg:x="13342" fg:w="3"/><text x="88.0231%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.04%)</title><rect x="87.7301%" y="389" width="0.0395%" height="15" fill="rgb(208,32,45)" fg:x="13342" fg:w="6"/><text x="88.0231%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="87.7696%" y="389" width="0.3025%" height="15" fill="rgb(207,135,9)" fg:x="13348" fg:w="46"/><text x="88.0626%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (361 instructions, 2.37%)</title><rect x="86.4676%" y="405" width="2.3738%" height="15" fill="rgb(206,86,44)" fg:x="13150" fg:w="361"/><text x="86.7606%" y="415.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="88.8414%" y="373" width="0.0986%" height="15" fill="rgb(245,177,15)" fg:x="13511" fg:w="15"/><text x="89.1344%" y="383.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="88.9400%" y="373" width="0.1512%" height="15" fill="rgb(206,64,50)" fg:x="13526" fg:w="23"/><text x="89.2330%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="89.0913%" y="373" width="0.1184%" height="15" fill="rgb(234,36,40)" fg:x="13549" fg:w="18"/><text x="89.3842%" y="383.50"></text></g><g><title>fulfill (106 instructions, 0.70%)</title><rect x="88.8414%" y="389" width="0.6970%" height="15" fill="rgb(213,64,8)" fg:x="13511" fg:w="106"/><text x="89.1344%" y="399.50"></text></g><g><title>$lambda.6 (113 instructions, 0.74%)</title><rect x="88.8414%" y="405" width="0.7430%" height="15" fill="rgb(210,75,36)" fg:x="13511" fg:w="113"/><text x="89.1344%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="89.5844%" y="405" width="0.2959%" height="15" fill="rgb(229,88,21)" fg:x="13624" fg:w="45"/><text x="89.8774%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="89.8803%" y="405" width="0.0855%" height="15" fill="rgb(252,204,47)" fg:x="13669" fg:w="13"/><text x="90.1733%" y="415.50"></text></g><g><title>trans_state5 (8 instructions, 0.05%)</title><rect x="92.9511%" y="405" width="0.0526%" height="15" fill="rgb(208,77,27)" fg:x="14136" fg:w="8"/><text x="93.2440%" y="415.50"></text></g><g><title>recall_continuation (45 instructions, 0.30%)</title><rect x="93.0037%" y="405" width="0.2959%" height="15" fill="rgb(221,76,26)" fg:x="14144" fg:w="45"/><text x="93.2967%" y="415.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="93.2996%" y="405" width="0.2170%" height="15" fill="rgb(225,139,18)" fg:x="14189" fg:w="33"/><text x="93.5925%" y="415.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="93.5166%" y="373" width="0.3025%" height="15" fill="rgb(230,137,11)" fg:x="14222" fg:w="46"/><text x="93.8095%" y="383.50"></text></g><g><title>motoko_rts::memory::alloc_blob::h89549146b02728af (33 instructions, 0.22%)</title><rect x="93.8190%" y="373" width="0.2170%" height="15" fill="rgb(212,28,1)" fg:x="14268" fg:w="33"/><text x="94.1120%" y="383.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="94.0360%" y="373" width="0.3025%" height="15" fill="rgb(248,164,17)" fg:x="14301" fg:w="46"/><text x="94.3290%" y="383.50"></text></g><g><title>parse_idl_header (192 instructions, 1.26%)</title><rect x="93.5166%" y="389" width="1.2625%" height="15" fill="rgb(222,171,42)" fg:x="14222" fg:w="192"/><text x="93.8095%" y="399.50"></text></g><g><title>memset (3 instructions, 0.02%)</title><rect x="94.7791%" y="373" width="0.0197%" height="15" fill="rgb(243,84,45)" fg:x="14414" fg:w="3"/><text x="95.0720%" y="383.50"></text></g><g><title>idl_sub_buf_init (6 instructions, 0.04%)</title><rect x="94.7791%" y="389" width="0.0395%" height="15" fill="rgb(252,49,23)" fg:x="14414" fg:w="6"/><text x="95.0720%" y="399.50"></text></g><g><title>leb128_decode (46 instructions, 0.30%)</title><rect x="94.8185%" y="389" width="0.3025%" height="15" fill="rgb(215,19,7)" fg:x="14420" fg:w="46"/><text x="95.1115%" y="399.50"></text></g><g><title>@deserialize&lt;&gt; (361 instructions, 2.37%)</title><rect x="93.5166%" y="405" width="2.3738%" height="15" fill="rgb(238,81,41)" fg:x="14222" fg:w="361"/><text x="93.8095%" y="415.50">@..</text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (15 instructions, 0.10%)</title><rect x="95.8903%" y="373" width="0.0986%" height="15" fill="rgb(210,199,37)" fg:x="14583" fg:w="15"/><text x="96.1833%" y="383.50"></text></g><g><title>to_2_tuple (23 instructions, 0.15%)</title><rect x="95.9890%" y="373" width="0.1512%" height="15" fill="rgb(244,192,49)" fg:x="14598" fg:w="23"/><text x="96.2819%" y="383.50"></text></g><g><title>opt_inject (18 instructions, 0.12%)</title><rect x="96.1402%" y="373" width="0.1184%" height="15" fill="rgb(226,211,11)" fg:x="14621" fg:w="18"/><text x="96.4332%" y="383.50"></text></g><g><title>fulfill (106 instructions, 0.70%)</title><rect x="95.8903%" y="389" width="0.6970%" height="15" fill="rgb(236,162,54)" fg:x="14583" fg:w="106"/><text x="96.1833%" y="399.50"></text></g><g><title>$lambda.6 (113 instructions, 0.74%)</title><rect x="95.8903%" y="405" width="0.7430%" height="15" fill="rgb(220,229,9)" fg:x="14583" fg:w="113"/><text x="96.1833%" y="415.50"></text></g><g><title>schedule_copying_gc (45 instructions, 0.30%)</title><rect x="96.6334%" y="405" width="0.2959%" height="15" fill="rgb(250,87,22)" fg:x="14696" fg:w="45"/><text x="96.9263%" y="415.50"></text></g><g><title>trans_state4 (13 instructions, 0.09%)</title><rect x="96.9292%" y="405" width="0.0855%" height="15" fill="rgb(239,43,17)" fg:x="14741" fg:w="13"/><text x="97.2222%" y="415.50"></text></g><g><title>all (15,208 instructions, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="15208"/><text x="0.2930%" y="447.50"></text></g><g><title>@callback&lt;u&gt; (2,144 instructions, 14.10%)</title><rect x="85.9022%" y="421" width="14.0978%" height="15" fill="rgb(219,179,1)" fg:x="13064" fg:w="2144"/><text x="86.1951%" y="431.50">@callback&lt;u&gt;</text></g></svg></svg>