<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="246" onload="init(evt)" viewBox="0 0 1024 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko_heartbeat</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="229.00"> </text><svg id="frames" x="10" width="1004" total_samples="8978"><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="0.0000%" y="117" width="0.2896%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="26"/><text x="0.2930%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="0.2896%" y="117" width="0.2896%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="26"/><text x="0.5826%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="0.5792%" y="117" width="0.2896%" height="15" fill="rgb(221,193,54)" fg:x="52" fg:w="26"/><text x="0.8722%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="0.8688%" y="117" width="0.2896%" height="15" fill="rgb(248,212,6)" fg:x="78" fg:w="26"/><text x="1.1618%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="1.1584%" y="117" width="0.2896%" height="15" fill="rgb(208,68,35)" fg:x="104" fg:w="26"/><text x="1.4514%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="1.4480%" y="117" width="0.2896%" height="15" fill="rgb(232,128,0)" fg:x="130" fg:w="26"/><text x="1.7410%" y="127.50"></text></g><g><title>@new_async (266 instructions, 2.96%)</title><rect x="0.0000%" y="133" width="2.9628%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="266"/><text x="0.2930%" y="143.50">@n..</text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="2.9628%" y="133" width="0.2896%" height="15" fill="rgb(228,23,34)" fg:x="266" fg:w="26"/><text x="3.2558%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="3.2524%" y="133" width="0.2896%" height="15" fill="rgb(218,30,26)" fg:x="292" fg:w="26"/><text x="3.5454%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="3.5420%" y="101" width="0.3787%" height="15" fill="rgb(220,122,19)" fg:x="318" fg:w="34"/><text x="3.8350%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="3.5420%" y="117" width="0.4010%" height="15" fill="rgb(250,228,42)" fg:x="318" fg:w="36"/><text x="3.8350%" y="127.50"></text></g><g><title>canister_self (46 instructions, 0.51%)</title><rect x="3.5420%" y="133" width="0.5124%" height="15" fill="rgb(240,193,28)" fg:x="318" fg:w="46"/><text x="3.8350%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="4.0544%" y="117" width="0.2896%" height="15" fill="rgb(216,20,37)" fg:x="364" fg:w="26"/><text x="4.3473%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.46%)</title><rect x="4.0544%" y="133" width="0.4567%" height="15" fill="rgb(206,188,39)" fg:x="364" fg:w="41"/><text x="4.3473%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.08%)</title><rect x="4.5110%" y="133" width="0.0780%" height="15" fill="rgb(217,207,13)" fg:x="405" fg:w="7"/><text x="4.8040%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="4.5890%" y="101" width="0.3787%" height="15" fill="rgb(231,73,38)" fg:x="412" fg:w="34"/><text x="4.8820%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="4.5890%" y="117" width="0.4010%" height="15" fill="rgb(225,20,46)" fg:x="412" fg:w="36"/><text x="4.8820%" y="127.50"></text></g><g><title>canister_self (46 instructions, 0.51%)</title><rect x="4.5890%" y="133" width="0.5124%" height="15" fill="rgb(210,31,41)" fg:x="412" fg:w="46"/><text x="4.8820%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="5.1014%" y="117" width="0.2896%" height="15" fill="rgb(221,200,47)" fg:x="458" fg:w="26"/><text x="5.3943%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.46%)</title><rect x="5.1014%" y="133" width="0.4567%" height="15" fill="rgb(226,26,5)" fg:x="458" fg:w="41"/><text x="5.3943%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.08%)</title><rect x="5.5580%" y="133" width="0.0780%" height="15" fill="rgb(249,33,26)" fg:x="499" fg:w="7"/><text x="5.8510%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="5.6360%" y="133" width="0.2896%" height="15" fill="rgb(235,183,28)" fg:x="506" fg:w="26"/><text x="5.9290%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_array::h46eb48fb0843db64 (39 instructions, 0.43%)</title><rect x="5.9256%" y="117" width="0.4344%" height="15" fill="rgb(221,5,38)" fg:x="532" fg:w="39"/><text x="6.2186%" y="127.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.10%)</title><rect x="6.3600%" y="117" width="0.1002%" height="15" fill="rgb(247,18,42)" fg:x="571" fg:w="9"/><text x="6.6530%" y="127.50"></text></g><g><title>remember_continuation (3,725 instructions, 41.49%)</title><rect x="5.9256%" y="133" width="41.4903%" height="15" fill="rgb(241,131,45)" fg:x="532" fg:w="3725"/><text x="6.2186%" y="143.50">remember_continuation</text></g><g><title>box_i32 (9 instructions, 0.10%)</title><rect x="47.4159%" y="133" width="0.1002%" height="15" fill="rgb(249,31,29)" fg:x="4257" fg:w="9"/><text x="47.7089%" y="143.50"></text></g><g><title>@buffer_size&lt;n32&gt; (18 instructions, 0.20%)</title><rect x="47.5162%" y="117" width="0.2005%" height="15" fill="rgb(225,111,53)" fg:x="4266" fg:w="18"/><text x="47.8091%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="47.7166%" y="101" width="0.3787%" height="15" fill="rgb(238,160,17)" fg:x="4284" fg:w="34"/><text x="48.0096%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="47.7166%" y="117" width="0.4010%" height="15" fill="rgb(214,148,48)" fg:x="4284" fg:w="36"/><text x="48.0096%" y="127.50"></text></g><g><title>memcpy (66 instructions, 0.74%)</title><rect x="48.1176%" y="117" width="0.7351%" height="15" fill="rgb(232,36,49)" fg:x="4320" fg:w="66"/><text x="48.4106%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="48.8528%" y="101" width="0.3787%" height="15" fill="rgb(209,103,24)" fg:x="4386" fg:w="34"/><text x="49.1457%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="48.8528%" y="117" width="0.4010%" height="15" fill="rgb(229,88,8)" fg:x="4386" fg:w="36"/><text x="49.1457%" y="127.50"></text></g><g><title>unbox_i32 (6 instructions, 0.07%)</title><rect x="49.2537%" y="101" width="0.0668%" height="15" fill="rgb(213,181,19)" fg:x="4422" fg:w="6"/><text x="49.5467%" y="111.50"></text></g><g><title>@serialize_go&lt;n32&gt; (17 instructions, 0.19%)</title><rect x="49.2537%" y="117" width="0.1894%" height="15" fill="rgb(254,191,54)" fg:x="4422" fg:w="17"/><text x="49.5467%" y="127.50"></text></g><g><title>@serialize&lt;n32&gt; (236 instructions, 2.63%)</title><rect x="47.5162%" y="133" width="2.6286%" height="15" fill="rgb(241,83,37)" fg:x="4266" fg:w="236"/><text x="47.8091%" y="143.50">@..</text></g><g><title>@reset_cycles (3 instructions, 0.03%)</title><rect x="50.1448%" y="117" width="0.0334%" height="15" fill="rgb(233,36,39)" fg:x="4502" fg:w="3"/><text x="50.4378%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.42%)</title><rect x="50.1782%" y="37" width="0.4233%" height="15" fill="rgb(226,3,54)" fg:x="4505" fg:w="38"/><text x="50.4712%" y="47.50"></text></g><g><title>memset (244 instructions, 2.72%)</title><rect x="50.6015%" y="37" width="2.7178%" height="15" fill="rgb(245,192,40)" fg:x="4543" fg:w="244"/><text x="50.8944%" y="47.50">m..</text></g><g><title>mp_calloc (308 instructions, 3.43%)</title><rect x="50.1782%" y="53" width="3.4306%" height="15" fill="rgb(238,167,29)" fg:x="4505" fg:w="308"/><text x="50.4712%" y="63.50">mp..</text></g><g><title>mp_init (323 instructions, 3.60%)</title><rect x="50.1782%" y="69" width="3.5977%" height="15" fill="rgb(232,182,51)" fg:x="4505" fg:w="323"/><text x="50.4712%" y="79.50">mp_..</text></g><g><title>mp_set_u64 (480 instructions, 5.35%)</title><rect x="53.7759%" y="53" width="5.3464%" height="15" fill="rgb(231,60,39)" fg:x="4828" fg:w="480"/><text x="54.0689%" y="63.50">mp_se..</text></g><g><title>mp_set_i64 (494 instructions, 5.50%)</title><rect x="53.7759%" y="69" width="5.5023%" height="15" fill="rgb(208,69,12)" fg:x="4828" fg:w="494"/><text x="54.0689%" y="79.50">mp_se..</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.35%)</title><rect x="59.2782%" y="69" width="0.3453%" height="15" fill="rgb(235,93,37)" fg:x="5322" fg:w="31"/><text x="59.5712%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 9.92%)</title><rect x="50.1782%" y="85" width="9.9243%" height="15" fill="rgb(213,116,39)" fg:x="4505" fg:w="891"/><text x="50.4712%" y="95.50">bigint_of_in..</text></g><g><title>mp_cmp_mag (17 instructions, 0.19%)</title><rect x="60.1025%" y="53" width="0.1894%" height="15" fill="rgb(222,207,29)" fg:x="5396" fg:w="17"/><text x="60.3954%" y="63.50"></text></g><g><title>mp_cmp (31 instructions, 0.35%)</title><rect x="60.1025%" y="69" width="0.3453%" height="15" fill="rgb(206,96,30)" fg:x="5396" fg:w="31"/><text x="60.3954%" y="79.50"></text></g><g><title>bigint_lt (54 instructions, 0.60%)</title><rect x="60.1025%" y="85" width="0.6015%" height="15" fill="rgb(218,138,4)" fg:x="5396" fg:w="54"/><text x="60.3954%" y="95.50"></text></g><g><title>B_lt (963 instructions, 10.73%)</title><rect x="50.1782%" y="101" width="10.7262%" height="15" fill="rgb(250,191,14)" fg:x="4505" fg:w="963"/><text x="50.4712%" y="111.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.13%)</title><rect x="60.9044%" y="101" width="0.1337%" height="15" fill="rgb(239,60,40)" fg:x="5468" fg:w="12"/><text x="61.1974%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 11.13%)</title><rect x="50.1782%" y="117" width="11.1272%" height="15" fill="rgb(206,27,48)" fg:x="4505" fg:w="999"/><text x="50.4712%" y="127.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 11.24%)</title><rect x="50.1448%" y="133" width="11.2386%" height="15" fill="rgb(225,35,8)" fg:x="4502" fg:w="1009"/><text x="50.4378%" y="143.50">@add_cycles</text></g><g><title>heartbeat (5,648 instructions, 62.91%)</title><rect x="0.0000%" y="149" width="62.9093%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="5648"/><text x="0.2930%" y="159.50">heartbeat</text></g><g><title>@call_succeeded (2 instructions, 0.02%)</title><rect x="62.9093%" y="149" width="0.0223%" height="15" fill="rgb(247,123,22)" fg:x="5648" fg:w="2"/><text x="63.2023%" y="159.50"></text></g><g><title>heartbeat_exp (5,656 instructions, 63.00%)</title><rect x="0.0000%" y="165" width="62.9984%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="5656"/><text x="0.2930%" y="175.50">heartbeat_exp</text></g><g><title>canister_heartbeat (5,860 instructions, 65.27%)</title><rect x="0.0000%" y="181" width="65.2707%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="5860"/><text x="0.2930%" y="191.50">canister_heartbeat</text></g><g><title>trans_state5 (9 instructions, 0.10%)</title><rect x="65.2707%" y="165" width="0.1002%" height="15" fill="rgb(251,118,11)" fg:x="5860" fg:w="9"/><text x="65.5636%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="65.3709%" y="149" width="0.3787%" height="15" fill="rgb(217,147,25)" fg:x="5869" fg:w="34"/><text x="65.6639%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="65.7719%" y="149" width="0.3787%" height="15" fill="rgb(247,81,37)" fg:x="5905" fg:w="34"/><text x="66.0649%" y="159.50"></text></g><g><title>alloc_blob (72 instructions, 0.80%)</title><rect x="65.3709%" y="165" width="0.8020%" height="15" fill="rgb(209,12,38)" fg:x="5869" fg:w="72"/><text x="65.6639%" y="175.50"></text></g><g><title>memcmp (217 instructions, 2.42%)</title><rect x="66.1729%" y="165" width="2.4170%" height="15" fill="rgb(227,1,9)" fg:x="5941" fg:w="217"/><text x="66.4658%" y="175.50">m..</text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="68.5899%" y="149" width="0.3787%" height="15" fill="rgb(248,47,43)" fg:x="6158" fg:w="34"/><text x="68.8829%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="68.5899%" y="165" width="0.4010%" height="15" fill="rgb(221,10,30)" fg:x="6158" fg:w="36"/><text x="68.8829%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="68.9909%" y="133" width="0.5681%" height="15" fill="rgb(210,229,1)" fg:x="6194" fg:w="51"/><text x="69.2838%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="69.5589%" y="133" width="0.3787%" height="15" fill="rgb(222,148,37)" fg:x="6245" fg:w="34"/><text x="69.8519%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="69.9376%" y="133" width="0.5681%" height="15" fill="rgb(234,67,33)" fg:x="6279" fg:w="51"/><text x="70.2306%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 0.76%)</title><rect x="70.5057%" y="133" width="0.7574%" height="15" fill="rgb(247,98,35)" fg:x="6330" fg:w="68"/><text x="70.7986%" y="143.50"></text></g><g><title>parse_idl_header (290 instructions, 3.23%)</title><rect x="68.9909%" y="149" width="3.2301%" height="15" fill="rgb(247,138,52)" fg:x="6194" fg:w="290"/><text x="69.2838%" y="159.50">pa..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.10%)</title><rect x="72.2210%" y="149" width="0.1002%" height="15" fill="rgb(213,79,30)" fg:x="6484" fg:w="9"/><text x="72.5140%" y="159.50"></text></g><g><title>memset (4 instructions, 0.04%)</title><rect x="72.3212%" y="133" width="0.0446%" height="15" fill="rgb(246,177,23)" fg:x="6493" fg:w="4"/><text x="72.6142%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.21%)</title><rect x="72.3212%" y="149" width="0.2116%" height="15" fill="rgb(230,62,27)" fg:x="6493" fg:w="19"/><text x="72.6142%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="72.5329%" y="149" width="0.5681%" height="15" fill="rgb(216,154,8)" fg:x="6512" fg:w="51"/><text x="72.8258%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 0.76%)</title><rect x="73.1009%" y="149" width="0.7574%" height="15" fill="rgb(244,35,45)" fg:x="6563" fg:w="68"/><text x="73.3939%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.03%)</title><rect x="73.8583%" y="149" width="0.0334%" height="15" fill="rgb(251,115,12)" fg:x="6631" fg:w="3"/><text x="74.1513%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.03%)</title><rect x="73.8917%" y="149" width="0.0334%" height="15" fill="rgb(240,54,50)" fg:x="6634" fg:w="3"/><text x="74.1847%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.03%)</title><rect x="73.9252%" y="149" width="0.0334%" height="15" fill="rgb(233,84,52)" fg:x="6637" fg:w="3"/><text x="74.2181%" y="159.50"></text></g><g><title>box_i32 (9 instructions, 0.10%)</title><rect x="73.9586%" y="133" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="6640" fg:w="9"/><text x="74.2515%" y="143.50"></text></g><g><title>@deserialize_go&lt;n32&gt; (46 instructions, 0.51%)</title><rect x="73.9586%" y="149" width="0.5124%" height="15" fill="rgb(249,43,39)" fg:x="6640" fg:w="46"/><text x="74.2515%" y="159.50"></text></g><g><title>@deserialize&lt;n32&gt; (696 instructions, 7.75%)</title><rect x="68.9909%" y="165" width="7.7523%" height="15" fill="rgb(209,38,44)" fg:x="6194" fg:w="696"/><text x="69.2838%" y="175.50">@deserial..</text></g><g><title>unbox_i32 (6 instructions, 0.07%)</title><rect x="76.7431%" y="165" width="0.0668%" height="15" fill="rgb(236,212,23)" fg:x="6890" fg:w="6"/><text x="77.0361%" y="175.50"></text></g><g><title>peek_future_continuation (36 instructions, 0.40%)</title><rect x="76.8100%" y="165" width="0.4010%" height="15" fill="rgb(242,79,21)" fg:x="6896" fg:w="36"/><text x="77.1029%" y="175.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.16%)</title><rect x="77.2110%" y="101" width="0.1559%" height="15" fill="rgb(211,96,35)" fg:x="6932" fg:w="14"/><text x="77.5039%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="77.3669%" y="85" width="0.3787%" height="15" fill="rgb(253,215,40)" fg:x="6946" fg:w="34"/><text x="77.6599%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="77.3669%" y="101" width="0.4010%" height="15" fill="rgb(211,81,21)" fg:x="6946" fg:w="36"/><text x="77.6599%" y="111.50"></text></g><g><title>memcpy (63 instructions, 0.70%)</title><rect x="77.7679%" y="101" width="0.7017%" height="15" fill="rgb(208,190,38)" fg:x="6982" fg:w="63"/><text x="78.0608%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="78.4696%" y="85" width="0.3787%" height="15" fill="rgb(235,213,38)" fg:x="7045" fg:w="34"/><text x="78.7626%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="78.4696%" y="101" width="0.4010%" height="15" fill="rgb(237,122,38)" fg:x="7045" fg:w="36"/><text x="78.7626%" y="111.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.04%)</title><rect x="78.8706%" y="101" width="0.0446%" height="15" fill="rgb(244,218,35)" fg:x="7081" fg:w="4"/><text x="79.1635%" y="111.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 2.41%)</title><rect x="77.2110%" y="117" width="2.4059%" height="15" fill="rgb(240,68,47)" fg:x="6932" fg:w="216"/><text x="77.5039%" y="127.50">@..</text></g><g><title>reply_with_data (30 instructions, 0.33%)</title><rect x="79.6168%" y="117" width="0.3342%" height="15" fill="rgb(210,16,53)" fg:x="7148" fg:w="30"/><text x="79.9098%" y="127.50"></text></g><g><title>$lambda (251 instructions, 2.80%)</title><rect x="77.2110%" y="133" width="2.7957%" height="15" fill="rgb(235,124,12)" fg:x="6932" fg:w="251"/><text x="77.5039%" y="143.50">$l..</text></g><g><title>$lambda (256 instructions, 2.85%)</title><rect x="77.2110%" y="149" width="2.8514%" height="15" fill="rgb(224,169,11)" fg:x="6932" fg:w="256"/><text x="77.5039%" y="159.50">$l..</text></g><g><title>anon_async (260 instructions, 2.90%)</title><rect x="77.2110%" y="165" width="2.8960%" height="15" fill="rgb(250,166,2)" fg:x="6932" fg:w="260"/><text x="77.5039%" y="175.50">an..</text></g><g><title>schedule_copying_gc (50 instructions, 0.56%)</title><rect x="80.1069%" y="165" width="0.5569%" height="15" fill="rgb(242,216,29)" fg:x="7192" fg:w="50"/><text x="80.3999%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.16%)</title><rect x="80.6638%" y="165" width="0.1559%" height="15" fill="rgb(230,116,27)" fg:x="7242" fg:w="14"/><text x="80.9568%" y="175.50"></text></g><g><title>__motoko_async_helper (1,885 instructions, 21.00%)</title><rect x="65.2707%" y="181" width="20.9958%" height="15" fill="rgb(228,99,48)" fg:x="5860" fg:w="1885"/><text x="65.5636%" y="191.50">__motoko_async_helper</text></g><g><title>trans_state5 (9 instructions, 0.10%)</title><rect x="86.2664%" y="165" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="7745" fg:w="9"/><text x="86.5594%" y="175.50"></text></g><g><title>recall_continuation (57 instructions, 0.63%)</title><rect x="86.3667%" y="165" width="0.6349%" height="15" fill="rgb(247,143,39)" fg:x="7754" fg:w="57"/><text x="86.6596%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="87.0016%" y="149" width="0.3787%" height="15" fill="rgb(236,97,10)" fg:x="7811" fg:w="34"/><text x="87.2945%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.40%)</title><rect x="87.0016%" y="165" width="0.4010%" height="15" fill="rgb(233,208,19)" fg:x="7811" fg:w="36"/><text x="87.2945%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="87.4025%" y="133" width="0.5681%" height="15" fill="rgb(216,164,2)" fg:x="7847" fg:w="51"/><text x="87.6955%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.38%)</title><rect x="87.9706%" y="133" width="0.3787%" height="15" fill="rgb(220,129,5)" fg:x="7898" fg:w="34"/><text x="88.2636%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="88.3493%" y="133" width="0.5681%" height="15" fill="rgb(242,17,10)" fg:x="7932" fg:w="51"/><text x="88.6423%" y="143.50"></text></g><g><title>parse_idl_header (207 instructions, 2.31%)</title><rect x="87.4025%" y="149" width="2.3056%" height="15" fill="rgb(242,107,0)" fg:x="7847" fg:w="207"/><text x="87.6955%" y="159.50">p..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.10%)</title><rect x="89.7082%" y="149" width="0.1002%" height="15" fill="rgb(251,28,31)" fg:x="8054" fg:w="9"/><text x="90.0011%" y="159.50"></text></g><g><title>memset (4 instructions, 0.04%)</title><rect x="89.8084%" y="133" width="0.0446%" height="15" fill="rgb(233,223,10)" fg:x="8063" fg:w="4"/><text x="90.1014%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.21%)</title><rect x="89.8084%" y="149" width="0.2116%" height="15" fill="rgb(215,21,27)" fg:x="8063" fg:w="19"/><text x="90.1014%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.57%)</title><rect x="90.0200%" y="149" width="0.5681%" height="15" fill="rgb(232,23,21)" fg:x="8082" fg:w="51"/><text x="90.3130%" y="159.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 4.86%)</title><rect x="87.4025%" y="165" width="4.8563%" height="15" fill="rgb(244,5,23)" fg:x="7847" fg:w="436"/><text x="87.6955%" y="175.50">@dese..</text></g><g><title>from_word128_ptr (17 instructions, 0.19%)</title><rect x="92.2589%" y="101" width="0.1894%" height="15" fill="rgb(226,81,46)" fg:x="8283" fg:w="17"/><text x="92.5518%" y="111.50"></text></g><g><title>cycle_refunded (30 instructions, 0.33%)</title><rect x="92.2589%" y="117" width="0.3342%" height="15" fill="rgb(247,70,30)" fg:x="8283" fg:w="30"/><text x="92.5518%" y="127.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.36%)</title><rect x="92.2589%" y="133" width="0.3564%" height="15" fill="rgb(212,68,19)" fg:x="8283" fg:w="32"/><text x="92.5518%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="92.6153%" y="133" width="0.2896%" height="15" fill="rgb(240,187,13)" fg:x="8315" fg:w="26"/><text x="92.9083%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.29%)</title><rect x="92.9049%" y="117" width="0.2896%" height="15" fill="rgb(223,113,26)" fg:x="8341" fg:w="26"/><text x="93.1978%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.46%)</title><rect x="92.9049%" y="133" width="0.4567%" height="15" fill="rgb(206,192,2)" fg:x="8341" fg:w="41"/><text x="93.1978%" y="143.50"></text></g><g><title>opt_inject (14 instructions, 0.16%)</title><rect x="93.3616%" y="133" width="0.1559%" height="15" fill="rgb(241,108,4)" fg:x="8382" fg:w="14"/><text x="93.6545%" y="143.50"></text></g><g><title>fulfill (167 instructions, 1.86%)</title><rect x="92.2589%" y="149" width="1.8601%" height="15" fill="rgb(247,173,49)" fg:x="8283" fg:w="167"/><text x="92.5518%" y="159.50"></text></g><g><title>$lambda (175 instructions, 1.95%)</title><rect x="92.2589%" y="165" width="1.9492%" height="15" fill="rgb(224,114,35)" fg:x="8283" fg:w="175"/><text x="92.5518%" y="175.50"></text></g><g><title>schedule_copying_gc (50 instructions, 0.56%)</title><rect x="94.2081%" y="165" width="0.5569%" height="15" fill="rgb(245,159,27)" fg:x="8458" fg:w="50"/><text x="94.5010%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.16%)</title><rect x="94.7650%" y="165" width="0.1559%" height="15" fill="rgb(245,172,44)" fg:x="8508" fg:w="14"/><text x="95.0579%" y="175.50"></text></g><g><title>all (8,978 instructions, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="8978"/><text x="0.2930%" y="207.50"></text></g><g><title>@callback&lt;u&gt; (1,233 instructions, 13.73%)</title><rect x="86.2664%" y="181" width="13.7336%" height="15" fill="rgb(205,117,38)" fg:x="7745" fg:w="1233"/><text x="86.5594%" y="191.50">@callback&lt;u&gt;</text></g></svg></svg>