<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="150" onload="init(evt)" viewBox="0 0 1024 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="150" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko_heartbeat</text><text id="details" fill="rgb(0,0,0)" x="10" y="133.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="133.00"> </text><svg id="frames" x="10" width="1004" total_samples="23310"><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="0.0000%" y="53" width="0.0858%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="20"/><text x="0.2930%" y="63.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="0.0858%" y="53" width="0.0858%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="20"/><text x="0.3788%" y="63.50"></text></g><g><title>alloc_size&lt;2&gt;_tag&lt;9&gt; (20 instructions, 0.09%)</title><rect x="0.1716%" y="53" width="0.0858%" height="15" fill="rgb(221,193,54)" fg:x="40" fg:w="20"/><text x="0.4646%" y="63.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="0.2574%" y="53" width="0.0215%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="5"/><text x="0.5504%" y="63.50"></text></g><g><title>alloc_size&lt;7&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="0.2789%" y="53" width="0.0858%" height="15" fill="rgb(208,68,35)" fg:x="65" fg:w="20"/><text x="0.5718%" y="63.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="0.3647%" y="53" width="0.0858%" height="15" fill="rgb(232,128,0)" fg:x="85" fg:w="20"/><text x="0.6576%" y="63.50"></text></g><g><title>alloc_size&lt;6&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="0.4505%" y="53" width="0.0858%" height="15" fill="rgb(207,160,47)" fg:x="105" fg:w="20"/><text x="0.7434%" y="63.50"></text></g><g><title>@new_async (240 instructions, 1.03%)</title><rect x="0.0000%" y="69" width="1.0296%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="240"/><text x="0.2930%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="1.0296%" y="69" width="0.0858%" height="15" fill="rgb(218,30,26)" fg:x="240" fg:w="20"/><text x="1.3226%" y="79.50"></text></g><g><title>alloc_size&lt;4&gt;_tag&lt;11&gt; (20 instructions, 0.09%)</title><rect x="1.1154%" y="69" width="0.0858%" height="15" fill="rgb(220,122,19)" fg:x="260" fg:w="20"/><text x="1.4084%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="1.2012%" y="53" width="0.2402%" height="15" fill="rgb(250,228,42)" fg:x="280" fg:w="56"/><text x="1.4942%" y="63.50"></text></g><g><title>canister_self (1,089 instructions, 4.67%)</title><rect x="1.2012%" y="69" width="4.6718%" height="15" fill="rgb(240,193,28)" fg:x="280" fg:w="1089"/><text x="1.4942%" y="79.50">cani..</text></g><g><title>to_2_tuple (28 instructions, 0.12%)</title><rect x="5.8730%" y="69" width="0.1201%" height="15" fill="rgb(216,20,37)" fg:x="1369" fg:w="28"/><text x="6.1660%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="5.9931%" y="53" width="0.2402%" height="15" fill="rgb(206,188,39)" fg:x="1397" fg:w="56"/><text x="6.2861%" y="63.50"></text></g><g><title>canister_self (1,089 instructions, 4.67%)</title><rect x="5.9931%" y="69" width="4.6718%" height="15" fill="rgb(217,207,13)" fg:x="1397" fg:w="1089"/><text x="6.2861%" y="79.50">cani..</text></g><g><title>to_2_tuple (28 instructions, 0.12%)</title><rect x="10.6650%" y="69" width="0.1201%" height="15" fill="rgb(231,73,38)" fg:x="2486" fg:w="28"/><text x="10.9579%" y="79.50"></text></g><g><title>alloc_size&lt;5&gt;_tag&lt;5&gt; (20 instructions, 0.09%)</title><rect x="10.7851%" y="69" width="0.0858%" height="15" fill="rgb(225,20,46)" fg:x="2514" fg:w="20"/><text x="11.0780%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_array::hb917ee2339b51a3d (60 instructions, 0.26%)</title><rect x="10.8709%" y="53" width="0.2574%" height="15" fill="rgb(210,31,41)" fg:x="2534" fg:w="60"/><text x="11.1638%" y="63.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::post_write_barrier::h5655b5a44d0eee34 (9 instructions, 0.04%)</title><rect x="11.1283%" y="53" width="0.0386%" height="15" fill="rgb(221,200,47)" fg:x="2594" fg:w="9"/><text x="11.4212%" y="63.50"></text></g><g><title>remember_continuation (3,993 instructions, 17.13%)</title><rect x="10.8709%" y="69" width="17.1300%" height="15" fill="rgb(226,26,5)" fg:x="2534" fg:w="3993"/><text x="11.1638%" y="79.50">remember_continuation</text></g><g><title>box_i32 (11 instructions, 0.05%)</title><rect x="28.0009%" y="69" width="0.0472%" height="15" fill="rgb(249,33,26)" fg:x="6527" fg:w="11"/><text x="28.2938%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="28.0480%" y="53" width="0.2402%" height="15" fill="rgb(235,183,28)" fg:x="6538" fg:w="56"/><text x="28.3410%" y="63.50"></text></g><g><title>memcpy (72 instructions, 0.31%)</title><rect x="28.2883%" y="53" width="0.3089%" height="15" fill="rgb(221,5,38)" fg:x="6594" fg:w="72"/><text x="28.5813%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="28.5972%" y="53" width="0.2402%" height="15" fill="rgb(247,18,42)" fg:x="6666" fg:w="56"/><text x="28.8901%" y="63.50"></text></g><g><title>@serialize&lt;n32&gt; (281 instructions, 1.21%)</title><rect x="28.0480%" y="69" width="1.2055%" height="15" fill="rgb(241,131,45)" fg:x="6538" fg:w="281"/><text x="28.3410%" y="79.50"></text></g><g><title>B_eq (5 instructions, 0.02%)</title><rect x="29.2535%" y="53" width="0.0215%" height="15" fill="rgb(249,31,29)" fg:x="6819" fg:w="5"/><text x="29.5465%" y="63.50"></text></g><g><title>@add_cycles (21 instructions, 0.09%)</title><rect x="29.2535%" y="69" width="0.0901%" height="15" fill="rgb(225,111,53)" fg:x="6819" fg:w="21"/><text x="29.5465%" y="79.50"></text></g><g><title>canister_heartbeat (14,733 instructions, 63.20%)</title><rect x="0.0000%" y="85" width="63.2046%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="14733"/><text x="0.2930%" y="95.50">canister_heartbeat</text></g><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="63.2046%" y="69" width="0.0429%" height="15" fill="rgb(214,148,48)" fg:x="14733" fg:w="10"/><text x="63.4976%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="63.2475%" y="69" width="0.2402%" height="15" fill="rgb(232,36,49)" fg:x="14743" fg:w="56"/><text x="63.5405%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="63.4878%" y="69" width="0.2402%" height="15" fill="rgb(209,103,24)" fg:x="14799" fg:w="56"/><text x="63.7807%" y="79.50"></text></g><g><title>memcmp (238 instructions, 1.02%)</title><rect x="63.7280%" y="69" width="1.0210%" height="15" fill="rgb(229,88,8)" fg:x="14855" fg:w="238"/><text x="64.0210%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="64.7490%" y="69" width="0.2402%" height="15" fill="rgb(213,181,19)" fg:x="15093" fg:w="56"/><text x="65.0420%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="64.9893%" y="53" width="0.2145%" height="15" fill="rgb(254,191,54)" fg:x="15149" fg:w="50"/><text x="65.2822%" y="63.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="65.2038%" y="53" width="0.2402%" height="15" fill="rgb(241,83,37)" fg:x="15199" fg:w="56"/><text x="65.4967%" y="63.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="65.4440%" y="53" width="0.2145%" height="15" fill="rgb(233,36,39)" fg:x="15255" fg:w="50"/><text x="65.7370%" y="63.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="65.6585%" y="53" width="0.2746%" height="15" fill="rgb(226,3,54)" fg:x="15305" fg:w="64"/><text x="65.9515%" y="63.50"></text></g><g><title>motoko_rts::idl::check_typearg::h19d486bd76900e6f (12 instructions, 0.05%)</title><rect x="65.9331%" y="53" width="0.0515%" height="15" fill="rgb(245,192,40)" fg:x="15369" fg:w="12"/><text x="66.2260%" y="63.50"></text></g><g><title>parse_idl_header (339 instructions, 1.45%)</title><rect x="64.9893%" y="69" width="1.4543%" height="15" fill="rgb(238,167,29)" fg:x="15149" fg:w="339"/><text x="65.2822%" y="79.50"></text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="66.4436%" y="53" width="0.0257%" height="15" fill="rgb(232,182,51)" fg:x="15488" fg:w="6"/><text x="66.7366%" y="63.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.06%)</title><rect x="66.4436%" y="69" width="0.0644%" height="15" fill="rgb(231,60,39)" fg:x="15488" fg:w="15"/><text x="66.7366%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="66.5079%" y="69" width="0.2145%" height="15" fill="rgb(208,69,12)" fg:x="15503" fg:w="50"/><text x="66.8009%" y="79.50"></text></g><g><title>sleb128_decode (64 instructions, 0.27%)</title><rect x="66.7224%" y="69" width="0.2746%" height="15" fill="rgb(235,93,37)" fg:x="15553" fg:w="64"/><text x="67.0154%" y="79.50"></text></g><g><title>box_i32 (11 instructions, 0.05%)</title><rect x="66.9970%" y="69" width="0.0472%" height="15" fill="rgb(213,116,39)" fg:x="15617" fg:w="11"/><text x="67.2900%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="67.0442%" y="37" width="0.2402%" height="15" fill="rgb(222,207,29)" fg:x="15628" fg:w="56"/><text x="67.3372%" y="47.50"></text></g><g><title>memcpy (70 instructions, 0.30%)</title><rect x="67.2844%" y="37" width="0.3003%" height="15" fill="rgb(206,96,30)" fg:x="15684" fg:w="70"/><text x="67.5774%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="67.5847%" y="37" width="0.2402%" height="15" fill="rgb(218,138,4)" fg:x="15754" fg:w="56"/><text x="67.8777%" y="47.50"></text></g><g><title>reply_with_data (1,019 instructions, 4.37%)</title><rect x="67.8250%" y="37" width="4.3715%" height="15" fill="rgb(250,191,14)" fg:x="15810" fg:w="1019"/><text x="68.1179%" y="47.50">repl..</text></g><g><title>$lambda.14 (1,293 instructions, 5.55%)</title><rect x="67.0442%" y="53" width="5.5470%" height="15" fill="rgb(239,60,40)" fg:x="15628" fg:w="1293"/><text x="67.3372%" y="63.50">$lambd..</text></g><g><title>anon_async (1,307 instructions, 5.61%)</title><rect x="67.0442%" y="69" width="5.6070%" height="15" fill="rgb(206,27,48)" fg:x="15628" fg:w="1307"/><text x="67.3372%" y="79.50">anon_a..</text></g><g><title>schedule_copying_gc (108 instructions, 0.46%)</title><rect x="72.6512%" y="69" width="0.4633%" height="15" fill="rgb(225,35,8)" fg:x="16935" fg:w="108"/><text x="72.9442%" y="79.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="73.1145%" y="69" width="0.0686%" height="15" fill="rgb(250,213,24)" fg:x="17043" fg:w="16"/><text x="73.4075%" y="79.50"></text></g><g><title>__motoko_async_helper (6,216 instructions, 26.67%)</title><rect x="63.2046%" y="85" width="26.6667%" height="15" fill="rgb(247,123,22)" fg:x="14733" fg:w="6216"/><text x="63.4976%" y="95.50">__motoko_async_helper</text></g><g><title>trans_state5 (10 instructions, 0.04%)</title><rect x="89.8713%" y="69" width="0.0429%" height="15" fill="rgb(231,138,38)" fg:x="20949" fg:w="10"/><text x="90.1643%" y="79.50"></text></g><g><title>recall_continuation (49 instructions, 0.21%)</title><rect x="89.9142%" y="69" width="0.2102%" height="15" fill="rgb(231,145,46)" fg:x="20959" fg:w="49"/><text x="90.2072%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="90.1244%" y="69" width="0.2402%" height="15" fill="rgb(251,118,11)" fg:x="21008" fg:w="56"/><text x="90.4174%" y="79.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="90.3647%" y="37" width="0.2145%" height="15" fill="rgb(217,147,25)" fg:x="21064" fg:w="50"/><text x="90.6576%" y="47.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hea4ad5c01bb8a8f5 (56 instructions, 0.24%)</title><rect x="90.5792%" y="37" width="0.2402%" height="15" fill="rgb(247,81,37)" fg:x="21114" fg:w="56"/><text x="90.8721%" y="47.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="90.8194%" y="37" width="0.2145%" height="15" fill="rgb(209,12,38)" fg:x="21170" fg:w="50"/><text x="91.1124%" y="47.50"></text></g><g><title>parse_idl_header (245 instructions, 1.05%)</title><rect x="90.3647%" y="53" width="1.0511%" height="15" fill="rgb(227,1,9)" fg:x="21064" fg:w="245"/><text x="90.6576%" y="63.50"></text></g><g><title>memset (6 instructions, 0.03%)</title><rect x="91.4157%" y="37" width="0.0257%" height="15" fill="rgb(248,47,43)" fg:x="21309" fg:w="6"/><text x="91.7087%" y="47.50"></text></g><g><title>idl_sub_buf_init (15 instructions, 0.06%)</title><rect x="91.4157%" y="53" width="0.0644%" height="15" fill="rgb(221,10,30)" fg:x="21309" fg:w="15"/><text x="91.7087%" y="63.50"></text></g><g><title>leb128_decode (50 instructions, 0.21%)</title><rect x="91.4801%" y="53" width="0.2145%" height="15" fill="rgb(210,229,1)" fg:x="21324" fg:w="50"/><text x="91.7730%" y="63.50"></text></g><g><title>@deserialize&lt;&gt; (474 instructions, 2.03%)</title><rect x="90.3647%" y="69" width="2.0335%" height="15" fill="rgb(222,148,37)" fg:x="21064" fg:w="474"/><text x="90.6576%" y="79.50"></text></g><g><title>alloc_size&lt;3&gt;_tag&lt;15&gt; (20 instructions, 0.09%)</title><rect x="92.3981%" y="37" width="0.0858%" height="15" fill="rgb(234,67,33)" fg:x="21538" fg:w="20"/><text x="92.6911%" y="47.50"></text></g><g><title>to_2_tuple (28 instructions, 0.12%)</title><rect x="92.4839%" y="37" width="0.1201%" height="15" fill="rgb(247,98,35)" fg:x="21558" fg:w="28"/><text x="92.7769%" y="47.50"></text></g><g><title>opt_inject (23 instructions, 0.10%)</title><rect x="92.6040%" y="37" width="0.0987%" height="15" fill="rgb(247,138,52)" fg:x="21586" fg:w="23"/><text x="92.8970%" y="47.50"></text></g><g><title>fulfill (147 instructions, 0.63%)</title><rect x="92.3981%" y="53" width="0.6306%" height="15" fill="rgb(213,79,30)" fg:x="21538" fg:w="147"/><text x="92.6911%" y="63.50"></text></g><g><title>$lambda.4 (164 instructions, 0.70%)</title><rect x="92.3981%" y="69" width="0.7036%" height="15" fill="rgb(246,177,23)" fg:x="21538" fg:w="164"/><text x="92.6911%" y="79.50"></text></g><g><title>schedule_copying_gc (108 instructions, 0.46%)</title><rect x="93.1017%" y="69" width="0.4633%" height="15" fill="rgb(230,62,27)" fg:x="21702" fg:w="108"/><text x="93.3946%" y="79.50"></text></g><g><title>trans_state4 (16 instructions, 0.07%)</title><rect x="93.5650%" y="69" width="0.0686%" height="15" fill="rgb(216,154,8)" fg:x="21810" fg:w="16"/><text x="93.8580%" y="79.50"></text></g><g><title>all (23,310 instructions, 100%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="23310"/><text x="0.2930%" y="111.50"></text></g><g><title>@callback&lt;u&gt; (2,361 instructions, 10.13%)</title><rect x="89.8713%" y="85" width="10.1287%" height="15" fill="rgb(251,115,12)" fg:x="20949" fg:w="2361"/><text x="90.1643%" y="95.50">@callback&lt;u&gt;</text></g></svg></svg>