<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="246" onload="init(evt)" viewBox="0 0 1024 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko_heartbeat</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="229.00"> </text><svg id="frames" x="10" width="1004" total_samples="5324"><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="0.0000%" y="117" width="0.4884%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="26"/><text x="0.2930%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="0.4884%" y="117" width="0.4884%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="26"/><text x="0.7813%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="0.9767%" y="117" width="0.4884%" height="15" fill="rgb(221,193,54)" fg:x="52" fg:w="26"/><text x="1.2697%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="1.4651%" y="117" width="0.4884%" height="15" fill="rgb(248,212,6)" fg:x="78" fg:w="26"/><text x="1.7580%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="1.9534%" y="117" width="0.4884%" height="15" fill="rgb(208,68,35)" fg:x="104" fg:w="26"/><text x="2.2464%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="2.4418%" y="117" width="0.4884%" height="15" fill="rgb(232,128,0)" fg:x="130" fg:w="26"/><text x="2.7347%" y="127.50"></text></g><g><title>@new_async (266 instructions, 5.00%)</title><rect x="0.0000%" y="133" width="4.9962%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="266"/><text x="0.2930%" y="143.50">@new_..</text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="4.9962%" y="133" width="0.4884%" height="15" fill="rgb(228,23,34)" fg:x="266" fg:w="26"/><text x="5.2892%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="5.4846%" y="133" width="0.4884%" height="15" fill="rgb(218,30,26)" fg:x="292" fg:w="26"/><text x="5.7776%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="5.9730%" y="101" width="0.6386%" height="15" fill="rgb(220,122,19)" fg:x="318" fg:w="34"/><text x="6.2659%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="5.9730%" y="117" width="0.6762%" height="15" fill="rgb(250,228,42)" fg:x="318" fg:w="36"/><text x="6.2659%" y="127.50"></text></g><g><title>canister_self (46 instructions, 0.86%)</title><rect x="5.9730%" y="133" width="0.8640%" height="15" fill="rgb(240,193,28)" fg:x="318" fg:w="46"/><text x="6.2659%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="6.8370%" y="117" width="0.4884%" height="15" fill="rgb(216,20,37)" fg:x="364" fg:w="26"/><text x="7.1299%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.77%)</title><rect x="6.8370%" y="133" width="0.7701%" height="15" fill="rgb(206,188,39)" fg:x="364" fg:w="41"/><text x="7.1299%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.13%)</title><rect x="7.6071%" y="133" width="0.1315%" height="15" fill="rgb(217,207,13)" fg:x="405" fg:w="7"/><text x="7.9000%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="7.7385%" y="101" width="0.6386%" height="15" fill="rgb(231,73,38)" fg:x="412" fg:w="34"/><text x="8.0315%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="7.7385%" y="117" width="0.6762%" height="15" fill="rgb(225,20,46)" fg:x="412" fg:w="36"/><text x="8.0315%" y="127.50"></text></g><g><title>canister_self (46 instructions, 0.86%)</title><rect x="7.7385%" y="133" width="0.8640%" height="15" fill="rgb(210,31,41)" fg:x="412" fg:w="46"/><text x="8.0315%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="8.6026%" y="117" width="0.4884%" height="15" fill="rgb(221,200,47)" fg:x="458" fg:w="26"/><text x="8.8955%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.77%)</title><rect x="8.6026%" y="133" width="0.7701%" height="15" fill="rgb(226,26,5)" fg:x="458" fg:w="41"/><text x="8.8955%" y="143.50"></text></g><g><title>as_ptr_size (7 instructions, 0.13%)</title><rect x="9.3727%" y="133" width="0.1315%" height="15" fill="rgb(249,33,26)" fg:x="499" fg:w="7"/><text x="9.6656%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="9.5041%" y="133" width="0.4884%" height="15" fill="rgb(235,183,28)" fg:x="506" fg:w="26"/><text x="9.7971%" y="143.50"></text></g><g><title>motoko_rts::gc::generational::write_barrier::write_barrier::h280e65fb17d8d8df (9 instructions, 0.17%)</title><rect x="9.9925%" y="117" width="0.1690%" height="15" fill="rgb(221,5,38)" fg:x="532" fg:w="9"/><text x="10.2855%" y="127.50"></text></g><g><title>remember_continuation (71 instructions, 1.33%)</title><rect x="9.9925%" y="133" width="1.3336%" height="15" fill="rgb(247,18,42)" fg:x="532" fg:w="71"/><text x="10.2855%" y="143.50"></text></g><g><title>box_i32 (9 instructions, 0.17%)</title><rect x="11.3261%" y="133" width="0.1690%" height="15" fill="rgb(241,131,45)" fg:x="603" fg:w="9"/><text x="11.6190%" y="143.50"></text></g><g><title>@buffer_size&lt;n32&gt; (18 instructions, 0.34%)</title><rect x="11.4951%" y="117" width="0.3381%" height="15" fill="rgb(249,31,29)" fg:x="612" fg:w="18"/><text x="11.7881%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="11.8332%" y="101" width="0.6386%" height="15" fill="rgb(225,111,53)" fg:x="630" fg:w="34"/><text x="12.1262%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="11.8332%" y="117" width="0.6762%" height="15" fill="rgb(238,160,17)" fg:x="630" fg:w="36"/><text x="12.1262%" y="127.50"></text></g><g><title>memcpy (66 instructions, 1.24%)</title><rect x="12.5094%" y="117" width="1.2397%" height="15" fill="rgb(214,148,48)" fg:x="666" fg:w="66"/><text x="12.8024%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="13.7491%" y="101" width="0.6386%" height="15" fill="rgb(232,36,49)" fg:x="732" fg:w="34"/><text x="14.0420%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="13.7491%" y="117" width="0.6762%" height="15" fill="rgb(209,103,24)" fg:x="732" fg:w="36"/><text x="14.0420%" y="127.50"></text></g><g><title>unbox_i32 (6 instructions, 0.11%)</title><rect x="14.4252%" y="101" width="0.1127%" height="15" fill="rgb(229,88,8)" fg:x="768" fg:w="6"/><text x="14.7182%" y="111.50"></text></g><g><title>@serialize_go&lt;n32&gt; (17 instructions, 0.32%)</title><rect x="14.4252%" y="117" width="0.3193%" height="15" fill="rgb(213,181,19)" fg:x="768" fg:w="17"/><text x="14.7182%" y="127.50"></text></g><g><title>@serialize&lt;n32&gt; (236 instructions, 4.43%)</title><rect x="11.4951%" y="133" width="4.4328%" height="15" fill="rgb(254,191,54)" fg:x="612" fg:w="236"/><text x="11.7881%" y="143.50">@ser..</text></g><g><title>@reset_cycles (3 instructions, 0.06%)</title><rect x="15.9279%" y="117" width="0.0563%" height="15" fill="rgb(241,83,37)" fg:x="848" fg:w="3"/><text x="16.2208%" y="127.50"></text></g><g><title>motoko_rts::bigint::mp_alloc::haee2a49bad03caef (38 instructions, 0.71%)</title><rect x="15.9842%" y="37" width="0.7137%" height="15" fill="rgb(233,36,39)" fg:x="851" fg:w="38"/><text x="16.2772%" y="47.50"></text></g><g><title>memset (244 instructions, 4.58%)</title><rect x="16.6980%" y="37" width="4.5830%" height="15" fill="rgb(226,3,54)" fg:x="889" fg:w="244"/><text x="16.9909%" y="47.50">mems..</text></g><g><title>mp_calloc (308 instructions, 5.79%)</title><rect x="15.9842%" y="53" width="5.7851%" height="15" fill="rgb(245,192,40)" fg:x="851" fg:w="308"/><text x="16.2772%" y="63.50">mp_cal..</text></g><g><title>mp_init (323 instructions, 6.07%)</title><rect x="15.9842%" y="69" width="6.0669%" height="15" fill="rgb(238,167,29)" fg:x="851" fg:w="323"/><text x="16.2772%" y="79.50">mp_init</text></g><g><title>mp_set_u64 (480 instructions, 9.02%)</title><rect x="22.0511%" y="53" width="9.0158%" height="15" fill="rgb(232,182,51)" fg:x="1174" fg:w="480"/><text x="22.3441%" y="63.50">mp_set_u64</text></g><g><title>mp_set_i64 (494 instructions, 9.28%)</title><rect x="22.0511%" y="69" width="9.2787%" height="15" fill="rgb(231,60,39)" fg:x="1174" fg:w="494"/><text x="22.3441%" y="79.50">mp_set_i64</text></g><g><title>motoko_rts::bigint::persist_bigint::h53a854e22755d6fd (31 instructions, 0.58%)</title><rect x="31.3298%" y="69" width="0.5823%" height="15" fill="rgb(208,69,12)" fg:x="1668" fg:w="31"/><text x="31.6228%" y="79.50"></text></g><g><title>bigint_of_int64 (891 instructions, 16.74%)</title><rect x="15.9842%" y="85" width="16.7355%" height="15" fill="rgb(235,93,37)" fg:x="851" fg:w="891"/><text x="16.2772%" y="95.50">bigint_of_int64</text></g><g><title>mp_cmp_mag (17 instructions, 0.32%)</title><rect x="32.7198%" y="53" width="0.3193%" height="15" fill="rgb(213,116,39)" fg:x="1742" fg:w="17"/><text x="33.0127%" y="63.50"></text></g><g><title>mp_cmp (31 instructions, 0.58%)</title><rect x="32.7198%" y="69" width="0.5823%" height="15" fill="rgb(222,207,29)" fg:x="1742" fg:w="31"/><text x="33.0127%" y="79.50"></text></g><g><title>bigint_lt (54 instructions, 1.01%)</title><rect x="32.7198%" y="85" width="1.0143%" height="15" fill="rgb(206,96,30)" fg:x="1742" fg:w="54"/><text x="33.0127%" y="95.50"></text></g><g><title>B_lt (963 instructions, 18.09%)</title><rect x="15.9842%" y="101" width="18.0879%" height="15" fill="rgb(218,138,4)" fg:x="851" fg:w="963"/><text x="16.2772%" y="111.50">B_lt</text></g><g><title>B_rsh (12 instructions, 0.23%)</title><rect x="34.0721%" y="101" width="0.2254%" height="15" fill="rgb(250,191,14)" fg:x="1814" fg:w="12"/><text x="34.3651%" y="111.50"></text></g><g><title>cycle_add (999 instructions, 18.76%)</title><rect x="15.9842%" y="117" width="18.7641%" height="15" fill="rgb(239,60,40)" fg:x="851" fg:w="999"/><text x="16.2772%" y="127.50">cycle_add</text></g><g><title>@add_cycles (1,009 instructions, 18.95%)</title><rect x="15.9279%" y="133" width="18.9519%" height="15" fill="rgb(206,27,48)" fg:x="848" fg:w="1009"/><text x="16.2208%" y="143.50">@add_cycles</text></g><g><title>heartbeat (1,994 instructions, 37.45%)</title><rect x="0.0000%" y="149" width="37.4530%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="1994"/><text x="0.2930%" y="159.50">heartbeat</text></g><g><title>@call_succeeded (2 instructions, 0.04%)</title><rect x="37.4530%" y="149" width="0.0376%" height="15" fill="rgb(250,213,24)" fg:x="1994" fg:w="2"/><text x="37.7460%" y="159.50"></text></g><g><title>heartbeat_exp (2,002 instructions, 37.60%)</title><rect x="0.0000%" y="165" width="37.6033%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="2002"/><text x="0.2930%" y="175.50">heartbeat_exp</text></g><g><title>canister_heartbeat (2,206 instructions, 41.44%)</title><rect x="0.0000%" y="181" width="41.4350%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="2206"/><text x="0.2930%" y="191.50">canister_heartbeat</text></g><g><title>trans_state5 (9 instructions, 0.17%)</title><rect x="41.4350%" y="165" width="0.1690%" height="15" fill="rgb(231,145,46)" fg:x="2206" fg:w="9"/><text x="41.7280%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="41.6041%" y="149" width="0.6386%" height="15" fill="rgb(251,118,11)" fg:x="2215" fg:w="34"/><text x="41.8970%" y="159.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="42.2802%" y="149" width="0.6386%" height="15" fill="rgb(217,147,25)" fg:x="2251" fg:w="34"/><text x="42.5732%" y="159.50"></text></g><g><title>alloc_blob (72 instructions, 1.35%)</title><rect x="41.6041%" y="165" width="1.3524%" height="15" fill="rgb(247,81,37)" fg:x="2215" fg:w="72"/><text x="41.8970%" y="175.50"></text></g><g><title>memcmp (217 instructions, 4.08%)</title><rect x="42.9564%" y="165" width="4.0759%" height="15" fill="rgb(209,12,38)" fg:x="2287" fg:w="217"/><text x="43.2494%" y="175.50">mem..</text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="47.0323%" y="149" width="0.6386%" height="15" fill="rgb(227,1,9)" fg:x="2504" fg:w="34"/><text x="47.3253%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="47.0323%" y="165" width="0.6762%" height="15" fill="rgb(248,47,43)" fg:x="2504" fg:w="36"/><text x="47.3253%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="47.7085%" y="133" width="0.9579%" height="15" fill="rgb(221,10,30)" fg:x="2540" fg:w="51"/><text x="48.0015%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="48.6664%" y="133" width="0.6386%" height="15" fill="rgb(210,229,1)" fg:x="2591" fg:w="34"/><text x="48.9594%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="49.3050%" y="133" width="0.9579%" height="15" fill="rgb(222,148,37)" fg:x="2625" fg:w="51"/><text x="49.5980%" y="143.50"></text></g><g><title>sleb128_decode (68 instructions, 1.28%)</title><rect x="50.2630%" y="133" width="1.2772%" height="15" fill="rgb(234,67,33)" fg:x="2676" fg:w="68"/><text x="50.5559%" y="143.50"></text></g><g><title>parse_idl_header (290 instructions, 5.45%)</title><rect x="47.7085%" y="149" width="5.4470%" height="15" fill="rgb(247,98,35)" fg:x="2540" fg:w="290"/><text x="48.0015%" y="159.50">parse..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.17%)</title><rect x="53.1555%" y="149" width="0.1690%" height="15" fill="rgb(247,138,52)" fg:x="2830" fg:w="9"/><text x="53.4485%" y="159.50"></text></g><g><title>memset (4 instructions, 0.08%)</title><rect x="53.3246%" y="133" width="0.0751%" height="15" fill="rgb(213,79,30)" fg:x="2839" fg:w="4"/><text x="53.6175%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.36%)</title><rect x="53.3246%" y="149" width="0.3569%" height="15" fill="rgb(246,177,23)" fg:x="2839" fg:w="19"/><text x="53.6175%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="53.6814%" y="149" width="0.9579%" height="15" fill="rgb(230,62,27)" fg:x="2858" fg:w="51"/><text x="53.9744%" y="159.50"></text></g><g><title>sleb128_decode (68 instructions, 1.28%)</title><rect x="54.6394%" y="149" width="1.2772%" height="15" fill="rgb(216,154,8)" fg:x="2909" fg:w="68"/><text x="54.9323%" y="159.50"></text></g><g><title>set_local %i0 (3 instructions, 0.06%)</title><rect x="55.9166%" y="149" width="0.0563%" height="15" fill="rgb(244,35,45)" fg:x="2977" fg:w="3"/><text x="56.2096%" y="159.50"></text></g><g><title>set_local %i1 (3 instructions, 0.06%)</title><rect x="55.9730%" y="149" width="0.0563%" height="15" fill="rgb(251,115,12)" fg:x="2980" fg:w="3"/><text x="56.2659%" y="159.50"></text></g><g><title>set_local %i2 (3 instructions, 0.06%)</title><rect x="56.0293%" y="149" width="0.0563%" height="15" fill="rgb(240,54,50)" fg:x="2983" fg:w="3"/><text x="56.3223%" y="159.50"></text></g><g><title>box_i32 (9 instructions, 0.17%)</title><rect x="56.0856%" y="133" width="0.1690%" height="15" fill="rgb(233,84,52)" fg:x="2986" fg:w="9"/><text x="56.3786%" y="143.50"></text></g><g><title>@deserialize_go&lt;n32&gt; (46 instructions, 0.86%)</title><rect x="56.0856%" y="149" width="0.8640%" height="15" fill="rgb(207,117,47)" fg:x="2986" fg:w="46"/><text x="56.3786%" y="159.50"></text></g><g><title>@deserialize&lt;n32&gt; (696 instructions, 13.07%)</title><rect x="47.7085%" y="165" width="13.0729%" height="15" fill="rgb(249,43,39)" fg:x="2540" fg:w="696"/><text x="48.0015%" y="175.50">@deserialize&lt;n32&gt;</text></g><g><title>unbox_i32 (6 instructions, 0.11%)</title><rect x="60.7814%" y="165" width="0.1127%" height="15" fill="rgb(209,38,44)" fg:x="3236" fg:w="6"/><text x="61.0743%" y="175.50"></text></g><g><title>peek_future_continuation (36 instructions, 0.68%)</title><rect x="60.8941%" y="165" width="0.6762%" height="15" fill="rgb(236,212,23)" fg:x="3242" fg:w="36"/><text x="61.1870%" y="175.50"></text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.26%)</title><rect x="61.5702%" y="101" width="0.2630%" height="15" fill="rgb(242,79,21)" fg:x="3278" fg:w="14"/><text x="61.8632%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="61.8332%" y="85" width="0.6386%" height="15" fill="rgb(211,96,35)" fg:x="3292" fg:w="34"/><text x="62.1262%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="61.8332%" y="101" width="0.6762%" height="15" fill="rgb(253,215,40)" fg:x="3292" fg:w="36"/><text x="62.1262%" y="111.50"></text></g><g><title>memcpy (63 instructions, 1.18%)</title><rect x="62.5094%" y="101" width="1.1833%" height="15" fill="rgb(211,81,21)" fg:x="3328" fg:w="63"/><text x="62.8024%" y="111.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="63.6927%" y="85" width="0.6386%" height="15" fill="rgb(208,190,38)" fg:x="3391" fg:w="34"/><text x="63.9857%" y="95.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="63.6927%" y="101" width="0.6762%" height="15" fill="rgb(235,213,38)" fg:x="3391" fg:w="36"/><text x="63.9857%" y="111.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.08%)</title><rect x="64.3689%" y="101" width="0.0751%" height="15" fill="rgb(237,122,38)" fg:x="3427" fg:w="4"/><text x="64.6619%" y="111.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 4.06%)</title><rect x="61.5702%" y="117" width="4.0571%" height="15" fill="rgb(244,218,35)" fg:x="3278" fg:w="216"/><text x="61.8632%" y="127.50">@se..</text></g><g><title>reply_with_data (30 instructions, 0.56%)</title><rect x="65.6273%" y="117" width="0.5635%" height="15" fill="rgb(240,68,47)" fg:x="3494" fg:w="30"/><text x="65.9203%" y="127.50"></text></g><g><title>$lambda (251 instructions, 4.71%)</title><rect x="61.5702%" y="133" width="4.7145%" height="15" fill="rgb(210,16,53)" fg:x="3278" fg:w="251"/><text x="61.8632%" y="143.50">$lam..</text></g><g><title>$lambda (256 instructions, 4.81%)</title><rect x="61.5702%" y="149" width="4.8084%" height="15" fill="rgb(235,124,12)" fg:x="3278" fg:w="256"/><text x="61.8632%" y="159.50">$lam..</text></g><g><title>anon_async (260 instructions, 4.88%)</title><rect x="61.5702%" y="165" width="4.8835%" height="15" fill="rgb(224,169,11)" fg:x="3278" fg:w="260"/><text x="61.8632%" y="175.50">anon_..</text></g><g><title>schedule_copying_gc (50 instructions, 0.94%)</title><rect x="66.4538%" y="165" width="0.9391%" height="15" fill="rgb(250,166,2)" fg:x="3538" fg:w="50"/><text x="66.7468%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.26%)</title><rect x="67.3929%" y="165" width="0.2630%" height="15" fill="rgb(242,216,29)" fg:x="3588" fg:w="14"/><text x="67.6859%" y="175.50"></text></g><g><title>__motoko_async_helper (1,885 instructions, 35.41%)</title><rect x="41.4350%" y="181" width="35.4057%" height="15" fill="rgb(230,116,27)" fg:x="2206" fg:w="1885"/><text x="41.7280%" y="191.50">__motoko_async_helper</text></g><g><title>trans_state5 (9 instructions, 0.17%)</title><rect x="76.8407%" y="165" width="0.1690%" height="15" fill="rgb(228,99,48)" fg:x="4091" fg:w="9"/><text x="77.1337%" y="175.50"></text></g><g><title>recall_continuation (57 instructions, 1.07%)</title><rect x="77.0098%" y="165" width="1.0706%" height="15" fill="rgb(253,11,6)" fg:x="4100" fg:w="57"/><text x="77.3027%" y="175.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="78.0804%" y="149" width="0.6386%" height="15" fill="rgb(247,143,39)" fg:x="4157" fg:w="34"/><text x="78.3734%" y="159.50"></text></g><g><title>alloc_blob (36 instructions, 0.68%)</title><rect x="78.0804%" y="165" width="0.6762%" height="15" fill="rgb(236,97,10)" fg:x="4157" fg:w="36"/><text x="78.3734%" y="175.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="78.7566%" y="133" width="0.9579%" height="15" fill="rgb(233,208,19)" fg:x="4193" fg:w="51"/><text x="79.0495%" y="143.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 0.64%)</title><rect x="79.7145%" y="133" width="0.6386%" height="15" fill="rgb(216,164,2)" fg:x="4244" fg:w="34"/><text x="80.0075%" y="143.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="80.3531%" y="133" width="0.9579%" height="15" fill="rgb(220,129,5)" fg:x="4278" fg:w="51"/><text x="80.6461%" y="143.50"></text></g><g><title>parse_idl_header (207 instructions, 3.89%)</title><rect x="78.7566%" y="149" width="3.8881%" height="15" fill="rgb(242,17,10)" fg:x="4193" fg:w="207"/><text x="79.0495%" y="159.50">par..</text></g><g><title>idl_sub_buf_words (9 instructions, 0.17%)</title><rect x="82.6446%" y="149" width="0.1690%" height="15" fill="rgb(242,107,0)" fg:x="4400" fg:w="9"/><text x="82.9376%" y="159.50"></text></g><g><title>memset (4 instructions, 0.08%)</title><rect x="82.8137%" y="133" width="0.0751%" height="15" fill="rgb(251,28,31)" fg:x="4409" fg:w="4"/><text x="83.1066%" y="143.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 0.36%)</title><rect x="82.8137%" y="149" width="0.3569%" height="15" fill="rgb(233,223,10)" fg:x="4409" fg:w="19"/><text x="83.1066%" y="159.50"></text></g><g><title>leb128_decode (51 instructions, 0.96%)</title><rect x="83.1705%" y="149" width="0.9579%" height="15" fill="rgb(215,21,27)" fg:x="4428" fg:w="51"/><text x="83.4635%" y="159.50"></text></g><g><title>@deserialize&lt;&gt; (436 instructions, 8.19%)</title><rect x="78.7566%" y="165" width="8.1893%" height="15" fill="rgb(232,23,21)" fg:x="4193" fg:w="436"/><text x="79.0495%" y="175.50">@deserial..</text></g><g><title>from_word128_ptr (17 instructions, 0.32%)</title><rect x="86.9459%" y="101" width="0.3193%" height="15" fill="rgb(244,5,23)" fg:x="4629" fg:w="17"/><text x="87.2389%" y="111.50"></text></g><g><title>cycle_refunded (30 instructions, 0.56%)</title><rect x="86.9459%" y="117" width="0.5635%" height="15" fill="rgb(226,81,46)" fg:x="4629" fg:w="30"/><text x="87.2389%" y="127.50"></text></g><g><title>@getSystemRefund (32 instructions, 0.60%)</title><rect x="86.9459%" y="133" width="0.6011%" height="15" fill="rgb(247,70,30)" fg:x="4629" fg:w="32"/><text x="87.2389%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="87.5470%" y="133" width="0.4884%" height="15" fill="rgb(212,68,19)" fg:x="4661" fg:w="26"/><text x="87.8399%" y="143.50"></text></g><g><title>alloc_words (26 instructions, 0.49%)</title><rect x="88.0353%" y="117" width="0.4884%" height="15" fill="rgb(240,187,13)" fg:x="4687" fg:w="26"/><text x="88.3283%" y="127.50"></text></g><g><title>to_2_tuple (41 instructions, 0.77%)</title><rect x="88.0353%" y="133" width="0.7701%" height="15" fill="rgb(223,113,26)" fg:x="4687" fg:w="41"/><text x="88.3283%" y="143.50"></text></g><g><title>opt_inject (14 instructions, 0.26%)</title><rect x="88.8054%" y="133" width="0.2630%" height="15" fill="rgb(206,192,2)" fg:x="4728" fg:w="14"/><text x="89.0984%" y="143.50"></text></g><g><title>fulfill (167 instructions, 3.14%)</title><rect x="86.9459%" y="149" width="3.1367%" height="15" fill="rgb(241,108,4)" fg:x="4629" fg:w="167"/><text x="87.2389%" y="159.50">fu..</text></g><g><title>$lambda (175 instructions, 3.29%)</title><rect x="86.9459%" y="165" width="3.2870%" height="15" fill="rgb(247,173,49)" fg:x="4629" fg:w="175"/><text x="87.2389%" y="175.50">$l..</text></g><g><title>schedule_copying_gc (50 instructions, 0.94%)</title><rect x="90.2329%" y="165" width="0.9391%" height="15" fill="rgb(224,114,35)" fg:x="4804" fg:w="50"/><text x="90.5259%" y="175.50"></text></g><g><title>trans_state4 (14 instructions, 0.26%)</title><rect x="91.1721%" y="165" width="0.2630%" height="15" fill="rgb(245,159,27)" fg:x="4854" fg:w="14"/><text x="91.4650%" y="175.50"></text></g><g><title>all (5,324 instructions, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="5324"/><text x="0.2930%" y="207.50"></text></g><g><title>@callback&lt;u&gt; (1,233 instructions, 23.16%)</title><rect x="76.8407%" y="181" width="23.1593%" height="15" fill="rgb(236,23,11)" fg:x="4091" fg:w="1233"/><text x="77.1337%" y="191.50">@callback&lt;u&gt;</text></g></svg></svg>