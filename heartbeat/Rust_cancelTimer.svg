<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="9514"><g><title>ic_cdk::setup (7 instructions, 0.07%)</title><rect x="0.0000%" y="197" width="0.0736%" height="15" fill="rgb(208,174,49)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="0.0736%" y="165" width="0.9460%" height="15" fill="rgb(233,191,51)" fg:x="7" fg:w="90"/><text x="0.3665%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="0.0736%" y="181" width="1.0511%" height="15" fill="rgb(222,134,10)" fg:x="7" fg:w="100"/><text x="0.3665%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="1.1562%" y="165" width="0.9460%" height="15" fill="rgb(230,226,20)" fg:x="110" fg:w="90"/><text x="1.4492%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="1.1562%" y="181" width="1.0511%" height="15" fill="rgb(251,111,25)" fg:x="110" fg:w="100"/><text x="1.4492%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 2.17%)</title><rect x="0.0736%" y="197" width="2.1652%" height="15" fill="rgb(224,40,46)" fg:x="7" fg:w="206"/><text x="0.3665%" y="207.50">_..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="2.2388%" y="133" width="0.9460%" height="15" fill="rgb(236,108,47)" fg:x="213" fg:w="90"/><text x="2.5318%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="2.2388%" y="149" width="1.0511%" height="15" fill="rgb(234,93,0)" fg:x="213" fg:w="100"/><text x="2.5318%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 1.08%)</title><rect x="2.2388%" y="165" width="1.0826%" height="15" fill="rgb(224,213,32)" fg:x="213" fg:w="103"/><text x="2.5318%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (157 instructions, 1.65%)</title><rect x="2.2388%" y="181" width="1.6502%" height="15" fill="rgb(251,11,48)" fg:x="213" fg:w="157"/><text x="2.5318%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.64%)</title><rect x="3.8890%" y="165" width="0.6412%" height="15" fill="rgb(236,173,5)" fg:x="370" fg:w="61"/><text x="4.1820%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.04%)</title><rect x="4.5302%" y="149" width="0.0420%" height="15" fill="rgb(230,95,12)" fg:x="431" fg:w="4"/><text x="4.8231%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 4.28%)</title><rect x="4.5302%" y="165" width="4.2779%" height="15" fill="rgb(232,209,1)" fg:x="431" fg:w="407"/><text x="4.8231%" y="175.50">core..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.78%)</title><rect x="8.8081%" y="165" width="0.7778%" height="15" fill="rgb(232,6,1)" fg:x="838" fg:w="74"/><text x="9.1010%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.57%)</title><rect x="9.5859%" y="165" width="0.5676%" height="15" fill="rgb(210,224,50)" fg:x="912" fg:w="54"/><text x="9.8788%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.57%)</title><rect x="10.1535%" y="165" width="0.5676%" height="15" fill="rgb(228,127,35)" fg:x="966" fg:w="54"/><text x="10.4464%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.57%)</title><rect x="10.7210%" y="165" width="0.5676%" height="15" fill="rgb(245,102,45)" fg:x="1020" fg:w="54"/><text x="11.0140%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.57%)</title><rect x="11.2886%" y="165" width="0.5676%" height="15" fill="rgb(214,1,49)" fg:x="1074" fg:w="54"/><text x="11.5816%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.64%)</title><rect x="11.8562%" y="165" width="0.6412%" height="15" fill="rgb(226,163,40)" fg:x="1128" fg:w="61"/><text x="12.1492%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 1.02%)</title><rect x="12.4974%" y="165" width="1.0196%" height="15" fill="rgb(239,212,28)" fg:x="1189" fg:w="97"/><text x="12.7903%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.04%)</title><rect x="13.5169%" y="149" width="0.0420%" height="15" fill="rgb(220,20,13)" fg:x="1286" fg:w="4"/><text x="13.8099%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 4.28%)</title><rect x="13.5169%" y="165" width="4.2779%" height="15" fill="rgb(210,164,35)" fg:x="1286" fg:w="407"/><text x="13.8099%" y="175.50">core..</text></g><g><title>memcmp (16 instructions, 0.17%)</title><rect x="17.7948%" y="165" width="0.1682%" height="15" fill="rgb(248,109,41)" fg:x="1693" fg:w="16"/><text x="18.0878%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="17.9630%" y="101" width="0.9460%" height="15" fill="rgb(238,23,50)" fg:x="1709" fg:w="90"/><text x="18.2560%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="17.9630%" y="117" width="1.0511%" height="15" fill="rgb(211,48,49)" fg:x="1709" fg:w="100"/><text x="18.2560%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 1.08%)</title><rect x="17.9630%" y="133" width="1.0826%" height="15" fill="rgb(223,36,21)" fg:x="1709" fg:w="103"/><text x="18.2560%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.63%)</title><rect x="19.0456%" y="101" width="0.6306%" height="15" fill="rgb(207,123,46)" fg:x="1812" fg:w="60"/><text x="19.3386%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.89%)</title><rect x="19.0456%" y="117" width="0.8934%" height="15" fill="rgb(240,218,32)" fg:x="1812" fg:w="85"/><text x="19.3386%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.09%)</title><rect x="19.9390%" y="69" width="0.0946%" height="15" fill="rgb(252,5,43)" fg:x="1897" fg:w="9"/><text x="20.2320%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.32%)</title><rect x="20.0336%" y="53" width="0.3153%" height="15" fill="rgb(252,84,19)" fg:x="1906" fg:w="30"/><text x="20.3266%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.58%)</title><rect x="20.0336%" y="69" width="0.5781%" height="15" fill="rgb(243,152,39)" fg:x="1906" fg:w="55"/><text x="20.3266%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 1.22%)</title><rect x="19.9390%" y="85" width="1.2193%" height="15" fill="rgb(234,160,15)" fg:x="1897" fg:w="116"/><text x="20.2320%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 1.78%)</title><rect x="19.9390%" y="101" width="1.7763%" height="15" fill="rgb(237,34,20)" fg:x="1897" fg:w="169"/><text x="20.2320%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 1.83%)</title><rect x="19.9390%" y="117" width="1.8289%" height="15" fill="rgb(229,97,13)" fg:x="1897" fg:w="174"/><text x="20.2320%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 3.86%)</title><rect x="19.0456%" y="133" width="3.8575%" height="15" fill="rgb(234,71,50)" fg:x="1812" fg:w="367"/><text x="19.3386%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 6.44%)</title><rect x="17.9630%" y="149" width="6.4431%" height="15" fill="rgb(253,155,4)" fg:x="1709" fg:w="613"/><text x="18.2560%" y="159.50">alloc::..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.78%)</title><rect x="24.4061%" y="149" width="0.7778%" height="15" fill="rgb(222,185,37)" fg:x="2322" fg:w="74"/><text x="24.6991%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.57%)</title><rect x="25.1839%" y="149" width="0.5676%" height="15" fill="rgb(251,177,13)" fg:x="2396" fg:w="54"/><text x="25.4769%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 8.53%)</title><rect x="17.9630%" y="165" width="8.5348%" height="15" fill="rgb(250,179,40)" fg:x="1709" fg:w="812"/><text x="18.2560%" y="175.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.59%)</title><rect x="26.4978%" y="165" width="0.5886%" height="15" fill="rgb(242,44,2)" fg:x="2521" fg:w="56"/><text x="26.7908%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 1.02%)</title><rect x="27.0864%" y="165" width="1.0196%" height="15" fill="rgb(216,177,13)" fg:x="2577" fg:w="97"/><text x="27.3794%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.04%)</title><rect x="28.1059%" y="133" width="0.0420%" height="15" fill="rgb(216,106,43)" fg:x="2674" fg:w="4"/><text x="28.3989%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 4.28%)</title><rect x="28.1059%" y="149" width="4.2779%" height="15" fill="rgb(216,183,2)" fg:x="2674" fg:w="407"/><text x="28.3989%" y="159.50">core..</text></g><g><title>memcmp (16 instructions, 0.17%)</title><rect x="32.3839%" y="149" width="0.1682%" height="15" fill="rgb(249,75,3)" fg:x="3081" fg:w="16"/><text x="32.6768%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="32.5520%" y="85" width="0.9460%" height="15" fill="rgb(219,67,39)" fg:x="3097" fg:w="90"/><text x="32.8450%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="32.5520%" y="101" width="1.0511%" height="15" fill="rgb(253,228,2)" fg:x="3097" fg:w="100"/><text x="32.8450%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 1.08%)</title><rect x="32.5520%" y="117" width="1.0826%" height="15" fill="rgb(235,138,27)" fg:x="3097" fg:w="103"/><text x="32.8450%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.63%)</title><rect x="33.6346%" y="85" width="0.6306%" height="15" fill="rgb(236,97,51)" fg:x="3200" fg:w="60"/><text x="33.9276%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.89%)</title><rect x="33.6346%" y="101" width="0.8934%" height="15" fill="rgb(240,80,30)" fg:x="3200" fg:w="85"/><text x="33.9276%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.09%)</title><rect x="34.5281%" y="53" width="0.0946%" height="15" fill="rgb(230,178,19)" fg:x="3285" fg:w="9"/><text x="34.8210%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.32%)</title><rect x="34.6227%" y="37" width="0.3153%" height="15" fill="rgb(210,190,27)" fg:x="3294" fg:w="30"/><text x="34.9156%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.58%)</title><rect x="34.6227%" y="53" width="0.5781%" height="15" fill="rgb(222,107,31)" fg:x="3294" fg:w="55"/><text x="34.9156%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 1.22%)</title><rect x="34.5281%" y="69" width="1.2193%" height="15" fill="rgb(216,127,34)" fg:x="3285" fg:w="116"/><text x="34.8210%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 1.78%)</title><rect x="34.5281%" y="85" width="1.7763%" height="15" fill="rgb(234,116,52)" fg:x="3285" fg:w="169"/><text x="34.8210%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 1.83%)</title><rect x="34.5281%" y="101" width="1.8289%" height="15" fill="rgb(222,124,15)" fg:x="3285" fg:w="174"/><text x="34.8210%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 3.86%)</title><rect x="33.6346%" y="117" width="3.8575%" height="15" fill="rgb(231,179,28)" fg:x="3200" fg:w="367"/><text x="33.9276%" y="127.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 6.44%)</title><rect x="32.5520%" y="133" width="6.4431%" height="15" fill="rgb(226,93,45)" fg:x="3097" fg:w="613"/><text x="32.8450%" y="143.50">alloc::..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.78%)</title><rect x="38.9952%" y="133" width="0.7778%" height="15" fill="rgb(215,8,51)" fg:x="3710" fg:w="74"/><text x="39.2881%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.57%)</title><rect x="39.7730%" y="133" width="0.5676%" height="15" fill="rgb(223,106,5)" fg:x="3784" fg:w="54"/><text x="40.0659%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 8.53%)</title><rect x="32.5520%" y="149" width="8.5348%" height="15" fill="rgb(250,191,5)" fg:x="3097" fg:w="812"/><text x="32.8450%" y="159.50">binread::b..</text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,402 instructions, 14.74%)</title><rect x="28.1059%" y="165" width="14.7362%" height="15" fill="rgb(242,132,44)" fg:x="2674" fg:w="1402"/><text x="28.3989%" y="175.50">binread::binread_im..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.59%)</title><rect x="42.8421%" y="165" width="0.5886%" height="15" fill="rgb(251,152,29)" fg:x="4076" fg:w="56"/><text x="43.1351%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.14%)</title><rect x="43.4307%" y="165" width="0.1366%" height="15" fill="rgb(218,179,5)" fg:x="4132" fg:w="13"/><text x="43.7237%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.14%)</title><rect x="43.5674%" y="165" width="0.1366%" height="15" fill="rgb(227,67,19)" fg:x="4145" fg:w="13"/><text x="43.8603%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.23%)</title><rect x="43.7040%" y="165" width="0.2312%" height="15" fill="rgb(233,119,31)" fg:x="4158" fg:w="22"/><text x="43.9970%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="43.9353%" y="133" width="0.9460%" height="15" fill="rgb(241,120,22)" fg:x="4180" fg:w="90"/><text x="44.2282%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="43.9353%" y="149" width="1.0511%" height="15" fill="rgb(224,102,30)" fg:x="4180" fg:w="100"/><text x="44.2282%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.98%)</title><rect x="45.0179%" y="133" width="0.9775%" height="15" fill="rgb(210,164,37)" fg:x="4283" fg:w="93"/><text x="45.3108%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 1.08%)</title><rect x="45.0179%" y="149" width="1.0826%" height="15" fill="rgb(226,191,16)" fg:x="4283" fg:w="103"/><text x="45.3108%" y="159.50"></text></g><g><title>__rust_alloc (209 instructions, 2.20%)</title><rect x="43.9353%" y="165" width="2.1968%" height="15" fill="rgb(214,40,45)" fg:x="4180" fg:w="209"/><text x="44.2282%" y="175.50">_..</text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.15%)</title><rect x="46.1320%" y="165" width="0.1472%" height="15" fill="rgb(244,29,26)" fg:x="4389" fg:w="14"/><text x="46.4250%" y="175.50"></text></g><g><title>memcpy (411 instructions, 4.32%)</title><rect x="46.2792%" y="165" width="4.3199%" height="15" fill="rgb(216,16,5)" fg:x="4403" fg:w="411"/><text x="46.5721%" y="175.50">memc..</text></g><g><title>memcpy (366 instructions, 3.85%)</title><rect x="50.5991%" y="165" width="3.8470%" height="15" fill="rgb(249,76,35)" fg:x="4814" fg:w="366"/><text x="50.8921%" y="175.50">mem..</text></g><g><title>candid::de::IDLDeserialize::new (5,997 instructions, 63.03%)</title><rect x="3.8890%" y="181" width="63.0334%" height="15" fill="rgb(207,11,44)" fg:x="370" fg:w="5997"/><text x="4.1820%" y="191.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (381 instructions, 4.00%)</title><rect x="66.9224%" y="181" width="4.0046%" height="15" fill="rgb(228,190,49)" fg:x="6367" fg:w="381"/><text x="67.2154%" y="191.50">mem..</text></g><g><title>memcpy (381 instructions, 4.00%)</title><rect x="70.9271%" y="181" width="4.0046%" height="15" fill="rgb(214,173,12)" fg:x="6748" fg:w="381"/><text x="71.2200%" y="191.50">mem..</text></g><g><title>memcpy (411 instructions, 4.32%)</title><rect x="74.9317%" y="181" width="4.3199%" height="15" fill="rgb(218,26,35)" fg:x="7129" fg:w="411"/><text x="75.2246%" y="191.50">memc..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.23%)</title><rect x="79.2516%" y="165" width="0.2312%" height="15" fill="rgb(220,200,19)" fg:x="7540" fg:w="22"/><text x="79.5446%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.57%)</title><rect x="79.4829%" y="149" width="0.5676%" height="15" fill="rgb(239,95,49)" fg:x="7562" fg:w="54"/><text x="79.7758%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.58%)</title><rect x="80.3658%" y="149" width="0.5781%" height="15" fill="rgb(235,85,53)" fg:x="7646" fg:w="55"/><text x="80.6587%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (169 instructions, 1.78%)</title><rect x="79.4829%" y="165" width="1.7763%" height="15" fill="rgb(233,133,31)" fg:x="7562" fg:w="169"/><text x="79.7758%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.05%)</title><rect x="81.2592%" y="165" width="0.0526%" height="15" fill="rgb(218,25,20)" fg:x="7731" fg:w="5"/><text x="81.5522%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (285 instructions, 3.00%)</title><rect x="79.2516%" y="181" width="2.9956%" height="15" fill="rgb(252,210,38)" fg:x="7540" fg:w="285"/><text x="79.5446%" y="191.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.57%)</title><rect x="82.2472%" y="181" width="0.5676%" height="15" fill="rgb(242,134,21)" fg:x="7825" fg:w="54"/><text x="82.5402%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (7,789 instructions, 81.87%)</title><rect x="2.2388%" y="197" width="81.8688%" height="15" fill="rgb(213,28,48)" fg:x="213" fg:w="7789"/><text x="2.5318%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>timer::ID::__getit (14 instructions, 0.15%)</title><rect x="84.1076%" y="197" width="0.1472%" height="15" fill="rgb(250,196,2)" fg:x="8002" fg:w="14"/><text x="84.4006%" y="207.50"></text></g><g><title>ic_cdk_timers::TASKS::__getit (6 instructions, 0.06%)</title><rect x="84.2548%" y="181" width="0.0631%" height="15" fill="rgb(227,5,17)" fg:x="8016" fg:w="6"/><text x="84.5478%" y="191.50"></text></g><g><title>ic_cdk_timers::clear_timer (169 instructions, 1.78%)</title><rect x="84.2548%" y="197" width="1.7763%" height="15" fill="rgb(221,226,24)" fg:x="8016" fg:w="169"/><text x="84.5478%" y="207.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.05%)</title><rect x="86.0311%" y="165" width="0.0526%" height="15" fill="rgb(211,5,48)" fg:x="8185" fg:w="5"/><text x="86.3241%" y="175.50"></text></g><g><title>memset (136 instructions, 1.43%)</title><rect x="86.0837%" y="165" width="1.4295%" height="15" fill="rgb(219,150,6)" fg:x="8190" fg:w="136"/><text x="86.3766%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (259 instructions, 2.72%)</title><rect x="86.0311%" y="181" width="2.7223%" height="15" fill="rgb(251,46,16)" fg:x="8185" fg:w="259"/><text x="86.3241%" y="191.50">c..</text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.35%)</title><rect x="88.7534%" y="165" width="0.3469%" height="15" fill="rgb(220,204,40)" fg:x="8444" fg:w="33"/><text x="89.0464%" y="175.50"></text></g><g><title>std::io::Write::write_all (81 instructions, 0.85%)</title><rect x="88.7534%" y="181" width="0.8514%" height="15" fill="rgb(211,85,2)" fg:x="8444" fg:w="81"/><text x="89.0464%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.95%)</title><rect x="89.6048%" y="101" width="0.9460%" height="15" fill="rgb(229,17,7)" fg:x="8525" fg:w="90"/><text x="89.8978%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 1.05%)</title><rect x="89.6048%" y="117" width="1.0511%" height="15" fill="rgb(239,72,28)" fg:x="8525" fg:w="100"/><text x="89.8978%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 1.08%)</title><rect x="89.6048%" y="133" width="1.0826%" height="15" fill="rgb(230,47,54)" fg:x="8525" fg:w="103"/><text x="89.8978%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 1.40%)</title><rect x="89.6048%" y="149" width="1.3979%" height="15" fill="rgb(214,50,8)" fg:x="8525" fg:w="133"/><text x="89.8978%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 2.08%)</title><rect x="89.6048%" y="165" width="2.0811%" height="15" fill="rgb(216,198,43)" fg:x="8525" fg:w="198"/><text x="89.8978%" y="175.50">a..</text></g><g><title>memcpy (11 instructions, 0.12%)</title><rect x="91.6859%" y="165" width="0.1156%" height="15" fill="rgb(234,20,35)" fg:x="8723" fg:w="11"/><text x="91.9789%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.12%)</title><rect x="91.8016%" y="165" width="0.1156%" height="15" fill="rgb(254,45,19)" fg:x="8734" fg:w="11"/><text x="92.0945%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (422 instructions, 4.44%)</title><rect x="89.6048%" y="181" width="4.4356%" height="15" fill="rgb(219,14,44)" fg:x="8525" fg:w="422"/><text x="89.8978%" y="191.50">cand..</text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.33%)</title><rect x="94.0404%" y="165" width="0.3258%" height="15" fill="rgb(217,220,26)" fg:x="8947" fg:w="31"/><text x="94.3333%" y="175.50"></text></g><g><title>std::io::Write::write_all (79 instructions, 0.83%)</title><rect x="94.0404%" y="181" width="0.8304%" height="15" fill="rgb(213,158,28)" fg:x="8947" fg:w="79"/><text x="94.3333%" y="191.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.15%)</title><rect x="94.8707%" y="181" width="0.1472%" height="15" fill="rgb(252,51,52)" fg:x="9026" fg:w="14"/><text x="95.1637%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.05%)</title><rect x="95.0179%" y="181" width="0.0526%" height="15" fill="rgb(246,89,16)" fg:x="9040" fg:w="5"/><text x="95.3108%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.57%)</title><rect x="95.0704%" y="181" width="0.5676%" height="15" fill="rgb(216,158,49)" fg:x="9045" fg:w="54"/><text x="95.3634%" y="191.50"></text></g><g><title>candid::utils::write_args (1,055 instructions, 11.09%)</title><rect x="86.0311%" y="197" width="11.0889%" height="15" fill="rgb(236,107,19)" fg:x="8185" fg:w="1055"/><text x="86.3241%" y="207.50">candid::utils:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.85%)</title><rect x="97.1200%" y="197" width="0.8514%" height="15" fill="rgb(228,185,30)" fg:x="9240" fg:w="81"/><text x="97.4130%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 1.05%)</title><rect x="97.9714%" y="197" width="1.0511%" height="15" fill="rgb(246,134,8)" fg:x="9321" fg:w="100"/><text x="98.2644%" y="207.50"></text></g><g><title>all (9,514 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(214,143,50)" fg:x="0" fg:w="9514"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update cancelTimer (9,514 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,75,8)" fg:x="0" fg:w="9514"/><text x="0.2930%" y="223.50">canister_update cancelTimer</text></g></svg></svg>