<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="12216"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="0.0000%" y="229" width="0.6713%" height="15" fill="rgb(226,210,39)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="0.6713%" y="229" width="0.6713%" height="15" fill="rgb(208,219,16)" fg:x="82" fg:w="82"/><text x="0.9642%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="1.3425%" y="181" width="0.6713%" height="15" fill="rgb(216,158,51)" fg:x="164" fg:w="82"/><text x="1.6355%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,134 instructions, 9.28%)</title><rect x="1.3425%" y="197" width="9.2829%" height="15" fill="rgb(233,14,44)" fg:x="164" fg:w="1134"/><text x="1.6355%" y="207.50">ic_cdk::api..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.42%)</title><rect x="10.6254%" y="165" width="0.4175%" height="15" fill="rgb(237,97,39)" fg:x="1298" fg:w="51"/><text x="10.9184%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="11.0429%" y="149" width="0.0491%" height="15" fill="rgb(218,198,43)" fg:x="1349" fg:w="6"/><text x="11.3359%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 3.58%)</title><rect x="11.0429%" y="165" width="3.5773%" height="15" fill="rgb(231,104,20)" fg:x="1349" fg:w="437"/><text x="11.3359%" y="175.50">cor..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.52%)</title><rect x="14.6202%" y="165" width="0.5239%" height="15" fill="rgb(254,36,13)" fg:x="1786" fg:w="64"/><text x="14.9131%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.62%)</title><rect x="15.1441%" y="165" width="0.6221%" height="15" fill="rgb(248,14,50)" fg:x="1850" fg:w="76"/><text x="15.4370%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.62%)</title><rect x="15.7662%" y="165" width="0.6221%" height="15" fill="rgb(217,107,29)" fg:x="1926" fg:w="76"/><text x="16.0592%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.62%)</title><rect x="16.3883%" y="165" width="0.6221%" height="15" fill="rgb(251,169,33)" fg:x="2002" fg:w="76"/><text x="16.6813%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.62%)</title><rect x="17.0105%" y="165" width="0.6221%" height="15" fill="rgb(217,108,32)" fg:x="2078" fg:w="76"/><text x="17.3034%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.42%)</title><rect x="17.6326%" y="165" width="0.4175%" height="15" fill="rgb(219,66,42)" fg:x="2154" fg:w="51"/><text x="17.9256%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.78%)</title><rect x="18.0501%" y="165" width="0.7777%" height="15" fill="rgb(206,180,7)" fg:x="2205" fg:w="95"/><text x="18.3431%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="18.8278%" y="149" width="0.0491%" height="15" fill="rgb(208,226,31)" fg:x="2300" fg:w="6"/><text x="19.1207%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 3.58%)</title><rect x="18.8278%" y="165" width="3.5773%" height="15" fill="rgb(218,26,49)" fg:x="2300" fg:w="437"/><text x="19.1207%" y="175.50">cor..</text></g><g><title>memcmp (19 instructions, 0.16%)</title><rect x="22.4050%" y="165" width="0.1555%" height="15" fill="rgb(233,197,48)" fg:x="2737" fg:w="19"/><text x="22.6980%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="22.5606%" y="133" width="0.6713%" height="15" fill="rgb(252,181,51)" fg:x="2756" fg:w="82"/><text x="22.8535%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.55%)</title><rect x="23.2318%" y="101" width="0.5485%" height="15" fill="rgb(253,90,19)" fg:x="2838" fg:w="67"/><text x="23.5248%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.79%)</title><rect x="23.2318%" y="117" width="0.7859%" height="15" fill="rgb(215,171,30)" fg:x="2838" fg:w="96"/><text x="23.5248%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.09%)</title><rect x="24.0177%" y="69" width="0.0900%" height="15" fill="rgb(214,222,9)" fg:x="2934" fg:w="11"/><text x="24.3107%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.29%)</title><rect x="24.1077%" y="53" width="0.2865%" height="15" fill="rgb(223,3,22)" fg:x="2945" fg:w="35"/><text x="24.4007%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.52%)</title><rect x="24.1077%" y="69" width="0.5239%" height="15" fill="rgb(225,196,46)" fg:x="2945" fg:w="64"/><text x="24.4007%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.18%)</title><rect x="24.0177%" y="85" width="1.1788%" height="15" fill="rgb(209,110,37)" fg:x="2934" fg:w="144"/><text x="24.3107%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.72%)</title><rect x="24.0177%" y="101" width="1.7191%" height="15" fill="rgb(249,89,12)" fg:x="2934" fg:w="210"/><text x="24.3107%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.80%)</title><rect x="24.0177%" y="117" width="1.8009%" height="15" fill="rgb(226,27,33)" fg:x="2934" fg:w="220"/><text x="24.3107%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 3.68%)</title><rect x="23.2318%" y="133" width="3.6755%" height="15" fill="rgb(213,82,22)" fg:x="2838" fg:w="449"/><text x="23.5248%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 5.46%)</title><rect x="22.5606%" y="149" width="5.4601%" height="15" fill="rgb(248,140,0)" fg:x="2756" fg:w="667"/><text x="22.8535%" y="159.50">alloc..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.52%)</title><rect x="28.0206%" y="149" width="0.5239%" height="15" fill="rgb(228,106,3)" fg:x="3423" fg:w="64"/><text x="28.3136%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.50%)</title><rect x="28.5445%" y="149" width="0.4993%" height="15" fill="rgb(209,23,37)" fg:x="3487" fg:w="61"/><text x="28.8375%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 7.39%)</title><rect x="22.5606%" y="165" width="7.3919%" height="15" fill="rgb(241,93,50)" fg:x="2756" fg:w="903"/><text x="22.8535%" y="175.50">binread:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.22%)</title><rect x="29.9525%" y="165" width="0.2210%" height="15" fill="rgb(253,46,43)" fg:x="3659" fg:w="27"/><text x="30.2455%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.38%)</title><rect x="30.1735%" y="165" width="0.3766%" height="15" fill="rgb(226,206,43)" fg:x="3686" fg:w="46"/><text x="30.4665%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.78%)</title><rect x="30.5501%" y="165" width="0.7777%" height="15" fill="rgb(217,54,7)" fg:x="3732" fg:w="95"/><text x="30.8431%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="31.3278%" y="133" width="0.0491%" height="15" fill="rgb(223,5,52)" fg:x="3827" fg:w="6"/><text x="31.6207%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 3.58%)</title><rect x="31.3278%" y="149" width="3.5773%" height="15" fill="rgb(206,52,46)" fg:x="3827" fg:w="437"/><text x="31.6207%" y="159.50">cor..</text></g><g><title>memcmp (19 instructions, 0.16%)</title><rect x="34.9050%" y="149" width="0.1555%" height="15" fill="rgb(253,136,11)" fg:x="4264" fg:w="19"/><text x="35.1980%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="35.0606%" y="117" width="0.6713%" height="15" fill="rgb(208,106,33)" fg:x="4283" fg:w="82"/><text x="35.3535%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.55%)</title><rect x="35.7318%" y="85" width="0.5485%" height="15" fill="rgb(206,54,4)" fg:x="4365" fg:w="67"/><text x="36.0248%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.79%)</title><rect x="35.7318%" y="101" width="0.7859%" height="15" fill="rgb(213,3,15)" fg:x="4365" fg:w="96"/><text x="36.0248%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.09%)</title><rect x="36.5177%" y="53" width="0.0900%" height="15" fill="rgb(252,211,39)" fg:x="4461" fg:w="11"/><text x="36.8107%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.29%)</title><rect x="36.6077%" y="37" width="0.2865%" height="15" fill="rgb(223,6,36)" fg:x="4472" fg:w="35"/><text x="36.9007%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.52%)</title><rect x="36.6077%" y="53" width="0.5239%" height="15" fill="rgb(252,169,45)" fg:x="4472" fg:w="64"/><text x="36.9007%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.18%)</title><rect x="36.5177%" y="69" width="1.1788%" height="15" fill="rgb(212,48,26)" fg:x="4461" fg:w="144"/><text x="36.8107%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.72%)</title><rect x="36.5177%" y="85" width="1.7191%" height="15" fill="rgb(251,102,48)" fg:x="4461" fg:w="210"/><text x="36.8107%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.80%)</title><rect x="36.5177%" y="101" width="1.8009%" height="15" fill="rgb(243,208,16)" fg:x="4461" fg:w="220"/><text x="36.8107%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 3.68%)</title><rect x="35.7318%" y="117" width="3.6755%" height="15" fill="rgb(219,96,24)" fg:x="4365" fg:w="449"/><text x="36.0248%" y="127.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 5.46%)</title><rect x="35.0606%" y="133" width="5.4601%" height="15" fill="rgb(219,33,29)" fg:x="4283" fg:w="667"/><text x="35.3535%" y="143.50">alloc..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.52%)</title><rect x="40.5206%" y="133" width="0.5239%" height="15" fill="rgb(223,176,5)" fg:x="4950" fg:w="64"/><text x="40.8136%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.50%)</title><rect x="41.0445%" y="133" width="0.4993%" height="15" fill="rgb(228,140,14)" fg:x="5014" fg:w="61"/><text x="41.3375%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 7.39%)</title><rect x="35.0606%" y="149" width="7.3919%" height="15" fill="rgb(217,179,31)" fg:x="4283" fg:w="903"/><text x="35.3535%" y="159.50">binread:..</text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,486 instructions, 12.16%)</title><rect x="31.3278%" y="165" width="12.1644%" height="15" fill="rgb(230,9,30)" fg:x="3827" fg:w="1486"/><text x="31.6207%" y="175.50">binread::binrea..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.38%)</title><rect x="43.4921%" y="165" width="0.3766%" height="15" fill="rgb(230,136,20)" fg:x="5313" fg:w="46"/><text x="43.7851%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.12%)</title><rect x="43.8687%" y="165" width="0.1228%" height="15" fill="rgb(215,210,22)" fg:x="5359" fg:w="15"/><text x="44.1617%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.07%)</title><rect x="43.9915%" y="165" width="0.0655%" height="15" fill="rgb(218,43,5)" fg:x="5374" fg:w="8"/><text x="44.2845%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="44.0570%" y="165" width="0.6713%" height="15" fill="rgb(216,11,5)" fg:x="5382" fg:w="82"/><text x="44.3499%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="44.7282%" y="165" width="0.6713%" height="15" fill="rgb(209,82,29)" fg:x="5464" fg:w="82"/><text x="45.0212%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.04%)</title><rect x="45.3995%" y="165" width="0.0409%" height="15" fill="rgb(244,115,12)" fg:x="5546" fg:w="5"/><text x="45.6924%" y="175.50"></text></g><g><title>memcpy (392 instructions, 3.21%)</title><rect x="45.4404%" y="165" width="3.2089%" height="15" fill="rgb(222,82,18)" fg:x="5551" fg:w="392"/><text x="45.7334%" y="175.50">me..</text></g><g><title>memcpy (392 instructions, 3.21%)</title><rect x="48.6493%" y="165" width="3.2089%" height="15" fill="rgb(249,227,8)" fg:x="5943" fg:w="392"/><text x="48.9423%" y="175.50">me..</text></g><g><title>memcpy (504 instructions, 4.13%)</title><rect x="51.8582%" y="165" width="4.1257%" height="15" fill="rgb(253,141,45)" fg:x="6335" fg:w="504"/><text x="52.1512%" y="175.50">mem..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (6,534 instructions, 53.49%)</title><rect x="10.6254%" y="181" width="53.4872%" height="15" fill="rgb(234,184,4)" fg:x="1298" fg:w="6534"/><text x="10.9184%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 3.34%)</title><rect x="64.1126%" y="181" width="3.3399%" height="15" fill="rgb(218,194,23)" fg:x="7832" fg:w="408"/><text x="64.4056%" y="191.50">me..</text></g><g><title>memcpy (408 instructions, 3.34%)</title><rect x="67.4525%" y="181" width="3.3399%" height="15" fill="rgb(235,66,41)" fg:x="8240" fg:w="408"/><text x="67.7455%" y="191.50">me..</text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.30%)</title><rect x="70.7924%" y="181" width="0.3029%" height="15" fill="rgb(245,217,1)" fg:x="8648" fg:w="37"/><text x="71.0854%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.07%)</title><rect x="71.0953%" y="165" width="0.0655%" height="15" fill="rgb(229,91,1)" fg:x="8685" fg:w="8"/><text x="71.3883%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.73%)</title><rect x="71.1608%" y="149" width="0.7286%" height="15" fill="rgb(207,101,30)" fg:x="8693" fg:w="89"/><text x="71.4537%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.50%)</title><rect x="72.4705%" y="149" width="0.4993%" height="15" fill="rgb(223,82,49)" fg:x="8853" fg:w="61"/><text x="72.7635%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (292 instructions, 2.39%)</title><rect x="71.1608%" y="165" width="2.3903%" height="15" fill="rgb(218,167,17)" fg:x="8693" fg:w="292"/><text x="71.4537%" y="175.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (350 instructions, 2.87%)</title><rect x="71.0953%" y="181" width="2.8651%" height="15" fill="rgb(208,103,14)" fg:x="8685" fg:w="350"/><text x="71.3883%" y="191.50">co..</text></g><g><title>candid::utils::decode_args_with_config_debug (7,879 instructions, 64.50%)</title><rect x="10.6254%" y="197" width="64.4974%" height="15" fill="rgb(238,20,8)" fg:x="1298" fg:w="7879"/><text x="10.9184%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.50%)</title><rect x="75.1228%" y="197" width="0.4993%" height="15" fill="rgb(218,80,54)" fg:x="9177" fg:w="61"/><text x="75.4158%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (9,177 instructions, 75.12%)</title><rect x="1.3425%" y="213" width="75.1228%" height="15" fill="rgb(240,144,17)" fg:x="164" fg:w="9177"/><text x="1.6355%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::ser::IDLBuilder::new (53 instructions, 0.43%)</title><rect x="76.4653%" y="197" width="0.4339%" height="15" fill="rgb(245,27,50)" fg:x="9341" fg:w="53"/><text x="76.7583%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 4.24%)</title><rect x="76.8991%" y="197" width="4.2403%" height="15" fill="rgb(251,51,7)" fg:x="9394" fg:w="518"/><text x="77.1921%" y="207.50">std:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.67%)</title><rect x="81.1395%" y="149" width="0.6713%" height="15" fill="rgb(245,217,29)" fg:x="9912" fg:w="82"/><text x="81.4325%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 1.01%)</title><rect x="81.1395%" y="165" width="1.0069%" height="15" fill="rgb(221,176,29)" fg:x="9912" fg:w="123"/><text x="81.4325%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 1.69%)</title><rect x="81.1395%" y="181" width="1.6863%" height="15" fill="rgb(212,180,24)" fg:x="9912" fg:w="206"/><text x="81.4325%" y="191.50"></text></g><g><title>memcpy (15 instructions, 0.12%)</title><rect x="82.8258%" y="181" width="0.1228%" height="15" fill="rgb(254,24,2)" fg:x="10118" fg:w="15"/><text x="83.1188%" y="191.50"></text></g><g><title>memcpy (15 instructions, 0.12%)</title><rect x="82.9486%" y="181" width="0.1228%" height="15" fill="rgb(230,100,2)" fg:x="10133" fg:w="15"/><text x="83.2416%" y="191.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 3.50%)</title><rect x="81.1395%" y="197" width="3.5036%" height="15" fill="rgb(219,142,25)" fg:x="9912" fg:w="428"/><text x="81.4325%" y="207.50">can..</text></g><g><title>std::io::Write::write_all (516 instructions, 4.22%)</title><rect x="84.6431%" y="197" width="4.2240%" height="15" fill="rgb(240,73,43)" fg:x="10340" fg:w="516"/><text x="84.9361%" y="207.50">std:..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.06%)</title><rect x="88.8671%" y="197" width="0.0573%" height="15" fill="rgb(214,114,15)" fg:x="10856" fg:w="7"/><text x="89.1600%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.07%)</title><rect x="88.9244%" y="197" width="0.0655%" height="15" fill="rgb(207,130,4)" fg:x="10863" fg:w="8"/><text x="89.2173%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.50%)</title><rect x="88.9898%" y="197" width="0.4993%" height="15" fill="rgb(221,25,40)" fg:x="10871" fg:w="61"/><text x="89.2828%" y="207.50"></text></g><g><title>candid::utils::write_args (1,769 instructions, 14.48%)</title><rect x="76.4653%" y="213" width="14.4810%" height="15" fill="rgb(241,184,7)" fg:x="9341" fg:w="1769"/><text x="76.7583%" y="223.50">candid::utils::wri..</text></g><g><title>timer::__canister_method_cancelTimer::{{closure}} (11,618 instructions, 95.10%)</title><rect x="1.3425%" y="229" width="95.1048%" height="15" fill="rgb(235,159,4)" fg:x="164" fg:w="11618"/><text x="1.6355%" y="239.50">timer::__canister_method_cancelTimer::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.12%)</title><rect x="96.4473%" y="229" width="0.1228%" height="15" fill="rgb(214,87,48)" fg:x="11782" fg:w="15"/><text x="96.7403%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.22%)</title><rect x="97.3068%" y="197" width="0.2210%" height="15" fill="rgb(246,198,24)" fg:x="11887" fg:w="27"/><text x="97.5998%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 1.68%)</title><rect x="96.5783%" y="213" width="1.6781%" height="15" fill="rgb(209,66,40)" fg:x="11798" fg:w="205"/><text x="96.8712%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 2.64%)</title><rect x="96.5701%" y="229" width="2.6441%" height="15" fill="rgb(233,147,39)" fg:x="11797" fg:w="323"/><text x="96.8630%" y="239.50">&lt;..</text></g><g><title>all (12,216 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(231,145,52)" fg:x="0" fg:w="12216"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update cancelTimer (12,216 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,20,26)" fg:x="0" fg:w="12216"/><text x="0.2930%" y="255.50">canister_update cancelTimer</text></g></svg></svg>