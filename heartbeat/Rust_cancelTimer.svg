<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="7594"><g><title>ic_cdk::setup (19 instructions, 0.25%)</title><rect x="0.0000%" y="197" width="0.2502%" height="15" fill="rgb(249,193,18)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="0.2502%" y="197" width="1.0008%" height="15" fill="rgb(209,133,39)" fg:x="19" fg:w="76"/><text x="0.5432%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="1.2510%" y="197" width="1.0008%" height="15" fill="rgb(232,100,14)" fg:x="95" fg:w="76"/><text x="1.5440%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="2.2518%" y="165" width="1.0008%" height="15" fill="rgb(224,185,1)" fg:x="171" fg:w="76"/><text x="2.5447%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.91%)</title><rect x="3.2526%" y="149" width="0.9086%" height="15" fill="rgb(223,139,8)" fg:x="247" fg:w="69"/><text x="3.5455%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.05%)</title><rect x="4.1612%" y="133" width="0.0527%" height="15" fill="rgb(232,213,38)" fg:x="316" fg:w="4"/><text x="4.4541%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 5.35%)</title><rect x="4.1612%" y="149" width="5.3463%" height="15" fill="rgb(207,94,22)" fg:x="316" fg:w="406"/><text x="4.4541%" y="159.50">core:..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 1.08%)</title><rect x="9.5075%" y="149" width="1.0798%" height="15" fill="rgb(219,183,54)" fg:x="722" fg:w="82"/><text x="9.8005%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.71%)</title><rect x="10.5873%" y="149" width="0.7111%" height="15" fill="rgb(216,185,54)" fg:x="804" fg:w="54"/><text x="10.8803%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.71%)</title><rect x="11.2984%" y="149" width="0.7111%" height="15" fill="rgb(254,217,39)" fg:x="858" fg:w="54"/><text x="11.5914%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.71%)</title><rect x="12.0095%" y="149" width="0.7111%" height="15" fill="rgb(240,178,23)" fg:x="912" fg:w="54"/><text x="12.3024%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.71%)</title><rect x="12.7206%" y="149" width="0.7111%" height="15" fill="rgb(218,11,47)" fg:x="966" fg:w="54"/><text x="13.0135%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.91%)</title><rect x="13.4317%" y="149" width="0.9086%" height="15" fill="rgb(218,51,51)" fg:x="1020" fg:w="69"/><text x="13.7246%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.86%)</title><rect x="14.3403%" y="149" width="0.8559%" height="15" fill="rgb(238,126,27)" fg:x="1089" fg:w="65"/><text x="14.6332%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.05%)</title><rect x="15.1962%" y="133" width="0.0527%" height="15" fill="rgb(249,202,22)" fg:x="1154" fg:w="4"/><text x="15.4892%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 5.35%)</title><rect x="15.1962%" y="149" width="5.3463%" height="15" fill="rgb(254,195,49)" fg:x="1154" fg:w="406"/><text x="15.4892%" y="159.50">core:..</text></g><g><title>memcmp (16 instructions, 0.21%)</title><rect x="20.5425%" y="149" width="0.2107%" height="15" fill="rgb(208,123,14)" fg:x="1560" fg:w="16"/><text x="20.8355%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="20.7532%" y="133" width="1.0008%" height="15" fill="rgb(224,200,8)" fg:x="1576" fg:w="76"/><text x="21.0462%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.79%)</title><rect x="21.7540%" y="101" width="0.7901%" height="15" fill="rgb(217,61,36)" fg:x="1652" fg:w="60"/><text x="22.0470%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 1.12%)</title><rect x="21.7540%" y="117" width="1.1193%" height="15" fill="rgb(206,35,45)" fg:x="1652" fg:w="85"/><text x="22.0470%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.12%)</title><rect x="22.8733%" y="69" width="0.1185%" height="15" fill="rgb(217,65,33)" fg:x="1737" fg:w="9"/><text x="23.1663%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.40%)</title><rect x="22.9918%" y="53" width="0.3950%" height="15" fill="rgb(222,158,48)" fg:x="1746" fg:w="30"/><text x="23.2848%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.72%)</title><rect x="22.9918%" y="69" width="0.7243%" height="15" fill="rgb(254,2,54)" fg:x="1746" fg:w="55"/><text x="23.2848%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 1.55%)</title><rect x="22.8733%" y="85" width="1.5539%" height="15" fill="rgb(250,143,38)" fg:x="1737" fg:w="118"/><text x="23.1663%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 2.25%)</title><rect x="22.8733%" y="101" width="2.2518%" height="15" fill="rgb(248,25,0)" fg:x="1737" fg:w="171"/><text x="23.1663%" y="111.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 2.32%)</title><rect x="22.8733%" y="117" width="2.3176%" height="15" fill="rgb(206,152,27)" fg:x="1737" fg:w="176"/><text x="23.1663%" y="127.50">c..</text></g><g><title>core::fmt::write (372 instructions, 4.90%)</title><rect x="21.7540%" y="133" width="4.8986%" height="15" fill="rgb(240,77,30)" fg:x="1652" fg:w="372"/><text x="22.0470%" y="143.50">core:..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 7.76%)</title><rect x="20.7532%" y="149" width="7.7561%" height="15" fill="rgb(231,5,3)" fg:x="1576" fg:w="589"/><text x="21.0462%" y="159.50">alloc::fm..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 1.08%)</title><rect x="28.5093%" y="149" width="1.0798%" height="15" fill="rgb(207,226,32)" fg:x="2165" fg:w="82"/><text x="28.8023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.72%)</title><rect x="29.5891%" y="149" width="0.7243%" height="15" fill="rgb(222,207,47)" fg:x="2247" fg:w="55"/><text x="29.8821%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.83%)</title><rect x="30.3134%" y="149" width="0.8296%" height="15" fill="rgb(229,115,45)" fg:x="2302" fg:w="63"/><text x="30.6064%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.86%)</title><rect x="31.1430%" y="149" width="0.8559%" height="15" fill="rgb(224,191,6)" fg:x="2365" fg:w="65"/><text x="31.4360%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.05%)</title><rect x="31.9989%" y="117" width="0.0527%" height="15" fill="rgb(230,227,24)" fg:x="2430" fg:w="4"/><text x="32.2919%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 5.35%)</title><rect x="31.9989%" y="133" width="5.3463%" height="15" fill="rgb(228,80,19)" fg:x="2430" fg:w="406"/><text x="32.2919%" y="143.50">core:..</text></g><g><title>memcmp (16 instructions, 0.21%)</title><rect x="37.3453%" y="133" width="0.2107%" height="15" fill="rgb(247,229,0)" fg:x="2836" fg:w="16"/><text x="37.6382%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="37.5560%" y="117" width="1.0008%" height="15" fill="rgb(237,194,15)" fg:x="2852" fg:w="76"/><text x="37.8489%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.79%)</title><rect x="38.5568%" y="85" width="0.7901%" height="15" fill="rgb(219,203,20)" fg:x="2928" fg:w="60"/><text x="38.8497%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 1.12%)</title><rect x="38.5568%" y="101" width="1.1193%" height="15" fill="rgb(234,128,8)" fg:x="2928" fg:w="85"/><text x="38.8497%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.12%)</title><rect x="39.6761%" y="53" width="0.1185%" height="15" fill="rgb(248,202,8)" fg:x="3013" fg:w="9"/><text x="39.9690%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.40%)</title><rect x="39.7946%" y="37" width="0.3950%" height="15" fill="rgb(206,104,37)" fg:x="3022" fg:w="30"/><text x="40.0875%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.72%)</title><rect x="39.7946%" y="53" width="0.7243%" height="15" fill="rgb(223,8,27)" fg:x="3022" fg:w="55"/><text x="40.0875%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 1.55%)</title><rect x="39.6761%" y="69" width="1.5539%" height="15" fill="rgb(216,217,28)" fg:x="3013" fg:w="118"/><text x="39.9690%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 2.25%)</title><rect x="39.6761%" y="85" width="2.2518%" height="15" fill="rgb(249,199,1)" fg:x="3013" fg:w="171"/><text x="39.9690%" y="95.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 2.32%)</title><rect x="39.6761%" y="101" width="2.3176%" height="15" fill="rgb(240,85,17)" fg:x="3013" fg:w="176"/><text x="39.9690%" y="111.50">c..</text></g><g><title>core::fmt::write (372 instructions, 4.90%)</title><rect x="38.5568%" y="117" width="4.8986%" height="15" fill="rgb(206,108,45)" fg:x="2928" fg:w="372"/><text x="38.8497%" y="127.50">core:..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 7.76%)</title><rect x="37.5560%" y="133" width="7.7561%" height="15" fill="rgb(245,210,41)" fg:x="2852" fg:w="589"/><text x="37.8489%" y="143.50">alloc::fm..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 1.08%)</title><rect x="45.3121%" y="133" width="1.0798%" height="15" fill="rgb(206,13,37)" fg:x="3441" fg:w="82"/><text x="45.6051%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.72%)</title><rect x="46.3919%" y="133" width="0.7243%" height="15" fill="rgb(250,61,18)" fg:x="3523" fg:w="55"/><text x="46.6849%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,307 instructions, 17.21%)</title><rect x="31.9989%" y="149" width="17.2110%" height="15" fill="rgb(235,172,48)" fg:x="2430" fg:w="1307"/><text x="32.2919%" y="159.50">binread::binread_impls..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.83%)</title><rect x="49.2099%" y="149" width="0.8296%" height="15" fill="rgb(249,201,17)" fg:x="3737" fg:w="63"/><text x="49.5029%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.17%)</title><rect x="50.0395%" y="149" width="0.1712%" height="15" fill="rgb(219,208,6)" fg:x="3800" fg:w="13"/><text x="50.3325%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.17%)</title><rect x="50.2107%" y="149" width="0.1712%" height="15" fill="rgb(248,31,23)" fg:x="3813" fg:w="13"/><text x="50.5037%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.09%)</title><rect x="50.3819%" y="149" width="0.0922%" height="15" fill="rgb(245,15,42)" fg:x="3826" fg:w="7"/><text x="50.6748%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.20%)</title><rect x="50.4741%" y="149" width="0.1975%" height="15" fill="rgb(222,217,39)" fg:x="3833" fg:w="15"/><text x="50.7670%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="50.6716%" y="149" width="1.0008%" height="15" fill="rgb(210,219,27)" fg:x="3848" fg:w="76"/><text x="50.9646%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="51.6724%" y="149" width="1.0008%" height="15" fill="rgb(252,166,36)" fg:x="3924" fg:w="76"/><text x="51.9653%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.03%)</title><rect x="52.6732%" y="149" width="0.0263%" height="15" fill="rgb(245,132,34)" fg:x="4000" fg:w="2"/><text x="52.9661%" y="159.50"></text></g><g><title>memcpy (399 instructions, 5.25%)</title><rect x="52.6995%" y="149" width="5.2541%" height="15" fill="rgb(236,54,3)" fg:x="4002" fg:w="399"/><text x="52.9925%" y="159.50">memcpy</text></g><g><title>memcpy (399 instructions, 5.25%)</title><rect x="57.9536%" y="149" width="5.2541%" height="15" fill="rgb(241,173,43)" fg:x="4401" fg:w="399"/><text x="58.2466%" y="159.50">memcpy</text></g><g><title>candid::de::IDLDeserialize::new (5,335 instructions, 70.25%)</title><rect x="3.2526%" y="165" width="70.2528%" height="15" fill="rgb(215,190,9)" fg:x="247" fg:w="5335"/><text x="3.5455%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 4.66%)</title><rect x="73.5054%" y="165" width="4.6616%" height="15" fill="rgb(242,101,16)" fg:x="5582" fg:w="354"/><text x="73.7984%" y="175.50">memc..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.16%)</title><rect x="78.1670%" y="133" width="0.1580%" height="15" fill="rgb(223,190,21)" fg:x="5936" fg:w="12"/><text x="78.4599%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 1.07%)</title><rect x="78.3250%" y="117" width="1.0666%" height="15" fill="rgb(215,228,25)" fg:x="5948" fg:w="81"/><text x="78.6180%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 1.32%)</title><rect x="79.7472%" y="117" width="1.3168%" height="15" fill="rgb(225,36,22)" fg:x="6056" fg:w="100"/><text x="80.0401%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 3.09%)</title><rect x="78.3250%" y="133" width="3.0945%" height="15" fill="rgb(251,106,46)" fg:x="5948" fg:w="235"/><text x="78.6180%" y="143.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (284 instructions, 3.74%)</title><rect x="78.1670%" y="149" width="3.7398%" height="15" fill="rgb(208,90,1)" fg:x="5936" fg:w="284"/><text x="78.4599%" y="159.50">cor..</text></g><g><title>candid::de::IDLDeserialize::done (322 instructions, 4.24%)</title><rect x="78.1670%" y="165" width="4.2402%" height="15" fill="rgb(243,10,4)" fg:x="5936" fg:w="322"/><text x="78.4599%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.72%)</title><rect x="82.4072%" y="165" width="0.7243%" height="15" fill="rgb(212,137,27)" fg:x="6258" fg:w="55"/><text x="82.7001%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (6,272 instructions, 82.59%)</title><rect x="2.2518%" y="181" width="82.5915%" height="15" fill="rgb(231,220,49)" fg:x="171" fg:w="6272"/><text x="2.5447%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>ic_cdk_timers::TASKS::__getit (9 instructions, 0.12%)</title><rect x="84.8433%" y="181" width="0.1185%" height="15" fill="rgb(237,96,20)" fg:x="6443" fg:w="9"/><text x="85.1363%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.07%)</title><rect x="84.9618%" y="149" width="0.0658%" height="15" fill="rgb(239,229,30)" fg:x="6452" fg:w="5"/><text x="85.2548%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (89 instructions, 1.17%)</title><rect x="84.9618%" y="165" width="1.1720%" height="15" fill="rgb(219,65,33)" fg:x="6452" fg:w="89"/><text x="85.2548%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.42%)</title><rect x="86.1338%" y="165" width="0.4214%" height="15" fill="rgb(243,134,7)" fg:x="6541" fg:w="32"/><text x="86.4268%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 1.00%)</title><rect x="86.5552%" y="117" width="1.0008%" height="15" fill="rgb(216,177,54)" fg:x="6573" fg:w="76"/><text x="86.8481%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 1.45%)</title><rect x="86.5552%" y="133" width="1.4485%" height="15" fill="rgb(211,160,20)" fg:x="6573" fg:w="110"/><text x="86.8481%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 2.30%)</title><rect x="86.5552%" y="149" width="2.3045%" height="15" fill="rgb(239,85,39)" fg:x="6573" fg:w="175"/><text x="86.8481%" y="159.50">a..</text></g><g><title>memcpy (11 instructions, 0.14%)</title><rect x="88.8596%" y="149" width="0.1449%" height="15" fill="rgb(232,125,22)" fg:x="6748" fg:w="11"/><text x="89.1526%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.14%)</title><rect x="89.0045%" y="149" width="0.1449%" height="15" fill="rgb(244,57,34)" fg:x="6759" fg:w="11"/><text x="89.2974%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 4.73%)</title><rect x="86.5552%" y="165" width="4.7274%" height="15" fill="rgb(214,203,32)" fg:x="6573" fg:w="359"/><text x="86.8481%" y="175.50">cand..</text></g><g><title>std::io::Write::write_all (30 instructions, 0.40%)</title><rect x="91.2826%" y="165" width="0.3950%" height="15" fill="rgb(207,58,43)" fg:x="6932" fg:w="30"/><text x="91.5756%" y="175.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.07%)</title><rect x="91.6776%" y="165" width="0.0658%" height="15" fill="rgb(215,193,15)" fg:x="6962" fg:w="5"/><text x="91.9706%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.07%)</title><rect x="91.7435%" y="165" width="0.0658%" height="15" fill="rgb(232,15,44)" fg:x="6967" fg:w="5"/><text x="92.0365%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.72%)</title><rect x="91.8093%" y="165" width="0.7243%" height="15" fill="rgb(212,3,48)" fg:x="6972" fg:w="55"/><text x="92.1023%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (705 instructions, 9.28%)</title><rect x="84.9618%" y="181" width="9.2836%" height="15" fill="rgb(218,128,7)" fg:x="6452" fg:w="705"/><text x="85.2548%" y="191.50">ic_cdk::api..</text></g><g><title>timer::cancelTimer_1_::{{closure}} (7,132 instructions, 93.92%)</title><rect x="2.2518%" y="197" width="93.9162%" height="15" fill="rgb(226,216,39)" fg:x="171" fg:w="7132"/><text x="2.5447%" y="207.50">timer::cancelTimer_1_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.16%)</title><rect x="96.1680%" y="197" width="0.1580%" height="15" fill="rgb(243,47,51)" fg:x="7303" fg:w="12"/><text x="96.4610%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 1.07%)</title><rect x="96.3260%" y="197" width="1.0666%" height="15" fill="rgb(241,183,40)" fg:x="7315" fg:w="81"/><text x="96.6190%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 1.32%)</title><rect x="97.3927%" y="197" width="1.3168%" height="15" fill="rgb(231,217,32)" fg:x="7396" fg:w="100"/><text x="97.6856%" y="207.50"></text></g><g><title>all (7,594 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,61,38)" fg:x="0" fg:w="7594"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update cancelTimer (7,594 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,210,5)" fg:x="0" fg:w="7594"/><text x="0.2930%" y="223.50">canister_update cancelTimer</text></g></svg></svg>