<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="11698"><g><title>ic_cdk::setup (24 instructions, 0.21%)</title><rect x="0.0000%" y="197" width="0.2052%" height="15" fill="rgb(223,11,35)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="0.2052%" y="197" width="0.7095%" height="15" fill="rgb(251,219,26)" fg:x="24" fg:w="83"/><text x="0.4981%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="0.9147%" y="197" width="0.7095%" height="15" fill="rgb(231,119,3)" fg:x="107" fg:w="83"/><text x="1.2077%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="1.6242%" y="165" width="0.7095%" height="15" fill="rgb(216,97,11)" fg:x="190" fg:w="83"/><text x="1.9172%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.70%)</title><rect x="2.3337%" y="149" width="0.7010%" height="15" fill="rgb(223,59,9)" fg:x="273" fg:w="82"/><text x="2.6267%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="3.0347%" y="133" width="0.0513%" height="15" fill="rgb(233,93,31)" fg:x="355" fg:w="6"/><text x="3.3277%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.79%)</title><rect x="3.0347%" y="149" width="3.7870%" height="15" fill="rgb(239,81,33)" fg:x="355" fg:w="443"/><text x="3.3277%" y="159.50">cor..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.81%)</title><rect x="6.8217%" y="149" width="0.8121%" height="15" fill="rgb(213,120,34)" fg:x="798" fg:w="95"/><text x="7.1146%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.51%)</title><rect x="7.6338%" y="149" width="0.5129%" height="15" fill="rgb(243,49,53)" fg:x="893" fg:w="60"/><text x="7.9268%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.51%)</title><rect x="8.1467%" y="149" width="0.5129%" height="15" fill="rgb(247,216,33)" fg:x="953" fg:w="60"/><text x="8.4397%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.51%)</title><rect x="8.6596%" y="149" width="0.5129%" height="15" fill="rgb(226,26,14)" fg:x="1013" fg:w="60"/><text x="8.9526%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.51%)</title><rect x="9.1725%" y="149" width="0.5129%" height="15" fill="rgb(215,49,53)" fg:x="1073" fg:w="60"/><text x="9.4655%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.70%)</title><rect x="9.6854%" y="149" width="0.7010%" height="15" fill="rgb(245,162,40)" fg:x="1133" fg:w="82"/><text x="9.9784%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.60%)</title><rect x="10.3864%" y="149" width="0.5984%" height="15" fill="rgb(229,68,17)" fg:x="1215" fg:w="70"/><text x="10.6794%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="10.9848%" y="133" width="0.0513%" height="15" fill="rgb(213,182,10)" fg:x="1285" fg:w="6"/><text x="11.2778%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.79%)</title><rect x="10.9848%" y="149" width="3.7870%" height="15" fill="rgb(245,125,30)" fg:x="1285" fg:w="443"/><text x="11.2778%" y="159.50">cor..</text></g><g><title>memcmp (19 instructions, 0.16%)</title><rect x="14.7718%" y="149" width="0.1624%" height="15" fill="rgb(232,202,2)" fg:x="1728" fg:w="19"/><text x="15.0647%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="14.9342%" y="133" width="0.7095%" height="15" fill="rgb(237,140,51)" fg:x="1747" fg:w="83"/><text x="15.2271%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.57%)</title><rect x="15.6437%" y="101" width="0.5727%" height="15" fill="rgb(236,157,25)" fg:x="1830" fg:w="67"/><text x="15.9367%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.82%)</title><rect x="15.6437%" y="117" width="0.8207%" height="15" fill="rgb(219,209,0)" fg:x="1830" fg:w="96"/><text x="15.9367%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.09%)</title><rect x="16.4644%" y="69" width="0.0940%" height="15" fill="rgb(240,116,54)" fg:x="1926" fg:w="11"/><text x="16.7573%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.30%)</title><rect x="16.5584%" y="53" width="0.2992%" height="15" fill="rgb(216,10,36)" fg:x="1937" fg:w="35"/><text x="16.8514%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.55%)</title><rect x="16.5584%" y="69" width="0.5471%" height="15" fill="rgb(222,72,44)" fg:x="1937" fg:w="64"/><text x="16.8514%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.23%)</title><rect x="16.4644%" y="85" width="1.2310%" height="15" fill="rgb(232,159,9)" fg:x="1926" fg:w="144"/><text x="16.7573%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.79%)</title><rect x="16.4644%" y="101" width="1.7866%" height="15" fill="rgb(210,39,32)" fg:x="1926" fg:w="209"/><text x="16.7573%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.87%)</title><rect x="16.4644%" y="117" width="1.8721%" height="15" fill="rgb(216,194,45)" fg:x="1926" fg:w="219"/><text x="16.7573%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 3.91%)</title><rect x="15.6437%" y="133" width="3.9067%" height="15" fill="rgb(218,18,35)" fg:x="1830" fg:w="457"/><text x="15.9367%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (678 instructions, 5.80%)</title><rect x="14.9342%" y="149" width="5.7959%" height="15" fill="rgb(207,83,51)" fg:x="1747" fg:w="678"/><text x="15.2271%" y="159.50">alloc:..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.81%)</title><rect x="20.7300%" y="149" width="0.8121%" height="15" fill="rgb(225,63,43)" fg:x="2425" fg:w="95"/><text x="21.0230%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.51%)</title><rect x="21.5421%" y="149" width="0.5129%" height="15" fill="rgb(207,57,36)" fg:x="2520" fg:w="60"/><text x="21.8351%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.65%)</title><rect x="22.0551%" y="149" width="0.6497%" height="15" fill="rgb(216,99,33)" fg:x="2580" fg:w="76"/><text x="22.3480%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.60%)</title><rect x="22.7047%" y="149" width="0.5984%" height="15" fill="rgb(225,42,16)" fg:x="2656" fg:w="70"/><text x="22.9977%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="23.3031%" y="117" width="0.0513%" height="15" fill="rgb(220,201,45)" fg:x="2726" fg:w="6"/><text x="23.5961%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.79%)</title><rect x="23.3031%" y="133" width="3.7870%" height="15" fill="rgb(225,33,4)" fg:x="2726" fg:w="443"/><text x="23.5961%" y="143.50">cor..</text></g><g><title>memcmp (19 instructions, 0.16%)</title><rect x="27.0901%" y="133" width="0.1624%" height="15" fill="rgb(224,33,50)" fg:x="3169" fg:w="19"/><text x="27.3831%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="27.2525%" y="117" width="0.7095%" height="15" fill="rgb(246,198,51)" fg:x="3188" fg:w="83"/><text x="27.5455%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.57%)</title><rect x="27.9620%" y="85" width="0.5727%" height="15" fill="rgb(205,22,4)" fg:x="3271" fg:w="67"/><text x="28.2550%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.82%)</title><rect x="27.9620%" y="101" width="0.8207%" height="15" fill="rgb(206,3,8)" fg:x="3271" fg:w="96"/><text x="28.2550%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.09%)</title><rect x="28.7827%" y="53" width="0.0940%" height="15" fill="rgb(251,23,15)" fg:x="3367" fg:w="11"/><text x="29.0757%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.30%)</title><rect x="28.8767%" y="37" width="0.2992%" height="15" fill="rgb(252,88,28)" fg:x="3378" fg:w="35"/><text x="29.1697%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.55%)</title><rect x="28.8767%" y="53" width="0.5471%" height="15" fill="rgb(212,127,14)" fg:x="3378" fg:w="64"/><text x="29.1697%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.23%)</title><rect x="28.7827%" y="69" width="1.2310%" height="15" fill="rgb(247,145,37)" fg:x="3367" fg:w="144"/><text x="29.0757%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.79%)</title><rect x="28.7827%" y="85" width="1.7866%" height="15" fill="rgb(209,117,53)" fg:x="3367" fg:w="209"/><text x="29.0757%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.87%)</title><rect x="28.7827%" y="101" width="1.8721%" height="15" fill="rgb(212,90,42)" fg:x="3367" fg:w="219"/><text x="29.0757%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 3.91%)</title><rect x="27.9620%" y="117" width="3.9067%" height="15" fill="rgb(218,164,37)" fg:x="3271" fg:w="457"/><text x="28.2550%" y="127.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (678 instructions, 5.80%)</title><rect x="27.2525%" y="133" width="5.7959%" height="15" fill="rgb(246,65,34)" fg:x="3188" fg:w="678"/><text x="27.5455%" y="143.50">alloc:..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.81%)</title><rect x="33.0484%" y="133" width="0.8121%" height="15" fill="rgb(231,100,33)" fg:x="3866" fg:w="95"/><text x="33.3414%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.51%)</title><rect x="33.8605%" y="133" width="0.5129%" height="15" fill="rgb(228,126,14)" fg:x="3961" fg:w="60"/><text x="34.1535%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,482 instructions, 12.67%)</title><rect x="23.3031%" y="149" width="12.6688%" height="15" fill="rgb(215,173,21)" fg:x="2726" fg:w="1482"/><text x="23.5961%" y="159.50">binread::binread..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.65%)</title><rect x="35.9720%" y="149" width="0.6497%" height="15" fill="rgb(210,6,40)" fg:x="4208" fg:w="76"/><text x="36.2649%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.13%)</title><rect x="36.6216%" y="149" width="0.1282%" height="15" fill="rgb(212,48,18)" fg:x="4284" fg:w="15"/><text x="36.9146%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.13%)</title><rect x="36.7499%" y="149" width="0.1282%" height="15" fill="rgb(230,214,11)" fg:x="4299" fg:w="15"/><text x="37.0428%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.13%)</title><rect x="36.8781%" y="149" width="0.1282%" height="15" fill="rgb(254,105,39)" fg:x="4314" fg:w="15"/><text x="37.1711%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.06%)</title><rect x="37.0063%" y="149" width="0.0598%" height="15" fill="rgb(245,158,5)" fg:x="4329" fg:w="7"/><text x="37.2993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="37.0662%" y="149" width="0.7095%" height="15" fill="rgb(249,208,11)" fg:x="4336" fg:w="83"/><text x="37.3591%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="37.7757%" y="149" width="0.7095%" height="15" fill="rgb(210,39,28)" fg:x="4419" fg:w="83"/><text x="38.0687%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.03%)</title><rect x="38.4852%" y="149" width="0.0342%" height="15" fill="rgb(211,56,53)" fg:x="4502" fg:w="4"/><text x="38.7782%" y="159.50"></text></g><g><title>memcpy (392 instructions, 3.35%)</title><rect x="38.5194%" y="149" width="3.3510%" height="15" fill="rgb(226,201,30)" fg:x="4506" fg:w="392"/><text x="38.8124%" y="159.50">me..</text></g><g><title>memcpy (392 instructions, 3.35%)</title><rect x="41.8704%" y="149" width="3.3510%" height="15" fill="rgb(239,101,34)" fg:x="4898" fg:w="392"/><text x="42.1634%" y="159.50">me..</text></g><g><title>memcpy (504 instructions, 4.31%)</title><rect x="45.2214%" y="149" width="4.3084%" height="15" fill="rgb(226,209,5)" fg:x="5290" fg:w="504"/><text x="45.5144%" y="159.50">memc..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (6,560 instructions, 56.08%)</title><rect x="2.3337%" y="165" width="56.0780%" height="15" fill="rgb(250,105,47)" fg:x="273" fg:w="6560"/><text x="2.6267%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 2.94%)</title><rect x="58.4117%" y="165" width="2.9407%" height="15" fill="rgb(230,72,3)" fg:x="6833" fg:w="344"/><text x="58.7047%" y="175.50">me..</text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.37%)</title><rect x="61.3524%" y="165" width="0.3676%" height="15" fill="rgb(232,218,39)" fg:x="7177" fg:w="43"/><text x="61.6453%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::types::type_env::TypeEnv&gt; (7 instructions, 0.06%)</title><rect x="61.7200%" y="149" width="0.0598%" height="15" fill="rgb(248,166,6)" fg:x="7220" fg:w="7"/><text x="62.0129%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.76%)</title><rect x="61.7798%" y="133" width="0.7608%" height="15" fill="rgb(247,89,20)" fg:x="7227" fg:w="89"/><text x="62.0728%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.51%)</title><rect x="62.9167%" y="133" width="0.5129%" height="15" fill="rgb(248,130,54)" fg:x="7360" fg:w="60"/><text x="63.2097%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (237 instructions, 2.03%)</title><rect x="61.7798%" y="149" width="2.0260%" height="15" fill="rgb(234,196,4)" fg:x="7227" fg:w="237"/><text x="62.0728%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (295 instructions, 2.52%)</title><rect x="61.7200%" y="165" width="2.5218%" height="15" fill="rgb(250,143,31)" fg:x="7220" fg:w="295"/><text x="62.0129%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.51%)</title><rect x="64.2418%" y="165" width="0.5129%" height="15" fill="rgb(211,110,34)" fg:x="7515" fg:w="60"/><text x="64.5347%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (8,668 instructions, 74.10%)</title><rect x="1.6242%" y="181" width="74.0981%" height="15" fill="rgb(215,124,48)" fg:x="190" fg:w="8668"/><text x="1.9172%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.06%)</title><rect x="75.7309%" y="149" width="0.0598%" height="15" fill="rgb(216,46,13)" fg:x="8859" fg:w="7"/><text x="76.0239%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (94 instructions, 0.80%)</title><rect x="75.7309%" y="165" width="0.8036%" height="15" fill="rgb(205,184,25)" fg:x="8859" fg:w="94"/><text x="76.0239%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 4.43%)</title><rect x="76.5345%" y="165" width="4.4281%" height="15" fill="rgb(228,1,10)" fg:x="8953" fg:w="518"/><text x="76.8274%" y="175.50">std:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.71%)</title><rect x="80.9626%" y="117" width="0.7095%" height="15" fill="rgb(213,116,27)" fg:x="9471" fg:w="83"/><text x="81.2555%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 1.08%)</title><rect x="80.9626%" y="133" width="1.0771%" height="15" fill="rgb(241,95,50)" fg:x="9471" fg:w="126"/><text x="81.2555%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 1.78%)</title><rect x="80.9626%" y="149" width="1.7781%" height="15" fill="rgb(238,48,32)" fg:x="9471" fg:w="208"/><text x="81.2555%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.13%)</title><rect x="82.7406%" y="149" width="0.1282%" height="15" fill="rgb(235,113,49)" fg:x="9679" fg:w="15"/><text x="83.0336%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.13%)</title><rect x="82.8689%" y="149" width="0.1282%" height="15" fill="rgb(205,127,43)" fg:x="9694" fg:w="15"/><text x="83.1618%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 3.64%)</title><rect x="80.9626%" y="165" width="3.6416%" height="15" fill="rgb(250,162,2)" fg:x="9471" fg:w="426"/><text x="81.2555%" y="175.50">can..</text></g><g><title>std::io::Write::write_all (516 instructions, 4.41%)</title><rect x="84.6042%" y="165" width="4.4110%" height="15" fill="rgb(220,13,41)" fg:x="9897" fg:w="516"/><text x="84.8972%" y="175.50">std:..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.06%)</title><rect x="89.0152%" y="165" width="0.0598%" height="15" fill="rgb(249,221,25)" fg:x="10413" fg:w="7"/><text x="89.3082%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::types::type_env::TypeEnv&gt; (7 instructions, 0.06%)</title><rect x="89.0751%" y="165" width="0.0598%" height="15" fill="rgb(215,208,19)" fg:x="10420" fg:w="7"/><text x="89.3680%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.51%)</title><rect x="89.1349%" y="165" width="0.5129%" height="15" fill="rgb(236,175,2)" fg:x="10427" fg:w="60"/><text x="89.4279%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,309 instructions, 19.74%)</title><rect x="75.7309%" y="181" width="19.7384%" height="15" fill="rgb(241,52,2)" fg:x="8859" fg:w="2309"/><text x="76.0239%" y="191.50">ic_cdk::api::call::reply</text></g><g><title>timer::__canister_method_cancelTimer::{{closure}} (11,145 instructions, 95.27%)</title><rect x="1.6242%" y="197" width="95.2727%" height="15" fill="rgb(248,140,14)" fg:x="190" fg:w="11145"/><text x="1.9172%" y="207.50">timer::__canister_method_cancelTimer::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.12%)</title><rect x="96.8969%" y="197" width="0.1197%" height="15" fill="rgb(253,22,42)" fg:x="11335" fg:w="14"/><text x="97.1899%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.23%)</title><rect x="97.7859%" y="181" width="0.2308%" height="15" fill="rgb(234,61,47)" fg:x="11439" fg:w="27"/><text x="98.0789%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 1.74%)</title><rect x="97.0251%" y="197" width="1.7439%" height="15" fill="rgb(208,226,15)" fg:x="11350" fg:w="204"/><text x="97.3181%" y="207.50"></text></g><g><title>all (11,698 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,221,4)" fg:x="0" fg:w="11698"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update cancelTimer (11,698 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,174,34)" fg:x="0" fg:w="11698"/><text x="0.2930%" y="223.50">canister_update cancelTimer</text></g></svg></svg>