<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="10417"><g><title>ic_cdk::setup (8 instructions, 0.08%)</title><rect x="0.0000%" y="261" width="0.0768%" height="15" fill="rgb(211,180,21)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="0.0768%" y="181" width="0.0864%" height="15" fill="rgb(229,72,13)" fg:x="8" fg:w="9"/><text x="0.3698%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="0.1632%" y="181" width="0.0864%" height="15" fill="rgb(240,211,49)" fg:x="17" fg:w="9"/><text x="0.4562%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="0.2496%" y="181" width="0.0864%" height="15" fill="rgb(219,149,40)" fg:x="26" fg:w="9"/><text x="0.5426%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="0.3360%" y="181" width="0.0288%" height="15" fill="rgb(210,127,46)" fg:x="35" fg:w="3"/><text x="0.6290%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="0.3648%" y="181" width="0.0960%" height="15" fill="rgb(220,106,7)" fg:x="38" fg:w="10"/><text x="0.6578%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="0.4608%" y="181" width="0.0480%" height="15" fill="rgb(249,31,22)" fg:x="48" fg:w="5"/><text x="0.7538%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="0.5088%" y="181" width="0.0288%" height="15" fill="rgb(253,1,49)" fg:x="53" fg:w="3"/><text x="0.8018%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="0.0768%" y="197" width="1.2672%" height="15" fill="rgb(227,144,33)" fg:x="8" fg:w="132"/><text x="0.3698%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="0.0768%" y="213" width="1.3632%" height="15" fill="rgb(249,163,44)" fg:x="8" fg:w="142"/><text x="0.3698%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="0.0768%" y="229" width="1.3920%" height="15" fill="rgb(234,15,39)" fg:x="8" fg:w="145"/><text x="0.3698%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="1.5264%" y="181" width="0.0864%" height="15" fill="rgb(207,66,16)" fg:x="159" fg:w="9"/><text x="1.8193%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="1.6127%" y="181" width="0.0864%" height="15" fill="rgb(233,112,24)" fg:x="168" fg:w="9"/><text x="1.9057%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="1.6991%" y="181" width="0.0864%" height="15" fill="rgb(230,90,22)" fg:x="177" fg:w="9"/><text x="1.9921%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="1.7855%" y="181" width="0.0288%" height="15" fill="rgb(229,61,13)" fg:x="186" fg:w="3"/><text x="2.0785%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="1.8143%" y="181" width="0.0960%" height="15" fill="rgb(225,57,24)" fg:x="189" fg:w="10"/><text x="2.1073%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="1.9103%" y="181" width="0.0480%" height="15" fill="rgb(208,169,48)" fg:x="199" fg:w="5"/><text x="2.2033%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="1.9583%" y="181" width="0.0288%" height="15" fill="rgb(244,218,51)" fg:x="204" fg:w="3"/><text x="2.2513%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="1.5264%" y="197" width="1.2672%" height="15" fill="rgb(214,148,10)" fg:x="159" fg:w="132"/><text x="1.8193%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="1.5264%" y="213" width="1.3632%" height="15" fill="rgb(225,174,27)" fg:x="159" fg:w="142"/><text x="1.8193%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="1.5264%" y="229" width="1.3920%" height="15" fill="rgb(230,96,26)" fg:x="159" fg:w="145"/><text x="1.8193%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 2.90%)</title><rect x="0.0768%" y="245" width="2.8991%" height="15" fill="rgb(232,10,30)" fg:x="8" fg:w="302"/><text x="0.3698%" y="255.50">__..</text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.06%)</title><rect x="2.9759%" y="245" width="0.0576%" height="15" fill="rgb(222,8,50)" fg:x="310" fg:w="6"/><text x="3.2689%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="3.0335%" y="149" width="0.0864%" height="15" fill="rgb(213,81,27)" fg:x="316" fg:w="9"/><text x="3.3265%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="3.1199%" y="149" width="0.0864%" height="15" fill="rgb(245,50,10)" fg:x="325" fg:w="9"/><text x="3.4129%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="3.2063%" y="149" width="0.0864%" height="15" fill="rgb(216,100,18)" fg:x="334" fg:w="9"/><text x="3.4993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="3.2927%" y="149" width="0.0288%" height="15" fill="rgb(236,147,54)" fg:x="343" fg:w="3"/><text x="3.5857%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="3.3215%" y="149" width="0.0960%" height="15" fill="rgb(205,143,26)" fg:x="346" fg:w="10"/><text x="3.6145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="3.4175%" y="149" width="0.0480%" height="15" fill="rgb(236,26,9)" fg:x="356" fg:w="5"/><text x="3.7105%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="3.4655%" y="149" width="0.0288%" height="15" fill="rgb(221,165,53)" fg:x="361" fg:w="3"/><text x="3.7585%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="3.0335%" y="165" width="1.2672%" height="15" fill="rgb(214,110,17)" fg:x="316" fg:w="132"/><text x="3.3265%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="3.0335%" y="181" width="1.3632%" height="15" fill="rgb(237,197,12)" fg:x="316" fg:w="142"/><text x="3.3265%" y="191.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="3.0335%" y="197" width="1.3920%" height="15" fill="rgb(205,84,17)" fg:x="316" fg:w="145"/><text x="3.3265%" y="207.50"></text></g><g><title>__rust_alloc (151 instructions, 1.45%)</title><rect x="3.0335%" y="213" width="1.4496%" height="15" fill="rgb(237,18,45)" fg:x="316" fg:w="151"/><text x="3.3265%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (204 instructions, 1.96%)</title><rect x="3.0335%" y="229" width="1.9583%" height="15" fill="rgb(221,87,14)" fg:x="316" fg:w="204"/><text x="3.3265%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.60%)</title><rect x="5.0014%" y="181" width="0.6048%" height="15" fill="rgb(238,186,15)" fg:x="521" fg:w="63"/><text x="5.2944%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.06%)</title><rect x="5.6062%" y="117" width="0.0576%" height="15" fill="rgb(208,115,11)" fg:x="584" fg:w="6"/><text x="5.8992%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.10%)</title><rect x="5.6062%" y="133" width="0.0960%" height="15" fill="rgb(254,175,0)" fg:x="584" fg:w="10"/><text x="5.8992%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 4.16%)</title><rect x="5.6062%" y="149" width="4.1567%" height="15" fill="rgb(227,24,42)" fg:x="584" fg:w="433"/><text x="5.8992%" y="159.50">core..</text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.73%)</title><rect x="9.7629%" y="149" width="0.7296%" height="15" fill="rgb(223,211,37)" fg:x="1017" fg:w="76"/><text x="10.0559%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.50%)</title><rect x="10.4925%" y="149" width="0.4992%" height="15" fill="rgb(235,49,27)" fg:x="1093" fg:w="52"/><text x="10.7854%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.50%)</title><rect x="10.9916%" y="149" width="0.4992%" height="15" fill="rgb(254,97,51)" fg:x="1145" fg:w="52"/><text x="11.2846%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.50%)</title><rect x="11.4908%" y="149" width="0.4992%" height="15" fill="rgb(249,51,40)" fg:x="1197" fg:w="52"/><text x="11.7838%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.50%)</title><rect x="11.9900%" y="149" width="0.4992%" height="15" fill="rgb(210,128,45)" fg:x="1249" fg:w="52"/><text x="12.2830%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (859 instructions, 8.25%)</title><rect x="5.6062%" y="181" width="8.2461%" height="15" fill="rgb(224,137,50)" fg:x="584" fg:w="859"/><text x="5.8992%" y="191.50">binread::..</text></g><g><title> 4]&gt;::read_options (859 instructions, 8.25%)</title><rect x="5.6062%" y="165" width="8.2461%" height="15" fill="rgb(242,15,9)" fg:x="584" fg:w="859"/><text x="5.8992%" y="175.50"> 4]&gt;::rea..</text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.60%)</title><rect x="13.8524%" y="181" width="0.6048%" height="15" fill="rgb(233,187,41)" fg:x="1443" fg:w="63"/><text x="14.1453%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.74%)</title><rect x="14.4571%" y="165" width="0.7392%" height="15" fill="rgb(227,2,29)" fg:x="1506" fg:w="77"/><text x="14.7501%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 1.00%)</title><rect x="14.4571%" y="181" width="0.9984%" height="15" fill="rgb(222,70,3)" fg:x="1506" fg:w="104"/><text x="14.7501%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.06%)</title><rect x="15.4555%" y="133" width="0.0576%" height="15" fill="rgb(213,11,42)" fg:x="1610" fg:w="6"/><text x="15.7485%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.10%)</title><rect x="15.4555%" y="149" width="0.0960%" height="15" fill="rgb(225,150,9)" fg:x="1610" fg:w="10"/><text x="15.7485%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 4.16%)</title><rect x="15.4555%" y="165" width="4.1567%" height="15" fill="rgb(230,162,45)" fg:x="1610" fg:w="433"/><text x="15.7485%" y="175.50">core..</text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.17%)</title><rect x="19.6122%" y="149" width="0.1728%" height="15" fill="rgb(222,14,52)" fg:x="2043" fg:w="18"/><text x="19.9051%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.21%)</title><rect x="19.6122%" y="165" width="0.2112%" height="15" fill="rgb(254,198,14)" fg:x="2043" fg:w="22"/><text x="19.9051%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="19.8234%" y="69" width="0.0864%" height="15" fill="rgb(220,217,30)" fg:x="2065" fg:w="9"/><text x="20.1163%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="19.9098%" y="69" width="0.0864%" height="15" fill="rgb(215,146,41)" fg:x="2074" fg:w="9"/><text x="20.2027%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="19.9962%" y="69" width="0.0864%" height="15" fill="rgb(217,27,36)" fg:x="2083" fg:w="9"/><text x="20.2891%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="20.0826%" y="69" width="0.0288%" height="15" fill="rgb(219,218,39)" fg:x="2092" fg:w="3"/><text x="20.3755%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="20.1114%" y="69" width="0.0960%" height="15" fill="rgb(219,4,42)" fg:x="2095" fg:w="10"/><text x="20.4043%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="20.2074%" y="69" width="0.0480%" height="15" fill="rgb(249,119,36)" fg:x="2105" fg:w="5"/><text x="20.5003%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="20.2554%" y="69" width="0.0288%" height="15" fill="rgb(209,23,33)" fg:x="2110" fg:w="3"/><text x="20.5483%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="19.8234%" y="85" width="1.2672%" height="15" fill="rgb(211,10,0)" fg:x="2065" fg:w="132"/><text x="20.1163%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="19.8234%" y="101" width="1.3632%" height="15" fill="rgb(208,99,37)" fg:x="2065" fg:w="142"/><text x="20.1163%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="19.8234%" y="117" width="1.3920%" height="15" fill="rgb(213,132,31)" fg:x="2065" fg:w="145"/><text x="20.1163%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 1.45%)</title><rect x="19.8234%" y="133" width="1.4496%" height="15" fill="rgb(243,129,40)" fg:x="2065" fg:w="151"/><text x="20.1163%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.58%)</title><rect x="21.2729%" y="85" width="0.5760%" height="15" fill="rgb(210,66,33)" fg:x="2216" fg:w="60"/><text x="21.5659%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.61%)</title><rect x="21.2729%" y="101" width="0.6144%" height="15" fill="rgb(209,189,4)" fg:x="2216" fg:w="64"/><text x="21.5659%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.85%)</title><rect x="21.2729%" y="117" width="0.8544%" height="15" fill="rgb(214,107,37)" fg:x="2216" fg:w="89"/><text x="21.5659%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.10%)</title><rect x="22.1273%" y="69" width="0.0960%" height="15" fill="rgb(245,88,54)" fg:x="2305" fg:w="10"/><text x="22.4203%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.29%)</title><rect x="22.2233%" y="37" width="0.2880%" height="15" fill="rgb(205,146,20)" fg:x="2315" fg:w="30"/><text x="22.5163%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.33%)</title><rect x="22.2233%" y="53" width="0.3264%" height="15" fill="rgb(220,161,25)" fg:x="2315" fg:w="34"/><text x="22.5163%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.57%)</title><rect x="22.2233%" y="69" width="0.5664%" height="15" fill="rgb(215,152,15)" fg:x="2315" fg:w="59"/><text x="22.5163%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 1.14%)</title><rect x="22.1273%" y="85" width="1.1424%" height="15" fill="rgb(233,192,44)" fg:x="2305" fg:w="119"/><text x="22.4203%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 1.67%)</title><rect x="22.1273%" y="101" width="1.6703%" height="15" fill="rgb(240,170,46)" fg:x="2305" fg:w="174"/><text x="22.4203%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 1.72%)</title><rect x="22.1273%" y="117" width="1.7183%" height="15" fill="rgb(207,104,33)" fg:x="2305" fg:w="179"/><text x="22.4203%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 3.64%)</title><rect x="21.2729%" y="133" width="3.6383%" height="15" fill="rgb(219,21,39)" fg:x="2216" fg:w="379"/><text x="21.5659%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 6.46%)</title><rect x="19.8234%" y="149" width="6.4606%" height="15" fill="rgb(214,133,29)" fg:x="2065" fg:w="673"/><text x="20.1163%" y="159.50">alloc::..</text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.73%)</title><rect x="26.2840%" y="149" width="0.7296%" height="15" fill="rgb(226,93,6)" fg:x="2738" fg:w="76"/><text x="26.5769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="27.0135%" y="101" width="0.0288%" height="15" fill="rgb(252,222,34)" fg:x="2814" fg:w="3"/><text x="27.3065%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="27.0423%" y="101" width="0.0384%" height="15" fill="rgb(252,92,48)" fg:x="2817" fg:w="4"/><text x="27.3353%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="27.0807%" y="101" width="0.0288%" height="15" fill="rgb(245,223,24)" fg:x="2821" fg:w="3"/><text x="27.3737%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="27.1095%" y="101" width="0.0384%" height="15" fill="rgb(205,176,3)" fg:x="2824" fg:w="4"/><text x="27.4025%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="27.1479%" y="101" width="0.0576%" height="15" fill="rgb(235,151,15)" fg:x="2828" fg:w="6"/><text x="27.4409%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="27.2055%" y="101" width="0.0960%" height="15" fill="rgb(237,209,11)" fg:x="2834" fg:w="10"/><text x="27.4985%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.67%)</title><rect x="27.0135%" y="117" width="0.6720%" height="15" fill="rgb(243,227,24)" fg:x="2814" fg:w="70"/><text x="27.3065%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.69%)</title><rect x="27.0135%" y="133" width="0.6912%" height="15" fill="rgb(239,193,16)" fg:x="2814" fg:w="72"/><text x="27.3065%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.74%)</title><rect x="27.0135%" y="149" width="0.7392%" height="15" fill="rgb(231,27,9)" fg:x="2814" fg:w="77"/><text x="27.3065%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 8.61%)</title><rect x="19.8234%" y="165" width="8.6109%" height="15" fill="rgb(219,169,10)" fg:x="2065" fg:w="897"/><text x="20.1163%" y="175.50">binread::b..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.24%)</title><rect x="28.4343%" y="165" width="0.2400%" height="15" fill="rgb(244,229,43)" fg:x="2962" fg:w="25"/><text x="28.7273%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,525 instructions, 14.64%)</title><rect x="15.4555%" y="181" width="14.6395%" height="15" fill="rgb(254,38,20)" fg:x="1610" fg:w="1525"/><text x="15.7485%" y="191.50">binread::binread_im..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.56%)</title><rect x="30.0950%" y="181" width="0.5568%" height="15" fill="rgb(250,47,30)" fg:x="3135" fg:w="58"/><text x="30.3880%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.74%)</title><rect x="30.6518%" y="165" width="0.7392%" height="15" fill="rgb(224,124,36)" fg:x="3193" fg:w="77"/><text x="30.9448%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 1.00%)</title><rect x="30.6518%" y="181" width="0.9984%" height="15" fill="rgb(246,68,51)" fg:x="3193" fg:w="104"/><text x="30.9448%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.06%)</title><rect x="31.6502%" y="133" width="0.0576%" height="15" fill="rgb(253,43,49)" fg:x="3297" fg:w="6"/><text x="31.9432%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.10%)</title><rect x="31.6502%" y="149" width="0.0960%" height="15" fill="rgb(219,54,36)" fg:x="3297" fg:w="10"/><text x="31.9432%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 4.16%)</title><rect x="31.6502%" y="165" width="4.1567%" height="15" fill="rgb(227,133,34)" fg:x="3297" fg:w="433"/><text x="31.9432%" y="175.50">core..</text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.17%)</title><rect x="35.8069%" y="149" width="0.1728%" height="15" fill="rgb(247,227,15)" fg:x="3730" fg:w="18"/><text x="36.0998%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.21%)</title><rect x="35.8069%" y="165" width="0.2112%" height="15" fill="rgb(229,96,14)" fg:x="3730" fg:w="22"/><text x="36.0998%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="36.0180%" y="69" width="0.0864%" height="15" fill="rgb(220,79,17)" fg:x="3752" fg:w="9"/><text x="36.3110%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="36.1044%" y="69" width="0.0864%" height="15" fill="rgb(205,131,53)" fg:x="3761" fg:w="9"/><text x="36.3974%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="36.1908%" y="69" width="0.0864%" height="15" fill="rgb(209,50,29)" fg:x="3770" fg:w="9"/><text x="36.4838%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="36.2772%" y="69" width="0.0288%" height="15" fill="rgb(245,86,46)" fg:x="3779" fg:w="3"/><text x="36.5702%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="36.3060%" y="69" width="0.0960%" height="15" fill="rgb(235,66,46)" fg:x="3782" fg:w="10"/><text x="36.5990%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="36.4020%" y="69" width="0.0480%" height="15" fill="rgb(232,148,31)" fg:x="3792" fg:w="5"/><text x="36.6950%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="36.4500%" y="69" width="0.0288%" height="15" fill="rgb(217,149,8)" fg:x="3797" fg:w="3"/><text x="36.7430%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="36.0180%" y="85" width="1.2672%" height="15" fill="rgb(209,183,11)" fg:x="3752" fg:w="132"/><text x="36.3110%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="36.0180%" y="101" width="1.3632%" height="15" fill="rgb(208,55,20)" fg:x="3752" fg:w="142"/><text x="36.3110%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="36.0180%" y="117" width="1.3920%" height="15" fill="rgb(218,39,14)" fg:x="3752" fg:w="145"/><text x="36.3110%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 1.45%)</title><rect x="36.0180%" y="133" width="1.4496%" height="15" fill="rgb(216,169,33)" fg:x="3752" fg:w="151"/><text x="36.3110%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.58%)</title><rect x="37.4676%" y="85" width="0.5760%" height="15" fill="rgb(233,80,24)" fg:x="3903" fg:w="60"/><text x="37.7606%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.61%)</title><rect x="37.4676%" y="101" width="0.6144%" height="15" fill="rgb(213,179,31)" fg:x="3903" fg:w="64"/><text x="37.7606%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.85%)</title><rect x="37.4676%" y="117" width="0.8544%" height="15" fill="rgb(209,19,5)" fg:x="3903" fg:w="89"/><text x="37.7606%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.10%)</title><rect x="38.3220%" y="69" width="0.0960%" height="15" fill="rgb(219,18,35)" fg:x="3992" fg:w="10"/><text x="38.6149%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.29%)</title><rect x="38.4180%" y="37" width="0.2880%" height="15" fill="rgb(209,169,16)" fg:x="4002" fg:w="30"/><text x="38.7109%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.33%)</title><rect x="38.4180%" y="53" width="0.3264%" height="15" fill="rgb(245,90,51)" fg:x="4002" fg:w="34"/><text x="38.7109%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.57%)</title><rect x="38.4180%" y="69" width="0.5664%" height="15" fill="rgb(220,99,45)" fg:x="4002" fg:w="59"/><text x="38.7109%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 1.14%)</title><rect x="38.3220%" y="85" width="1.1424%" height="15" fill="rgb(249,89,25)" fg:x="3992" fg:w="119"/><text x="38.6149%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 1.67%)</title><rect x="38.3220%" y="101" width="1.6703%" height="15" fill="rgb(239,193,0)" fg:x="3992" fg:w="174"/><text x="38.6149%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 1.72%)</title><rect x="38.3220%" y="117" width="1.7183%" height="15" fill="rgb(231,126,1)" fg:x="3992" fg:w="179"/><text x="38.6149%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 3.64%)</title><rect x="37.4676%" y="133" width="3.6383%" height="15" fill="rgb(243,166,3)" fg:x="3903" fg:w="379"/><text x="37.7606%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 6.46%)</title><rect x="36.0180%" y="149" width="6.4606%" height="15" fill="rgb(223,22,34)" fg:x="3752" fg:w="673"/><text x="36.3110%" y="159.50">alloc::..</text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.73%)</title><rect x="42.4786%" y="149" width="0.7296%" height="15" fill="rgb(251,52,51)" fg:x="4425" fg:w="76"/><text x="42.7716%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="43.2082%" y="101" width="0.0288%" height="15" fill="rgb(221,165,28)" fg:x="4501" fg:w="3"/><text x="43.5012%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="43.2370%" y="101" width="0.0384%" height="15" fill="rgb(218,121,47)" fg:x="4504" fg:w="4"/><text x="43.5300%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="43.2754%" y="101" width="0.0288%" height="15" fill="rgb(209,120,9)" fg:x="4508" fg:w="3"/><text x="43.5684%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="43.3042%" y="101" width="0.0384%" height="15" fill="rgb(236,68,12)" fg:x="4511" fg:w="4"/><text x="43.5972%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="43.3426%" y="101" width="0.0576%" height="15" fill="rgb(225,194,26)" fg:x="4515" fg:w="6"/><text x="43.6356%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="43.4002%" y="101" width="0.0960%" height="15" fill="rgb(231,84,39)" fg:x="4521" fg:w="10"/><text x="43.6932%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.67%)</title><rect x="43.2082%" y="117" width="0.6720%" height="15" fill="rgb(210,11,45)" fg:x="4501" fg:w="70"/><text x="43.5012%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.69%)</title><rect x="43.2082%" y="133" width="0.6912%" height="15" fill="rgb(224,54,52)" fg:x="4501" fg:w="72"/><text x="43.5012%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.74%)</title><rect x="43.2082%" y="149" width="0.7392%" height="15" fill="rgb(238,102,14)" fg:x="4501" fg:w="77"/><text x="43.5012%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 8.61%)</title><rect x="36.0180%" y="165" width="8.6109%" height="15" fill="rgb(243,160,52)" fg:x="3752" fg:w="897"/><text x="36.3110%" y="175.50">binread::b..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.24%)</title><rect x="44.6290%" y="165" width="0.2400%" height="15" fill="rgb(216,114,19)" fg:x="4649" fg:w="25"/><text x="44.9219%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,525 instructions, 14.64%)</title><rect x="31.6502%" y="181" width="14.6395%" height="15" fill="rgb(244,166,37)" fg:x="3297" fg:w="1525"/><text x="31.9432%" y="191.50">binread::binread_im..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.56%)</title><rect x="46.2897%" y="181" width="0.5568%" height="15" fill="rgb(246,29,44)" fg:x="4822" fg:w="58"/><text x="46.5827%" y="191.50"></text></g><g><title>binread::BinRead::read (4,577 instructions, 43.94%)</title><rect x="4.9918%" y="197" width="43.9378%" height="15" fill="rgb(215,56,53)" fg:x="520" fg:w="4577"/><text x="5.2848%" y="207.50">binread::BinRead::read</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.13%)</title><rect x="48.9296%" y="181" width="0.1344%" height="15" fill="rgb(217,60,2)" fg:x="5097" fg:w="14"/><text x="49.2226%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.13%)</title><rect x="49.0640%" y="165" width="0.1344%" height="15" fill="rgb(207,26,24)" fg:x="5111" fg:w="14"/><text x="49.3570%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.24%)</title><rect x="49.1984%" y="165" width="0.2400%" height="15" fill="rgb(252,210,15)" fg:x="5125" fg:w="25"/><text x="49.4914%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.18%)</title><rect x="49.4384%" y="165" width="0.1824%" height="15" fill="rgb(253,209,26)" fg:x="5150" fg:w="19"/><text x="49.7314%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (210 instructions, 2.02%)</title><rect x="49.0640%" y="181" width="2.0159%" height="15" fill="rgb(238,170,14)" fg:x="5111" fg:w="210"/><text x="49.3570%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (381 instructions, 3.66%)</title><rect x="48.9296%" y="197" width="3.6575%" height="15" fill="rgb(216,178,15)" fg:x="5097" fg:w="381"/><text x="49.2226%" y="207.50">can..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (45 instructions, 0.43%)</title><rect x="52.5871%" y="197" width="0.4320%" height="15" fill="rgb(250,197,2)" fg:x="5478" fg:w="45"/><text x="52.8801%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="53.0191%" y="133" width="0.0864%" height="15" fill="rgb(212,70,42)" fg:x="5523" fg:w="9"/><text x="53.3121%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="53.1055%" y="133" width="0.0864%" height="15" fill="rgb(227,213,9)" fg:x="5532" fg:w="9"/><text x="53.3985%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="53.1919%" y="133" width="0.0864%" height="15" fill="rgb(245,99,25)" fg:x="5541" fg:w="9"/><text x="53.4849%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="53.2783%" y="133" width="0.0288%" height="15" fill="rgb(250,82,29)" fg:x="5550" fg:w="3"/><text x="53.5713%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="53.3071%" y="133" width="0.0960%" height="15" fill="rgb(241,226,54)" fg:x="5553" fg:w="10"/><text x="53.6001%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="53.4031%" y="133" width="0.0480%" height="15" fill="rgb(221,99,41)" fg:x="5563" fg:w="5"/><text x="53.6961%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="53.4511%" y="133" width="0.0288%" height="15" fill="rgb(213,90,21)" fg:x="5568" fg:w="3"/><text x="53.7441%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="53.0191%" y="149" width="1.2672%" height="15" fill="rgb(205,208,24)" fg:x="5523" fg:w="132"/><text x="53.3121%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="53.0191%" y="165" width="1.3632%" height="15" fill="rgb(246,31,12)" fg:x="5523" fg:w="142"/><text x="53.3121%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="53.0191%" y="181" width="1.3920%" height="15" fill="rgb(213,154,6)" fg:x="5523" fg:w="145"/><text x="53.3121%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="54.4687%" y="133" width="0.0864%" height="15" fill="rgb(222,163,29)" fg:x="5674" fg:w="9"/><text x="54.7616%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="54.5551%" y="133" width="0.0864%" height="15" fill="rgb(227,201,8)" fg:x="5683" fg:w="9"/><text x="54.8480%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="54.6415%" y="133" width="0.0288%" height="15" fill="rgb(233,9,32)" fg:x="5692" fg:w="3"/><text x="54.9344%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="54.6703%" y="133" width="0.0480%" height="15" fill="rgb(217,54,24)" fg:x="5695" fg:w="5"/><text x="54.9632%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="54.7182%" y="133" width="0.0288%" height="15" fill="rgb(235,192,0)" fg:x="5700" fg:w="3"/><text x="55.0112%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 1.15%)</title><rect x="54.4687%" y="149" width="1.1520%" height="15" fill="rgb(235,45,9)" fg:x="5674" fg:w="120"/><text x="54.7616%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 1.25%)</title><rect x="54.4687%" y="165" width="1.2480%" height="15" fill="rgb(246,42,40)" fg:x="5674" fg:w="130"/><text x="54.7616%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 1.28%)</title><rect x="54.4687%" y="181" width="1.2768%" height="15" fill="rgb(248,111,24)" fg:x="5674" fg:w="133"/><text x="54.7616%" y="191.50"></text></g><g><title>__rust_alloc (290 instructions, 2.78%)</title><rect x="53.0191%" y="197" width="2.7839%" height="15" fill="rgb(249,65,22)" fg:x="5523" fg:w="290"/><text x="53.3121%" y="207.50">__..</text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (15 instructions, 0.14%)</title><rect x="55.8030%" y="197" width="0.1440%" height="15" fill="rgb(238,111,51)" fg:x="5813" fg:w="15"/><text x="56.0960%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 3.96%)</title><rect x="55.9470%" y="165" width="3.9647%" height="15" fill="rgb(250,118,22)" fg:x="5828" fg:w="413"/><text x="56.2400%" y="175.50">com..</text></g><g><title>memcpy (417 instructions, 4.00%)</title><rect x="55.9470%" y="181" width="4.0031%" height="15" fill="rgb(234,84,26)" fg:x="5828" fg:w="417"/><text x="56.2400%" y="191.50">mem..</text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 4.20%)</title><rect x="55.9470%" y="197" width="4.1951%" height="15" fill="rgb(243,172,12)" fg:x="5828" fg:w="437"/><text x="56.2400%" y="207.50">anyh..</text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 3.53%)</title><rect x="60.1421%" y="181" width="3.5327%" height="15" fill="rgb(236,150,49)" fg:x="6265" fg:w="368"/><text x="60.4350%" y="191.50">com..</text></g><g><title>memcpy (372 instructions, 3.57%)</title><rect x="60.1421%" y="197" width="3.5711%" height="15" fill="rgb(225,197,26)" fg:x="6265" fg:w="372"/><text x="60.4350%" y="207.50">mem..</text></g><g><title>candid::de::IDLDeserialize::new (6,453 instructions, 61.95%)</title><rect x="4.9918%" y="213" width="61.9468%" height="15" fill="rgb(214,17,42)" fg:x="520" fg:w="6453"/><text x="5.2848%" y="223.50">candid::de::IDLDeserialize::new</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 3.68%)</title><rect x="66.9387%" y="197" width="3.6767%" height="15" fill="rgb(224,165,40)" fg:x="6973" fg:w="383"/><text x="67.2316%" y="207.50">com..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 3.68%)</title><rect x="70.6537%" y="197" width="3.6767%" height="15" fill="rgb(246,100,4)" fg:x="7360" fg:w="383"/><text x="70.9467%" y="207.50">com..</text></g><g><title>memcpy (774 instructions, 7.43%)</title><rect x="66.9387%" y="213" width="7.4302%" height="15" fill="rgb(222,103,0)" fg:x="6973" fg:w="774"/><text x="67.2316%" y="223.50">memcpy</text></g><g><title>&lt;() as candid::utils::ArgumentDecoder&gt;::decode (3 instructions, 0.03%)</title><rect x="74.3688%" y="213" width="0.0288%" height="15" fill="rgb(227,189,26)" fg:x="7747" fg:w="3"/><text x="74.6618%" y="223.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 3.96%)</title><rect x="74.3976%" y="197" width="3.9647%" height="15" fill="rgb(214,202,17)" fg:x="7750" fg:w="413"/><text x="74.6906%" y="207.50">com..</text></g><g><title>memcpy (417 instructions, 4.00%)</title><rect x="74.3976%" y="213" width="4.0031%" height="15" fill="rgb(229,111,3)" fg:x="7750" fg:w="417"/><text x="74.6906%" y="223.50">mem..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.18%)</title><rect x="78.4007%" y="197" width="0.1824%" height="15" fill="rgb(229,172,15)" fg:x="8167" fg:w="19"/><text x="78.6937%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="78.5831%" y="133" width="0.0288%" height="15" fill="rgb(230,224,35)" fg:x="8186" fg:w="3"/><text x="78.8761%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="78.6119%" y="133" width="0.0384%" height="15" fill="rgb(251,141,6)" fg:x="8189" fg:w="4"/><text x="78.9049%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="78.6503%" y="133" width="0.0288%" height="15" fill="rgb(225,208,6)" fg:x="8193" fg:w="3"/><text x="78.9433%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="78.6791%" y="133" width="0.0384%" height="15" fill="rgb(246,181,16)" fg:x="8196" fg:w="4"/><text x="78.9721%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="78.7175%" y="133" width="0.0576%" height="15" fill="rgb(227,129,36)" fg:x="8200" fg:w="6"/><text x="79.0104%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="78.7751%" y="133" width="0.0960%" height="15" fill="rgb(248,117,24)" fg:x="8206" fg:w="10"/><text x="79.0680%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.67%)</title><rect x="78.5831%" y="149" width="0.6720%" height="15" fill="rgb(214,185,35)" fg:x="8186" fg:w="70"/><text x="78.8761%" y="159.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.69%)</title><rect x="78.5831%" y="165" width="0.6912%" height="15" fill="rgb(236,150,34)" fg:x="8186" fg:w="72"/><text x="78.8761%" y="175.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.74%)</title><rect x="78.5831%" y="181" width="0.7392%" height="15" fill="rgb(243,228,27)" fg:x="8186" fg:w="77"/><text x="78.8761%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="79.6295%" y="133" width="0.0288%" height="15" fill="rgb(245,77,44)" fg:x="8295" fg:w="3"/><text x="79.9224%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="79.6583%" y="133" width="0.0384%" height="15" fill="rgb(235,214,42)" fg:x="8298" fg:w="4"/><text x="79.9512%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="79.6966%" y="133" width="0.0288%" height="15" fill="rgb(221,74,3)" fg:x="8302" fg:w="3"/><text x="79.9896%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="79.7254%" y="133" width="0.0384%" height="15" fill="rgb(206,121,29)" fg:x="8305" fg:w="4"/><text x="80.0184%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="79.7638%" y="133" width="0.0576%" height="15" fill="rgb(249,131,53)" fg:x="8309" fg:w="6"/><text x="80.0568%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.65%)</title><rect x="79.6295%" y="149" width="0.6528%" height="15" fill="rgb(236,170,29)" fg:x="8295" fg:w="68"/><text x="79.9224%" y="159.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.67%)</title><rect x="79.6295%" y="165" width="0.6720%" height="15" fill="rgb(247,96,15)" fg:x="8295" fg:w="70"/><text x="79.9224%" y="175.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.72%)</title><rect x="79.6295%" y="181" width="0.7200%" height="15" fill="rgb(211,210,7)" fg:x="8295" fg:w="75"/><text x="79.9224%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 2.07%)</title><rect x="78.5831%" y="197" width="2.0735%" height="15" fill="rgb(240,88,50)" fg:x="8186" fg:w="216"/><text x="78.8761%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.05%)</title><rect x="80.6566%" y="197" width="0.0480%" height="15" fill="rgb(209,229,26)" fg:x="8402" fg:w="5"/><text x="80.9496%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (328 instructions, 3.15%)</title><rect x="78.4007%" y="213" width="3.1487%" height="15" fill="rgb(210,68,23)" fg:x="8167" fg:w="328"/><text x="78.6937%" y="223.50">ca..</text></g><g><title>candid::utils::decode_args (8,072 instructions, 77.49%)</title><rect x="4.9918%" y="229" width="77.4887%" height="15" fill="rgb(229,180,13)" fg:x="520" fg:w="8072"/><text x="5.2848%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="82.4806%" y="181" width="0.0288%" height="15" fill="rgb(236,53,44)" fg:x="8592" fg:w="3"/><text x="82.7735%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="82.5094%" y="181" width="0.0384%" height="15" fill="rgb(244,214,29)" fg:x="8595" fg:w="4"/><text x="82.8023%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="82.5478%" y="181" width="0.0288%" height="15" fill="rgb(220,75,29)" fg:x="8599" fg:w="3"/><text x="82.8407%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="82.5766%" y="181" width="0.0384%" height="15" fill="rgb(214,183,37)" fg:x="8602" fg:w="4"/><text x="82.8695%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="82.6150%" y="181" width="0.0576%" height="15" fill="rgb(239,117,29)" fg:x="8606" fg:w="6"/><text x="82.9079%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="82.6726%" y="181" width="0.0960%" height="15" fill="rgb(237,171,35)" fg:x="8612" fg:w="10"/><text x="82.9655%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.67%)</title><rect x="82.4806%" y="197" width="0.6720%" height="15" fill="rgb(229,178,53)" fg:x="8592" fg:w="70"/><text x="82.7735%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.69%)</title><rect x="82.4806%" y="213" width="0.6912%" height="15" fill="rgb(210,102,19)" fg:x="8592" fg:w="72"/><text x="82.7735%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.74%)</title><rect x="82.4806%" y="229" width="0.7392%" height="15" fill="rgb(235,127,22)" fg:x="8592" fg:w="77"/><text x="82.7735%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (8,390 instructions, 80.54%)</title><rect x="3.0335%" y="245" width="80.5414%" height="15" fill="rgb(244,31,31)" fg:x="316" fg:w="8390"/><text x="3.3265%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>ic_cdk_timers::TASKS::__getit (6 instructions, 0.06%)</title><rect x="83.5749%" y="213" width="0.0576%" height="15" fill="rgb(231,43,21)" fg:x="8706" fg:w="6"/><text x="83.8679%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (130 instructions, 1.25%)</title><rect x="83.5749%" y="229" width="1.2480%" height="15" fill="rgb(217,131,35)" fg:x="8706" fg:w="130"/><text x="83.8679%" y="239.50"></text></g><g><title>ic_cdk_timers::clear_timer (171 instructions, 1.64%)</title><rect x="83.5749%" y="245" width="1.6415%" height="15" fill="rgb(221,149,4)" fg:x="8706" fg:w="171"/><text x="83.8679%" y="255.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 1.30%)</title><rect x="85.2165%" y="181" width="1.2960%" height="15" fill="rgb(232,170,28)" fg:x="8877" fg:w="135"/><text x="85.5094%" y="191.50"></text></g><g><title>memset (139 instructions, 1.33%)</title><rect x="85.2165%" y="197" width="1.3344%" height="15" fill="rgb(238,56,10)" fg:x="8877" fg:w="139"/><text x="85.5094%" y="207.50"></text></g><g><title>candid::types::internal::env_clear (201 instructions, 1.93%)</title><rect x="85.2165%" y="213" width="1.9295%" height="15" fill="rgb(235,196,14)" fg:x="8877" fg:w="201"/><text x="85.5094%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (265 instructions, 2.54%)</title><rect x="85.2165%" y="229" width="2.5439%" height="15" fill="rgb(216,45,48)" fg:x="8877" fg:w="265"/><text x="85.5094%" y="239.50">c..</text></g><g><title>&lt;() as candid::utils::ArgumentDecoder&gt;::decode (3 instructions, 0.03%)</title><rect x="87.7604%" y="229" width="0.0288%" height="15" fill="rgb(238,213,17)" fg:x="9142" fg:w="3"/><text x="88.0534%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.32%)</title><rect x="87.7892%" y="197" width="0.3168%" height="15" fill="rgb(212,13,2)" fg:x="9145" fg:w="33"/><text x="88.0822%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.84%)</title><rect x="87.7892%" y="213" width="0.8448%" height="15" fill="rgb(240,114,20)" fg:x="9145" fg:w="88"/><text x="88.0822%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="88.6340%" y="101" width="0.0864%" height="15" fill="rgb(228,41,40)" fg:x="9233" fg:w="9"/><text x="88.9269%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="88.7204%" y="101" width="0.0864%" height="15" fill="rgb(244,132,35)" fg:x="9242" fg:w="9"/><text x="89.0133%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.09%)</title><rect x="88.8068%" y="101" width="0.0864%" height="15" fill="rgb(253,189,4)" fg:x="9251" fg:w="9"/><text x="89.0997%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="88.8932%" y="101" width="0.0288%" height="15" fill="rgb(224,37,19)" fg:x="9260" fg:w="3"/><text x="89.1861%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="88.9220%" y="101" width="0.0960%" height="15" fill="rgb(235,223,18)" fg:x="9263" fg:w="10"/><text x="89.2149%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_inuse_chunk (5 instructions, 0.05%)</title><rect x="89.0180%" y="101" width="0.0480%" height="15" fill="rgb(235,163,25)" fg:x="9273" fg:w="5"/><text x="89.3109%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::to_mem (3 instructions, 0.03%)</title><rect x="89.0659%" y="101" width="0.0288%" height="15" fill="rgb(217,145,28)" fg:x="9278" fg:w="3"/><text x="89.3589%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 1.27%)</title><rect x="88.6340%" y="117" width="1.2672%" height="15" fill="rgb(223,223,32)" fg:x="9233" fg:w="132"/><text x="88.9269%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 1.36%)</title><rect x="88.6340%" y="133" width="1.3632%" height="15" fill="rgb(227,189,39)" fg:x="9233" fg:w="142"/><text x="88.9269%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 1.39%)</title><rect x="88.6340%" y="149" width="1.3920%" height="15" fill="rgb(248,10,22)" fg:x="9233" fg:w="145"/><text x="88.9269%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 1.45%)</title><rect x="88.6340%" y="165" width="1.4496%" height="15" fill="rgb(248,46,39)" fg:x="9233" fg:w="151"/><text x="88.9269%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 1.76%)</title><rect x="88.6340%" y="181" width="1.7567%" height="15" fill="rgb(248,113,48)" fg:x="9233" fg:w="183"/><text x="88.9269%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 instructions, 2.40%)</title><rect x="88.6340%" y="197" width="2.3999%" height="15" fill="rgb(245,16,25)" fg:x="9233" fg:w="250"/><text x="88.9269%" y="207.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.10%)</title><rect x="91.0339%" y="197" width="0.0960%" height="15" fill="rgb(249,152,16)" fg:x="9483" fg:w="10"/><text x="91.3269%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.11%)</title><rect x="91.1299%" y="181" width="0.1056%" height="15" fill="rgb(250,16,1)" fg:x="9493" fg:w="11"/><text x="91.4229%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.11%)</title><rect x="91.2739%" y="181" width="0.1056%" height="15" fill="rgb(249,138,3)" fg:x="9508" fg:w="11"/><text x="91.5668%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.29%)</title><rect x="91.1299%" y="197" width="0.2880%" height="15" fill="rgb(227,71,41)" fg:x="9493" fg:w="30"/><text x="91.4229%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (492 instructions, 4.72%)</title><rect x="88.6340%" y="213" width="4.7230%" height="15" fill="rgb(209,184,23)" fg:x="9233" fg:w="492"/><text x="88.9269%" y="223.50">cand..</text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.06%)</title><rect x="93.3570%" y="213" width="0.0576%" height="15" fill="rgb(223,215,31)" fg:x="9725" fg:w="6"/><text x="93.6500%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.30%)</title><rect x="93.4146%" y="197" width="0.2976%" height="15" fill="rgb(210,146,28)" fg:x="9731" fg:w="31"/><text x="93.7076%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.83%)</title><rect x="93.4146%" y="213" width="0.8256%" height="15" fill="rgb(209,183,41)" fg:x="9731" fg:w="86"/><text x="93.7076%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.06%)</title><rect x="94.2402%" y="213" width="0.0576%" height="15" fill="rgb(209,224,45)" fg:x="9817" fg:w="6"/><text x="94.5332%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.14%)</title><rect x="94.2978%" y="213" width="0.1440%" height="15" fill="rgb(224,209,51)" fg:x="9823" fg:w="15"/><text x="94.5908%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (772 instructions, 7.41%)</title><rect x="87.7892%" y="229" width="7.4110%" height="15" fill="rgb(223,17,39)" fg:x="9145" fg:w="772"/><text x="88.0822%" y="239.50">candid::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.05%)</title><rect x="95.2002%" y="229" width="0.0480%" height="15" fill="rgb(234,204,37)" fg:x="9917" fg:w="5"/><text x="95.4931%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="95.2482%" y="181" width="0.0288%" height="15" fill="rgb(236,120,5)" fg:x="9922" fg:w="3"/><text x="95.5411%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="95.2770%" y="181" width="0.0384%" height="15" fill="rgb(248,97,27)" fg:x="9925" fg:w="4"/><text x="95.5699%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="95.3153%" y="181" width="0.0288%" height="15" fill="rgb(240,66,17)" fg:x="9929" fg:w="3"/><text x="95.6083%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="95.3441%" y="181" width="0.0384%" height="15" fill="rgb(210,79,3)" fg:x="9932" fg:w="4"/><text x="95.6371%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="95.3825%" y="181" width="0.0576%" height="15" fill="rgb(214,176,27)" fg:x="9936" fg:w="6"/><text x="95.6755%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="95.4401%" y="181" width="0.0960%" height="15" fill="rgb(235,185,3)" fg:x="9942" fg:w="10"/><text x="95.7331%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.67%)</title><rect x="95.2482%" y="197" width="0.6720%" height="15" fill="rgb(227,24,12)" fg:x="9922" fg:w="70"/><text x="95.5411%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.69%)</title><rect x="95.2482%" y="213" width="0.6912%" height="15" fill="rgb(252,169,48)" fg:x="9922" fg:w="72"/><text x="95.5411%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.74%)</title><rect x="95.2482%" y="229" width="0.7392%" height="15" fill="rgb(212,65,1)" fg:x="9922" fg:w="77"/><text x="95.5411%" y="239.50"></text></g><g><title>candid::utils::write_args (1,198 instructions, 11.50%)</title><rect x="85.2165%" y="245" width="11.5004%" height="15" fill="rgb(242,39,24)" fg:x="8877" fg:w="1198"/><text x="85.5094%" y="255.50">candid::utils:..</text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="96.7169%" y="197" width="0.0288%" height="15" fill="rgb(249,32,23)" fg:x="10075" fg:w="3"/><text x="97.0099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="96.7457%" y="197" width="0.0384%" height="15" fill="rgb(251,195,23)" fg:x="10078" fg:w="4"/><text x="97.0387%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="96.7841%" y="197" width="0.0288%" height="15" fill="rgb(236,174,8)" fg:x="10082" fg:w="3"/><text x="97.0771%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="96.8129%" y="197" width="0.0384%" height="15" fill="rgb(220,197,8)" fg:x="10085" fg:w="4"/><text x="97.1059%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="96.8513%" y="197" width="0.0576%" height="15" fill="rgb(240,108,37)" fg:x="10089" fg:w="6"/><text x="97.1443%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.15%)</title><rect x="96.9089%" y="197" width="0.1536%" height="15" fill="rgb(232,176,24)" fg:x="10095" fg:w="16"/><text x="97.2019%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.94%)</title><rect x="96.7169%" y="213" width="0.9408%" height="15" fill="rgb(243,35,29)" fg:x="10075" fg:w="98"/><text x="97.0099%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.96%)</title><rect x="96.7169%" y="229" width="0.9600%" height="15" fill="rgb(210,37,18)" fg:x="10075" fg:w="100"/><text x="97.0099%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::from_mem (3 instructions, 0.03%)</title><rect x="97.7249%" y="197" width="0.0288%" height="15" fill="rgb(224,184,40)" fg:x="10180" fg:w="3"/><text x="98.0178%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::size (4 instructions, 0.04%)</title><rect x="97.7537%" y="197" width="0.0384%" height="15" fill="rgb(236,39,29)" fg:x="10183" fg:w="4"/><text x="98.0466%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::plus_offset (3 instructions, 0.03%)</title><rect x="97.7921%" y="197" width="0.0288%" height="15" fill="rgb(232,48,39)" fg:x="10187" fg:w="3"/><text x="98.0850%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::pinuse (4 instructions, 0.04%)</title><rect x="97.8209%" y="197" width="0.0384%" height="15" fill="rgb(236,34,42)" fg:x="10190" fg:w="4"/><text x="98.1138%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::mmapped (5 instructions, 0.05%)</title><rect x="97.8593%" y="197" width="0.0480%" height="15" fill="rgb(243,106,37)" fg:x="10194" fg:w="5"/><text x="98.1522%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::minus_offset (3 instructions, 0.03%)</title><rect x="97.9073%" y="197" width="0.0288%" height="15" fill="rgb(218,96,6)" fg:x="10199" fg:w="3"/><text x="98.2002%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.06%)</title><rect x="97.9361%" y="197" width="0.0576%" height="15" fill="rgb(235,130,12)" fg:x="10202" fg:w="6"/><text x="98.2290%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.10%)</title><rect x="97.9937%" y="197" width="0.0960%" height="15" fill="rgb(231,95,0)" fg:x="10208" fg:w="10"/><text x="98.2866%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (122 instructions, 1.17%)</title><rect x="97.7249%" y="213" width="1.1712%" height="15" fill="rgb(228,12,23)" fg:x="10180" fg:w="122"/><text x="98.0178%" y="223.50"></text></g><g><title>__rdl_dealloc (124 instructions, 1.19%)</title><rect x="97.7249%" y="229" width="1.1904%" height="15" fill="rgb(216,12,1)" fg:x="10180" fg:w="124"/><text x="98.0178%" y="239.50"></text></g><g><title>__rust_dealloc (234 instructions, 2.25%)</title><rect x="96.7169%" y="245" width="2.2463%" height="15" fill="rgb(219,59,3)" fg:x="10075" fg:w="234"/><text x="97.0099%" y="255.50">_..</text></g><g><title>ic_cdk::futures::spawn (10,406 instructions, 99.89%)</title><rect x="0.0768%" y="261" width="99.8944%" height="15" fill="rgb(215,208,46)" fg:x="8" fg:w="10406"/><text x="0.3698%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (10,417 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(254,224,29)" fg:x="0" fg:w="10417"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update cancelTimer (10,417 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(232,14,29)" fg:x="0" fg:w="10417"/><text x="0.2930%" y="287.50">canister_update cancelTimer</text></g></svg></svg>