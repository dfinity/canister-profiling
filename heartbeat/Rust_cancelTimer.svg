<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Rust.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="11184"><g><title>ic_cdk::setup (24 instructions, 0.21%)</title><rect x="0.0000%" y="197" width="0.2146%" height="15" fill="rgb(223,59,9)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="0.2146%" y="197" width="0.7421%" height="15" fill="rgb(233,93,31)" fg:x="24" fg:w="83"/><text x="0.5076%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="0.9567%" y="197" width="0.7421%" height="15" fill="rgb(239,81,33)" fg:x="107" fg:w="83"/><text x="1.2497%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="1.6989%" y="165" width="0.7421%" height="15" fill="rgb(213,120,34)" fg:x="190" fg:w="83"/><text x="1.9918%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.73%)</title><rect x="2.4410%" y="149" width="0.7332%" height="15" fill="rgb(243,49,53)" fg:x="273" fg:w="82"/><text x="2.7340%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="3.1742%" y="133" width="0.0536%" height="15" fill="rgb(247,216,33)" fg:x="355" fg:w="6"/><text x="3.4671%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.96%)</title><rect x="3.1742%" y="149" width="3.9610%" height="15" fill="rgb(226,26,14)" fg:x="355" fg:w="443"/><text x="3.4671%" y="159.50">cor..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.85%)</title><rect x="7.1352%" y="149" width="0.8494%" height="15" fill="rgb(215,49,53)" fg:x="798" fg:w="95"/><text x="7.4282%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.54%)</title><rect x="7.9846%" y="149" width="0.5365%" height="15" fill="rgb(245,162,40)" fg:x="893" fg:w="60"/><text x="8.2776%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.54%)</title><rect x="8.5211%" y="149" width="0.5365%" height="15" fill="rgb(229,68,17)" fg:x="953" fg:w="60"/><text x="8.8141%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.54%)</title><rect x="9.0576%" y="149" width="0.5365%" height="15" fill="rgb(213,182,10)" fg:x="1013" fg:w="60"/><text x="9.3506%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.54%)</title><rect x="9.5941%" y="149" width="0.5365%" height="15" fill="rgb(245,125,30)" fg:x="1073" fg:w="60"/><text x="9.8870%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.73%)</title><rect x="10.1305%" y="149" width="0.7332%" height="15" fill="rgb(232,202,2)" fg:x="1133" fg:w="82"/><text x="10.4235%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.63%)</title><rect x="10.8637%" y="149" width="0.6259%" height="15" fill="rgb(237,140,51)" fg:x="1215" fg:w="70"/><text x="11.1567%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="11.4896%" y="133" width="0.0536%" height="15" fill="rgb(236,157,25)" fg:x="1285" fg:w="6"/><text x="11.7826%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.96%)</title><rect x="11.4896%" y="149" width="3.9610%" height="15" fill="rgb(219,209,0)" fg:x="1285" fg:w="443"/><text x="11.7826%" y="159.50">cor..</text></g><g><title>memcmp (19 instructions, 0.17%)</title><rect x="15.4506%" y="149" width="0.1699%" height="15" fill="rgb(240,116,54)" fg:x="1728" fg:w="19"/><text x="15.7436%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="15.6205%" y="133" width="0.7421%" height="15" fill="rgb(216,10,36)" fg:x="1747" fg:w="83"/><text x="15.9135%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.60%)</title><rect x="16.3627%" y="101" width="0.5991%" height="15" fill="rgb(222,72,44)" fg:x="1830" fg:w="67"/><text x="16.6556%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.86%)</title><rect x="16.3627%" y="117" width="0.8584%" height="15" fill="rgb(232,159,9)" fg:x="1830" fg:w="96"/><text x="16.6556%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.10%)</title><rect x="17.2210%" y="69" width="0.0984%" height="15" fill="rgb(210,39,32)" fg:x="1926" fg:w="11"/><text x="17.5140%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.31%)</title><rect x="17.3194%" y="53" width="0.3129%" height="15" fill="rgb(216,194,45)" fg:x="1937" fg:w="35"/><text x="17.6124%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.57%)</title><rect x="17.3194%" y="69" width="0.5722%" height="15" fill="rgb(218,18,35)" fg:x="1937" fg:w="64"/><text x="17.6124%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.29%)</title><rect x="17.2210%" y="85" width="1.2876%" height="15" fill="rgb(207,83,51)" fg:x="1926" fg:w="144"/><text x="17.5140%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.87%)</title><rect x="17.2210%" y="101" width="1.8687%" height="15" fill="rgb(225,63,43)" fg:x="1926" fg:w="209"/><text x="17.5140%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.96%)</title><rect x="17.2210%" y="117" width="1.9582%" height="15" fill="rgb(207,57,36)" fg:x="1926" fg:w="219"/><text x="17.5140%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 4.05%)</title><rect x="16.3627%" y="133" width="4.0504%" height="15" fill="rgb(216,99,33)" fg:x="1830" fg:w="453"/><text x="16.6556%" y="143.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 6.03%)</title><rect x="15.6205%" y="149" width="6.0265%" height="15" fill="rgb(225,42,16)" fg:x="1747" fg:w="674"/><text x="15.9135%" y="159.50">alloc:..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.85%)</title><rect x="21.6470%" y="149" width="0.8494%" height="15" fill="rgb(220,201,45)" fg:x="2421" fg:w="95"/><text x="21.9400%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.54%)</title><rect x="22.4964%" y="149" width="0.5365%" height="15" fill="rgb(225,33,4)" fg:x="2516" fg:w="60"/><text x="22.7894%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.68%)</title><rect x="23.0329%" y="149" width="0.6795%" height="15" fill="rgb(224,33,50)" fg:x="2576" fg:w="76"/><text x="23.3259%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.63%)</title><rect x="23.7124%" y="149" width="0.6259%" height="15" fill="rgb(246,198,51)" fg:x="2652" fg:w="70"/><text x="24.0054%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.05%)</title><rect x="24.3383%" y="117" width="0.0536%" height="15" fill="rgb(205,22,4)" fg:x="2722" fg:w="6"/><text x="24.6313%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 3.96%)</title><rect x="24.3383%" y="133" width="3.9610%" height="15" fill="rgb(206,3,8)" fg:x="2722" fg:w="443"/><text x="24.6313%" y="143.50">cor..</text></g><g><title>memcmp (19 instructions, 0.17%)</title><rect x="28.2994%" y="133" width="0.1699%" height="15" fill="rgb(251,23,15)" fg:x="3165" fg:w="19"/><text x="28.5923%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="28.4692%" y="117" width="0.7421%" height="15" fill="rgb(252,88,28)" fg:x="3184" fg:w="83"/><text x="28.7622%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.60%)</title><rect x="29.2114%" y="85" width="0.5991%" height="15" fill="rgb(212,127,14)" fg:x="3267" fg:w="67"/><text x="29.5043%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.86%)</title><rect x="29.2114%" y="101" width="0.8584%" height="15" fill="rgb(247,145,37)" fg:x="3267" fg:w="96"/><text x="29.5043%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.10%)</title><rect x="30.0697%" y="53" width="0.0984%" height="15" fill="rgb(209,117,53)" fg:x="3363" fg:w="11"/><text x="30.3627%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.31%)</title><rect x="30.1681%" y="37" width="0.3129%" height="15" fill="rgb(212,90,42)" fg:x="3374" fg:w="35"/><text x="30.4611%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.57%)</title><rect x="30.1681%" y="53" width="0.5722%" height="15" fill="rgb(218,164,37)" fg:x="3374" fg:w="64"/><text x="30.4611%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 1.29%)</title><rect x="30.0697%" y="69" width="1.2876%" height="15" fill="rgb(246,65,34)" fg:x="3363" fg:w="144"/><text x="30.3627%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.87%)</title><rect x="30.0697%" y="85" width="1.8687%" height="15" fill="rgb(231,100,33)" fg:x="3363" fg:w="209"/><text x="30.3627%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.96%)</title><rect x="30.0697%" y="101" width="1.9582%" height="15" fill="rgb(228,126,14)" fg:x="3363" fg:w="219"/><text x="30.3627%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 4.05%)</title><rect x="29.2114%" y="117" width="4.0504%" height="15" fill="rgb(215,173,21)" fg:x="3267" fg:w="453"/><text x="29.5043%" y="127.50">cor..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 6.03%)</title><rect x="28.4692%" y="133" width="6.0265%" height="15" fill="rgb(210,6,40)" fg:x="3184" fg:w="674"/><text x="28.7622%" y="143.50">alloc:..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.85%)</title><rect x="34.4957%" y="133" width="0.8494%" height="15" fill="rgb(212,48,18)" fg:x="3858" fg:w="95"/><text x="34.7887%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.54%)</title><rect x="35.3451%" y="133" width="0.5365%" height="15" fill="rgb(230,214,11)" fg:x="3953" fg:w="60"/><text x="35.6381%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,480 instructions, 13.23%)</title><rect x="24.3383%" y="149" width="13.2332%" height="15" fill="rgb(254,105,39)" fg:x="2722" fg:w="1480"/><text x="24.6313%" y="159.50">binread::binread_..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.68%)</title><rect x="37.5715%" y="149" width="0.6795%" height="15" fill="rgb(245,158,5)" fg:x="4202" fg:w="76"/><text x="37.8645%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.13%)</title><rect x="38.2511%" y="149" width="0.1341%" height="15" fill="rgb(249,208,11)" fg:x="4278" fg:w="15"/><text x="38.5440%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.13%)</title><rect x="38.3852%" y="149" width="0.1341%" height="15" fill="rgb(210,39,28)" fg:x="4293" fg:w="15"/><text x="38.6782%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.08%)</title><rect x="38.5193%" y="149" width="0.0805%" height="15" fill="rgb(211,56,53)" fg:x="4308" fg:w="9"/><text x="38.8123%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.14%)</title><rect x="38.5998%" y="149" width="0.1431%" height="15" fill="rgb(226,201,30)" fg:x="4317" fg:w="16"/><text x="38.8928%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="38.7428%" y="149" width="0.7421%" height="15" fill="rgb(239,101,34)" fg:x="4333" fg:w="83"/><text x="39.0358%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="39.4850%" y="149" width="0.7421%" height="15" fill="rgb(226,209,5)" fg:x="4416" fg:w="83"/><text x="39.7779%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.04%)</title><rect x="40.2271%" y="149" width="0.0358%" height="15" fill="rgb(250,105,47)" fg:x="4499" fg:w="4"/><text x="40.5201%" y="159.50"></text></g><g><title>memcpy (428 instructions, 3.83%)</title><rect x="40.2629%" y="149" width="3.8269%" height="15" fill="rgb(230,72,3)" fg:x="4503" fg:w="428"/><text x="40.5558%" y="159.50">mem..</text></g><g><title>memcpy (428 instructions, 3.83%)</title><rect x="44.0898%" y="149" width="3.8269%" height="15" fill="rgb(232,218,39)" fg:x="4931" fg:w="428"/><text x="44.3827%" y="159.50">mem..</text></g><g><title>candid::de::IDLDeserialize::new (6,100 instructions, 54.54%)</title><rect x="2.4410%" y="165" width="54.5422%" height="15" fill="rgb(248,166,6)" fg:x="273" fg:w="6100"/><text x="2.7340%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 3.40%)</title><rect x="56.9832%" y="165" width="3.3977%" height="15" fill="rgb(247,89,20)" fg:x="6373" fg:w="380"/><text x="57.2762%" y="175.50">me..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.06%)</title><rect x="60.3809%" y="133" width="0.0626%" height="15" fill="rgb(248,130,54)" fg:x="6753" fg:w="7"/><text x="60.6739%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.80%)</title><rect x="60.4435%" y="117" width="0.7958%" height="15" fill="rgb(234,196,4)" fg:x="6760" fg:w="89"/><text x="60.7365%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.24%)</title><rect x="61.5522%" y="101" width="0.2414%" height="15" fill="rgb(250,143,31)" fg:x="6884" fg:w="27"/><text x="61.8452%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 1.03%)</title><rect x="61.5522%" y="117" width="1.0283%" height="15" fill="rgb(211,110,34)" fg:x="6884" fg:w="115"/><text x="61.8452%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (274 instructions, 2.45%)</title><rect x="60.4435%" y="133" width="2.4499%" height="15" fill="rgb(215,124,48)" fg:x="6760" fg:w="274"/><text x="60.7365%" y="143.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (336 instructions, 3.00%)</title><rect x="60.3809%" y="149" width="3.0043%" height="15" fill="rgb(216,46,13)" fg:x="6753" fg:w="336"/><text x="60.6739%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (385 instructions, 3.44%)</title><rect x="60.3809%" y="165" width="3.4424%" height="15" fill="rgb(205,184,25)" fg:x="6753" fg:w="385"/><text x="60.6739%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.54%)</title><rect x="63.8233%" y="165" width="0.5365%" height="15" fill="rgb(228,1,10)" fg:x="7138" fg:w="60"/><text x="64.1163%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (8,156 instructions, 72.93%)</title><rect x="1.6989%" y="181" width="72.9256%" height="15" fill="rgb(213,116,27)" fg:x="190" fg:w="8156"/><text x="1.9918%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (7 instructions, 0.06%)</title><rect x="74.6245%" y="181" width="0.0626%" height="15" fill="rgb(241,95,50)" fg:x="8346" fg:w="7"/><text x="74.9174%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.06%)</title><rect x="74.6960%" y="149" width="0.0626%" height="15" fill="rgb(238,48,32)" fg:x="8354" fg:w="7"/><text x="74.9890%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (91 instructions, 0.81%)</title><rect x="74.6960%" y="165" width="0.8137%" height="15" fill="rgb(235,113,49)" fg:x="8354" fg:w="91"/><text x="74.9890%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 4.63%)</title><rect x="75.5097%" y="165" width="4.6316%" height="15" fill="rgb(205,127,43)" fg:x="8445" fg:w="518"/><text x="75.8026%" y="175.50">std:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.74%)</title><rect x="80.1413%" y="117" width="0.7421%" height="15" fill="rgb(250,162,2)" fg:x="8963" fg:w="83"/><text x="80.4342%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 1.13%)</title><rect x="80.1413%" y="133" width="1.1266%" height="15" fill="rgb(220,13,41)" fg:x="8963" fg:w="126"/><text x="80.4342%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 1.86%)</title><rect x="80.1413%" y="149" width="1.8598%" height="15" fill="rgb(249,221,25)" fg:x="8963" fg:w="208"/><text x="80.4342%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.13%)</title><rect x="82.0011%" y="149" width="0.1341%" height="15" fill="rgb(215,208,19)" fg:x="9171" fg:w="15"/><text x="82.2940%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.13%)</title><rect x="82.1352%" y="149" width="0.1341%" height="15" fill="rgb(236,175,2)" fg:x="9186" fg:w="15"/><text x="82.4282%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 3.81%)</title><rect x="80.1413%" y="165" width="3.8090%" height="15" fill="rgb(241,52,2)" fg:x="8963" fg:w="426"/><text x="80.4342%" y="175.50">can..</text></g><g><title>std::io::Write::write_all (516 instructions, 4.61%)</title><rect x="83.9503%" y="165" width="4.6137%" height="15" fill="rgb(248,140,14)" fg:x="9389" fg:w="516"/><text x="84.2433%" y="175.50">std:..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.06%)</title><rect x="88.5640%" y="165" width="0.0626%" height="15" fill="rgb(253,22,42)" fg:x="9905" fg:w="7"/><text x="88.8570%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.06%)</title><rect x="88.6266%" y="165" width="0.0626%" height="15" fill="rgb(234,61,47)" fg:x="9912" fg:w="7"/><text x="88.9196%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.54%)</title><rect x="88.6892%" y="165" width="0.5365%" height="15" fill="rgb(208,226,15)" fg:x="9919" fg:w="60"/><text x="88.9822%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,304 instructions, 20.60%)</title><rect x="74.6960%" y="181" width="20.6009%" height="15" fill="rgb(217,221,4)" fg:x="8354" fg:w="2304"/><text x="74.9890%" y="191.50">ic_cdk::api::call::reply</text></g><g><title>timer::__canister_method_cancelTimer::{{closure}} (10,631 instructions, 95.06%)</title><rect x="1.6989%" y="197" width="95.0554%" height="15" fill="rgb(212,174,34)" fg:x="190" fg:w="10631"/><text x="1.9918%" y="207.50">timer::__canister_method_cancelTimer::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.13%)</title><rect x="96.7543%" y="197" width="0.1252%" height="15" fill="rgb(253,83,4)" fg:x="10821" fg:w="14"/><text x="97.0473%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.24%)</title><rect x="97.6842%" y="181" width="0.2414%" height="15" fill="rgb(250,195,49)" fg:x="10925" fg:w="27"/><text x="97.9772%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 1.82%)</title><rect x="96.8884%" y="197" width="1.8240%" height="15" fill="rgb(241,192,25)" fg:x="10836" fg:w="204"/><text x="97.1814%" y="207.50"></text></g><g><title>all (11,184 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,124,10)" fg:x="0" fg:w="11184"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update cancelTimer (11,184 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,33,0)" fg:x="0" fg:w="11184"/><text x="0.2930%" y="223.50">canister_update cancelTimer</text></g></svg></svg>