<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="198" onload="init(evt)" viewBox="0 0 1024 198" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="198" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Motoko.cancelTimer</text><text id="details" fill="rgb(0,0,0)" x="10" y="181.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="181.00"> </text><svg id="frames" x="10" width="1004" total_samples="1907"><g><title>trans_state5 (9 instructions, 0.47%)</title><rect x="0.0000%" y="117" width="0.4719%" height="15" fill="rgb(216,97,11)" fg:x="0" fg:w="9"/><text x="0.2930%" y="127.50"></text></g><g><title>@reset_cycles (3 instructions, 0.16%)</title><rect x="0.4719%" y="117" width="0.1573%" height="15" fill="rgb(223,59,9)" fg:x="9" fg:w="3"/><text x="0.7649%" y="127.50"></text></g><g><title>@reset_refund (3 instructions, 0.16%)</title><rect x="0.6293%" y="117" width="0.1573%" height="15" fill="rgb(233,93,31)" fg:x="12" fg:w="3"/><text x="0.9222%" y="127.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 1.78%)</title><rect x="0.7866%" y="101" width="1.7829%" height="15" fill="rgb(239,81,33)" fg:x="15" fg:w="34"/><text x="1.0795%" y="111.50"></text></g><g><title>alloc_blob (36 instructions, 1.89%)</title><rect x="0.7866%" y="117" width="1.8878%" height="15" fill="rgb(213,120,34)" fg:x="15" fg:w="36"/><text x="1.0795%" y="127.50"></text></g><g><title>leb128_decode (51 instructions, 2.67%)</title><rect x="2.6744%" y="85" width="2.6744%" height="15" fill="rgb(243,49,53)" fg:x="51" fg:w="51"/><text x="2.9673%" y="95.50">l..</text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 1.78%)</title><rect x="5.3487%" y="85" width="1.7829%" height="15" fill="rgb(247,216,33)" fg:x="102" fg:w="34"/><text x="5.6417%" y="95.50"></text></g><g><title>leb128_decode (51 instructions, 2.67%)</title><rect x="7.1316%" y="85" width="2.6744%" height="15" fill="rgb(226,26,14)" fg:x="136" fg:w="51"/><text x="7.4246%" y="95.50">l..</text></g><g><title>sleb128_decode (68 instructions, 3.57%)</title><rect x="9.8060%" y="85" width="3.5658%" height="15" fill="rgb(215,49,53)" fg:x="187" fg:w="68"/><text x="10.0989%" y="95.50">sle..</text></g><g><title>parse_idl_header (290 instructions, 15.21%)</title><rect x="2.6744%" y="101" width="15.2071%" height="15" fill="rgb(245,162,40)" fg:x="51" fg:w="290"/><text x="2.9673%" y="111.50">parse_idl_header</text></g><g><title>idl_sub_buf_words (9 instructions, 0.47%)</title><rect x="17.8815%" y="101" width="0.4719%" height="15" fill="rgb(229,68,17)" fg:x="341" fg:w="9"/><text x="18.1745%" y="111.50"></text></g><g><title>memset (4 instructions, 0.21%)</title><rect x="18.3534%" y="85" width="0.2098%" height="15" fill="rgb(213,182,10)" fg:x="350" fg:w="4"/><text x="18.6464%" y="95.50"></text></g><g><title>idl_sub_buf_init (19 instructions, 1.00%)</title><rect x="18.3534%" y="101" width="0.9963%" height="15" fill="rgb(245,125,30)" fg:x="350" fg:w="19"/><text x="18.6464%" y="111.50"></text></g><g><title>leb128_decode (51 instructions, 2.67%)</title><rect x="19.3498%" y="101" width="2.6744%" height="15" fill="rgb(232,202,2)" fg:x="369" fg:w="51"/><text x="19.6427%" y="111.50">l..</text></g><g><title>sleb128_decode (68 instructions, 3.57%)</title><rect x="22.0241%" y="101" width="3.5658%" height="15" fill="rgb(237,140,51)" fg:x="420" fg:w="68"/><text x="22.3171%" y="111.50">sle..</text></g><g><title>set_local %i0 (3 instructions, 0.16%)</title><rect x="25.5899%" y="101" width="0.1573%" height="15" fill="rgb(236,157,25)" fg:x="488" fg:w="3"/><text x="25.8829%" y="111.50"></text></g><g><title>set_local %i1 (3 instructions, 0.16%)</title><rect x="25.7472%" y="101" width="0.1573%" height="15" fill="rgb(219,209,0)" fg:x="491" fg:w="3"/><text x="26.0402%" y="111.50"></text></g><g><title>set_local %i2 (3 instructions, 0.16%)</title><rect x="25.9046%" y="101" width="0.1573%" height="15" fill="rgb(240,116,54)" fg:x="494" fg:w="3"/><text x="26.1975%" y="111.50"></text></g><g><title>bigint_leb128_decode_word64 (36 instructions, 1.89%)</title><rect x="26.0619%" y="85" width="1.8878%" height="15" fill="rgb(216,10,36)" fg:x="497" fg:w="36"/><text x="26.3548%" y="95.50"></text></g><g><title>@deserialize_go&lt;N&gt; (80 instructions, 4.20%)</title><rect x="26.0619%" y="101" width="4.1951%" height="15" fill="rgb(222,72,44)" fg:x="497" fg:w="80"/><text x="26.3548%" y="111.50">@des..</text></g><g><title>@deserialize&lt;N&gt; (730 instructions, 38.28%)</title><rect x="2.6744%" y="117" width="38.2800%" height="15" fill="rgb(232,159,9)" fg:x="51" fg:w="730"/><text x="2.9673%" y="127.50">@deserialize&lt;N&gt;</text></g><g><title>alloc_words (26 instructions, 1.36%)</title><rect x="40.9544%" y="117" width="1.3634%" height="15" fill="rgb(210,39,32)" fg:x="781" fg:w="26"/><text x="41.2473%" y="127.50"></text></g><g><title>alloc_words (26 instructions, 1.36%)</title><rect x="42.3178%" y="85" width="1.3634%" height="15" fill="rgb(216,194,45)" fg:x="807" fg:w="26"/><text x="42.6107%" y="95.50"></text></g><g><title>alloc_words (26 instructions, 1.36%)</title><rect x="43.6812%" y="85" width="1.3634%" height="15" fill="rgb(218,18,35)" fg:x="833" fg:w="26"/><text x="43.9741%" y="95.50"></text></g><g><title>opt_project (14 instructions, 0.73%)</title><rect x="45.0446%" y="69" width="0.7341%" height="15" fill="rgb(207,83,51)" fg:x="859" fg:w="14"/><text x="45.3375%" y="79.50"></text></g><g><title>obj_idx&lt;0&gt; (16 instructions, 0.84%)</title><rect x="45.7787%" y="69" width="0.8390%" height="15" fill="rgb(225,63,43)" fg:x="873" fg:w="16"/><text x="46.0717%" y="79.50"></text></g><g><title>obj_idx&lt;2&gt; (16 instructions, 0.84%)</title><rect x="46.6177%" y="69" width="0.8390%" height="15" fill="rgb(207,57,36)" fg:x="889" fg:w="16"/><text x="46.9107%" y="79.50"></text></g><g><title>obj_idx&lt;4&gt; (16 instructions, 0.84%)</title><rect x="47.4567%" y="69" width="0.8390%" height="15" fill="rgb(216,99,33)" fg:x="905" fg:w="16"/><text x="47.7497%" y="79.50"></text></g><g><title>B_eq (5 instructions, 0.26%)</title><rect x="48.2958%" y="69" width="0.2622%" height="15" fill="rgb(225,42,16)" fg:x="921" fg:w="5"/><text x="48.5887%" y="79.50"></text></g><g><title>alloc_words (26 instructions, 1.36%)</title><rect x="48.5579%" y="37" width="1.3634%" height="15" fill="rgb(220,201,45)" fg:x="926" fg:w="26"/><text x="48.8509%" y="47.50"></text></g><g><title>to_2_tuple (41 instructions, 2.15%)</title><rect x="48.5579%" y="53" width="2.1500%" height="15" fill="rgb(225,33,4)" fg:x="926" fg:w="41"/><text x="48.8509%" y="63.50">t..</text></g><g><title>graft (60 instructions, 3.15%)</title><rect x="48.5579%" y="69" width="3.1463%" height="15" fill="rgb(224,33,50)" fg:x="926" fg:w="60"/><text x="48.8509%" y="79.50">gr..</text></g><g><title>hunt (176 instructions, 9.23%)</title><rect x="45.0446%" y="85" width="9.2292%" height="15" fill="rgb(246,198,51)" fg:x="859" fg:w="176"/><text x="45.3375%" y="95.50">hunt</text></g><g><title>@nextExpiration (10 instructions, 0.52%)</title><rect x="54.2737%" y="85" width="0.5244%" height="15" fill="rgb(205,22,4)" fg:x="1035" fg:w="10"/><text x="54.5667%" y="95.50"></text></g><g><title>unbox_i64 (7 instructions, 0.37%)</title><rect x="54.7981%" y="85" width="0.3671%" height="15" fill="rgb(206,3,8)" fg:x="1045" fg:w="7"/><text x="55.0911%" y="95.50"></text></g><g><title>@cancelTimer (297 instructions, 15.57%)</title><rect x="42.3178%" y="101" width="15.5742%" height="15" fill="rgb(251,23,15)" fg:x="807" fg:w="297"/><text x="42.6107%" y="111.50">@cancelTimer</text></g><g><title>@buffer_size&lt;u&gt; (14 instructions, 0.73%)</title><rect x="57.8920%" y="69" width="0.7341%" height="15" fill="rgb(252,88,28)" fg:x="1104" fg:w="14"/><text x="58.1849%" y="79.50"></text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 1.78%)</title><rect x="58.6261%" y="53" width="1.7829%" height="15" fill="rgb(212,127,14)" fg:x="1118" fg:w="34"/><text x="58.9191%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 1.89%)</title><rect x="58.6261%" y="69" width="1.8878%" height="15" fill="rgb(247,145,37)" fg:x="1118" fg:w="36"/><text x="58.9191%" y="79.50"></text></g><g><title>memcpy (63 instructions, 3.30%)</title><rect x="60.5139%" y="69" width="3.3036%" height="15" fill="rgb(209,117,53)" fg:x="1154" fg:w="63"/><text x="60.8069%" y="79.50">me..</text></g><g><title>motoko_rts::memory::alloc_blob::hcfef0ac48a3e71ee (34 instructions, 1.78%)</title><rect x="63.8175%" y="53" width="1.7829%" height="15" fill="rgb(212,90,42)" fg:x="1217" fg:w="34"/><text x="64.1105%" y="63.50"></text></g><g><title>alloc_blob (36 instructions, 1.89%)</title><rect x="63.8175%" y="69" width="1.8878%" height="15" fill="rgb(218,164,37)" fg:x="1217" fg:w="36"/><text x="64.1105%" y="79.50"></text></g><g><title>@serialize_go&lt;u&gt; (4 instructions, 0.21%)</title><rect x="65.7053%" y="69" width="0.2098%" height="15" fill="rgb(246,65,34)" fg:x="1253" fg:w="4"/><text x="65.9983%" y="79.50"></text></g><g><title>@serialize&lt;&gt; (216 instructions, 11.33%)</title><rect x="57.8920%" y="85" width="11.3267%" height="15" fill="rgb(231,100,33)" fg:x="1104" fg:w="216"/><text x="58.1849%" y="95.50">@serialize&lt;&gt;</text></g><g><title>reply_with_data (30 instructions, 1.57%)</title><rect x="69.2187%" y="85" width="1.5732%" height="15" fill="rgb(228,126,14)" fg:x="1320" fg:w="30"/><text x="69.5116%" y="95.50"></text></g><g><title>$lambda (251 instructions, 13.16%)</title><rect x="57.8920%" y="101" width="13.1620%" height="15" fill="rgb(215,173,21)" fg:x="1104" fg:w="251"/><text x="58.1849%" y="111.50">$lambda</text></g><g><title>$lambda (559 instructions, 29.31%)</title><rect x="42.3178%" y="117" width="29.3131%" height="15" fill="rgb(210,6,40)" fg:x="807" fg:w="559"/><text x="42.6107%" y="127.50">$lambda</text></g><g><title>schedule_copying_gc (50 instructions, 2.62%)</title><rect x="71.6308%" y="117" width="2.6219%" height="15" fill="rgb(212,48,18)" fg:x="1366" fg:w="50"/><text x="71.9238%" y="127.50">s..</text></g><g><title>trans_state4 (14 instructions, 0.73%)</title><rect x="74.2528%" y="117" width="0.7341%" height="15" fill="rgb(230,214,11)" fg:x="1416" fg:w="14"/><text x="74.5457%" y="127.50"></text></g><g><title>all (1,907 instructions, 100%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(254,105,39)" fg:x="0" fg:w="1907"/><text x="0.2930%" y="159.50"></text></g><g><title>cancelTimer (1,907 instructions, 100.00%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(245,158,5)" fg:x="0" fg:w="1907"/><text x="0.2930%" y="143.50">cancelTimer</text></g></svg></svg>