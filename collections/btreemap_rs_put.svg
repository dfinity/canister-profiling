<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="86708"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0219%" height="15" fill="rgb(210,23,32)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0219%" y="197" width="0.0877%" height="15" fill="rgb(236,221,14)" fg:x="19" fg:w="76"/><text x="0.3149%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.08%)</title><rect x="0.1096%" y="197" width="0.0819%" height="15" fill="rgb(250,216,37)" fg:x="95" fg:w="71"/><text x="0.4025%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.14%)</title><rect x="0.1914%" y="165" width="0.1361%" height="15" fill="rgb(217,61,14)" fg:x="166" fg:w="118"/><text x="0.4844%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="0.3275%" y="149" width="0.0796%" height="15" fill="rgb(211,47,50)" fg:x="284" fg:w="69"/><text x="0.6205%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.47%)</title><rect x="0.4071%" y="149" width="0.4682%" height="15" fill="rgb(226,171,19)" fg:x="353" fg:w="406"/><text x="0.7001%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.09%)</title><rect x="0.8754%" y="149" width="0.0946%" height="15" fill="rgb(226,3,34)" fg:x="759" fg:w="82"/><text x="1.1683%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="0.9699%" y="149" width="0.0623%" height="15" fill="rgb(254,93,35)" fg:x="841" fg:w="54"/><text x="1.2629%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.0322%" y="149" width="0.0623%" height="15" fill="rgb(233,151,38)" fg:x="895" fg:w="54"/><text x="1.3252%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.0945%" y="149" width="0.0623%" height="15" fill="rgb(205,160,13)" fg:x="949" fg:w="54"/><text x="1.3874%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.1568%" y="149" width="0.0623%" height="15" fill="rgb(253,145,42)" fg:x="1003" fg:w="54"/><text x="1.4497%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="1.2190%" y="149" width="0.0796%" height="15" fill="rgb(233,209,6)" fg:x="1057" fg:w="69"/><text x="1.5120%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.07%)</title><rect x="1.2986%" y="149" width="0.0750%" height="15" fill="rgb(220,52,29)" fg:x="1126" fg:w="65"/><text x="1.5916%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.47%)</title><rect x="1.3736%" y="149" width="0.4682%" height="15" fill="rgb(247,112,42)" fg:x="1191" fg:w="406"/><text x="1.6665%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.8418%" y="149" width="0.0185%" height="15" fill="rgb(243,16,52)" fg:x="1597" fg:w="16"/><text x="2.1348%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.8603%" y="133" width="0.0877%" height="15" fill="rgb(239,102,24)" fg:x="1613" fg:w="76"/><text x="2.1532%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="1.9479%" y="101" width="0.0692%" height="15" fill="rgb(254,17,44)" fg:x="1689" fg:w="60"/><text x="2.2409%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="1.9479%" y="117" width="0.0980%" height="15" fill="rgb(205,4,2)" fg:x="1689" fg:w="85"/><text x="2.2409%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.0459%" y="69" width="0.0104%" height="15" fill="rgb(214,15,3)" fg:x="1774" fg:w="9"/><text x="2.3389%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.0563%" y="53" width="0.0346%" height="15" fill="rgb(245,177,21)" fg:x="1783" fg:w="30"/><text x="2.3493%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.06%)</title><rect x="2.0563%" y="69" width="0.0634%" height="15" fill="rgb(211,133,22)" fg:x="1783" fg:w="55"/><text x="2.3493%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.14%)</title><rect x="2.0459%" y="85" width="0.1361%" height="15" fill="rgb(211,119,27)" fg:x="1774" fg:w="118"/><text x="2.3389%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.20%)</title><rect x="2.0459%" y="101" width="0.1972%" height="15" fill="rgb(239,199,1)" fg:x="1774" fg:w="171"/><text x="2.3389%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.20%)</title><rect x="2.0459%" y="117" width="0.2030%" height="15" fill="rgb(221,39,4)" fg:x="1774" fg:w="176"/><text x="2.3389%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.43%)</title><rect x="1.9479%" y="133" width="0.4290%" height="15" fill="rgb(226,20,52)" fg:x="1689" fg:w="372"/><text x="2.2409%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.68%)</title><rect x="1.8603%" y="149" width="0.6793%" height="15" fill="rgb(249,22,38)" fg:x="1613" fg:w="589"/><text x="2.1532%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.09%)</title><rect x="2.5396%" y="149" width="0.0946%" height="15" fill="rgb(253,78,19)" fg:x="2202" fg:w="82"/><text x="2.8325%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="2.6341%" y="149" width="0.0634%" height="15" fill="rgb(247,229,49)" fg:x="2284" fg:w="55"/><text x="2.9271%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.07%)</title><rect x="2.6976%" y="149" width="0.0727%" height="15" fill="rgb(209,71,34)" fg:x="2339" fg:w="63"/><text x="2.9905%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.07%)</title><rect x="2.7702%" y="149" width="0.0750%" height="15" fill="rgb(207,108,17)" fg:x="2402" fg:w="65"/><text x="3.0632%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.47%)</title><rect x="2.8452%" y="133" width="0.4682%" height="15" fill="rgb(216,72,44)" fg:x="2467" fg:w="406"/><text x="3.1382%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.3134%" y="133" width="0.0185%" height="15" fill="rgb(239,84,20)" fg:x="2873" fg:w="16"/><text x="3.6064%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.3319%" y="117" width="0.0877%" height="15" fill="rgb(228,164,4)" fg:x="2889" fg:w="76"/><text x="3.6248%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.4195%" y="85" width="0.0692%" height="15" fill="rgb(243,59,49)" fg:x="2965" fg:w="60"/><text x="3.7125%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.4195%" y="101" width="0.0980%" height="15" fill="rgb(219,190,12)" fg:x="2965" fg:w="85"/><text x="3.7125%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.5176%" y="53" width="0.0104%" height="15" fill="rgb(234,40,39)" fg:x="3050" fg:w="9"/><text x="3.8105%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="3.5279%" y="37" width="0.0346%" height="15" fill="rgb(249,91,34)" fg:x="3059" fg:w="30"/><text x="3.8209%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.06%)</title><rect x="3.5279%" y="53" width="0.0634%" height="15" fill="rgb(253,122,34)" fg:x="3059" fg:w="55"/><text x="3.8209%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.14%)</title><rect x="3.5176%" y="69" width="0.1361%" height="15" fill="rgb(248,80,15)" fg:x="3050" fg:w="118"/><text x="3.8105%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.20%)</title><rect x="3.5176%" y="85" width="0.1972%" height="15" fill="rgb(214,36,3)" fg:x="3050" fg:w="171"/><text x="3.8105%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.20%)</title><rect x="3.5176%" y="101" width="0.2030%" height="15" fill="rgb(212,81,52)" fg:x="3050" fg:w="176"/><text x="3.8105%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.43%)</title><rect x="3.4195%" y="117" width="0.4290%" height="15" fill="rgb(208,217,27)" fg:x="2965" fg:w="372"/><text x="3.7125%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.68%)</title><rect x="3.3319%" y="133" width="0.6793%" height="15" fill="rgb(248,214,5)" fg:x="2889" fg:w="589"/><text x="3.6248%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.09%)</title><rect x="4.0112%" y="133" width="0.0946%" height="15" fill="rgb(236,194,46)" fg:x="3478" fg:w="82"/><text x="4.3041%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="4.1057%" y="133" width="0.0634%" height="15" fill="rgb(235,173,31)" fg:x="3560" fg:w="55"/><text x="4.3987%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="4.1692%" y="117" width="0.0796%" height="15" fill="rgb(215,86,50)" fg:x="3615" fg:w="69"/><text x="4.4621%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.10%)</title><rect x="4.2487%" y="117" width="0.1049%" height="15" fill="rgb(238,49,35)" fg:x="3684" fg:w="91"/><text x="4.5417%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.07%)</title><rect x="4.3537%" y="117" width="0.0727%" height="15" fill="rgb(235,225,21)" fg:x="3775" fg:w="63"/><text x="4.6467%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.33%)</title><rect x="4.1692%" y="133" width="0.3252%" height="15" fill="rgb(253,37,8)" fg:x="3615" fg:w="282"/><text x="4.4621%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="4.4944%" y="133" width="0.0877%" height="15" fill="rgb(215,159,25)" fg:x="3897" fg:w="76"/><text x="4.7874%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 1.97%)</title><rect x="2.8452%" y="149" width="1.9710%" height="15" fill="rgb(243,188,48)" fg:x="2467" fg:w="1709"/><text x="3.1382%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.07%)</title><rect x="4.8162%" y="149" width="0.0727%" height="15" fill="rgb(233,75,16)" fg:x="4176" fg:w="63"/><text x="5.1091%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="4.8888%" y="149" width="0.0150%" height="15" fill="rgb(205,203,26)" fg:x="4239" fg:w="13"/><text x="5.1818%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="4.9038%" y="149" width="0.0150%" height="15" fill="rgb(216,63,1)" fg:x="4252" fg:w="13"/><text x="5.1968%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="4.9269%" y="149" width="0.0173%" height="15" fill="rgb(243,96,26)" fg:x="4272" fg:w="15"/><text x="5.2198%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="4.9442%" y="133" width="0.0877%" height="15" fill="rgb(215,226,12)" fg:x="4287" fg:w="76"/><text x="5.2371%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.18%)</title><rect x="4.9442%" y="149" width="0.1834%" height="15" fill="rgb(208,119,46)" fg:x="4287" fg:w="159"/><text x="5.2371%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.1276%" y="117" width="0.0946%" height="15" fill="rgb(211,98,29)" fg:x="4446" fg:w="82"/><text x="5.4205%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.13%)</title><rect x="5.1276%" y="133" width="0.1338%" height="15" fill="rgb(240,51,27)" fg:x="4446" fg:w="116"/><text x="5.4205%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.21%)</title><rect x="5.1276%" y="149" width="0.2122%" height="15" fill="rgb(212,229,48)" fg:x="4446" fg:w="184"/><text x="5.4205%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.08%)</title><rect x="5.3398%" y="149" width="0.0819%" height="15" fill="rgb(212,147,35)" fg:x="4630" fg:w="71"/><text x="5.6327%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.06%)</title><rect x="5.4216%" y="149" width="0.0646%" height="15" fill="rgb(226,173,33)" fg:x="4701" fg:w="56"/><text x="5.7146%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.4862%" y="149" width="0.0946%" height="15" fill="rgb(242,92,18)" fg:x="4757" fg:w="82"/><text x="5.7792%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.5808%" y="149" width="0.0946%" height="15" fill="rgb(229,146,19)" fg:x="4839" fg:w="82"/><text x="5.8738%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="5.6777%" y="149" width="0.0934%" height="15" fill="rgb(211,208,37)" fg:x="4923" fg:w="81"/><text x="5.9706%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.46%)</title><rect x="5.7711%" y="149" width="0.4602%" height="15" fill="rgb(225,149,31)" fg:x="5004" fg:w="399"/><text x="6.0641%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.46%)</title><rect x="6.2313%" y="149" width="0.4602%" height="15" fill="rgb(213,61,8)" fg:x="5403" fg:w="399"/><text x="6.5242%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,445 instructions, 7.43%)</title><rect x="0.3275%" y="165" width="7.4330%" height="15" fill="rgb(222,57,13)" fg:x="284" fg:w="6445"/><text x="0.6205%" y="175.50">candid::..</text></g><g><title>memcpy (354 instructions, 0.41%)</title><rect x="7.7605%" y="165" width="0.4083%" height="15" fill="rgb(215,152,53)" fg:x="6729" fg:w="354"/><text x="8.0535%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.04%)</title><rect x="8.1688%" y="165" width="0.0450%" height="15" fill="rgb(228,157,31)" fg:x="7083" fg:w="39"/><text x="8.4618%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="8.2138%" y="165" width="0.0946%" height="15" fill="rgb(230,143,11)" fg:x="7122" fg:w="82"/><text x="8.5067%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="8.3141%" y="133" width="0.0611%" height="15" fill="rgb(244,194,14)" fg:x="7209" fg:w="53"/><text x="8.6071%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.10%)</title><rect x="8.3752%" y="133" width="0.1015%" height="15" fill="rgb(246,101,16)" fg:x="7262" fg:w="88"/><text x="8.6682%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.19%)</title><rect x="8.4767%" y="133" width="0.1868%" height="15" fill="rgb(253,222,2)" fg:x="7350" fg:w="162"/><text x="8.7697%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.62%)</title><rect x="8.3141%" y="149" width="0.6228%" height="15" fill="rgb(237,219,7)" fg:x="7209" fg:w="540"/><text x="8.6071%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.86%)</title><rect x="8.3083%" y="165" width="0.8638%" height="15" fill="rgb(252,80,8)" fg:x="7204" fg:w="749"/><text x="8.6013%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="9.1722%" y="165" width="0.0946%" height="15" fill="rgb(242,164,24)" fg:x="7953" fg:w="82"/><text x="9.4651%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="9.2725%" y="133" width="0.0611%" height="15" fill="rgb(242,72,42)" fg:x="8040" fg:w="53"/><text x="9.5655%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.10%)</title><rect x="9.3336%" y="133" width="0.1015%" height="15" fill="rgb(206,221,42)" fg:x="8093" fg:w="88"/><text x="9.6266%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.19%)</title><rect x="9.4351%" y="133" width="0.1868%" height="15" fill="rgb(253,55,34)" fg:x="8181" fg:w="162"/><text x="9.7281%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.62%)</title><rect x="9.2725%" y="149" width="0.6228%" height="15" fill="rgb(249,80,10)" fg:x="8040" fg:w="540"/><text x="9.5655%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="9.8953%" y="149" width="0.0784%" height="15" fill="rgb(226,175,28)" fg:x="8580" fg:w="68"/><text x="10.1882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="9.9737%" y="133" width="0.0934%" height="15" fill="rgb(223,3,38)" fg:x="8648" fg:w="81"/><text x="10.2667%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.12%)</title><rect x="9.9737%" y="149" width="0.1246%" height="15" fill="rgb(244,194,22)" fg:x="8648" fg:w="108"/><text x="10.2667%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.03%)</title><rect x="9.2667%" y="165" width="1.0264%" height="15" fill="rgb(208,10,27)" fg:x="8035" fg:w="890"/><text x="9.5597%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="10.2932%" y="117" width="0.0611%" height="15" fill="rgb(228,120,33)" fg:x="8925" fg:w="53"/><text x="10.5861%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.09%)</title><rect x="10.2932%" y="133" width="0.0900%" height="15" fill="rgb(226,128,5)" fg:x="8925" fg:w="78"/><text x="10.5861%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.34%)</title><rect x="10.2932%" y="149" width="0.3379%" height="15" fill="rgb(228,227,24)" fg:x="8925" fg:w="293"/><text x="10.5861%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1622 (15 instructions, 0.02%)</title><rect x="10.6311%" y="149" width="0.0173%" height="15" fill="rgb(251,82,31)" fg:x="9218" fg:w="15"/><text x="10.9241%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="10.6484%" y="149" width="0.0127%" height="15" fill="rgb(234,154,1)" fg:x="9233" fg:w="11"/><text x="10.9414%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.55%)</title><rect x="10.2932%" y="165" width="0.5513%" height="15" fill="rgb(221,88,6)" fg:x="8925" fg:w="478"/><text x="10.5861%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.05%)</title><rect x="10.8444%" y="165" width="0.0542%" height="15" fill="rgb(230,88,37)" fg:x="9403" fg:w="47"/><text x="11.1374%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="10.8986%" y="149" width="0.1419%" height="15" fill="rgb(250,165,24)" fg:x="9450" fg:w="123"/><text x="11.1916%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="11.0716%" y="149" width="0.1419%" height="15" fill="rgb(209,176,13)" fg:x="9600" fg:w="123"/><text x="11.3646%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.35%)</title><rect x="10.8986%" y="165" width="0.3460%" height="15" fill="rgb(218,120,24)" fg:x="9450" fg:w="300"/><text x="11.1916%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.2446%" y="149" width="0.0323%" height="15" fill="rgb(227,170,32)" fg:x="9750" fg:w="28"/><text x="11.5376%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="11.2769%" y="149" width="0.0185%" height="15" fill="rgb(231,148,21)" fg:x="9778" fg:w="16"/><text x="11.5699%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="11.2954%" y="149" width="0.0185%" height="15" fill="rgb(228,140,43)" fg:x="9794" fg:w="16"/><text x="11.5884%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (137 instructions, 0.16%)</title><rect x="11.2446%" y="165" width="0.1580%" height="15" fill="rgb(216,8,34)" fg:x="9750" fg:w="137"/><text x="11.5376%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4026%" y="165" width="0.0127%" height="15" fill="rgb(233,40,53)" fg:x="9887" fg:w="11"/><text x="11.6956%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4153%" y="165" width="0.0127%" height="15" fill="rgb(252,124,14)" fg:x="9898" fg:w="11"/><text x="11.7083%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4280%" y="165" width="0.0127%" height="15" fill="rgb(249,169,52)" fg:x="9909" fg:w="11"/><text x="11.7210%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.47%)</title><rect x="11.4407%" y="165" width="0.4729%" height="15" fill="rgb(233,193,23)" fg:x="9920" fg:w="410"/><text x="11.7337%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="11.9135%" y="133" width="0.0138%" height="15" fill="rgb(219,86,0)" fg:x="10330" fg:w="12"/><text x="12.2065%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="11.9274%" y="133" width="0.0934%" height="15" fill="rgb(242,62,46)" fg:x="10342" fg:w="81"/><text x="12.2204%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.19%)</title><rect x="12.0208%" y="117" width="0.1938%" height="15" fill="rgb(220,122,20)" fg:x="10423" fg:w="168"/><text x="12.3138%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.22%)</title><rect x="12.0208%" y="133" width="0.2249%" height="15" fill="rgb(252,85,12)" fg:x="10423" fg:w="195"/><text x="12.3138%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.2457%" y="133" width="0.0127%" height="15" fill="rgb(211,8,15)" fg:x="10618" fg:w="11"/><text x="12.5387%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (339 instructions, 0.39%)</title><rect x="11.9135%" y="149" width="0.3910%" height="15" fill="rgb(252,34,44)" fg:x="10330" fg:w="339"/><text x="12.2065%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (377 instructions, 0.43%)</title><rect x="11.9135%" y="165" width="0.4348%" height="15" fill="rgb(223,189,8)" fg:x="10330" fg:w="377"/><text x="12.2065%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="12.3483%" y="165" width="0.1419%" height="15" fill="rgb(245,211,26)" fg:x="10707" fg:w="123"/><text x="12.6413%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,058 instructions, 12.75%)</title><rect x="0.1914%" y="181" width="12.7531%" height="15" fill="rgb(216,180,48)" fg:x="166" fg:w="11058"/><text x="0.4844%" y="191.50">ic_cdk::api::cal..</text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="12.9446%" y="165" width="0.2237%" height="15" fill="rgb(206,174,41)" fg:x="11224" fg:w="194"/><text x="13.2376%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="13.1683%" y="165" width="0.2237%" height="15" fill="rgb(211,119,4)" fg:x="11418" fg:w="194"/><text x="13.4613%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="14.6169%" y="165" width="0.2583%" height="15" fill="rgb(237,125,3)" fg:x="12674" fg:w="224"/><text x="14.9098%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="14.8752%" y="165" width="0.2583%" height="15" fill="rgb(212,177,13)" fg:x="12898" fg:w="224"/><text x="15.1682%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="16.0458%" y="165" width="0.1545%" height="15" fill="rgb(209,121,45)" fg:x="13913" fg:w="134"/><text x="16.3388%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="16.2004%" y="165" width="0.1545%" height="15" fill="rgb(246,18,3)" fg:x="14047" fg:w="134"/><text x="16.4933%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="17.4759%" y="165" width="0.0946%" height="15" fill="rgb(221,74,13)" fg:x="15153" fg:w="82"/><text x="17.7689%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="17.5705%" y="165" width="0.2653%" height="15" fill="rgb(222,206,44)" fg:x="15235" fg:w="230"/><text x="17.8634%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="17.8357%" y="165" width="0.2653%" height="15" fill="rgb(250,92,53)" fg:x="15465" fg:w="230"/><text x="18.1287%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="18.1010%" y="165" width="0.1891%" height="15" fill="rgb(210,100,44)" fg:x="15695" fg:w="164"/><text x="18.3940%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="18.2901%" y="165" width="0.1891%" height="15" fill="rgb(239,162,23)" fg:x="15859" fg:w="164"/><text x="18.5831%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.36%)</title><rect x="18.4793%" y="165" width="0.3621%" height="15" fill="rgb(231,10,45)" fg:x="16023" fg:w="314"/><text x="18.7722%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.36%)</title><rect x="18.8414%" y="165" width="0.3621%" height="15" fill="rgb(216,0,44)" fg:x="16337" fg:w="314"/><text x="19.1344%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="19.2035%" y="165" width="0.2237%" height="15" fill="rgb(210,29,19)" fg:x="16651" fg:w="194"/><text x="19.4965%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="20.5990%" y="165" width="0.2583%" height="15" fill="rgb(211,59,8)" fg:x="17861" fg:w="224"/><text x="20.8920%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="20.8574%" y="165" width="0.2583%" height="15" fill="rgb(216,201,34)" fg:x="18085" fg:w="224"/><text x="21.1503%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="21.8550%" y="165" width="0.1545%" height="15" fill="rgb(224,142,43)" fg:x="18950" fg:w="134"/><text x="22.1479%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="22.0095%" y="165" width="0.1545%" height="15" fill="rgb(218,138,44)" fg:x="19084" fg:w="134"/><text x="22.3025%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="23.2147%" y="165" width="0.1545%" height="15" fill="rgb(220,20,3)" fg:x="20129" fg:w="134"/><text x="23.5077%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="23.3692%" y="165" width="0.1545%" height="15" fill="rgb(244,225,50)" fg:x="20263" fg:w="134"/><text x="23.6622%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="24.4706%" y="165" width="0.0946%" height="15" fill="rgb(228,86,33)" fg:x="21218" fg:w="82"/><text x="24.7636%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="24.5652%" y="165" width="0.2653%" height="15" fill="rgb(235,152,7)" fg:x="21300" fg:w="230"/><text x="24.8582%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="24.8305%" y="165" width="0.2653%" height="15" fill="rgb(254,56,38)" fg:x="21530" fg:w="230"/><text x="25.1234%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="25.0957%" y="165" width="0.1545%" height="15" fill="rgb(253,145,19)" fg:x="21760" fg:w="134"/><text x="25.3887%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="25.2503%" y="165" width="0.1545%" height="15" fill="rgb(221,130,45)" fg:x="21894" fg:w="134"/><text x="25.5432%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.4048%" y="165" width="0.2583%" height="15" fill="rgb(216,144,48)" fg:x="22028" fg:w="224"/><text x="25.6978%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.6631%" y="165" width="0.2583%" height="15" fill="rgb(240,225,3)" fg:x="22252" fg:w="224"/><text x="25.9561%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.17%)</title><rect x="25.9215%" y="165" width="0.1718%" height="15" fill="rgb(216,148,22)" fg:x="22476" fg:w="149"/><text x="26.2145%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="27.3274%" y="165" width="0.3275%" height="15" fill="rgb(242,118,40)" fg:x="23695" fg:w="284"/><text x="27.6203%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="27.6549%" y="165" width="0.3275%" height="15" fill="rgb(226,154,10)" fg:x="23979" fg:w="284"/><text x="27.9479%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="28.9996%" y="165" width="0.2583%" height="15" fill="rgb(222,83,17)" fg:x="25145" fg:w="224"/><text x="29.2926%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="29.2580%" y="165" width="0.2583%" height="15" fill="rgb(253,132,9)" fg:x="25369" fg:w="224"/><text x="29.5509%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (15,522 instructions, 17.90%)</title><rect x="12.9446%" y="181" width="17.9015%" height="15" fill="rgb(242,134,23)" fg:x="11224" fg:w="15522"/><text x="13.2376%" y="191.50">alloc::collections::btr..</text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="31.7572%" y="165" width="0.2237%" height="15" fill="rgb(244,40,43)" fg:x="27536" fg:w="194"/><text x="32.0501%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="31.9809%" y="165" width="0.2237%" height="15" fill="rgb(216,188,24)" fg:x="27730" fg:w="194"/><text x="32.2739%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.3602%" y="165" width="0.2583%" height="15" fill="rgb(234,116,1)" fg:x="28926" fg:w="224"/><text x="33.6532%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.6186%" y="165" width="0.2583%" height="15" fill="rgb(252,125,12)" fg:x="29150" fg:w="224"/><text x="33.9116%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.6854%" y="165" width="0.2583%" height="15" fill="rgb(253,229,23)" fg:x="30075" fg:w="224"/><text x="34.9783%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.9437%" y="165" width="0.2583%" height="15" fill="rgb(254,31,12)" fg:x="30299" fg:w="224"/><text x="35.2367%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,628 instructions, 5.34%)</title><rect x="30.8461%" y="181" width="5.3375%" height="15" fill="rgb(248,110,20)" fg:x="26746" fg:w="4628"/><text x="31.1390%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="37.4072%" y="165" width="0.0946%" height="15" fill="rgb(251,168,54)" fg:x="32435" fg:w="82"/><text x="37.7001%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="37.5017%" y="165" width="0.2653%" height="15" fill="rgb(246,94,33)" fg:x="32517" fg:w="230"/><text x="37.7947%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="37.7670%" y="165" width="0.2653%" height="15" fill="rgb(231,135,22)" fg:x="32747" fg:w="230"/><text x="38.0600%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="38.0322%" y="165" width="0.1891%" height="15" fill="rgb(240,106,49)" fg:x="32977" fg:w="164"/><text x="38.3252%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="38.2214%" y="165" width="0.1891%" height="15" fill="rgb(222,8,18)" fg:x="33141" fg:w="164"/><text x="38.5144%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.24%)</title><rect x="38.4105%" y="165" width="0.2387%" height="15" fill="rgb(240,197,4)" fg:x="33305" fg:w="207"/><text x="38.7035%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="39.8937%" y="165" width="0.1891%" height="15" fill="rgb(218,46,27)" fg:x="34591" fg:w="164"/><text x="40.1866%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="40.0828%" y="165" width="0.1891%" height="15" fill="rgb(212,187,40)" fg:x="34755" fg:w="164"/><text x="40.3758%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="41.7032%" y="165" width="0.1661%" height="15" fill="rgb(218,11,7)" fg:x="36160" fg:w="144"/><text x="41.9962%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="41.8693%" y="165" width="0.1661%" height="15" fill="rgb(223,80,20)" fg:x="36304" fg:w="144"/><text x="42.1622%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="43.0514%" y="165" width="0.0946%" height="15" fill="rgb(237,41,24)" fg:x="37329" fg:w="82"/><text x="43.3444%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="43.1460%" y="165" width="0.2653%" height="15" fill="rgb(211,151,46)" fg:x="37411" fg:w="230"/><text x="43.4389%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="43.4112%" y="165" width="0.2653%" height="15" fill="rgb(228,46,26)" fg:x="37641" fg:w="230"/><text x="43.7042%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="45.1642%" y="165" width="0.3275%" height="15" fill="rgb(230,198,28)" fg:x="39161" fg:w="284"/><text x="45.4572%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="45.4918%" y="165" width="0.3275%" height="15" fill="rgb(242,25,20)" fg:x="39445" fg:w="284"/><text x="45.7847%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="46.7316%" y="165" width="0.1545%" height="15" fill="rgb(250,46,35)" fg:x="40520" fg:w="134"/><text x="47.0245%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="46.8861%" y="165" width="0.1545%" height="15" fill="rgb(240,80,1)" fg:x="40654" fg:w="134"/><text x="47.1791%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="48.0578%" y="165" width="0.1545%" height="15" fill="rgb(243,49,7)" fg:x="41670" fg:w="134"/><text x="48.3508%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="48.2124%" y="165" width="0.1545%" height="15" fill="rgb(237,193,35)" fg:x="41804" fg:w="134"/><text x="48.5054%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="49.7647%" y="165" width="0.1661%" height="15" fill="rgb(219,95,25)" fg:x="43150" fg:w="144"/><text x="50.0577%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="49.9308%" y="165" width="0.1661%" height="15" fill="rgb(211,41,50)" fg:x="43294" fg:w="144"/><text x="50.2238%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="51.0783%" y="165" width="0.2237%" height="15" fill="rgb(230,179,13)" fg:x="44289" fg:w="194"/><text x="51.3713%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="51.3021%" y="165" width="0.2237%" height="15" fill="rgb(244,148,5)" fg:x="44483" fg:w="194"/><text x="51.5950%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="52.4046%" y="165" width="0.3275%" height="15" fill="rgb(213,173,31)" fg:x="45439" fg:w="284"/><text x="52.6976%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="52.7322%" y="165" width="0.3275%" height="15" fill="rgb(245,52,33)" fg:x="45723" fg:w="284"/><text x="53.0251%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="54.1461%" y="165" width="0.2929%" height="15" fill="rgb(244,44,33)" fg:x="46949" fg:w="254"/><text x="54.4391%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="54.4390%" y="165" width="0.2929%" height="15" fill="rgb(231,59,39)" fg:x="47203" fg:w="254"/><text x="54.7320%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.36%)</title><rect x="56.0952%" y="165" width="0.3621%" height="15" fill="rgb(250,210,3)" fg:x="48639" fg:w="314"/><text x="56.3881%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.36%)</title><rect x="56.4573%" y="165" width="0.3621%" height="15" fill="rgb(247,136,24)" fg:x="48953" fg:w="314"/><text x="56.7503%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="57.9404%" y="165" width="0.3275%" height="15" fill="rgb(244,74,22)" fg:x="50239" fg:w="284"/><text x="58.2334%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="58.2680%" y="165" width="0.3275%" height="15" fill="rgb(220,228,42)" fg:x="50523" fg:w="284"/><text x="58.5609%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (20,465 instructions, 23.60%)</title><rect x="36.1835%" y="181" width="23.6022%" height="15" fill="rgb(226,82,3)" fg:x="31374" fg:w="20465"/><text x="36.4765%" y="191.50">alloc::collections::btree::map::..</text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="60.7660%" y="165" width="0.1661%" height="15" fill="rgb(241,8,0)" fg:x="52689" fg:w="144"/><text x="61.0590%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="60.9321%" y="165" width="0.1661%" height="15" fill="rgb(230,197,7)" fg:x="52833" fg:w="144"/><text x="61.2251%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="62.6355%" y="165" width="0.3275%" height="15" fill="rgb(218,79,47)" fg:x="54310" fg:w="284"/><text x="62.9285%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.33%)</title><rect x="62.9630%" y="165" width="0.3275%" height="15" fill="rgb(252,183,30)" fg:x="54594" fg:w="284"/><text x="63.2560%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="64.2374%" y="165" width="0.0946%" height="15" fill="rgb(217,200,29)" fg:x="55699" fg:w="82"/><text x="64.5304%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.20%)</title><rect x="64.3320%" y="165" width="0.1961%" height="15" fill="rgb(253,204,35)" fg:x="55781" fg:w="170"/><text x="64.6250%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.20%)</title><rect x="64.5281%" y="165" width="0.1961%" height="15" fill="rgb(212,195,34)" fg:x="55951" fg:w="170"/><text x="64.8210%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="64.7241%" y="165" width="0.1545%" height="15" fill="rgb(220,33,17)" fg:x="56121" fg:w="134"/><text x="65.0171%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="64.8787%" y="165" width="0.1545%" height="15" fill="rgb(225,78,54)" fg:x="56255" fg:w="134"/><text x="65.1716%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="65.0332%" y="165" width="0.1545%" height="15" fill="rgb(227,184,50)" fg:x="56389" fg:w="134"/><text x="65.3262%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="65.1878%" y="165" width="0.1545%" height="15" fill="rgb(229,124,15)" fg:x="56523" fg:w="134"/><text x="65.4807%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.17%)</title><rect x="65.3423%" y="165" width="0.1695%" height="15" fill="rgb(224,54,4)" fg:x="56657" fg:w="147"/><text x="65.6353%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="67.0480%" y="165" width="0.0946%" height="15" fill="rgb(226,147,44)" fg:x="58136" fg:w="82"/><text x="67.3410%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="67.1426%" y="165" width="0.2653%" height="15" fill="rgb(213,109,23)" fg:x="58218" fg:w="230"/><text x="67.4356%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="67.4079%" y="165" width="0.2653%" height="15" fill="rgb(210,224,10)" fg:x="58448" fg:w="230"/><text x="67.7008%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="67.6731%" y="165" width="0.2237%" height="15" fill="rgb(218,157,14)" fg:x="58678" fg:w="194"/><text x="67.9661%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="67.8968%" y="165" width="0.2237%" height="15" fill="rgb(236,140,42)" fg:x="58872" fg:w="194"/><text x="68.1898%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,308 instructions, 9.58%)</title><rect x="59.7857%" y="181" width="9.5816%" height="15" fill="rgb(244,199,50)" fg:x="51839" fg:w="8308"/><text x="60.0787%" y="191.50">alloc::coll..</text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="70.3476%" y="165" width="0.1891%" height="15" fill="rgb(239,132,28)" fg:x="60997" fg:w="164"/><text x="70.6406%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="70.5367%" y="165" width="0.1891%" height="15" fill="rgb(232,34,39)" fg:x="61161" fg:w="164"/><text x="70.8297%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="71.6739%" y="165" width="0.2237%" height="15" fill="rgb(236,178,27)" fg:x="62147" fg:w="194"/><text x="71.9669%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="71.8976%" y="165" width="0.2237%" height="15" fill="rgb(248,163,45)" fg:x="62341" fg:w="194"/><text x="72.1906%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="73.1732%" y="165" width="0.2583%" height="15" fill="rgb(215,23,46)" fg:x="63447" fg:w="224"/><text x="73.4661%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="73.4315%" y="165" width="0.2583%" height="15" fill="rgb(241,52,12)" fg:x="63671" fg:w="224"/><text x="73.7245%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="74.8097%" y="165" width="0.2237%" height="15" fill="rgb(235,90,22)" fg:x="64866" fg:w="194"/><text x="75.1027%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="75.0334%" y="165" width="0.2237%" height="15" fill="rgb(235,23,29)" fg:x="65060" fg:w="194"/><text x="75.3264%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="76.2386%" y="165" width="0.1891%" height="15" fill="rgb(214,119,3)" fg:x="66105" fg:w="164"/><text x="76.5316%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="76.4278%" y="165" width="0.1891%" height="15" fill="rgb(231,61,41)" fg:x="66269" fg:w="164"/><text x="76.7207%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="77.5292%" y="165" width="0.2929%" height="15" fill="rgb(217,132,54)" fg:x="67224" fg:w="254"/><text x="77.8221%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="77.8221%" y="165" width="0.2929%" height="15" fill="rgb(223,44,37)" fg:x="67478" fg:w="254"/><text x="78.1151%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="79.2349%" y="165" width="0.0946%" height="15" fill="rgb(207,194,19)" fg:x="68703" fg:w="82"/><text x="79.5279%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.23%)</title><rect x="79.3295%" y="165" width="0.2307%" height="15" fill="rgb(237,83,14)" fg:x="68785" fg:w="200"/><text x="79.6224%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.23%)</title><rect x="79.5601%" y="165" width="0.2307%" height="15" fill="rgb(208,103,51)" fg:x="68985" fg:w="200"/><text x="79.8531%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="79.7908%" y="165" width="0.2583%" height="15" fill="rgb(223,45,19)" fg:x="69185" fg:w="224"/><text x="80.0838%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="80.0491%" y="165" width="0.2583%" height="15" fill="rgb(236,25,43)" fg:x="69409" fg:w="224"/><text x="80.3421%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="80.3075%" y="165" width="0.1545%" height="15" fill="rgb(236,36,31)" fg:x="69633" fg:w="134"/><text x="80.6004%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.15%)</title><rect x="80.4620%" y="165" width="0.1545%" height="15" fill="rgb(246,7,2)" fg:x="69767" fg:w="134"/><text x="80.7550%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.17%)</title><rect x="80.6166%" y="165" width="0.1695%" height="15" fill="rgb(243,12,30)" fg:x="69901" fg:w="147"/><text x="80.9095%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="82.4584%" y="165" width="0.2583%" height="15" fill="rgb(206,126,42)" fg:x="71498" fg:w="224"/><text x="82.7513%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="82.7167%" y="165" width="0.2583%" height="15" fill="rgb(232,16,12)" fg:x="71722" fg:w="224"/><text x="83.0097%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="84.0268%" y="165" width="0.2583%" height="15" fill="rgb(228,188,10)" fg:x="72858" fg:w="224"/><text x="84.3198%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="84.2852%" y="165" width="0.2583%" height="15" fill="rgb(228,71,10)" fg:x="73082" fg:w="224"/><text x="84.5782%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="85.3520%" y="165" width="0.0946%" height="15" fill="rgb(215,82,0)" fg:x="74007" fg:w="82"/><text x="85.6450%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="85.4466%" y="165" width="0.2653%" height="15" fill="rgb(210,141,7)" fg:x="74089" fg:w="230"/><text x="85.7395%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="85.7118%" y="165" width="0.2653%" height="15" fill="rgb(207,130,51)" fg:x="74319" fg:w="230"/><text x="86.0048%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="85.9771%" y="165" width="0.1891%" height="15" fill="rgb(214,115,41)" fg:x="74549" fg:w="164"/><text x="86.2700%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="86.1662%" y="165" width="0.1891%" height="15" fill="rgb(253,119,16)" fg:x="74713" fg:w="164"/><text x="86.4592%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="86.3554%" y="165" width="0.2929%" height="15" fill="rgb(216,38,52)" fg:x="74877" fg:w="254"/><text x="86.6483%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.29%)</title><rect x="86.6483%" y="165" width="0.2929%" height="15" fill="rgb(213,67,20)" fg:x="75131" fg:w="254"/><text x="86.9413%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="86.9412%" y="165" width="0.1891%" height="15" fill="rgb(206,219,25)" fg:x="75385" fg:w="164"/><text x="87.2342%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="88.7346%" y="165" width="0.2237%" height="15" fill="rgb(254,155,20)" fg:x="76940" fg:w="194"/><text x="89.0276%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.22%)</title><rect x="88.9583%" y="165" width="0.2237%" height="15" fill="rgb(249,18,52)" fg:x="77134" fg:w="194"/><text x="89.2513%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="90.1635%" y="165" width="0.1891%" height="15" fill="rgb(248,229,42)" fg:x="78179" fg:w="164"/><text x="90.4565%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.19%)</title><rect x="90.3527%" y="165" width="0.1891%" height="15" fill="rgb(230,183,12)" fg:x="78343" fg:w="164"/><text x="90.6456%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="91.4887%" y="165" width="0.2583%" height="15" fill="rgb(213,209,25)" fg:x="79328" fg:w="224"/><text x="91.7816%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="91.7470%" y="165" width="0.2583%" height="15" fill="rgb(227,49,53)" fg:x="79552" fg:w="224"/><text x="92.0400%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="93.2648%" y="165" width="0.2583%" height="15" fill="rgb(252,82,6)" fg:x="80868" fg:w="224"/><text x="93.5577%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="93.5231%" y="165" width="0.2583%" height="15" fill="rgb(211,25,20)" fg:x="81092" fg:w="224"/><text x="93.8161%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="94.5899%" y="165" width="0.2583%" height="15" fill="rgb(235,149,22)" fg:x="82017" fg:w="224"/><text x="94.8829%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="94.8482%" y="165" width="0.2583%" height="15" fill="rgb(219,90,10)" fg:x="82241" fg:w="224"/><text x="95.1412%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,959 instructions, 26.48%)</title><rect x="69.3673%" y="181" width="26.4785%" height="15" fill="rgb(243,221,35)" fg:x="60147" fg:w="22959"/><text x="69.6603%" y="191.50">alloc::collections::btree::map::BTre..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,000 instructions, 1.15%)</title><rect x="95.8458%" y="181" width="1.1533%" height="15" fill="rgb(240,221,33)" fg:x="83106" fg:w="1000"/><text x="96.1388%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.15%)</title><rect x="97.0049%" y="133" width="0.1453%" height="15" fill="rgb(225,183,8)" fg:x="84111" fg:w="126"/><text x="97.2979%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.18%)</title><rect x="97.0049%" y="149" width="0.1765%" height="15" fill="rgb(250,136,13)" fg:x="84111" fg:w="153"/><text x="97.2979%" y="159.50"></text></g><g><title>memset (136 instructions, 0.16%)</title><rect x="97.1813%" y="149" width="0.1568%" height="15" fill="rgb(217,56,53)" fg:x="84264" fg:w="136"/><text x="97.4743%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (454 instructions, 0.52%)</title><rect x="96.9991%" y="165" width="0.5236%" height="15" fill="rgb(246,73,22)" fg:x="84106" fg:w="454"/><text x="97.2921%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="97.5227%" y="149" width="0.0369%" height="15" fill="rgb(247,11,19)" fg:x="84560" fg:w="32"/><text x="97.8157%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.14%)</title><rect x="97.5596%" y="101" width="0.1361%" height="15" fill="rgb(216,175,13)" fg:x="84592" fg:w="118"/><text x="97.8526%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.18%)</title><rect x="97.5596%" y="117" width="0.1753%" height="15" fill="rgb(244,49,31)" fg:x="84592" fg:w="152"/><text x="97.8526%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (217 instructions, 0.25%)</title><rect x="97.5596%" y="133" width="0.2503%" height="15" fill="rgb(214,62,30)" fg:x="84592" fg:w="217"/><text x="97.8526%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="97.8099%" y="133" width="0.0127%" height="15" fill="rgb(248,132,53)" fg:x="84809" fg:w="11"/><text x="98.1029%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="97.8226%" y="133" width="0.0127%" height="15" fill="rgb(219,58,41)" fg:x="84820" fg:w="11"/><text x="98.1155%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (401 instructions, 0.46%)</title><rect x="97.5596%" y="149" width="0.4625%" height="15" fill="rgb(245,227,22)" fg:x="84592" fg:w="401"/><text x="97.8526%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.0221%" y="149" width="0.0346%" height="15" fill="rgb(234,70,22)" fg:x="84993" fg:w="30"/><text x="98.3151%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (536 instructions, 0.62%)</title><rect x="97.5227%" y="165" width="0.6182%" height="15" fill="rgb(206,79,9)" fg:x="84560" fg:w="536"/><text x="97.8157%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="98.1467%" y="165" width="0.0634%" height="15" fill="rgb(243,134,3)" fg:x="85101" fg:w="55"/><text x="98.4396%" y="175.50"></text></g><g><title>candid::utils::write_args (1,114 instructions, 1.28%)</title><rect x="96.9991%" y="181" width="1.2848%" height="15" fill="rgb(239,8,49)" fg:x="84106" fg:w="1114"/><text x="97.2921%" y="191.50"></text></g><g><title>btreemap::batch_put_6_::{{closure}} (86,225 instructions, 99.44%)</title><rect x="0.1914%" y="197" width="99.4430%" height="15" fill="rgb(241,27,19)" fg:x="166" fg:w="86225"/><text x="0.4844%" y="207.50">btreemap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.6344%" y="197" width="0.0138%" height="15" fill="rgb(254,181,4)" fg:x="86391" fg:w="12"/><text x="99.9274%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="99.6482%" y="197" width="0.0934%" height="15" fill="rgb(249,153,52)" fg:x="86403" fg:w="81"/><text x="99.9412%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.15%)</title><rect x="99.7417%" y="197" width="0.1453%" height="15" fill="rgb(213,140,13)" fg:x="86484" fg:w="126"/><text x="100.0346%" y="207.50"></text></g><g><title>all (86,708 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,77,5)" fg:x="0" fg:w="86708"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (86,708 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,229,42)" fg:x="0" fg:w="86708"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>