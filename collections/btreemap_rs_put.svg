<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="112562"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0169%" height="15" fill="rgb(205,65,31)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="0.0169%" y="197" width="0.0675%" height="15" fill="rgb(222,166,25)" fg:x="19" fg:w="76"/><text x="0.3098%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="0.0844%" y="197" width="0.0631%" height="15" fill="rgb(224,6,40)" fg:x="95" fg:w="71"/><text x="0.3774%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="0.1475%" y="165" width="0.1048%" height="15" fill="rgb(222,95,52)" fg:x="166" fg:w="118"/><text x="0.4404%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.2523%" y="149" width="0.0613%" height="15" fill="rgb(226,47,51)" fg:x="284" fg:w="69"/><text x="0.5453%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="0.3136%" y="149" width="0.3607%" height="15" fill="rgb(234,160,50)" fg:x="353" fg:w="406"/><text x="0.6066%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="0.6743%" y="149" width="0.0728%" height="15" fill="rgb(244,109,0)" fg:x="759" fg:w="82"/><text x="0.9673%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7471%" y="149" width="0.0480%" height="15" fill="rgb(220,151,45)" fg:x="841" fg:w="54"/><text x="1.0401%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7951%" y="149" width="0.0480%" height="15" fill="rgb(208,38,30)" fg:x="895" fg:w="54"/><text x="1.0881%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8431%" y="149" width="0.0480%" height="15" fill="rgb(225,28,41)" fg:x="949" fg:w="54"/><text x="1.1361%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8911%" y="149" width="0.0480%" height="15" fill="rgb(251,48,12)" fg:x="1003" fg:w="54"/><text x="1.1840%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.9390%" y="149" width="0.0613%" height="15" fill="rgb(211,205,45)" fg:x="1057" fg:w="69"/><text x="1.2320%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="1.0003%" y="149" width="0.0577%" height="15" fill="rgb(245,99,35)" fg:x="1126" fg:w="65"/><text x="1.2933%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="1.0581%" y="149" width="0.3607%" height="15" fill="rgb(251,50,44)" fg:x="1191" fg:w="406"/><text x="1.3511%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="1.4188%" y="149" width="0.0142%" height="15" fill="rgb(218,145,50)" fg:x="1597" fg:w="16"/><text x="1.7117%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="1.4330%" y="133" width="0.0675%" height="15" fill="rgb(233,0,25)" fg:x="1613" fg:w="76"/><text x="1.7260%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="1.5005%" y="101" width="0.0533%" height="15" fill="rgb(217,51,40)" fg:x="1689" fg:w="60"/><text x="1.7935%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="1.5005%" y="117" width="0.0755%" height="15" fill="rgb(243,54,41)" fg:x="1689" fg:w="85"/><text x="1.7935%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="1.5840%" y="53" width="0.0267%" height="15" fill="rgb(233,115,25)" fg:x="1783" fg:w="30"/><text x="1.8770%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="1.5840%" y="69" width="0.0489%" height="15" fill="rgb(231,110,20)" fg:x="1783" fg:w="55"/><text x="1.8770%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="1.5760%" y="85" width="0.1048%" height="15" fill="rgb(245,228,47)" fg:x="1774" fg:w="118"/><text x="1.8690%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="1.5760%" y="101" width="0.1519%" height="15" fill="rgb(232,106,41)" fg:x="1774" fg:w="171"/><text x="1.8690%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="1.5760%" y="117" width="0.1564%" height="15" fill="rgb(242,35,39)" fg:x="1774" fg:w="176"/><text x="1.8690%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="1.5005%" y="133" width="0.3305%" height="15" fill="rgb(212,120,29)" fg:x="1689" fg:w="372"/><text x="1.7935%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="1.4330%" y="149" width="0.5233%" height="15" fill="rgb(251,26,2)" fg:x="1613" fg:w="589"/><text x="1.7260%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="1.9563%" y="149" width="0.0728%" height="15" fill="rgb(223,141,43)" fg:x="2202" fg:w="82"/><text x="2.2492%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="2.0291%" y="149" width="0.0489%" height="15" fill="rgb(253,219,29)" fg:x="2284" fg:w="55"/><text x="2.3221%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="2.0780%" y="149" width="0.0560%" height="15" fill="rgb(234,149,1)" fg:x="2339" fg:w="63"/><text x="2.3709%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="2.1339%" y="149" width="0.0577%" height="15" fill="rgb(233,130,12)" fg:x="2402" fg:w="65"/><text x="2.4269%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="2.1917%" y="133" width="0.3607%" height="15" fill="rgb(221,60,2)" fg:x="2467" fg:w="406"/><text x="2.4846%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="2.5524%" y="133" width="0.0142%" height="15" fill="rgb(251,29,21)" fg:x="2873" fg:w="16"/><text x="2.8453%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="2.5666%" y="117" width="0.0675%" height="15" fill="rgb(233,9,5)" fg:x="2889" fg:w="76"/><text x="2.8596%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="2.6341%" y="85" width="0.0533%" height="15" fill="rgb(239,28,52)" fg:x="2965" fg:w="60"/><text x="2.9271%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="2.6341%" y="101" width="0.0755%" height="15" fill="rgb(214,57,40)" fg:x="2965" fg:w="85"/><text x="2.9271%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.7176%" y="37" width="0.0267%" height="15" fill="rgb(241,23,10)" fg:x="3059" fg:w="30"/><text x="3.0106%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="2.7176%" y="53" width="0.0489%" height="15" fill="rgb(209,197,52)" fg:x="3059" fg:w="55"/><text x="3.0106%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="2.7096%" y="69" width="0.1048%" height="15" fill="rgb(207,199,34)" fg:x="3050" fg:w="118"/><text x="3.0026%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="2.7096%" y="85" width="0.1519%" height="15" fill="rgb(230,207,35)" fg:x="3050" fg:w="171"/><text x="3.0026%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="2.7096%" y="101" width="0.1564%" height="15" fill="rgb(234,82,19)" fg:x="3050" fg:w="176"/><text x="3.0026%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="2.6341%" y="117" width="0.3305%" height="15" fill="rgb(242,205,25)" fg:x="2965" fg:w="372"/><text x="2.9271%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="2.5666%" y="133" width="0.5233%" height="15" fill="rgb(226,197,31)" fg:x="2889" fg:w="589"/><text x="2.8596%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="3.0899%" y="133" width="0.0728%" height="15" fill="rgb(236,227,26)" fg:x="3478" fg:w="82"/><text x="3.3828%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="3.1627%" y="133" width="0.0489%" height="15" fill="rgb(241,119,39)" fg:x="3560" fg:w="55"/><text x="3.4557%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="3.2116%" y="117" width="0.0613%" height="15" fill="rgb(205,118,18)" fg:x="3615" fg:w="69"/><text x="3.5045%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.08%)</title><rect x="3.2729%" y="117" width="0.0808%" height="15" fill="rgb(210,147,7)" fg:x="3684" fg:w="91"/><text x="3.5658%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.3537%" y="117" width="0.0560%" height="15" fill="rgb(226,40,53)" fg:x="3775" fg:w="63"/><text x="3.6467%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.25%)</title><rect x="3.2116%" y="133" width="0.2505%" height="15" fill="rgb(250,139,10)" fg:x="3615" fg:w="282"/><text x="3.5045%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.4621%" y="133" width="0.0675%" height="15" fill="rgb(241,12,24)" fg:x="3897" fg:w="76"/><text x="3.7551%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 1.52%)</title><rect x="2.1917%" y="149" width="1.5183%" height="15" fill="rgb(228,177,44)" fg:x="2467" fg:w="1709"/><text x="2.4846%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.7100%" y="149" width="0.0560%" height="15" fill="rgb(209,223,20)" fg:x="4176" fg:w="63"/><text x="4.0029%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7659%" y="149" width="0.0115%" height="15" fill="rgb(216,68,2)" fg:x="4239" fg:w="13"/><text x="4.0589%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7775%" y="149" width="0.0115%" height="15" fill="rgb(217,49,27)" fg:x="4252" fg:w="13"/><text x="4.0704%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.01%)</title><rect x="3.7952%" y="149" width="0.0133%" height="15" fill="rgb(205,19,49)" fg:x="4272" fg:w="15"/><text x="4.0882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.8086%" y="133" width="0.0675%" height="15" fill="rgb(231,74,27)" fg:x="4287" fg:w="76"/><text x="4.1015%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.14%)</title><rect x="3.8086%" y="149" width="0.1413%" height="15" fill="rgb(218,119,9)" fg:x="4287" fg:w="159"/><text x="4.1015%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="3.9498%" y="117" width="0.0728%" height="15" fill="rgb(213,90,25)" fg:x="4446" fg:w="82"/><text x="4.2428%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.10%)</title><rect x="3.9498%" y="133" width="0.1031%" height="15" fill="rgb(210,76,22)" fg:x="4446" fg:w="116"/><text x="4.2428%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.16%)</title><rect x="3.9498%" y="149" width="0.1635%" height="15" fill="rgb(245,88,4)" fg:x="4446" fg:w="184"/><text x="4.2428%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="4.1133%" y="149" width="0.0631%" height="15" fill="rgb(254,38,54)" fg:x="4630" fg:w="71"/><text x="4.4063%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.05%)</title><rect x="4.1764%" y="149" width="0.0498%" height="15" fill="rgb(227,139,51)" fg:x="4701" fg:w="56"/><text x="4.4693%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2261%" y="149" width="0.0728%" height="15" fill="rgb(205,23,7)" fg:x="4757" fg:w="82"/><text x="4.5191%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2990%" y="149" width="0.0728%" height="15" fill="rgb(207,92,29)" fg:x="4839" fg:w="82"/><text x="4.5919%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="4.3736%" y="149" width="0.0720%" height="15" fill="rgb(244,226,31)" fg:x="4923" fg:w="81"/><text x="4.6666%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.34%)</title><rect x="4.4456%" y="149" width="0.3376%" height="15" fill="rgb(218,123,13)" fg:x="5004" fg:w="380"/><text x="4.7385%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.34%)</title><rect x="4.7831%" y="149" width="0.3376%" height="15" fill="rgb(236,153,0)" fg:x="5384" fg:w="380"/><text x="5.0761%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,395 instructions, 5.68%)</title><rect x="0.2523%" y="165" width="5.6813%" height="15" fill="rgb(227,18,41)" fg:x="284" fg:w="6395"/><text x="0.5453%" y="175.50">candid..</text></g><g><title>memcpy (335 instructions, 0.30%)</title><rect x="5.9336%" y="165" width="0.2976%" height="15" fill="rgb(207,39,19)" fg:x="6679" fg:w="335"/><text x="6.2266%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="6.2312%" y="149" width="0.0107%" height="15" fill="rgb(247,17,49)" fg:x="7014" fg:w="12"/><text x="6.5242%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.04%)</title><rect x="6.2312%" y="165" width="0.0444%" height="15" fill="rgb(231,91,37)" fg:x="7014" fg:w="50"/><text x="6.5242%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="6.2757%" y="165" width="0.0728%" height="15" fill="rgb(206,146,45)" fg:x="7064" fg:w="82"/><text x="6.5686%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="6.3485%" y="149" width="0.0107%" height="15" fill="rgb(248,7,0)" fg:x="7146" fg:w="12"/><text x="6.6415%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="6.3592%" y="133" width="0.0471%" height="15" fill="rgb(232,158,14)" fg:x="7158" fg:w="53"/><text x="6.6521%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="6.4062%" y="133" width="0.0782%" height="15" fill="rgb(210,32,29)" fg:x="7211" fg:w="88"/><text x="6.6992%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="6.4844%" y="133" width="0.1439%" height="15" fill="rgb(247,147,1)" fg:x="7299" fg:w="162"/><text x="6.7774%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="6.3592%" y="149" width="0.4797%" height="15" fill="rgb(240,124,24)" fg:x="7158" fg:w="540"/><text x="6.6521%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 0.69%)</title><rect x="6.3485%" y="165" width="0.6858%" height="15" fill="rgb(240,96,39)" fg:x="7146" fg:w="772"/><text x="6.6415%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="7.0343%" y="165" width="0.0728%" height="15" fill="rgb(238,80,22)" fg:x="7918" fg:w="82"/><text x="7.3273%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="7.1072%" y="149" width="0.0107%" height="15" fill="rgb(223,138,17)" fg:x="8000" fg:w="12"/><text x="7.4002%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.1179%" y="133" width="0.0471%" height="15" fill="rgb(245,4,23)" fg:x="8012" fg:w="53"/><text x="7.4108%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="7.1649%" y="133" width="0.0782%" height="15" fill="rgb(218,26,9)" fg:x="8065" fg:w="88"/><text x="7.4579%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="7.2431%" y="133" width="0.1439%" height="15" fill="rgb(231,172,45)" fg:x="8153" fg:w="162"/><text x="7.5361%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="7.1179%" y="149" width="0.4797%" height="15" fill="rgb(223,108,39)" fg:x="8012" fg:w="540"/><text x="7.4108%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.06%)</title><rect x="7.5976%" y="149" width="0.0604%" height="15" fill="rgb(248,23,26)" fg:x="8552" fg:w="68"/><text x="7.8906%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="7.6580%" y="133" width="0.0720%" height="15" fill="rgb(220,115,9)" fg:x="8620" fg:w="81"/><text x="7.9510%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.10%)</title><rect x="7.6580%" y="149" width="0.0959%" height="15" fill="rgb(234,141,10)" fg:x="8620" fg:w="108"/><text x="7.9510%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 0.81%)</title><rect x="7.1072%" y="165" width="0.8102%" height="15" fill="rgb(248,25,25)" fg:x="8000" fg:w="912"/><text x="7.4002%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.9174%" y="117" width="0.0471%" height="15" fill="rgb(216,207,31)" fg:x="8912" fg:w="53"/><text x="8.2104%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.07%)</title><rect x="7.9174%" y="133" width="0.0702%" height="15" fill="rgb(247,229,52)" fg:x="8912" fg:w="79"/><text x="8.2104%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.26%)</title><rect x="7.9174%" y="149" width="0.2594%" height="15" fill="rgb(249,80,14)" fg:x="8912" fg:w="292"/><text x="8.2104%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1233 (15 instructions, 0.01%)</title><rect x="8.1768%" y="149" width="0.0133%" height="15" fill="rgb(251,99,22)" fg:x="9204" fg:w="15"/><text x="8.4698%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 0.46%)</title><rect x="7.9174%" y="165" width="0.4637%" height="15" fill="rgb(214,104,9)" fg:x="8912" fg:w="522"/><text x="8.2104%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.03%)</title><rect x="8.3812%" y="165" width="0.0302%" height="15" fill="rgb(231,34,36)" fg:x="9434" fg:w="34"/><text x="8.6741%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.4114%" y="149" width="0.1093%" height="15" fill="rgb(207,190,36)" fg:x="9468" fg:w="123"/><text x="8.7043%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.5446%" y="149" width="0.1093%" height="15" fill="rgb(226,155,37)" fg:x="9618" fg:w="123"/><text x="8.8376%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.27%)</title><rect x="8.4114%" y="165" width="0.2665%" height="15" fill="rgb(228,144,47)" fg:x="9468" fg:w="300"/><text x="8.7043%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="8.6779%" y="149" width="0.0249%" height="15" fill="rgb(239,175,25)" fg:x="9768" fg:w="28"/><text x="8.9709%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.09%)</title><rect x="8.6779%" y="165" width="0.0862%" height="15" fill="rgb(228,118,37)" fg:x="9768" fg:w="97"/><text x="8.9709%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.36%)</title><rect x="8.7934%" y="165" width="0.3642%" height="15" fill="rgb(241,7,28)" fg:x="9898" fg:w="410"/><text x="9.0863%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="9.1576%" y="133" width="0.0107%" height="15" fill="rgb(229,37,10)" fg:x="10308" fg:w="12"/><text x="9.4506%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="9.1683%" y="133" width="0.0720%" height="15" fill="rgb(215,119,23)" fg:x="10320" fg:w="81"/><text x="9.4612%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.15%)</title><rect x="9.2402%" y="117" width="0.1493%" height="15" fill="rgb(228,171,40)" fg:x="10401" fg:w="168"/><text x="9.5332%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.17%)</title><rect x="9.2402%" y="133" width="0.1732%" height="15" fill="rgb(227,75,53)" fg:x="10401" fg:w="195"/><text x="9.5332%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (341 instructions, 0.30%)</title><rect x="9.1576%" y="149" width="0.3029%" height="15" fill="rgb(216,32,46)" fg:x="10308" fg:w="341"/><text x="9.4506%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (375 instructions, 0.33%)</title><rect x="9.1576%" y="165" width="0.3331%" height="15" fill="rgb(233,114,19)" fg:x="10308" fg:w="375"/><text x="9.4506%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="9.4908%" y="165" width="0.1093%" height="15" fill="rgb(213,191,34)" fg:x="10683" fg:w="123"/><text x="9.7837%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,031 instructions, 9.80%)</title><rect x="0.1475%" y="181" width="9.7999%" height="15" fill="rgb(250,218,12)" fg:x="166" fg:w="11031"/><text x="0.4404%" y="191.50">ic_cdk::api:..</text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="9.9518%" y="165" width="0.1723%" height="15" fill="rgb(228,18,22)" fg:x="11202" fg:w="194"/><text x="10.2448%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="10.1242%" y="165" width="0.1723%" height="15" fill="rgb(231,96,42)" fg:x="11396" fg:w="194"/><text x="10.4172%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,602 instructions, 1.42%)</title><rect x="9.9518%" y="181" width="1.4232%" height="15" fill="rgb(253,33,22)" fg:x="11202" fg:w="1602"/><text x="10.2448%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="12.5593%" y="165" width="0.0728%" height="15" fill="rgb(232,141,47)" fg:x="14137" fg:w="82"/><text x="12.8523%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.6321%" y="165" width="0.1777%" height="15" fill="rgb(234,153,16)" fg:x="14219" fg:w="200"/><text x="12.9251%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.8098%" y="165" width="0.1777%" height="15" fill="rgb(245,206,8)" fg:x="14419" fg:w="200"/><text x="13.1028%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="12.9875%" y="165" width="0.1990%" height="15" fill="rgb(237,120,36)" fg:x="14619" fg:w="224"/><text x="13.2805%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.1865%" y="165" width="0.1990%" height="15" fill="rgb(216,72,28)" fg:x="14843" fg:w="224"/><text x="13.4795%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="13.3855%" y="165" width="0.0728%" height="15" fill="rgb(253,104,36)" fg:x="15067" fg:w="82"/><text x="13.6785%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.4584%" y="165" width="0.1777%" height="15" fill="rgb(245,172,1)" fg:x="15149" fg:w="200"/><text x="13.7513%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.6360%" y="165" width="0.1777%" height="15" fill="rgb(227,119,49)" fg:x="15349" fg:w="200"/><text x="13.9290%" y="175.50"></text></g><g><title>memcpy (140 instructions, 0.12%)</title><rect x="13.8137%" y="165" width="0.1244%" height="15" fill="rgb(250,133,39)" fg:x="15549" fg:w="140"/><text x="14.1067%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.9381%" y="165" width="0.1990%" height="15" fill="rgb(253,183,42)" fg:x="15689" fg:w="224"/><text x="14.2311%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="14.1371%" y="165" width="0.1990%" height="15" fill="rgb(245,213,52)" fg:x="15913" fg:w="224"/><text x="14.4301%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="14.3361%" y="165" width="0.1324%" height="15" fill="rgb(237,181,52)" fg:x="16137" fg:w="149"/><text x="14.6291%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.4685%" y="165" width="0.1279%" height="15" fill="rgb(234,152,48)" fg:x="16286" fg:w="144"/><text x="14.7614%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.5964%" y="165" width="0.1279%" height="15" fill="rgb(223,12,2)" fg:x="16430" fg:w="144"/><text x="14.8894%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="14.7243%" y="165" width="0.0746%" height="15" fill="rgb(217,81,12)" fg:x="16574" fg:w="84"/><text x="15.0173%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="16.9746%" y="165" width="0.2523%" height="15" fill="rgb(213,217,22)" fg:x="19107" fg:w="284"/><text x="17.2676%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="17.2270%" y="165" width="0.2523%" height="15" fill="rgb(210,44,16)" fg:x="19391" fg:w="284"/><text x="17.5199%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.5853%" y="165" width="0.2790%" height="15" fill="rgb(205,31,49)" fg:x="20920" fg:w="314"/><text x="18.8783%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.8643%" y="165" width="0.2790%" height="15" fill="rgb(230,127,21)" fg:x="21234" fg:w="314"/><text x="19.1572%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.0618%" y="165" width="0.1190%" height="15" fill="rgb(208,155,13)" fg:x="22582" fg:w="134"/><text x="20.3548%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.1809%" y="165" width="0.1190%" height="15" fill="rgb(230,48,30)" fg:x="22716" fg:w="134"/><text x="20.4738%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.6192%" y="165" width="0.1723%" height="15" fill="rgb(224,162,50)" fg:x="24335" fg:w="194"/><text x="21.9122%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.7915%" y="165" width="0.1723%" height="15" fill="rgb(229,112,7)" fg:x="24529" fg:w="194"/><text x="22.0845%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.1757%" y="165" width="0.1190%" height="15" fill="rgb(252,112,11)" fg:x="26087" fg:w="134"/><text x="23.4686%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.2947%" y="165" width="0.1190%" height="15" fill="rgb(217,91,25)" fg:x="26221" fg:w="134"/><text x="23.5877%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="24.4656%" y="165" width="0.0728%" height="15" fill="rgb(254,99,40)" fg:x="27539" fg:w="82"/><text x="24.7586%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.5385%" y="165" width="0.1510%" height="15" fill="rgb(216,220,13)" fg:x="27621" fg:w="170"/><text x="24.8314%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.6895%" y="165" width="0.1510%" height="15" fill="rgb(250,78,34)" fg:x="27791" fg:w="170"/><text x="24.9825%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.8405%" y="165" width="0.1279%" height="15" fill="rgb(227,187,51)" fg:x="27961" fg:w="144"/><text x="25.1335%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.9685%" y="165" width="0.1279%" height="15" fill="rgb(248,81,46)" fg:x="28105" fg:w="144"/><text x="25.2614%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.4707%" y="165" width="0.1279%" height="15" fill="rgb(234,8,3)" fg:x="29796" fg:w="144"/><text x="26.7637%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.5987%" y="165" width="0.1279%" height="15" fill="rgb(211,142,2)" fg:x="29940" fg:w="144"/><text x="26.8916%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="27.9402%" y="165" width="0.1990%" height="15" fill="rgb(217,197,51)" fg:x="31450" fg:w="224"/><text x="28.2331%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="28.1392%" y="165" width="0.1990%" height="15" fill="rgb(242,17,27)" fg:x="31674" fg:w="224"/><text x="28.4321%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.5757%" y="165" width="0.1190%" height="15" fill="rgb(228,37,21)" fg:x="33291" fg:w="134"/><text x="29.8687%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.6947%" y="165" width="0.1190%" height="15" fill="rgb(239,5,49)" fg:x="33425" fg:w="134"/><text x="29.9877%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="31.0265%" y="165" width="0.0728%" height="15" fill="rgb(223,16,35)" fg:x="34924" fg:w="82"/><text x="31.3194%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.0993%" y="165" width="0.1510%" height="15" fill="rgb(211,203,33)" fg:x="35006" fg:w="170"/><text x="31.3923%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.2503%" y="165" width="0.1510%" height="15" fill="rgb(234,139,4)" fg:x="35176" fg:w="170"/><text x="31.5433%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.4014%" y="165" width="0.1190%" height="15" fill="rgb(248,118,50)" fg:x="35346" fg:w="134"/><text x="31.6943%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.5204%" y="165" width="0.1190%" height="15" fill="rgb(223,23,1)" fg:x="35480" fg:w="134"/><text x="31.8134%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.6395%" y="165" width="0.1457%" height="15" fill="rgb(205,1,22)" fg:x="35614" fg:w="164"/><text x="31.9324%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.7851%" y="165" width="0.1457%" height="15" fill="rgb(230,1,25)" fg:x="35778" fg:w="164"/><text x="32.0781%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="31.9308%" y="165" width="0.1839%" height="15" fill="rgb(209,213,11)" fg:x="35942" fg:w="207"/><text x="32.2238%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="33.9706%" y="165" width="0.3056%" height="15" fill="rgb(218,8,46)" fg:x="38238" fg:w="344"/><text x="34.2636%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="34.2762%" y="165" width="0.3056%" height="15" fill="rgb(222,88,19)" fg:x="38582" fg:w="344"/><text x="34.5692%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.5280%" y="165" width="0.2257%" height="15" fill="rgb(244,68,4)" fg:x="39991" fg:w="254"/><text x="35.8209%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.7536%" y="165" width="0.2257%" height="15" fill="rgb(238,218,36)" fg:x="40245" fg:w="254"/><text x="36.0466%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="37.1102%" y="165" width="0.0728%" height="15" fill="rgb(229,212,32)" fg:x="41772" fg:w="82"/><text x="37.4032%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.1831%" y="165" width="0.1777%" height="15" fill="rgb(227,74,16)" fg:x="41854" fg:w="200"/><text x="37.4760%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.3607%" y="165" width="0.1777%" height="15" fill="rgb(216,172,15)" fg:x="42054" fg:w="200"/><text x="37.6537%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.5384%" y="165" width="0.1990%" height="15" fill="rgb(241,177,22)" fg:x="42254" fg:w="224"/><text x="37.8314%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.7374%" y="165" width="0.1990%" height="15" fill="rgb(232,12,53)" fg:x="42478" fg:w="224"/><text x="38.0304%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="37.9364%" y="165" width="0.1723%" height="15" fill="rgb(222,82,0)" fg:x="42702" fg:w="194"/><text x="38.2294%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="38.1088%" y="165" width="0.1723%" height="15" fill="rgb(223,79,38)" fg:x="42896" fg:w="194"/><text x="38.4017%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="38.2811%" y="165" width="0.1190%" height="15" fill="rgb(218,26,35)" fg:x="43090" fg:w="134"/><text x="38.5741%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="39.9309%" y="165" width="0.1723%" height="15" fill="rgb(212,90,12)" fg:x="44947" fg:w="194"/><text x="40.2239%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="40.1032%" y="165" width="0.1723%" height="15" fill="rgb(228,159,28)" fg:x="45141" fg:w="194"/><text x="40.3962%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.1933%" y="165" width="0.1990%" height="15" fill="rgb(206,16,2)" fg:x="46368" fg:w="224"/><text x="41.4863%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.3923%" y="165" width="0.1990%" height="15" fill="rgb(240,176,11)" fg:x="46592" fg:w="224"/><text x="41.6853%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (35,226 instructions, 31.29%)</title><rect x="11.3751%" y="181" width="31.2948%" height="15" fill="rgb(247,120,32)" fg:x="12804" fg:w="35226"/><text x="11.6680%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,333 instructions, 1.18%)</title><rect x="42.6698%" y="181" width="1.1842%" height="15" fill="rgb(231,21,17)" fg:x="48030" fg:w="1333"/><text x="42.9628%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="44.7185%" y="165" width="0.0728%" height="15" fill="rgb(239,216,11)" fg:x="50336" fg:w="82"/><text x="45.0114%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.7913%" y="165" width="0.1510%" height="15" fill="rgb(206,112,21)" fg:x="50418" fg:w="170"/><text x="45.0843%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.9423%" y="165" width="0.1510%" height="15" fill="rgb(207,120,14)" fg:x="50588" fg:w="170"/><text x="45.2353%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.0934%" y="165" width="0.1190%" height="15" fill="rgb(241,215,9)" fg:x="50758" fg:w="134"/><text x="45.3863%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.2124%" y="165" width="0.1190%" height="15" fill="rgb(232,187,12)" fg:x="50892" fg:w="134"/><text x="45.5054%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="45.3315%" y="165" width="0.0728%" height="15" fill="rgb(226,132,43)" fg:x="51026" fg:w="82"/><text x="45.6244%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.4043%" y="165" width="0.2043%" height="15" fill="rgb(248,181,7)" fg:x="51108" fg:w="230"/><text x="45.6973%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.6086%" y="165" width="0.2043%" height="15" fill="rgb(244,76,8)" fg:x="51338" fg:w="230"/><text x="45.9016%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="45.8130%" y="165" width="0.1377%" height="15" fill="rgb(225,223,11)" fg:x="51568" fg:w="155"/><text x="46.1059%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="45.9507%" y="165" width="0.2523%" height="15" fill="rgb(215,145,14)" fg:x="51723" fg:w="284"/><text x="46.2436%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="46.2030%" y="165" width="0.2523%" height="15" fill="rgb(219,171,17)" fg:x="52007" fg:w="284"/><text x="46.4960%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="46.4553%" y="165" width="0.1590%" height="15" fill="rgb(233,147,22)" fg:x="52291" fg:w="179"/><text x="46.7483%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.4009%" y="165" width="0.1279%" height="15" fill="rgb(205,143,47)" fg:x="54481" fg:w="144"/><text x="48.6939%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.5288%" y="165" width="0.1279%" height="15" fill="rgb(216,212,20)" fg:x="54625" fg:w="144"/><text x="48.8218%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.4954%" y="165" width="0.1279%" height="15" fill="rgb(207,117,30)" fg:x="55713" fg:w="144"/><text x="49.7884%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.6233%" y="165" width="0.1279%" height="15" fill="rgb(219,107,33)" fg:x="55857" fg:w="144"/><text x="49.9163%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.0439%" y="165" width="0.2257%" height="15" fill="rgb(242,205,14)" fg:x="57456" fg:w="254"/><text x="51.3368%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.2695%" y="165" width="0.2257%" height="15" fill="rgb(235,56,52)" fg:x="57710" fg:w="254"/><text x="51.5625%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="52.7603%" y="165" width="0.0728%" height="15" fill="rgb(249,138,45)" fg:x="59388" fg:w="82"/><text x="53.0532%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.8331%" y="165" width="0.1510%" height="15" fill="rgb(240,3,20)" fg:x="59470" fg:w="170"/><text x="53.1261%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.9841%" y="165" width="0.1510%" height="15" fill="rgb(217,136,37)" fg:x="59640" fg:w="170"/><text x="53.2771%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.1352%" y="165" width="0.1279%" height="15" fill="rgb(239,43,46)" fg:x="59810" fg:w="144"/><text x="53.4281%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.2631%" y="165" width="0.1279%" height="15" fill="rgb(246,95,6)" fg:x="59954" fg:w="144"/><text x="53.5561%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.3910%" y="165" width="0.2523%" height="15" fill="rgb(224,115,17)" fg:x="60098" fg:w="284"/><text x="53.6840%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.6433%" y="165" width="0.2523%" height="15" fill="rgb(220,29,31)" fg:x="60382" fg:w="284"/><text x="53.9363%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="53.8956%" y="165" width="0.1590%" height="15" fill="rgb(214,106,26)" fg:x="60666" fg:w="179"/><text x="54.1886%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="55.4530%" y="165" width="0.0728%" height="15" fill="rgb(210,138,24)" fg:x="62419" fg:w="82"/><text x="55.7460%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.5258%" y="165" width="0.1510%" height="15" fill="rgb(214,73,5)" fg:x="62501" fg:w="170"/><text x="55.8188%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.6769%" y="165" width="0.1510%" height="15" fill="rgb(248,42,1)" fg:x="62671" fg:w="170"/><text x="55.9698%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="55.8279%" y="165" width="0.1723%" height="15" fill="rgb(229,87,25)" fg:x="62841" fg:w="194"/><text x="56.1209%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="56.0002%" y="165" width="0.1723%" height="15" fill="rgb(212,14,45)" fg:x="63035" fg:w="194"/><text x="56.2932%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="57.7344%" y="165" width="0.0728%" height="15" fill="rgb(214,109,1)" fg:x="64987" fg:w="82"/><text x="58.0274%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.8073%" y="165" width="0.1510%" height="15" fill="rgb(237,158,47)" fg:x="65069" fg:w="170"/><text x="58.1002%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.9583%" y="165" width="0.1510%" height="15" fill="rgb(242,129,51)" fg:x="65239" fg:w="170"/><text x="58.2512%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.1093%" y="165" width="0.1457%" height="15" fill="rgb(236,15,36)" fg:x="65409" fg:w="164"/><text x="58.4023%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.2550%" y="165" width="0.1457%" height="15" fill="rgb(218,118,4)" fg:x="65573" fg:w="164"/><text x="58.5480%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.4007%" y="165" width="0.1279%" height="15" fill="rgb(226,171,38)" fg:x="65737" fg:w="144"/><text x="58.6937%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.5286%" y="165" width="0.1279%" height="15" fill="rgb(237,169,5)" fg:x="65881" fg:w="144"/><text x="58.8216%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="58.6566%" y="165" width="0.0746%" height="15" fill="rgb(217,111,31)" fg:x="66025" fg:w="84"/><text x="58.9495%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.2726%" y="165" width="0.2257%" height="15" fill="rgb(247,28,22)" fg:x="67844" fg:w="254"/><text x="60.5655%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.4982%" y="165" width="0.2257%" height="15" fill="rgb(225,140,10)" fg:x="68098" fg:w="254"/><text x="60.7912%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.5350%" y="165" width="0.1190%" height="15" fill="rgb(226,192,30)" fg:x="69265" fg:w="134"/><text x="61.8279%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.6540%" y="165" width="0.1190%" height="15" fill="rgb(208,115,30)" fg:x="69399" fg:w="134"/><text x="61.9470%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="62.7983%" y="165" width="0.0728%" height="15" fill="rgb(213,80,46)" fg:x="70687" fg:w="82"/><text x="63.0912%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="62.8711%" y="165" width="0.2043%" height="15" fill="rgb(215,148,9)" fg:x="70769" fg:w="230"/><text x="63.1641%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="63.0755%" y="165" width="0.2043%" height="15" fill="rgb(232,222,27)" fg:x="70999" fg:w="230"/><text x="63.3684%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.2798%" y="165" width="0.2257%" height="15" fill="rgb(232,46,45)" fg:x="71229" fg:w="254"/><text x="63.5728%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.5054%" y="165" width="0.2257%" height="15" fill="rgb(247,79,26)" fg:x="71483" fg:w="254"/><text x="63.7984%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="63.7311%" y="165" width="0.1457%" height="15" fill="rgb(207,83,32)" fg:x="71737" fg:w="164"/><text x="64.0241%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="65.1143%" y="165" width="0.0728%" height="15" fill="rgb(232,127,20)" fg:x="73294" fg:w="82"/><text x="65.4073%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.1872%" y="165" width="0.2043%" height="15" fill="rgb(253,194,23)" fg:x="73376" fg:w="230"/><text x="65.4802%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.3915%" y="165" width="0.2043%" height="15" fill="rgb(223,132,26)" fg:x="73606" fg:w="230"/><text x="65.6845%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.5958%" y="165" width="0.1279%" height="15" fill="rgb(214,55,30)" fg:x="73836" fg:w="144"/><text x="65.8888%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.7238%" y="165" width="0.1279%" height="15" fill="rgb(226,188,51)" fg:x="73980" fg:w="144"/><text x="66.0167%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.8517%" y="165" width="0.1457%" height="15" fill="rgb(238,217,3)" fg:x="74124" fg:w="164"/><text x="66.1447%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.9974%" y="165" width="0.1457%" height="15" fill="rgb(224,174,47)" fg:x="74288" fg:w="164"/><text x="66.2904%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="66.1431%" y="165" width="0.1839%" height="15" fill="rgb(242,198,24)" fg:x="74452" fg:w="207"/><text x="66.4361%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.5814%" y="165" width="0.2257%" height="15" fill="rgb(225,39,24)" fg:x="76071" fg:w="254"/><text x="67.8744%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.8071%" y="165" width="0.2257%" height="15" fill="rgb(209,153,27)" fg:x="76325" fg:w="254"/><text x="68.1000%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.7657%" y="165" width="0.2257%" height="15" fill="rgb(243,141,7)" fg:x="77404" fg:w="254"/><text x="69.0586%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.9913%" y="165" width="0.2257%" height="15" fill="rgb(226,127,29)" fg:x="77658" fg:w="254"/><text x="69.2843%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.2155%" y="165" width="0.1279%" height="15" fill="rgb(210,47,30)" fg:x="79036" fg:w="144"/><text x="70.5085%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.3435%" y="165" width="0.1279%" height="15" fill="rgb(206,159,49)" fg:x="79180" fg:w="144"/><text x="70.6364%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.6299%" y="165" width="0.2257%" height="15" fill="rgb(222,218,25)" fg:x="80628" fg:w="254"/><text x="71.9228%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.8555%" y="165" width="0.2257%" height="15" fill="rgb(211,58,3)" fg:x="80882" fg:w="254"/><text x="72.1485%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="72.9722%" y="165" width="0.1190%" height="15" fill="rgb(229,127,11)" fg:x="82139" fg:w="134"/><text x="73.2652%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="73.0913%" y="165" width="0.1190%" height="15" fill="rgb(243,36,4)" fg:x="82273" fg:w="134"/><text x="73.3842%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.4496%" y="165" width="0.3323%" height="15" fill="rgb(244,104,6)" fg:x="83802" fg:w="374"/><text x="74.7426%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.7819%" y="165" width="0.3323%" height="15" fill="rgb(235,205,13)" fg:x="84176" fg:w="374"/><text x="75.0749%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.3002%" y="165" width="0.1190%" height="15" fill="rgb(221,68,9)" fg:x="85885" fg:w="134"/><text x="76.5931%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.4192%" y="165" width="0.1190%" height="15" fill="rgb(249,5,26)" fg:x="86019" fg:w="134"/><text x="76.7122%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (38,215 instructions, 33.95%)</title><rect x="43.8541%" y="181" width="33.9502%" height="15" fill="rgb(226,167,18)" fg:x="49363" fg:w="38215"/><text x="44.1470%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;..</text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.1502%" y="165" width="0.1190%" height="15" fill="rgb(218,150,12)" fg:x="89093" fg:w="134"/><text x="79.4431%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.2692%" y="165" width="0.1190%" height="15" fill="rgb(220,105,47)" fg:x="89227" fg:w="134"/><text x="79.5622%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.5476%" y="165" width="0.3056%" height="15" fill="rgb(228,143,18)" fg:x="90666" fg:w="344"/><text x="80.8406%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.8532%" y="165" width="0.3056%" height="15" fill="rgb(226,29,51)" fg:x="91010" fg:w="344"/><text x="81.1462%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.2640%" y="165" width="0.1723%" height="15" fill="rgb(220,97,4)" fg:x="92598" fg:w="194"/><text x="82.5570%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.4363%" y="165" width="0.1723%" height="15" fill="rgb(238,7,53)" fg:x="92792" fg:w="194"/><text x="82.7293%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.4207%" y="165" width="0.1279%" height="15" fill="rgb(247,88,5)" fg:x="93900" fg:w="144"/><text x="83.7137%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.5486%" y="165" width="0.1279%" height="15" fill="rgb(215,219,46)" fg:x="94044" fg:w="144"/><text x="83.8416%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.6485%" y="165" width="0.1457%" height="15" fill="rgb(215,186,9)" fg:x="95282" fg:w="164"/><text x="84.9414%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.7942%" y="165" width="0.1457%" height="15" fill="rgb(242,166,53)" fg:x="95446" fg:w="164"/><text x="85.0871%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="85.8851%" y="165" width="0.1723%" height="15" fill="rgb(208,28,12)" fg:x="96674" fg:w="194"/><text x="86.1781%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="86.0575%" y="165" width="0.1723%" height="15" fill="rgb(248,164,18)" fg:x="96868" fg:w="194"/><text x="86.3504%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.2817%" y="165" width="0.1990%" height="15" fill="rgb(228,220,18)" fg:x="98246" fg:w="224"/><text x="87.5746%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.4807%" y="165" width="0.1990%" height="15" fill="rgb(206,118,35)" fg:x="98470" fg:w="224"/><text x="87.7736%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.5183%" y="165" width="0.1990%" height="15" fill="rgb(214,164,20)" fg:x="99638" fg:w="224"/><text x="88.8113%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.7173%" y="165" width="0.1990%" height="15" fill="rgb(212,179,28)" fg:x="99862" fg:w="224"/><text x="89.0103%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.0766%" y="165" width="0.1190%" height="15" fill="rgb(207,185,14)" fg:x="101392" fg:w="134"/><text x="90.3695%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.1956%" y="165" width="0.1190%" height="15" fill="rgb(216,38,39)" fg:x="101526" fg:w="134"/><text x="90.4886%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.2066%" y="165" width="0.0728%" height="15" fill="rgb(229,185,29)" fg:x="102664" fg:w="82"/><text x="91.4996%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.2795%" y="165" width="0.1510%" height="15" fill="rgb(231,91,16)" fg:x="102746" fg:w="170"/><text x="91.5724%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.4305%" y="165" width="0.1510%" height="15" fill="rgb(232,228,12)" fg:x="102916" fg:w="170"/><text x="91.7235%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.5815%" y="165" width="0.0728%" height="15" fill="rgb(215,172,19)" fg:x="103086" fg:w="82"/><text x="91.8745%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.6544%" y="165" width="0.1510%" height="15" fill="rgb(218,207,53)" fg:x="103168" fg:w="170"/><text x="91.9473%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.8054%" y="165" width="0.1510%" height="15" fill="rgb(251,212,23)" fg:x="103338" fg:w="170"/><text x="92.0984%" y="175.50"></text></g><g><title>memcpy (125 instructions, 0.11%)</title><rect x="91.9564%" y="165" width="0.1110%" height="15" fill="rgb(214,33,23)" fg:x="103508" fg:w="125"/><text x="92.2494%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.0675%" y="165" width="0.1190%" height="15" fill="rgb(236,93,26)" fg:x="103633" fg:w="134"/><text x="92.3605%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.1865%" y="165" width="0.1190%" height="15" fill="rgb(224,175,8)" fg:x="103767" fg:w="134"/><text x="92.4795%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.13%)</title><rect x="92.3056%" y="165" width="0.1306%" height="15" fill="rgb(214,207,19)" fg:x="103901" fg:w="147"/><text x="92.5985%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="92.4362%" y="165" width="0.0728%" height="15" fill="rgb(217,200,30)" fg:x="104048" fg:w="82"/><text x="92.7291%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.5090%" y="165" width="0.2043%" height="15" fill="rgb(250,179,19)" fg:x="104130" fg:w="230"/><text x="92.8020%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.7133%" y="165" width="0.2043%" height="15" fill="rgb(220,119,49)" fg:x="104360" fg:w="230"/><text x="93.0063%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="92.9177%" y="165" width="0.1377%" height="15" fill="rgb(248,203,6)" fg:x="104590" fg:w="155"/><text x="93.2106%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.0554%" y="165" width="0.1457%" height="15" fill="rgb(214,145,50)" fg:x="104745" fg:w="164"/><text x="93.3484%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.2011%" y="165" width="0.1457%" height="15" fill="rgb(207,66,2)" fg:x="104909" fg:w="164"/><text x="93.4940%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="93.3468%" y="165" width="0.1839%" height="15" fill="rgb(230,66,33)" fg:x="105073" fg:w="207"/><text x="93.6397%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.5307%" y="165" width="0.1990%" height="15" fill="rgb(247,58,29)" fg:x="105280" fg:w="224"/><text x="93.8236%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.7297%" y="165" width="0.1990%" height="15" fill="rgb(254,137,37)" fg:x="105504" fg:w="224"/><text x="94.0226%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="93.9287%" y="165" width="0.1324%" height="15" fill="rgb(212,43,33)" fg:x="105728" fg:w="149"/><text x="94.2216%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.4677%" y="165" width="0.1723%" height="15" fill="rgb(249,66,9)" fg:x="108586" fg:w="194"/><text x="96.7607%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.6401%" y="165" width="0.1723%" height="15" fill="rgb(245,104,17)" fg:x="108780" fg:w="194"/><text x="96.9330%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,401 instructions, 19.90%)</title><rect x="77.8042%" y="181" width="19.9010%" height="15" fill="rgb(205,227,13)" fg:x="87578" fg:w="22401"/><text x="78.0972%" y="191.50">alloc::collections::btree:..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="97.7053%" y="149" width="0.0107%" height="15" fill="rgb(250,83,47)" fg:x="109979" fg:w="12"/><text x="97.9982%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="97.7159%" y="133" width="0.1119%" height="15" fill="rgb(216,13,11)" fg:x="109991" fg:w="126"/><text x="98.0089%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.14%)</title><rect x="97.7159%" y="149" width="0.1359%" height="15" fill="rgb(234,62,32)" fg:x="109991" fg:w="153"/><text x="98.0089%" y="159.50"></text></g><g><title>memset (136 instructions, 0.12%)</title><rect x="97.8519%" y="149" width="0.1208%" height="15" fill="rgb(227,15,30)" fg:x="110144" fg:w="136"/><text x="98.1448%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (459 instructions, 0.41%)</title><rect x="97.7053%" y="165" width="0.4078%" height="15" fill="rgb(211,23,18)" fg:x="109979" fg:w="459"/><text x="97.9982%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.03%)</title><rect x="98.1130%" y="149" width="0.0284%" height="15" fill="rgb(207,194,2)" fg:x="110438" fg:w="32"/><text x="98.4060%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="98.1415%" y="117" width="0.1048%" height="15" fill="rgb(210,108,25)" fg:x="110470" fg:w="118"/><text x="98.4344%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.14%)</title><rect x="98.1415%" y="133" width="0.1350%" height="15" fill="rgb(207,176,16)" fg:x="110470" fg:w="152"/><text x="98.4344%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (217 instructions, 0.19%)</title><rect x="98.1415%" y="149" width="0.1928%" height="15" fill="rgb(241,54,31)" fg:x="110470" fg:w="217"/><text x="98.4344%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.3538%" y="149" width="0.0267%" height="15" fill="rgb(240,197,51)" fg:x="110709" fg:w="30"/><text x="98.6468%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (512 instructions, 0.45%)</title><rect x="98.1130%" y="165" width="0.4549%" height="15" fill="rgb(220,101,40)" fg:x="110438" fg:w="512"/><text x="98.4060%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="98.5723%" y="165" width="0.0489%" height="15" fill="rgb(222,129,31)" fg:x="110955" fg:w="55"/><text x="98.8653%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,105 instructions, 0.98%)</title><rect x="97.7053%" y="181" width="0.9817%" height="15" fill="rgb(227,103,18)" fg:x="109979" fg:w="1105"/><text x="97.9982%" y="191.50"></text></g><g><title>btreemap::batch_put_3_::{{closure}} (112,079 instructions, 99.57%)</title><rect x="0.1475%" y="197" width="99.5709%" height="15" fill="rgb(211,133,9)" fg:x="166" fg:w="112079"/><text x="0.4404%" y="207.50">btreemap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.7184%" y="197" width="0.0107%" height="15" fill="rgb(211,220,5)" fg:x="112245" fg:w="12"/><text x="100.0113%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="99.7290%" y="197" width="0.0720%" height="15" fill="rgb(211,149,6)" fg:x="112257" fg:w="81"/><text x="100.0220%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="99.8010%" y="197" width="0.1119%" height="15" fill="rgb(238,164,51)" fg:x="112338" fg:w="126"/><text x="100.0940%" y="207.50"></text></g><g><title>all (112,562 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,128,45)" fg:x="0" fg:w="112562"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (112,562 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(248,134,29)" fg:x="0" fg:w="112562"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>