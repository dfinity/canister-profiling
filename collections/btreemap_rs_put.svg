<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="112263"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0169%" height="15" fill="rgb(235,95,45)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="0.0169%" y="197" width="0.0677%" height="15" fill="rgb(221,163,16)" fg:x="19" fg:w="76"/><text x="0.3099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.07%)</title><rect x="0.0846%" y="197" width="0.0650%" height="15" fill="rgb(206,5,42)" fg:x="95" fg:w="73"/><text x="0.3776%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.11%)</title><rect x="0.1496%" y="165" width="0.1051%" height="15" fill="rgb(236,59,38)" fg:x="168" fg:w="118"/><text x="0.4426%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.06%)</title><rect x="0.2548%" y="149" width="0.0632%" height="15" fill="rgb(214,160,10)" fg:x="286" fg:w="71"/><text x="0.5477%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.36%)</title><rect x="0.3180%" y="149" width="0.3563%" height="15" fill="rgb(205,47,54)" fg:x="357" fg:w="400"/><text x="0.6110%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.08%)</title><rect x="0.6743%" y="149" width="0.0757%" height="15" fill="rgb(238,214,33)" fg:x="757" fg:w="85"/><text x="0.9673%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7500%" y="149" width="0.0481%" height="15" fill="rgb(219,163,52)" fg:x="842" fg:w="54"/><text x="1.0430%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7981%" y="149" width="0.0481%" height="15" fill="rgb(216,129,23)" fg:x="896" fg:w="54"/><text x="1.0911%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8462%" y="149" width="0.0481%" height="15" fill="rgb(227,219,32)" fg:x="950" fg:w="54"/><text x="1.1392%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8943%" y="149" width="0.0481%" height="15" fill="rgb(207,59,8)" fg:x="1004" fg:w="54"/><text x="1.1873%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.06%)</title><rect x="0.9424%" y="149" width="0.0632%" height="15" fill="rgb(228,14,29)" fg:x="1058" fg:w="71"/><text x="1.2354%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="1.0057%" y="149" width="0.0579%" height="15" fill="rgb(223,146,46)" fg:x="1129" fg:w="65"/><text x="1.2986%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.36%)</title><rect x="1.0636%" y="149" width="0.3563%" height="15" fill="rgb(227,72,9)" fg:x="1194" fg:w="400"/><text x="1.3565%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="1.4199%" y="149" width="0.0143%" height="15" fill="rgb(205,97,54)" fg:x="1594" fg:w="16"/><text x="1.7128%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="1.4341%" y="133" width="0.0677%" height="15" fill="rgb(225,138,28)" fg:x="1610" fg:w="76"/><text x="1.7271%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="1.5018%" y="101" width="0.0534%" height="15" fill="rgb(218,127,2)" fg:x="1686" fg:w="60"/><text x="1.7948%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="1.5018%" y="117" width="0.0757%" height="15" fill="rgb(225,55,21)" fg:x="1686" fg:w="85"/><text x="1.7948%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="1.5856%" y="53" width="0.0267%" height="15" fill="rgb(243,20,53)" fg:x="1780" fg:w="30"/><text x="1.8785%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="1.5856%" y="69" width="0.0490%" height="15" fill="rgb(220,207,51)" fg:x="1780" fg:w="55"/><text x="1.8785%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.11%)</title><rect x="1.5775%" y="85" width="0.1051%" height="15" fill="rgb(214,216,0)" fg:x="1771" fg:w="118"/><text x="1.8705%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="1.5775%" y="101" width="0.1523%" height="15" fill="rgb(223,3,12)" fg:x="1771" fg:w="171"/><text x="1.8705%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="1.5775%" y="117" width="0.1568%" height="15" fill="rgb(212,116,3)" fg:x="1771" fg:w="176"/><text x="1.8705%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="1.5018%" y="133" width="0.3314%" height="15" fill="rgb(205,62,11)" fg:x="1686" fg:w="372"/><text x="1.7948%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.53%)</title><rect x="1.4341%" y="149" width="0.5291%" height="15" fill="rgb(251,84,38)" fg:x="1610" fg:w="594"/><text x="1.7271%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.08%)</title><rect x="1.9632%" y="149" width="0.0757%" height="15" fill="rgb(247,168,34)" fg:x="2204" fg:w="85"/><text x="2.2562%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="2.0390%" y="149" width="0.0490%" height="15" fill="rgb(208,32,10)" fg:x="2289" fg:w="55"/><text x="2.3319%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.06%)</title><rect x="2.0880%" y="149" width="0.0588%" height="15" fill="rgb(236,128,0)" fg:x="2344" fg:w="66"/><text x="2.3809%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="2.1467%" y="149" width="0.0579%" height="15" fill="rgb(223,32,40)" fg:x="2410" fg:w="65"/><text x="2.4397%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.36%)</title><rect x="2.2046%" y="133" width="0.3563%" height="15" fill="rgb(222,80,49)" fg:x="2475" fg:w="400"/><text x="2.4976%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="2.5610%" y="133" width="0.0143%" height="15" fill="rgb(238,191,5)" fg:x="2875" fg:w="16"/><text x="2.8539%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="2.5752%" y="117" width="0.0677%" height="15" fill="rgb(233,120,1)" fg:x="2891" fg:w="76"/><text x="2.8682%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="2.6429%" y="85" width="0.0534%" height="15" fill="rgb(245,69,44)" fg:x="2967" fg:w="60"/><text x="2.9359%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="2.6429%" y="101" width="0.0757%" height="15" fill="rgb(251,100,35)" fg:x="2967" fg:w="85"/><text x="2.9359%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.7266%" y="37" width="0.0267%" height="15" fill="rgb(247,128,39)" fg:x="3061" fg:w="30"/><text x="3.0196%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="2.7266%" y="53" width="0.0490%" height="15" fill="rgb(212,14,26)" fg:x="3061" fg:w="55"/><text x="3.0196%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.11%)</title><rect x="2.7186%" y="69" width="0.1051%" height="15" fill="rgb(248,17,46)" fg:x="3052" fg:w="118"/><text x="3.0116%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="2.7186%" y="85" width="0.1523%" height="15" fill="rgb(247,18,49)" fg:x="3052" fg:w="171"/><text x="3.0116%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="2.7186%" y="101" width="0.1568%" height="15" fill="rgb(250,49,38)" fg:x="3052" fg:w="176"/><text x="3.0116%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="2.6429%" y="117" width="0.3314%" height="15" fill="rgb(214,149,28)" fg:x="2967" fg:w="372"/><text x="2.9359%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.53%)</title><rect x="2.5752%" y="133" width="0.5291%" height="15" fill="rgb(254,95,3)" fg:x="2891" fg:w="594"/><text x="2.8682%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.08%)</title><rect x="3.1043%" y="133" width="0.0757%" height="15" fill="rgb(241,163,17)" fg:x="3485" fg:w="85"/><text x="3.3973%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="3.1800%" y="133" width="0.0490%" height="15" fill="rgb(209,132,18)" fg:x="3570" fg:w="55"/><text x="3.4730%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.06%)</title><rect x="3.2290%" y="117" width="0.0632%" height="15" fill="rgb(240,23,35)" fg:x="3625" fg:w="71"/><text x="3.5220%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.08%)</title><rect x="3.2923%" y="117" width="0.0811%" height="15" fill="rgb(243,67,17)" fg:x="3696" fg:w="91"/><text x="3.5852%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.06%)</title><rect x="3.3733%" y="117" width="0.0588%" height="15" fill="rgb(211,64,1)" fg:x="3787" fg:w="66"/><text x="3.6663%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.26%)</title><rect x="3.2290%" y="133" width="0.2556%" height="15" fill="rgb(212,85,15)" fg:x="3625" fg:w="287"/><text x="3.5220%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.4847%" y="133" width="0.0677%" height="15" fill="rgb(236,35,41)" fg:x="3912" fg:w="76"/><text x="3.7776%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 1.53%)</title><rect x="2.2046%" y="149" width="1.5268%" height="15" fill="rgb(217,19,23)" fg:x="2475" fg:w="1714"/><text x="2.4976%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.06%)</title><rect x="3.7314%" y="149" width="0.0588%" height="15" fill="rgb(206,54,12)" fg:x="4189" fg:w="66"/><text x="4.0244%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7902%" y="149" width="0.0116%" height="15" fill="rgb(234,189,37)" fg:x="4255" fg:w="13"/><text x="4.0832%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.8018%" y="149" width="0.0116%" height="15" fill="rgb(208,192,6)" fg:x="4268" fg:w="13"/><text x="4.0948%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.01%)</title><rect x="3.8196%" y="149" width="0.0134%" height="15" fill="rgb(220,196,39)" fg:x="4288" fg:w="15"/><text x="4.1126%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.8330%" y="133" width="0.0677%" height="15" fill="rgb(239,51,10)" fg:x="4303" fg:w="76"/><text x="4.1259%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.14%)</title><rect x="3.8330%" y="149" width="0.1416%" height="15" fill="rgb(249,7,36)" fg:x="4303" fg:w="159"/><text x="4.1259%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="3.9746%" y="117" width="0.0730%" height="15" fill="rgb(242,7,24)" fg:x="4462" fg:w="82"/><text x="4.2676%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.10%)</title><rect x="3.9746%" y="133" width="0.1042%" height="15" fill="rgb(246,66,50)" fg:x="4462" fg:w="117"/><text x="4.2676%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (185 instructions, 0.16%)</title><rect x="3.9746%" y="149" width="0.1648%" height="15" fill="rgb(238,225,29)" fg:x="4462" fg:w="185"/><text x="4.2676%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.07%)</title><rect x="4.1394%" y="149" width="0.0650%" height="15" fill="rgb(228,84,46)" fg:x="4647" fg:w="73"/><text x="4.4324%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.05%)</title><rect x="4.2044%" y="149" width="0.0508%" height="15" fill="rgb(225,147,29)" fg:x="4720" fg:w="57"/><text x="4.4974%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2552%" y="149" width="0.0730%" height="15" fill="rgb(209,75,1)" fg:x="4777" fg:w="82"/><text x="4.5482%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.3282%" y="149" width="0.0730%" height="15" fill="rgb(253,1,2)" fg:x="4859" fg:w="82"/><text x="4.6212%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="4.4031%" y="149" width="0.0722%" height="15" fill="rgb(253,19,17)" fg:x="4943" fg:w="81"/><text x="4.6960%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.34%)</title><rect x="4.4752%" y="149" width="0.3394%" height="15" fill="rgb(252,126,34)" fg:x="5024" fg:w="381"/><text x="4.7682%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.34%)</title><rect x="4.8146%" y="149" width="0.3394%" height="15" fill="rgb(250,137,10)" fg:x="5405" fg:w="381"/><text x="5.1076%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,415 instructions, 5.71%)</title><rect x="0.2548%" y="165" width="5.7143%" height="15" fill="rgb(249,177,32)" fg:x="286" fg:w="6415"/><text x="0.5477%" y="175.50">candid..</text></g><g><title>memcpy (336 instructions, 0.30%)</title><rect x="5.9690%" y="165" width="0.2993%" height="15" fill="rgb(223,44,13)" fg:x="6701" fg:w="336"/><text x="6.2620%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.03%)</title><rect x="6.2683%" y="165" width="0.0347%" height="15" fill="rgb(215,84,38)" fg:x="7037" fg:w="39"/><text x="6.5613%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="6.3031%" y="165" width="0.0730%" height="15" fill="rgb(223,34,3)" fg:x="7076" fg:w="82"/><text x="6.5960%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="6.3806%" y="133" width="0.0472%" height="15" fill="rgb(214,229,42)" fg:x="7163" fg:w="53"/><text x="6.6735%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.08%)</title><rect x="6.4278%" y="133" width="0.0793%" height="15" fill="rgb(220,151,48)" fg:x="7216" fg:w="89"/><text x="6.7207%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.14%)</title><rect x="6.5070%" y="133" width="0.1434%" height="15" fill="rgb(227,205,3)" fg:x="7305" fg:w="161"/><text x="6.8000%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="6.3806%" y="149" width="0.4810%" height="15" fill="rgb(209,54,29)" fg:x="7163" fg:w="540"/><text x="6.6735%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 0.67%)</title><rect x="6.3761%" y="165" width="0.6725%" height="15" fill="rgb(217,108,34)" fg:x="7158" fg:w="755"/><text x="6.6691%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="7.0486%" y="165" width="0.0730%" height="15" fill="rgb(228,125,2)" fg:x="7913" fg:w="82"/><text x="7.3416%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.1261%" y="133" width="0.0472%" height="15" fill="rgb(246,100,17)" fg:x="8000" fg:w="53"/><text x="7.4191%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.08%)</title><rect x="7.1733%" y="133" width="0.0793%" height="15" fill="rgb(219,100,42)" fg:x="8053" fg:w="89"/><text x="7.4663%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.14%)</title><rect x="7.2526%" y="133" width="0.1434%" height="15" fill="rgb(245,174,30)" fg:x="8142" fg:w="161"/><text x="7.5456%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="7.1261%" y="149" width="0.4810%" height="15" fill="rgb(223,11,14)" fg:x="8000" fg:w="540"/><text x="7.4191%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.06%)</title><rect x="7.6071%" y="149" width="0.0606%" height="15" fill="rgb(254,214,33)" fg:x="8540" fg:w="68"/><text x="7.9001%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="7.6677%" y="133" width="0.0722%" height="15" fill="rgb(244,38,51)" fg:x="8608" fg:w="81"/><text x="7.9607%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.10%)</title><rect x="7.6677%" y="149" width="0.0962%" height="15" fill="rgb(225,58,14)" fg:x="8608" fg:w="108"/><text x="7.9607%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 0.79%)</title><rect x="7.1217%" y="165" width="0.7919%" height="15" fill="rgb(224,112,43)" fg:x="7995" fg:w="889"/><text x="7.4146%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.9136%" y="117" width="0.0472%" height="15" fill="rgb(241,4,46)" fg:x="8884" fg:w="53"/><text x="8.2065%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.07%)</title><rect x="7.9136%" y="133" width="0.0704%" height="15" fill="rgb(217,194,14)" fg:x="8884" fg:w="79"/><text x="8.2065%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.26%)</title><rect x="7.9136%" y="149" width="0.2601%" height="15" fill="rgb(242,130,19)" fg:x="8884" fg:w="292"/><text x="8.2065%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.310 (15 instructions, 0.01%)</title><rect x="8.1737%" y="149" width="0.0134%" height="15" fill="rgb(213,53,50)" fg:x="9176" fg:w="15"/><text x="8.4666%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.43%)</title><rect x="7.9136%" y="165" width="0.4258%" height="15" fill="rgb(242,157,28)" fg:x="8884" fg:w="478"/><text x="8.2065%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.03%)</title><rect x="8.3393%" y="165" width="0.0294%" height="15" fill="rgb(207,73,7)" fg:x="9362" fg:w="33"/><text x="8.6323%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.3687%" y="149" width="0.1096%" height="15" fill="rgb(215,3,21)" fg:x="9395" fg:w="123"/><text x="8.6617%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.5024%" y="149" width="0.1096%" height="15" fill="rgb(254,198,49)" fg:x="9545" fg:w="123"/><text x="8.7953%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.27%)</title><rect x="8.3687%" y="165" width="0.2672%" height="15" fill="rgb(230,50,34)" fg:x="9395" fg:w="300"/><text x="8.6617%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="8.6360%" y="149" width="0.0249%" height="15" fill="rgb(231,106,8)" fg:x="9695" fg:w="28"/><text x="8.9289%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.09%)</title><rect x="8.6360%" y="165" width="0.0864%" height="15" fill="rgb(205,132,53)" fg:x="9695" fg:w="97"/><text x="8.9289%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.37%)</title><rect x="8.7518%" y="165" width="0.3661%" height="15" fill="rgb(239,103,45)" fg:x="9825" fg:w="411"/><text x="9.0447%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="9.1179%" y="133" width="0.0107%" height="15" fill="rgb(250,174,10)" fg:x="10236" fg:w="12"/><text x="9.4108%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="9.1286%" y="133" width="0.0722%" height="15" fill="rgb(224,170,0)" fg:x="10248" fg:w="81"/><text x="9.4215%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.15%)</title><rect x="9.2007%" y="117" width="0.1496%" height="15" fill="rgb(233,135,49)" fg:x="10329" fg:w="168"/><text x="9.4937%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.17%)</title><rect x="9.2007%" y="133" width="0.1737%" height="15" fill="rgb(211,140,27)" fg:x="10329" fg:w="195"/><text x="9.4937%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (341 instructions, 0.30%)</title><rect x="9.1179%" y="149" width="0.3038%" height="15" fill="rgb(237,103,4)" fg:x="10236" fg:w="341"/><text x="9.4108%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (375 instructions, 0.33%)</title><rect x="9.1179%" y="165" width="0.3340%" height="15" fill="rgb(249,221,44)" fg:x="10236" fg:w="375"/><text x="9.4108%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="9.4519%" y="165" width="0.1096%" height="15" fill="rgb(225,175,24)" fg:x="10611" fg:w="123"/><text x="9.7449%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,957 instructions, 9.76%)</title><rect x="0.1496%" y="181" width="9.7601%" height="15" fill="rgb(233,71,34)" fg:x="168" fg:w="10957"/><text x="0.4426%" y="191.50">ic_cdk::api:..</text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="9.9178%" y="165" width="0.1710%" height="15" fill="rgb(249,4,15)" fg:x="11134" fg:w="192"/><text x="10.2108%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="10.0888%" y="165" width="0.1710%" height="15" fill="rgb(223,66,25)" fg:x="11326" fg:w="192"/><text x="10.3818%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,598 instructions, 1.42%)</title><rect x="9.9178%" y="181" width="1.4234%" height="15" fill="rgb(205,65,31)" fg:x="11134" fg:w="1598"/><text x="10.2108%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="12.5286%" y="165" width="0.0730%" height="15" fill="rgb(222,166,25)" fg:x="14065" fg:w="82"/><text x="12.8216%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="12.6017%" y="165" width="0.1790%" height="15" fill="rgb(224,6,40)" fg:x="14147" fg:w="201"/><text x="12.8946%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="12.7807%" y="165" width="0.1790%" height="15" fill="rgb(222,95,52)" fg:x="14348" fg:w="201"/><text x="13.0737%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="12.9597%" y="165" width="0.1977%" height="15" fill="rgb(226,47,51)" fg:x="14549" fg:w="222"/><text x="13.2527%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="13.1575%" y="165" width="0.1977%" height="15" fill="rgb(234,160,50)" fg:x="14771" fg:w="222"/><text x="13.4505%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="13.3552%" y="165" width="0.0730%" height="15" fill="rgb(244,109,0)" fg:x="14993" fg:w="82"/><text x="13.6482%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="13.4283%" y="165" width="0.1790%" height="15" fill="rgb(220,151,45)" fg:x="15075" fg:w="201"/><text x="13.7213%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="13.6073%" y="165" width="0.1790%" height="15" fill="rgb(208,38,30)" fg:x="15276" fg:w="201"/><text x="13.9003%" y="175.50"></text></g><g><title>memcpy (141 instructions, 0.13%)</title><rect x="13.7864%" y="165" width="0.1256%" height="15" fill="rgb(225,28,41)" fg:x="15477" fg:w="141"/><text x="14.0793%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="13.9120%" y="165" width="0.1977%" height="15" fill="rgb(251,48,12)" fg:x="15618" fg:w="222"/><text x="14.2049%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="14.1097%" y="165" width="0.1977%" height="15" fill="rgb(211,205,45)" fg:x="15840" fg:w="222"/><text x="14.4027%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.13%)</title><rect x="14.3075%" y="165" width="0.1309%" height="15" fill="rgb(245,99,35)" fg:x="16062" fg:w="147"/><text x="14.6004%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="14.4384%" y="165" width="0.1274%" height="15" fill="rgb(251,50,44)" fg:x="16209" fg:w="143"/><text x="14.7314%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="14.5658%" y="165" width="0.1274%" height="15" fill="rgb(218,145,50)" fg:x="16352" fg:w="143"/><text x="14.8588%" y="175.50"></text></g><g><title>memmove (83 instructions, 0.07%)</title><rect x="14.6932%" y="165" width="0.0739%" height="15" fill="rgb(233,0,25)" fg:x="16495" fg:w="83"/><text x="14.9861%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="16.9486%" y="165" width="0.2512%" height="15" fill="rgb(217,51,40)" fg:x="19027" fg:w="282"/><text x="17.2416%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="17.1998%" y="165" width="0.2512%" height="15" fill="rgb(243,54,41)" fg:x="19309" fg:w="282"/><text x="17.4928%" y="175.50"></text></g><g><title>memmove (312 instructions, 0.28%)</title><rect x="18.5600%" y="165" width="0.2779%" height="15" fill="rgb(233,115,25)" fg:x="20836" fg:w="312"/><text x="18.8530%" y="175.50"></text></g><g><title>memmove (312 instructions, 0.28%)</title><rect x="18.8379%" y="165" width="0.2779%" height="15" fill="rgb(231,110,20)" fg:x="21148" fg:w="312"/><text x="19.1309%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="20.0369%" y="165" width="0.1176%" height="15" fill="rgb(245,228,47)" fg:x="22494" fg:w="132"/><text x="20.3298%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="20.1545%" y="165" width="0.1176%" height="15" fill="rgb(232,106,41)" fg:x="22626" fg:w="132"/><text x="20.4474%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="21.5948%" y="165" width="0.1710%" height="15" fill="rgb(242,35,39)" fg:x="24243" fg:w="192"/><text x="21.8878%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="21.7659%" y="165" width="0.1710%" height="15" fill="rgb(212,120,29)" fg:x="24435" fg:w="192"/><text x="22.0588%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="23.1519%" y="165" width="0.1176%" height="15" fill="rgb(251,26,2)" fg:x="25991" fg:w="132"/><text x="23.4449%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="23.2695%" y="165" width="0.1176%" height="15" fill="rgb(223,141,43)" fg:x="26123" fg:w="132"/><text x="23.5624%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="24.4417%" y="165" width="0.0730%" height="15" fill="rgb(253,219,29)" fg:x="27439" fg:w="82"/><text x="24.7347%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="24.5148%" y="165" width="0.1523%" height="15" fill="rgb(234,149,1)" fg:x="27521" fg:w="171"/><text x="24.8077%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="24.6671%" y="165" width="0.1523%" height="15" fill="rgb(233,130,12)" fg:x="27692" fg:w="171"/><text x="24.9600%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="24.8194%" y="165" width="0.1274%" height="15" fill="rgb(221,60,2)" fg:x="27863" fg:w="143"/><text x="25.1124%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="24.9468%" y="165" width="0.1274%" height="15" fill="rgb(251,29,21)" fg:x="28006" fg:w="143"/><text x="25.2397%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="26.4522%" y="165" width="0.1274%" height="15" fill="rgb(233,9,5)" fg:x="29696" fg:w="143"/><text x="26.7451%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="26.5795%" y="165" width="0.1274%" height="15" fill="rgb(239,28,52)" fg:x="29839" fg:w="143"/><text x="26.8725%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="27.9237%" y="165" width="0.1977%" height="15" fill="rgb(214,57,40)" fg:x="31348" fg:w="222"/><text x="28.2167%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="28.1215%" y="165" width="0.1977%" height="15" fill="rgb(241,23,10)" fg:x="31570" fg:w="222"/><text x="28.4144%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="29.5601%" y="165" width="0.1176%" height="15" fill="rgb(209,197,52)" fg:x="33185" fg:w="132"/><text x="29.8530%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="29.6776%" y="165" width="0.1176%" height="15" fill="rgb(207,199,34)" fg:x="33317" fg:w="132"/><text x="29.9706%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="31.0111%" y="165" width="0.0730%" height="15" fill="rgb(230,207,35)" fg:x="34814" fg:w="82"/><text x="31.3041%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="31.0842%" y="165" width="0.1523%" height="15" fill="rgb(234,82,19)" fg:x="34896" fg:w="171"/><text x="31.3771%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="31.2365%" y="165" width="0.1523%" height="15" fill="rgb(242,205,25)" fg:x="35067" fg:w="171"/><text x="31.5294%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="31.3888%" y="165" width="0.1176%" height="15" fill="rgb(226,197,31)" fg:x="35238" fg:w="132"/><text x="31.6818%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="31.5064%" y="165" width="0.1176%" height="15" fill="rgb(236,227,26)" fg:x="35370" fg:w="132"/><text x="31.7993%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="31.6240%" y="165" width="0.1443%" height="15" fill="rgb(241,119,39)" fg:x="35502" fg:w="162"/><text x="31.9169%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="31.7683%" y="165" width="0.1443%" height="15" fill="rgb(205,118,18)" fg:x="35664" fg:w="162"/><text x="32.0612%" y="175.50"></text></g><g><title>memmove (209 instructions, 0.19%)</title><rect x="31.9126%" y="165" width="0.1862%" height="15" fill="rgb(210,147,7)" fg:x="35826" fg:w="209"/><text x="32.2055%" y="175.50"></text></g><g><title>memmove (342 instructions, 0.30%)</title><rect x="33.9595%" y="165" width="0.3046%" height="15" fill="rgb(226,40,53)" fg:x="38124" fg:w="342"/><text x="34.2525%" y="175.50"></text></g><g><title>memmove (342 instructions, 0.30%)</title><rect x="34.2642%" y="165" width="0.3046%" height="15" fill="rgb(250,139,10)" fg:x="38466" fg:w="342"/><text x="34.5572%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="35.5175%" y="165" width="0.2245%" height="15" fill="rgb(241,12,24)" fg:x="39873" fg:w="252"/><text x="35.8105%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="35.7420%" y="165" width="0.2245%" height="15" fill="rgb(228,177,44)" fg:x="40125" fg:w="252"/><text x="36.0349%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="37.1004%" y="165" width="0.0730%" height="15" fill="rgb(209,223,20)" fg:x="41650" fg:w="82"/><text x="37.3933%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="37.1734%" y="165" width="0.1790%" height="15" fill="rgb(216,68,2)" fg:x="41732" fg:w="201"/><text x="37.4664%" y="175.50"></text></g><g><title>memcpy (201 instructions, 0.18%)</title><rect x="37.3525%" y="165" width="0.1790%" height="15" fill="rgb(217,49,27)" fg:x="41933" fg:w="201"/><text x="37.6454%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="37.5315%" y="165" width="0.1977%" height="15" fill="rgb(205,19,49)" fg:x="42134" fg:w="222"/><text x="37.8245%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="37.7293%" y="165" width="0.1977%" height="15" fill="rgb(231,74,27)" fg:x="42356" fg:w="222"/><text x="38.0222%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="37.9270%" y="165" width="0.1710%" height="15" fill="rgb(218,119,9)" fg:x="42578" fg:w="192"/><text x="38.2200%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="38.0980%" y="165" width="0.1710%" height="15" fill="rgb(213,90,25)" fg:x="42770" fg:w="192"/><text x="38.3910%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="38.2691%" y="165" width="0.1176%" height="15" fill="rgb(210,76,22)" fg:x="42962" fg:w="132"/><text x="38.5620%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="39.9214%" y="165" width="0.1710%" height="15" fill="rgb(245,88,4)" fg:x="44817" fg:w="192"/><text x="40.2144%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="40.0925%" y="165" width="0.1710%" height="15" fill="rgb(254,38,54)" fg:x="45009" fg:w="192"/><text x="40.3854%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="41.1836%" y="165" width="0.1977%" height="15" fill="rgb(227,139,51)" fg:x="46234" fg:w="222"/><text x="41.4766%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="41.3814%" y="165" width="0.1977%" height="15" fill="rgb(205,23,7)" fg:x="46456" fg:w="222"/><text x="41.6744%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (35,160 instructions, 31.32%)</title><rect x="11.3412%" y="181" width="31.3193%" height="15" fill="rgb(207,92,29)" fg:x="12732" fg:w="35160"/><text x="11.6342%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,333 instructions, 1.19%)</title><rect x="42.6605%" y="181" width="1.1874%" height="15" fill="rgb(244,226,31)" fg:x="47892" fg:w="1333"/><text x="42.9535%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="44.7146%" y="165" width="0.0730%" height="15" fill="rgb(218,123,13)" fg:x="50198" fg:w="82"/><text x="45.0076%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="44.7877%" y="165" width="0.1523%" height="15" fill="rgb(236,153,0)" fg:x="50280" fg:w="171"/><text x="45.0807%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="44.9400%" y="165" width="0.1523%" height="15" fill="rgb(227,18,41)" fg:x="50451" fg:w="171"/><text x="45.2330%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="45.0923%" y="165" width="0.1176%" height="15" fill="rgb(207,39,19)" fg:x="50622" fg:w="132"/><text x="45.3853%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="45.2099%" y="165" width="0.1176%" height="15" fill="rgb(247,17,49)" fg:x="50754" fg:w="132"/><text x="45.5029%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="45.3275%" y="165" width="0.0730%" height="15" fill="rgb(231,91,37)" fg:x="50886" fg:w="82"/><text x="45.6205%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="45.4005%" y="165" width="0.2058%" height="15" fill="rgb(206,146,45)" fg:x="50968" fg:w="231"/><text x="45.6935%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="45.6063%" y="165" width="0.2058%" height="15" fill="rgb(248,7,0)" fg:x="51199" fg:w="231"/><text x="45.8993%" y="175.50"></text></g><g><title>memcpy (156 instructions, 0.14%)</title><rect x="45.8121%" y="165" width="0.1390%" height="15" fill="rgb(232,158,14)" fg:x="51430" fg:w="156"/><text x="46.1050%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="45.9510%" y="165" width="0.2512%" height="15" fill="rgb(210,32,29)" fg:x="51586" fg:w="282"/><text x="46.2440%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="46.2022%" y="165" width="0.2512%" height="15" fill="rgb(247,147,1)" fg:x="51868" fg:w="282"/><text x="46.4952%" y="175.50"></text></g><g><title>memmove (177 instructions, 0.16%)</title><rect x="46.4534%" y="165" width="0.1577%" height="15" fill="rgb(240,124,24)" fg:x="52150" fg:w="177"/><text x="46.7464%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="48.4024%" y="165" width="0.1274%" height="15" fill="rgb(240,96,39)" fg:x="54338" fg:w="143"/><text x="48.6954%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="48.5298%" y="165" width="0.1274%" height="15" fill="rgb(238,80,22)" fg:x="54481" fg:w="143"/><text x="48.8228%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="49.4981%" y="165" width="0.1274%" height="15" fill="rgb(223,138,17)" fg:x="55568" fg:w="143"/><text x="49.7910%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="49.6254%" y="165" width="0.1274%" height="15" fill="rgb(245,4,23)" fg:x="55711" fg:w="143"/><text x="49.9184%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="51.0489%" y="165" width="0.2245%" height="15" fill="rgb(218,26,9)" fg:x="57309" fg:w="252"/><text x="51.3418%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="51.2733%" y="165" width="0.2245%" height="15" fill="rgb(231,172,45)" fg:x="57561" fg:w="252"/><text x="51.5663%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="52.7663%" y="165" width="0.0730%" height="15" fill="rgb(223,108,39)" fg:x="59237" fg:w="82"/><text x="53.0592%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="52.8393%" y="165" width="0.1523%" height="15" fill="rgb(248,23,26)" fg:x="59319" fg:w="171"/><text x="53.1323%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="52.9916%" y="165" width="0.1523%" height="15" fill="rgb(220,115,9)" fg:x="59490" fg:w="171"/><text x="53.2846%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="53.1440%" y="165" width="0.1274%" height="15" fill="rgb(234,141,10)" fg:x="59661" fg:w="143"/><text x="53.4369%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="53.2713%" y="165" width="0.1274%" height="15" fill="rgb(248,25,25)" fg:x="59804" fg:w="143"/><text x="53.5643%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="53.3987%" y="165" width="0.2512%" height="15" fill="rgb(216,207,31)" fg:x="59947" fg:w="282"/><text x="53.6917%" y="175.50"></text></g><g><title>memmove (282 instructions, 0.25%)</title><rect x="53.6499%" y="165" width="0.2512%" height="15" fill="rgb(247,229,52)" fg:x="60229" fg:w="282"/><text x="53.9429%" y="175.50"></text></g><g><title>memmove (177 instructions, 0.16%)</title><rect x="53.9011%" y="165" width="0.1577%" height="15" fill="rgb(249,80,14)" fg:x="60511" fg:w="177"/><text x="54.1941%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="55.4608%" y="165" width="0.0730%" height="15" fill="rgb(251,99,22)" fg:x="62262" fg:w="82"/><text x="55.7538%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="55.5339%" y="165" width="0.1523%" height="15" fill="rgb(214,104,9)" fg:x="62344" fg:w="171"/><text x="55.8268%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="55.6862%" y="165" width="0.1523%" height="15" fill="rgb(231,34,36)" fg:x="62515" fg:w="171"/><text x="55.9792%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="55.8385%" y="165" width="0.1710%" height="15" fill="rgb(207,190,36)" fg:x="62686" fg:w="192"/><text x="56.1315%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="56.0095%" y="165" width="0.1710%" height="15" fill="rgb(226,155,37)" fg:x="62878" fg:w="192"/><text x="56.3025%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="57.7465%" y="165" width="0.0730%" height="15" fill="rgb(228,144,47)" fg:x="64828" fg:w="82"/><text x="58.0395%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="57.8196%" y="165" width="0.1523%" height="15" fill="rgb(239,175,25)" fg:x="64910" fg:w="171"/><text x="58.1126%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="57.9719%" y="165" width="0.1523%" height="15" fill="rgb(228,118,37)" fg:x="65081" fg:w="171"/><text x="58.2649%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="58.1242%" y="165" width="0.1443%" height="15" fill="rgb(241,7,28)" fg:x="65252" fg:w="162"/><text x="58.4172%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="58.2685%" y="165" width="0.1443%" height="15" fill="rgb(229,37,10)" fg:x="65414" fg:w="162"/><text x="58.5615%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="58.4128%" y="165" width="0.1274%" height="15" fill="rgb(215,119,23)" fg:x="65576" fg:w="143"/><text x="58.7058%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="58.5402%" y="165" width="0.1274%" height="15" fill="rgb(228,171,40)" fg:x="65719" fg:w="143"/><text x="58.8332%" y="175.50"></text></g><g><title>memmove (83 instructions, 0.07%)</title><rect x="58.6676%" y="165" width="0.0739%" height="15" fill="rgb(227,75,53)" fg:x="65862" fg:w="83"/><text x="58.9606%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="60.2870%" y="165" width="0.2245%" height="15" fill="rgb(216,32,46)" fg:x="67680" fg:w="252"/><text x="60.5800%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="60.5115%" y="165" width="0.2245%" height="15" fill="rgb(233,114,19)" fg:x="67932" fg:w="252"/><text x="60.8044%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="61.5492%" y="165" width="0.1176%" height="15" fill="rgb(213,191,34)" fg:x="69097" fg:w="132"/><text x="61.8422%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="61.6668%" y="165" width="0.1176%" height="15" fill="rgb(250,218,12)" fg:x="69229" fg:w="132"/><text x="61.9598%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="62.8123%" y="165" width="0.0730%" height="15" fill="rgb(228,18,22)" fg:x="70515" fg:w="82"/><text x="63.1053%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="62.8854%" y="165" width="0.2058%" height="15" fill="rgb(231,96,42)" fg:x="70597" fg:w="231"/><text x="63.1783%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="63.0911%" y="165" width="0.2058%" height="15" fill="rgb(253,33,22)" fg:x="70828" fg:w="231"/><text x="63.3841%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="63.2969%" y="165" width="0.2245%" height="15" fill="rgb(232,141,47)" fg:x="71059" fg:w="252"/><text x="63.5899%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="63.5214%" y="165" width="0.2245%" height="15" fill="rgb(234,153,16)" fg:x="71311" fg:w="252"/><text x="63.8143%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="63.7458%" y="165" width="0.1443%" height="15" fill="rgb(245,206,8)" fg:x="71563" fg:w="162"/><text x="64.0388%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="65.1310%" y="165" width="0.0730%" height="15" fill="rgb(237,120,36)" fg:x="73118" fg:w="82"/><text x="65.4240%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="65.2040%" y="165" width="0.2058%" height="15" fill="rgb(216,72,28)" fg:x="73200" fg:w="231"/><text x="65.4970%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="65.4098%" y="165" width="0.2058%" height="15" fill="rgb(253,104,36)" fg:x="73431" fg:w="231"/><text x="65.7028%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="65.6156%" y="165" width="0.1274%" height="15" fill="rgb(245,172,1)" fg:x="73662" fg:w="143"/><text x="65.9085%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="65.7429%" y="165" width="0.1274%" height="15" fill="rgb(227,119,49)" fg:x="73805" fg:w="143"/><text x="66.0359%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="65.8703%" y="165" width="0.1443%" height="15" fill="rgb(250,133,39)" fg:x="73948" fg:w="162"/><text x="66.1633%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="66.0146%" y="165" width="0.1443%" height="15" fill="rgb(253,183,42)" fg:x="74110" fg:w="162"/><text x="66.3076%" y="175.50"></text></g><g><title>memmove (209 instructions, 0.19%)</title><rect x="66.1589%" y="165" width="0.1862%" height="15" fill="rgb(245,213,52)" fg:x="74272" fg:w="209"/><text x="66.4519%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="67.6029%" y="165" width="0.2245%" height="15" fill="rgb(237,181,52)" fg:x="75893" fg:w="252"/><text x="67.8958%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="67.8273%" y="165" width="0.2245%" height="15" fill="rgb(234,152,48)" fg:x="76145" fg:w="252"/><text x="68.1203%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="68.7867%" y="165" width="0.2245%" height="15" fill="rgb(223,12,2)" fg:x="77222" fg:w="252"/><text x="69.0797%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="69.0112%" y="165" width="0.2245%" height="15" fill="rgb(217,81,12)" fg:x="77474" fg:w="252"/><text x="69.3041%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="70.2369%" y="165" width="0.1274%" height="15" fill="rgb(213,217,22)" fg:x="78850" fg:w="143"/><text x="70.5298%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="70.3642%" y="165" width="0.1274%" height="15" fill="rgb(210,44,16)" fg:x="78993" fg:w="143"/><text x="70.6572%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="71.6532%" y="165" width="0.2245%" height="15" fill="rgb(205,31,49)" fg:x="80440" fg:w="252"/><text x="71.9461%" y="175.50"></text></g><g><title>memmove (252 instructions, 0.22%)</title><rect x="71.8776%" y="165" width="0.2245%" height="15" fill="rgb(230,127,21)" fg:x="80692" fg:w="252"/><text x="72.1706%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="72.9956%" y="165" width="0.1176%" height="15" fill="rgb(208,155,13)" fg:x="81947" fg:w="132"/><text x="73.2885%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="73.1131%" y="165" width="0.1176%" height="15" fill="rgb(230,48,30)" fg:x="82079" fg:w="132"/><text x="73.4061%" y="175.50"></text></g><g><title>memmove (372 instructions, 0.33%)</title><rect x="74.4733%" y="165" width="0.3314%" height="15" fill="rgb(224,162,50)" fg:x="83606" fg:w="372"/><text x="74.7663%" y="175.50"></text></g><g><title>memmove (372 instructions, 0.33%)</title><rect x="74.8047%" y="165" width="0.3314%" height="15" fill="rgb(229,112,7)" fg:x="83978" fg:w="372"/><text x="75.0977%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="76.3252%" y="165" width="0.1176%" height="15" fill="rgb(252,112,11)" fg:x="85685" fg:w="132"/><text x="76.6182%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="76.4428%" y="165" width="0.1176%" height="15" fill="rgb(217,91,25)" fg:x="85817" fg:w="132"/><text x="76.7358%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (38,149 instructions, 33.98%)</title><rect x="43.8479%" y="181" width="33.9818%" height="15" fill="rgb(254,99,40)" fg:x="49225" fg:w="38149"/><text x="44.1409%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;..</text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="79.1792%" y="165" width="0.1176%" height="15" fill="rgb(216,220,13)" fg:x="88889" fg:w="132"/><text x="79.4722%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="79.2968%" y="165" width="0.1176%" height="15" fill="rgb(250,78,34)" fg:x="89021" fg:w="132"/><text x="79.5898%" y="175.50"></text></g><g><title>memmove (342 instructions, 0.30%)</title><rect x="80.5769%" y="165" width="0.3046%" height="15" fill="rgb(227,187,51)" fg:x="90458" fg:w="342"/><text x="80.8698%" y="175.50"></text></g><g><title>memmove (342 instructions, 0.30%)</title><rect x="80.8815%" y="165" width="0.3046%" height="15" fill="rgb(248,81,46)" fg:x="90800" fg:w="342"/><text x="81.1745%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="82.2943%" y="165" width="0.1710%" height="15" fill="rgb(234,8,3)" fg:x="92386" fg:w="192"/><text x="82.5872%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="82.4653%" y="165" width="0.1710%" height="15" fill="rgb(211,142,2)" fg:x="92578" fg:w="192"/><text x="82.7583%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="83.4505%" y="165" width="0.1274%" height="15" fill="rgb(217,197,51)" fg:x="93684" fg:w="143"/><text x="83.7434%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.13%)</title><rect x="83.5778%" y="165" width="0.1274%" height="15" fill="rgb(242,17,27)" fg:x="93827" fg:w="143"/><text x="83.8708%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="84.6797%" y="165" width="0.1443%" height="15" fill="rgb(228,37,21)" fg:x="95064" fg:w="162"/><text x="84.9727%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="84.8240%" y="165" width="0.1443%" height="15" fill="rgb(239,5,49)" fg:x="95226" fg:w="162"/><text x="85.1170%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="85.9161%" y="165" width="0.1710%" height="15" fill="rgb(223,16,35)" fg:x="96452" fg:w="192"/><text x="86.2091%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="86.0871%" y="165" width="0.1710%" height="15" fill="rgb(211,203,33)" fg:x="96644" fg:w="192"/><text x="86.3801%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="87.3128%" y="165" width="0.1977%" height="15" fill="rgb(234,139,4)" fg:x="98020" fg:w="222"/><text x="87.6058%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="87.5106%" y="165" width="0.1977%" height="15" fill="rgb(248,118,50)" fg:x="98242" fg:w="222"/><text x="87.8035%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="88.5492%" y="165" width="0.1977%" height="15" fill="rgb(223,23,1)" fg:x="99408" fg:w="222"/><text x="88.8422%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="88.7470%" y="165" width="0.1977%" height="15" fill="rgb(205,1,22)" fg:x="99630" fg:w="222"/><text x="89.0399%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="90.1080%" y="165" width="0.1176%" height="15" fill="rgb(230,1,25)" fg:x="101158" fg:w="132"/><text x="90.4010%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="90.2256%" y="165" width="0.1176%" height="15" fill="rgb(209,213,11)" fg:x="101290" fg:w="132"/><text x="90.5186%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.2375%" y="165" width="0.0730%" height="15" fill="rgb(218,8,46)" fg:x="102426" fg:w="82"/><text x="91.5305%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="91.3106%" y="165" width="0.1523%" height="15" fill="rgb(222,88,19)" fg:x="102508" fg:w="171"/><text x="91.6036%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="91.4629%" y="165" width="0.1523%" height="15" fill="rgb(244,68,4)" fg:x="102679" fg:w="171"/><text x="91.7559%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.6152%" y="165" width="0.0730%" height="15" fill="rgb(238,218,36)" fg:x="102850" fg:w="82"/><text x="91.9082%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="91.6883%" y="165" width="0.1523%" height="15" fill="rgb(229,212,32)" fg:x="102932" fg:w="171"/><text x="91.9812%" y="175.50"></text></g><g><title>memcpy (171 instructions, 0.15%)</title><rect x="91.8406%" y="165" width="0.1523%" height="15" fill="rgb(227,74,16)" fg:x="103103" fg:w="171"/><text x="92.1336%" y="175.50"></text></g><g><title>memcpy (126 instructions, 0.11%)</title><rect x="91.9929%" y="165" width="0.1122%" height="15" fill="rgb(216,172,15)" fg:x="103274" fg:w="126"/><text x="92.2859%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="92.1051%" y="165" width="0.1176%" height="15" fill="rgb(241,177,22)" fg:x="103400" fg:w="132"/><text x="92.3981%" y="175.50"></text></g><g><title>memmove (132 instructions, 0.12%)</title><rect x="92.2227%" y="165" width="0.1176%" height="15" fill="rgb(232,12,53)" fg:x="103532" fg:w="132"/><text x="92.5157%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="92.3403%" y="165" width="0.1327%" height="15" fill="rgb(222,82,0)" fg:x="103664" fg:w="149"/><text x="92.6333%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="92.4730%" y="165" width="0.0730%" height="15" fill="rgb(223,79,38)" fg:x="103813" fg:w="82"/><text x="92.7660%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="92.5461%" y="165" width="0.2058%" height="15" fill="rgb(218,26,35)" fg:x="103895" fg:w="231"/><text x="92.8390%" y="175.50"></text></g><g><title>memcpy (231 instructions, 0.21%)</title><rect x="92.7518%" y="165" width="0.2058%" height="15" fill="rgb(212,90,12)" fg:x="104126" fg:w="231"/><text x="93.0448%" y="175.50"></text></g><g><title>memcpy (156 instructions, 0.14%)</title><rect x="92.9576%" y="165" width="0.1390%" height="15" fill="rgb(228,159,28)" fg:x="104357" fg:w="156"/><text x="93.2506%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="93.0966%" y="165" width="0.1443%" height="15" fill="rgb(206,16,2)" fg:x="104513" fg:w="162"/><text x="93.3895%" y="175.50"></text></g><g><title>memmove (162 instructions, 0.14%)</title><rect x="93.2409%" y="165" width="0.1443%" height="15" fill="rgb(240,176,11)" fg:x="104675" fg:w="162"/><text x="93.5338%" y="175.50"></text></g><g><title>memmove (209 instructions, 0.19%)</title><rect x="93.3852%" y="165" width="0.1862%" height="15" fill="rgb(247,120,32)" fg:x="104837" fg:w="209"/><text x="93.6781%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="93.5713%" y="165" width="0.1977%" height="15" fill="rgb(231,21,17)" fg:x="105046" fg:w="222"/><text x="93.8643%" y="175.50"></text></g><g><title>memmove (222 instructions, 0.20%)</title><rect x="93.7691%" y="165" width="0.1977%" height="15" fill="rgb(239,216,11)" fg:x="105268" fg:w="222"/><text x="94.0621%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.13%)</title><rect x="93.9668%" y="165" width="0.1309%" height="15" fill="rgb(206,112,21)" fg:x="105490" fg:w="147"/><text x="94.2598%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="96.5109%" y="165" width="0.1710%" height="15" fill="rgb(207,120,14)" fg:x="108346" fg:w="192"/><text x="96.8038%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.17%)</title><rect x="96.6819%" y="165" width="0.1710%" height="15" fill="rgb(241,215,9)" fg:x="108538" fg:w="192"/><text x="96.9749%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,361 instructions, 19.92%)</title><rect x="77.8297%" y="181" width="19.9184%" height="15" fill="rgb(232,187,12)" fg:x="87374" fg:w="22361"/><text x="78.1227%" y="191.50">alloc::collections::btree:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="97.7526%" y="133" width="0.1122%" height="15" fill="rgb(226,132,43)" fg:x="109740" fg:w="126"/><text x="98.0456%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.14%)</title><rect x="97.7526%" y="149" width="0.1363%" height="15" fill="rgb(248,181,7)" fg:x="109740" fg:w="153"/><text x="98.0456%" y="159.50"></text></g><g><title>memset (136 instructions, 0.12%)</title><rect x="97.8889%" y="149" width="0.1211%" height="15" fill="rgb(244,76,8)" fg:x="109893" fg:w="136"/><text x="98.1819%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (453 instructions, 0.40%)</title><rect x="97.7481%" y="165" width="0.4035%" height="15" fill="rgb(225,223,11)" fg:x="109735" fg:w="453"/><text x="98.0411%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.03%)</title><rect x="98.1517%" y="149" width="0.0285%" height="15" fill="rgb(215,145,14)" fg:x="110188" fg:w="32"/><text x="98.4446%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.11%)</title><rect x="98.1802%" y="117" width="0.1051%" height="15" fill="rgb(219,171,17)" fg:x="110220" fg:w="118"/><text x="98.4731%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 instructions, 0.14%)</title><rect x="98.1802%" y="133" width="0.1363%" height="15" fill="rgb(233,147,22)" fg:x="110220" fg:w="153"/><text x="98.4731%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (218 instructions, 0.19%)</title><rect x="98.1802%" y="149" width="0.1942%" height="15" fill="rgb(205,143,47)" fg:x="110220" fg:w="218"/><text x="98.4731%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.3939%" y="149" width="0.0267%" height="15" fill="rgb(216,212,20)" fg:x="110460" fg:w="30"/><text x="98.6869%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (514 instructions, 0.46%)</title><rect x="98.1517%" y="165" width="0.4579%" height="15" fill="rgb(207,117,30)" fg:x="110188" fg:w="514"/><text x="98.4446%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="98.6140%" y="165" width="0.0490%" height="15" fill="rgb(219,107,33)" fg:x="110707" fg:w="55"/><text x="98.9069%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,101 instructions, 0.98%)</title><rect x="97.7481%" y="181" width="0.9807%" height="15" fill="rgb(242,205,14)" fg:x="109735" fg:w="1101"/><text x="98.0411%" y="191.50"></text></g><g><title>btreemap::batch_put_3_::{{closure}} (111,778 instructions, 99.57%)</title><rect x="0.1496%" y="197" width="99.5680%" height="15" fill="rgb(235,56,52)" fg:x="168" fg:w="111778"/><text x="0.4426%" y="207.50">btreemap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.7176%" y="197" width="0.0107%" height="15" fill="rgb(249,138,45)" fg:x="111946" fg:w="12"/><text x="100.0106%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="99.7283%" y="197" width="0.0722%" height="15" fill="rgb(240,3,20)" fg:x="111958" fg:w="81"/><text x="100.0213%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="99.8005%" y="197" width="0.1122%" height="15" fill="rgb(217,136,37)" fg:x="112039" fg:w="126"/><text x="100.0934%" y="207.50"></text></g><g><title>all (112,263 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(239,43,46)" fg:x="0" fg:w="112263"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (112,263 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,95,6)" fg:x="0" fg:w="112263"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>