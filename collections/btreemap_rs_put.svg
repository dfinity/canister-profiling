<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="112500"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0169%" height="15" fill="rgb(225,206,4)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="0.0169%" y="197" width="0.0676%" height="15" fill="rgb(211,132,51)" fg:x="19" fg:w="76"/><text x="0.3099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="0.0844%" y="197" width="0.0631%" height="15" fill="rgb(205,36,26)" fg:x="95" fg:w="71"/><text x="0.3774%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="0.1476%" y="165" width="0.1049%" height="15" fill="rgb(205,162,15)" fg:x="166" fg:w="118"/><text x="0.4405%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.2524%" y="149" width="0.0613%" height="15" fill="rgb(209,53,27)" fg:x="284" fg:w="69"/><text x="0.5454%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="0.3138%" y="149" width="0.3609%" height="15" fill="rgb(230,5,17)" fg:x="353" fg:w="406"/><text x="0.6067%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="0.6747%" y="149" width="0.0729%" height="15" fill="rgb(253,47,19)" fg:x="759" fg:w="82"/><text x="0.9676%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7476%" y="149" width="0.0480%" height="15" fill="rgb(205,67,35)" fg:x="841" fg:w="54"/><text x="1.0405%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7956%" y="149" width="0.0480%" height="15" fill="rgb(214,84,44)" fg:x="895" fg:w="54"/><text x="1.0885%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8436%" y="149" width="0.0480%" height="15" fill="rgb(247,115,36)" fg:x="949" fg:w="54"/><text x="1.1365%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8916%" y="149" width="0.0480%" height="15" fill="rgb(254,162,42)" fg:x="1003" fg:w="54"/><text x="1.1845%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.9396%" y="149" width="0.0613%" height="15" fill="rgb(240,90,45)" fg:x="1057" fg:w="69"/><text x="1.2325%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="1.0009%" y="149" width="0.0578%" height="15" fill="rgb(231,8,52)" fg:x="1126" fg:w="65"/><text x="1.2939%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="1.0587%" y="149" width="0.3609%" height="15" fill="rgb(209,129,54)" fg:x="1191" fg:w="406"/><text x="1.3516%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="1.4196%" y="149" width="0.0142%" height="15" fill="rgb(244,193,24)" fg:x="1597" fg:w="16"/><text x="1.7125%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="1.4338%" y="133" width="0.0676%" height="15" fill="rgb(230,142,12)" fg:x="1613" fg:w="76"/><text x="1.7267%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="1.5013%" y="101" width="0.0533%" height="15" fill="rgb(222,20,47)" fg:x="1689" fg:w="60"/><text x="1.7943%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="1.5013%" y="117" width="0.0756%" height="15" fill="rgb(205,168,2)" fg:x="1689" fg:w="85"/><text x="1.7943%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="1.5849%" y="53" width="0.0267%" height="15" fill="rgb(205,177,13)" fg:x="1783" fg:w="30"/><text x="1.8779%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="1.5849%" y="69" width="0.0489%" height="15" fill="rgb(252,119,50)" fg:x="1783" fg:w="55"/><text x="1.8779%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="1.5769%" y="85" width="0.1049%" height="15" fill="rgb(211,108,15)" fg:x="1774" fg:w="118"/><text x="1.8699%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="1.5769%" y="101" width="0.1520%" height="15" fill="rgb(205,171,15)" fg:x="1774" fg:w="171"/><text x="1.8699%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="1.5769%" y="117" width="0.1564%" height="15" fill="rgb(245,195,30)" fg:x="1774" fg:w="176"/><text x="1.8699%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="1.5013%" y="133" width="0.3307%" height="15" fill="rgb(219,173,29)" fg:x="1689" fg:w="372"/><text x="1.7943%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="1.4338%" y="149" width="0.5236%" height="15" fill="rgb(250,117,31)" fg:x="1613" fg:w="589"/><text x="1.7267%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="1.9573%" y="149" width="0.0729%" height="15" fill="rgb(209,223,4)" fg:x="2202" fg:w="82"/><text x="2.2503%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="2.0302%" y="149" width="0.0489%" height="15" fill="rgb(215,178,23)" fg:x="2284" fg:w="55"/><text x="2.3232%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="2.0791%" y="149" width="0.0560%" height="15" fill="rgb(233,32,45)" fg:x="2339" fg:w="63"/><text x="2.3721%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="2.1351%" y="149" width="0.0578%" height="15" fill="rgb(208,158,31)" fg:x="2402" fg:w="65"/><text x="2.4281%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="2.1929%" y="133" width="0.3609%" height="15" fill="rgb(238,154,3)" fg:x="2467" fg:w="406"/><text x="2.4859%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="2.5538%" y="133" width="0.0142%" height="15" fill="rgb(239,19,47)" fg:x="2873" fg:w="16"/><text x="2.8467%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="2.5680%" y="117" width="0.0676%" height="15" fill="rgb(224,14,22)" fg:x="2889" fg:w="76"/><text x="2.8610%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="2.6356%" y="85" width="0.0533%" height="15" fill="rgb(228,221,52)" fg:x="2965" fg:w="60"/><text x="2.9285%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="2.6356%" y="101" width="0.0756%" height="15" fill="rgb(236,203,26)" fg:x="2965" fg:w="85"/><text x="2.9285%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.7191%" y="37" width="0.0267%" height="15" fill="rgb(236,178,42)" fg:x="3059" fg:w="30"/><text x="3.0121%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="2.7191%" y="53" width="0.0489%" height="15" fill="rgb(239,115,45)" fg:x="3059" fg:w="55"/><text x="3.0121%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="2.7111%" y="69" width="0.1049%" height="15" fill="rgb(228,177,19)" fg:x="3050" fg:w="118"/><text x="3.0041%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="2.7111%" y="85" width="0.1520%" height="15" fill="rgb(246,96,46)" fg:x="3050" fg:w="171"/><text x="3.0041%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="2.7111%" y="101" width="0.1564%" height="15" fill="rgb(214,89,30)" fg:x="3050" fg:w="176"/><text x="3.0041%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="2.6356%" y="117" width="0.3307%" height="15" fill="rgb(226,165,41)" fg:x="2965" fg:w="372"/><text x="2.9285%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="2.5680%" y="133" width="0.5236%" height="15" fill="rgb(236,152,24)" fg:x="2889" fg:w="589"/><text x="2.8610%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="3.0916%" y="133" width="0.0729%" height="15" fill="rgb(248,149,21)" fg:x="3478" fg:w="82"/><text x="3.3845%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="3.1644%" y="133" width="0.0489%" height="15" fill="rgb(235,18,24)" fg:x="3560" fg:w="55"/><text x="3.4574%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="3.2133%" y="117" width="0.0613%" height="15" fill="rgb(219,42,6)" fg:x="3615" fg:w="69"/><text x="3.5063%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.08%)</title><rect x="3.2747%" y="117" width="0.0809%" height="15" fill="rgb(211,85,53)" fg:x="3684" fg:w="91"/><text x="3.5676%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.3556%" y="117" width="0.0560%" height="15" fill="rgb(209,63,40)" fg:x="3775" fg:w="63"/><text x="3.6485%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.25%)</title><rect x="3.2133%" y="133" width="0.2507%" height="15" fill="rgb(245,11,24)" fg:x="3615" fg:w="282"/><text x="3.5063%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.4640%" y="133" width="0.0676%" height="15" fill="rgb(246,55,36)" fg:x="3897" fg:w="76"/><text x="3.7570%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 1.52%)</title><rect x="2.1929%" y="149" width="1.5191%" height="15" fill="rgb(229,93,44)" fg:x="2467" fg:w="1709"/><text x="2.4859%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.7120%" y="149" width="0.0560%" height="15" fill="rgb(208,161,22)" fg:x="4176" fg:w="63"/><text x="4.0050%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7680%" y="149" width="0.0116%" height="15" fill="rgb(249,228,14)" fg:x="4239" fg:w="13"/><text x="4.0610%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7796%" y="149" width="0.0116%" height="15" fill="rgb(206,156,15)" fg:x="4252" fg:w="13"/><text x="4.0725%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.01%)</title><rect x="3.7973%" y="149" width="0.0133%" height="15" fill="rgb(210,104,34)" fg:x="4272" fg:w="15"/><text x="4.0903%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.8107%" y="133" width="0.0676%" height="15" fill="rgb(242,91,32)" fg:x="4287" fg:w="76"/><text x="4.1036%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.14%)</title><rect x="3.8107%" y="149" width="0.1413%" height="15" fill="rgb(238,172,14)" fg:x="4287" fg:w="159"/><text x="4.1036%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="3.9520%" y="117" width="0.0729%" height="15" fill="rgb(245,188,30)" fg:x="4446" fg:w="82"/><text x="4.2450%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.10%)</title><rect x="3.9520%" y="133" width="0.1031%" height="15" fill="rgb(235,19,32)" fg:x="4446" fg:w="116"/><text x="4.2450%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.16%)</title><rect x="3.9520%" y="149" width="0.1636%" height="15" fill="rgb(208,151,13)" fg:x="4446" fg:w="184"/><text x="4.2450%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="4.1156%" y="149" width="0.0631%" height="15" fill="rgb(205,124,49)" fg:x="4630" fg:w="71"/><text x="4.4085%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.05%)</title><rect x="4.1787%" y="149" width="0.0498%" height="15" fill="rgb(241,165,54)" fg:x="4701" fg:w="56"/><text x="4.4716%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2284%" y="149" width="0.0729%" height="15" fill="rgb(237,213,5)" fg:x="4757" fg:w="82"/><text x="4.5214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.3013%" y="149" width="0.0729%" height="15" fill="rgb(240,198,36)" fg:x="4839" fg:w="82"/><text x="4.5943%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="4.3760%" y="149" width="0.0720%" height="15" fill="rgb(217,164,1)" fg:x="4923" fg:w="81"/><text x="4.6690%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.34%)</title><rect x="4.4480%" y="149" width="0.3378%" height="15" fill="rgb(233,38,54)" fg:x="5004" fg:w="380"/><text x="4.7410%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.34%)</title><rect x="4.7858%" y="149" width="0.3378%" height="15" fill="rgb(226,92,24)" fg:x="5384" fg:w="380"/><text x="5.0787%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,424 instructions, 5.71%)</title><rect x="0.2524%" y="165" width="5.7102%" height="15" fill="rgb(214,152,38)" fg:x="284" fg:w="6424"/><text x="0.5454%" y="175.50">candid..</text></g><g><title>memcpy (335 instructions, 0.30%)</title><rect x="5.9627%" y="165" width="0.2978%" height="15" fill="rgb(231,182,20)" fg:x="6708" fg:w="335"/><text x="6.2556%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.03%)</title><rect x="6.2604%" y="165" width="0.0347%" height="15" fill="rgb(237,122,51)" fg:x="7043" fg:w="39"/><text x="6.5534%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="6.2951%" y="165" width="0.0729%" height="15" fill="rgb(237,103,2)" fg:x="7082" fg:w="82"/><text x="6.5881%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="6.3724%" y="133" width="0.0471%" height="15" fill="rgb(219,43,49)" fg:x="7169" fg:w="53"/><text x="6.6654%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="6.4196%" y="133" width="0.0782%" height="15" fill="rgb(206,225,8)" fg:x="7222" fg:w="88"/><text x="6.7125%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="6.4978%" y="133" width="0.1440%" height="15" fill="rgb(227,188,38)" fg:x="7310" fg:w="162"/><text x="6.7907%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="6.3724%" y="149" width="0.4800%" height="15" fill="rgb(227,174,48)" fg:x="7169" fg:w="540"/><text x="6.6654%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.67%)</title><rect x="6.3680%" y="165" width="0.6658%" height="15" fill="rgb(219,112,30)" fg:x="7164" fg:w="749"/><text x="6.6610%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="7.0338%" y="165" width="0.0729%" height="15" fill="rgb(216,188,52)" fg:x="7913" fg:w="82"/><text x="7.3267%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.1111%" y="133" width="0.0471%" height="15" fill="rgb(225,50,5)" fg:x="8000" fg:w="53"/><text x="7.4041%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="7.1582%" y="133" width="0.0782%" height="15" fill="rgb(244,71,38)" fg:x="8053" fg:w="88"/><text x="7.4512%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="7.2364%" y="133" width="0.1440%" height="15" fill="rgb(240,9,48)" fg:x="8141" fg:w="162"/><text x="7.5294%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="7.1111%" y="149" width="0.4800%" height="15" fill="rgb(240,33,30)" fg:x="8000" fg:w="540"/><text x="7.4041%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.06%)</title><rect x="7.5911%" y="149" width="0.0604%" height="15" fill="rgb(251,81,6)" fg:x="8540" fg:w="68"/><text x="7.8841%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="7.6516%" y="133" width="0.0720%" height="15" fill="rgb(231,144,30)" fg:x="8608" fg:w="81"/><text x="7.9445%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.10%)</title><rect x="7.6516%" y="149" width="0.0960%" height="15" fill="rgb(212,142,13)" fg:x="8608" fg:w="108"/><text x="7.9445%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 0.79%)</title><rect x="7.1067%" y="165" width="0.7911%" height="15" fill="rgb(218,170,32)" fg:x="7995" fg:w="890"/><text x="7.3996%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.8978%" y="117" width="0.0471%" height="15" fill="rgb(254,86,8)" fg:x="8885" fg:w="53"/><text x="8.1907%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.07%)</title><rect x="7.8978%" y="133" width="0.0693%" height="15" fill="rgb(245,156,35)" fg:x="8885" fg:w="78"/><text x="8.1907%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.26%)</title><rect x="7.8978%" y="149" width="0.2604%" height="15" fill="rgb(207,121,10)" fg:x="8885" fg:w="293"/><text x="8.1907%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1428 (15 instructions, 0.01%)</title><rect x="8.1582%" y="149" width="0.0133%" height="15" fill="rgb(234,119,51)" fg:x="9178" fg:w="15"/><text x="8.4512%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.42%)</title><rect x="7.8978%" y="165" width="0.4249%" height="15" fill="rgb(235,77,13)" fg:x="8885" fg:w="478"/><text x="8.1907%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.04%)</title><rect x="8.3227%" y="165" width="0.0418%" height="15" fill="rgb(223,172,7)" fg:x="9363" fg:w="47"/><text x="8.6156%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.3644%" y="149" width="0.1093%" height="15" fill="rgb(215,127,0)" fg:x="9410" fg:w="123"/><text x="8.6574%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.4978%" y="149" width="0.1093%" height="15" fill="rgb(247,52,44)" fg:x="9560" fg:w="123"/><text x="8.7907%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.27%)</title><rect x="8.3644%" y="165" width="0.2667%" height="15" fill="rgb(208,16,11)" fg:x="9410" fg:w="300"/><text x="8.6574%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="8.6311%" y="149" width="0.0249%" height="15" fill="rgb(223,153,48)" fg:x="9710" fg:w="28"/><text x="8.9241%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.09%)</title><rect x="8.6311%" y="165" width="0.0862%" height="15" fill="rgb(238,5,26)" fg:x="9710" fg:w="97"/><text x="8.9241%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.36%)</title><rect x="8.7467%" y="165" width="0.3644%" height="15" fill="rgb(227,199,7)" fg:x="9840" fg:w="410"/><text x="9.0396%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="9.1111%" y="133" width="0.0107%" height="15" fill="rgb(208,124,27)" fg:x="10250" fg:w="12"/><text x="9.4041%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="9.1218%" y="133" width="0.0720%" height="15" fill="rgb(233,149,24)" fg:x="10262" fg:w="81"/><text x="9.4147%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.15%)</title><rect x="9.1938%" y="117" width="0.1493%" height="15" fill="rgb(224,215,10)" fg:x="10343" fg:w="168"/><text x="9.4867%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.17%)</title><rect x="9.1938%" y="133" width="0.1733%" height="15" fill="rgb(232,125,24)" fg:x="10343" fg:w="195"/><text x="9.4867%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (341 instructions, 0.30%)</title><rect x="9.1111%" y="149" width="0.3031%" height="15" fill="rgb(220,25,46)" fg:x="10250" fg:w="341"/><text x="9.4041%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (376 instructions, 0.33%)</title><rect x="9.1111%" y="165" width="0.3342%" height="15" fill="rgb(219,73,37)" fg:x="10250" fg:w="376"/><text x="9.4041%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="9.4453%" y="165" width="0.1093%" height="15" fill="rgb(224,74,23)" fg:x="10626" fg:w="123"/><text x="9.7383%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,974 instructions, 9.75%)</title><rect x="0.1476%" y="181" width="9.7547%" height="15" fill="rgb(207,189,20)" fg:x="166" fg:w="10974"/><text x="0.4405%" y="191.50">ic_cdk::api:..</text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="9.9067%" y="165" width="0.1724%" height="15" fill="rgb(216,95,14)" fg:x="11145" fg:w="194"/><text x="10.1996%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="10.0791%" y="165" width="0.1724%" height="15" fill="rgb(228,14,48)" fg:x="11339" fg:w="194"/><text x="10.3721%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,602 instructions, 1.42%)</title><rect x="9.9067%" y="181" width="1.4240%" height="15" fill="rgb(228,157,14)" fg:x="11145" fg:w="1602"/><text x="10.1996%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="12.5156%" y="165" width="0.0729%" height="15" fill="rgb(236,153,18)" fg:x="14080" fg:w="82"/><text x="12.8085%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.5884%" y="165" width="0.1778%" height="15" fill="rgb(217,73,15)" fg:x="14162" fg:w="200"/><text x="12.8814%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.7662%" y="165" width="0.1778%" height="15" fill="rgb(206,170,41)" fg:x="14362" fg:w="200"/><text x="13.0592%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="12.9440%" y="165" width="0.1991%" height="15" fill="rgb(254,110,45)" fg:x="14562" fg:w="224"/><text x="13.2370%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.1431%" y="165" width="0.1991%" height="15" fill="rgb(237,140,16)" fg:x="14786" fg:w="224"/><text x="13.4361%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="13.3422%" y="165" width="0.0729%" height="15" fill="rgb(229,130,4)" fg:x="15010" fg:w="82"/><text x="13.6352%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.4151%" y="165" width="0.1778%" height="15" fill="rgb(226,59,18)" fg:x="15092" fg:w="200"/><text x="13.7081%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.5929%" y="165" width="0.1778%" height="15" fill="rgb(240,112,51)" fg:x="15292" fg:w="200"/><text x="13.8859%" y="175.50"></text></g><g><title>memcpy (140 instructions, 0.12%)</title><rect x="13.7707%" y="165" width="0.1244%" height="15" fill="rgb(247,175,43)" fg:x="15492" fg:w="140"/><text x="14.0636%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.8951%" y="165" width="0.1991%" height="15" fill="rgb(209,62,12)" fg:x="15632" fg:w="224"/><text x="14.1881%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="14.0942%" y="165" width="0.1991%" height="15" fill="rgb(210,127,37)" fg:x="15856" fg:w="224"/><text x="14.3872%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="14.2933%" y="165" width="0.1324%" height="15" fill="rgb(244,38,29)" fg:x="16080" fg:w="149"/><text x="14.5863%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.4258%" y="165" width="0.1280%" height="15" fill="rgb(239,207,46)" fg:x="16229" fg:w="144"/><text x="14.7187%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.5538%" y="165" width="0.1280%" height="15" fill="rgb(250,154,0)" fg:x="16373" fg:w="144"/><text x="14.8467%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="14.6818%" y="165" width="0.0747%" height="15" fill="rgb(243,206,48)" fg:x="16517" fg:w="84"/><text x="14.9747%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="16.9333%" y="165" width="0.2524%" height="15" fill="rgb(237,188,4)" fg:x="19050" fg:w="284"/><text x="17.2263%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="17.1858%" y="165" width="0.2524%" height="15" fill="rgb(247,108,7)" fg:x="19334" fg:w="284"/><text x="17.4787%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.5449%" y="165" width="0.2791%" height="15" fill="rgb(228,36,16)" fg:x="20863" fg:w="314"/><text x="18.8379%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.8240%" y="165" width="0.2791%" height="15" fill="rgb(234,7,52)" fg:x="21177" fg:w="314"/><text x="19.1170%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.0222%" y="165" width="0.1191%" height="15" fill="rgb(240,225,18)" fg:x="22525" fg:w="134"/><text x="20.3152%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.1413%" y="165" width="0.1191%" height="15" fill="rgb(247,35,24)" fg:x="22659" fg:w="134"/><text x="20.4343%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.5804%" y="165" width="0.1724%" height="15" fill="rgb(252,135,31)" fg:x="24278" fg:w="194"/><text x="21.8734%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.7529%" y="165" width="0.1724%" height="15" fill="rgb(248,161,46)" fg:x="24472" fg:w="194"/><text x="22.0459%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.1378%" y="165" width="0.1191%" height="15" fill="rgb(215,144,19)" fg:x="26030" fg:w="134"/><text x="23.4307%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.2569%" y="165" width="0.1191%" height="15" fill="rgb(226,134,10)" fg:x="26164" fg:w="134"/><text x="23.5499%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="24.4284%" y="165" width="0.0729%" height="15" fill="rgb(234,141,34)" fg:x="27482" fg:w="82"/><text x="24.7214%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.5013%" y="165" width="0.1511%" height="15" fill="rgb(206,30,36)" fg:x="27564" fg:w="170"/><text x="24.7943%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.6524%" y="165" width="0.1511%" height="15" fill="rgb(247,155,31)" fg:x="27734" fg:w="170"/><text x="24.9454%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.8036%" y="165" width="0.1280%" height="15" fill="rgb(206,195,30)" fg:x="27904" fg:w="144"/><text x="25.0965%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.9316%" y="165" width="0.1280%" height="15" fill="rgb(244,71,36)" fg:x="28048" fg:w="144"/><text x="25.2245%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.4347%" y="165" width="0.1280%" height="15" fill="rgb(230,46,29)" fg:x="29739" fg:w="144"/><text x="26.7276%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.5627%" y="165" width="0.1280%" height="15" fill="rgb(228,23,36)" fg:x="29883" fg:w="144"/><text x="26.8556%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="27.9049%" y="165" width="0.1991%" height="15" fill="rgb(228,186,52)" fg:x="31393" fg:w="224"/><text x="28.1979%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="28.1040%" y="165" width="0.1991%" height="15" fill="rgb(210,39,10)" fg:x="31617" fg:w="224"/><text x="28.3970%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.5413%" y="165" width="0.1191%" height="15" fill="rgb(246,193,4)" fg:x="33234" fg:w="134"/><text x="29.8343%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.6604%" y="165" width="0.1191%" height="15" fill="rgb(215,145,47)" fg:x="33368" fg:w="134"/><text x="29.9534%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="30.9929%" y="165" width="0.0729%" height="15" fill="rgb(212,215,50)" fg:x="34867" fg:w="82"/><text x="31.2859%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.0658%" y="165" width="0.1511%" height="15" fill="rgb(212,13,53)" fg:x="34949" fg:w="170"/><text x="31.3587%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.2169%" y="165" width="0.1511%" height="15" fill="rgb(243,132,41)" fg:x="35119" fg:w="170"/><text x="31.5099%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.3680%" y="165" width="0.1191%" height="15" fill="rgb(234,131,16)" fg:x="35289" fg:w="134"/><text x="31.6610%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.4871%" y="165" width="0.1191%" height="15" fill="rgb(205,169,32)" fg:x="35423" fg:w="134"/><text x="31.7801%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.6062%" y="165" width="0.1458%" height="15" fill="rgb(209,41,52)" fg:x="35557" fg:w="164"/><text x="31.8992%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.7520%" y="165" width="0.1458%" height="15" fill="rgb(207,97,9)" fg:x="35721" fg:w="164"/><text x="32.0450%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="31.8978%" y="165" width="0.1840%" height="15" fill="rgb(208,53,8)" fg:x="35885" fg:w="207"/><text x="32.1907%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="33.9387%" y="165" width="0.3058%" height="15" fill="rgb(250,91,15)" fg:x="38181" fg:w="344"/><text x="34.2316%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="34.2444%" y="165" width="0.3058%" height="15" fill="rgb(222,211,36)" fg:x="38525" fg:w="344"/><text x="34.5374%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.4969%" y="165" width="0.2258%" height="15" fill="rgb(208,59,41)" fg:x="39934" fg:w="254"/><text x="35.7899%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.7227%" y="165" width="0.2258%" height="15" fill="rgb(240,159,24)" fg:x="40188" fg:w="254"/><text x="36.0156%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="37.0800%" y="165" width="0.0729%" height="15" fill="rgb(227,149,52)" fg:x="41715" fg:w="82"/><text x="37.3730%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.1529%" y="165" width="0.1778%" height="15" fill="rgb(241,198,13)" fg:x="41797" fg:w="200"/><text x="37.4459%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.3307%" y="165" width="0.1778%" height="15" fill="rgb(231,171,37)" fg:x="41997" fg:w="200"/><text x="37.6236%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.5084%" y="165" width="0.1991%" height="15" fill="rgb(246,68,54)" fg:x="42197" fg:w="224"/><text x="37.8014%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.7076%" y="165" width="0.1991%" height="15" fill="rgb(241,91,38)" fg:x="42421" fg:w="224"/><text x="38.0005%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="37.9067%" y="165" width="0.1724%" height="15" fill="rgb(241,48,17)" fg:x="42645" fg:w="194"/><text x="38.1996%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="38.0791%" y="165" width="0.1724%" height="15" fill="rgb(232,41,36)" fg:x="42839" fg:w="194"/><text x="38.3721%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="38.2516%" y="165" width="0.1191%" height="15" fill="rgb(254,202,2)" fg:x="43033" fg:w="134"/><text x="38.5445%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="39.9022%" y="165" width="0.1724%" height="15" fill="rgb(245,113,45)" fg:x="44890" fg:w="194"/><text x="40.1952%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="40.0747%" y="165" width="0.1724%" height="15" fill="rgb(222,163,24)" fg:x="45084" fg:w="194"/><text x="40.3676%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.1653%" y="165" width="0.1991%" height="15" fill="rgb(246,199,53)" fg:x="46311" fg:w="224"/><text x="41.4583%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.3644%" y="165" width="0.1991%" height="15" fill="rgb(214,0,33)" fg:x="46535" fg:w="224"/><text x="41.6574%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (35,226 instructions, 31.31%)</title><rect x="11.3307%" y="181" width="31.3120%" height="15" fill="rgb(205,78,34)" fg:x="12747" fg:w="35226"/><text x="11.6236%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,333 instructions, 1.18%)</title><rect x="42.6427%" y="181" width="1.1849%" height="15" fill="rgb(205,222,41)" fg:x="47973" fg:w="1333"/><text x="42.9356%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="44.6924%" y="165" width="0.0729%" height="15" fill="rgb(245,219,22)" fg:x="50279" fg:w="82"/><text x="44.9854%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.7653%" y="165" width="0.1511%" height="15" fill="rgb(247,61,37)" fg:x="50361" fg:w="170"/><text x="45.0583%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.9164%" y="165" width="0.1511%" height="15" fill="rgb(244,91,48)" fg:x="50531" fg:w="170"/><text x="45.2094%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.0676%" y="165" width="0.1191%" height="15" fill="rgb(216,130,1)" fg:x="50701" fg:w="134"/><text x="45.3605%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.1867%" y="165" width="0.1191%" height="15" fill="rgb(209,135,39)" fg:x="50835" fg:w="134"/><text x="45.4796%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="45.3058%" y="165" width="0.0729%" height="15" fill="rgb(218,221,39)" fg:x="50969" fg:w="82"/><text x="45.5987%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.3787%" y="165" width="0.2044%" height="15" fill="rgb(227,101,5)" fg:x="51051" fg:w="230"/><text x="45.6716%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.5831%" y="165" width="0.2044%" height="15" fill="rgb(215,124,18)" fg:x="51281" fg:w="230"/><text x="45.8761%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="45.7876%" y="165" width="0.1378%" height="15" fill="rgb(222,29,51)" fg:x="51511" fg:w="155"/><text x="46.0805%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="45.9253%" y="165" width="0.2524%" height="15" fill="rgb(211,89,44)" fg:x="51666" fg:w="284"/><text x="46.2183%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="46.1778%" y="165" width="0.2524%" height="15" fill="rgb(253,58,5)" fg:x="51950" fg:w="284"/><text x="46.4707%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="46.4302%" y="165" width="0.1591%" height="15" fill="rgb(235,21,3)" fg:x="52234" fg:w="179"/><text x="46.7232%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.3769%" y="165" width="0.1280%" height="15" fill="rgb(222,45,40)" fg:x="54424" fg:w="144"/><text x="48.6699%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.5049%" y="165" width="0.1280%" height="15" fill="rgb(219,173,0)" fg:x="54568" fg:w="144"/><text x="48.7979%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.4720%" y="165" width="0.1280%" height="15" fill="rgb(224,32,20)" fg:x="55656" fg:w="144"/><text x="49.7650%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.6000%" y="165" width="0.1280%" height="15" fill="rgb(225,183,34)" fg:x="55800" fg:w="144"/><text x="49.8930%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.0213%" y="165" width="0.2258%" height="15" fill="rgb(228,168,27)" fg:x="57399" fg:w="254"/><text x="51.3143%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.2471%" y="165" width="0.2258%" height="15" fill="rgb(227,186,28)" fg:x="57653" fg:w="254"/><text x="51.5401%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="52.7387%" y="165" width="0.0729%" height="15" fill="rgb(221,205,48)" fg:x="59331" fg:w="82"/><text x="53.0316%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.8116%" y="165" width="0.1511%" height="15" fill="rgb(219,43,22)" fg:x="59413" fg:w="170"/><text x="53.1045%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.9627%" y="165" width="0.1511%" height="15" fill="rgb(220,50,5)" fg:x="59583" fg:w="170"/><text x="53.2556%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.1138%" y="165" width="0.1280%" height="15" fill="rgb(226,206,47)" fg:x="59753" fg:w="144"/><text x="53.4067%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.2418%" y="165" width="0.1280%" height="15" fill="rgb(210,202,32)" fg:x="59897" fg:w="144"/><text x="53.5347%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.3698%" y="165" width="0.2524%" height="15" fill="rgb(226,44,1)" fg:x="60041" fg:w="284"/><text x="53.6627%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.6222%" y="165" width="0.2524%" height="15" fill="rgb(210,119,4)" fg:x="60325" fg:w="284"/><text x="53.9152%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="53.8747%" y="165" width="0.1591%" height="15" fill="rgb(232,35,53)" fg:x="60609" fg:w="179"/><text x="54.1676%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="55.4329%" y="165" width="0.0729%" height="15" fill="rgb(251,168,0)" fg:x="62362" fg:w="82"/><text x="55.7259%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.5058%" y="165" width="0.1511%" height="15" fill="rgb(248,105,53)" fg:x="62444" fg:w="170"/><text x="55.7987%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.6569%" y="165" width="0.1511%" height="15" fill="rgb(215,16,1)" fg:x="62614" fg:w="170"/><text x="55.9499%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="55.8080%" y="165" width="0.1724%" height="15" fill="rgb(214,222,38)" fg:x="62784" fg:w="194"/><text x="56.1010%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="55.9804%" y="165" width="0.1724%" height="15" fill="rgb(217,145,3)" fg:x="62978" fg:w="194"/><text x="56.2734%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="57.7156%" y="165" width="0.0729%" height="15" fill="rgb(216,54,15)" fg:x="64930" fg:w="82"/><text x="58.0085%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.7884%" y="165" width="0.1511%" height="15" fill="rgb(245,124,21)" fg:x="65012" fg:w="170"/><text x="58.0814%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.9396%" y="165" width="0.1511%" height="15" fill="rgb(216,173,39)" fg:x="65182" fg:w="170"/><text x="58.2325%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.0907%" y="165" width="0.1458%" height="15" fill="rgb(219,199,36)" fg:x="65352" fg:w="164"/><text x="58.3836%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.2364%" y="165" width="0.1458%" height="15" fill="rgb(249,100,18)" fg:x="65516" fg:w="164"/><text x="58.5294%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.3822%" y="165" width="0.1280%" height="15" fill="rgb(219,56,51)" fg:x="65680" fg:w="144"/><text x="58.6752%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.5102%" y="165" width="0.1280%" height="15" fill="rgb(239,226,17)" fg:x="65824" fg:w="144"/><text x="58.8032%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="58.6382%" y="165" width="0.0747%" height="15" fill="rgb(215,122,54)" fg:x="65968" fg:w="84"/><text x="58.9312%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.2551%" y="165" width="0.2258%" height="15" fill="rgb(227,114,8)" fg:x="67787" fg:w="254"/><text x="60.5481%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.4809%" y="165" width="0.2258%" height="15" fill="rgb(228,87,36)" fg:x="68041" fg:w="254"/><text x="60.7739%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.5182%" y="165" width="0.1191%" height="15" fill="rgb(246,119,30)" fg:x="69208" fg:w="134"/><text x="61.8112%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.6373%" y="165" width="0.1191%" height="15" fill="rgb(231,212,47)" fg:x="69342" fg:w="134"/><text x="61.9303%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="62.7822%" y="165" width="0.0729%" height="15" fill="rgb(234,127,38)" fg:x="70630" fg:w="82"/><text x="63.0752%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="62.8551%" y="165" width="0.2044%" height="15" fill="rgb(252,195,3)" fg:x="70712" fg:w="230"/><text x="63.1481%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="63.0596%" y="165" width="0.2044%" height="15" fill="rgb(205,21,37)" fg:x="70942" fg:w="230"/><text x="63.3525%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.2640%" y="165" width="0.2258%" height="15" fill="rgb(240,88,9)" fg:x="71172" fg:w="254"/><text x="63.5570%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.4898%" y="165" width="0.2258%" height="15" fill="rgb(240,59,11)" fg:x="71426" fg:w="254"/><text x="63.7827%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="63.7156%" y="165" width="0.1458%" height="15" fill="rgb(210,53,50)" fg:x="71680" fg:w="164"/><text x="64.0085%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="65.0996%" y="165" width="0.0729%" height="15" fill="rgb(222,0,8)" fg:x="73237" fg:w="82"/><text x="65.3925%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.1724%" y="165" width="0.2044%" height="15" fill="rgb(254,81,25)" fg:x="73319" fg:w="230"/><text x="65.4654%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.3769%" y="165" width="0.2044%" height="15" fill="rgb(214,19,51)" fg:x="73549" fg:w="230"/><text x="65.6699%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.5813%" y="165" width="0.1280%" height="15" fill="rgb(206,150,7)" fg:x="73779" fg:w="144"/><text x="65.8743%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.7093%" y="165" width="0.1280%" height="15" fill="rgb(209,26,52)" fg:x="73923" fg:w="144"/><text x="66.0023%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.8373%" y="165" width="0.1458%" height="15" fill="rgb(222,206,3)" fg:x="74067" fg:w="164"/><text x="66.1303%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.9831%" y="165" width="0.1458%" height="15" fill="rgb(218,190,40)" fg:x="74231" fg:w="164"/><text x="66.2761%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="66.1289%" y="165" width="0.1840%" height="15" fill="rgb(228,182,26)" fg:x="74395" fg:w="207"/><text x="66.4219%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.5680%" y="165" width="0.2258%" height="15" fill="rgb(226,180,9)" fg:x="76014" fg:w="254"/><text x="67.8610%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.7938%" y="165" width="0.2258%" height="15" fill="rgb(223,161,47)" fg:x="76268" fg:w="254"/><text x="68.0867%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.7529%" y="165" width="0.2258%" height="15" fill="rgb(217,120,5)" fg:x="77347" fg:w="254"/><text x="69.0459%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.9787%" y="165" width="0.2258%" height="15" fill="rgb(230,190,32)" fg:x="77601" fg:w="254"/><text x="69.2716%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.2036%" y="165" width="0.1280%" height="15" fill="rgb(210,67,35)" fg:x="78979" fg:w="144"/><text x="70.4965%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.3316%" y="165" width="0.1280%" height="15" fill="rgb(234,30,6)" fg:x="79123" fg:w="144"/><text x="70.6245%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.6187%" y="165" width="0.2258%" height="15" fill="rgb(253,87,1)" fg:x="80571" fg:w="254"/><text x="71.9116%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.8444%" y="165" width="0.2258%" height="15" fill="rgb(231,122,4)" fg:x="80825" fg:w="254"/><text x="72.1374%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="72.9618%" y="165" width="0.1191%" height="15" fill="rgb(227,185,9)" fg:x="82082" fg:w="134"/><text x="73.2547%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="73.0809%" y="165" width="0.1191%" height="15" fill="rgb(244,203,13)" fg:x="82216" fg:w="134"/><text x="73.3739%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.4400%" y="165" width="0.3324%" height="15" fill="rgb(243,92,33)" fg:x="83745" fg:w="374"/><text x="74.7330%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.7724%" y="165" width="0.3324%" height="15" fill="rgb(249,110,39)" fg:x="84119" fg:w="374"/><text x="75.0654%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.2916%" y="165" width="0.1191%" height="15" fill="rgb(231,176,32)" fg:x="85828" fg:w="134"/><text x="76.5845%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.4107%" y="165" width="0.1191%" height="15" fill="rgb(246,56,22)" fg:x="85962" fg:w="134"/><text x="76.7036%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (38,215 instructions, 33.97%)</title><rect x="43.8276%" y="181" width="33.9689%" height="15" fill="rgb(216,50,31)" fg:x="49306" fg:w="38215"/><text x="44.1205%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;..</text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.1431%" y="165" width="0.1191%" height="15" fill="rgb(219,4,47)" fg:x="89036" fg:w="134"/><text x="79.4361%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.2622%" y="165" width="0.1191%" height="15" fill="rgb(209,16,15)" fg:x="89170" fg:w="134"/><text x="79.5552%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.5413%" y="165" width="0.3058%" height="15" fill="rgb(236,148,51)" fg:x="90609" fg:w="344"/><text x="80.8343%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.8471%" y="165" width="0.3058%" height="15" fill="rgb(214,88,47)" fg:x="90953" fg:w="344"/><text x="81.1401%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.2587%" y="165" width="0.1724%" height="15" fill="rgb(245,144,6)" fg:x="92541" fg:w="194"/><text x="82.5516%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.4311%" y="165" width="0.1724%" height="15" fill="rgb(245,135,7)" fg:x="92735" fg:w="194"/><text x="82.7241%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.4160%" y="165" width="0.1280%" height="15" fill="rgb(226,162,10)" fg:x="93843" fg:w="144"/><text x="83.7090%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.5440%" y="165" width="0.1280%" height="15" fill="rgb(238,147,42)" fg:x="93987" fg:w="144"/><text x="83.8370%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.6444%" y="165" width="0.1458%" height="15" fill="rgb(248,33,15)" fg:x="95225" fg:w="164"/><text x="84.9374%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.7902%" y="165" width="0.1458%" height="15" fill="rgb(210,85,26)" fg:x="95389" fg:w="164"/><text x="85.0832%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="85.8818%" y="165" width="0.1724%" height="15" fill="rgb(211,175,38)" fg:x="96617" fg:w="194"/><text x="86.1747%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="86.0542%" y="165" width="0.1724%" height="15" fill="rgb(231,63,27)" fg:x="96811" fg:w="194"/><text x="86.3472%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.2791%" y="165" width="0.1991%" height="15" fill="rgb(252,16,20)" fg:x="98189" fg:w="224"/><text x="87.5721%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.4782%" y="165" width="0.1991%" height="15" fill="rgb(253,97,51)" fg:x="98413" fg:w="224"/><text x="87.7712%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.5164%" y="165" width="0.1991%" height="15" fill="rgb(246,83,45)" fg:x="99581" fg:w="224"/><text x="88.8094%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.7156%" y="165" width="0.1991%" height="15" fill="rgb(227,150,3)" fg:x="99805" fg:w="224"/><text x="89.0085%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.0756%" y="165" width="0.1191%" height="15" fill="rgb(238,96,26)" fg:x="101335" fg:w="134"/><text x="90.3685%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.1947%" y="165" width="0.1191%" height="15" fill="rgb(226,63,36)" fg:x="101469" fg:w="134"/><text x="90.4876%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.2062%" y="165" width="0.0729%" height="15" fill="rgb(219,24,47)" fg:x="102607" fg:w="82"/><text x="91.4992%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.2791%" y="165" width="0.1511%" height="15" fill="rgb(237,184,5)" fg:x="102689" fg:w="170"/><text x="91.5721%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.4302%" y="165" width="0.1511%" height="15" fill="rgb(220,145,11)" fg:x="102859" fg:w="170"/><text x="91.7232%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.5813%" y="165" width="0.0729%" height="15" fill="rgb(254,168,14)" fg:x="103029" fg:w="82"/><text x="91.8743%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.6542%" y="165" width="0.1511%" height="15" fill="rgb(205,32,38)" fg:x="103111" fg:w="170"/><text x="91.9472%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.8053%" y="165" width="0.1511%" height="15" fill="rgb(211,65,47)" fg:x="103281" fg:w="170"/><text x="92.0983%" y="175.50"></text></g><g><title>memcpy (125 instructions, 0.11%)</title><rect x="91.9564%" y="165" width="0.1111%" height="15" fill="rgb(244,124,10)" fg:x="103451" fg:w="125"/><text x="92.2494%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.0676%" y="165" width="0.1191%" height="15" fill="rgb(219,3,28)" fg:x="103576" fg:w="134"/><text x="92.3605%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.1867%" y="165" width="0.1191%" height="15" fill="rgb(216,171,41)" fg:x="103710" fg:w="134"/><text x="92.4796%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.13%)</title><rect x="92.3058%" y="165" width="0.1307%" height="15" fill="rgb(233,226,19)" fg:x="103844" fg:w="147"/><text x="92.5987%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="92.4364%" y="165" width="0.0729%" height="15" fill="rgb(228,20,31)" fg:x="103991" fg:w="82"/><text x="92.7294%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.5093%" y="165" width="0.2044%" height="15" fill="rgb(227,127,18)" fg:x="104073" fg:w="230"/><text x="92.8023%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.7138%" y="165" width="0.2044%" height="15" fill="rgb(251,154,12)" fg:x="104303" fg:w="230"/><text x="93.0067%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="92.9182%" y="165" width="0.1378%" height="15" fill="rgb(233,164,39)" fg:x="104533" fg:w="155"/><text x="93.2112%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.0560%" y="165" width="0.1458%" height="15" fill="rgb(236,182,35)" fg:x="104688" fg:w="164"/><text x="93.3490%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.2018%" y="165" width="0.1458%" height="15" fill="rgb(216,9,40)" fg:x="104852" fg:w="164"/><text x="93.4947%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="93.3476%" y="165" width="0.1840%" height="15" fill="rgb(231,84,47)" fg:x="105016" fg:w="207"/><text x="93.6405%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.5316%" y="165" width="0.1991%" height="15" fill="rgb(236,141,11)" fg:x="105223" fg:w="224"/><text x="93.8245%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.7307%" y="165" width="0.1991%" height="15" fill="rgb(249,73,14)" fg:x="105447" fg:w="224"/><text x="94.0236%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="93.9298%" y="165" width="0.1324%" height="15" fill="rgb(235,14,46)" fg:x="105671" fg:w="149"/><text x="94.2227%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.4702%" y="165" width="0.1724%" height="15" fill="rgb(251,200,30)" fg:x="108529" fg:w="194"/><text x="96.7632%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.6427%" y="165" width="0.1724%" height="15" fill="rgb(223,116,43)" fg:x="108723" fg:w="194"/><text x="96.9356%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,401 instructions, 19.91%)</title><rect x="77.7964%" y="181" width="19.9120%" height="15" fill="rgb(233,144,9)" fg:x="87521" fg:w="22401"/><text x="78.0894%" y="191.50">alloc::collections::btree:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="97.7129%" y="133" width="0.1120%" height="15" fill="rgb(243,80,30)" fg:x="109927" fg:w="126"/><text x="98.0059%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.14%)</title><rect x="97.7129%" y="149" width="0.1360%" height="15" fill="rgb(229,141,3)" fg:x="109927" fg:w="153"/><text x="98.0059%" y="159.50"></text></g><g><title>memset (136 instructions, 0.12%)</title><rect x="97.8489%" y="149" width="0.1209%" height="15" fill="rgb(249,29,10)" fg:x="110080" fg:w="136"/><text x="98.1419%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (454 instructions, 0.40%)</title><rect x="97.7084%" y="165" width="0.4036%" height="15" fill="rgb(240,224,33)" fg:x="109922" fg:w="454"/><text x="98.0014%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.03%)</title><rect x="98.1120%" y="149" width="0.0284%" height="15" fill="rgb(235,100,0)" fg:x="110376" fg:w="32"/><text x="98.4050%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="98.1404%" y="117" width="0.1049%" height="15" fill="rgb(212,176,12)" fg:x="110408" fg:w="118"/><text x="98.4334%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.14%)</title><rect x="98.1404%" y="133" width="0.1351%" height="15" fill="rgb(236,137,41)" fg:x="110408" fg:w="152"/><text x="98.4334%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (217 instructions, 0.19%)</title><rect x="98.1404%" y="149" width="0.1929%" height="15" fill="rgb(242,22,6)" fg:x="110408" fg:w="217"/><text x="98.4334%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.3529%" y="149" width="0.0267%" height="15" fill="rgb(228,168,40)" fg:x="110647" fg:w="30"/><text x="98.6459%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (512 instructions, 0.46%)</title><rect x="98.1120%" y="165" width="0.4551%" height="15" fill="rgb(234,45,23)" fg:x="110376" fg:w="512"/><text x="98.4050%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="98.5716%" y="165" width="0.0489%" height="15" fill="rgb(225,70,49)" fg:x="110893" fg:w="55"/><text x="98.8645%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,100 instructions, 0.98%)</title><rect x="97.7084%" y="181" width="0.9778%" height="15" fill="rgb(218,32,22)" fg:x="109922" fg:w="1100"/><text x="98.0014%" y="191.50"></text></g><g><title>btreemap::batch_put_3_::{{closure}} (112,017 instructions, 99.57%)</title><rect x="0.1476%" y="197" width="99.5707%" height="15" fill="rgb(243,139,4)" fg:x="166" fg:w="112017"/><text x="0.4405%" y="207.50">btreemap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.7182%" y="197" width="0.0107%" height="15" fill="rgb(213,181,15)" fg:x="112183" fg:w="12"/><text x="100.0112%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="99.7289%" y="197" width="0.0720%" height="15" fill="rgb(211,110,4)" fg:x="112195" fg:w="81"/><text x="100.0219%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="99.8009%" y="197" width="0.1120%" height="15" fill="rgb(207,130,25)" fg:x="112276" fg:w="126"/><text x="100.0939%" y="207.50"></text></g><g><title>all (112,500 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,100,30)" fg:x="0" fg:w="112500"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (112,500 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(208,103,12)" fg:x="0" fg:w="112500"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>