<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="97044"><g><title>ic_cdk::setup (24 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0247%" height="15" fill="rgb(222,113,40)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="0.0247%" y="197" width="0.0855%" height="15" fill="rgb(234,18,36)" fg:x="24" fg:w="83"/><text x="0.3177%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (81 instructions, 0.08%)</title><rect x="0.1103%" y="197" width="0.0835%" height="15" fill="rgb(230,193,9)" fg:x="107" fg:w="81"/><text x="0.4032%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (114 instructions, 0.12%)</title><rect x="0.1937%" y="165" width="0.1175%" height="15" fill="rgb(244,12,16)" fg:x="188" fg:w="114"/><text x="0.4867%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="0.3112%" y="149" width="0.0845%" height="15" fill="rgb(247,218,15)" fg:x="302" fg:w="82"/><text x="0.6042%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="0.3957%" y="149" width="0.4565%" height="15" fill="rgb(250,4,37)" fg:x="384" fg:w="443"/><text x="0.6887%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="0.8522%" y="149" width="0.0979%" height="15" fill="rgb(243,112,50)" fg:x="827" fg:w="95"/><text x="1.1452%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9501%" y="149" width="0.0618%" height="15" fill="rgb(248,8,0)" fg:x="922" fg:w="60"/><text x="1.2431%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0119%" y="149" width="0.0618%" height="15" fill="rgb(212,148,8)" fg:x="982" fg:w="60"/><text x="1.3049%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0737%" y="149" width="0.0618%" height="15" fill="rgb(230,21,12)" fg:x="1042" fg:w="60"/><text x="1.3667%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.1356%" y="149" width="0.0618%" height="15" fill="rgb(244,59,11)" fg:x="1102" fg:w="60"/><text x="1.4285%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="1.1974%" y="149" width="0.0845%" height="15" fill="rgb(222,188,13)" fg:x="1162" fg:w="82"/><text x="1.4904%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="1.2819%" y="149" width="0.0721%" height="15" fill="rgb(252,49,28)" fg:x="1244" fg:w="70"/><text x="1.5749%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="1.3540%" y="149" width="0.4565%" height="15" fill="rgb(225,84,24)" fg:x="1314" fg:w="443"/><text x="1.6470%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="1.8105%" y="149" width="0.0196%" height="15" fill="rgb(213,123,48)" fg:x="1757" fg:w="19"/><text x="2.1035%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="1.8301%" y="133" width="0.0855%" height="15" fill="rgb(208,1,54)" fg:x="1776" fg:w="83"/><text x="2.1231%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="1.9156%" y="101" width="0.0690%" height="15" fill="rgb(233,48,11)" fg:x="1859" fg:w="67"/><text x="2.2086%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="1.9156%" y="117" width="0.0989%" height="15" fill="rgb(230,49,21)" fg:x="1859" fg:w="96"/><text x="2.2086%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.0146%" y="69" width="0.0113%" height="15" fill="rgb(208,208,38)" fg:x="1955" fg:w="11"/><text x="2.3075%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.0259%" y="53" width="0.0361%" height="15" fill="rgb(207,62,26)" fg:x="1966" fg:w="35"/><text x="2.3189%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="2.0259%" y="69" width="0.0659%" height="15" fill="rgb(218,82,2)" fg:x="1966" fg:w="64"/><text x="2.3189%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="2.0146%" y="85" width="0.1484%" height="15" fill="rgb(235,90,48)" fg:x="1955" fg:w="144"/><text x="2.3075%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="2.0146%" y="101" width="0.2154%" height="15" fill="rgb(254,20,23)" fg:x="1955" fg:w="209"/><text x="2.3075%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="2.0146%" y="117" width="0.2257%" height="15" fill="rgb(211,78,34)" fg:x="1955" fg:w="219"/><text x="2.3075%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.47%)</title><rect x="1.9156%" y="133" width="0.4668%" height="15" fill="rgb(217,168,11)" fg:x="1859" fg:w="453"/><text x="2.2086%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 0.69%)</title><rect x="1.8301%" y="149" width="0.6945%" height="15" fill="rgb(225,71,26)" fg:x="1776" fg:w="674"/><text x="2.1231%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="2.5246%" y="149" width="0.0979%" height="15" fill="rgb(228,208,0)" fg:x="2450" fg:w="95"/><text x="2.8176%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="2.6225%" y="149" width="0.0618%" height="15" fill="rgb(217,169,25)" fg:x="2545" fg:w="60"/><text x="2.9155%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="2.6843%" y="149" width="0.0783%" height="15" fill="rgb(237,32,21)" fg:x="2605" fg:w="76"/><text x="2.9773%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="2.7627%" y="149" width="0.0721%" height="15" fill="rgb(209,21,25)" fg:x="2681" fg:w="70"/><text x="3.0556%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="2.8348%" y="133" width="0.4565%" height="15" fill="rgb(243,62,21)" fg:x="2751" fg:w="443"/><text x="3.1278%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.2913%" y="133" width="0.0196%" height="15" fill="rgb(251,38,7)" fg:x="3194" fg:w="19"/><text x="3.5843%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="3.3109%" y="117" width="0.0855%" height="15" fill="rgb(209,91,0)" fg:x="3213" fg:w="83"/><text x="3.6038%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="3.3964%" y="85" width="0.0690%" height="15" fill="rgb(239,63,47)" fg:x="3296" fg:w="67"/><text x="3.6894%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="3.3964%" y="101" width="0.0989%" height="15" fill="rgb(216,8,41)" fg:x="3296" fg:w="96"/><text x="3.6894%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.4953%" y="53" width="0.0113%" height="15" fill="rgb(244,116,14)" fg:x="3392" fg:w="11"/><text x="3.7883%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.5067%" y="37" width="0.0361%" height="15" fill="rgb(230,180,0)" fg:x="3403" fg:w="35"/><text x="3.7996%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="3.5067%" y="53" width="0.0659%" height="15" fill="rgb(205,3,11)" fg:x="3403" fg:w="64"/><text x="3.7996%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="3.4953%" y="69" width="0.1484%" height="15" fill="rgb(218,136,21)" fg:x="3392" fg:w="144"/><text x="3.7883%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="3.4953%" y="85" width="0.2154%" height="15" fill="rgb(234,149,12)" fg:x="3392" fg:w="209"/><text x="3.7883%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="3.4953%" y="101" width="0.2257%" height="15" fill="rgb(243,6,15)" fg:x="3392" fg:w="219"/><text x="3.7883%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.47%)</title><rect x="3.3964%" y="117" width="0.4668%" height="15" fill="rgb(210,218,2)" fg:x="3296" fg:w="453"/><text x="3.6894%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 0.69%)</title><rect x="3.3109%" y="133" width="0.6945%" height="15" fill="rgb(228,7,30)" fg:x="3213" fg:w="674"/><text x="3.6038%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="4.0054%" y="133" width="0.0979%" height="15" fill="rgb(229,54,48)" fg:x="3887" fg:w="95"/><text x="4.2984%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="4.1033%" y="133" width="0.0618%" height="15" fill="rgb(229,194,42)" fg:x="3982" fg:w="60"/><text x="4.3963%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="4.1651%" y="117" width="0.0845%" height="15" fill="rgb(215,69,18)" fg:x="4042" fg:w="82"/><text x="4.4581%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.10%)</title><rect x="4.2496%" y="117" width="0.0979%" height="15" fill="rgb(254,22,8)" fg:x="4124" fg:w="95"/><text x="4.5426%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.3475%" y="117" width="0.0783%" height="15" fill="rgb(221,129,51)" fg:x="4219" fg:w="76"/><text x="4.6405%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.34%)</title><rect x="4.1651%" y="133" width="0.3401%" height="15" fill="rgb(247,150,43)" fg:x="4042" fg:w="330"/><text x="4.4581%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.5052%" y="133" width="0.0855%" height="15" fill="rgb(229,174,13)" fg:x="4372" fg:w="83"/><text x="4.7981%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 2.01%)</title><rect x="2.8348%" y="149" width="2.0063%" height="15" fill="rgb(252,168,45)" fg:x="2751" fg:w="1947"/><text x="3.1278%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.8411%" y="149" width="0.0783%" height="15" fill="rgb(250,59,31)" fg:x="4698" fg:w="76"/><text x="5.1341%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9194%" y="149" width="0.0155%" height="15" fill="rgb(239,34,48)" fg:x="4774" fg:w="15"/><text x="5.2124%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9349%" y="149" width="0.0155%" height="15" fill="rgb(253,26,41)" fg:x="4789" fg:w="15"/><text x="5.2278%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.02%)</title><rect x="4.9596%" y="149" width="0.0165%" height="15" fill="rgb(235,47,10)" fg:x="4813" fg:w="16"/><text x="5.2526%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.9761%" y="133" width="0.0855%" height="15" fill="rgb(238,204,5)" fg:x="4829" fg:w="83"/><text x="5.2691%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.18%)</title><rect x="4.9761%" y="149" width="0.1845%" height="15" fill="rgb(240,115,52)" fg:x="4829" fg:w="179"/><text x="5.2691%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.1605%" y="117" width="0.0938%" height="15" fill="rgb(233,199,28)" fg:x="5008" fg:w="91"/><text x="5.4535%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.14%)</title><rect x="5.1605%" y="133" width="0.1381%" height="15" fill="rgb(229,82,19)" fg:x="5008" fg:w="134"/><text x="5.4535%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (219 instructions, 0.23%)</title><rect x="5.1605%" y="149" width="0.2257%" height="15" fill="rgb(253,73,52)" fg:x="5008" fg:w="219"/><text x="5.4535%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (81 instructions, 0.08%)</title><rect x="5.3862%" y="149" width="0.0835%" height="15" fill="rgb(250,158,4)" fg:x="5227" fg:w="81"/><text x="5.6792%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.06%)</title><rect x="5.4697%" y="149" width="0.0649%" height="15" fill="rgb(237,223,12)" fg:x="5308" fg:w="63"/><text x="5.7627%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.5346%" y="149" width="0.0938%" height="15" fill="rgb(225,191,6)" fg:x="5371" fg:w="91"/><text x="5.8276%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.6284%" y="149" width="0.0938%" height="15" fill="rgb(224,85,3)" fg:x="5462" fg:w="91"/><text x="5.9213%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="5.7263%" y="149" width="0.0917%" height="15" fill="rgb(248,128,1)" fg:x="5557" fg:w="89"/><text x="6.0192%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="5.8180%" y="149" width="0.4410%" height="15" fill="rgb(240,187,24)" fg:x="5646" fg:w="428"/><text x="6.1109%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="6.2590%" y="149" width="0.4410%" height="15" fill="rgb(232,180,31)" fg:x="6074" fg:w="428"/><text x="6.5520%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,389 instructions, 7.61%)</title><rect x="0.3112%" y="165" width="7.6141%" height="15" fill="rgb(250,52,1)" fg:x="302" fg:w="7389"/><text x="0.6042%" y="175.50">candid::d..</text></g><g><title>memcpy (380 instructions, 0.39%)</title><rect x="7.9253%" y="165" width="0.3916%" height="15" fill="rgb(244,21,41)" fg:x="7691" fg:w="380"/><text x="8.2182%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.04%)</title><rect x="8.3168%" y="165" width="0.0402%" height="15" fill="rgb(205,99,35)" fg:x="8071" fg:w="39"/><text x="8.6098%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="8.3570%" y="165" width="0.0938%" height="15" fill="rgb(205,17,46)" fg:x="8110" fg:w="91"/><text x="8.6500%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="8.4580%" y="133" width="0.0608%" height="15" fill="rgb(236,208,23)" fg:x="8208" fg:w="59"/><text x="8.7510%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="8.5188%" y="133" width="0.0969%" height="15" fill="rgb(222,66,36)" fg:x="8267" fg:w="94"/><text x="8.8118%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="8.6157%" y="133" width="0.1783%" height="15" fill="rgb(216,131,7)" fg:x="8361" fg:w="173"/><text x="8.9086%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.60%)</title><rect x="8.4580%" y="149" width="0.5966%" height="15" fill="rgb(205,223,18)" fg:x="8208" fg:w="579"/><text x="8.7510%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 0.82%)</title><rect x="8.4508%" y="165" width="0.8223%" height="15" fill="rgb(219,8,46)" fg:x="8201" fg:w="798"/><text x="8.7438%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="9.2731%" y="165" width="0.0938%" height="15" fill="rgb(250,210,0)" fg:x="8999" fg:w="91"/><text x="9.5661%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="9.3741%" y="133" width="0.0608%" height="15" fill="rgb(227,39,33)" fg:x="9097" fg:w="59"/><text x="9.6671%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="9.4349%" y="133" width="0.0969%" height="15" fill="rgb(240,140,18)" fg:x="9156" fg:w="94"/><text x="9.7279%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="9.5318%" y="133" width="0.1783%" height="15" fill="rgb(220,153,37)" fg:x="9250" fg:w="173"/><text x="9.8247%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.60%)</title><rect x="9.3741%" y="149" width="0.5966%" height="15" fill="rgb(243,88,21)" fg:x="9097" fg:w="579"/><text x="9.6671%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="9.9707%" y="149" width="0.0793%" height="15" fill="rgb(210,13,29)" fg:x="9676" fg:w="77"/><text x="10.2637%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="10.0501%" y="133" width="0.0917%" height="15" fill="rgb(206,58,0)" fg:x="9753" fg:w="89"/><text x="10.3430%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.13%)</title><rect x="10.0501%" y="149" width="0.1278%" height="15" fill="rgb(238,198,18)" fg:x="9753" fg:w="124"/><text x="10.3430%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 0.99%)</title><rect x="9.3669%" y="165" width="0.9944%" height="15" fill="rgb(241,119,26)" fg:x="9090" fg:w="965"/><text x="9.6599%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="10.3613%" y="117" width="0.0608%" height="15" fill="rgb(223,15,50)" fg:x="10055" fg:w="59"/><text x="10.6542%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.10%)</title><rect x="10.3613%" y="133" width="0.0958%" height="15" fill="rgb(235,217,6)" fg:x="10055" fg:w="93"/><text x="10.6542%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.33%)</title><rect x="10.3613%" y="149" width="0.3256%" height="15" fill="rgb(232,141,42)" fg:x="10055" fg:w="316"/><text x="10.6542%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.653 (18 instructions, 0.02%)</title><rect x="10.6869%" y="149" width="0.0185%" height="15" fill="rgb(216,32,11)" fg:x="10371" fg:w="18"/><text x="10.9799%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.7055%" y="149" width="0.0134%" height="15" fill="rgb(250,199,23)" fg:x="10389" fg:w="13"/><text x="10.9984%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 0.55%)</title><rect x="10.3613%" y="165" width="0.5451%" height="15" fill="rgb(228,24,6)" fg:x="10055" fg:w="529"/><text x="10.6542%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.05%)</title><rect x="10.9064%" y="165" width="0.0546%" height="15" fill="rgb(225,118,49)" fg:x="10584" fg:w="53"/><text x="11.1994%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="10.9610%" y="133" width="0.0278%" height="15" fill="rgb(239,8,44)" fg:x="10637" fg:w="27"/><text x="11.2540%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.15%)</title><rect x="10.9610%" y="149" width="0.1463%" height="15" fill="rgb(241,160,39)" fg:x="10637" fg:w="142"/><text x="11.2540%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="11.1434%" y="133" width="0.0278%" height="15" fill="rgb(250,118,11)" fg:x="10814" fg:w="27"/><text x="11.4364%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.15%)</title><rect x="11.1434%" y="149" width="0.1463%" height="15" fill="rgb(247,107,4)" fg:x="10814" fg:w="142"/><text x="11.4364%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 0.36%)</title><rect x="10.9610%" y="165" width="0.3648%" height="15" fill="rgb(253,135,15)" fg:x="10637" fg:w="354"/><text x="11.2540%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.04%)</title><rect x="11.3258%" y="149" width="0.0350%" height="15" fill="rgb(253,51,16)" fg:x="10991" fg:w="34"/><text x="11.6188%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3608%" y="149" width="0.0185%" height="15" fill="rgb(241,1,22)" fg:x="11025" fg:w="18"/><text x="11.6538%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3794%" y="149" width="0.0185%" height="15" fill="rgb(228,131,13)" fg:x="11043" fg:w="18"/><text x="11.6723%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.17%)</title><rect x="11.3258%" y="165" width="0.1721%" height="15" fill="rgb(215,96,44)" fg:x="10991" fg:w="167"/><text x="11.6188%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.4979%" y="165" width="0.0134%" height="15" fill="rgb(207,157,39)" fg:x="11158" fg:w="13"/><text x="11.7908%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5113%" y="165" width="0.0134%" height="15" fill="rgb(229,60,0)" fg:x="11171" fg:w="13"/><text x="11.8042%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5247%" y="165" width="0.0134%" height="15" fill="rgb(243,86,5)" fg:x="11184" fg:w="13"/><text x="11.8176%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.45%)</title><rect x="11.5381%" y="165" width="0.4534%" height="15" fill="rgb(213,18,35)" fg:x="11197" fg:w="440"/><text x="11.8310%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="11.9987%" y="133" width="0.0917%" height="15" fill="rgb(245,114,0)" fg:x="11644" fg:w="89"/><text x="12.2916%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.0904%" y="101" width="0.0278%" height="15" fill="rgb(250,39,46)" fg:x="11733" fg:w="27"/><text x="12.3834%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.1182%" y="101" width="0.0278%" height="15" fill="rgb(244,89,3)" fg:x="11760" fg:w="27"/><text x="12.4112%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.20%)</title><rect x="12.0904%" y="117" width="0.2030%" height="15" fill="rgb(246,33,2)" fg:x="11733" fg:w="197"/><text x="12.3834%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (232 instructions, 0.24%)</title><rect x="12.0904%" y="133" width="0.2391%" height="15" fill="rgb(207,225,53)" fg:x="11733" fg:w="232"/><text x="12.3834%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="12.3295%" y="133" width="0.0134%" height="15" fill="rgb(205,193,53)" fg:x="11965" fg:w="13"/><text x="12.6224%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (403 instructions, 0.42%)</title><rect x="11.9915%" y="149" width="0.4153%" height="15" fill="rgb(238,205,50)" fg:x="11637" fg:w="403"/><text x="12.2844%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (452 instructions, 0.47%)</title><rect x="11.9915%" y="165" width="0.4658%" height="15" fill="rgb(238,106,28)" fg:x="11637" fg:w="452"/><text x="12.2844%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.4572%" y="149" width="0.0278%" height="15" fill="rgb(216,97,22)" fg:x="12089" fg:w="27"/><text x="12.7502%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.15%)</title><rect x="12.4572%" y="165" width="0.1463%" height="15" fill="rgb(223,95,35)" fg:x="12089" fg:w="142"/><text x="12.7502%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,513 instructions, 13.92%)</title><rect x="0.1937%" y="181" width="13.9246%" height="15" fill="rgb(220,150,46)" fg:x="188" fg:w="13513"/><text x="0.4867%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.1183%" y="165" width="0.2112%" height="15" fill="rgb(247,78,8)" fg:x="13701" fg:w="205"/><text x="14.4113%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.3296%" y="165" width="0.2112%" height="15" fill="rgb(222,118,18)" fg:x="13906" fg:w="205"/><text x="14.6226%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.7248%" y="165" width="0.2442%" height="15" fill="rgb(243,217,5)" fg:x="15260" fg:w="237"/><text x="16.0178%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.9690%" y="165" width="0.2442%" height="15" fill="rgb(209,213,49)" fg:x="15497" fg:w="237"/><text x="16.2620%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="17.0984%" y="165" width="0.1453%" height="15" fill="rgb(242,221,22)" fg:x="16593" fg:w="141"/><text x="17.3914%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="17.2437%" y="165" width="0.1453%" height="15" fill="rgb(221,225,17)" fg:x="16734" fg:w="141"/><text x="17.5367%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="18.4741%" y="165" width="0.0938%" height="15" fill="rgb(214,46,12)" fg:x="17928" fg:w="91"/><text x="18.7671%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="18.5679%" y="165" width="0.2556%" height="15" fill="rgb(220,210,20)" fg:x="18019" fg:w="248"/><text x="18.8608%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="18.8234%" y="165" width="0.2556%" height="15" fill="rgb(228,108,50)" fg:x="18267" fg:w="248"/><text x="19.1164%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.0790%" y="165" width="0.1783%" height="15" fill="rgb(226,78,50)" fg:x="18515" fg:w="173"/><text x="19.3719%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.2572%" y="165" width="0.1783%" height="15" fill="rgb(222,34,8)" fg:x="18688" fg:w="173"/><text x="19.5502%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.4355%" y="165" width="0.3431%" height="15" fill="rgb(211,17,42)" fg:x="18861" fg:w="333"/><text x="19.7285%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.7787%" y="165" width="0.3431%" height="15" fill="rgb(231,208,8)" fg:x="19194" fg:w="333"/><text x="20.0716%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="20.1218%" y="165" width="0.2112%" height="15" fill="rgb(230,51,46)" fg:x="19527" fg:w="205"/><text x="20.4148%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.4789%" y="165" width="0.2442%" height="15" fill="rgb(237,222,53)" fg:x="20844" fg:w="237"/><text x="21.7719%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.7231%" y="165" width="0.2442%" height="15" fill="rgb(232,101,42)" fg:x="21081" fg:w="237"/><text x="22.0161%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.6876%" y="165" width="0.1453%" height="15" fill="rgb(211,72,1)" fg:x="22017" fg:w="141"/><text x="22.9806%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.8329%" y="165" width="0.1453%" height="15" fill="rgb(226,59,7)" fg:x="22158" fg:w="141"/><text x="23.1259%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="23.9953%" y="165" width="0.1453%" height="15" fill="rgb(234,67,37)" fg:x="23286" fg:w="141"/><text x="24.2883%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="24.1406%" y="165" width="0.1453%" height="15" fill="rgb(244,15,33)" fg:x="23427" fg:w="141"/><text x="24.4336%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="25.2040%" y="165" width="0.0938%" height="15" fill="rgb(208,83,25)" fg:x="24459" fg:w="91"/><text x="25.4970%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="25.2978%" y="165" width="0.2556%" height="15" fill="rgb(250,207,18)" fg:x="24550" fg:w="248"/><text x="25.5908%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="25.5534%" y="165" width="0.2556%" height="15" fill="rgb(242,12,11)" fg:x="24798" fg:w="248"/><text x="25.8463%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="25.8089%" y="165" width="0.1453%" height="15" fill="rgb(214,133,7)" fg:x="25046" fg:w="141"/><text x="26.1019%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="25.9542%" y="165" width="0.1453%" height="15" fill="rgb(232,217,10)" fg:x="25187" fg:w="141"/><text x="26.2472%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.0995%" y="165" width="0.2442%" height="15" fill="rgb(251,105,32)" fg:x="25328" fg:w="237"/><text x="26.3925%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.3437%" y="165" width="0.2442%" height="15" fill="rgb(232,185,41)" fg:x="25565" fg:w="237"/><text x="26.6367%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="26.5879%" y="165" width="0.1618%" height="15" fill="rgb(237,18,45)" fg:x="25802" fg:w="157"/><text x="26.8809%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="27.9574%" y="165" width="0.3102%" height="15" fill="rgb(219,39,45)" fg:x="27131" fg:w="301"/><text x="28.2504%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="28.2676%" y="165" width="0.3102%" height="15" fill="rgb(214,138,51)" fg:x="27432" fg:w="301"/><text x="28.5606%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.5639%" y="165" width="0.2442%" height="15" fill="rgb(207,168,15)" fg:x="28690" fg:w="237"/><text x="29.8569%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.8081%" y="165" width="0.2442%" height="15" fill="rgb(209,29,16)" fg:x="28927" fg:w="237"/><text x="30.1011%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,710 instructions, 17.22%)</title><rect x="14.1183%" y="181" width="17.2190%" height="15" fill="rgb(243,56,25)" fg:x="13701" fg:w="16710"/><text x="14.4113%" y="191.50">alloc::collections::bt..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.2163%" y="165" width="0.2112%" height="15" fill="rgb(213,164,32)" fg:x="31264" fg:w="205"/><text x="32.5093%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.4276%" y="165" width="0.2112%" height="15" fill="rgb(205,90,17)" fg:x="31469" fg:w="205"/><text x="32.7205%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.7569%" y="165" width="0.2442%" height="15" fill="rgb(226,138,2)" fg:x="32759" fg:w="237"/><text x="34.0498%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="34.0011%" y="165" width="0.2442%" height="15" fill="rgb(242,25,49)" fg:x="32996" fg:w="237"/><text x="34.2940%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.0315%" y="165" width="0.2442%" height="15" fill="rgb(243,169,4)" fg:x="33996" fg:w="237"/><text x="35.3245%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.2758%" y="165" width="0.2442%" height="15" fill="rgb(217,97,28)" fg:x="34233" fg:w="237"/><text x="35.5687%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,982 instructions, 5.13%)</title><rect x="31.3373%" y="181" width="5.1338%" height="15" fill="rgb(237,152,40)" fg:x="30411" fg:w="4982"/><text x="31.6303%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="37.6489%" y="165" width="0.0938%" height="15" fill="rgb(252,147,9)" fg:x="36536" fg:w="91"/><text x="37.9419%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="37.7427%" y="165" width="0.2556%" height="15" fill="rgb(220,87,30)" fg:x="36627" fg:w="248"/><text x="38.0356%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="37.9982%" y="165" width="0.2556%" height="15" fill="rgb(207,141,47)" fg:x="36875" fg:w="248"/><text x="38.2912%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.2538%" y="165" width="0.1783%" height="15" fill="rgb(236,38,36)" fg:x="37123" fg:w="173"/><text x="38.5468%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.4321%" y="165" width="0.1783%" height="15" fill="rgb(227,113,14)" fg:x="37296" fg:w="173"/><text x="38.7250%" y="175.50"></text></g><g><title>memmove (221 instructions, 0.23%)</title><rect x="38.6103%" y="165" width="0.2277%" height="15" fill="rgb(213,105,10)" fg:x="37469" fg:w="221"/><text x="38.9033%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.0519%" y="165" width="0.1783%" height="15" fill="rgb(214,22,49)" fg:x="38868" fg:w="173"/><text x="40.3449%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.2302%" y="165" width="0.1783%" height="15" fill="rgb(248,220,44)" fg:x="39041" fg:w="173"/><text x="40.5232%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.7883%" y="165" width="0.1618%" height="15" fill="rgb(209,6,52)" fg:x="40553" fg:w="157"/><text x="42.0812%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.9500%" y="165" width="0.1618%" height="15" fill="rgb(223,154,12)" fg:x="40710" fg:w="157"/><text x="42.2430%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="43.0959%" y="165" width="0.0938%" height="15" fill="rgb(214,158,32)" fg:x="41822" fg:w="91"/><text x="43.3889%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="43.1897%" y="165" width="0.2556%" height="15" fill="rgb(215,93,45)" fg:x="41913" fg:w="248"/><text x="43.4827%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="43.4452%" y="165" width="0.2556%" height="15" fill="rgb(219,25,17)" fg:x="42161" fg:w="248"/><text x="43.7382%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.1403%" y="165" width="0.3102%" height="15" fill="rgb(239,226,46)" fg:x="43806" fg:w="301"/><text x="45.4333%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.4505%" y="165" width="0.3102%" height="15" fill="rgb(243,161,51)" fg:x="44107" fg:w="301"/><text x="45.7435%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="46.6459%" y="165" width="0.1453%" height="15" fill="rgb(251,139,48)" fg:x="45267" fg:w="141"/><text x="46.9388%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="46.7911%" y="165" width="0.1453%" height="15" fill="rgb(241,75,6)" fg:x="45408" fg:w="141"/><text x="47.0841%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="47.9226%" y="165" width="0.1453%" height="15" fill="rgb(222,69,51)" fg:x="46506" fg:w="141"/><text x="48.2156%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="48.0679%" y="165" width="0.1453%" height="15" fill="rgb(225,197,53)" fg:x="46647" fg:w="141"/><text x="48.3609%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.5621%" y="165" width="0.1618%" height="15" fill="rgb(228,104,54)" fg:x="48097" fg:w="157"/><text x="49.8550%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.7238%" y="165" width="0.1618%" height="15" fill="rgb(248,157,27)" fg:x="48254" fg:w="157"/><text x="50.0168%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.8367%" y="165" width="0.2112%" height="15" fill="rgb(240,127,49)" fg:x="49334" fg:w="205"/><text x="51.1297%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="51.0480%" y="165" width="0.2112%" height="15" fill="rgb(237,106,13)" fg:x="49539" fg:w="205"/><text x="51.3409%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.1135%" y="165" width="0.3102%" height="15" fill="rgb(216,194,11)" fg:x="50573" fg:w="301"/><text x="52.4064%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.4236%" y="165" width="0.3102%" height="15" fill="rgb(217,123,0)" fg:x="50874" fg:w="301"/><text x="52.7166%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.7859%" y="165" width="0.2772%" height="15" fill="rgb(215,13,9)" fg:x="52196" fg:w="269"/><text x="54.0789%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="54.0631%" y="165" width="0.2772%" height="15" fill="rgb(229,19,24)" fg:x="52465" fg:w="269"/><text x="54.3561%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.6562%" y="165" width="0.3431%" height="15" fill="rgb(249,178,42)" fg:x="54011" fg:w="333"/><text x="55.9492%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.9993%" y="165" width="0.3431%" height="15" fill="rgb(238,128,19)" fg:x="54344" fg:w="333"/><text x="56.2923%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.4276%" y="165" width="0.3102%" height="15" fill="rgb(229,135,37)" fg:x="55730" fg:w="301"/><text x="57.7205%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.7377%" y="165" width="0.3102%" height="15" fill="rgb(229,31,25)" fg:x="56031" fg:w="301"/><text x="58.0307%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,056 instructions, 22.73%)</title><rect x="36.4711%" y="181" width="22.7278%" height="15" fill="rgb(240,20,5)" fg:x="35393" fg:w="22056"/><text x="36.7641%" y="191.50">alloc::collections::btree::map..</text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.1439%" y="165" width="0.1618%" height="15" fill="rgb(242,163,39)" fg:x="58366" fg:w="157"/><text x="60.4368%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.3056%" y="165" width="0.1618%" height="15" fill="rgb(229,176,43)" fg:x="58523" fg:w="157"/><text x="60.5986%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="61.9502%" y="165" width="0.3102%" height="15" fill="rgb(243,55,44)" fg:x="60119" fg:w="301"/><text x="62.2432%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="62.2604%" y="165" width="0.3102%" height="15" fill="rgb(241,16,8)" fg:x="60420" fg:w="301"/><text x="62.5534%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="63.4887%" y="165" width="0.0938%" height="15" fill="rgb(219,26,44)" fg:x="61612" fg:w="91"/><text x="63.7817%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.5825%" y="165" width="0.1896%" height="15" fill="rgb(220,228,29)" fg:x="61703" fg:w="184"/><text x="63.8755%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.7721%" y="165" width="0.1896%" height="15" fill="rgb(227,126,6)" fg:x="61887" fg:w="184"/><text x="64.0651%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="63.9617%" y="165" width="0.1453%" height="15" fill="rgb(208,117,53)" fg:x="62071" fg:w="141"/><text x="64.2547%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.1070%" y="165" width="0.1453%" height="15" fill="rgb(211,143,49)" fg:x="62212" fg:w="141"/><text x="64.4000%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.2523%" y="165" width="0.1453%" height="15" fill="rgb(237,201,49)" fg:x="62353" fg:w="141"/><text x="64.5453%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.3976%" y="165" width="0.1453%" height="15" fill="rgb(206,112,38)" fg:x="62494" fg:w="141"/><text x="64.6906%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="64.5429%" y="165" width="0.1618%" height="15" fill="rgb(212,162,36)" fg:x="62635" fg:w="157"/><text x="64.8359%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="66.2030%" y="165" width="0.0938%" height="15" fill="rgb(236,108,49)" fg:x="64246" fg:w="91"/><text x="66.4959%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.2967%" y="165" width="0.2556%" height="15" fill="rgb(217,64,17)" fg:x="64337" fg:w="248"/><text x="66.5897%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.5523%" y="165" width="0.2556%" height="15" fill="rgb(207,118,25)" fg:x="64585" fg:w="248"/><text x="66.8453%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.8078%" y="165" width="0.2112%" height="15" fill="rgb(249,107,49)" fg:x="64833" fg:w="205"/><text x="67.1008%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="67.0191%" y="165" width="0.2112%" height="15" fill="rgb(214,141,9)" fg:x="65038" fg:w="205"/><text x="67.3121%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,973 instructions, 9.25%)</title><rect x="59.1989%" y="181" width="9.2463%" height="15" fill="rgb(219,220,28)" fg:x="57449" fg:w="8973"/><text x="59.4919%" y="191.50">alloc::coll..</text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.3902%" y="165" width="0.1783%" height="15" fill="rgb(221,156,30)" fg:x="67339" fg:w="173"/><text x="69.6831%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.5684%" y="165" width="0.1783%" height="15" fill="rgb(247,20,40)" fg:x="67512" fg:w="173"/><text x="69.8614%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.6669%" y="165" width="0.2112%" height="15" fill="rgb(237,84,36)" fg:x="68578" fg:w="205"/><text x="70.9599%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.8782%" y="165" width="0.2112%" height="15" fill="rgb(239,71,6)" fg:x="68783" fg:w="205"/><text x="71.1711%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.1085%" y="165" width="0.2442%" height="15" fill="rgb(247,226,28)" fg:x="69977" fg:w="237"/><text x="72.4015%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.3527%" y="165" width="0.2442%" height="15" fill="rgb(216,187,49)" fg:x="70214" fg:w="237"/><text x="72.6457%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.6800%" y="165" width="0.2112%" height="15" fill="rgb(229,141,18)" fg:x="71502" fg:w="205"/><text x="73.9729%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.8912%" y="165" width="0.2112%" height="15" fill="rgb(244,112,39)" fg:x="71707" fg:w="205"/><text x="74.1842%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.0536%" y="165" width="0.1783%" height="15" fill="rgb(236,174,16)" fg:x="72835" fg:w="173"/><text x="75.3466%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.2319%" y="165" width="0.1783%" height="15" fill="rgb(231,46,33)" fg:x="73008" fg:w="173"/><text x="75.5248%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.2953%" y="165" width="0.2772%" height="15" fill="rgb(236,192,25)" fg:x="74040" fg:w="269"/><text x="76.5883%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.5725%" y="165" width="0.2772%" height="15" fill="rgb(244,17,0)" fg:x="74309" fg:w="269"/><text x="76.8655%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="77.9327%" y="165" width="0.0938%" height="15" fill="rgb(245,79,27)" fg:x="75629" fg:w="91"/><text x="78.2257%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.0265%" y="165" width="0.2226%" height="15" fill="rgb(249,169,51)" fg:x="75720" fg:w="216"/><text x="78.3194%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.2490%" y="165" width="0.2226%" height="15" fill="rgb(225,112,33)" fg:x="75936" fg:w="216"/><text x="78.5420%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.4716%" y="165" width="0.2442%" height="15" fill="rgb(226,46,31)" fg:x="76152" fg:w="237"/><text x="78.7646%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.7158%" y="165" width="0.2442%" height="15" fill="rgb(205,107,31)" fg:x="76389" fg:w="237"/><text x="79.0088%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="78.9601%" y="165" width="0.1453%" height="15" fill="rgb(253,203,54)" fg:x="76626" fg:w="141"/><text x="79.2530%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="79.1054%" y="165" width="0.1453%" height="15" fill="rgb(227,119,41)" fg:x="76767" fg:w="141"/><text x="79.3983%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="79.2506%" y="165" width="0.1618%" height="15" fill="rgb(215,9,46)" fg:x="76908" fg:w="157"/><text x="79.5436%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.0406%" y="165" width="0.2442%" height="15" fill="rgb(249,33,44)" fg:x="78645" fg:w="237"/><text x="81.3335%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.2848%" y="165" width="0.2442%" height="15" fill="rgb(242,47,9)" fg:x="78882" fg:w="237"/><text x="81.5777%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.5481%" y="165" width="0.2442%" height="15" fill="rgb(205,120,28)" fg:x="80108" fg:w="237"/><text x="82.8411%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.7923%" y="165" width="0.2442%" height="15" fill="rgb(243,6,32)" fg:x="80345" fg:w="237"/><text x="83.0853%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="83.8228%" y="165" width="0.0938%" height="15" fill="rgb(235,30,4)" fg:x="81345" fg:w="91"/><text x="84.1158%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.9166%" y="165" width="0.2556%" height="15" fill="rgb(238,222,2)" fg:x="81436" fg:w="248"/><text x="84.2095%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="84.1721%" y="165" width="0.2556%" height="15" fill="rgb(233,46,19)" fg:x="81684" fg:w="248"/><text x="84.4651%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.4277%" y="165" width="0.1783%" height="15" fill="rgb(252,95,35)" fg:x="81932" fg:w="173"/><text x="84.7207%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.6060%" y="165" width="0.1783%" height="15" fill="rgb(217,218,50)" fg:x="82105" fg:w="173"/><text x="84.8989%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.7842%" y="165" width="0.2772%" height="15" fill="rgb(226,223,34)" fg:x="82278" fg:w="269"/><text x="85.0772%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="85.0614%" y="165" width="0.2772%" height="15" fill="rgb(243,73,46)" fg:x="82547" fg:w="269"/><text x="85.3544%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="85.3386%" y="165" width="0.1783%" height="15" fill="rgb(208,133,52)" fg:x="82816" fg:w="173"/><text x="85.6316%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.0770%" y="165" width="0.2112%" height="15" fill="rgb(248,181,3)" fg:x="84503" fg:w="205"/><text x="87.3700%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.2882%" y="165" width="0.2112%" height="15" fill="rgb(229,159,42)" fg:x="84708" fg:w="205"/><text x="87.5812%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.4506%" y="165" width="0.1783%" height="15" fill="rgb(218,174,28)" fg:x="85836" fg:w="173"/><text x="88.7436%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.6289%" y="165" width="0.1783%" height="15" fill="rgb(212,178,0)" fg:x="86009" fg:w="173"/><text x="88.9218%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.7253%" y="165" width="0.2442%" height="15" fill="rgb(251,23,17)" fg:x="87073" fg:w="237"/><text x="90.0182%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.9695%" y="165" width="0.2442%" height="15" fill="rgb(209,131,30)" fg:x="87310" fg:w="237"/><text x="90.2625%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.4307%" y="165" width="0.2442%" height="15" fill="rgb(210,133,7)" fg:x="88728" fg:w="237"/><text x="91.7237%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.6749%" y="165" width="0.2442%" height="15" fill="rgb(240,132,28)" fg:x="88965" fg:w="237"/><text x="91.9679%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.7054%" y="165" width="0.2442%" height="15" fill="rgb(225,157,15)" fg:x="89965" fg:w="237"/><text x="92.9983%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.9496%" y="165" width="0.2442%" height="15" fill="rgb(209,115,39)" fg:x="90202" fg:w="237"/><text x="93.2426%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,716 instructions, 25.47%)</title><rect x="68.4452%" y="181" width="25.4689%" height="15" fill="rgb(215,180,0)" fg:x="66422" fg:w="24716"/><text x="68.7382%" y="191.50">alloc::collections::btree::map::BT..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,077 instructions, 1.11%)</title><rect x="93.9141%" y="181" width="1.1098%" height="15" fill="rgb(207,95,38)" fg:x="91138" fg:w="1077"/><text x="94.2071%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="95.0311%" y="133" width="0.0278%" height="15" fill="rgb(249,167,21)" fg:x="92222" fg:w="27"/><text x="95.3241%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.15%)</title><rect x="95.0311%" y="149" width="0.1484%" height="15" fill="rgb(252,25,25)" fg:x="92222" fg:w="144"/><text x="95.3241%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (179 instructions, 0.18%)</title><rect x="95.0311%" y="165" width="0.1845%" height="15" fill="rgb(252,25,40)" fg:x="92222" fg:w="179"/><text x="95.3241%" y="175.50"></text></g><g><title>memset (152 instructions, 0.16%)</title><rect x="95.2156%" y="165" width="0.1566%" height="15" fill="rgb(206,134,19)" fg:x="92401" fg:w="152"/><text x="95.5085%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (509 instructions, 0.52%)</title><rect x="95.0239%" y="181" width="0.5245%" height="15" fill="rgb(207,43,42)" fg:x="92215" fg:w="509"/><text x="95.3169%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.53%)</title><rect x="95.5484%" y="165" width="0.5338%" height="15" fill="rgb(210,91,24)" fg:x="92724" fg:w="518"/><text x="95.8414%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (114 instructions, 0.12%)</title><rect x="96.0822%" y="117" width="0.1175%" height="15" fill="rgb(218,115,24)" fg:x="93242" fg:w="114"/><text x="96.3752%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (157 instructions, 0.16%)</title><rect x="96.0822%" y="133" width="0.1618%" height="15" fill="rgb(244,124,12)" fg:x="93242" fg:w="157"/><text x="96.3752%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (239 instructions, 0.25%)</title><rect x="96.0822%" y="149" width="0.2463%" height="15" fill="rgb(235,61,24)" fg:x="93242" fg:w="239"/><text x="96.3752%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.3285%" y="149" width="0.0155%" height="15" fill="rgb(226,200,33)" fg:x="93481" fg:w="15"/><text x="96.6214%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.3439%" y="149" width="0.0155%" height="15" fill="rgb(221,183,26)" fg:x="93496" fg:w="15"/><text x="96.6369%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (457 instructions, 0.47%)</title><rect x="96.0822%" y="165" width="0.4709%" height="15" fill="rgb(219,209,9)" fg:x="93242" fg:w="457"/><text x="96.3752%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.53%)</title><rect x="96.5531%" y="165" width="0.5317%" height="15" fill="rgb(205,189,4)" fg:x="93699" fg:w="516"/><text x="96.8461%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,591 instructions, 1.64%)</title><rect x="95.5484%" y="181" width="1.6395%" height="15" fill="rgb(219,35,52)" fg:x="92724" fg:w="1591"/><text x="95.8414%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="97.1951%" y="165" width="0.0618%" height="15" fill="rgb(253,98,49)" fg:x="94322" fg:w="60"/><text x="97.4881%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (133 instructions, 0.14%)</title><rect x="97.1879%" y="181" width="0.1371%" height="15" fill="rgb(228,111,33)" fg:x="94315" fg:w="133"/><text x="97.4808%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_put::{{closure}} (96,464 instructions, 99.40%)</title><rect x="0.1937%" y="197" width="99.4023%" height="15" fill="rgb(230,43,51)" fg:x="188" fg:w="96464"/><text x="0.4867%" y="207.50">btreemap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.01%)</title><rect x="99.5961%" y="197" width="0.0144%" height="15" fill="rgb(205,106,51)" fg:x="96652" fg:w="14"/><text x="99.8890%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.7032%" y="181" width="0.0278%" height="15" fill="rgb(229,169,15)" fg:x="96756" fg:w="27"/><text x="99.9962%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.24%)</title><rect x="99.6115%" y="197" width="0.2401%" height="15" fill="rgb(220,162,26)" fg:x="96667" fg:w="233"/><text x="99.9045%" y="207.50"></text></g><g><title>all (97,044 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,12,20)" fg:x="0" fg:w="97044"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (97,044 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,224,47)" fg:x="0" fg:w="97044"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>