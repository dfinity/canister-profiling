<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="96504"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.0000%" y="229" width="0.0850%" height="15" fill="rgb(238,60,11)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.0850%" y="229" width="0.0850%" height="15" fill="rgb(241,126,48)" fg:x="82" fg:w="82"/><text x="0.3779%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.1699%" y="181" width="0.0850%" height="15" fill="rgb(250,100,29)" fg:x="164" fg:w="82"/><text x="0.4629%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 1.18%)</title><rect x="0.1699%" y="197" width="1.1803%" height="15" fill="rgb(244,107,16)" fg:x="164" fg:w="1139"/><text x="0.4629%" y="207.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.05%)</title><rect x="1.3502%" y="165" width="0.0528%" height="15" fill="rgb(216,115,30)" fg:x="1303" fg:w="51"/><text x="1.6432%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.45%)</title><rect x="1.4031%" y="165" width="0.4528%" height="15" fill="rgb(235,209,41)" fg:x="1354" fg:w="437"/><text x="1.6960%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.07%)</title><rect x="1.8559%" y="165" width="0.0663%" height="15" fill="rgb(214,216,27)" fg:x="1791" fg:w="64"/><text x="2.1489%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.08%)</title><rect x="1.9222%" y="165" width="0.0788%" height="15" fill="rgb(243,89,24)" fg:x="1855" fg:w="76"/><text x="2.2152%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.08%)</title><rect x="2.0010%" y="165" width="0.0788%" height="15" fill="rgb(243,78,14)" fg:x="1931" fg:w="76"/><text x="2.2939%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.08%)</title><rect x="2.0797%" y="165" width="0.0788%" height="15" fill="rgb(233,150,41)" fg:x="2007" fg:w="76"/><text x="2.3727%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.08%)</title><rect x="2.1585%" y="165" width="0.0788%" height="15" fill="rgb(230,62,44)" fg:x="2083" fg:w="76"/><text x="2.4514%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.05%)</title><rect x="2.2372%" y="165" width="0.0528%" height="15" fill="rgb(232,134,6)" fg:x="2159" fg:w="51"/><text x="2.5302%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.10%)</title><rect x="2.2901%" y="165" width="0.0984%" height="15" fill="rgb(245,186,34)" fg:x="2210" fg:w="95"/><text x="2.5830%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.45%)</title><rect x="2.3885%" y="165" width="0.4528%" height="15" fill="rgb(234,116,10)" fg:x="2305" fg:w="437"/><text x="2.6815%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.8413%" y="165" width="0.0197%" height="15" fill="rgb(238,77,44)" fg:x="2742" fg:w="19"/><text x="3.1343%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="2.8610%" y="133" width="0.0850%" height="15" fill="rgb(240,190,50)" fg:x="2761" fg:w="82"/><text x="3.1540%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="2.9460%" y="101" width="0.0694%" height="15" fill="rgb(230,23,26)" fg:x="2843" fg:w="67"/><text x="3.2390%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="2.9460%" y="117" width="0.0995%" height="15" fill="rgb(232,64,25)" fg:x="2843" fg:w="96"/><text x="3.2390%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.0455%" y="69" width="0.0114%" height="15" fill="rgb(247,133,36)" fg:x="2939" fg:w="11"/><text x="3.3384%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.0569%" y="53" width="0.0363%" height="15" fill="rgb(221,205,45)" fg:x="2950" fg:w="35"/><text x="3.3498%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="3.0569%" y="69" width="0.0663%" height="15" fill="rgb(250,132,50)" fg:x="2950" fg:w="64"/><text x="3.3498%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="3.0455%" y="85" width="0.1492%" height="15" fill="rgb(226,70,14)" fg:x="2939" fg:w="144"/><text x="3.3384%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.22%)</title><rect x="3.0455%" y="101" width="0.2176%" height="15" fill="rgb(245,199,10)" fg:x="2939" fg:w="210"/><text x="3.3384%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.23%)</title><rect x="3.0455%" y="117" width="0.2280%" height="15" fill="rgb(216,176,20)" fg:x="2939" fg:w="220"/><text x="3.3384%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 0.47%)</title><rect x="2.9460%" y="133" width="0.4653%" height="15" fill="rgb(250,166,43)" fg:x="2843" fg:w="449"/><text x="3.2390%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 0.69%)</title><rect x="2.8610%" y="149" width="0.6912%" height="15" fill="rgb(210,135,54)" fg:x="2761" fg:w="667"/><text x="3.1540%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.07%)</title><rect x="3.5522%" y="149" width="0.0663%" height="15" fill="rgb(229,39,44)" fg:x="3428" fg:w="64"/><text x="3.8452%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="3.6185%" y="149" width="0.0632%" height="15" fill="rgb(210,38,46)" fg:x="3492" fg:w="61"/><text x="3.9115%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 0.94%)</title><rect x="2.8610%" y="165" width="0.9357%" height="15" fill="rgb(254,136,26)" fg:x="2761" fg:w="903"/><text x="3.1540%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.03%)</title><rect x="3.7967%" y="165" width="0.0280%" height="15" fill="rgb(218,23,54)" fg:x="3664" fg:w="27"/><text x="4.0897%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="3.8247%" y="165" width="0.0477%" height="15" fill="rgb(211,16,0)" fg:x="3691" fg:w="46"/><text x="4.1177%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.10%)</title><rect x="3.8724%" y="165" width="0.0984%" height="15" fill="rgb(224,169,14)" fg:x="3737" fg:w="95"/><text x="4.1653%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.45%)</title><rect x="3.9708%" y="149" width="0.4528%" height="15" fill="rgb(236,76,6)" fg:x="3832" fg:w="437"/><text x="4.2638%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="4.4237%" y="149" width="0.0197%" height="15" fill="rgb(217,24,39)" fg:x="4269" fg:w="19"/><text x="4.7166%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="4.4433%" y="117" width="0.0850%" height="15" fill="rgb(242,54,35)" fg:x="4288" fg:w="82"/><text x="4.7363%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="4.5283%" y="85" width="0.0694%" height="15" fill="rgb(233,110,11)" fg:x="4370" fg:w="67"/><text x="4.8213%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="4.5283%" y="101" width="0.0995%" height="15" fill="rgb(233,47,23)" fg:x="4370" fg:w="96"/><text x="4.8213%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="4.6278%" y="53" width="0.0114%" height="15" fill="rgb(249,101,33)" fg:x="4466" fg:w="11"/><text x="4.9208%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="4.6392%" y="37" width="0.0363%" height="15" fill="rgb(207,166,36)" fg:x="4477" fg:w="35"/><text x="4.9322%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="4.6392%" y="53" width="0.0663%" height="15" fill="rgb(246,37,52)" fg:x="4477" fg:w="64"/><text x="4.9322%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="4.6278%" y="69" width="0.1492%" height="15" fill="rgb(236,151,25)" fg:x="4466" fg:w="144"/><text x="4.9208%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.22%)</title><rect x="4.6278%" y="85" width="0.2176%" height="15" fill="rgb(209,215,11)" fg:x="4466" fg:w="210"/><text x="4.9208%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.23%)</title><rect x="4.6278%" y="101" width="0.2280%" height="15" fill="rgb(252,42,5)" fg:x="4466" fg:w="220"/><text x="4.9208%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 0.47%)</title><rect x="4.5283%" y="117" width="0.4653%" height="15" fill="rgb(228,84,43)" fg:x="4370" fg:w="449"/><text x="4.8213%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 0.69%)</title><rect x="4.4433%" y="133" width="0.6912%" height="15" fill="rgb(205,120,22)" fg:x="4288" fg:w="667"/><text x="4.7363%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.07%)</title><rect x="5.1345%" y="133" width="0.0663%" height="15" fill="rgb(246,204,46)" fg:x="4955" fg:w="64"/><text x="5.4275%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="5.2008%" y="133" width="0.0632%" height="15" fill="rgb(220,147,53)" fg:x="5019" fg:w="61"/><text x="5.4938%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 0.94%)</title><rect x="4.4433%" y="149" width="0.9357%" height="15" fill="rgb(224,203,40)" fg:x="4288" fg:w="903"/><text x="4.7363%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.05%)</title><rect x="5.3791%" y="133" width="0.0528%" height="15" fill="rgb(237,18,28)" fg:x="5191" fg:w="51"/><text x="5.6720%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.12%)</title><rect x="5.4319%" y="133" width="0.1223%" height="15" fill="rgb(205,157,38)" fg:x="5242" fg:w="118"/><text x="5.7249%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="5.5542%" y="133" width="0.0477%" height="15" fill="rgb(251,4,10)" fg:x="5360" fg:w="46"/><text x="5.8471%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.29%)</title><rect x="5.3791%" y="149" width="0.2933%" height="15" fill="rgb(227,20,0)" fg:x="5191" fg:w="283"/><text x="5.6720%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="5.6723%" y="149" width="0.0850%" height="15" fill="rgb(239,201,21)" fg:x="5474" fg:w="82"/><text x="5.9653%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 1.98%)</title><rect x="3.9708%" y="165" width="1.9792%" height="15" fill="rgb(207,19,0)" fg:x="3832" fg:w="1910"/><text x="4.2638%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="5.9500%" y="165" width="0.0477%" height="15" fill="rgb(237,223,15)" fg:x="5742" fg:w="46"/><text x="6.2430%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.9977%" y="165" width="0.0155%" height="15" fill="rgb(253,219,54)" fg:x="5788" fg:w="15"/><text x="6.2906%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="6.0215%" y="149" width="0.0850%" height="15" fill="rgb(240,100,19)" fg:x="5811" fg:w="82"/><text x="6.3145%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.18%)</title><rect x="6.0215%" y="165" width="0.1844%" height="15" fill="rgb(210,136,29)" fg:x="5811" fg:w="178"/><text x="6.3145%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="6.2060%" y="133" width="0.0850%" height="15" fill="rgb(208,183,18)" fg:x="5989" fg:w="82"/><text x="6.4989%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.13%)</title><rect x="6.2060%" y="149" width="0.1275%" height="15" fill="rgb(248,175,41)" fg:x="5989" fg:w="123"/><text x="6.4989%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.22%)</title><rect x="6.2060%" y="165" width="0.2176%" height="15" fill="rgb(214,63,49)" fg:x="5989" fg:w="210"/><text x="6.4989%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="6.4236%" y="165" width="0.0850%" height="15" fill="rgb(223,83,45)" fg:x="6199" fg:w="82"/><text x="6.7165%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="6.5085%" y="165" width="0.0922%" height="15" fill="rgb(216,10,12)" fg:x="6281" fg:w="89"/><text x="6.8015%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="6.6008%" y="165" width="0.0850%" height="15" fill="rgb(213,113,40)" fg:x="6370" fg:w="82"/><text x="6.8937%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="6.6857%" y="165" width="0.0850%" height="15" fill="rgb(205,22,4)" fg:x="6452" fg:w="82"/><text x="6.9787%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="6.7759%" y="165" width="0.0922%" height="15" fill="rgb(247,29,14)" fg:x="6539" fg:w="89"/><text x="7.0689%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.41%)</title><rect x="6.8681%" y="165" width="0.4062%" height="15" fill="rgb(226,205,53)" fg:x="6628" fg:w="392"/><text x="7.1611%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.41%)</title><rect x="7.2743%" y="165" width="0.4062%" height="15" fill="rgb(230,205,17)" fg:x="7020" fg:w="392"/><text x="7.5673%" y="175.50"></text></g><g><title>memcpy (504 instructions, 0.52%)</title><rect x="7.6805%" y="165" width="0.5223%" height="15" fill="rgb(254,219,32)" fg:x="7412" fg:w="504"/><text x="7.9735%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 8.14%)</title><rect x="1.3502%" y="181" width="8.1416%" height="15" fill="rgb(216,156,9)" fg:x="1303" fg:w="7857"/><text x="1.6432%" y="191.50">candid::d..</text></g><g><title>memcpy (408 instructions, 0.42%)</title><rect x="9.4918%" y="181" width="0.4228%" height="15" fill="rgb(254,138,17)" fg:x="9160" fg:w="408"/><text x="9.7848%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.42%)</title><rect x="9.9146%" y="181" width="0.4228%" height="15" fill="rgb(231,136,16)" fg:x="9568" fg:w="408"/><text x="10.2076%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.02%)</title><rect x="10.3374%" y="181" width="0.0249%" height="15" fill="rgb(252,68,39)" fg:x="9976" fg:w="24"/><text x="10.6304%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="10.3623%" y="181" width="0.0850%" height="15" fill="rgb(251,149,47)" fg:x="10000" fg:w="82"/><text x="10.6552%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="10.4472%" y="165" width="0.0943%" height="15" fill="rgb(226,215,39)" fg:x="10082" fg:w="91"/><text x="10.7402%" y="175.50"></text></g><g><title>candid::types::internal::env_add (175 instructions, 0.18%)</title><rect x="10.4472%" y="181" width="0.1813%" height="15" fill="rgb(210,157,37)" fg:x="10082" fg:w="175"/><text x="10.7402%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="10.6286%" y="181" width="0.0943%" height="15" fill="rgb(240,110,0)" fg:x="10257" fg:w="91"/><text x="10.9215%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="10.7229%" y="165" width="0.0798%" height="15" fill="rgb(219,153,49)" fg:x="10348" fg:w="77"/><text x="11.0158%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="10.8027%" y="149" width="0.0922%" height="15" fill="rgb(226,127,8)" fg:x="10425" fg:w="89"/><text x="11.0956%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.17%)</title><rect x="10.8027%" y="165" width="0.1658%" height="15" fill="rgb(239,34,52)" fg:x="10425" fg:w="160"/><text x="11.0956%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 0.43%)</title><rect x="10.7229%" y="181" width="0.4311%" height="15" fill="rgb(247,184,25)" fg:x="10348" fg:w="416"/><text x="11.0158%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.05%)</title><rect x="11.1539%" y="165" width="0.0508%" height="15" fill="rgb(221,180,5)" fg:x="10764" fg:w="49"/><text x="11.4469%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.01%)</title><rect x="11.2047%" y="165" width="0.0145%" height="15" fill="rgb(236,52,44)" fg:x="10813" fg:w="14"/><text x="11.4977%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.21%)</title><rect x="11.1539%" y="181" width="0.2072%" height="15" fill="rgb(252,29,50)" fg:x="10764" fg:w="200"/><text x="11.4469%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.05%)</title><rect x="11.3612%" y="181" width="0.0508%" height="15" fill="rgb(240,103,12)" fg:x="10964" fg:w="49"/><text x="11.6542%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="11.4120%" y="165" width="0.0632%" height="15" fill="rgb(216,203,9)" fg:x="11013" fg:w="61"/><text x="11.7049%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="11.5487%" y="165" width="0.0632%" height="15" fill="rgb(248,45,25)" fg:x="11145" fg:w="61"/><text x="11.8417%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (264 instructions, 0.27%)</title><rect x="11.4120%" y="181" width="0.2736%" height="15" fill="rgb(217,88,13)" fg:x="11013" fg:w="264"/><text x="11.7049%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.04%)</title><rect x="11.6855%" y="165" width="0.0383%" height="15" fill="rgb(206,123,35)" fg:x="11277" fg:w="37"/><text x="11.9785%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="11.7239%" y="165" width="0.0352%" height="15" fill="rgb(219,12,8)" fg:x="11314" fg:w="34"/><text x="12.0168%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="11.7591%" y="165" width="0.0352%" height="15" fill="rgb(217,150,30)" fg:x="11348" fg:w="34"/><text x="12.0521%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.03%)</title><rect x="11.7943%" y="165" width="0.0321%" height="15" fill="rgb(213,43,51)" fg:x="11382" fg:w="31"/><text x="12.0873%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.27%)</title><rect x="11.6855%" y="181" width="0.2705%" height="15" fill="rgb(249,225,54)" fg:x="11277" fg:w="261"/><text x="11.9785%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.01%)</title><rect x="11.9560%" y="181" width="0.0145%" height="15" fill="rgb(235,152,2)" fg:x="11538" fg:w="14"/><text x="12.2489%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.01%)</title><rect x="11.9705%" y="181" width="0.0145%" height="15" fill="rgb(234,134,8)" fg:x="11552" fg:w="14"/><text x="12.2635%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.01%)</title><rect x="11.9850%" y="181" width="0.0145%" height="15" fill="rgb(242,77,10)" fg:x="11566" fg:w="14"/><text x="12.2780%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.04%)</title><rect x="11.9995%" y="181" width="0.0383%" height="15" fill="rgb(207,213,4)" fg:x="11580" fg:w="37"/><text x="12.2925%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.0461%" y="149" width="0.0280%" height="15" fill="rgb(216,221,37)" fg:x="11625" fg:w="27"/><text x="12.3391%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.12%)</title><rect x="12.0461%" y="165" width="0.1202%" height="15" fill="rgb(244,32,11)" fg:x="11625" fg:w="116"/><text x="12.3391%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="12.1663%" y="149" width="0.0632%" height="15" fill="rgb(210,106,19)" fg:x="11741" fg:w="61"/><text x="12.4593%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.14%)</title><rect x="12.1663%" y="165" width="0.1368%" height="15" fill="rgb(226,155,11)" fg:x="11741" fg:w="132"/><text x="12.4593%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.01%)</title><rect x="12.3031%" y="165" width="0.0145%" height="15" fill="rgb(205,159,37)" fg:x="11873" fg:w="14"/><text x="12.5961%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (367 instructions, 0.38%)</title><rect x="12.0378%" y="181" width="0.3803%" height="15" fill="rgb(240,143,43)" fg:x="11617" fg:w="367"/><text x="12.3308%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,113 instructions, 11.52%)</title><rect x="1.3502%" y="197" width="11.5156%" height="15" fill="rgb(242,13,7)" fg:x="1303" fg:w="11113"/><text x="1.6432%" y="207.50">candid::utils:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="12.8658%" y="197" width="0.0632%" height="15" fill="rgb(252,219,27)" fg:x="12416" fg:w="61"/><text x="13.1588%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,420 instructions, 12.87%)</title><rect x="0.1699%" y="213" width="12.8699%" height="15" fill="rgb(223,65,15)" fg:x="164" fg:w="12420"/><text x="0.4629%" y="223.50">ic_cdk::api::cal..</text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="13.0399%" y="197" width="0.2135%" height="15" fill="rgb(248,130,30)" fg:x="12584" fg:w="206"/><text x="13.3328%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="13.2533%" y="197" width="0.2135%" height="15" fill="rgb(220,23,34)" fg:x="12790" fg:w="206"/><text x="13.5463%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="14.6719%" y="197" width="0.2466%" height="15" fill="rgb(215,100,1)" fg:x="14159" fg:w="238"/><text x="14.9649%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="14.9186%" y="197" width="0.2466%" height="15" fill="rgb(250,138,5)" fg:x="14397" fg:w="238"/><text x="15.2115%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="16.0698%" y="197" width="0.1471%" height="15" fill="rgb(242,16,54)" fg:x="15508" fg:w="142"/><text x="16.3628%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="16.2169%" y="197" width="0.1471%" height="15" fill="rgb(230,81,41)" fg:x="15650" fg:w="142"/><text x="16.5099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="17.4697%" y="197" width="0.0850%" height="15" fill="rgb(235,125,14)" fg:x="16859" fg:w="82"/><text x="17.7627%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="17.5547%" y="197" width="0.2570%" height="15" fill="rgb(228,141,22)" fg:x="16941" fg:w="248"/><text x="17.8477%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="17.8117%" y="197" width="0.2570%" height="15" fill="rgb(221,28,36)" fg:x="17189" fg:w="248"/><text x="18.1047%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="18.0687%" y="197" width="0.1803%" height="15" fill="rgb(207,203,35)" fg:x="17437" fg:w="174"/><text x="18.3616%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="18.2490%" y="197" width="0.1803%" height="15" fill="rgb(232,74,12)" fg:x="17611" fg:w="174"/><text x="18.5420%" y="207.50"></text></g><g><title>memmove (334 instructions, 0.35%)</title><rect x="18.4293%" y="197" width="0.3461%" height="15" fill="rgb(237,121,29)" fg:x="17785" fg:w="334"/><text x="18.7223%" y="207.50"></text></g><g><title>memmove (334 instructions, 0.35%)</title><rect x="18.7754%" y="197" width="0.3461%" height="15" fill="rgb(238,195,22)" fg:x="18119" fg:w="334"/><text x="19.0684%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="19.1215%" y="197" width="0.2135%" height="15" fill="rgb(249,64,35)" fg:x="18453" fg:w="206"/><text x="19.4145%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="20.4644%" y="197" width="0.2466%" height="15" fill="rgb(226,139,54)" fg:x="19749" fg:w="238"/><text x="20.7574%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="20.7111%" y="197" width="0.2466%" height="15" fill="rgb(205,217,1)" fg:x="19987" fg:w="238"/><text x="21.0040%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="21.6965%" y="197" width="0.1471%" height="15" fill="rgb(233,142,53)" fg:x="20938" fg:w="142"/><text x="21.9895%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="21.8437%" y="197" width="0.1471%" height="15" fill="rgb(225,226,46)" fg:x="21080" fg:w="142"/><text x="22.1366%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="23.0281%" y="197" width="0.1471%" height="15" fill="rgb(212,27,0)" fg:x="22223" fg:w="142"/><text x="23.3210%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="23.1752%" y="197" width="0.1471%" height="15" fill="rgb(235,122,31)" fg:x="22365" fg:w="142"/><text x="23.4682%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="24.2601%" y="197" width="0.0943%" height="15" fill="rgb(218,88,37)" fg:x="23412" fg:w="91"/><text x="24.5531%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="24.3544%" y="197" width="0.2570%" height="15" fill="rgb(234,144,21)" fg:x="23503" fg:w="248"/><text x="24.6474%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="24.6114%" y="197" width="0.2570%" height="15" fill="rgb(246,24,34)" fg:x="23751" fg:w="248"/><text x="24.9044%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="24.8684%" y="197" width="0.1471%" height="15" fill="rgb(226,164,35)" fg:x="23999" fg:w="142"/><text x="25.1614%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="25.0155%" y="197" width="0.1471%" height="15" fill="rgb(253,38,26)" fg:x="24141" fg:w="142"/><text x="25.3085%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="25.1627%" y="197" width="0.2466%" height="15" fill="rgb(252,73,6)" fg:x="24283" fg:w="238"/><text x="25.4557%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="25.4093%" y="197" width="0.2466%" height="15" fill="rgb(222,86,52)" fg:x="24521" fg:w="238"/><text x="25.7023%" y="207.50"></text></g><g><title>memmove (158 instructions, 0.16%)</title><rect x="25.6559%" y="197" width="0.1637%" height="15" fill="rgb(208,213,23)" fg:x="24759" fg:w="158"/><text x="25.9489%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="27.0134%" y="197" width="0.3129%" height="15" fill="rgb(243,18,54)" fg:x="26069" fg:w="302"/><text x="27.3064%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="27.3263%" y="197" width="0.3129%" height="15" fill="rgb(229,9,0)" fg:x="26371" fg:w="302"/><text x="27.6193%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="28.6454%" y="197" width="0.2466%" height="15" fill="rgb(215,110,43)" fg:x="27644" fg:w="238"/><text x="28.9384%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="28.8921%" y="197" width="0.2466%" height="15" fill="rgb(232,229,41)" fg:x="27882" fg:w="238"/><text x="29.1850%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,797 instructions, 17.41%)</title><rect x="13.0399%" y="213" width="17.4055%" height="15" fill="rgb(246,51,4)" fg:x="12584" fg:w="16797"/><text x="13.3328%" y="223.50">alloc::collections::btr..</text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="31.3438%" y="197" width="0.2135%" height="15" fill="rgb(206,133,28)" fg:x="30248" fg:w="206"/><text x="31.6367%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="31.5572%" y="197" width="0.2135%" height="15" fill="rgb(205,11,35)" fg:x="30454" fg:w="206"/><text x="31.8502%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="32.9095%" y="197" width="0.2466%" height="15" fill="rgb(214,160,29)" fg:x="31759" fg:w="238"/><text x="33.2025%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="33.1561%" y="197" width="0.2466%" height="15" fill="rgb(221,190,42)" fg:x="31997" fg:w="238"/><text x="33.4491%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="34.2079%" y="197" width="0.2466%" height="15" fill="rgb(213,143,39)" fg:x="33012" fg:w="238"/><text x="34.5009%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="34.4545%" y="197" width="0.2466%" height="15" fill="rgb(244,7,42)" fg:x="33250" fg:w="238"/><text x="34.7475%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5,044 instructions, 5.23%)</title><rect x="30.4454%" y="213" width="5.2267%" height="15" fill="rgb(252,103,17)" fg:x="29381" fg:w="5044"/><text x="30.7383%" y="223.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="36.8710%" y="197" width="0.0943%" height="15" fill="rgb(218,123,36)" fg:x="35582" fg:w="91"/><text x="37.1640%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="36.9653%" y="197" width="0.2570%" height="15" fill="rgb(231,82,3)" fg:x="35673" fg:w="248"/><text x="37.2583%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="37.2223%" y="197" width="0.2570%" height="15" fill="rgb(219,135,49)" fg:x="35921" fg:w="248"/><text x="37.5153%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="37.4793%" y="197" width="0.1803%" height="15" fill="rgb(206,52,47)" fg:x="36169" fg:w="174"/><text x="37.7722%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="37.6596%" y="197" width="0.1803%" height="15" fill="rgb(213,224,54)" fg:x="36343" fg:w="174"/><text x="37.9525%" y="207.50"></text></g><g><title>memmove (222 instructions, 0.23%)</title><rect x="37.8399%" y="197" width="0.2300%" height="15" fill="rgb(235,61,26)" fg:x="36517" fg:w="222"/><text x="38.1329%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="39.2699%" y="197" width="0.1803%" height="15" fill="rgb(226,59,17)" fg:x="37897" fg:w="174"/><text x="39.5628%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="39.4502%" y="197" width="0.1803%" height="15" fill="rgb(213,155,25)" fg:x="38071" fg:w="174"/><text x="39.7431%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.0325%" y="197" width="0.1627%" height="15" fill="rgb(252,225,47)" fg:x="39598" fg:w="157"/><text x="41.3255%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.1952%" y="197" width="0.1627%" height="15" fill="rgb(249,189,1)" fg:x="39755" fg:w="157"/><text x="41.4882%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="42.3620%" y="197" width="0.0943%" height="15" fill="rgb(214,131,54)" fg:x="40881" fg:w="91"/><text x="42.6549%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="42.4563%" y="197" width="0.2570%" height="15" fill="rgb(221,166,42)" fg:x="40972" fg:w="248"/><text x="42.7492%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="42.7133%" y="197" width="0.2570%" height="15" fill="rgb(246,38,11)" fg:x="41220" fg:w="248"/><text x="43.0062%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="44.4075%" y="197" width="0.3129%" height="15" fill="rgb(247,108,19)" fg:x="42855" fg:w="302"/><text x="44.7005%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="44.7204%" y="197" width="0.3129%" height="15" fill="rgb(252,32,41)" fg:x="43157" fg:w="302"/><text x="45.0134%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="45.9380%" y="197" width="0.1471%" height="15" fill="rgb(206,3,33)" fg:x="44332" fg:w="142"/><text x="46.2310%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="46.0851%" y="197" width="0.1471%" height="15" fill="rgb(233,170,28)" fg:x="44474" fg:w="142"/><text x="46.3781%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="47.2385%" y="197" width="0.1471%" height="15" fill="rgb(230,112,40)" fg:x="45587" fg:w="142"/><text x="47.5314%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="47.3856%" y="197" width="0.1471%" height="15" fill="rgb(215,157,54)" fg:x="45729" fg:w="142"/><text x="47.6786%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="48.9037%" y="197" width="0.1627%" height="15" fill="rgb(245,221,14)" fg:x="47194" fg:w="157"/><text x="49.1966%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.0664%" y="197" width="0.1627%" height="15" fill="rgb(229,147,14)" fg:x="47351" fg:w="157"/><text x="49.3593%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="50.2000%" y="197" width="0.2135%" height="15" fill="rgb(228,180,11)" fg:x="48445" fg:w="206"/><text x="50.4930%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="50.4135%" y="197" width="0.2135%" height="15" fill="rgb(215,149,18)" fg:x="48651" fg:w="206"/><text x="50.7064%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="51.5005%" y="197" width="0.3129%" height="15" fill="rgb(242,42,19)" fg:x="49700" fg:w="302"/><text x="51.7934%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="51.8134%" y="197" width="0.3129%" height="15" fill="rgb(213,210,19)" fg:x="50002" fg:w="302"/><text x="52.1064%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="53.1988%" y="197" width="0.2798%" height="15" fill="rgb(216,185,33)" fg:x="51339" fg:w="270"/><text x="53.4918%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="53.4786%" y="197" width="0.2798%" height="15" fill="rgb(254,133,6)" fg:x="51609" fg:w="270"/><text x="53.7716%" y="207.50"></text></g><g><title>memmove (334 instructions, 0.35%)</title><rect x="55.0962%" y="197" width="0.3461%" height="15" fill="rgb(242,35,31)" fg:x="53170" fg:w="334"/><text x="55.3891%" y="207.50"></text></g><g><title>memmove (334 instructions, 0.35%)</title><rect x="55.4423%" y="197" width="0.3461%" height="15" fill="rgb(209,157,10)" fg:x="53504" fg:w="334"/><text x="55.7352%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="56.8940%" y="197" width="0.3129%" height="15" fill="rgb(207,154,10)" fg:x="54905" fg:w="302"/><text x="57.1870%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="57.2070%" y="197" width="0.3129%" height="15" fill="rgb(223,168,17)" fg:x="55207" fg:w="302"/><text x="57.4999%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,215 instructions, 23.02%)</title><rect x="35.6721%" y="213" width="23.0198%" height="15" fill="rgb(237,88,41)" fg:x="34425" fg:w="22215"/><text x="35.9651%" y="223.50">alloc::collections::btree::map:..</text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="59.6566%" y="197" width="0.1627%" height="15" fill="rgb(240,148,39)" fg:x="57571" fg:w="157"/><text x="59.9496%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="59.8193%" y="197" width="0.1627%" height="15" fill="rgb(242,93,18)" fg:x="57728" fg:w="157"/><text x="60.1123%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="61.4876%" y="197" width="0.3129%" height="15" fill="rgb(250,40,20)" fg:x="59338" fg:w="302"/><text x="61.7806%" y="207.50"></text></g><g><title>memmove (302 instructions, 0.31%)</title><rect x="61.8005%" y="197" width="0.3129%" height="15" fill="rgb(213,138,16)" fg:x="59640" fg:w="302"/><text x="62.0935%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="63.0513%" y="197" width="0.0943%" height="15" fill="rgb(229,174,17)" fg:x="60847" fg:w="91"/><text x="63.3442%" y="207.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.1456%" y="197" width="0.1907%" height="15" fill="rgb(247,73,26)" fg:x="60938" fg:w="184"/><text x="63.4385%" y="207.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.3362%" y="197" width="0.1907%" height="15" fill="rgb(239,147,16)" fg:x="61122" fg:w="184"/><text x="63.6292%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="63.5269%" y="197" width="0.1471%" height="15" fill="rgb(249,35,27)" fg:x="61306" fg:w="142"/><text x="63.8199%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="63.6740%" y="197" width="0.1471%" height="15" fill="rgb(242,56,4)" fg:x="61448" fg:w="142"/><text x="63.9670%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="63.8212%" y="197" width="0.1471%" height="15" fill="rgb(238,122,30)" fg:x="61590" fg:w="142"/><text x="64.1142%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="63.9683%" y="197" width="0.1471%" height="15" fill="rgb(220,206,46)" fg:x="61732" fg:w="142"/><text x="64.2613%" y="207.50"></text></g><g><title>memmove (158 instructions, 0.16%)</title><rect x="64.1155%" y="197" width="0.1637%" height="15" fill="rgb(249,29,25)" fg:x="61874" fg:w="158"/><text x="64.4084%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="65.7683%" y="197" width="0.0943%" height="15" fill="rgb(241,229,14)" fg:x="63469" fg:w="91"/><text x="66.0612%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="65.8626%" y="197" width="0.2570%" height="15" fill="rgb(220,108,37)" fg:x="63560" fg:w="248"/><text x="66.1555%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.1195%" y="197" width="0.2570%" height="15" fill="rgb(208,131,46)" fg:x="63808" fg:w="248"/><text x="66.4125%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="66.3765%" y="197" width="0.2135%" height="15" fill="rgb(219,211,21)" fg:x="64056" fg:w="206"/><text x="66.6695%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="66.5900%" y="197" width="0.2135%" height="15" fill="rgb(231,76,44)" fg:x="64262" fg:w="206"/><text x="66.8830%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,997 instructions, 9.32%)</title><rect x="58.6919%" y="213" width="9.3229%" height="15" fill="rgb(247,57,30)" fg:x="56640" fg:w="8997"/><text x="58.9848%" y="223.50">alloc::coll..</text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="68.9795%" y="197" width="0.1803%" height="15" fill="rgb(246,207,28)" fg:x="66568" fg:w="174"/><text x="69.2725%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="69.1598%" y="197" width="0.1803%" height="15" fill="rgb(227,212,14)" fg:x="66742" fg:w="174"/><text x="69.4528%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="70.2800%" y="197" width="0.2135%" height="15" fill="rgb(249,4,45)" fg:x="67823" fg:w="206"/><text x="70.5730%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="70.4935%" y="197" width="0.2135%" height="15" fill="rgb(228,44,20)" fg:x="68029" fg:w="206"/><text x="70.7864%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="71.7462%" y="197" width="0.2466%" height="15" fill="rgb(228,121,40)" fg:x="69238" fg:w="238"/><text x="72.0392%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="71.9929%" y="197" width="0.2466%" height="15" fill="rgb(248,20,42)" fg:x="69476" fg:w="238"/><text x="72.2858%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="73.3431%" y="197" width="0.2135%" height="15" fill="rgb(219,53,29)" fg:x="70779" fg:w="206"/><text x="73.6360%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="73.5565%" y="197" width="0.2135%" height="15" fill="rgb(230,189,44)" fg:x="70985" fg:w="206"/><text x="73.8495%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="74.7409%" y="197" width="0.1803%" height="15" fill="rgb(228,116,5)" fg:x="72128" fg:w="174"/><text x="75.0339%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="74.9212%" y="197" width="0.1803%" height="15" fill="rgb(205,157,52)" fg:x="72302" fg:w="174"/><text x="75.2142%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="76.0062%" y="197" width="0.2798%" height="15" fill="rgb(252,104,37)" fg:x="73349" fg:w="270"/><text x="76.2991%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="76.2860%" y="197" width="0.2798%" height="15" fill="rgb(217,77,1)" fg:x="73619" fg:w="270"/><text x="76.5789%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="77.6693%" y="197" width="0.0943%" height="15" fill="rgb(232,158,4)" fg:x="74954" fg:w="91"/><text x="77.9623%" y="207.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="77.7636%" y="197" width="0.2238%" height="15" fill="rgb(224,157,42)" fg:x="75045" fg:w="216"/><text x="78.0566%" y="207.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="77.9874%" y="197" width="0.2238%" height="15" fill="rgb(224,107,43)" fg:x="75261" fg:w="216"/><text x="78.2804%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="78.2113%" y="197" width="0.2466%" height="15" fill="rgb(249,145,52)" fg:x="75477" fg:w="238"/><text x="78.5042%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="78.4579%" y="197" width="0.2466%" height="15" fill="rgb(207,156,29)" fg:x="75715" fg:w="238"/><text x="78.7509%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="78.7045%" y="197" width="0.1471%" height="15" fill="rgb(249,67,32)" fg:x="75953" fg:w="142"/><text x="78.9975%" y="207.50"></text></g><g><title>memmove (142 instructions, 0.15%)</title><rect x="78.8517%" y="197" width="0.1471%" height="15" fill="rgb(240,101,51)" fg:x="76095" fg:w="142"/><text x="79.1446%" y="207.50"></text></g><g><title>memmove (158 instructions, 0.16%)</title><rect x="78.9988%" y="197" width="0.1637%" height="15" fill="rgb(231,24,31)" fg:x="76237" fg:w="158"/><text x="79.2918%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="80.7821%" y="197" width="0.2466%" height="15" fill="rgb(216,217,0)" fg:x="77958" fg:w="238"/><text x="81.0751%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="81.0288%" y="197" width="0.2466%" height="15" fill="rgb(235,187,47)" fg:x="78196" fg:w="238"/><text x="81.3217%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="82.3147%" y="197" width="0.2466%" height="15" fill="rgb(252,177,25)" fg:x="79437" fg:w="238"/><text x="82.6077%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="82.5613%" y="197" width="0.2466%" height="15" fill="rgb(233,182,4)" fg:x="79675" fg:w="238"/><text x="82.8543%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="83.6131%" y="197" width="0.0943%" height="15" fill="rgb(225,149,6)" fg:x="80690" fg:w="91"/><text x="83.9061%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.7074%" y="197" width="0.2570%" height="15" fill="rgb(226,77,23)" fg:x="80781" fg:w="248"/><text x="84.0004%" y="207.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.9644%" y="197" width="0.2570%" height="15" fill="rgb(235,89,18)" fg:x="81029" fg:w="248"/><text x="84.2574%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="84.2214%" y="197" width="0.1803%" height="15" fill="rgb(223,48,47)" fg:x="81277" fg:w="174"/><text x="84.5143%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="84.4017%" y="197" width="0.1803%" height="15" fill="rgb(218,43,30)" fg:x="81451" fg:w="174"/><text x="84.6947%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="84.5820%" y="197" width="0.2798%" height="15" fill="rgb(250,186,50)" fg:x="81625" fg:w="270"/><text x="84.8750%" y="207.50"></text></g><g><title>memmove (270 instructions, 0.28%)</title><rect x="84.8618%" y="197" width="0.2798%" height="15" fill="rgb(218,228,15)" fg:x="81895" fg:w="270"/><text x="85.1547%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="85.1415%" y="197" width="0.1803%" height="15" fill="rgb(220,114,33)" fg:x="82165" fg:w="174"/><text x="85.4345%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="86.8700%" y="197" width="0.2135%" height="15" fill="rgb(226,34,13)" fg:x="83833" fg:w="206"/><text x="87.1629%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.21%)</title><rect x="87.0834%" y="197" width="0.2135%" height="15" fill="rgb(241,66,9)" fg:x="84039" fg:w="206"/><text x="87.3764%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="88.2678%" y="197" width="0.1803%" height="15" fill="rgb(233,185,54)" fg:x="85182" fg:w="174"/><text x="88.5608%" y="207.50"></text></g><g><title>memmove (174 instructions, 0.18%)</title><rect x="88.4481%" y="197" width="0.1803%" height="15" fill="rgb(242,221,6)" fg:x="85356" fg:w="174"/><text x="88.7411%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="89.5662%" y="197" width="0.2466%" height="15" fill="rgb(228,222,0)" fg:x="86435" fg:w="238"/><text x="89.8592%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="89.8129%" y="197" width="0.2466%" height="15" fill="rgb(209,195,12)" fg:x="86673" fg:w="238"/><text x="90.1058%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="91.2978%" y="197" width="0.2466%" height="15" fill="rgb(221,133,31)" fg:x="88106" fg:w="238"/><text x="91.5907%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="91.5444%" y="197" width="0.2466%" height="15" fill="rgb(214,199,54)" fg:x="88344" fg:w="238"/><text x="91.8374%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="92.5962%" y="197" width="0.2466%" height="15" fill="rgb(218,60,31)" fg:x="89359" fg:w="238"/><text x="92.8891%" y="207.50"></text></g><g><title>memmove (238 instructions, 0.25%)</title><rect x="92.8428%" y="197" width="0.2466%" height="15" fill="rgb(226,208,35)" fg:x="89597" fg:w="238"/><text x="93.1358%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,911 instructions, 25.81%)</title><rect x="68.0148%" y="213" width="25.8134%" height="15" fill="rgb(252,155,3)" fg:x="65637" fg:w="24911"/><text x="68.3078%" y="223.50">alloc::collections::btree::map::BTr..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,091 instructions, 1.13%)</title><rect x="93.8282%" y="213" width="1.1305%" height="15" fill="rgb(211,98,3)" fg:x="90548" fg:w="1091"/><text x="94.1212%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.09%)</title><rect x="94.9588%" y="165" width="0.0860%" height="15" fill="rgb(209,61,28)" fg:x="91639" fg:w="83"/><text x="95.2517%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (154 instructions, 0.16%)</title><rect x="94.9588%" y="181" width="0.1596%" height="15" fill="rgb(252,85,43)" fg:x="91639" fg:w="154"/><text x="95.2517%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.02%)</title><rect x="95.1183%" y="165" width="0.0238%" height="15" fill="rgb(247,154,28)" fg:x="91793" fg:w="23"/><text x="95.4113%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.14%)</title><rect x="95.1183%" y="181" width="0.1430%" height="15" fill="rgb(234,111,42)" fg:x="91793" fg:w="138"/><text x="95.4113%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 0.48%)</title><rect x="94.9588%" y="197" width="0.4850%" height="15" fill="rgb(229,81,18)" fg:x="91639" fg:w="468"/><text x="95.2517%" y="207.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.54%)</title><rect x="95.4437%" y="181" width="0.5368%" height="15" fill="rgb(214,78,32)" fg:x="92107" fg:w="518"/><text x="95.7367%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="95.9805%" y="133" width="0.0850%" height="15" fill="rgb(221,196,28)" fg:x="92625" fg:w="82"/><text x="96.2734%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.13%)</title><rect x="95.9805%" y="149" width="0.1275%" height="15" fill="rgb(224,56,8)" fg:x="92625" fg:w="123"/><text x="96.2734%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.21%)</title><rect x="95.9805%" y="165" width="0.2135%" height="15" fill="rgb(216,39,19)" fg:x="92625" fg:w="206"/><text x="96.2734%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.1939%" y="165" width="0.0155%" height="15" fill="rgb(253,153,24)" fg:x="92831" fg:w="15"/><text x="96.4869%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.2095%" y="165" width="0.0155%" height="15" fill="rgb(213,161,26)" fg:x="92846" fg:w="15"/><text x="96.5025%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.44%)</title><rect x="95.9805%" y="181" width="0.4435%" height="15" fill="rgb(208,168,20)" fg:x="92625" fg:w="428"/><text x="96.2734%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.53%)</title><rect x="96.4240%" y="181" width="0.5347%" height="15" fill="rgb(229,118,19)" fg:x="93053" fg:w="516"/><text x="96.7170%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 1.60%)</title><rect x="95.4437%" y="197" width="1.6020%" height="15" fill="rgb(227,220,34)" fg:x="92107" fg:w="1546"/><text x="95.7367%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.06%)</title><rect x="97.0623%" y="197" width="0.0632%" height="15" fill="rgb(210,198,25)" fg:x="93669" fg:w="61"/><text x="97.3553%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,722 instructions, 2.82%)</title><rect x="94.9588%" y="213" width="2.8206%" height="15" fill="rgb(238,126,4)" fg:x="91639" fg:w="2722"/><text x="95.2517%" y="223.50">ic..</text></g><g><title>btreemap::__canister_method_batch_put::{{closure}} (95,884 instructions, 99.36%)</title><rect x="0.1699%" y="229" width="99.3575%" height="15" fill="rgb(209,215,30)" fg:x="164" fg:w="95884"/><text x="0.4629%" y="239.50">btreemap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.02%)</title><rect x="99.5275%" y="229" width="0.0155%" height="15" fill="rgb(252,134,7)" fg:x="96048" fg:w="15"/><text x="99.8204%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.6363%" y="197" width="0.0280%" height="15" fill="rgb(213,117,48)" fg:x="96153" fg:w="27"/><text x="99.9293%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (227 instructions, 0.24%)</title><rect x="99.5441%" y="213" width="0.2352%" height="15" fill="rgb(228,189,17)" fg:x="96064" fg:w="227"/><text x="99.8370%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (345 instructions, 0.36%)</title><rect x="99.5430%" y="229" width="0.3575%" height="15" fill="rgb(250,161,42)" fg:x="96063" fg:w="345"/><text x="99.8360%" y="239.50"></text></g><g><title>all (96,504 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(214,157,17)" fg:x="0" fg:w="96504"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_put (96,504 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,152,47)" fg:x="0" fg:w="96504"/><text x="0.2930%" y="255.50">canister_update batch_put</text></g></svg></svg>