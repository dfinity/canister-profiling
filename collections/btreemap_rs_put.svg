<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="97327"><g><title>ic_cdk::setup (24 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0247%" height="15" fill="rgb(217,111,49)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="0.0247%" y="197" width="0.0853%" height="15" fill="rgb(235,65,44)" fg:x="24" fg:w="83"/><text x="0.3176%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.08%)</title><rect x="0.1099%" y="197" width="0.0791%" height="15" fill="rgb(220,94,31)" fg:x="107" fg:w="77"/><text x="0.4029%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.12%)</title><rect x="0.1891%" y="165" width="0.1243%" height="15" fill="rgb(247,38,0)" fg:x="184" fg:w="121"/><text x="0.4820%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="0.3134%" y="149" width="0.0843%" height="15" fill="rgb(249,111,43)" fg:x="305" fg:w="82"/><text x="0.6063%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="0.3976%" y="149" width="0.4521%" height="15" fill="rgb(206,15,36)" fg:x="387" fg:w="440"/><text x="0.6906%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="0.8497%" y="149" width="0.0976%" height="15" fill="rgb(218,210,28)" fg:x="827" fg:w="95"/><text x="1.1427%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9473%" y="149" width="0.0616%" height="15" fill="rgb(239,105,8)" fg:x="922" fg:w="60"/><text x="1.2403%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0090%" y="149" width="0.0616%" height="15" fill="rgb(249,100,30)" fg:x="982" fg:w="60"/><text x="1.3019%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0706%" y="149" width="0.0616%" height="15" fill="rgb(235,12,43)" fg:x="1042" fg:w="60"/><text x="1.3636%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.1323%" y="149" width="0.0616%" height="15" fill="rgb(237,227,13)" fg:x="1102" fg:w="60"/><text x="1.4252%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="1.1939%" y="149" width="0.0843%" height="15" fill="rgb(221,96,3)" fg:x="1162" fg:w="82"/><text x="1.4869%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="1.2782%" y="149" width="0.0719%" height="15" fill="rgb(252,71,51)" fg:x="1244" fg:w="70"/><text x="1.5711%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="1.3501%" y="149" width="0.4521%" height="15" fill="rgb(207,27,23)" fg:x="1314" fg:w="440"/><text x="1.6431%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="1.8022%" y="149" width="0.0195%" height="15" fill="rgb(216,35,17)" fg:x="1754" fg:w="19"/><text x="2.0951%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="1.8217%" y="133" width="0.0853%" height="15" fill="rgb(223,33,1)" fg:x="1773" fg:w="83"/><text x="2.1147%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="1.9070%" y="101" width="0.0688%" height="15" fill="rgb(246,143,34)" fg:x="1856" fg:w="67"/><text x="2.1999%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.10%)</title><rect x="1.9070%" y="117" width="0.1007%" height="15" fill="rgb(208,13,39)" fg:x="1856" fg:w="98"/><text x="2.1999%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.0077%" y="69" width="0.0113%" height="15" fill="rgb(239,157,11)" fg:x="1954" fg:w="11"/><text x="2.3006%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.0190%" y="53" width="0.0360%" height="15" fill="rgb(230,105,8)" fg:x="1965" fg:w="35"/><text x="2.3119%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.07%)</title><rect x="2.0190%" y="69" width="0.0678%" height="15" fill="rgb(216,4,19)" fg:x="1965" fg:w="66"/><text x="2.3119%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.15%)</title><rect x="2.0077%" y="85" width="0.1510%" height="15" fill="rgb(207,45,27)" fg:x="1954" fg:w="147"/><text x="2.3006%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.22%)</title><rect x="2.0077%" y="101" width="0.2178%" height="15" fill="rgb(236,132,44)" fg:x="1954" fg:w="212"/><text x="2.3006%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.23%)</title><rect x="2.0077%" y="117" width="0.2281%" height="15" fill="rgb(207,76,20)" fg:x="1954" fg:w="222"/><text x="2.3006%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.47%)</title><rect x="1.9070%" y="133" width="0.4737%" height="15" fill="rgb(208,136,15)" fg:x="1856" fg:w="461"/><text x="2.1999%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.71%)</title><rect x="1.8217%" y="149" width="0.7079%" height="15" fill="rgb(243,138,53)" fg:x="1773" fg:w="689"/><text x="2.1147%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="2.5296%" y="149" width="0.0976%" height="15" fill="rgb(248,127,3)" fg:x="2462" fg:w="95"/><text x="2.8226%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="2.6272%" y="149" width="0.0616%" height="15" fill="rgb(219,137,20)" fg:x="2557" fg:w="60"/><text x="2.9202%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="2.6889%" y="149" width="0.0781%" height="15" fill="rgb(226,186,40)" fg:x="2617" fg:w="76"/><text x="2.9818%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="2.7670%" y="149" width="0.0719%" height="15" fill="rgb(245,62,19)" fg:x="2693" fg:w="70"/><text x="3.0599%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="2.8389%" y="133" width="0.4521%" height="15" fill="rgb(227,32,41)" fg:x="2763" fg:w="440"/><text x="3.1319%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.2910%" y="133" width="0.0195%" height="15" fill="rgb(224,74,9)" fg:x="3203" fg:w="19"/><text x="3.5839%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="3.3105%" y="117" width="0.0853%" height="15" fill="rgb(252,25,7)" fg:x="3222" fg:w="83"/><text x="3.6035%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="3.3958%" y="85" width="0.0688%" height="15" fill="rgb(230,227,51)" fg:x="3305" fg:w="67"/><text x="3.6887%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.10%)</title><rect x="3.3958%" y="101" width="0.1007%" height="15" fill="rgb(214,44,21)" fg:x="3305" fg:w="98"/><text x="3.6887%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.4965%" y="53" width="0.0113%" height="15" fill="rgb(207,90,12)" fg:x="3403" fg:w="11"/><text x="3.7894%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.5078%" y="37" width="0.0360%" height="15" fill="rgb(231,171,41)" fg:x="3414" fg:w="35"/><text x="3.8007%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.07%)</title><rect x="3.5078%" y="53" width="0.0678%" height="15" fill="rgb(224,80,33)" fg:x="3414" fg:w="66"/><text x="3.8007%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.15%)</title><rect x="3.4965%" y="69" width="0.1510%" height="15" fill="rgb(225,103,24)" fg:x="3403" fg:w="147"/><text x="3.7894%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.22%)</title><rect x="3.4965%" y="85" width="0.2178%" height="15" fill="rgb(249,107,36)" fg:x="3403" fg:w="212"/><text x="3.7894%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.23%)</title><rect x="3.4965%" y="101" width="0.2281%" height="15" fill="rgb(242,117,41)" fg:x="3403" fg:w="222"/><text x="3.7894%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.47%)</title><rect x="3.3958%" y="117" width="0.4737%" height="15" fill="rgb(205,95,30)" fg:x="3305" fg:w="461"/><text x="3.6887%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.71%)</title><rect x="3.3105%" y="133" width="0.7079%" height="15" fill="rgb(213,53,43)" fg:x="3222" fg:w="689"/><text x="3.6035%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="4.0184%" y="133" width="0.0976%" height="15" fill="rgb(232,200,22)" fg:x="3911" fg:w="95"/><text x="4.3114%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="4.1160%" y="133" width="0.0616%" height="15" fill="rgb(224,90,19)" fg:x="4006" fg:w="60"/><text x="4.4090%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="4.1777%" y="117" width="0.0843%" height="15" fill="rgb(249,101,8)" fg:x="4066" fg:w="82"/><text x="4.4706%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.10%)</title><rect x="4.2619%" y="117" width="0.0976%" height="15" fill="rgb(248,43,8)" fg:x="4148" fg:w="95"/><text x="4.5549%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.3595%" y="117" width="0.0781%" height="15" fill="rgb(222,51,11)" fg:x="4243" fg:w="76"/><text x="4.6525%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.34%)</title><rect x="4.1777%" y="133" width="0.3391%" height="15" fill="rgb(208,15,29)" fg:x="4066" fg:w="330"/><text x="4.4706%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.5167%" y="133" width="0.0853%" height="15" fill="rgb(222,30,43)" fg:x="4396" fg:w="83"/><text x="4.8097%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,961 instructions, 2.01%)</title><rect x="2.8389%" y="149" width="2.0149%" height="15" fill="rgb(249,112,7)" fg:x="2763" fg:w="1961"/><text x="3.1319%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.8537%" y="149" width="0.0781%" height="15" fill="rgb(218,229,38)" fg:x="4724" fg:w="76"/><text x="5.1467%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9318%" y="149" width="0.0154%" height="15" fill="rgb(222,170,13)" fg:x="4800" fg:w="15"/><text x="5.2248%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9472%" y="149" width="0.0154%" height="15" fill="rgb(207,180,20)" fg:x="4815" fg:w="15"/><text x="5.2402%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.02%)</title><rect x="4.9719%" y="149" width="0.0185%" height="15" fill="rgb(232,105,50)" fg:x="4839" fg:w="18"/><text x="5.2649%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.9904%" y="133" width="0.0853%" height="15" fill="rgb(219,114,36)" fg:x="4857" fg:w="83"/><text x="5.2834%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.18%)</title><rect x="4.9904%" y="149" width="0.1839%" height="15" fill="rgb(206,207,0)" fg:x="4857" fg:w="179"/><text x="5.2834%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.1743%" y="117" width="0.0935%" height="15" fill="rgb(228,76,33)" fg:x="5036" fg:w="91"/><text x="5.4673%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.14%)</title><rect x="5.1743%" y="133" width="0.1377%" height="15" fill="rgb(246,186,4)" fg:x="5036" fg:w="134"/><text x="5.4673%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (216 instructions, 0.22%)</title><rect x="5.1743%" y="149" width="0.2219%" height="15" fill="rgb(239,200,39)" fg:x="5036" fg:w="216"/><text x="5.4673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.08%)</title><rect x="5.3962%" y="149" width="0.0791%" height="15" fill="rgb(226,221,46)" fg:x="5252" fg:w="77"/><text x="5.6892%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.06%)</title><rect x="5.4754%" y="149" width="0.0647%" height="15" fill="rgb(211,1,41)" fg:x="5329" fg:w="63"/><text x="5.7683%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.5401%" y="149" width="0.0935%" height="15" fill="rgb(241,84,8)" fg:x="5392" fg:w="91"/><text x="5.8331%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.6336%" y="149" width="0.0935%" height="15" fill="rgb(227,34,38)" fg:x="5483" fg:w="91"/><text x="5.9266%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="5.7312%" y="149" width="0.0884%" height="15" fill="rgb(238,93,11)" fg:x="5578" fg:w="86"/><text x="6.0242%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="5.8196%" y="149" width="0.4398%" height="15" fill="rgb(227,28,4)" fg:x="5664" fg:w="428"/><text x="6.1125%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="6.2593%" y="149" width="0.4398%" height="15" fill="rgb(225,154,9)" fg:x="6092" fg:w="428"/><text x="6.5523%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,362 instructions, 7.56%)</title><rect x="0.3134%" y="165" width="7.5642%" height="15" fill="rgb(211,30,37)" fg:x="305" fg:w="7362"/><text x="0.6063%" y="175.50">candid::..</text></g><g><title>memcpy (380 instructions, 0.39%)</title><rect x="7.8776%" y="165" width="0.3904%" height="15" fill="rgb(238,187,4)" fg:x="7667" fg:w="380"/><text x="8.1705%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="8.2680%" y="149" width="0.0144%" height="15" fill="rgb(239,223,34)" fg:x="8047" fg:w="14"/><text x="8.5610%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.06%)</title><rect x="8.2680%" y="165" width="0.0647%" height="15" fill="rgb(243,78,8)" fg:x="8047" fg:w="63"/><text x="8.5610%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="8.3327%" y="165" width="0.0935%" height="15" fill="rgb(254,79,45)" fg:x="8110" fg:w="91"/><text x="8.6257%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="8.4262%" y="149" width="0.0144%" height="15" fill="rgb(247,0,11)" fg:x="8201" fg:w="14"/><text x="8.7192%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="8.4406%" y="133" width="0.0606%" height="15" fill="rgb(233,100,11)" fg:x="8215" fg:w="59"/><text x="8.7336%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="8.5012%" y="133" width="0.0966%" height="15" fill="rgb(245,212,9)" fg:x="8274" fg:w="94"/><text x="8.7942%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="8.5978%" y="133" width="0.1778%" height="15" fill="rgb(240,166,15)" fg:x="8368" fg:w="173"/><text x="8.8908%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.59%)</title><rect x="8.4406%" y="149" width="0.5949%" height="15" fill="rgb(225,51,33)" fg:x="8215" fg:w="579"/><text x="8.7336%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.84%)</title><rect x="8.4262%" y="165" width="0.8435%" height="15" fill="rgb(218,46,19)" fg:x="8201" fg:w="821"/><text x="8.7192%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="9.2698%" y="165" width="0.0935%" height="15" fill="rgb(242,32,23)" fg:x="9022" fg:w="91"/><text x="9.5628%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="9.3633%" y="149" width="0.0144%" height="15" fill="rgb(249,218,0)" fg:x="9113" fg:w="14"/><text x="9.6562%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="9.3777%" y="133" width="0.0606%" height="15" fill="rgb(211,57,14)" fg:x="9127" fg:w="59"/><text x="9.6706%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="9.4383%" y="133" width="0.0966%" height="15" fill="rgb(234,183,40)" fg:x="9186" fg:w="94"/><text x="9.7313%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="9.5349%" y="133" width="0.1778%" height="15" fill="rgb(217,18,0)" fg:x="9280" fg:w="173"/><text x="9.8278%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.59%)</title><rect x="9.3777%" y="149" width="0.5949%" height="15" fill="rgb(253,72,22)" fg:x="9127" fg:w="579"/><text x="9.6706%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="9.9726%" y="149" width="0.0791%" height="15" fill="rgb(234,161,45)" fg:x="9706" fg:w="77"/><text x="10.2655%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="10.0517%" y="133" width="0.0884%" height="15" fill="rgb(215,199,51)" fg:x="9783" fg:w="86"/><text x="10.3447%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.12%)</title><rect x="10.0517%" y="149" width="0.1243%" height="15" fill="rgb(216,63,45)" fg:x="9783" fg:w="121"/><text x="10.3447%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.01%)</title><rect x="9.3633%" y="165" width="1.0131%" height="15" fill="rgb(224,145,49)" fg:x="9113" fg:w="986"/><text x="9.6562%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="10.3764%" y="117" width="0.0606%" height="15" fill="rgb(220,112,22)" fg:x="10099" fg:w="59"/><text x="10.6693%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.10%)</title><rect x="10.3764%" y="133" width="0.0966%" height="15" fill="rgb(218,40,43)" fg:x="10099" fg:w="94"/><text x="10.6693%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.32%)</title><rect x="10.3764%" y="149" width="0.3237%" height="15" fill="rgb(220,143,2)" fg:x="10099" fg:w="315"/><text x="10.6693%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1116 (18 instructions, 0.02%)</title><rect x="10.7000%" y="149" width="0.0185%" height="15" fill="rgb(234,94,54)" fg:x="10414" fg:w="18"/><text x="10.9930%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.7185%" y="149" width="0.0134%" height="15" fill="rgb(251,45,8)" fg:x="10432" fg:w="13"/><text x="11.0115%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.57%)</title><rect x="10.3764%" y="165" width="0.5661%" height="15" fill="rgb(225,211,14)" fg:x="10099" fg:w="551"/><text x="10.6693%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.05%)</title><rect x="10.9425%" y="165" width="0.0545%" height="15" fill="rgb(206,207,6)" fg:x="10650" fg:w="53"/><text x="11.2355%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="10.9969%" y="149" width="0.1356%" height="15" fill="rgb(212,197,32)" fg:x="10703" fg:w="132"/><text x="11.2899%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="11.1685%" y="149" width="0.1356%" height="15" fill="rgb(233,168,23)" fg:x="10870" fg:w="132"/><text x="11.4615%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.34%)</title><rect x="10.9969%" y="165" width="0.3432%" height="15" fill="rgb(234,46,44)" fg:x="10703" fg:w="334"/><text x="11.2899%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.03%)</title><rect x="11.3401%" y="149" width="0.0349%" height="15" fill="rgb(227,112,45)" fg:x="11037" fg:w="34"/><text x="11.6331%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3751%" y="149" width="0.0185%" height="15" fill="rgb(254,83,4)" fg:x="11071" fg:w="18"/><text x="11.6680%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3935%" y="149" width="0.0185%" height="15" fill="rgb(228,171,46)" fg:x="11089" fg:w="18"/><text x="11.6865%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.17%)</title><rect x="11.3401%" y="165" width="0.1736%" height="15" fill="rgb(241,218,52)" fg:x="11037" fg:w="169"/><text x="11.6331%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5138%" y="165" width="0.0134%" height="15" fill="rgb(215,155,10)" fg:x="11206" fg:w="13"/><text x="11.8067%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5271%" y="165" width="0.0134%" height="15" fill="rgb(234,4,42)" fg:x="11219" fg:w="13"/><text x="11.8201%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5405%" y="165" width="0.0134%" height="15" fill="rgb(233,15,11)" fg:x="11232" fg:w="13"/><text x="11.8334%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.45%)</title><rect x="11.5538%" y="165" width="0.4521%" height="15" fill="rgb(231,114,0)" fg:x="11245" fg:w="440"/><text x="11.8468%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.02%)</title><rect x="12.0059%" y="133" width="0.0195%" height="15" fill="rgb(242,156,14)" fg:x="11685" fg:w="19"/><text x="12.2989%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="12.0254%" y="133" width="0.0884%" height="15" fill="rgb(237,200,4)" fg:x="11704" fg:w="86"/><text x="12.3184%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.19%)</title><rect x="12.1138%" y="117" width="0.1860%" height="15" fill="rgb(227,168,22)" fg:x="11790" fg:w="181"/><text x="12.4068%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 0.22%)</title><rect x="12.1138%" y="133" width="0.2219%" height="15" fill="rgb(240,92,44)" fg:x="11790" fg:w="216"/><text x="12.4068%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="12.3357%" y="133" width="0.0134%" height="15" fill="rgb(235,38,38)" fg:x="12006" fg:w="13"/><text x="12.6287%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (396 instructions, 0.41%)</title><rect x="12.0059%" y="149" width="0.4069%" height="15" fill="rgb(235,136,39)" fg:x="11685" fg:w="396"/><text x="12.2989%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (445 instructions, 0.46%)</title><rect x="12.0059%" y="165" width="0.4572%" height="15" fill="rgb(207,146,39)" fg:x="11685" fg:w="445"/><text x="12.2989%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="12.4631%" y="165" width="0.1356%" height="15" fill="rgb(219,220,32)" fg:x="12130" fg:w="132"/><text x="12.7561%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,546 instructions, 13.92%)</title><rect x="0.1891%" y="181" width="13.9180%" height="15" fill="rgb(221,19,43)" fg:x="184" fg:w="13546"/><text x="0.4820%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.1071%" y="165" width="0.2106%" height="15" fill="rgb(231,124,7)" fg:x="13730" fg:w="205"/><text x="14.4001%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.3177%" y="165" width="0.2106%" height="15" fill="rgb(227,55,48)" fg:x="13935" fg:w="205"/><text x="14.6107%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.7089%" y="165" width="0.2435%" height="15" fill="rgb(224,198,11)" fg:x="15289" fg:w="237"/><text x="16.0019%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.9524%" y="165" width="0.2435%" height="15" fill="rgb(238,156,4)" fg:x="15526" fg:w="237"/><text x="16.2454%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="17.0785%" y="165" width="0.1449%" height="15" fill="rgb(241,30,11)" fg:x="16622" fg:w="141"/><text x="17.3715%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="17.2234%" y="165" width="0.1449%" height="15" fill="rgb(252,56,15)" fg:x="16763" fg:w="141"/><text x="17.5163%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="18.4502%" y="165" width="0.0935%" height="15" fill="rgb(237,47,5)" fg:x="17957" fg:w="91"/><text x="18.7431%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="18.5437%" y="165" width="0.2548%" height="15" fill="rgb(252,213,46)" fg:x="18048" fg:w="248"/><text x="18.8366%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="18.7985%" y="165" width="0.2548%" height="15" fill="rgb(221,189,8)" fg:x="18296" fg:w="248"/><text x="19.0915%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.0533%" y="165" width="0.1778%" height="15" fill="rgb(233,180,8)" fg:x="18544" fg:w="173"/><text x="19.3463%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.2310%" y="165" width="0.1778%" height="15" fill="rgb(241,42,2)" fg:x="18717" fg:w="173"/><text x="19.5240%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.4088%" y="165" width="0.3421%" height="15" fill="rgb(228,88,11)" fg:x="18890" fg:w="333"/><text x="19.7018%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.7509%" y="165" width="0.3421%" height="15" fill="rgb(225,187,43)" fg:x="19223" fg:w="333"/><text x="20.0439%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="20.0931%" y="165" width="0.2106%" height="15" fill="rgb(219,87,39)" fg:x="19556" fg:w="205"/><text x="20.3861%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.4442%" y="165" width="0.2435%" height="15" fill="rgb(206,68,51)" fg:x="20871" fg:w="237"/><text x="21.7372%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.6877%" y="165" width="0.2435%" height="15" fill="rgb(248,124,39)" fg:x="21108" fg:w="237"/><text x="21.9807%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="22.6494%" y="165" width="0.1449%" height="15" fill="rgb(230,229,14)" fg:x="22044" fg:w="141"/><text x="22.9424%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="22.7943%" y="165" width="0.1449%" height="15" fill="rgb(215,183,0)" fg:x="22185" fg:w="141"/><text x="23.0873%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="23.9533%" y="165" width="0.1449%" height="15" fill="rgb(210,132,9)" fg:x="23313" fg:w="141"/><text x="24.2462%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="24.0981%" y="165" width="0.1449%" height="15" fill="rgb(237,4,30)" fg:x="23454" fg:w="141"/><text x="24.3911%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="25.1585%" y="165" width="0.0935%" height="15" fill="rgb(209,83,51)" fg:x="24486" fg:w="91"/><text x="25.4515%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="25.2520%" y="165" width="0.2548%" height="15" fill="rgb(244,17,34)" fg:x="24577" fg:w="248"/><text x="25.5450%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="25.5068%" y="165" width="0.2548%" height="15" fill="rgb(216,180,19)" fg:x="24825" fg:w="248"/><text x="25.7998%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="25.7616%" y="165" width="0.1449%" height="15" fill="rgb(224,26,23)" fg:x="25073" fg:w="141"/><text x="26.0546%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="25.9065%" y="165" width="0.1449%" height="15" fill="rgb(228,91,2)" fg:x="25214" fg:w="141"/><text x="26.1994%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.0514%" y="165" width="0.2435%" height="15" fill="rgb(223,194,14)" fg:x="25355" fg:w="237"/><text x="26.3443%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.2949%" y="165" width="0.2435%" height="15" fill="rgb(254,22,14)" fg:x="25592" fg:w="237"/><text x="26.5878%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="26.5384%" y="165" width="0.1613%" height="15" fill="rgb(249,19,15)" fg:x="25829" fg:w="157"/><text x="26.8313%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="27.9018%" y="165" width="0.3093%" height="15" fill="rgb(251,96,47)" fg:x="27156" fg:w="301"/><text x="28.1948%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="28.2111%" y="165" width="0.3093%" height="15" fill="rgb(224,213,46)" fg:x="27457" fg:w="301"/><text x="28.5041%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.5036%" y="165" width="0.2435%" height="15" fill="rgb(239,13,5)" fg:x="28715" fg:w="237"/><text x="29.7966%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.7471%" y="165" width="0.2435%" height="15" fill="rgb(238,58,39)" fg:x="28952" fg:w="237"/><text x="30.0401%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,706 instructions, 17.16%)</title><rect x="14.1071%" y="181" width="17.1648%" height="15" fill="rgb(248,212,19)" fg:x="13730" fg:w="16706"/><text x="14.4001%" y="191.50">alloc::collections::bt..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.1483%" y="165" width="0.2106%" height="15" fill="rgb(230,165,17)" fg:x="31289" fg:w="205"/><text x="32.4413%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.3590%" y="165" width="0.2106%" height="15" fill="rgb(236,71,24)" fg:x="31494" fg:w="205"/><text x="32.6519%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.6844%" y="165" width="0.2435%" height="15" fill="rgb(228,202,30)" fg:x="32784" fg:w="237"/><text x="33.9774%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.9279%" y="165" width="0.2435%" height="15" fill="rgb(213,151,36)" fg:x="33021" fg:w="237"/><text x="34.2209%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="34.9554%" y="165" width="0.2435%" height="15" fill="rgb(235,151,11)" fg:x="34021" fg:w="237"/><text x="35.2483%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.1989%" y="165" width="0.2435%" height="15" fill="rgb(227,70,2)" fg:x="34258" fg:w="237"/><text x="35.4918%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,982 instructions, 5.12%)</title><rect x="31.2719%" y="181" width="5.1188%" height="15" fill="rgb(237,128,8)" fg:x="30436" fg:w="4982"/><text x="31.5649%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="37.5651%" y="165" width="0.0935%" height="15" fill="rgb(228,48,46)" fg:x="36561" fg:w="91"/><text x="37.8581%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="37.6586%" y="165" width="0.2548%" height="15" fill="rgb(232,139,30)" fg:x="36652" fg:w="248"/><text x="37.9516%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="37.9134%" y="165" width="0.2548%" height="15" fill="rgb(209,176,30)" fg:x="36900" fg:w="248"/><text x="38.2064%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.1682%" y="165" width="0.1778%" height="15" fill="rgb(210,184,19)" fg:x="37148" fg:w="173"/><text x="38.4612%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.3460%" y="165" width="0.1778%" height="15" fill="rgb(248,202,21)" fg:x="37321" fg:w="173"/><text x="38.6390%" y="175.50"></text></g><g><title>memmove (221 instructions, 0.23%)</title><rect x="38.5237%" y="165" width="0.2271%" height="15" fill="rgb(231,225,17)" fg:x="37494" fg:w="221"/><text x="38.8167%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="39.9591%" y="165" width="0.1778%" height="15" fill="rgb(216,190,20)" fg:x="38891" fg:w="173"/><text x="40.2521%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.1369%" y="165" width="0.1778%" height="15" fill="rgb(229,177,23)" fg:x="39064" fg:w="173"/><text x="40.4298%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.6904%" y="165" width="0.1613%" height="15" fill="rgb(226,38,48)" fg:x="40576" fg:w="157"/><text x="41.9834%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.8517%" y="165" width="0.1613%" height="15" fill="rgb(236,100,13)" fg:x="40733" fg:w="157"/><text x="42.1447%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="42.9942%" y="165" width="0.0935%" height="15" fill="rgb(210,95,30)" fg:x="41845" fg:w="91"/><text x="43.2872%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="43.0877%" y="165" width="0.2548%" height="15" fill="rgb(222,2,29)" fg:x="41936" fg:w="248"/><text x="43.3807%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="43.3425%" y="165" width="0.2548%" height="15" fill="rgb(229,138,34)" fg:x="42184" fg:w="248"/><text x="43.6355%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.0327%" y="165" width="0.3093%" height="15" fill="rgb(234,205,32)" fg:x="43829" fg:w="301"/><text x="45.3257%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.3420%" y="165" width="0.3093%" height="15" fill="rgb(232,123,42)" fg:x="44130" fg:w="301"/><text x="45.6350%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="46.5338%" y="165" width="0.1449%" height="15" fill="rgb(250,88,0)" fg:x="45290" fg:w="141"/><text x="46.8268%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="46.6787%" y="165" width="0.1449%" height="15" fill="rgb(253,25,27)" fg:x="45431" fg:w="141"/><text x="46.9717%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="47.8069%" y="165" width="0.1449%" height="15" fill="rgb(236,52,14)" fg:x="46529" fg:w="141"/><text x="48.0998%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="47.9518%" y="165" width="0.1449%" height="15" fill="rgb(238,40,20)" fg:x="46670" fg:w="141"/><text x="48.2447%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.4416%" y="165" width="0.1613%" height="15" fill="rgb(209,90,26)" fg:x="48120" fg:w="157"/><text x="49.7345%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.6029%" y="165" width="0.1613%" height="15" fill="rgb(220,73,33)" fg:x="48277" fg:w="157"/><text x="49.8959%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.7125%" y="165" width="0.2106%" height="15" fill="rgb(221,205,25)" fg:x="49357" fg:w="205"/><text x="51.0055%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.9232%" y="165" width="0.2106%" height="15" fill="rgb(232,81,36)" fg:x="49562" fg:w="205"/><text x="51.2161%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="51.9856%" y="165" width="0.3093%" height="15" fill="rgb(230,58,36)" fg:x="50596" fg:w="301"/><text x="52.2785%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.2948%" y="165" width="0.3093%" height="15" fill="rgb(208,229,44)" fg:x="50897" fg:w="301"/><text x="52.5878%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.6531%" y="165" width="0.2764%" height="15" fill="rgb(224,181,47)" fg:x="52219" fg:w="269"/><text x="53.9461%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.9295%" y="165" width="0.2764%" height="15" fill="rgb(245,161,29)" fg:x="52488" fg:w="269"/><text x="54.2225%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.5180%" y="165" width="0.3421%" height="15" fill="rgb(213,77,53)" fg:x="54034" fg:w="333"/><text x="55.8110%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.8601%" y="165" width="0.3421%" height="15" fill="rgb(233,119,31)" fg:x="54367" fg:w="333"/><text x="56.1531%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.2842%" y="165" width="0.3093%" height="15" fill="rgb(254,128,33)" fg:x="55753" fg:w="301"/><text x="57.5772%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.5935%" y="165" width="0.3093%" height="15" fill="rgb(207,6,22)" fg:x="56054" fg:w="301"/><text x="57.8864%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,054 instructions, 22.66%)</title><rect x="36.3907%" y="181" width="22.6597%" height="15" fill="rgb(226,180,28)" fg:x="35418" fg:w="22054"/><text x="36.6837%" y="191.50">alloc::collections::btree::map..</text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="59.9926%" y="165" width="0.1613%" height="15" fill="rgb(242,76,34)" fg:x="58389" fg:w="157"/><text x="60.2856%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.1539%" y="165" width="0.1613%" height="15" fill="rgb(248,131,7)" fg:x="58546" fg:w="157"/><text x="60.4469%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="61.7937%" y="165" width="0.3093%" height="15" fill="rgb(213,163,2)" fg:x="60142" fg:w="301"/><text x="62.0867%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="62.1030%" y="165" width="0.3093%" height="15" fill="rgb(217,151,27)" fg:x="60443" fg:w="301"/><text x="62.3960%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="63.3278%" y="165" width="0.0935%" height="15" fill="rgb(254,71,14)" fg:x="61635" fg:w="91"/><text x="63.6207%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.4213%" y="165" width="0.1891%" height="15" fill="rgb(233,80,10)" fg:x="61726" fg:w="184"/><text x="63.7142%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.6103%" y="165" width="0.1891%" height="15" fill="rgb(222,5,4)" fg:x="61910" fg:w="184"/><text x="63.9033%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="63.7994%" y="165" width="0.1449%" height="15" fill="rgb(233,102,8)" fg:x="62094" fg:w="141"/><text x="64.0923%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="63.9442%" y="165" width="0.1449%" height="15" fill="rgb(238,218,18)" fg:x="62235" fg:w="141"/><text x="64.2372%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="64.0891%" y="165" width="0.1449%" height="15" fill="rgb(218,181,8)" fg:x="62376" fg:w="141"/><text x="64.3821%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="64.2340%" y="165" width="0.1449%" height="15" fill="rgb(246,26,21)" fg:x="62517" fg:w="141"/><text x="64.5269%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="64.3788%" y="165" width="0.1613%" height="15" fill="rgb(209,197,52)" fg:x="62658" fg:w="157"/><text x="64.6718%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="66.0341%" y="165" width="0.0935%" height="15" fill="rgb(228,15,23)" fg:x="64269" fg:w="91"/><text x="66.3271%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="66.1276%" y="165" width="0.2548%" height="15" fill="rgb(227,188,36)" fg:x="64360" fg:w="248"/><text x="66.4206%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="66.3824%" y="165" width="0.2548%" height="15" fill="rgb(241,39,5)" fg:x="64608" fg:w="248"/><text x="66.6754%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.6372%" y="165" width="0.2106%" height="15" fill="rgb(248,200,17)" fg:x="64856" fg:w="205"/><text x="66.9302%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.8478%" y="165" width="0.2106%" height="15" fill="rgb(216,59,49)" fg:x="65061" fg:w="205"/><text x="67.1408%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,973 instructions, 9.22%)</title><rect x="59.0504%" y="181" width="9.2194%" height="15" fill="rgb(207,160,45)" fg:x="57472" fg:w="8973"/><text x="59.3434%" y="191.50">alloc::coll..</text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.2120%" y="165" width="0.1778%" height="15" fill="rgb(216,212,43)" fg:x="67362" fg:w="173"/><text x="69.5050%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.3898%" y="165" width="0.1778%" height="15" fill="rgb(247,211,8)" fg:x="67535" fg:w="173"/><text x="69.6828%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.4851%" y="165" width="0.2106%" height="15" fill="rgb(224,142,54)" fg:x="68601" fg:w="205"/><text x="70.7780%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.6957%" y="165" width="0.2106%" height="15" fill="rgb(234,98,47)" fg:x="68806" fg:w="205"/><text x="70.9887%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="71.9225%" y="165" width="0.2435%" height="15" fill="rgb(210,175,26)" fg:x="70000" fg:w="237"/><text x="72.2155%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.1660%" y="165" width="0.2435%" height="15" fill="rgb(217,68,15)" fg:x="70237" fg:w="237"/><text x="72.4590%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.4894%" y="165" width="0.2106%" height="15" fill="rgb(235,220,52)" fg:x="71525" fg:w="205"/><text x="73.7823%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.7000%" y="165" width="0.2106%" height="15" fill="rgb(210,136,34)" fg:x="71730" fg:w="205"/><text x="73.9930%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="74.8590%" y="165" width="0.1778%" height="15" fill="rgb(242,218,3)" fg:x="72858" fg:w="173"/><text x="75.1519%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.0367%" y="165" width="0.1778%" height="15" fill="rgb(231,26,9)" fg:x="73031" fg:w="173"/><text x="75.3297%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.0971%" y="165" width="0.2764%" height="15" fill="rgb(245,28,40)" fg:x="74063" fg:w="269"/><text x="76.3900%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.3735%" y="165" width="0.2764%" height="15" fill="rgb(248,33,15)" fg:x="74332" fg:w="269"/><text x="76.6664%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="77.7297%" y="165" width="0.0935%" height="15" fill="rgb(223,172,51)" fg:x="75652" fg:w="91"/><text x="78.0227%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="77.8232%" y="165" width="0.2219%" height="15" fill="rgb(232,163,44)" fg:x="75743" fg:w="216"/><text x="78.1162%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.0451%" y="165" width="0.2219%" height="15" fill="rgb(252,100,15)" fg:x="75959" fg:w="216"/><text x="78.3381%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.2671%" y="165" width="0.2435%" height="15" fill="rgb(207,20,24)" fg:x="76175" fg:w="237"/><text x="78.5600%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.5106%" y="165" width="0.2435%" height="15" fill="rgb(249,117,11)" fg:x="76412" fg:w="237"/><text x="78.8036%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="78.7541%" y="165" width="0.1449%" height="15" fill="rgb(227,61,18)" fg:x="76649" fg:w="141"/><text x="79.0471%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="78.8990%" y="165" width="0.1449%" height="15" fill="rgb(209,110,8)" fg:x="76790" fg:w="141"/><text x="79.1919%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="79.0438%" y="165" width="0.1613%" height="15" fill="rgb(239,88,23)" fg:x="76931" fg:w="157"/><text x="79.3368%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="80.8285%" y="165" width="0.2435%" height="15" fill="rgb(207,155,9)" fg:x="78668" fg:w="237"/><text x="81.1215%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.0721%" y="165" width="0.2435%" height="15" fill="rgb(253,4,0)" fg:x="78905" fg:w="237"/><text x="81.3650%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.3317%" y="165" width="0.2435%" height="15" fill="rgb(217,29,23)" fg:x="80131" fg:w="237"/><text x="82.6247%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.5752%" y="165" width="0.2435%" height="15" fill="rgb(205,119,34)" fg:x="80368" fg:w="237"/><text x="82.8682%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="83.6027%" y="165" width="0.0935%" height="15" fill="rgb(215,115,49)" fg:x="81368" fg:w="91"/><text x="83.8957%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="83.6962%" y="165" width="0.2548%" height="15" fill="rgb(248,4,9)" fg:x="81459" fg:w="248"/><text x="83.9892%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="83.9510%" y="165" width="0.2548%" height="15" fill="rgb(221,141,7)" fg:x="81707" fg:w="248"/><text x="84.2440%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.2058%" y="165" width="0.1778%" height="15" fill="rgb(230,74,30)" fg:x="81955" fg:w="173"/><text x="84.4988%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.3836%" y="165" width="0.1778%" height="15" fill="rgb(254,16,38)" fg:x="82128" fg:w="173"/><text x="84.6765%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.5613%" y="165" width="0.2764%" height="15" fill="rgb(240,224,25)" fg:x="82301" fg:w="269"/><text x="84.8543%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.8377%" y="165" width="0.2764%" height="15" fill="rgb(238,207,54)" fg:x="82570" fg:w="269"/><text x="85.1307%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="85.1141%" y="165" width="0.1778%" height="15" fill="rgb(233,127,40)" fg:x="82839" fg:w="173"/><text x="85.4071%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="86.8454%" y="165" width="0.2106%" height="15" fill="rgb(228,0,24)" fg:x="84524" fg:w="205"/><text x="87.1383%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.0560%" y="165" width="0.2106%" height="15" fill="rgb(208,227,29)" fg:x="84729" fg:w="205"/><text x="87.3490%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.2150%" y="165" width="0.1778%" height="15" fill="rgb(223,220,11)" fg:x="85857" fg:w="173"/><text x="88.5080%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.3927%" y="165" width="0.1778%" height="15" fill="rgb(251,165,37)" fg:x="86030" fg:w="173"/><text x="88.6857%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.4860%" y="165" width="0.2435%" height="15" fill="rgb(227,78,18)" fg:x="87094" fg:w="237"/><text x="89.7789%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.7295%" y="165" width="0.2435%" height="15" fill="rgb(231,170,28)" fg:x="87331" fg:w="237"/><text x="90.0224%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.1864%" y="165" width="0.2435%" height="15" fill="rgb(205,54,36)" fg:x="88749" fg:w="237"/><text x="91.4794%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.4299%" y="165" width="0.2435%" height="15" fill="rgb(234,35,51)" fg:x="88986" fg:w="237"/><text x="91.7229%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.4574%" y="165" width="0.2435%" height="15" fill="rgb(211,72,38)" fg:x="89986" fg:w="237"/><text x="92.7504%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.7009%" y="165" width="0.2435%" height="15" fill="rgb(250,138,0)" fg:x="90223" fg:w="237"/><text x="92.9939%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,714 instructions, 25.39%)</title><rect x="68.2699%" y="181" width="25.3927%" height="15" fill="rgb(229,128,52)" fg:x="66445" fg:w="24714"/><text x="68.5628%" y="191.50">alloc::collections::btree::map::BT..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,077 instructions, 1.11%)</title><rect x="93.6626%" y="181" width="1.1066%" height="15" fill="rgb(237,71,39)" fg:x="91159" fg:w="1077"/><text x="93.9556%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="94.7692%" y="149" width="0.0144%" height="15" fill="rgb(205,198,3)" fg:x="92236" fg:w="14"/><text x="95.0621%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.14%)</title><rect x="94.7836%" y="133" width="0.1387%" height="15" fill="rgb(241,173,14)" fg:x="92250" fg:w="135"/><text x="95.0765%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (170 instructions, 0.17%)</title><rect x="94.7836%" y="149" width="0.1747%" height="15" fill="rgb(241,217,35)" fg:x="92250" fg:w="170"/><text x="95.0765%" y="159.50"></text></g><g><title>memset (152 instructions, 0.16%)</title><rect x="94.9582%" y="149" width="0.1562%" height="15" fill="rgb(214,105,45)" fg:x="92420" fg:w="152"/><text x="95.2512%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (516 instructions, 0.53%)</title><rect x="94.7692%" y="165" width="0.5302%" height="15" fill="rgb(234,168,27)" fg:x="92236" fg:w="516"/><text x="95.0621%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.53%)</title><rect x="95.2994%" y="149" width="0.5322%" height="15" fill="rgb(250,114,36)" fg:x="92752" fg:w="518"/><text x="95.5923%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.12%)</title><rect x="95.8316%" y="101" width="0.1243%" height="15" fill="rgb(241,222,2)" fg:x="93270" fg:w="121"/><text x="96.1245%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.17%)</title><rect x="95.8316%" y="117" width="0.1685%" height="15" fill="rgb(232,75,2)" fg:x="93270" fg:w="164"/><text x="96.1245%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 instructions, 0.25%)</title><rect x="95.8316%" y="133" width="0.2497%" height="15" fill="rgb(237,208,0)" fg:x="93270" fg:w="243"/><text x="96.1245%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.0813%" y="133" width="0.0154%" height="15" fill="rgb(252,99,21)" fg:x="93513" fg:w="15"/><text x="96.3742%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.0967%" y="133" width="0.0154%" height="15" fill="rgb(225,178,32)" fg:x="93528" fg:w="15"/><text x="96.3896%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (461 instructions, 0.47%)</title><rect x="95.8316%" y="149" width="0.4737%" height="15" fill="rgb(229,225,16)" fg:x="93270" fg:w="461"/><text x="96.1245%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.53%)</title><rect x="96.3052%" y="149" width="0.5302%" height="15" fill="rgb(246,5,15)" fg:x="93731" fg:w="516"/><text x="96.5982%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,595 instructions, 1.64%)</title><rect x="95.2994%" y="165" width="1.6388%" height="15" fill="rgb(251,195,52)" fg:x="92752" fg:w="1595"/><text x="95.5923%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="96.9443%" y="165" width="0.0616%" height="15" fill="rgb(241,107,25)" fg:x="94353" fg:w="60"/><text x="97.2373%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,783 instructions, 2.86%)</title><rect x="94.7692%" y="181" width="2.8594%" height="15" fill="rgb(234,9,14)" fg:x="92236" fg:w="2783"/><text x="95.0621%" y="191.50">ic..</text></g><g><title>btreemap::batch_put_6_::{{closure}} (96,763 instructions, 99.42%)</title><rect x="0.1891%" y="197" width="99.4205%" height="15" fill="rgb(213,125,45)" fg:x="184" fg:w="96763"/><text x="0.4820%" y="207.50">btreemap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.01%)</title><rect x="99.6096%" y="197" width="0.0144%" height="15" fill="rgb(244,180,42)" fg:x="96947" fg:w="14"/><text x="99.9025%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="99.6250%" y="197" width="0.0884%" height="15" fill="rgb(214,118,30)" fg:x="96962" fg:w="86"/><text x="99.9179%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.14%)</title><rect x="99.7133%" y="197" width="0.1387%" height="15" fill="rgb(234,149,20)" fg:x="97048" fg:w="135"/><text x="100.0063%" y="207.50"></text></g><g><title>all (97,327 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,150,34)" fg:x="0" fg:w="97327"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (97,327 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,193,45)" fg:x="0" fg:w="97327"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>