<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="97154"><g><title>ic_cdk::setup (24 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0247%" height="15" fill="rgb(239,175,29)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.0247%" y="197" width="0.0844%" height="15" fill="rgb(244,72,4)" fg:x="24" fg:w="82"/><text x="0.3177%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.1091%" y="197" width="0.0844%" height="15" fill="rgb(211,220,4)" fg:x="106" fg:w="82"/><text x="0.4021%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="0.1935%" y="165" width="0.0844%" height="15" fill="rgb(220,40,54)" fg:x="188" fg:w="82"/><text x="0.4865%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="0.2779%" y="149" width="0.0844%" height="15" fill="rgb(227,110,18)" fg:x="270" fg:w="82"/><text x="0.5709%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="0.3623%" y="149" width="0.4560%" height="15" fill="rgb(224,129,25)" fg:x="352" fg:w="443"/><text x="0.6553%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="0.8183%" y="149" width="0.0978%" height="15" fill="rgb(238,182,28)" fg:x="795" fg:w="95"/><text x="1.1113%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9161%" y="149" width="0.0618%" height="15" fill="rgb(228,63,52)" fg:x="890" fg:w="60"/><text x="1.2090%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9778%" y="149" width="0.0618%" height="15" fill="rgb(210,86,37)" fg:x="950" fg:w="60"/><text x="1.2708%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0396%" y="149" width="0.0618%" height="15" fill="rgb(250,78,31)" fg:x="1010" fg:w="60"/><text x="1.3326%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.1013%" y="149" width="0.0618%" height="15" fill="rgb(224,149,43)" fg:x="1070" fg:w="60"/><text x="1.3943%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="1.1631%" y="149" width="0.0844%" height="15" fill="rgb(237,65,24)" fg:x="1130" fg:w="82"/><text x="1.4561%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="1.2475%" y="149" width="0.0721%" height="15" fill="rgb(215,29,33)" fg:x="1212" fg:w="70"/><text x="1.5405%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="1.3196%" y="149" width="0.4560%" height="15" fill="rgb(212,204,26)" fg:x="1282" fg:w="443"/><text x="1.6125%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="1.7755%" y="149" width="0.0196%" height="15" fill="rgb(232,144,54)" fg:x="1725" fg:w="19"/><text x="2.0685%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="1.7951%" y="133" width="0.0844%" height="15" fill="rgb(225,158,29)" fg:x="1744" fg:w="82"/><text x="2.0881%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="1.8795%" y="101" width="0.0690%" height="15" fill="rgb(222,12,44)" fg:x="1826" fg:w="67"/><text x="2.1725%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="1.8795%" y="117" width="0.0988%" height="15" fill="rgb(231,23,0)" fg:x="1826" fg:w="96"/><text x="2.1725%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="1.9783%" y="69" width="0.0113%" height="15" fill="rgb(240,111,9)" fg:x="1922" fg:w="11"/><text x="2.2713%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="1.9896%" y="53" width="0.0360%" height="15" fill="rgb(228,160,43)" fg:x="1933" fg:w="35"/><text x="2.2826%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="1.9896%" y="69" width="0.0659%" height="15" fill="rgb(233,23,36)" fg:x="1933" fg:w="64"/><text x="2.2826%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="1.9783%" y="85" width="0.1482%" height="15" fill="rgb(254,201,9)" fg:x="1922" fg:w="144"/><text x="2.2713%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="1.9783%" y="101" width="0.2151%" height="15" fill="rgb(227,92,3)" fg:x="1922" fg:w="209"/><text x="2.2713%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="1.9783%" y="117" width="0.2254%" height="15" fill="rgb(228,202,26)" fg:x="1922" fg:w="219"/><text x="2.2713%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.47%)</title><rect x="1.8795%" y="133" width="0.4704%" height="15" fill="rgb(232,12,16)" fg:x="1826" fg:w="457"/><text x="2.1725%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.70%)</title><rect x="1.7951%" y="149" width="0.6968%" height="15" fill="rgb(230,224,24)" fg:x="1744" fg:w="677"/><text x="2.0881%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="2.4919%" y="149" width="0.0978%" height="15" fill="rgb(217,135,45)" fg:x="2421" fg:w="95"/><text x="2.7849%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="2.5897%" y="149" width="0.0618%" height="15" fill="rgb(236,62,10)" fg:x="2516" fg:w="60"/><text x="2.8827%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="2.6515%" y="149" width="0.0782%" height="15" fill="rgb(246,170,13)" fg:x="2576" fg:w="76"/><text x="2.9444%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="2.7297%" y="149" width="0.0721%" height="15" fill="rgb(220,41,42)" fg:x="2652" fg:w="70"/><text x="3.0227%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.46%)</title><rect x="2.8017%" y="133" width="0.4560%" height="15" fill="rgb(245,74,34)" fg:x="2722" fg:w="443"/><text x="3.0947%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.2577%" y="133" width="0.0196%" height="15" fill="rgb(245,225,8)" fg:x="3165" fg:w="19"/><text x="3.5507%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="3.2773%" y="117" width="0.0844%" height="15" fill="rgb(236,176,30)" fg:x="3184" fg:w="82"/><text x="3.5702%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="3.3617%" y="85" width="0.0690%" height="15" fill="rgb(217,172,39)" fg:x="3266" fg:w="67"/><text x="3.6546%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="3.3617%" y="101" width="0.0988%" height="15" fill="rgb(228,77,26)" fg:x="3266" fg:w="96"/><text x="3.6546%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.4605%" y="53" width="0.0113%" height="15" fill="rgb(233,7,10)" fg:x="3362" fg:w="11"/><text x="3.7535%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.4718%" y="37" width="0.0360%" height="15" fill="rgb(224,207,44)" fg:x="3373" fg:w="35"/><text x="3.7648%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="3.4718%" y="53" width="0.0659%" height="15" fill="rgb(244,169,18)" fg:x="3373" fg:w="64"/><text x="3.7648%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="3.4605%" y="69" width="0.1482%" height="15" fill="rgb(207,80,33)" fg:x="3362" fg:w="144"/><text x="3.7535%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="3.4605%" y="85" width="0.2151%" height="15" fill="rgb(209,110,33)" fg:x="3362" fg:w="209"/><text x="3.7535%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="3.4605%" y="101" width="0.2254%" height="15" fill="rgb(231,209,16)" fg:x="3362" fg:w="219"/><text x="3.7535%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.47%)</title><rect x="3.3617%" y="117" width="0.4704%" height="15" fill="rgb(247,176,30)" fg:x="3266" fg:w="457"/><text x="3.6546%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.70%)</title><rect x="3.2773%" y="133" width="0.6968%" height="15" fill="rgb(238,168,24)" fg:x="3184" fg:w="677"/><text x="3.5702%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="3.9741%" y="133" width="0.0978%" height="15" fill="rgb(212,229,30)" fg:x="3861" fg:w="95"/><text x="4.2671%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="4.0719%" y="133" width="0.0618%" height="15" fill="rgb(230,120,21)" fg:x="3956" fg:w="60"/><text x="4.3649%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="4.1336%" y="117" width="0.0844%" height="15" fill="rgb(215,179,2)" fg:x="4016" fg:w="82"/><text x="4.4266%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.10%)</title><rect x="4.2180%" y="117" width="0.0978%" height="15" fill="rgb(237,98,38)" fg:x="4098" fg:w="95"/><text x="4.5110%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.3158%" y="117" width="0.0782%" height="15" fill="rgb(218,204,25)" fg:x="4193" fg:w="76"/><text x="4.6088%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.34%)</title><rect x="4.1336%" y="133" width="0.3397%" height="15" fill="rgb(218,182,10)" fg:x="4016" fg:w="330"/><text x="4.4266%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="4.4733%" y="133" width="0.0844%" height="15" fill="rgb(237,174,3)" fg:x="4346" fg:w="82"/><text x="4.7663%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 2.00%)</title><rect x="2.8017%" y="149" width="2.0030%" height="15" fill="rgb(242,71,19)" fg:x="2722" fg:w="1946"/><text x="3.0947%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.8047%" y="149" width="0.0782%" height="15" fill="rgb(228,115,13)" fg:x="4668" fg:w="76"/><text x="5.0977%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.8830%" y="149" width="0.0154%" height="15" fill="rgb(214,57,13)" fg:x="4744" fg:w="15"/><text x="5.1759%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.8984%" y="149" width="0.0154%" height="15" fill="rgb(240,9,50)" fg:x="4759" fg:w="15"/><text x="5.1914%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9138%" y="149" width="0.0154%" height="15" fill="rgb(210,202,33)" fg:x="4774" fg:w="15"/><text x="5.2068%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="4.9365%" y="133" width="0.0937%" height="15" fill="rgb(219,177,14)" fg:x="4796" fg:w="91"/><text x="5.2295%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.19%)</title><rect x="4.9365%" y="149" width="0.1925%" height="15" fill="rgb(229,106,23)" fg:x="4796" fg:w="187"/><text x="5.2295%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.08%)</title><rect x="5.1290%" y="117" width="0.0823%" height="15" fill="rgb(246,196,46)" fg:x="4983" fg:w="80"/><text x="5.4219%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (128 instructions, 0.13%)</title><rect x="5.1290%" y="133" width="0.1317%" height="15" fill="rgb(235,84,42)" fg:x="4983" fg:w="128"/><text x="5.4219%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (213 instructions, 0.22%)</title><rect x="5.1290%" y="149" width="0.2192%" height="15" fill="rgb(208,107,22)" fg:x="4983" fg:w="213"/><text x="5.4219%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.3482%" y="149" width="0.0937%" height="15" fill="rgb(225,126,3)" fg:x="5196" fg:w="91"/><text x="5.6412%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="5.4419%" y="149" width="0.0916%" height="15" fill="rgb(214,167,20)" fg:x="5287" fg:w="89"/><text x="5.7348%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.5335%" y="149" width="0.0937%" height="15" fill="rgb(220,87,6)" fg:x="5376" fg:w="91"/><text x="5.8265%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.6271%" y="149" width="0.0937%" height="15" fill="rgb(253,52,54)" fg:x="5467" fg:w="91"/><text x="5.9201%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="5.7249%" y="149" width="0.0916%" height="15" fill="rgb(210,106,34)" fg:x="5562" fg:w="89"/><text x="6.0179%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.40%)</title><rect x="5.8165%" y="149" width="0.4035%" height="15" fill="rgb(217,195,25)" fg:x="5651" fg:w="392"/><text x="6.1095%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.40%)</title><rect x="6.2200%" y="149" width="0.4035%" height="15" fill="rgb(247,91,26)" fg:x="6043" fg:w="392"/><text x="6.5130%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.52%)</title><rect x="6.6235%" y="149" width="0.5188%" height="15" fill="rgb(229,82,25)" fg:x="6435" fg:w="504"/><text x="6.9165%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,878 instructions, 8.11%)</title><rect x="0.2779%" y="165" width="8.1088%" height="15" fill="rgb(233,226,1)" fg:x="270" fg:w="7878"/><text x="0.5709%" y="175.50">candid::d..</text></g><g><title>memcpy (344 instructions, 0.35%)</title><rect x="8.3867%" y="165" width="0.3541%" height="15" fill="rgb(252,29,9)" fg:x="8148" fg:w="344"/><text x="8.6797%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.04%)</title><rect x="8.7408%" y="165" width="0.0401%" height="15" fill="rgb(214,155,2)" fg:x="8492" fg:w="39"/><text x="9.0337%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.08%)</title><rect x="8.7809%" y="165" width="0.0844%" height="15" fill="rgb(238,7,54)" fg:x="8531" fg:w="82"/><text x="9.0739%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="8.8725%" y="133" width="0.0607%" height="15" fill="rgb(234,25,52)" fg:x="8620" fg:w="59"/><text x="9.1655%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="8.9332%" y="133" width="0.0968%" height="15" fill="rgb(232,229,37)" fg:x="8679" fg:w="94"/><text x="9.2262%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="9.0300%" y="133" width="0.1781%" height="15" fill="rgb(221,221,14)" fg:x="8773" fg:w="173"/><text x="9.3230%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.60%)</title><rect x="8.8725%" y="149" width="0.5960%" height="15" fill="rgb(231,13,29)" fg:x="8620" fg:w="579"/><text x="9.1655%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 0.82%)</title><rect x="8.8653%" y="165" width="0.8203%" height="15" fill="rgb(206,15,23)" fg:x="8613" fg:w="797"/><text x="9.1583%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="9.6857%" y="165" width="0.0937%" height="15" fill="rgb(241,68,9)" fg:x="9410" fg:w="91"/><text x="9.9786%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="9.7865%" y="133" width="0.0607%" height="15" fill="rgb(229,27,29)" fg:x="9508" fg:w="59"/><text x="10.0795%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="9.8473%" y="133" width="0.0968%" height="15" fill="rgb(215,215,33)" fg:x="9567" fg:w="94"/><text x="10.1402%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="9.9440%" y="133" width="0.1781%" height="15" fill="rgb(242,14,17)" fg:x="9661" fg:w="173"/><text x="10.2370%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.60%)</title><rect x="9.7865%" y="149" width="0.5960%" height="15" fill="rgb(213,30,15)" fg:x="9508" fg:w="579"/><text x="10.0795%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="10.3825%" y="149" width="0.0793%" height="15" fill="rgb(215,100,3)" fg:x="10087" fg:w="77"/><text x="10.6755%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="10.4617%" y="133" width="0.0916%" height="15" fill="rgb(232,9,50)" fg:x="10164" fg:w="89"/><text x="10.7547%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.14%)</title><rect x="10.4617%" y="149" width="0.1369%" height="15" fill="rgb(205,71,12)" fg:x="10164" fg:w="133"/><text x="10.7547%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 1.00%)</title><rect x="9.7793%" y="165" width="1.0036%" height="15" fill="rgb(239,69,50)" fg:x="9501" fg:w="975"/><text x="10.0723%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="10.7829%" y="117" width="0.0607%" height="15" fill="rgb(230,173,33)" fg:x="10476" fg:w="59"/><text x="11.0758%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.10%)</title><rect x="10.7829%" y="133" width="0.1050%" height="15" fill="rgb(221,221,9)" fg:x="10476" fg:w="102"/><text x="11.0758%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.33%)</title><rect x="10.7829%" y="149" width="0.3325%" height="15" fill="rgb(230,63,39)" fg:x="10476" fg:w="323"/><text x="11.0758%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.618 (34 instructions, 0.03%)</title><rect x="11.1153%" y="149" width="0.0350%" height="15" fill="rgb(227,216,23)" fg:x="10799" fg:w="34"/><text x="11.4083%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.1503%" y="149" width="0.0134%" height="15" fill="rgb(247,220,39)" fg:x="10833" fg:w="13"/><text x="11.4433%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 0.57%)</title><rect x="10.7829%" y="165" width="0.5713%" height="15" fill="rgb(233,204,7)" fg:x="10476" fg:w="555"/><text x="11.0758%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.05%)</title><rect x="11.3541%" y="165" width="0.0504%" height="15" fill="rgb(221,122,45)" fg:x="11031" fg:w="49"/><text x="11.6471%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.09%)</title><rect x="11.4046%" y="149" width="0.0854%" height="15" fill="rgb(217,60,22)" fg:x="11080" fg:w="83"/><text x="11.6975%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.02%)</title><rect x="11.5353%" y="133" width="0.0237%" height="15" fill="rgb(208,154,30)" fg:x="11207" fg:w="23"/><text x="11.8283%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.14%)</title><rect x="11.5353%" y="149" width="0.1420%" height="15" fill="rgb(213,216,5)" fg:x="11207" fg:w="138"/><text x="11.8283%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.32%)</title><rect x="11.4046%" y="165" width="0.3181%" height="15" fill="rgb(248,197,25)" fg:x="11080" fg:w="309"/><text x="11.6975%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.04%)</title><rect x="11.7226%" y="149" width="0.0360%" height="15" fill="rgb(245,126,3)" fg:x="11389" fg:w="35"/><text x="12.0156%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.03%)</title><rect x="11.7587%" y="149" width="0.0350%" height="15" fill="rgb(241,118,12)" fg:x="11424" fg:w="34"/><text x="12.0516%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.03%)</title><rect x="11.7936%" y="149" width="0.0350%" height="15" fill="rgb(243,100,39)" fg:x="11458" fg:w="34"/><text x="12.0866%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.03%)</title><rect x="11.8286%" y="149" width="0.0340%" height="15" fill="rgb(253,180,12)" fg:x="11492" fg:w="33"/><text x="12.1216%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.26%)</title><rect x="11.7226%" y="165" width="0.2573%" height="15" fill="rgb(216,10,15)" fg:x="11389" fg:w="250"/><text x="12.0156%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.9799%" y="165" width="0.0134%" height="15" fill="rgb(218,83,30)" fg:x="11639" fg:w="13"/><text x="12.2729%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.9933%" y="165" width="0.0134%" height="15" fill="rgb(213,195,8)" fg:x="11652" fg:w="13"/><text x="12.2863%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="12.0067%" y="165" width="0.0134%" height="15" fill="rgb(244,100,44)" fg:x="11665" fg:w="13"/><text x="12.2997%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.04%)</title><rect x="12.0201%" y="165" width="0.0443%" height="15" fill="rgb(233,31,16)" fg:x="11678" fg:w="43"/><text x="12.3131%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.0716%" y="133" width="0.0278%" height="15" fill="rgb(206,166,50)" fg:x="11728" fg:w="27"/><text x="12.3645%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.15%)</title><rect x="12.0716%" y="149" width="0.1462%" height="15" fill="rgb(241,166,30)" fg:x="11728" fg:w="142"/><text x="12.3645%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.2177%" y="117" width="0.0278%" height="15" fill="rgb(235,158,11)" fg:x="11870" fg:w="27"/><text x="12.5107%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.15%)</title><rect x="12.2177%" y="133" width="0.1462%" height="15" fill="rgb(240,182,36)" fg:x="11870" fg:w="142"/><text x="12.5107%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.19%)</title><rect x="12.2177%" y="149" width="0.1914%" height="15" fill="rgb(237,127,13)" fg:x="11870" fg:w="186"/><text x="12.5107%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="12.4092%" y="149" width="0.0134%" height="15" fill="rgb(215,50,40)" fg:x="12056" fg:w="13"/><text x="12.7021%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (415 instructions, 0.43%)</title><rect x="12.0644%" y="165" width="0.4272%" height="15" fill="rgb(239,229,38)" fg:x="11721" fg:w="415"/><text x="12.3573%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.4915%" y="149" width="0.0278%" height="15" fill="rgb(213,186,31)" fg:x="12136" fg:w="27"/><text x="12.7845%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.14%)</title><rect x="12.4915%" y="165" width="0.1400%" height="15" fill="rgb(234,109,8)" fg:x="12136" fg:w="136"/><text x="12.7845%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,653 instructions, 14.05%)</title><rect x="0.1935%" y="181" width="14.0529%" height="15" fill="rgb(222,99,23)" fg:x="188" fg:w="13653"/><text x="0.4865%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.2465%" y="165" width="0.2110%" height="15" fill="rgb(226,148,47)" fg:x="13841" fg:w="205"/><text x="14.5394%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.4575%" y="165" width="0.2110%" height="15" fill="rgb(241,23,36)" fg:x="14046" fg:w="205"/><text x="14.7504%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.8511%" y="165" width="0.2439%" height="15" fill="rgb(212,29,29)" fg:x="15400" fg:w="237"/><text x="16.1441%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="16.0951%" y="165" width="0.2439%" height="15" fill="rgb(213,58,33)" fg:x="15637" fg:w="237"/><text x="16.3880%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="17.2232%" y="165" width="0.1451%" height="15" fill="rgb(238,151,24)" fg:x="16733" fg:w="141"/><text x="17.5161%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="17.3683%" y="165" width="0.1451%" height="15" fill="rgb(240,142,6)" fg:x="16874" fg:w="141"/><text x="17.6613%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="18.5973%" y="165" width="0.0937%" height="15" fill="rgb(213,109,20)" fg:x="18068" fg:w="91"/><text x="18.8902%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="18.6909%" y="165" width="0.2553%" height="15" fill="rgb(254,167,51)" fg:x="18159" fg:w="248"/><text x="18.9839%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="18.9462%" y="165" width="0.2553%" height="15" fill="rgb(243,220,5)" fg:x="18407" fg:w="248"/><text x="19.2392%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.2015%" y="165" width="0.1781%" height="15" fill="rgb(244,9,1)" fg:x="18655" fg:w="173"/><text x="19.4944%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.3795%" y="165" width="0.1781%" height="15" fill="rgb(233,97,50)" fg:x="18828" fg:w="173"/><text x="19.6725%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.5576%" y="165" width="0.3428%" height="15" fill="rgb(251,169,16)" fg:x="19001" fg:w="333"/><text x="19.8506%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.9004%" y="165" width="0.3428%" height="15" fill="rgb(215,82,47)" fg:x="19334" fg:w="333"/><text x="20.1933%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="20.2431%" y="165" width="0.2110%" height="15" fill="rgb(238,69,16)" fg:x="19667" fg:w="205"/><text x="20.5361%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.5874%" y="165" width="0.2439%" height="15" fill="rgb(226,17,46)" fg:x="20973" fg:w="237"/><text x="21.8803%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.8313%" y="165" width="0.2439%" height="15" fill="rgb(246,82,35)" fg:x="21210" fg:w="237"/><text x="22.1243%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.7947%" y="165" width="0.1451%" height="15" fill="rgb(249,145,33)" fg:x="22146" fg:w="141"/><text x="23.0877%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.9399%" y="165" width="0.1451%" height="15" fill="rgb(223,37,14)" fg:x="22287" fg:w="141"/><text x="23.2328%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="24.1009%" y="165" width="0.1451%" height="15" fill="rgb(231,219,2)" fg:x="23415" fg:w="141"/><text x="24.3939%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="24.2460%" y="165" width="0.1451%" height="15" fill="rgb(247,65,28)" fg:x="23556" fg:w="141"/><text x="24.5390%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="25.3083%" y="165" width="0.0937%" height="15" fill="rgb(249,20,38)" fg:x="24588" fg:w="91"/><text x="25.6012%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="25.4019%" y="165" width="0.2553%" height="15" fill="rgb(223,227,47)" fg:x="24679" fg:w="248"/><text x="25.6949%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="25.6572%" y="165" width="0.2553%" height="15" fill="rgb(251,11,52)" fg:x="24927" fg:w="248"/><text x="25.9502%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="25.9125%" y="165" width="0.1451%" height="15" fill="rgb(233,4,10)" fg:x="25175" fg:w="141"/><text x="26.2054%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="26.0576%" y="165" width="0.1451%" height="15" fill="rgb(252,183,49)" fg:x="25316" fg:w="141"/><text x="26.3506%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.2027%" y="165" width="0.2439%" height="15" fill="rgb(213,161,43)" fg:x="25457" fg:w="237"/><text x="26.4957%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.4467%" y="165" width="0.2439%" height="15" fill="rgb(215,147,52)" fg:x="25694" fg:w="237"/><text x="26.7396%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="26.6906%" y="165" width="0.1616%" height="15" fill="rgb(207,140,52)" fg:x="25931" fg:w="157"/><text x="26.9836%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="28.0493%" y="165" width="0.3098%" height="15" fill="rgb(208,145,53)" fg:x="27251" fg:w="301"/><text x="28.3423%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="28.3591%" y="165" width="0.3098%" height="15" fill="rgb(206,181,4)" fg:x="27552" fg:w="301"/><text x="28.6521%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.6540%" y="165" width="0.2439%" height="15" fill="rgb(212,151,6)" fg:x="28810" fg:w="237"/><text x="29.9469%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.8979%" y="165" width="0.2439%" height="15" fill="rgb(251,137,31)" fg:x="29047" fg:w="237"/><text x="30.1909%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,690 instructions, 17.18%)</title><rect x="14.2465%" y="181" width="17.1789%" height="15" fill="rgb(222,143,2)" fg:x="13841" fg:w="16690"/><text x="14.5394%" y="191.50">alloc::collections::bt..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.3034%" y="165" width="0.2110%" height="15" fill="rgb(218,48,44)" fg:x="31384" fg:w="205"/><text x="32.5963%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.5144%" y="165" width="0.2110%" height="15" fill="rgb(224,50,22)" fg:x="31589" fg:w="205"/><text x="32.8073%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.8421%" y="165" width="0.2439%" height="15" fill="rgb(207,168,11)" fg:x="32879" fg:w="237"/><text x="34.1351%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="34.0861%" y="165" width="0.2439%" height="15" fill="rgb(229,19,7)" fg:x="33116" fg:w="237"/><text x="34.3791%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.1154%" y="165" width="0.2439%" height="15" fill="rgb(216,185,45)" fg:x="34116" fg:w="237"/><text x="35.4084%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.3593%" y="165" width="0.2439%" height="15" fill="rgb(211,170,44)" fg:x="34353" fg:w="237"/><text x="35.6523%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,982 instructions, 5.13%)</title><rect x="31.4254%" y="181" width="5.1279%" height="15" fill="rgb(221,125,1)" fg:x="30531" fg:w="4982"/><text x="31.7183%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="37.7298%" y="165" width="0.0937%" height="15" fill="rgb(237,123,38)" fg:x="36656" fg:w="91"/><text x="38.0228%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="37.8235%" y="165" width="0.2553%" height="15" fill="rgb(239,228,1)" fg:x="36747" fg:w="248"/><text x="38.1164%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="38.0787%" y="165" width="0.2553%" height="15" fill="rgb(221,30,13)" fg:x="36995" fg:w="248"/><text x="38.3717%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.3340%" y="165" width="0.1781%" height="15" fill="rgb(237,99,0)" fg:x="37243" fg:w="173"/><text x="38.6270%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.5121%" y="165" width="0.1781%" height="15" fill="rgb(212,188,38)" fg:x="37416" fg:w="173"/><text x="38.8050%" y="175.50"></text></g><g><title>memmove (221 instructions, 0.23%)</title><rect x="38.6901%" y="165" width="0.2275%" height="15" fill="rgb(215,29,51)" fg:x="37589" fg:w="221"/><text x="38.9831%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.1208%" y="165" width="0.1781%" height="15" fill="rgb(252,118,23)" fg:x="38979" fg:w="173"/><text x="40.4138%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.2989%" y="165" width="0.1781%" height="15" fill="rgb(238,80,8)" fg:x="39152" fg:w="173"/><text x="40.5919%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.8552%" y="165" width="0.1616%" height="15" fill="rgb(207,42,5)" fg:x="40664" fg:w="157"/><text x="42.1482%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="42.0168%" y="165" width="0.1616%" height="15" fill="rgb(254,58,12)" fg:x="40821" fg:w="157"/><text x="42.3098%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="43.1614%" y="165" width="0.0937%" height="15" fill="rgb(252,10,37)" fg:x="41933" fg:w="91"/><text x="43.4543%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="43.2550%" y="165" width="0.2553%" height="15" fill="rgb(232,76,45)" fg:x="42024" fg:w="248"/><text x="43.5480%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="43.5103%" y="165" width="0.2553%" height="15" fill="rgb(230,67,17)" fg:x="42272" fg:w="248"/><text x="43.8033%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.2045%" y="165" width="0.3098%" height="15" fill="rgb(211,44,22)" fg:x="43918" fg:w="301"/><text x="45.4975%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.5143%" y="165" width="0.3098%" height="15" fill="rgb(248,130,29)" fg:x="44219" fg:w="301"/><text x="45.8073%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="46.7083%" y="165" width="0.1451%" height="15" fill="rgb(252,148,11)" fg:x="45379" fg:w="141"/><text x="47.0013%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="46.8534%" y="165" width="0.1451%" height="15" fill="rgb(220,184,0)" fg:x="45520" fg:w="141"/><text x="47.1464%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="47.9836%" y="165" width="0.1451%" height="15" fill="rgb(210,47,12)" fg:x="46618" fg:w="141"/><text x="48.2766%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="48.1287%" y="165" width="0.1451%" height="15" fill="rgb(208,179,24)" fg:x="46759" fg:w="141"/><text x="48.4217%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.6212%" y="165" width="0.1616%" height="15" fill="rgb(254,45,16)" fg:x="48209" fg:w="157"/><text x="49.9142%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.7828%" y="165" width="0.1616%" height="15" fill="rgb(208,4,38)" fg:x="48366" fg:w="157"/><text x="50.0758%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.8945%" y="165" width="0.2110%" height="15" fill="rgb(244,190,27)" fg:x="49446" fg:w="205"/><text x="51.1874%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="51.1055%" y="165" width="0.2110%" height="15" fill="rgb(250,49,31)" fg:x="49651" fg:w="205"/><text x="51.3984%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.1698%" y="165" width="0.3098%" height="15" fill="rgb(232,64,11)" fg:x="50685" fg:w="301"/><text x="52.4627%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.4796%" y="165" width="0.3098%" height="15" fill="rgb(230,127,14)" fg:x="50986" fg:w="301"/><text x="52.7725%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.8403%" y="165" width="0.2769%" height="15" fill="rgb(242,53,1)" fg:x="52308" fg:w="269"/><text x="54.1333%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="54.1172%" y="165" width="0.2769%" height="15" fill="rgb(231,187,36)" fg:x="52577" fg:w="269"/><text x="54.4101%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.7085%" y="165" width="0.3428%" height="15" fill="rgb(234,27,53)" fg:x="54123" fg:w="333"/><text x="56.0014%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="56.0512%" y="165" width="0.3428%" height="15" fill="rgb(214,93,15)" fg:x="54456" fg:w="333"/><text x="56.3442%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.4778%" y="165" width="0.3098%" height="15" fill="rgb(219,218,14)" fg:x="55842" fg:w="301"/><text x="57.7708%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.7876%" y="165" width="0.3098%" height="15" fill="rgb(231,131,54)" fg:x="56143" fg:w="301"/><text x="58.0806%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,048 instructions, 22.69%)</title><rect x="36.5533%" y="181" width="22.6939%" height="15" fill="rgb(243,95,28)" fg:x="35513" fg:w="22048"/><text x="36.8463%" y="191.50">alloc::collections::btree::map..</text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.1910%" y="165" width="0.1616%" height="15" fill="rgb(215,78,33)" fg:x="58478" fg:w="157"/><text x="60.4840%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.3526%" y="165" width="0.1616%" height="15" fill="rgb(237,218,27)" fg:x="58635" fg:w="157"/><text x="60.6456%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="61.9954%" y="165" width="0.3098%" height="15" fill="rgb(238,42,28)" fg:x="60231" fg:w="301"/><text x="62.2884%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="62.3052%" y="165" width="0.3098%" height="15" fill="rgb(210,54,14)" fg:x="60532" fg:w="301"/><text x="62.5982%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="63.5321%" y="165" width="0.0937%" height="15" fill="rgb(212,116,8)" fg:x="61724" fg:w="91"/><text x="63.8251%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.6258%" y="165" width="0.1894%" height="15" fill="rgb(249,45,6)" fg:x="61815" fg:w="184"/><text x="63.9188%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.8152%" y="165" width="0.1894%" height="15" fill="rgb(212,117,27)" fg:x="61999" fg:w="184"/><text x="64.1081%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.0046%" y="165" width="0.1451%" height="15" fill="rgb(208,213,11)" fg:x="62183" fg:w="141"/><text x="64.2975%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.1497%" y="165" width="0.1451%" height="15" fill="rgb(216,226,50)" fg:x="62324" fg:w="141"/><text x="64.4427%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.2948%" y="165" width="0.1451%" height="15" fill="rgb(253,87,2)" fg:x="62465" fg:w="141"/><text x="64.5878%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="64.4400%" y="165" width="0.1451%" height="15" fill="rgb(206,69,15)" fg:x="62606" fg:w="141"/><text x="64.7329%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="64.5851%" y="165" width="0.1616%" height="15" fill="rgb(208,169,43)" fg:x="62747" fg:w="157"/><text x="64.8781%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="66.2443%" y="165" width="0.0937%" height="15" fill="rgb(245,199,52)" fg:x="64359" fg:w="91"/><text x="66.5373%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.3380%" y="165" width="0.2553%" height="15" fill="rgb(228,198,34)" fg:x="64450" fg:w="248"/><text x="66.6309%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.5932%" y="165" width="0.2553%" height="15" fill="rgb(216,151,34)" fg:x="64698" fg:w="248"/><text x="66.8862%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.8485%" y="165" width="0.2110%" height="15" fill="rgb(232,94,50)" fg:x="64946" fg:w="205"/><text x="67.1415%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="67.0595%" y="165" width="0.2110%" height="15" fill="rgb(209,3,15)" fg:x="65151" fg:w="205"/><text x="67.3525%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,975 instructions, 9.24%)</title><rect x="59.2472%" y="181" width="9.2379%" height="15" fill="rgb(214,37,33)" fg:x="57561" fg:w="8975"/><text x="59.5401%" y="191.50">alloc::coll..</text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.4289%" y="165" width="0.1781%" height="15" fill="rgb(207,121,13)" fg:x="67453" fg:w="173"/><text x="69.7219%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.6070%" y="165" width="0.1781%" height="15" fill="rgb(227,184,28)" fg:x="67626" fg:w="173"/><text x="69.9000%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.7042%" y="165" width="0.2110%" height="15" fill="rgb(208,111,11)" fg:x="68692" fg:w="205"/><text x="70.9972%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.9152%" y="165" width="0.2110%" height="15" fill="rgb(211,228,26)" fg:x="68897" fg:w="205"/><text x="71.2082%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.1442%" y="165" width="0.2439%" height="15" fill="rgb(228,143,40)" fg:x="70091" fg:w="237"/><text x="72.4372%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.3882%" y="165" width="0.2439%" height="15" fill="rgb(207,70,41)" fg:x="70328" fg:w="237"/><text x="72.6811%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.7139%" y="165" width="0.2110%" height="15" fill="rgb(210,40,8)" fg:x="71616" fg:w="205"/><text x="74.0069%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.9249%" y="165" width="0.2110%" height="15" fill="rgb(232,228,9)" fg:x="71821" fg:w="205"/><text x="74.2179%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.0859%" y="165" width="0.1781%" height="15" fill="rgb(207,46,26)" fg:x="72949" fg:w="173"/><text x="75.3789%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.2640%" y="165" width="0.1781%" height="15" fill="rgb(214,165,30)" fg:x="73122" fg:w="173"/><text x="75.5570%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.3262%" y="165" width="0.2769%" height="15" fill="rgb(233,200,11)" fg:x="74154" fg:w="269"/><text x="76.6192%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.6031%" y="165" width="0.2769%" height="15" fill="rgb(238,132,1)" fg:x="74423" fg:w="269"/><text x="76.8961%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="77.9618%" y="165" width="0.0937%" height="15" fill="rgb(243,146,43)" fg:x="75743" fg:w="91"/><text x="78.2548%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.0555%" y="165" width="0.2223%" height="15" fill="rgb(232,134,5)" fg:x="75834" fg:w="216"/><text x="78.3484%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.2778%" y="165" width="0.2223%" height="15" fill="rgb(243,40,14)" fg:x="76050" fg:w="216"/><text x="78.5708%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.5001%" y="165" width="0.2439%" height="15" fill="rgb(207,200,8)" fg:x="76266" fg:w="237"/><text x="78.7931%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.7441%" y="165" width="0.2439%" height="15" fill="rgb(244,38,45)" fg:x="76503" fg:w="237"/><text x="79.0370%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="78.9880%" y="165" width="0.1451%" height="15" fill="rgb(217,135,3)" fg:x="76740" fg:w="141"/><text x="79.2810%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="79.1331%" y="165" width="0.1451%" height="15" fill="rgb(235,175,50)" fg:x="76881" fg:w="141"/><text x="79.4261%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="79.2783%" y="165" width="0.1616%" height="15" fill="rgb(230,40,13)" fg:x="77022" fg:w="157"/><text x="79.5712%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.0672%" y="165" width="0.2439%" height="15" fill="rgb(221,107,24)" fg:x="78760" fg:w="237"/><text x="81.3601%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.3111%" y="165" width="0.2439%" height="15" fill="rgb(242,173,16)" fg:x="78997" fg:w="237"/><text x="81.6041%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.5730%" y="165" width="0.2439%" height="15" fill="rgb(252,31,53)" fg:x="80223" fg:w="237"/><text x="82.8660%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.8170%" y="165" width="0.2439%" height="15" fill="rgb(211,205,38)" fg:x="80460" fg:w="237"/><text x="83.1099%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="83.8463%" y="165" width="0.0937%" height="15" fill="rgb(221,182,5)" fg:x="81460" fg:w="91"/><text x="84.1392%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.9399%" y="165" width="0.2553%" height="15" fill="rgb(236,96,26)" fg:x="81551" fg:w="248"/><text x="84.2329%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="84.1952%" y="165" width="0.2553%" height="15" fill="rgb(223,65,12)" fg:x="81799" fg:w="248"/><text x="84.4882%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.4505%" y="165" width="0.1781%" height="15" fill="rgb(245,215,28)" fg:x="82047" fg:w="173"/><text x="84.7434%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.6285%" y="165" width="0.1781%" height="15" fill="rgb(240,155,6)" fg:x="82220" fg:w="173"/><text x="84.9215%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.8066%" y="165" width="0.2769%" height="15" fill="rgb(222,110,32)" fg:x="82393" fg:w="269"/><text x="85.0996%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="85.0835%" y="165" width="0.2769%" height="15" fill="rgb(210,91,2)" fg:x="82662" fg:w="269"/><text x="85.3764%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="85.3604%" y="165" width="0.1781%" height="15" fill="rgb(229,203,5)" fg:x="82931" fg:w="173"/><text x="85.6533%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.0875%" y="165" width="0.2110%" height="15" fill="rgb(235,134,32)" fg:x="84609" fg:w="205"/><text x="87.3805%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.2985%" y="165" width="0.2110%" height="15" fill="rgb(246,139,1)" fg:x="84814" fg:w="205"/><text x="87.5915%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.4596%" y="165" width="0.1781%" height="15" fill="rgb(239,161,38)" fg:x="85942" fg:w="173"/><text x="88.7525%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.6376%" y="165" width="0.1781%" height="15" fill="rgb(246,213,49)" fg:x="86115" fg:w="173"/><text x="88.9306%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.7328%" y="165" width="0.2439%" height="15" fill="rgb(241,44,23)" fg:x="87179" fg:w="237"/><text x="90.0258%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.9767%" y="165" width="0.2439%" height="15" fill="rgb(218,37,50)" fg:x="87416" fg:w="237"/><text x="90.2697%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.4363%" y="165" width="0.2439%" height="15" fill="rgb(253,19,47)" fg:x="88834" fg:w="237"/><text x="91.7292%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.6802%" y="165" width="0.2439%" height="15" fill="rgb(208,95,48)" fg:x="89071" fg:w="237"/><text x="91.9732%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.7095%" y="165" width="0.2439%" height="15" fill="rgb(251,182,13)" fg:x="90071" fg:w="237"/><text x="93.0025%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.9535%" y="165" width="0.2439%" height="15" fill="rgb(207,72,17)" fg:x="90308" fg:w="237"/><text x="93.2464%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,708 instructions, 25.43%)</title><rect x="68.4851%" y="181" width="25.4318%" height="15" fill="rgb(245,40,50)" fg:x="66536" fg:w="24708"/><text x="68.7781%" y="191.50">alloc::collections::btree::map::BT..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,077 instructions, 1.11%)</title><rect x="93.9169%" y="181" width="1.1085%" height="15" fill="rgb(252,43,5)" fg:x="91244" fg:w="1077"/><text x="94.2098%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="95.0326%" y="133" width="0.0278%" height="15" fill="rgb(223,190,4)" fg:x="92328" fg:w="27"/><text x="95.3256%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.15%)</title><rect x="95.0326%" y="149" width="0.1482%" height="15" fill="rgb(242,187,16)" fg:x="92328" fg:w="144"/><text x="95.3256%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188 instructions, 0.19%)</title><rect x="95.0326%" y="165" width="0.1935%" height="15" fill="rgb(254,28,11)" fg:x="92328" fg:w="188"/><text x="95.3256%" y="175.50"></text></g><g><title>memset (152 instructions, 0.16%)</title><rect x="95.2261%" y="165" width="0.1565%" height="15" fill="rgb(214,191,44)" fg:x="92516" fg:w="152"/><text x="95.5191%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (521 instructions, 0.54%)</title><rect x="95.0254%" y="181" width="0.5363%" height="15" fill="rgb(246,104,7)" fg:x="92321" fg:w="521"/><text x="95.3184%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.53%)</title><rect x="95.5617%" y="165" width="0.5332%" height="15" fill="rgb(206,189,28)" fg:x="92842" fg:w="518"/><text x="95.8547%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (116 instructions, 0.12%)</title><rect x="96.0949%" y="117" width="0.1194%" height="15" fill="rgb(214,40,12)" fg:x="93360" fg:w="116"/><text x="96.3878%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.17%)</title><rect x="96.0949%" y="133" width="0.1688%" height="15" fill="rgb(254,207,30)" fg:x="93360" fg:w="164"/><text x="96.3878%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (246 instructions, 0.25%)</title><rect x="96.0949%" y="149" width="0.2532%" height="15" fill="rgb(245,203,6)" fg:x="93360" fg:w="246"/><text x="96.3878%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.3481%" y="149" width="0.0154%" height="15" fill="rgb(214,62,40)" fg:x="93606" fg:w="15"/><text x="96.6410%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.3635%" y="149" width="0.0154%" height="15" fill="rgb(219,195,29)" fg:x="93621" fg:w="15"/><text x="96.6565%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (464 instructions, 0.48%)</title><rect x="96.0949%" y="165" width="0.4776%" height="15" fill="rgb(235,127,41)" fg:x="93360" fg:w="464"/><text x="96.3878%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.53%)</title><rect x="96.5725%" y="165" width="0.5311%" height="15" fill="rgb(213,229,13)" fg:x="93824" fg:w="516"/><text x="96.8654%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,602 instructions, 1.65%)</title><rect x="95.5617%" y="181" width="1.6489%" height="15" fill="rgb(240,25,38)" fg:x="92842" fg:w="1602"/><text x="95.8547%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="97.2178%" y="165" width="0.0618%" height="15" fill="rgb(233,46,21)" fg:x="94451" fg:w="60"/><text x="97.5108%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.13%)</title><rect x="97.2106%" y="181" width="0.1348%" height="15" fill="rgb(205,19,12)" fg:x="94444" fg:w="131"/><text x="97.5036%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_put::{{closure}} (96,603 instructions, 99.43%)</title><rect x="0.1935%" y="197" width="99.4329%" height="15" fill="rgb(205,77,8)" fg:x="188" fg:w="96603"/><text x="0.4865%" y="207.50">btreemap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.01%)</title><rect x="99.6264%" y="197" width="0.0144%" height="15" fill="rgb(237,71,25)" fg:x="96791" fg:w="14"/><text x="99.9193%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.7334%" y="181" width="0.0278%" height="15" fill="rgb(225,31,33)" fg:x="96895" fg:w="27"/><text x="100.0264%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.21%)</title><rect x="99.6418%" y="197" width="0.2100%" height="15" fill="rgb(246,43,46)" fg:x="96806" fg:w="204"/><text x="99.9348%" y="207.50"></text></g><g><title>all (97,154 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,43,29)" fg:x="0" fg:w="97154"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (97,154 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,163,28)" fg:x="0" fg:w="97154"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>