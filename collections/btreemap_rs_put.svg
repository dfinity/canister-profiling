<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="86494"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0220%" height="15" fill="rgb(206,148,27)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0220%" y="197" width="0.0879%" height="15" fill="rgb(237,143,33)" fg:x="19" fg:w="76"/><text x="0.3149%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.08%)</title><rect x="0.1098%" y="197" width="0.0821%" height="15" fill="rgb(238,222,19)" fg:x="95" fg:w="71"/><text x="0.4028%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.13%)</title><rect x="0.1919%" y="165" width="0.1306%" height="15" fill="rgb(243,82,10)" fg:x="166" fg:w="113"/><text x="0.4849%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.08%)</title><rect x="0.3226%" y="149" width="0.0821%" height="15" fill="rgb(225,103,47)" fg:x="279" fg:w="71"/><text x="0.6155%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.46%)</title><rect x="0.4047%" y="149" width="0.4648%" height="15" fill="rgb(213,2,25)" fg:x="350" fg:w="402"/><text x="0.6976%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.10%)</title><rect x="0.8694%" y="149" width="0.0960%" height="15" fill="rgb(251,74,18)" fg:x="752" fg:w="83"/><text x="1.1624%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="0.9654%" y="149" width="0.0624%" height="15" fill="rgb(246,44,38)" fg:x="835" fg:w="54"/><text x="1.2584%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.0278%" y="149" width="0.0624%" height="15" fill="rgb(223,44,19)" fg:x="889" fg:w="54"/><text x="1.3208%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.0902%" y="149" width="0.0624%" height="15" fill="rgb(245,82,38)" fg:x="943" fg:w="54"/><text x="1.3832%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.06%)</title><rect x="1.1527%" y="149" width="0.0624%" height="15" fill="rgb(209,55,10)" fg:x="997" fg:w="54"/><text x="1.4456%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.08%)</title><rect x="1.2151%" y="149" width="0.0821%" height="15" fill="rgb(243,44,53)" fg:x="1051" fg:w="71"/><text x="1.5081%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.2972%" y="149" width="0.0751%" height="15" fill="rgb(254,154,28)" fg:x="1122" fg:w="65"/><text x="1.5902%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.46%)</title><rect x="1.3723%" y="149" width="0.4648%" height="15" fill="rgb(231,34,12)" fg:x="1187" fg:w="402"/><text x="1.6653%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.8371%" y="149" width="0.0185%" height="15" fill="rgb(245,93,34)" fg:x="1589" fg:w="16"/><text x="2.1301%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.8556%" y="133" width="0.0879%" height="15" fill="rgb(248,64,0)" fg:x="1605" fg:w="76"/><text x="2.1486%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="1.9435%" y="101" width="0.0694%" height="15" fill="rgb(230,14,33)" fg:x="1681" fg:w="60"/><text x="2.2365%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="1.9435%" y="117" width="0.0983%" height="15" fill="rgb(208,165,3)" fg:x="1681" fg:w="85"/><text x="2.2365%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.0418%" y="69" width="0.0104%" height="15" fill="rgb(247,12,49)" fg:x="1766" fg:w="9"/><text x="2.3347%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.0522%" y="53" width="0.0347%" height="15" fill="rgb(243,187,49)" fg:x="1775" fg:w="30"/><text x="2.3451%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.06%)</title><rect x="2.0522%" y="69" width="0.0636%" height="15" fill="rgb(252,126,46)" fg:x="1775" fg:w="55"/><text x="2.3451%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.13%)</title><rect x="2.0418%" y="85" width="0.1318%" height="15" fill="rgb(229,139,18)" fg:x="1766" fg:w="114"/><text x="2.3347%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.19%)</title><rect x="2.0418%" y="101" width="0.1931%" height="15" fill="rgb(216,132,2)" fg:x="1766" fg:w="167"/><text x="2.3347%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.20%)</title><rect x="2.0418%" y="117" width="0.1989%" height="15" fill="rgb(220,101,7)" fg:x="1766" fg:w="172"/><text x="2.3347%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.43%)</title><rect x="1.9435%" y="133" width="0.4255%" height="15" fill="rgb(252,198,28)" fg:x="1681" fg:w="368"/><text x="2.2365%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.65%)</title><rect x="1.8556%" y="149" width="0.6532%" height="15" fill="rgb(213,107,44)" fg:x="1605" fg:w="565"/><text x="2.1486%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.10%)</title><rect x="2.5088%" y="149" width="0.0960%" height="15" fill="rgb(231,228,14)" fg:x="2170" fg:w="83"/><text x="2.8018%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="2.6048%" y="149" width="0.0636%" height="15" fill="rgb(239,26,16)" fg:x="2253" fg:w="55"/><text x="2.8978%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.08%)</title><rect x="2.6684%" y="149" width="0.0751%" height="15" fill="rgb(229,201,25)" fg:x="2308" fg:w="65"/><text x="2.9614%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.7435%" y="149" width="0.0751%" height="15" fill="rgb(207,8,18)" fg:x="2373" fg:w="65"/><text x="3.0365%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.46%)</title><rect x="2.8187%" y="133" width="0.4648%" height="15" fill="rgb(230,151,39)" fg:x="2438" fg:w="402"/><text x="3.1117%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.2835%" y="133" width="0.0185%" height="15" fill="rgb(238,47,15)" fg:x="2840" fg:w="16"/><text x="3.5764%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.3020%" y="117" width="0.0879%" height="15" fill="rgb(235,211,3)" fg:x="2856" fg:w="76"/><text x="3.5949%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.3898%" y="85" width="0.0694%" height="15" fill="rgb(212,66,41)" fg:x="2932" fg:w="60"/><text x="3.6828%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.3898%" y="101" width="0.0983%" height="15" fill="rgb(243,132,45)" fg:x="2932" fg:w="85"/><text x="3.6828%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.4881%" y="53" width="0.0104%" height="15" fill="rgb(247,35,40)" fg:x="3017" fg:w="9"/><text x="3.7811%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="3.4985%" y="37" width="0.0347%" height="15" fill="rgb(219,220,9)" fg:x="3026" fg:w="30"/><text x="3.7915%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.06%)</title><rect x="3.4985%" y="53" width="0.0636%" height="15" fill="rgb(209,227,13)" fg:x="3026" fg:w="55"/><text x="3.7915%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.13%)</title><rect x="3.4881%" y="69" width="0.1318%" height="15" fill="rgb(244,196,50)" fg:x="3017" fg:w="114"/><text x="3.7811%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.19%)</title><rect x="3.4881%" y="85" width="0.1931%" height="15" fill="rgb(216,49,13)" fg:x="3017" fg:w="167"/><text x="3.7811%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.20%)</title><rect x="3.4881%" y="101" width="0.1989%" height="15" fill="rgb(240,209,10)" fg:x="3017" fg:w="172"/><text x="3.7811%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.43%)</title><rect x="3.3898%" y="117" width="0.4255%" height="15" fill="rgb(215,225,1)" fg:x="2932" fg:w="368"/><text x="3.6828%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.65%)</title><rect x="3.3020%" y="133" width="0.6532%" height="15" fill="rgb(251,37,13)" fg:x="2856" fg:w="565"/><text x="3.5949%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.10%)</title><rect x="3.9552%" y="133" width="0.0960%" height="15" fill="rgb(250,72,49)" fg:x="3421" fg:w="83"/><text x="4.2482%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="4.0511%" y="133" width="0.0636%" height="15" fill="rgb(211,209,54)" fg:x="3504" fg:w="55"/><text x="4.3441%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.08%)</title><rect x="4.1147%" y="117" width="0.0821%" height="15" fill="rgb(243,91,38)" fg:x="3559" fg:w="71"/><text x="4.4077%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.10%)</title><rect x="4.1968%" y="117" width="0.1041%" height="15" fill="rgb(236,40,15)" fg:x="3630" fg:w="90"/><text x="4.4898%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.08%)</title><rect x="4.3009%" y="117" width="0.0751%" height="15" fill="rgb(242,24,49)" fg:x="3720" fg:w="65"/><text x="4.5938%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.33%)</title><rect x="4.1147%" y="133" width="0.3295%" height="15" fill="rgb(226,188,46)" fg:x="3559" fg:w="285"/><text x="4.4077%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="4.4442%" y="133" width="0.0879%" height="15" fill="rgb(225,147,14)" fg:x="3844" fg:w="76"/><text x="4.7372%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,685 instructions, 1.95%)</title><rect x="2.8187%" y="149" width="1.9481%" height="15" fill="rgb(210,63,54)" fg:x="2438" fg:w="1685"/><text x="3.1117%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.08%)</title><rect x="4.7668%" y="149" width="0.0751%" height="15" fill="rgb(243,160,40)" fg:x="4123" fg:w="65"/><text x="5.0598%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="4.8420%" y="149" width="0.0150%" height="15" fill="rgb(241,49,33)" fg:x="4188" fg:w="13"/><text x="5.1349%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="4.8570%" y="149" width="0.0150%" height="15" fill="rgb(218,51,34)" fg:x="4201" fg:w="13"/><text x="5.1500%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="4.8801%" y="149" width="0.0173%" height="15" fill="rgb(206,168,48)" fg:x="4221" fg:w="15"/><text x="5.1731%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="4.8974%" y="133" width="0.0879%" height="15" fill="rgb(245,75,30)" fg:x="4236" fg:w="76"/><text x="5.1904%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.18%)</title><rect x="4.8974%" y="149" width="0.1838%" height="15" fill="rgb(220,27,38)" fg:x="4236" fg:w="159"/><text x="5.1904%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.0813%" y="117" width="0.0948%" height="15" fill="rgb(243,223,53)" fg:x="4395" fg:w="82"/><text x="5.3742%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.13%)</title><rect x="5.0813%" y="133" width="0.1341%" height="15" fill="rgb(233,159,23)" fg:x="4395" fg:w="116"/><text x="5.3742%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (186 instructions, 0.22%)</title><rect x="5.0813%" y="149" width="0.2150%" height="15" fill="rgb(234,195,23)" fg:x="4395" fg:w="186"/><text x="5.3742%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.08%)</title><rect x="5.2963%" y="149" width="0.0821%" height="15" fill="rgb(211,94,47)" fg:x="4581" fg:w="71"/><text x="5.5893%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.06%)</title><rect x="5.3784%" y="149" width="0.0647%" height="15" fill="rgb(229,56,33)" fg:x="4652" fg:w="56"/><text x="5.6714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.4432%" y="149" width="0.0948%" height="15" fill="rgb(206,66,14)" fg:x="4708" fg:w="82"/><text x="5.7361%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.5380%" y="149" width="0.0948%" height="15" fill="rgb(228,212,22)" fg:x="4790" fg:w="82"/><text x="5.8309%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="5.6351%" y="149" width="0.0936%" height="15" fill="rgb(254,153,7)" fg:x="4874" fg:w="81"/><text x="5.9280%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.46%)</title><rect x="5.7287%" y="149" width="0.4613%" height="15" fill="rgb(209,141,32)" fg:x="4955" fg:w="399"/><text x="6.0217%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.46%)</title><rect x="6.1900%" y="149" width="0.4613%" height="15" fill="rgb(216,23,20)" fg:x="5354" fg:w="399"/><text x="6.4830%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,434 instructions, 7.44%)</title><rect x="0.3226%" y="165" width="7.4387%" height="15" fill="rgb(237,0,26)" fg:x="279" fg:w="6434"/><text x="0.6155%" y="175.50">candid::..</text></g><g><title>memcpy (354 instructions, 0.41%)</title><rect x="7.7612%" y="165" width="0.4093%" height="15" fill="rgb(209,138,46)" fg:x="6713" fg:w="354"/><text x="8.0542%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="8.1705%" y="149" width="0.0139%" height="15" fill="rgb(239,4,4)" fg:x="7067" fg:w="12"/><text x="8.4635%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.06%)</title><rect x="8.1705%" y="165" width="0.0578%" height="15" fill="rgb(234,41,18)" fg:x="7067" fg:w="50"/><text x="8.4635%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="8.2283%" y="165" width="0.0948%" height="15" fill="rgb(211,205,5)" fg:x="7117" fg:w="82"/><text x="8.5213%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="8.3231%" y="149" width="0.0139%" height="15" fill="rgb(218,162,33)" fg:x="7199" fg:w="12"/><text x="8.6161%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="8.3370%" y="133" width="0.0613%" height="15" fill="rgb(245,127,34)" fg:x="7211" fg:w="53"/><text x="8.6300%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.10%)</title><rect x="8.3983%" y="133" width="0.1017%" height="15" fill="rgb(251,160,18)" fg:x="7264" fg:w="88"/><text x="8.6912%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.19%)</title><rect x="8.5000%" y="133" width="0.1873%" height="15" fill="rgb(224,97,46)" fg:x="7352" fg:w="162"/><text x="8.7930%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.62%)</title><rect x="8.3370%" y="149" width="0.6243%" height="15" fill="rgb(244,27,43)" fg:x="7211" fg:w="540"/><text x="8.6300%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 0.88%)</title><rect x="8.3231%" y="165" width="0.8787%" height="15" fill="rgb(247,7,10)" fg:x="7199" fg:w="760"/><text x="8.6161%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="9.2018%" y="165" width="0.0948%" height="15" fill="rgb(231,226,35)" fg:x="7959" fg:w="82"/><text x="9.4948%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="9.2966%" y="149" width="0.0139%" height="15" fill="rgb(234,169,16)" fg:x="8041" fg:w="12"/><text x="9.5896%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="9.3105%" y="133" width="0.0613%" height="15" fill="rgb(247,10,53)" fg:x="8053" fg:w="53"/><text x="9.6034%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.10%)</title><rect x="9.3717%" y="133" width="0.1017%" height="15" fill="rgb(205,193,47)" fg:x="8106" fg:w="88"/><text x="9.6647%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.19%)</title><rect x="9.4735%" y="133" width="0.1873%" height="15" fill="rgb(220,223,43)" fg:x="8194" fg:w="162"/><text x="9.7665%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.62%)</title><rect x="9.3105%" y="149" width="0.6243%" height="15" fill="rgb(221,207,14)" fg:x="8053" fg:w="540"/><text x="9.6034%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="9.9348%" y="149" width="0.0786%" height="15" fill="rgb(223,155,26)" fg:x="8593" fg:w="68"/><text x="10.2278%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="10.0134%" y="133" width="0.0936%" height="15" fill="rgb(224,53,18)" fg:x="8661" fg:w="81"/><text x="10.3064%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.12%)</title><rect x="10.0134%" y="149" width="0.1249%" height="15" fill="rgb(248,76,46)" fg:x="8661" fg:w="108"/><text x="10.3064%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 1.03%)</title><rect x="9.2966%" y="165" width="1.0348%" height="15" fill="rgb(248,49,35)" fg:x="8041" fg:w="895"/><text x="9.5896%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.06%)</title><rect x="10.3314%" y="117" width="0.0613%" height="15" fill="rgb(232,154,24)" fg:x="8936" fg:w="53"/><text x="10.6243%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.09%)</title><rect x="10.3314%" y="133" width="0.0913%" height="15" fill="rgb(253,32,53)" fg:x="8936" fg:w="79"/><text x="10.6243%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 0.34%)</title><rect x="10.3314%" y="149" width="0.3399%" height="15" fill="rgb(226,56,3)" fg:x="8936" fg:w="294"/><text x="10.6243%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.847 (15 instructions, 0.02%)</title><rect x="10.6713%" y="149" width="0.0173%" height="15" fill="rgb(233,221,21)" fg:x="9230" fg:w="15"/><text x="10.9642%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="10.6886%" y="149" width="0.0127%" height="15" fill="rgb(248,140,53)" fg:x="9245" fg:w="11"/><text x="10.9816%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 0.58%)</title><rect x="10.3314%" y="165" width="0.5758%" height="15" fill="rgb(224,147,15)" fg:x="8936" fg:w="498"/><text x="10.6243%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.05%)</title><rect x="10.9071%" y="165" width="0.0520%" height="15" fill="rgb(214,150,36)" fg:x="9434" fg:w="45"/><text x="11.2001%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="10.9591%" y="149" width="0.1422%" height="15" fill="rgb(229,116,24)" fg:x="9479" fg:w="123"/><text x="11.2521%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="11.1326%" y="149" width="0.1422%" height="15" fill="rgb(218,17,30)" fg:x="9629" fg:w="123"/><text x="11.4255%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.35%)</title><rect x="10.9591%" y="165" width="0.3468%" height="15" fill="rgb(228,167,3)" fg:x="9479" fg:w="300"/><text x="11.2521%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.3060%" y="149" width="0.0324%" height="15" fill="rgb(213,107,49)" fg:x="9779" fg:w="28"/><text x="11.5990%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="11.3384%" y="149" width="0.0173%" height="15" fill="rgb(233,84,8)" fg:x="9807" fg:w="15"/><text x="11.6313%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="11.3557%" y="149" width="0.0173%" height="15" fill="rgb(246,7,8)" fg:x="9822" fg:w="15"/><text x="11.6487%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.16%)</title><rect x="11.3060%" y="165" width="0.1561%" height="15" fill="rgb(230,153,46)" fg:x="9779" fg:w="135"/><text x="11.5990%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4621%" y="165" width="0.0127%" height="15" fill="rgb(218,64,46)" fg:x="9914" fg:w="11"/><text x="11.7550%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4748%" y="165" width="0.0127%" height="15" fill="rgb(236,192,3)" fg:x="9925" fg:w="11"/><text x="11.7678%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.4875%" y="165" width="0.0127%" height="15" fill="rgb(237,89,23)" fg:x="9936" fg:w="11"/><text x="11.7805%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.47%)</title><rect x="11.5002%" y="165" width="0.4740%" height="15" fill="rgb(208,216,9)" fg:x="9947" fg:w="410"/><text x="11.7932%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.02%)</title><rect x="11.9742%" y="133" width="0.0173%" height="15" fill="rgb(214,223,41)" fg:x="10357" fg:w="15"/><text x="12.2672%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="11.9916%" y="133" width="0.0936%" height="15" fill="rgb(215,132,47)" fg:x="10372" fg:w="81"/><text x="12.2846%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.19%)</title><rect x="12.0852%" y="117" width="0.1942%" height="15" fill="rgb(229,124,40)" fg:x="10453" fg:w="168"/><text x="12.3782%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.23%)</title><rect x="12.0852%" y="133" width="0.2254%" height="15" fill="rgb(248,22,40)" fg:x="10453" fg:w="195"/><text x="12.3782%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.3107%" y="133" width="0.0127%" height="15" fill="rgb(226,129,52)" fg:x="10648" fg:w="11"/><text x="12.6036%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (342 instructions, 0.40%)</title><rect x="11.9742%" y="149" width="0.3954%" height="15" fill="rgb(229,74,37)" fg:x="10357" fg:w="342"/><text x="12.2672%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (379 instructions, 0.44%)</title><rect x="11.9742%" y="165" width="0.4382%" height="15" fill="rgb(225,43,16)" fg:x="10357" fg:w="379"/><text x="12.2672%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.14%)</title><rect x="12.4124%" y="165" width="0.1422%" height="15" fill="rgb(254,225,54)" fg:x="10736" fg:w="123"/><text x="12.7054%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,075 instructions, 12.80%)</title><rect x="0.1919%" y="181" width="12.8044%" height="15" fill="rgb(235,147,39)" fg:x="166" fg:w="11075"/><text x="0.4849%" y="191.50">ic_cdk::api::cal..</text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="12.9963%" y="165" width="0.2197%" height="15" fill="rgb(205,16,46)" fg:x="11241" fg:w="190"/><text x="13.2892%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="13.2159%" y="165" width="0.2197%" height="15" fill="rgb(229,79,17)" fg:x="11431" fg:w="190"/><text x="13.5089%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="14.6669%" y="165" width="0.2544%" height="15" fill="rgb(242,227,9)" fg:x="12686" fg:w="220"/><text x="14.9599%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="14.9213%" y="165" width="0.2544%" height="15" fill="rgb(248,222,54)" fg:x="12906" fg:w="220"/><text x="15.2142%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="16.0936%" y="165" width="0.1503%" height="15" fill="rgb(210,105,8)" fg:x="13920" fg:w="130"/><text x="16.3866%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="16.2439%" y="165" width="0.1503%" height="15" fill="rgb(216,30,18)" fg:x="14050" fg:w="130"/><text x="16.5369%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="17.5214%" y="165" width="0.0948%" height="15" fill="rgb(223,17,12)" fg:x="15155" fg:w="82"/><text x="17.8144%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="17.6163%" y="165" width="0.2659%" height="15" fill="rgb(208,98,40)" fg:x="15237" fg:w="230"/><text x="17.9092%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="17.8822%" y="165" width="0.2659%" height="15" fill="rgb(222,69,32)" fg:x="15467" fg:w="230"/><text x="18.1751%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="18.1481%" y="165" width="0.1850%" height="15" fill="rgb(214,82,16)" fg:x="15697" fg:w="160"/><text x="18.4410%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="18.3331%" y="165" width="0.1850%" height="15" fill="rgb(205,201,42)" fg:x="15857" fg:w="160"/><text x="18.6260%" y="175.50"></text></g><g><title>memmove (310 instructions, 0.36%)</title><rect x="18.5180%" y="165" width="0.3584%" height="15" fill="rgb(229,67,24)" fg:x="16017" fg:w="310"/><text x="18.8110%" y="175.50"></text></g><g><title>memmove (310 instructions, 0.36%)</title><rect x="18.8765%" y="165" width="0.3584%" height="15" fill="rgb(227,109,23)" fg:x="16327" fg:w="310"/><text x="19.1694%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="19.2349%" y="165" width="0.2197%" height="15" fill="rgb(240,214,16)" fg:x="16637" fg:w="190"/><text x="19.5278%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="20.6326%" y="165" width="0.2544%" height="15" fill="rgb(226,218,34)" fg:x="17846" fg:w="220"/><text x="20.9256%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="20.8870%" y="165" width="0.2544%" height="15" fill="rgb(237,120,23)" fg:x="18066" fg:w="220"/><text x="21.1800%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="21.8859%" y="165" width="0.1503%" height="15" fill="rgb(206,6,36)" fg:x="18930" fg:w="130"/><text x="22.1789%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="22.0362%" y="165" width="0.1503%" height="15" fill="rgb(215,65,7)" fg:x="19060" fg:w="130"/><text x="22.3292%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="23.2432%" y="165" width="0.1503%" height="15" fill="rgb(216,94,1)" fg:x="20104" fg:w="130"/><text x="23.5362%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="23.3935%" y="165" width="0.1503%" height="15" fill="rgb(212,151,53)" fg:x="20234" fg:w="130"/><text x="23.6865%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="24.4965%" y="165" width="0.0948%" height="15" fill="rgb(209,11,28)" fg:x="21188" fg:w="82"/><text x="24.7895%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="24.5913%" y="165" width="0.2659%" height="15" fill="rgb(233,190,12)" fg:x="21270" fg:w="230"/><text x="24.8843%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="24.8572%" y="165" width="0.2659%" height="15" fill="rgb(207,50,4)" fg:x="21500" fg:w="230"/><text x="25.1502%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="25.1231%" y="165" width="0.1503%" height="15" fill="rgb(226,144,35)" fg:x="21730" fg:w="130"/><text x="25.4161%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="25.2734%" y="165" width="0.1503%" height="15" fill="rgb(213,87,46)" fg:x="21860" fg:w="130"/><text x="25.5664%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="25.4237%" y="165" width="0.2544%" height="15" fill="rgb(232,197,43)" fg:x="21990" fg:w="220"/><text x="25.7167%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="25.6781%" y="165" width="0.2544%" height="15" fill="rgb(226,190,15)" fg:x="22210" fg:w="220"/><text x="25.9711%" y="175.50"></text></g><g><title>memmove (145 instructions, 0.17%)</title><rect x="25.9324%" y="165" width="0.1676%" height="15" fill="rgb(216,191,12)" fg:x="22430" fg:w="145"/><text x="26.2254%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="27.3406%" y="165" width="0.3237%" height="15" fill="rgb(224,139,43)" fg:x="23648" fg:w="280"/><text x="27.6336%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="27.6643%" y="165" width="0.3237%" height="15" fill="rgb(236,19,34)" fg:x="23928" fg:w="280"/><text x="27.9573%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="29.0113%" y="165" width="0.2544%" height="15" fill="rgb(214,81,49)" fg:x="25093" fg:w="220"/><text x="29.3042%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="29.2656%" y="165" width="0.2544%" height="15" fill="rgb(230,95,30)" fg:x="25313" fg:w="220"/><text x="29.5586%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (15,448 instructions, 17.86%)</title><rect x="12.9963%" y="181" width="17.8602%" height="15" fill="rgb(216,104,7)" fg:x="11241" fg:w="15448"/><text x="13.2892%" y="191.50">alloc::collections::btr..</text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="31.7733%" y="165" width="0.2197%" height="15" fill="rgb(208,69,9)" fg:x="27482" fg:w="190"/><text x="32.0663%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="31.9930%" y="165" width="0.2197%" height="15" fill="rgb(216,133,23)" fg:x="27672" fg:w="190"/><text x="32.2859%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="33.3746%" y="165" width="0.2544%" height="15" fill="rgb(222,108,45)" fg:x="28867" fg:w="220"/><text x="33.6675%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="33.6289%" y="165" width="0.2544%" height="15" fill="rgb(252,2,8)" fg:x="29087" fg:w="220"/><text x="33.9219%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="34.6972%" y="165" width="0.2544%" height="15" fill="rgb(225,171,50)" fg:x="30011" fg:w="220"/><text x="34.9902%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="34.9516%" y="165" width="0.2544%" height="15" fill="rgb(235,141,38)" fg:x="30231" fg:w="220"/><text x="35.2445%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,616 instructions, 5.34%)</title><rect x="30.8565%" y="181" width="5.3368%" height="15" fill="rgb(210,228,12)" fg:x="26689" fg:w="4616"/><text x="31.1494%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="37.4234%" y="165" width="0.0948%" height="15" fill="rgb(218,18,48)" fg:x="32369" fg:w="82"/><text x="37.7164%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="37.5182%" y="165" width="0.2659%" height="15" fill="rgb(249,38,1)" fg:x="32451" fg:w="230"/><text x="37.8112%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="37.7841%" y="165" width="0.2659%" height="15" fill="rgb(235,195,54)" fg:x="32681" fg:w="230"/><text x="38.0771%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="38.0500%" y="165" width="0.1850%" height="15" fill="rgb(215,166,41)" fg:x="32911" fg:w="160"/><text x="38.3430%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="38.2350%" y="165" width="0.1850%" height="15" fill="rgb(227,25,11)" fg:x="33071" fg:w="160"/><text x="38.5280%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.24%)</title><rect x="38.4200%" y="165" width="0.2393%" height="15" fill="rgb(241,77,12)" fg:x="33231" fg:w="207"/><text x="38.7130%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="39.9103%" y="165" width="0.1850%" height="15" fill="rgb(243,60,5)" fg:x="34520" fg:w="160"/><text x="40.2033%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="40.0953%" y="165" width="0.1850%" height="15" fill="rgb(209,194,50)" fg:x="34680" fg:w="160"/><text x="40.3882%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="41.7185%" y="165" width="0.1665%" height="15" fill="rgb(223,34,48)" fg:x="36084" fg:w="144"/><text x="42.0115%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="41.8850%" y="165" width="0.1665%" height="15" fill="rgb(246,88,8)" fg:x="36228" fg:w="144"/><text x="42.1780%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="43.0735%" y="165" width="0.0948%" height="15" fill="rgb(238,20,1)" fg:x="37256" fg:w="82"/><text x="43.3665%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="43.1683%" y="165" width="0.2659%" height="15" fill="rgb(213,33,4)" fg:x="37338" fg:w="230"/><text x="43.4613%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="43.4342%" y="165" width="0.2659%" height="15" fill="rgb(248,184,25)" fg:x="37568" fg:w="230"/><text x="43.7272%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="45.1950%" y="165" width="0.3237%" height="15" fill="rgb(252,20,1)" fg:x="39091" fg:w="280"/><text x="45.4880%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="45.5188%" y="165" width="0.3237%" height="15" fill="rgb(206,213,9)" fg:x="39371" fg:w="280"/><text x="45.8117%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="46.7605%" y="165" width="0.1503%" height="15" fill="rgb(235,155,30)" fg:x="40445" fg:w="130"/><text x="47.0534%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="46.9108%" y="165" width="0.1503%" height="15" fill="rgb(242,7,24)" fg:x="40575" fg:w="130"/><text x="47.2037%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="48.0843%" y="165" width="0.1503%" height="15" fill="rgb(237,29,49)" fg:x="41590" fg:w="130"/><text x="48.3772%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="48.2346%" y="165" width="0.1503%" height="15" fill="rgb(237,5,40)" fg:x="41720" fg:w="130"/><text x="48.5275%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="49.7896%" y="165" width="0.1665%" height="15" fill="rgb(254,105,9)" fg:x="43065" fg:w="144"/><text x="50.0825%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="49.9561%" y="165" width="0.1665%" height="15" fill="rgb(219,183,23)" fg:x="43209" fg:w="144"/><text x="50.2490%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="51.1099%" y="165" width="0.2197%" height="15" fill="rgb(244,28,8)" fg:x="44207" fg:w="190"/><text x="51.4029%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="51.3296%" y="165" width="0.2197%" height="15" fill="rgb(253,148,21)" fg:x="44397" fg:w="190"/><text x="51.6225%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="52.4337%" y="165" width="0.3237%" height="15" fill="rgb(231,137,2)" fg:x="45352" fg:w="280"/><text x="52.7267%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="52.7574%" y="165" width="0.3237%" height="15" fill="rgb(212,3,1)" fg:x="45632" fg:w="280"/><text x="53.0504%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="54.1737%" y="165" width="0.2890%" height="15" fill="rgb(231,205,53)" fg:x="46857" fg:w="250"/><text x="54.4667%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="54.4627%" y="165" width="0.2890%" height="15" fill="rgb(218,161,8)" fg:x="47107" fg:w="250"/><text x="54.7557%" y="175.50"></text></g><g><title>memmove (310 instructions, 0.36%)</title><rect x="56.1218%" y="165" width="0.3584%" height="15" fill="rgb(227,35,38)" fg:x="48542" fg:w="310"/><text x="56.4148%" y="175.50"></text></g><g><title>memmove (310 instructions, 0.36%)</title><rect x="56.4802%" y="165" width="0.3584%" height="15" fill="rgb(221,188,2)" fg:x="48852" fg:w="310"/><text x="56.7732%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="57.9659%" y="165" width="0.3237%" height="15" fill="rgb(235,93,22)" fg:x="50137" fg:w="280"/><text x="58.2588%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="58.2896%" y="165" width="0.3237%" height="15" fill="rgb(248,211,9)" fg:x="50417" fg:w="280"/><text x="58.5826%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (20,427 instructions, 23.62%)</title><rect x="36.1933%" y="181" width="23.6167%" height="15" fill="rgb(212,151,50)" fg:x="31305" fg:w="20427"/><text x="36.4862%" y="191.50">alloc::collections::btree::map::..</text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="60.7961%" y="165" width="0.1665%" height="15" fill="rgb(252,55,30)" fg:x="52585" fg:w="144"/><text x="61.0891%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.17%)</title><rect x="60.9626%" y="165" width="0.1665%" height="15" fill="rgb(242,158,32)" fg:x="52729" fg:w="144"/><text x="61.2556%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="62.6737%" y="165" width="0.3237%" height="15" fill="rgb(216,107,27)" fg:x="54209" fg:w="280"/><text x="62.9667%" y="175.50"></text></g><g><title>memmove (280 instructions, 0.32%)</title><rect x="62.9974%" y="165" width="0.3237%" height="15" fill="rgb(246,76,32)" fg:x="54489" fg:w="280"/><text x="63.2904%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="64.2738%" y="165" width="0.0948%" height="15" fill="rgb(249,189,16)" fg:x="55593" fg:w="82"/><text x="64.5668%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.20%)</title><rect x="64.3686%" y="165" width="0.1965%" height="15" fill="rgb(229,189,22)" fg:x="55675" fg:w="170"/><text x="64.6616%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.20%)</title><rect x="64.5652%" y="165" width="0.1965%" height="15" fill="rgb(245,211,10)" fg:x="55845" fg:w="170"/><text x="64.8581%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="64.7617%" y="165" width="0.1503%" height="15" fill="rgb(234,67,20)" fg:x="56015" fg:w="130"/><text x="65.0547%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="64.9120%" y="165" width="0.1503%" height="15" fill="rgb(211,37,5)" fg:x="56145" fg:w="130"/><text x="65.2050%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="65.0623%" y="165" width="0.1503%" height="15" fill="rgb(234,5,31)" fg:x="56275" fg:w="130"/><text x="65.3553%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="65.2126%" y="165" width="0.1503%" height="15" fill="rgb(211,113,9)" fg:x="56405" fg:w="130"/><text x="65.5056%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.17%)</title><rect x="65.3629%" y="165" width="0.1700%" height="15" fill="rgb(238,192,13)" fg:x="56535" fg:w="147"/><text x="65.6559%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="67.0763%" y="165" width="0.0948%" height="15" fill="rgb(232,190,3)" fg:x="58017" fg:w="82"/><text x="67.3693%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="67.1711%" y="165" width="0.2659%" height="15" fill="rgb(212,31,7)" fg:x="58099" fg:w="230"/><text x="67.4641%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="67.4370%" y="165" width="0.2659%" height="15" fill="rgb(207,71,46)" fg:x="58329" fg:w="230"/><text x="67.7300%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="67.7030%" y="165" width="0.2197%" height="15" fill="rgb(206,146,14)" fg:x="58559" fg:w="190"/><text x="67.9959%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="67.9226%" y="165" width="0.2197%" height="15" fill="rgb(232,216,13)" fg:x="58749" fg:w="190"/><text x="68.2156%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,291 instructions, 9.59%)</title><rect x="59.8099%" y="181" width="9.5856%" height="15" fill="rgb(234,112,3)" fg:x="51732" fg:w="8291"/><text x="60.1029%" y="191.50">alloc::coll..</text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="70.3818%" y="165" width="0.1850%" height="15" fill="rgb(208,168,24)" fg:x="60876" fg:w="160"/><text x="70.6747%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="70.5667%" y="165" width="0.1850%" height="15" fill="rgb(234,38,36)" fg:x="61036" fg:w="160"/><text x="70.8597%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="71.7056%" y="165" width="0.2197%" height="15" fill="rgb(227,8,30)" fg:x="62021" fg:w="190"/><text x="71.9985%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="71.9252%" y="165" width="0.2197%" height="15" fill="rgb(241,21,38)" fg:x="62211" fg:w="190"/><text x="72.2182%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="73.2028%" y="165" width="0.2544%" height="15" fill="rgb(205,221,0)" fg:x="63316" fg:w="220"/><text x="73.4957%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="73.4571%" y="165" width="0.2544%" height="15" fill="rgb(220,97,31)" fg:x="63536" fg:w="220"/><text x="73.7501%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="74.8376%" y="165" width="0.2197%" height="15" fill="rgb(250,89,48)" fg:x="64730" fg:w="190"/><text x="75.1305%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="75.0572%" y="165" width="0.2197%" height="15" fill="rgb(213,158,23)" fg:x="64920" fg:w="190"/><text x="75.3502%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="76.2642%" y="165" width="0.1850%" height="15" fill="rgb(236,136,50)" fg:x="65964" fg:w="160"/><text x="76.5572%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="76.4492%" y="165" width="0.1850%" height="15" fill="rgb(227,131,37)" fg:x="66124" fg:w="160"/><text x="76.7422%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="77.5522%" y="165" width="0.2890%" height="15" fill="rgb(252,134,46)" fg:x="67078" fg:w="250"/><text x="77.8452%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="77.8412%" y="165" width="0.2890%" height="15" fill="rgb(212,37,6)" fg:x="67328" fg:w="250"/><text x="78.1342%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="79.2564%" y="165" width="0.0948%" height="15" fill="rgb(232,163,22)" fg:x="68552" fg:w="82"/><text x="79.5493%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.23%)</title><rect x="79.3512%" y="165" width="0.2312%" height="15" fill="rgb(211,0,6)" fg:x="68634" fg:w="200"/><text x="79.6441%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.23%)</title><rect x="79.5824%" y="165" width="0.2312%" height="15" fill="rgb(211,8,14)" fg:x="68834" fg:w="200"/><text x="79.8754%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="79.8136%" y="165" width="0.2544%" height="15" fill="rgb(254,163,5)" fg:x="69034" fg:w="220"/><text x="80.1066%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="80.0680%" y="165" width="0.2544%" height="15" fill="rgb(249,79,54)" fg:x="69254" fg:w="220"/><text x="80.3610%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="80.3223%" y="165" width="0.1503%" height="15" fill="rgb(219,3,30)" fg:x="69474" fg:w="130"/><text x="80.6153%" y="175.50"></text></g><g><title>memmove (130 instructions, 0.15%)</title><rect x="80.4726%" y="165" width="0.1503%" height="15" fill="rgb(249,47,22)" fg:x="69604" fg:w="130"/><text x="80.7656%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.17%)</title><rect x="80.6229%" y="165" width="0.1700%" height="15" fill="rgb(244,4,45)" fg:x="69734" fg:w="147"/><text x="80.9159%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="82.4728%" y="165" width="0.2544%" height="15" fill="rgb(233,132,22)" fg:x="71334" fg:w="220"/><text x="82.7657%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="82.7271%" y="165" width="0.2544%" height="15" fill="rgb(223,103,51)" fg:x="71554" fg:w="220"/><text x="83.0201%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="84.0394%" y="165" width="0.2544%" height="15" fill="rgb(245,228,16)" fg:x="72689" fg:w="220"/><text x="84.3323%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="84.2937%" y="165" width="0.2544%" height="15" fill="rgb(250,213,47)" fg:x="72909" fg:w="220"/><text x="84.5867%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="85.3620%" y="165" width="0.0948%" height="15" fill="rgb(243,177,32)" fg:x="73833" fg:w="82"/><text x="85.6550%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="85.4568%" y="165" width="0.2659%" height="15" fill="rgb(215,124,0)" fg:x="73915" fg:w="230"/><text x="85.7498%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.27%)</title><rect x="85.7227%" y="165" width="0.2659%" height="15" fill="rgb(239,8,16)" fg:x="74145" fg:w="230"/><text x="86.0157%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="85.9886%" y="165" width="0.1850%" height="15" fill="rgb(214,51,17)" fg:x="74375" fg:w="160"/><text x="86.2816%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="86.1736%" y="165" width="0.1850%" height="15" fill="rgb(211,148,47)" fg:x="74535" fg:w="160"/><text x="86.4666%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="86.3586%" y="165" width="0.2890%" height="15" fill="rgb(209,63,40)" fg:x="74695" fg:w="250"/><text x="86.6516%" y="175.50"></text></g><g><title>memmove (250 instructions, 0.29%)</title><rect x="86.6476%" y="165" width="0.2890%" height="15" fill="rgb(216,134,46)" fg:x="74945" fg:w="250"/><text x="86.9406%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="86.9367%" y="165" width="0.1850%" height="15" fill="rgb(241,62,50)" fg:x="75195" fg:w="160"/><text x="87.2296%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="88.7333%" y="165" width="0.2197%" height="15" fill="rgb(240,130,38)" fg:x="76749" fg:w="190"/><text x="89.0263%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.22%)</title><rect x="88.9530%" y="165" width="0.2197%" height="15" fill="rgb(227,104,34)" fg:x="76939" fg:w="190"/><text x="89.2460%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="90.1600%" y="165" width="0.1850%" height="15" fill="rgb(218,34,12)" fg:x="77983" fg:w="160"/><text x="90.4530%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.18%)</title><rect x="90.3450%" y="165" width="0.1850%" height="15" fill="rgb(209,96,45)" fg:x="78143" fg:w="160"/><text x="90.6380%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="91.4826%" y="165" width="0.2544%" height="15" fill="rgb(215,30,39)" fg:x="79127" fg:w="220"/><text x="91.7756%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="91.7370%" y="165" width="0.2544%" height="15" fill="rgb(244,160,47)" fg:x="79347" fg:w="220"/><text x="92.0300%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="93.2573%" y="165" width="0.2544%" height="15" fill="rgb(210,88,51)" fg:x="80662" fg:w="220"/><text x="93.5503%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="93.5117%" y="165" width="0.2544%" height="15" fill="rgb(209,97,54)" fg:x="80882" fg:w="220"/><text x="93.8047%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="94.5800%" y="165" width="0.2544%" height="15" fill="rgb(236,16,42)" fg:x="81806" fg:w="220"/><text x="94.8729%" y="175.50"></text></g><g><title>memmove (220 instructions, 0.25%)</title><rect x="94.8343%" y="165" width="0.2544%" height="15" fill="rgb(218,216,50)" fg:x="82026" fg:w="220"/><text x="95.1273%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,867 instructions, 26.44%)</title><rect x="69.3956%" y="181" width="26.4377%" height="15" fill="rgb(216,140,38)" fg:x="60023" fg:w="22867"/><text x="69.6885%" y="191.50">alloc::collections::btree::map::BTre..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,003 instructions, 1.16%)</title><rect x="95.8332%" y="181" width="1.1596%" height="15" fill="rgb(209,58,11)" fg:x="82890" fg:w="1003"/><text x="96.1262%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="96.9929%" y="149" width="0.0139%" height="15" fill="rgb(249,111,52)" fg:x="83893" fg:w="12"/><text x="97.2858%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.15%)</title><rect x="97.0067%" y="133" width="0.1457%" height="15" fill="rgb(243,29,54)" fg:x="83905" fg:w="126"/><text x="97.2997%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.18%)</title><rect x="97.0067%" y="149" width="0.1769%" height="15" fill="rgb(218,159,25)" fg:x="83905" fg:w="153"/><text x="97.2997%" y="159.50"></text></g><g><title>memset (136 instructions, 0.16%)</title><rect x="97.1836%" y="149" width="0.1572%" height="15" fill="rgb(249,78,28)" fg:x="84058" fg:w="136"/><text x="97.4766%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (459 instructions, 0.53%)</title><rect x="96.9929%" y="165" width="0.5307%" height="15" fill="rgb(246,173,20)" fg:x="83893" fg:w="459"/><text x="97.2858%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="97.5235%" y="149" width="0.0370%" height="15" fill="rgb(232,200,29)" fg:x="84352" fg:w="32"/><text x="97.8165%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.13%)</title><rect x="97.5605%" y="101" width="0.1306%" height="15" fill="rgb(222,27,38)" fg:x="84384" fg:w="113"/><text x="97.8535%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (147 instructions, 0.17%)</title><rect x="97.5605%" y="117" width="0.1700%" height="15" fill="rgb(207,82,39)" fg:x="84384" fg:w="147"/><text x="97.8535%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (214 instructions, 0.25%)</title><rect x="97.5605%" y="133" width="0.2474%" height="15" fill="rgb(225,226,24)" fg:x="84384" fg:w="214"/><text x="97.8535%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="97.8079%" y="133" width="0.0127%" height="15" fill="rgb(224,119,3)" fg:x="84598" fg:w="11"/><text x="98.1009%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="97.8207%" y="133" width="0.0127%" height="15" fill="rgb(248,186,42)" fg:x="84609" fg:w="11"/><text x="98.1136%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (398 instructions, 0.46%)</title><rect x="97.5605%" y="149" width="0.4601%" height="15" fill="rgb(226,150,41)" fg:x="84384" fg:w="398"/><text x="97.8535%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.0207%" y="149" width="0.0347%" height="15" fill="rgb(214,38,10)" fg:x="84782" fg:w="30"/><text x="98.3136%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (533 instructions, 0.62%)</title><rect x="97.5235%" y="165" width="0.6162%" height="15" fill="rgb(222,35,26)" fg:x="84352" fg:w="533"/><text x="97.8165%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.06%)</title><rect x="98.1444%" y="165" width="0.0636%" height="15" fill="rgb(222,34,14)" fg:x="84889" fg:w="55"/><text x="98.4373%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,125 instructions, 1.30%)</title><rect x="96.9929%" y="181" width="1.3007%" height="15" fill="rgb(224,221,49)" fg:x="83893" fg:w="1125"/><text x="97.2858%" y="191.50"></text></g><g><title>btreemap::batch_put_6_::{{closure}} (86,011 instructions, 99.44%)</title><rect x="0.1919%" y="197" width="99.4416%" height="15" fill="rgb(221,13,6)" fg:x="166" fg:w="86011"/><text x="0.4849%" y="207.50">btreemap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.6335%" y="197" width="0.0139%" height="15" fill="rgb(222,222,39)" fg:x="86177" fg:w="12"/><text x="99.9265%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.09%)</title><rect x="99.6474%" y="197" width="0.0936%" height="15" fill="rgb(206,65,27)" fg:x="86189" fg:w="81"/><text x="99.9403%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.15%)</title><rect x="99.7410%" y="197" width="0.1457%" height="15" fill="rgb(244,81,7)" fg:x="86270" fg:w="126"/><text x="100.0340%" y="207.50"></text></g><g><title>all (86,494 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,223,18)" fg:x="0" fg:w="86494"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (86,494 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,114,45)" fg:x="0" fg:w="86494"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>