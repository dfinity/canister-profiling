<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="97326"><g><title>ic_cdk::setup (24 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0247%" height="15" fill="rgb(228,54,49)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="0.0247%" y="197" width="0.0853%" height="15" fill="rgb(239,2,44)" fg:x="24" fg:w="83"/><text x="0.3176%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.08%)</title><rect x="0.1099%" y="197" width="0.0791%" height="15" fill="rgb(221,106,26)" fg:x="107" fg:w="77"/><text x="0.4029%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.12%)</title><rect x="0.1891%" y="165" width="0.1243%" height="15" fill="rgb(250,215,14)" fg:x="184" fg:w="121"/><text x="0.4820%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="0.3134%" y="149" width="0.0843%" height="15" fill="rgb(233,152,19)" fg:x="305" fg:w="82"/><text x="0.6063%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="0.3976%" y="149" width="0.4521%" height="15" fill="rgb(219,58,54)" fg:x="387" fg:w="440"/><text x="0.6906%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="0.8497%" y="149" width="0.0976%" height="15" fill="rgb(250,70,34)" fg:x="827" fg:w="95"/><text x="1.1427%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9473%" y="149" width="0.0616%" height="15" fill="rgb(215,106,42)" fg:x="922" fg:w="60"/><text x="1.2403%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0090%" y="149" width="0.0616%" height="15" fill="rgb(239,77,29)" fg:x="982" fg:w="60"/><text x="1.3019%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0706%" y="149" width="0.0616%" height="15" fill="rgb(232,68,30)" fg:x="1042" fg:w="60"/><text x="1.3636%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.1323%" y="149" width="0.0616%" height="15" fill="rgb(226,201,16)" fg:x="1102" fg:w="60"/><text x="1.4252%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="1.1939%" y="149" width="0.0843%" height="15" fill="rgb(224,56,41)" fg:x="1162" fg:w="82"/><text x="1.4869%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="1.2782%" y="149" width="0.0719%" height="15" fill="rgb(254,157,37)" fg:x="1244" fg:w="70"/><text x="1.5711%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="1.3501%" y="149" width="0.4521%" height="15" fill="rgb(240,54,6)" fg:x="1314" fg:w="440"/><text x="1.6431%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="1.8022%" y="149" width="0.0195%" height="15" fill="rgb(244,87,44)" fg:x="1754" fg:w="19"/><text x="2.0952%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="1.8217%" y="133" width="0.0853%" height="15" fill="rgb(242,96,12)" fg:x="1773" fg:w="83"/><text x="2.1147%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="1.9070%" y="101" width="0.0688%" height="15" fill="rgb(245,9,48)" fg:x="1856" fg:w="67"/><text x="2.2000%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.10%)</title><rect x="1.9070%" y="117" width="0.1007%" height="15" fill="rgb(247,23,14)" fg:x="1856" fg:w="98"/><text x="2.2000%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.0077%" y="69" width="0.0113%" height="15" fill="rgb(211,9,1)" fg:x="1954" fg:w="11"/><text x="2.3007%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.0190%" y="53" width="0.0360%" height="15" fill="rgb(221,105,51)" fg:x="1965" fg:w="35"/><text x="2.3120%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.07%)</title><rect x="2.0190%" y="69" width="0.0678%" height="15" fill="rgb(235,101,7)" fg:x="1965" fg:w="66"/><text x="2.3120%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.15%)</title><rect x="2.0077%" y="85" width="0.1510%" height="15" fill="rgb(227,127,27)" fg:x="1954" fg:w="147"/><text x="2.3007%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.22%)</title><rect x="2.0077%" y="101" width="0.2178%" height="15" fill="rgb(218,37,2)" fg:x="1954" fg:w="212"/><text x="2.3007%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.23%)</title><rect x="2.0077%" y="117" width="0.2281%" height="15" fill="rgb(237,43,6)" fg:x="1954" fg:w="222"/><text x="2.3007%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.47%)</title><rect x="1.9070%" y="133" width="0.4737%" height="15" fill="rgb(253,29,20)" fg:x="1856" fg:w="461"/><text x="2.2000%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.71%)</title><rect x="1.8217%" y="149" width="0.7079%" height="15" fill="rgb(220,86,16)" fg:x="1773" fg:w="689"/><text x="2.1147%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="2.5296%" y="149" width="0.0976%" height="15" fill="rgb(213,153,26)" fg:x="2462" fg:w="95"/><text x="2.8226%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="2.6273%" y="149" width="0.0616%" height="15" fill="rgb(239,161,4)" fg:x="2557" fg:w="60"/><text x="2.9202%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="2.6889%" y="149" width="0.0781%" height="15" fill="rgb(213,224,50)" fg:x="2617" fg:w="76"/><text x="2.9819%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="2.7670%" y="149" width="0.0719%" height="15" fill="rgb(205,23,27)" fg:x="2693" fg:w="70"/><text x="3.0600%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.45%)</title><rect x="2.8389%" y="133" width="0.4521%" height="15" fill="rgb(253,170,0)" fg:x="2763" fg:w="440"/><text x="3.1319%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.2910%" y="133" width="0.0195%" height="15" fill="rgb(247,213,9)" fg:x="3203" fg:w="19"/><text x="3.5840%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="3.3105%" y="117" width="0.0853%" height="15" fill="rgb(229,229,24)" fg:x="3222" fg:w="83"/><text x="3.6035%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="3.3958%" y="85" width="0.0688%" height="15" fill="rgb(237,41,13)" fg:x="3305" fg:w="67"/><text x="3.6888%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.10%)</title><rect x="3.3958%" y="101" width="0.1007%" height="15" fill="rgb(210,213,1)" fg:x="3305" fg:w="98"/><text x="3.6888%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.4965%" y="53" width="0.0113%" height="15" fill="rgb(243,85,49)" fg:x="3403" fg:w="11"/><text x="3.7895%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.5078%" y="37" width="0.0360%" height="15" fill="rgb(236,117,40)" fg:x="3414" fg:w="35"/><text x="3.8008%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.07%)</title><rect x="3.5078%" y="53" width="0.0678%" height="15" fill="rgb(212,78,14)" fg:x="3414" fg:w="66"/><text x="3.8008%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.15%)</title><rect x="3.4965%" y="69" width="0.1510%" height="15" fill="rgb(215,88,16)" fg:x="3403" fg:w="147"/><text x="3.7895%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.22%)</title><rect x="3.4965%" y="85" width="0.2178%" height="15" fill="rgb(254,199,17)" fg:x="3403" fg:w="212"/><text x="3.7895%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.23%)</title><rect x="3.4965%" y="101" width="0.2281%" height="15" fill="rgb(209,64,7)" fg:x="3403" fg:w="222"/><text x="3.7895%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.47%)</title><rect x="3.3958%" y="117" width="0.4737%" height="15" fill="rgb(238,10,15)" fg:x="3305" fg:w="461"/><text x="3.6888%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.71%)</title><rect x="3.3105%" y="133" width="0.7079%" height="15" fill="rgb(214,69,43)" fg:x="3222" fg:w="689"/><text x="3.6035%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="4.0185%" y="133" width="0.0976%" height="15" fill="rgb(242,81,43)" fg:x="3911" fg:w="95"/><text x="4.3114%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="4.1161%" y="133" width="0.0616%" height="15" fill="rgb(209,29,45)" fg:x="4006" fg:w="60"/><text x="4.4090%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.08%)</title><rect x="4.1777%" y="117" width="0.0843%" height="15" fill="rgb(233,28,24)" fg:x="4066" fg:w="82"/><text x="4.4707%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.10%)</title><rect x="4.2620%" y="117" width="0.0976%" height="15" fill="rgb(247,43,51)" fg:x="4148" fg:w="95"/><text x="4.5549%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.3596%" y="117" width="0.0781%" height="15" fill="rgb(217,186,39)" fg:x="4243" fg:w="76"/><text x="4.6525%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.34%)</title><rect x="4.1777%" y="133" width="0.3391%" height="15" fill="rgb(245,78,3)" fg:x="4066" fg:w="330"/><text x="4.4707%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.5168%" y="133" width="0.0853%" height="15" fill="rgb(208,227,24)" fg:x="4396" fg:w="83"/><text x="4.8097%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,961 instructions, 2.01%)</title><rect x="2.8389%" y="149" width="2.0149%" height="15" fill="rgb(222,199,6)" fg:x="2763" fg:w="1961"/><text x="3.1319%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.8538%" y="149" width="0.0781%" height="15" fill="rgb(250,202,14)" fg:x="4724" fg:w="76"/><text x="5.1468%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9319%" y="149" width="0.0154%" height="15" fill="rgb(221,208,28)" fg:x="4800" fg:w="15"/><text x="5.2248%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9473%" y="149" width="0.0154%" height="15" fill="rgb(240,132,27)" fg:x="4815" fg:w="15"/><text x="5.2403%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.02%)</title><rect x="4.9719%" y="149" width="0.0185%" height="15" fill="rgb(221,54,2)" fg:x="4839" fg:w="18"/><text x="5.2649%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.09%)</title><rect x="4.9904%" y="133" width="0.0853%" height="15" fill="rgb(215,32,13)" fg:x="4857" fg:w="83"/><text x="5.2834%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.18%)</title><rect x="4.9904%" y="149" width="0.1839%" height="15" fill="rgb(218,87,10)" fg:x="4857" fg:w="179"/><text x="5.2834%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.1744%" y="117" width="0.0935%" height="15" fill="rgb(250,225,5)" fg:x="5036" fg:w="91"/><text x="5.4673%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.14%)</title><rect x="5.1744%" y="133" width="0.1377%" height="15" fill="rgb(242,191,19)" fg:x="5036" fg:w="134"/><text x="5.4673%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (216 instructions, 0.22%)</title><rect x="5.1744%" y="149" width="0.2219%" height="15" fill="rgb(222,113,40)" fg:x="5036" fg:w="216"/><text x="5.4673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.08%)</title><rect x="5.3963%" y="149" width="0.0791%" height="15" fill="rgb(234,18,36)" fg:x="5252" fg:w="77"/><text x="5.6893%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.06%)</title><rect x="5.4754%" y="149" width="0.0647%" height="15" fill="rgb(230,193,9)" fg:x="5329" fg:w="63"/><text x="5.7684%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.5401%" y="149" width="0.0935%" height="15" fill="rgb(244,12,16)" fg:x="5392" fg:w="91"/><text x="5.8331%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="5.6336%" y="149" width="0.0935%" height="15" fill="rgb(247,218,15)" fg:x="5483" fg:w="91"/><text x="5.9266%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="5.7313%" y="149" width="0.0884%" height="15" fill="rgb(250,4,37)" fg:x="5578" fg:w="86"/><text x="6.0242%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="5.8196%" y="149" width="0.4398%" height="15" fill="rgb(243,112,50)" fg:x="5664" fg:w="428"/><text x="6.1126%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.44%)</title><rect x="6.2594%" y="149" width="0.4398%" height="15" fill="rgb(248,8,0)" fg:x="6092" fg:w="428"/><text x="6.5523%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,361 instructions, 7.56%)</title><rect x="0.3134%" y="165" width="7.5632%" height="15" fill="rgb(212,148,8)" fg:x="305" fg:w="7361"/><text x="0.6063%" y="175.50">candid::..</text></g><g><title>memcpy (380 instructions, 0.39%)</title><rect x="7.8766%" y="165" width="0.3904%" height="15" fill="rgb(230,21,12)" fg:x="7666" fg:w="380"/><text x="8.1696%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="8.2671%" y="149" width="0.0144%" height="15" fill="rgb(244,59,11)" fg:x="8046" fg:w="14"/><text x="8.5600%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.06%)</title><rect x="8.2671%" y="165" width="0.0647%" height="15" fill="rgb(222,188,13)" fg:x="8046" fg:w="63"/><text x="8.5600%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="8.3318%" y="165" width="0.0935%" height="15" fill="rgb(252,49,28)" fg:x="8109" fg:w="91"/><text x="8.6248%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="8.4253%" y="149" width="0.0144%" height="15" fill="rgb(225,84,24)" fg:x="8200" fg:w="14"/><text x="8.7183%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="8.4397%" y="133" width="0.0606%" height="15" fill="rgb(213,123,48)" fg:x="8214" fg:w="59"/><text x="8.7326%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="8.5003%" y="133" width="0.0966%" height="15" fill="rgb(208,1,54)" fg:x="8273" fg:w="94"/><text x="8.7933%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="8.5969%" y="133" width="0.1778%" height="15" fill="rgb(233,48,11)" fg:x="8367" fg:w="173"/><text x="8.8898%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.59%)</title><rect x="8.4397%" y="149" width="0.5949%" height="15" fill="rgb(230,49,21)" fg:x="8214" fg:w="579"/><text x="8.7326%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.84%)</title><rect x="8.4253%" y="165" width="0.8436%" height="15" fill="rgb(208,208,38)" fg:x="8200" fg:w="821"/><text x="8.7183%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="9.2688%" y="165" width="0.0935%" height="15" fill="rgb(207,62,26)" fg:x="9021" fg:w="91"/><text x="9.5618%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="9.3623%" y="149" width="0.0144%" height="15" fill="rgb(218,82,2)" fg:x="9112" fg:w="14"/><text x="9.6553%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="9.3767%" y="133" width="0.0606%" height="15" fill="rgb(235,90,48)" fg:x="9126" fg:w="59"/><text x="9.6697%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.10%)</title><rect x="9.4374%" y="133" width="0.0966%" height="15" fill="rgb(254,20,23)" fg:x="9185" fg:w="94"/><text x="9.7303%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.18%)</title><rect x="9.5339%" y="133" width="0.1778%" height="15" fill="rgb(211,78,34)" fg:x="9279" fg:w="173"/><text x="9.8269%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.59%)</title><rect x="9.3767%" y="149" width="0.5949%" height="15" fill="rgb(217,168,11)" fg:x="9126" fg:w="579"/><text x="9.6697%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="9.9716%" y="149" width="0.0791%" height="15" fill="rgb(225,71,26)" fg:x="9705" fg:w="77"/><text x="10.2646%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="10.0508%" y="133" width="0.0884%" height="15" fill="rgb(228,208,0)" fg:x="9782" fg:w="86"/><text x="10.3437%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.12%)</title><rect x="10.0508%" y="149" width="0.1243%" height="15" fill="rgb(217,169,25)" fg:x="9782" fg:w="121"/><text x="10.3437%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.01%)</title><rect x="9.3623%" y="165" width="1.0131%" height="15" fill="rgb(237,32,21)" fg:x="9112" fg:w="986"/><text x="9.6553%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.06%)</title><rect x="10.3754%" y="117" width="0.0606%" height="15" fill="rgb(209,21,25)" fg:x="10098" fg:w="59"/><text x="10.6684%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.10%)</title><rect x="10.3754%" y="133" width="0.0966%" height="15" fill="rgb(243,62,21)" fg:x="10098" fg:w="94"/><text x="10.6684%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.32%)</title><rect x="10.3754%" y="149" width="0.3237%" height="15" fill="rgb(251,38,7)" fg:x="10098" fg:w="315"/><text x="10.6684%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.587 (18 instructions, 0.02%)</title><rect x="10.6991%" y="149" width="0.0185%" height="15" fill="rgb(209,91,0)" fg:x="10413" fg:w="18"/><text x="10.9921%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.7176%" y="149" width="0.0134%" height="15" fill="rgb(239,63,47)" fg:x="10431" fg:w="13"/><text x="11.0106%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.57%)</title><rect x="10.3754%" y="165" width="0.5661%" height="15" fill="rgb(216,8,41)" fg:x="10098" fg:w="551"/><text x="10.6684%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.05%)</title><rect x="10.9416%" y="165" width="0.0545%" height="15" fill="rgb(244,116,14)" fg:x="10649" fg:w="53"/><text x="11.2345%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="10.9960%" y="149" width="0.1356%" height="15" fill="rgb(230,180,0)" fg:x="10702" fg:w="132"/><text x="11.2890%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="11.1676%" y="149" width="0.1356%" height="15" fill="rgb(205,3,11)" fg:x="10869" fg:w="132"/><text x="11.4606%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.34%)</title><rect x="10.9960%" y="165" width="0.3432%" height="15" fill="rgb(218,136,21)" fg:x="10702" fg:w="334"/><text x="11.2890%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.03%)</title><rect x="11.3392%" y="149" width="0.0349%" height="15" fill="rgb(234,149,12)" fg:x="11036" fg:w="34"/><text x="11.6322%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3741%" y="149" width="0.0185%" height="15" fill="rgb(243,6,15)" fg:x="11070" fg:w="18"/><text x="11.6671%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="11.3926%" y="149" width="0.0185%" height="15" fill="rgb(210,218,2)" fg:x="11088" fg:w="18"/><text x="11.6856%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.17%)</title><rect x="11.3392%" y="165" width="0.1736%" height="15" fill="rgb(228,7,30)" fg:x="11036" fg:w="169"/><text x="11.6322%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5129%" y="165" width="0.0134%" height="15" fill="rgb(229,54,48)" fg:x="11205" fg:w="13"/><text x="11.8058%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5262%" y="165" width="0.0134%" height="15" fill="rgb(229,194,42)" fg:x="11218" fg:w="13"/><text x="11.8192%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="11.5396%" y="165" width="0.0134%" height="15" fill="rgb(215,69,18)" fg:x="11231" fg:w="13"/><text x="11.8325%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.45%)</title><rect x="11.5529%" y="165" width="0.4521%" height="15" fill="rgb(254,22,8)" fg:x="11244" fg:w="440"/><text x="11.8459%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.02%)</title><rect x="12.0050%" y="133" width="0.0195%" height="15" fill="rgb(221,129,51)" fg:x="11684" fg:w="19"/><text x="12.2980%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="12.0245%" y="133" width="0.0884%" height="15" fill="rgb(247,150,43)" fg:x="11703" fg:w="86"/><text x="12.3175%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.19%)</title><rect x="12.1129%" y="117" width="0.1860%" height="15" fill="rgb(229,174,13)" fg:x="11789" fg:w="181"/><text x="12.4059%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 0.22%)</title><rect x="12.1129%" y="133" width="0.2219%" height="15" fill="rgb(252,168,45)" fg:x="11789" fg:w="216"/><text x="12.4059%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="12.3348%" y="133" width="0.0134%" height="15" fill="rgb(250,59,31)" fg:x="12005" fg:w="13"/><text x="12.6278%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (396 instructions, 0.41%)</title><rect x="12.0050%" y="149" width="0.4069%" height="15" fill="rgb(239,34,48)" fg:x="11684" fg:w="396"/><text x="12.2980%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (445 instructions, 0.46%)</title><rect x="12.0050%" y="165" width="0.4572%" height="15" fill="rgb(253,26,41)" fg:x="11684" fg:w="445"/><text x="12.2980%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.14%)</title><rect x="12.4622%" y="165" width="0.1356%" height="15" fill="rgb(235,47,10)" fg:x="12129" fg:w="132"/><text x="12.7552%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,545 instructions, 13.92%)</title><rect x="0.1891%" y="181" width="13.9171%" height="15" fill="rgb(238,204,5)" fg:x="184" fg:w="13545"/><text x="0.4820%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.1062%" y="165" width="0.2106%" height="15" fill="rgb(240,115,52)" fg:x="13729" fg:w="205"/><text x="14.3992%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="14.3168%" y="165" width="0.2106%" height="15" fill="rgb(233,199,28)" fg:x="13934" fg:w="205"/><text x="14.6098%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.7080%" y="165" width="0.2435%" height="15" fill="rgb(229,82,19)" fg:x="15288" fg:w="237"/><text x="16.0010%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="15.9515%" y="165" width="0.2435%" height="15" fill="rgb(253,73,52)" fg:x="15525" fg:w="237"/><text x="16.2445%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="17.0777%" y="165" width="0.1449%" height="15" fill="rgb(250,158,4)" fg:x="16621" fg:w="141"/><text x="17.3706%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="17.2225%" y="165" width="0.1449%" height="15" fill="rgb(237,223,12)" fg:x="16762" fg:w="141"/><text x="17.5155%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="18.4493%" y="165" width="0.0935%" height="15" fill="rgb(225,191,6)" fg:x="17956" fg:w="91"/><text x="18.7423%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="18.5428%" y="165" width="0.2548%" height="15" fill="rgb(224,85,3)" fg:x="18047" fg:w="248"/><text x="18.8358%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="18.7976%" y="165" width="0.2548%" height="15" fill="rgb(248,128,1)" fg:x="18295" fg:w="248"/><text x="19.0906%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.0525%" y="165" width="0.1778%" height="15" fill="rgb(240,187,24)" fg:x="18543" fg:w="173"/><text x="19.3454%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="19.2302%" y="165" width="0.1778%" height="15" fill="rgb(232,180,31)" fg:x="18716" fg:w="173"/><text x="19.5232%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.4080%" y="165" width="0.3421%" height="15" fill="rgb(250,52,1)" fg:x="18889" fg:w="333"/><text x="19.7009%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="19.7501%" y="165" width="0.3421%" height="15" fill="rgb(244,21,41)" fg:x="19222" fg:w="333"/><text x="20.0431%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="20.0923%" y="165" width="0.2106%" height="15" fill="rgb(205,99,35)" fg:x="19555" fg:w="205"/><text x="20.3852%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.4434%" y="165" width="0.2435%" height="15" fill="rgb(205,17,46)" fg:x="20870" fg:w="237"/><text x="21.7364%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="21.6869%" y="165" width="0.2435%" height="15" fill="rgb(236,208,23)" fg:x="21107" fg:w="237"/><text x="21.9799%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="22.6486%" y="165" width="0.1449%" height="15" fill="rgb(222,66,36)" fg:x="22043" fg:w="141"/><text x="22.9416%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="22.7935%" y="165" width="0.1449%" height="15" fill="rgb(216,131,7)" fg:x="22184" fg:w="141"/><text x="23.0865%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="23.9525%" y="165" width="0.1449%" height="15" fill="rgb(205,223,18)" fg:x="23312" fg:w="141"/><text x="24.2455%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="24.0974%" y="165" width="0.1449%" height="15" fill="rgb(219,8,46)" fg:x="23453" fg:w="141"/><text x="24.3903%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="25.1577%" y="165" width="0.0935%" height="15" fill="rgb(250,210,0)" fg:x="24485" fg:w="91"/><text x="25.4507%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="25.2512%" y="165" width="0.2548%" height="15" fill="rgb(227,39,33)" fg:x="24576" fg:w="248"/><text x="25.5442%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="25.5060%" y="165" width="0.2548%" height="15" fill="rgb(240,140,18)" fg:x="24824" fg:w="248"/><text x="25.7990%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="25.7608%" y="165" width="0.1449%" height="15" fill="rgb(220,153,37)" fg:x="25072" fg:w="141"/><text x="26.0538%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="25.9057%" y="165" width="0.1449%" height="15" fill="rgb(243,88,21)" fg:x="25213" fg:w="141"/><text x="26.1987%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.0506%" y="165" width="0.2435%" height="15" fill="rgb(210,13,29)" fg:x="25354" fg:w="237"/><text x="26.3436%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="26.2941%" y="165" width="0.2435%" height="15" fill="rgb(206,58,0)" fg:x="25591" fg:w="237"/><text x="26.5871%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="26.5376%" y="165" width="0.1613%" height="15" fill="rgb(238,198,18)" fg:x="25828" fg:w="157"/><text x="26.8306%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="27.9011%" y="165" width="0.3093%" height="15" fill="rgb(241,119,26)" fg:x="27155" fg:w="301"/><text x="28.1940%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="28.2103%" y="165" width="0.3093%" height="15" fill="rgb(223,15,50)" fg:x="27456" fg:w="301"/><text x="28.5033%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.5029%" y="165" width="0.2435%" height="15" fill="rgb(235,217,6)" fg:x="28714" fg:w="237"/><text x="29.7959%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="29.7464%" y="165" width="0.2435%" height="15" fill="rgb(232,141,42)" fg:x="28951" fg:w="237"/><text x="30.0394%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,706 instructions, 17.16%)</title><rect x="14.1062%" y="181" width="17.1650%" height="15" fill="rgb(216,32,11)" fg:x="13729" fg:w="16706"/><text x="14.3992%" y="191.50">alloc::collections::bt..</text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.1476%" y="165" width="0.2106%" height="15" fill="rgb(250,199,23)" fg:x="31288" fg:w="205"/><text x="32.4406%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="32.3583%" y="165" width="0.2106%" height="15" fill="rgb(228,24,6)" fg:x="31493" fg:w="205"/><text x="32.6512%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.6837%" y="165" width="0.2435%" height="15" fill="rgb(225,118,49)" fg:x="32783" fg:w="237"/><text x="33.9767%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="33.9272%" y="165" width="0.2435%" height="15" fill="rgb(239,8,44)" fg:x="33020" fg:w="237"/><text x="34.2202%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="34.9547%" y="165" width="0.2435%" height="15" fill="rgb(241,160,39)" fg:x="34020" fg:w="237"/><text x="35.2477%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="35.1982%" y="165" width="0.2435%" height="15" fill="rgb(250,118,11)" fg:x="34257" fg:w="237"/><text x="35.4912%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,982 instructions, 5.12%)</title><rect x="31.2712%" y="181" width="5.1189%" height="15" fill="rgb(247,107,4)" fg:x="30435" fg:w="4982"/><text x="31.5642%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="37.5645%" y="165" width="0.0935%" height="15" fill="rgb(253,135,15)" fg:x="36560" fg:w="91"/><text x="37.8574%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="37.6580%" y="165" width="0.2548%" height="15" fill="rgb(253,51,16)" fg:x="36651" fg:w="248"/><text x="37.9509%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="37.9128%" y="165" width="0.2548%" height="15" fill="rgb(241,1,22)" fg:x="36899" fg:w="248"/><text x="38.2058%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.1676%" y="165" width="0.1778%" height="15" fill="rgb(228,131,13)" fg:x="37147" fg:w="173"/><text x="38.4606%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.3454%" y="165" width="0.1778%" height="15" fill="rgb(215,96,44)" fg:x="37320" fg:w="173"/><text x="38.6383%" y="175.50"></text></g><g><title>memmove (221 instructions, 0.23%)</title><rect x="38.5231%" y="165" width="0.2271%" height="15" fill="rgb(207,157,39)" fg:x="37493" fg:w="221"/><text x="38.8161%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="39.9585%" y="165" width="0.1778%" height="15" fill="rgb(229,60,0)" fg:x="38890" fg:w="173"/><text x="40.2515%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="40.1362%" y="165" width="0.1778%" height="15" fill="rgb(243,86,5)" fg:x="39063" fg:w="173"/><text x="40.4292%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.6898%" y="165" width="0.1613%" height="15" fill="rgb(213,18,35)" fg:x="40575" fg:w="157"/><text x="41.9828%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="41.8511%" y="165" width="0.1613%" height="15" fill="rgb(245,114,0)" fg:x="40732" fg:w="157"/><text x="42.1441%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="42.9937%" y="165" width="0.0935%" height="15" fill="rgb(250,39,46)" fg:x="41844" fg:w="91"/><text x="43.2866%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="43.0872%" y="165" width="0.2548%" height="15" fill="rgb(244,89,3)" fg:x="41935" fg:w="248"/><text x="43.3801%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="43.3420%" y="165" width="0.2548%" height="15" fill="rgb(246,33,2)" fg:x="42183" fg:w="248"/><text x="43.6349%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.0322%" y="165" width="0.3093%" height="15" fill="rgb(207,225,53)" fg:x="43828" fg:w="301"/><text x="45.3251%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="45.3414%" y="165" width="0.3093%" height="15" fill="rgb(205,193,53)" fg:x="44129" fg:w="301"/><text x="45.6344%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="46.5333%" y="165" width="0.1449%" height="15" fill="rgb(238,205,50)" fg:x="45289" fg:w="141"/><text x="46.8263%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="46.6782%" y="165" width="0.1449%" height="15" fill="rgb(238,106,28)" fg:x="45430" fg:w="141"/><text x="46.9711%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="47.8063%" y="165" width="0.1449%" height="15" fill="rgb(216,97,22)" fg:x="46528" fg:w="141"/><text x="48.0993%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="47.9512%" y="165" width="0.1449%" height="15" fill="rgb(223,95,35)" fg:x="46669" fg:w="141"/><text x="48.2442%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.4411%" y="165" width="0.1613%" height="15" fill="rgb(220,150,46)" fg:x="48119" fg:w="157"/><text x="49.7340%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="49.6024%" y="165" width="0.1613%" height="15" fill="rgb(247,78,8)" fg:x="48276" fg:w="157"/><text x="49.8953%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.7120%" y="165" width="0.2106%" height="15" fill="rgb(222,118,18)" fg:x="49356" fg:w="205"/><text x="51.0050%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="50.9227%" y="165" width="0.2106%" height="15" fill="rgb(243,217,5)" fg:x="49561" fg:w="205"/><text x="51.2156%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="51.9851%" y="165" width="0.3093%" height="15" fill="rgb(209,213,49)" fg:x="50595" fg:w="301"/><text x="52.2780%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="52.2944%" y="165" width="0.3093%" height="15" fill="rgb(242,221,22)" fg:x="50896" fg:w="301"/><text x="52.5873%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.6527%" y="165" width="0.2764%" height="15" fill="rgb(221,225,17)" fg:x="52218" fg:w="269"/><text x="53.9456%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.9291%" y="165" width="0.2764%" height="15" fill="rgb(214,46,12)" fg:x="52487" fg:w="269"/><text x="54.2220%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.5175%" y="165" width="0.3421%" height="15" fill="rgb(220,210,20)" fg:x="54033" fg:w="333"/><text x="55.8105%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.34%)</title><rect x="55.8597%" y="165" width="0.3421%" height="15" fill="rgb(228,108,50)" fg:x="54366" fg:w="333"/><text x="56.1527%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.2838%" y="165" width="0.3093%" height="15" fill="rgb(226,78,50)" fg:x="55752" fg:w="301"/><text x="57.5767%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="57.5930%" y="165" width="0.3093%" height="15" fill="rgb(222,34,8)" fg:x="56053" fg:w="301"/><text x="57.8860%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,054 instructions, 22.66%)</title><rect x="36.3901%" y="181" width="22.6599%" height="15" fill="rgb(211,17,42)" fg:x="35417" fg:w="22054"/><text x="36.6830%" y="191.50">alloc::collections::btree::map..</text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="59.9922%" y="165" width="0.1613%" height="15" fill="rgb(231,208,8)" fg:x="58388" fg:w="157"/><text x="60.2852%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="60.1535%" y="165" width="0.1613%" height="15" fill="rgb(230,51,46)" fg:x="58545" fg:w="157"/><text x="60.4465%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="61.7934%" y="165" width="0.3093%" height="15" fill="rgb(237,222,53)" fg:x="60141" fg:w="301"/><text x="62.0863%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.31%)</title><rect x="62.1026%" y="165" width="0.3093%" height="15" fill="rgb(232,101,42)" fg:x="60442" fg:w="301"/><text x="62.3956%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="63.3274%" y="165" width="0.0935%" height="15" fill="rgb(211,72,1)" fg:x="61634" fg:w="91"/><text x="63.6203%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.4209%" y="165" width="0.1891%" height="15" fill="rgb(226,59,7)" fg:x="61725" fg:w="184"/><text x="63.7138%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.6099%" y="165" width="0.1891%" height="15" fill="rgb(234,67,37)" fg:x="61909" fg:w="184"/><text x="63.9029%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="63.7990%" y="165" width="0.1449%" height="15" fill="rgb(244,15,33)" fg:x="62093" fg:w="141"/><text x="64.0920%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="63.9439%" y="165" width="0.1449%" height="15" fill="rgb(208,83,25)" fg:x="62234" fg:w="141"/><text x="64.2368%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="64.0887%" y="165" width="0.1449%" height="15" fill="rgb(250,207,18)" fg:x="62375" fg:w="141"/><text x="64.3817%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="64.2336%" y="165" width="0.1449%" height="15" fill="rgb(242,12,11)" fg:x="62516" fg:w="141"/><text x="64.5266%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="64.3785%" y="165" width="0.1613%" height="15" fill="rgb(214,133,7)" fg:x="62657" fg:w="157"/><text x="64.6714%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="66.0337%" y="165" width="0.0935%" height="15" fill="rgb(232,217,10)" fg:x="64268" fg:w="91"/><text x="66.3267%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="66.1272%" y="165" width="0.2548%" height="15" fill="rgb(251,105,32)" fg:x="64359" fg:w="248"/><text x="66.4202%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="66.3821%" y="165" width="0.2548%" height="15" fill="rgb(232,185,41)" fg:x="64607" fg:w="248"/><text x="66.6750%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.6369%" y="165" width="0.2106%" height="15" fill="rgb(237,18,45)" fg:x="64855" fg:w="205"/><text x="66.9298%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="66.8475%" y="165" width="0.2106%" height="15" fill="rgb(219,39,45)" fg:x="65060" fg:w="205"/><text x="67.1405%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,973 instructions, 9.22%)</title><rect x="59.0500%" y="181" width="9.2195%" height="15" fill="rgb(214,138,51)" fg:x="57471" fg:w="8973"/><text x="59.3430%" y="191.50">alloc::coll..</text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.2117%" y="165" width="0.1778%" height="15" fill="rgb(207,168,15)" fg:x="67361" fg:w="173"/><text x="69.5047%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.3895%" y="165" width="0.1778%" height="15" fill="rgb(209,29,16)" fg:x="67534" fg:w="173"/><text x="69.6824%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.4848%" y="165" width="0.2106%" height="15" fill="rgb(243,56,25)" fg:x="68600" fg:w="205"/><text x="70.7777%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="70.6954%" y="165" width="0.2106%" height="15" fill="rgb(213,164,32)" fg:x="68805" fg:w="205"/><text x="70.9884%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="71.9222%" y="165" width="0.2435%" height="15" fill="rgb(205,90,17)" fg:x="69999" fg:w="237"/><text x="72.2152%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="72.1657%" y="165" width="0.2435%" height="15" fill="rgb(226,138,2)" fg:x="70236" fg:w="237"/><text x="72.4587%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.4891%" y="165" width="0.2106%" height="15" fill="rgb(242,25,49)" fg:x="71524" fg:w="205"/><text x="73.7821%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="73.6997%" y="165" width="0.2106%" height="15" fill="rgb(243,169,4)" fg:x="71729" fg:w="205"/><text x="73.9927%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="74.8587%" y="165" width="0.1778%" height="15" fill="rgb(217,97,28)" fg:x="72857" fg:w="173"/><text x="75.1517%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="75.0365%" y="165" width="0.1778%" height="15" fill="rgb(237,152,40)" fg:x="73030" fg:w="173"/><text x="75.3294%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.0968%" y="165" width="0.2764%" height="15" fill="rgb(252,147,9)" fg:x="74062" fg:w="269"/><text x="76.3898%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.3732%" y="165" width="0.2764%" height="15" fill="rgb(220,87,30)" fg:x="74331" fg:w="269"/><text x="76.6662%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="77.7295%" y="165" width="0.0935%" height="15" fill="rgb(207,141,47)" fg:x="75651" fg:w="91"/><text x="78.0225%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="77.8230%" y="165" width="0.2219%" height="15" fill="rgb(236,38,36)" fg:x="75742" fg:w="216"/><text x="78.1160%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.22%)</title><rect x="78.0449%" y="165" width="0.2219%" height="15" fill="rgb(227,113,14)" fg:x="75958" fg:w="216"/><text x="78.3379%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.2669%" y="165" width="0.2435%" height="15" fill="rgb(213,105,10)" fg:x="76174" fg:w="237"/><text x="78.5598%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="78.5104%" y="165" width="0.2435%" height="15" fill="rgb(214,22,49)" fg:x="76411" fg:w="237"/><text x="78.8033%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="78.7539%" y="165" width="0.1449%" height="15" fill="rgb(248,220,44)" fg:x="76648" fg:w="141"/><text x="79.0468%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.14%)</title><rect x="78.8988%" y="165" width="0.1449%" height="15" fill="rgb(209,6,52)" fg:x="76789" fg:w="141"/><text x="79.1917%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.16%)</title><rect x="79.0436%" y="165" width="0.1613%" height="15" fill="rgb(223,154,12)" fg:x="76930" fg:w="157"/><text x="79.3366%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="80.8284%" y="165" width="0.2435%" height="15" fill="rgb(214,158,32)" fg:x="78667" fg:w="237"/><text x="81.1213%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="81.0719%" y="165" width="0.2435%" height="15" fill="rgb(215,93,45)" fg:x="78904" fg:w="237"/><text x="81.3648%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.3315%" y="165" width="0.2435%" height="15" fill="rgb(219,25,17)" fg:x="80130" fg:w="237"/><text x="82.6245%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="82.5751%" y="165" width="0.2435%" height="15" fill="rgb(239,226,46)" fg:x="80367" fg:w="237"/><text x="82.8680%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.09%)</title><rect x="83.6025%" y="165" width="0.0935%" height="15" fill="rgb(243,161,51)" fg:x="81367" fg:w="91"/><text x="83.8955%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="83.6960%" y="165" width="0.2548%" height="15" fill="rgb(251,139,48)" fg:x="81458" fg:w="248"/><text x="83.9890%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.25%)</title><rect x="83.9508%" y="165" width="0.2548%" height="15" fill="rgb(241,75,6)" fg:x="81706" fg:w="248"/><text x="84.2438%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.2057%" y="165" width="0.1778%" height="15" fill="rgb(222,69,51)" fg:x="81954" fg:w="173"/><text x="84.4986%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.3834%" y="165" width="0.1778%" height="15" fill="rgb(225,197,53)" fg:x="82127" fg:w="173"/><text x="84.6764%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.5612%" y="165" width="0.2764%" height="15" fill="rgb(228,104,54)" fg:x="82300" fg:w="269"/><text x="84.8541%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.8376%" y="165" width="0.2764%" height="15" fill="rgb(248,157,27)" fg:x="82569" fg:w="269"/><text x="85.1305%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="85.1139%" y="165" width="0.1778%" height="15" fill="rgb(240,127,49)" fg:x="82838" fg:w="173"/><text x="85.4069%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="86.8452%" y="165" width="0.2106%" height="15" fill="rgb(237,106,13)" fg:x="84523" fg:w="205"/><text x="87.1382%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.21%)</title><rect x="87.0559%" y="165" width="0.2106%" height="15" fill="rgb(216,194,11)" fg:x="84728" fg:w="205"/><text x="87.3488%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.2149%" y="165" width="0.1778%" height="15" fill="rgb(217,123,0)" fg:x="85856" fg:w="173"/><text x="88.5078%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.3926%" y="165" width="0.1778%" height="15" fill="rgb(215,13,9)" fg:x="86029" fg:w="173"/><text x="88.6856%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.4859%" y="165" width="0.2435%" height="15" fill="rgb(229,19,24)" fg:x="87093" fg:w="237"/><text x="89.7788%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="89.7294%" y="165" width="0.2435%" height="15" fill="rgb(249,178,42)" fg:x="87330" fg:w="237"/><text x="90.0223%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.1863%" y="165" width="0.2435%" height="15" fill="rgb(238,128,19)" fg:x="88748" fg:w="237"/><text x="91.4793%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="91.4298%" y="165" width="0.2435%" height="15" fill="rgb(229,135,37)" fg:x="88985" fg:w="237"/><text x="91.7228%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.4573%" y="165" width="0.2435%" height="15" fill="rgb(229,31,25)" fg:x="89985" fg:w="237"/><text x="92.7503%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.24%)</title><rect x="92.7008%" y="165" width="0.2435%" height="15" fill="rgb(240,20,5)" fg:x="90222" fg:w="237"/><text x="92.9938%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,714 instructions, 25.39%)</title><rect x="68.2695%" y="181" width="25.3930%" height="15" fill="rgb(242,163,39)" fg:x="66444" fg:w="24714"/><text x="68.5625%" y="191.50">alloc::collections::btree::map::BT..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,077 instructions, 1.11%)</title><rect x="93.6625%" y="181" width="1.1066%" height="15" fill="rgb(229,176,43)" fg:x="91158" fg:w="1077"/><text x="93.9555%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.01%)</title><rect x="94.7691%" y="149" width="0.0144%" height="15" fill="rgb(243,55,44)" fg:x="92235" fg:w="14"/><text x="95.0621%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.14%)</title><rect x="94.7835%" y="133" width="0.1387%" height="15" fill="rgb(241,16,8)" fg:x="92249" fg:w="135"/><text x="95.0765%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (170 instructions, 0.17%)</title><rect x="94.7835%" y="149" width="0.1747%" height="15" fill="rgb(219,26,44)" fg:x="92249" fg:w="170"/><text x="95.0765%" y="159.50"></text></g><g><title>memset (152 instructions, 0.16%)</title><rect x="94.9582%" y="149" width="0.1562%" height="15" fill="rgb(220,228,29)" fg:x="92419" fg:w="152"/><text x="95.2512%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (516 instructions, 0.53%)</title><rect x="94.7691%" y="165" width="0.5302%" height="15" fill="rgb(227,126,6)" fg:x="92235" fg:w="516"/><text x="95.0621%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.53%)</title><rect x="95.2993%" y="149" width="0.5322%" height="15" fill="rgb(208,117,53)" fg:x="92751" fg:w="518"/><text x="95.5923%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.12%)</title><rect x="95.8315%" y="101" width="0.1243%" height="15" fill="rgb(211,143,49)" fg:x="93269" fg:w="121"/><text x="96.1245%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.17%)</title><rect x="95.8315%" y="117" width="0.1685%" height="15" fill="rgb(237,201,49)" fg:x="93269" fg:w="164"/><text x="96.1245%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 instructions, 0.25%)</title><rect x="95.8315%" y="133" width="0.2497%" height="15" fill="rgb(206,112,38)" fg:x="93269" fg:w="243"/><text x="96.1245%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.0812%" y="133" width="0.0154%" height="15" fill="rgb(212,162,36)" fg:x="93512" fg:w="15"/><text x="96.3742%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.0966%" y="133" width="0.0154%" height="15" fill="rgb(236,108,49)" fg:x="93527" fg:w="15"/><text x="96.3896%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (461 instructions, 0.47%)</title><rect x="95.8315%" y="149" width="0.4737%" height="15" fill="rgb(217,64,17)" fg:x="93269" fg:w="461"/><text x="96.1245%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.53%)</title><rect x="96.3052%" y="149" width="0.5302%" height="15" fill="rgb(207,118,25)" fg:x="93730" fg:w="516"/><text x="96.5982%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,595 instructions, 1.64%)</title><rect x="95.2993%" y="165" width="1.6388%" height="15" fill="rgb(249,107,49)" fg:x="92751" fg:w="1595"/><text x="95.5923%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="96.9443%" y="165" width="0.0616%" height="15" fill="rgb(214,141,9)" fg:x="94352" fg:w="60"/><text x="97.2373%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,783 instructions, 2.86%)</title><rect x="94.7691%" y="181" width="2.8595%" height="15" fill="rgb(219,220,28)" fg:x="92235" fg:w="2783"/><text x="95.0621%" y="191.50">ic..</text></g><g><title>btreemap::__canister_method_batch_put::{{closure}} (96,762 instructions, 99.42%)</title><rect x="0.1891%" y="197" width="99.4205%" height="15" fill="rgb(221,156,30)" fg:x="184" fg:w="96762"/><text x="0.4820%" y="207.50">btreemap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.01%)</title><rect x="99.6096%" y="197" width="0.0144%" height="15" fill="rgb(247,20,40)" fg:x="96946" fg:w="14"/><text x="99.9025%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.09%)</title><rect x="99.6250%" y="197" width="0.0884%" height="15" fill="rgb(237,84,36)" fg:x="96961" fg:w="86"/><text x="99.9179%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.14%)</title><rect x="99.7133%" y="197" width="0.1387%" height="15" fill="rgb(239,71,6)" fg:x="97047" fg:w="135"/><text x="100.0063%" y="207.50"></text></g><g><title>all (97,326 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,226,28)" fg:x="0" fg:w="97326"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (97,326 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,187,49)" fg:x="0" fg:w="97326"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>