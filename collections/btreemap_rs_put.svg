<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="112603"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0169%" height="15" fill="rgb(241,26,3)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="0.0169%" y="197" width="0.0675%" height="15" fill="rgb(246,143,2)" fg:x="19" fg:w="76"/><text x="0.3098%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="0.0844%" y="197" width="0.0631%" height="15" fill="rgb(254,217,3)" fg:x="95" fg:w="71"/><text x="0.3773%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="0.1474%" y="165" width="0.1048%" height="15" fill="rgb(225,107,2)" fg:x="166" fg:w="118"/><text x="0.4404%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.2522%" y="149" width="0.0613%" height="15" fill="rgb(208,161,11)" fg:x="284" fg:w="69"/><text x="0.5452%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="0.3135%" y="149" width="0.3606%" height="15" fill="rgb(245,182,34)" fg:x="353" fg:w="406"/><text x="0.6065%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="0.6740%" y="149" width="0.0728%" height="15" fill="rgb(222,208,18)" fg:x="759" fg:w="82"/><text x="0.9670%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7469%" y="149" width="0.0480%" height="15" fill="rgb(213,97,36)" fg:x="841" fg:w="54"/><text x="1.0398%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.7948%" y="149" width="0.0480%" height="15" fill="rgb(205,40,20)" fg:x="895" fg:w="54"/><text x="1.0878%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8428%" y="149" width="0.0480%" height="15" fill="rgb(206,57,18)" fg:x="949" fg:w="54"/><text x="1.1358%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.05%)</title><rect x="0.8907%" y="149" width="0.0480%" height="15" fill="rgb(230,157,14)" fg:x="1003" fg:w="54"/><text x="1.1837%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="0.9387%" y="149" width="0.0613%" height="15" fill="rgb(249,222,8)" fg:x="1057" fg:w="69"/><text x="1.2317%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="1.0000%" y="149" width="0.0577%" height="15" fill="rgb(232,1,11)" fg:x="1126" fg:w="65"/><text x="1.2929%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="1.0577%" y="149" width="0.3606%" height="15" fill="rgb(225,144,29)" fg:x="1191" fg:w="406"/><text x="1.3507%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="1.4183%" y="149" width="0.0142%" height="15" fill="rgb(236,183,30)" fg:x="1597" fg:w="16"/><text x="1.7112%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="1.4325%" y="133" width="0.0675%" height="15" fill="rgb(243,198,28)" fg:x="1613" fg:w="76"/><text x="1.7254%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="1.5000%" y="101" width="0.0533%" height="15" fill="rgb(254,207,11)" fg:x="1689" fg:w="60"/><text x="1.7929%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="1.5000%" y="117" width="0.0755%" height="15" fill="rgb(232,193,7)" fg:x="1689" fg:w="85"/><text x="1.7929%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="1.5834%" y="53" width="0.0266%" height="15" fill="rgb(230,7,13)" fg:x="1783" fg:w="30"/><text x="1.8764%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="1.5834%" y="69" width="0.0488%" height="15" fill="rgb(207,150,35)" fg:x="1783" fg:w="55"/><text x="1.8764%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="1.5754%" y="85" width="0.1048%" height="15" fill="rgb(228,197,42)" fg:x="1774" fg:w="118"/><text x="1.8684%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="1.5754%" y="101" width="0.1519%" height="15" fill="rgb(214,228,15)" fg:x="1774" fg:w="171"/><text x="1.8684%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="1.5754%" y="117" width="0.1563%" height="15" fill="rgb(228,17,14)" fg:x="1774" fg:w="176"/><text x="1.8684%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="1.5000%" y="133" width="0.3304%" height="15" fill="rgb(225,138,52)" fg:x="1689" fg:w="372"/><text x="1.7929%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="1.4325%" y="149" width="0.5231%" height="15" fill="rgb(230,3,54)" fg:x="1613" fg:w="589"/><text x="1.7254%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="1.9555%" y="149" width="0.0728%" height="15" fill="rgb(248,71,41)" fg:x="2202" fg:w="82"/><text x="2.2485%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="2.0284%" y="149" width="0.0488%" height="15" fill="rgb(216,176,23)" fg:x="2284" fg:w="55"/><text x="2.3213%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="2.0772%" y="149" width="0.0559%" height="15" fill="rgb(244,8,48)" fg:x="2339" fg:w="63"/><text x="2.3702%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.06%)</title><rect x="2.1332%" y="149" width="0.0577%" height="15" fill="rgb(232,187,45)" fg:x="2402" fg:w="65"/><text x="2.4261%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.36%)</title><rect x="2.1909%" y="133" width="0.3606%" height="15" fill="rgb(246,150,27)" fg:x="2467" fg:w="406"/><text x="2.4839%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.01%)</title><rect x="2.5514%" y="133" width="0.0142%" height="15" fill="rgb(245,180,24)" fg:x="2873" fg:w="16"/><text x="2.8444%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="2.5657%" y="117" width="0.0675%" height="15" fill="rgb(224,199,9)" fg:x="2889" fg:w="76"/><text x="2.8586%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.05%)</title><rect x="2.6331%" y="85" width="0.0533%" height="15" fill="rgb(249,127,44)" fg:x="2965" fg:w="60"/><text x="2.9261%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.08%)</title><rect x="2.6331%" y="101" width="0.0755%" height="15" fill="rgb(207,85,6)" fg:x="2965" fg:w="85"/><text x="2.9261%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.03%)</title><rect x="2.7166%" y="37" width="0.0266%" height="15" fill="rgb(247,21,0)" fg:x="3059" fg:w="30"/><text x="3.0096%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.05%)</title><rect x="2.7166%" y="53" width="0.0488%" height="15" fill="rgb(220,150,10)" fg:x="3059" fg:w="55"/><text x="3.0096%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.10%)</title><rect x="2.7086%" y="69" width="0.1048%" height="15" fill="rgb(237,1,53)" fg:x="3050" fg:w="118"/><text x="3.0016%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.15%)</title><rect x="2.7086%" y="85" width="0.1519%" height="15" fill="rgb(242,93,33)" fg:x="3050" fg:w="171"/><text x="3.0016%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.16%)</title><rect x="2.7086%" y="101" width="0.1563%" height="15" fill="rgb(242,175,5)" fg:x="3050" fg:w="176"/><text x="3.0016%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.33%)</title><rect x="2.6331%" y="117" width="0.3304%" height="15" fill="rgb(232,223,26)" fg:x="2965" fg:w="372"/><text x="2.9261%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.52%)</title><rect x="2.5657%" y="133" width="0.5231%" height="15" fill="rgb(244,66,36)" fg:x="2889" fg:w="589"/><text x="2.8586%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.07%)</title><rect x="3.0887%" y="133" width="0.0728%" height="15" fill="rgb(242,191,27)" fg:x="3478" fg:w="82"/><text x="3.3817%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="3.1615%" y="133" width="0.0488%" height="15" fill="rgb(243,96,42)" fg:x="3560" fg:w="55"/><text x="3.4545%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.06%)</title><rect x="3.2104%" y="117" width="0.0613%" height="15" fill="rgb(253,205,44)" fg:x="3615" fg:w="69"/><text x="3.5034%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.08%)</title><rect x="3.2717%" y="117" width="0.0808%" height="15" fill="rgb(243,189,10)" fg:x="3684" fg:w="91"/><text x="3.5646%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.3525%" y="117" width="0.0559%" height="15" fill="rgb(228,87,18)" fg:x="3775" fg:w="63"/><text x="3.6455%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.25%)</title><rect x="3.2104%" y="133" width="0.2504%" height="15" fill="rgb(237,12,11)" fg:x="3615" fg:w="282"/><text x="3.5034%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.4608%" y="133" width="0.0675%" height="15" fill="rgb(211,187,28)" fg:x="3897" fg:w="76"/><text x="3.7538%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 1.52%)</title><rect x="2.1909%" y="149" width="1.5177%" height="15" fill="rgb(214,179,49)" fg:x="2467" fg:w="1709"/><text x="2.4839%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.06%)</title><rect x="3.7086%" y="149" width="0.0559%" height="15" fill="rgb(219,192,11)" fg:x="4176" fg:w="63"/><text x="4.0016%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7646%" y="149" width="0.0115%" height="15" fill="rgb(206,158,5)" fg:x="4239" fg:w="13"/><text x="4.0575%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.01%)</title><rect x="3.7761%" y="149" width="0.0115%" height="15" fill="rgb(222,68,42)" fg:x="4252" fg:w="13"/><text x="4.0691%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.01%)</title><rect x="3.7939%" y="149" width="0.0133%" height="15" fill="rgb(246,82,20)" fg:x="4272" fg:w="15"/><text x="4.0868%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.07%)</title><rect x="3.8072%" y="133" width="0.0675%" height="15" fill="rgb(225,193,42)" fg:x="4287" fg:w="76"/><text x="4.1001%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.14%)</title><rect x="3.8072%" y="149" width="0.1412%" height="15" fill="rgb(247,207,20)" fg:x="4287" fg:w="159"/><text x="4.1001%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="3.9484%" y="117" width="0.0728%" height="15" fill="rgb(252,78,54)" fg:x="4446" fg:w="82"/><text x="4.2414%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.10%)</title><rect x="3.9484%" y="133" width="0.1030%" height="15" fill="rgb(239,81,20)" fg:x="4446" fg:w="116"/><text x="4.2414%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.16%)</title><rect x="3.9484%" y="149" width="0.1634%" height="15" fill="rgb(208,62,8)" fg:x="4446" fg:w="184"/><text x="4.2414%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.06%)</title><rect x="4.1118%" y="149" width="0.0631%" height="15" fill="rgb(214,117,23)" fg:x="4630" fg:w="71"/><text x="4.4048%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.05%)</title><rect x="4.1748%" y="149" width="0.0497%" height="15" fill="rgb(206,152,33)" fg:x="4701" fg:w="56"/><text x="4.4678%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2246%" y="149" width="0.0728%" height="15" fill="rgb(254,175,22)" fg:x="4757" fg:w="82"/><text x="4.5175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="4.2974%" y="149" width="0.0728%" height="15" fill="rgb(228,138,33)" fg:x="4839" fg:w="82"/><text x="4.5904%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="4.3720%" y="149" width="0.0719%" height="15" fill="rgb(252,2,25)" fg:x="4923" fg:w="81"/><text x="4.6650%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.35%)</title><rect x="4.4439%" y="149" width="0.3543%" height="15" fill="rgb(224,141,22)" fg:x="5004" fg:w="399"/><text x="4.7369%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.35%)</title><rect x="4.7983%" y="149" width="0.3543%" height="15" fill="rgb(206,118,18)" fg:x="5403" fg:w="399"/><text x="5.0912%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,445 instructions, 5.72%)</title><rect x="0.2522%" y="165" width="5.7236%" height="15" fill="rgb(246,204,6)" fg:x="284" fg:w="6445"/><text x="0.5452%" y="175.50">candid..</text></g><g><title>memcpy (354 instructions, 0.31%)</title><rect x="5.9759%" y="165" width="0.3144%" height="15" fill="rgb(237,64,12)" fg:x="6729" fg:w="354"/><text x="6.2688%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.03%)</title><rect x="6.2902%" y="165" width="0.0346%" height="15" fill="rgb(224,12,2)" fg:x="7083" fg:w="39"/><text x="6.5832%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="6.3249%" y="165" width="0.0728%" height="15" fill="rgb(242,140,49)" fg:x="7122" fg:w="82"/><text x="6.6178%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="6.4021%" y="133" width="0.0471%" height="15" fill="rgb(237,0,44)" fg:x="7209" fg:w="53"/><text x="6.6951%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="6.4492%" y="133" width="0.0782%" height="15" fill="rgb(254,211,26)" fg:x="7262" fg:w="88"/><text x="6.7422%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="6.5274%" y="133" width="0.1439%" height="15" fill="rgb(220,52,37)" fg:x="7350" fg:w="162"/><text x="6.8203%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="6.4021%" y="149" width="0.4796%" height="15" fill="rgb(240,93,0)" fg:x="7209" fg:w="540"/><text x="6.6951%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.67%)</title><rect x="6.3977%" y="165" width="0.6652%" height="15" fill="rgb(252,92,54)" fg:x="7204" fg:w="749"/><text x="6.6907%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="7.0629%" y="165" width="0.0728%" height="15" fill="rgb(247,126,8)" fg:x="7953" fg:w="82"/><text x="7.3558%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.1401%" y="133" width="0.0471%" height="15" fill="rgb(209,1,12)" fg:x="8040" fg:w="53"/><text x="7.4331%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.08%)</title><rect x="7.1872%" y="133" width="0.0782%" height="15" fill="rgb(218,221,42)" fg:x="8093" fg:w="88"/><text x="7.4802%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.14%)</title><rect x="7.2653%" y="133" width="0.1439%" height="15" fill="rgb(253,67,15)" fg:x="8181" fg:w="162"/><text x="7.5583%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.48%)</title><rect x="7.1401%" y="149" width="0.4796%" height="15" fill="rgb(228,185,34)" fg:x="8040" fg:w="540"/><text x="7.4331%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.06%)</title><rect x="7.6197%" y="149" width="0.0604%" height="15" fill="rgb(251,204,27)" fg:x="8580" fg:w="68"/><text x="7.9127%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="7.6801%" y="133" width="0.0719%" height="15" fill="rgb(247,16,19)" fg:x="8648" fg:w="81"/><text x="7.9730%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.10%)</title><rect x="7.6801%" y="149" width="0.0959%" height="15" fill="rgb(235,219,35)" fg:x="8648" fg:w="108"/><text x="7.9730%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 0.79%)</title><rect x="7.1357%" y="165" width="0.7904%" height="15" fill="rgb(221,217,21)" fg:x="8035" fg:w="890"/><text x="7.4287%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.05%)</title><rect x="7.9261%" y="117" width="0.0471%" height="15" fill="rgb(221,95,18)" fg:x="8925" fg:w="53"/><text x="8.2190%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.07%)</title><rect x="7.9261%" y="133" width="0.0693%" height="15" fill="rgb(227,24,50)" fg:x="8925" fg:w="78"/><text x="8.2190%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.26%)</title><rect x="7.9261%" y="149" width="0.2602%" height="15" fill="rgb(234,48,0)" fg:x="8925" fg:w="293"/><text x="8.2190%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1622 (15 instructions, 0.01%)</title><rect x="8.1863%" y="149" width="0.0133%" height="15" fill="rgb(225,108,47)" fg:x="9218" fg:w="15"/><text x="8.4793%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.42%)</title><rect x="7.9261%" y="165" width="0.4245%" height="15" fill="rgb(210,136,16)" fg:x="8925" fg:w="478"/><text x="8.2190%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.04%)</title><rect x="8.3506%" y="165" width="0.0417%" height="15" fill="rgb(224,21,46)" fg:x="9403" fg:w="47"/><text x="8.6435%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.3923%" y="149" width="0.1092%" height="15" fill="rgb(239,162,54)" fg:x="9450" fg:w="123"/><text x="8.6853%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="8.5255%" y="149" width="0.1092%" height="15" fill="rgb(239,200,26)" fg:x="9600" fg:w="123"/><text x="8.8185%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.27%)</title><rect x="8.3923%" y="165" width="0.2664%" height="15" fill="rgb(240,221,6)" fg:x="9450" fg:w="300"/><text x="8.6853%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="8.6587%" y="149" width="0.0249%" height="15" fill="rgb(231,223,3)" fg:x="9750" fg:w="28"/><text x="8.9517%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.01%)</title><rect x="8.6836%" y="149" width="0.0142%" height="15" fill="rgb(219,182,27)" fg:x="9778" fg:w="16"/><text x="8.9766%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.01%)</title><rect x="8.6978%" y="149" width="0.0142%" height="15" fill="rgb(249,141,10)" fg:x="9794" fg:w="16"/><text x="8.9908%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (137 instructions, 0.12%)</title><rect x="8.6587%" y="165" width="0.1217%" height="15" fill="rgb(218,13,20)" fg:x="9750" fg:w="137"/><text x="8.9517%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.36%)</title><rect x="8.8097%" y="165" width="0.3641%" height="15" fill="rgb(230,166,0)" fg:x="9920" fg:w="410"/><text x="9.1027%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="9.1738%" y="133" width="0.0107%" height="15" fill="rgb(206,121,26)" fg:x="10330" fg:w="12"/><text x="9.4668%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="9.1845%" y="133" width="0.0719%" height="15" fill="rgb(242,61,36)" fg:x="10342" fg:w="81"/><text x="9.4774%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.15%)</title><rect x="9.2564%" y="117" width="0.1492%" height="15" fill="rgb(236,219,32)" fg:x="10423" fg:w="168"/><text x="9.5494%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.17%)</title><rect x="9.2564%" y="133" width="0.1732%" height="15" fill="rgb(231,225,41)" fg:x="10423" fg:w="195"/><text x="9.5494%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (339 instructions, 0.30%)</title><rect x="9.1738%" y="149" width="0.3011%" height="15" fill="rgb(236,198,14)" fg:x="10330" fg:w="339"/><text x="9.4668%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (377 instructions, 0.33%)</title><rect x="9.1738%" y="165" width="0.3348%" height="15" fill="rgb(251,74,43)" fg:x="10330" fg:w="377"/><text x="9.4668%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.11%)</title><rect x="9.5086%" y="165" width="0.1092%" height="15" fill="rgb(232,124,30)" fg:x="10707" fg:w="123"/><text x="9.8016%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,058 instructions, 9.82%)</title><rect x="0.1474%" y="181" width="9.8203%" height="15" fill="rgb(208,176,43)" fg:x="166" fg:w="11058"/><text x="0.4404%" y="191.50">ic_cdk::api:..</text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="9.9678%" y="165" width="0.1723%" height="15" fill="rgb(226,65,42)" fg:x="11224" fg:w="194"/><text x="10.2607%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="10.1400%" y="165" width="0.1723%" height="15" fill="rgb(215,117,9)" fg:x="11418" fg:w="194"/><text x="10.4330%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,602 instructions, 1.42%)</title><rect x="9.9678%" y="181" width="1.4227%" height="15" fill="rgb(238,223,9)" fg:x="11224" fg:w="1602"/><text x="10.2607%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="12.5743%" y="165" width="0.0728%" height="15" fill="rgb(238,101,9)" fg:x="14159" fg:w="82"/><text x="12.8672%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.6471%" y="165" width="0.1776%" height="15" fill="rgb(222,220,54)" fg:x="14241" fg:w="200"/><text x="12.9401%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="12.8247%" y="165" width="0.1776%" height="15" fill="rgb(242,206,2)" fg:x="14441" fg:w="200"/><text x="13.1177%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.0023%" y="165" width="0.1989%" height="15" fill="rgb(235,63,13)" fg:x="14641" fg:w="224"/><text x="13.2953%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.2012%" y="165" width="0.1989%" height="15" fill="rgb(228,225,37)" fg:x="14865" fg:w="224"/><text x="13.4942%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="13.4002%" y="165" width="0.0728%" height="15" fill="rgb(224,103,10)" fg:x="15089" fg:w="82"/><text x="13.6931%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.4730%" y="165" width="0.1776%" height="15" fill="rgb(241,38,47)" fg:x="15171" fg:w="200"/><text x="13.7660%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="13.6506%" y="165" width="0.1776%" height="15" fill="rgb(232,15,19)" fg:x="15371" fg:w="200"/><text x="13.9436%" y="175.50"></text></g><g><title>memcpy (140 instructions, 0.12%)</title><rect x="13.8282%" y="165" width="0.1243%" height="15" fill="rgb(242,46,42)" fg:x="15571" fg:w="140"/><text x="14.1212%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="13.9526%" y="165" width="0.1989%" height="15" fill="rgb(208,39,28)" fg:x="15711" fg:w="224"/><text x="14.2455%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="14.1515%" y="165" width="0.1989%" height="15" fill="rgb(242,184,37)" fg:x="15935" fg:w="224"/><text x="14.4445%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="14.3504%" y="165" width="0.1323%" height="15" fill="rgb(218,121,48)" fg:x="16159" fg:w="149"/><text x="14.6434%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.4827%" y="165" width="0.1279%" height="15" fill="rgb(227,62,3)" fg:x="16308" fg:w="144"/><text x="14.7757%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="14.6106%" y="165" width="0.1279%" height="15" fill="rgb(241,186,40)" fg:x="16452" fg:w="144"/><text x="14.9036%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="14.7385%" y="165" width="0.0746%" height="15" fill="rgb(206,79,27)" fg:x="16596" fg:w="84"/><text x="15.0315%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="16.9880%" y="165" width="0.2522%" height="15" fill="rgb(215,21,5)" fg:x="19129" fg:w="284"/><text x="17.2810%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="17.2402%" y="165" width="0.2522%" height="15" fill="rgb(234,222,1)" fg:x="19413" fg:w="284"/><text x="17.5332%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.5981%" y="165" width="0.2789%" height="15" fill="rgb(245,42,49)" fg:x="20942" fg:w="314"/><text x="18.8911%" y="175.50"></text></g><g><title>memmove (314 instructions, 0.28%)</title><rect x="18.8769%" y="165" width="0.2789%" height="15" fill="rgb(251,115,29)" fg:x="21256" fg:w="314"/><text x="19.1699%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.0741%" y="165" width="0.1190%" height="15" fill="rgb(231,91,27)" fg:x="22604" fg:w="134"/><text x="20.3670%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="20.1931%" y="165" width="0.1190%" height="15" fill="rgb(208,218,38)" fg:x="22738" fg:w="134"/><text x="20.4860%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.6309%" y="165" width="0.1723%" height="15" fill="rgb(218,78,29)" fg:x="24357" fg:w="194"/><text x="21.9238%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="21.8031%" y="165" width="0.1723%" height="15" fill="rgb(240,175,10)" fg:x="24551" fg:w="194"/><text x="22.0961%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.1868%" y="165" width="0.1190%" height="15" fill="rgb(221,166,19)" fg:x="26109" fg:w="134"/><text x="23.4797%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="23.3058%" y="165" width="0.1190%" height="15" fill="rgb(221,103,47)" fg:x="26243" fg:w="134"/><text x="23.5987%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="24.4763%" y="165" width="0.0728%" height="15" fill="rgb(239,208,3)" fg:x="27561" fg:w="82"/><text x="24.7692%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.5491%" y="165" width="0.1510%" height="15" fill="rgb(208,226,30)" fg:x="27643" fg:w="170"/><text x="24.8420%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="24.7001%" y="165" width="0.1510%" height="15" fill="rgb(225,11,37)" fg:x="27813" fg:w="170"/><text x="24.9930%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.8510%" y="165" width="0.1279%" height="15" fill="rgb(244,98,44)" fg:x="27983" fg:w="144"/><text x="25.1440%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="24.9789%" y="165" width="0.1279%" height="15" fill="rgb(225,208,51)" fg:x="28127" fg:w="144"/><text x="25.2719%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.4806%" y="165" width="0.1279%" height="15" fill="rgb(219,221,38)" fg:x="29818" fg:w="144"/><text x="26.7736%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="26.6085%" y="165" width="0.1279%" height="15" fill="rgb(221,197,34)" fg:x="29962" fg:w="144"/><text x="26.9015%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="27.9495%" y="165" width="0.1989%" height="15" fill="rgb(234,3,14)" fg:x="31472" fg:w="224"/><text x="28.2425%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="28.1485%" y="165" width="0.1989%" height="15" fill="rgb(234,157,6)" fg:x="31696" fg:w="224"/><text x="28.4414%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.5845%" y="165" width="0.1190%" height="15" fill="rgb(243,68,44)" fg:x="33313" fg:w="134"/><text x="29.8774%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="29.7035%" y="165" width="0.1190%" height="15" fill="rgb(254,118,33)" fg:x="33447" fg:w="134"/><text x="29.9964%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="31.0347%" y="165" width="0.0728%" height="15" fill="rgb(238,158,47)" fg:x="34946" fg:w="82"/><text x="31.3277%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.1075%" y="165" width="0.1510%" height="15" fill="rgb(241,165,53)" fg:x="35028" fg:w="170"/><text x="31.4005%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="31.2585%" y="165" width="0.1510%" height="15" fill="rgb(231,137,10)" fg:x="35198" fg:w="170"/><text x="31.5515%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.4095%" y="165" width="0.1190%" height="15" fill="rgb(215,189,20)" fg:x="35368" fg:w="134"/><text x="31.7024%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="31.5285%" y="165" width="0.1190%" height="15" fill="rgb(221,220,24)" fg:x="35502" fg:w="134"/><text x="31.8214%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.6475%" y="165" width="0.1456%" height="15" fill="rgb(225,23,54)" fg:x="35636" fg:w="164"/><text x="31.9404%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="31.7931%" y="165" width="0.1456%" height="15" fill="rgb(240,75,7)" fg:x="35800" fg:w="164"/><text x="32.0861%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="31.9388%" y="165" width="0.1838%" height="15" fill="rgb(206,73,14)" fg:x="35964" fg:w="207"/><text x="32.2317%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="33.9778%" y="165" width="0.3055%" height="15" fill="rgb(211,54,21)" fg:x="38260" fg:w="344"/><text x="34.2707%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="34.2833%" y="165" width="0.3055%" height="15" fill="rgb(214,2,29)" fg:x="38604" fg:w="344"/><text x="34.5762%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.5346%" y="165" width="0.2256%" height="15" fill="rgb(254,141,18)" fg:x="40013" fg:w="254"/><text x="35.8275%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="35.7601%" y="165" width="0.2256%" height="15" fill="rgb(244,164,0)" fg:x="40267" fg:w="254"/><text x="36.0531%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="37.1162%" y="165" width="0.0728%" height="15" fill="rgb(219,101,5)" fg:x="41794" fg:w="82"/><text x="37.4092%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.1891%" y="165" width="0.1776%" height="15" fill="rgb(234,207,36)" fg:x="41876" fg:w="200"/><text x="37.4820%" y="175.50"></text></g><g><title>memcpy (200 instructions, 0.18%)</title><rect x="37.3667%" y="165" width="0.1776%" height="15" fill="rgb(225,178,35)" fg:x="42076" fg:w="200"/><text x="37.6596%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.5443%" y="165" width="0.1989%" height="15" fill="rgb(242,86,2)" fg:x="42276" fg:w="224"/><text x="37.8373%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="37.7432%" y="165" width="0.1989%" height="15" fill="rgb(238,80,17)" fg:x="42500" fg:w="224"/><text x="38.0362%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="37.9422%" y="165" width="0.1723%" height="15" fill="rgb(223,115,47)" fg:x="42724" fg:w="194"/><text x="38.2351%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="38.1144%" y="165" width="0.1723%" height="15" fill="rgb(218,16,35)" fg:x="42918" fg:w="194"/><text x="38.4074%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="38.2867%" y="165" width="0.1190%" height="15" fill="rgb(219,28,22)" fg:x="43112" fg:w="134"/><text x="38.5797%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="39.9359%" y="165" width="0.1723%" height="15" fill="rgb(238,72,17)" fg:x="44969" fg:w="194"/><text x="40.2288%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="40.1082%" y="165" width="0.1723%" height="15" fill="rgb(234,66,35)" fg:x="45163" fg:w="194"/><text x="40.4011%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.1978%" y="165" width="0.1989%" height="15" fill="rgb(243,227,6)" fg:x="46390" fg:w="224"/><text x="41.4908%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="41.3968%" y="165" width="0.1989%" height="15" fill="rgb(253,84,10)" fg:x="46614" fg:w="224"/><text x="41.6897%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (35,226 instructions, 31.28%)</title><rect x="11.3905%" y="181" width="31.2834%" height="15" fill="rgb(235,164,30)" fg:x="12826" fg:w="35226"/><text x="11.6834%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,333 instructions, 1.18%)</title><rect x="42.6738%" y="181" width="1.1838%" height="15" fill="rgb(251,20,0)" fg:x="48052" fg:w="1333"/><text x="42.9668%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="44.7217%" y="165" width="0.0728%" height="15" fill="rgb(253,5,0)" fg:x="50358" fg:w="82"/><text x="45.0147%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.7945%" y="165" width="0.1510%" height="15" fill="rgb(251,198,52)" fg:x="50440" fg:w="170"/><text x="45.0875%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="44.9455%" y="165" width="0.1510%" height="15" fill="rgb(211,78,50)" fg:x="50610" fg:w="170"/><text x="45.2385%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.0965%" y="165" width="0.1190%" height="15" fill="rgb(229,48,19)" fg:x="50780" fg:w="134"/><text x="45.3895%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="45.2155%" y="165" width="0.1190%" height="15" fill="rgb(234,193,6)" fg:x="50914" fg:w="134"/><text x="45.5085%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="45.3345%" y="165" width="0.0728%" height="15" fill="rgb(218,82,40)" fg:x="51048" fg:w="82"/><text x="45.6275%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.4073%" y="165" width="0.2043%" height="15" fill="rgb(247,211,3)" fg:x="51130" fg:w="230"/><text x="45.7003%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="45.6116%" y="165" width="0.2043%" height="15" fill="rgb(254,139,25)" fg:x="51360" fg:w="230"/><text x="45.9045%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="45.8158%" y="165" width="0.1377%" height="15" fill="rgb(205,156,35)" fg:x="51590" fg:w="155"/><text x="46.1088%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="45.9535%" y="165" width="0.2522%" height="15" fill="rgb(205,224,39)" fg:x="51745" fg:w="284"/><text x="46.2465%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="46.2057%" y="165" width="0.2522%" height="15" fill="rgb(230,24,33)" fg:x="52029" fg:w="284"/><text x="46.4987%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="46.4579%" y="165" width="0.1590%" height="15" fill="rgb(220,170,25)" fg:x="52313" fg:w="179"/><text x="46.7509%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.4028%" y="165" width="0.1279%" height="15" fill="rgb(208,109,51)" fg:x="54503" fg:w="144"/><text x="48.6958%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="48.5307%" y="165" width="0.1279%" height="15" fill="rgb(241,73,12)" fg:x="54647" fg:w="144"/><text x="48.8236%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.4969%" y="165" width="0.1279%" height="15" fill="rgb(211,106,26)" fg:x="55735" fg:w="144"/><text x="49.7899%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="49.6248%" y="165" width="0.1279%" height="15" fill="rgb(205,203,20)" fg:x="55879" fg:w="144"/><text x="49.9178%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.0448%" y="165" width="0.2256%" height="15" fill="rgb(239,112,4)" fg:x="57478" fg:w="254"/><text x="51.3378%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="51.2704%" y="165" width="0.2256%" height="15" fill="rgb(206,164,43)" fg:x="57732" fg:w="254"/><text x="51.5634%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="52.7606%" y="165" width="0.0728%" height="15" fill="rgb(247,208,17)" fg:x="59410" fg:w="82"/><text x="53.0536%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.8334%" y="165" width="0.1510%" height="15" fill="rgb(249,211,26)" fg:x="59492" fg:w="170"/><text x="53.1264%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="52.9844%" y="165" width="0.1510%" height="15" fill="rgb(208,16,24)" fg:x="59662" fg:w="170"/><text x="53.2773%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.1354%" y="165" width="0.1279%" height="15" fill="rgb(219,110,35)" fg:x="59832" fg:w="144"/><text x="53.4283%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="53.2632%" y="165" width="0.1279%" height="15" fill="rgb(209,138,16)" fg:x="59976" fg:w="144"/><text x="53.5562%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.3911%" y="165" width="0.2522%" height="15" fill="rgb(242,104,4)" fg:x="60120" fg:w="284"/><text x="53.6841%" y="175.50"></text></g><g><title>memmove (284 instructions, 0.25%)</title><rect x="53.6433%" y="165" width="0.2522%" height="15" fill="rgb(244,153,35)" fg:x="60404" fg:w="284"/><text x="53.9363%" y="175.50"></text></g><g><title>memmove (179 instructions, 0.16%)</title><rect x="53.8955%" y="165" width="0.1590%" height="15" fill="rgb(207,168,5)" fg:x="60688" fg:w="179"/><text x="54.1885%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="55.4523%" y="165" width="0.0728%" height="15" fill="rgb(227,134,17)" fg:x="62441" fg:w="82"/><text x="55.7453%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.5252%" y="165" width="0.1510%" height="15" fill="rgb(211,49,52)" fg:x="62523" fg:w="170"/><text x="55.8181%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="55.6761%" y="165" width="0.1510%" height="15" fill="rgb(225,13,3)" fg:x="62693" fg:w="170"/><text x="55.9691%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="55.8271%" y="165" width="0.1723%" height="15" fill="rgb(214,207,41)" fg:x="62863" fg:w="194"/><text x="56.1201%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="55.9994%" y="165" width="0.1723%" height="15" fill="rgb(248,37,54)" fg:x="63057" fg:w="194"/><text x="56.2924%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="57.7329%" y="165" width="0.0728%" height="15" fill="rgb(226,97,37)" fg:x="65009" fg:w="82"/><text x="58.0259%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.8057%" y="165" width="0.1510%" height="15" fill="rgb(246,126,41)" fg:x="65091" fg:w="170"/><text x="58.0987%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="57.9567%" y="165" width="0.1510%" height="15" fill="rgb(231,168,29)" fg:x="65261" fg:w="170"/><text x="58.2497%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.1077%" y="165" width="0.1456%" height="15" fill="rgb(244,148,22)" fg:x="65431" fg:w="164"/><text x="58.4007%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="58.2533%" y="165" width="0.1456%" height="15" fill="rgb(250,172,25)" fg:x="65595" fg:w="164"/><text x="58.5463%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.3990%" y="165" width="0.1279%" height="15" fill="rgb(225,72,22)" fg:x="65759" fg:w="144"/><text x="58.6919%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="58.5269%" y="165" width="0.1279%" height="15" fill="rgb(243,205,24)" fg:x="65903" fg:w="144"/><text x="58.8198%" y="175.50"></text></g><g><title>memmove (84 instructions, 0.07%)</title><rect x="58.6547%" y="165" width="0.0746%" height="15" fill="rgb(207,212,52)" fg:x="66047" fg:w="84"/><text x="58.9477%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.2702%" y="165" width="0.2256%" height="15" fill="rgb(234,115,30)" fg:x="67866" fg:w="254"/><text x="60.5631%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="60.4957%" y="165" width="0.2256%" height="15" fill="rgb(245,50,31)" fg:x="68120" fg:w="254"/><text x="60.7887%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.5321%" y="165" width="0.1190%" height="15" fill="rgb(251,10,25)" fg:x="69287" fg:w="134"/><text x="61.8251%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="61.6511%" y="165" width="0.1190%" height="15" fill="rgb(222,139,1)" fg:x="69421" fg:w="134"/><text x="61.9441%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="62.7950%" y="165" width="0.0728%" height="15" fill="rgb(210,212,53)" fg:x="70709" fg:w="82"/><text x="63.0879%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="62.8678%" y="165" width="0.2043%" height="15" fill="rgb(208,47,15)" fg:x="70791" fg:w="230"/><text x="63.1607%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="63.0720%" y="165" width="0.2043%" height="15" fill="rgb(247,114,39)" fg:x="71021" fg:w="230"/><text x="63.3650%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.2763%" y="165" width="0.2256%" height="15" fill="rgb(226,165,49)" fg:x="71251" fg:w="254"/><text x="63.5693%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="63.5019%" y="165" width="0.2256%" height="15" fill="rgb(252,146,24)" fg:x="71505" fg:w="254"/><text x="63.7948%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="63.7274%" y="165" width="0.1456%" height="15" fill="rgb(254,33,49)" fg:x="71759" fg:w="164"/><text x="64.0204%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="65.1102%" y="165" width="0.0728%" height="15" fill="rgb(231,98,49)" fg:x="73316" fg:w="82"/><text x="65.4031%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.1830%" y="165" width="0.2043%" height="15" fill="rgb(235,222,24)" fg:x="73398" fg:w="230"/><text x="65.4760%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="65.3872%" y="165" width="0.2043%" height="15" fill="rgb(216,17,29)" fg:x="73628" fg:w="230"/><text x="65.6802%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.5915%" y="165" width="0.1279%" height="15" fill="rgb(212,73,43)" fg:x="73858" fg:w="144"/><text x="65.8845%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="65.7194%" y="165" width="0.1279%" height="15" fill="rgb(229,215,9)" fg:x="74002" fg:w="144"/><text x="66.0124%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.8473%" y="165" width="0.1456%" height="15" fill="rgb(232,220,32)" fg:x="74146" fg:w="164"/><text x="66.1402%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="65.9929%" y="165" width="0.1456%" height="15" fill="rgb(254,61,7)" fg:x="74310" fg:w="164"/><text x="66.2859%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="66.1386%" y="165" width="0.1838%" height="15" fill="rgb(233,83,14)" fg:x="74474" fg:w="207"/><text x="66.4315%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.5764%" y="165" width="0.2256%" height="15" fill="rgb(252,193,23)" fg:x="76093" fg:w="254"/><text x="67.8693%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="67.8019%" y="165" width="0.2256%" height="15" fill="rgb(211,24,3)" fg:x="76347" fg:w="254"/><text x="68.0949%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.7602%" y="165" width="0.2256%" height="15" fill="rgb(246,195,21)" fg:x="77426" fg:w="254"/><text x="69.0531%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="68.9857%" y="165" width="0.2256%" height="15" fill="rgb(221,179,44)" fg:x="77680" fg:w="254"/><text x="69.2787%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.2095%" y="165" width="0.1279%" height="15" fill="rgb(234,52,19)" fg:x="79058" fg:w="144"/><text x="70.5025%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="70.3374%" y="165" width="0.1279%" height="15" fill="rgb(232,200,9)" fg:x="79202" fg:w="144"/><text x="70.6303%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.6233%" y="165" width="0.2256%" height="15" fill="rgb(233,83,7)" fg:x="80650" fg:w="254"/><text x="71.9163%" y="175.50"></text></g><g><title>memmove (254 instructions, 0.23%)</title><rect x="71.8489%" y="165" width="0.2256%" height="15" fill="rgb(227,126,29)" fg:x="80904" fg:w="254"/><text x="72.1419%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="72.9652%" y="165" width="0.1190%" height="15" fill="rgb(218,24,2)" fg:x="82161" fg:w="134"/><text x="73.2582%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="73.0842%" y="165" width="0.1190%" height="15" fill="rgb(215,85,51)" fg:x="82295" fg:w="134"/><text x="73.3772%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.4421%" y="165" width="0.3321%" height="15" fill="rgb(249,123,13)" fg:x="83824" fg:w="374"/><text x="74.7350%" y="175.50"></text></g><g><title>memmove (374 instructions, 0.33%)</title><rect x="74.7742%" y="165" width="0.3321%" height="15" fill="rgb(226,50,52)" fg:x="84198" fg:w="374"/><text x="75.0672%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.2919%" y="165" width="0.1190%" height="15" fill="rgb(220,14,7)" fg:x="85907" fg:w="134"/><text x="76.5849%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="76.4109%" y="165" width="0.1190%" height="15" fill="rgb(213,83,17)" fg:x="86041" fg:w="134"/><text x="76.7039%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (38,215 instructions, 33.94%)</title><rect x="43.8576%" y="181" width="33.9378%" height="15" fill="rgb(225,15,20)" fg:x="49385" fg:w="38215"/><text x="44.1506%" y="191.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;..</text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.1409%" y="165" width="0.1190%" height="15" fill="rgb(223,61,2)" fg:x="89115" fg:w="134"/><text x="79.4338%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="79.2599%" y="165" width="0.1190%" height="15" fill="rgb(247,152,22)" fg:x="89249" fg:w="134"/><text x="79.5528%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.5378%" y="165" width="0.3055%" height="15" fill="rgb(212,159,36)" fg:x="90688" fg:w="344"/><text x="80.8308%" y="175.50"></text></g><g><title>memmove (344 instructions, 0.31%)</title><rect x="80.8433%" y="165" width="0.3055%" height="15" fill="rgb(231,224,23)" fg:x="91032" fg:w="344"/><text x="81.1363%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.2536%" y="165" width="0.1723%" height="15" fill="rgb(211,27,39)" fg:x="92620" fg:w="194"/><text x="82.5465%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="82.4259%" y="165" width="0.1723%" height="15" fill="rgb(238,74,41)" fg:x="92814" fg:w="194"/><text x="82.7188%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.4099%" y="165" width="0.1279%" height="15" fill="rgb(254,211,3)" fg:x="93922" fg:w="144"/><text x="83.7028%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.13%)</title><rect x="83.5377%" y="165" width="0.1279%" height="15" fill="rgb(238,44,2)" fg:x="94066" fg:w="144"/><text x="83.8307%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.6372%" y="165" width="0.1456%" height="15" fill="rgb(213,216,20)" fg:x="95304" fg:w="164"/><text x="84.9301%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="84.7828%" y="165" width="0.1456%" height="15" fill="rgb(232,68,32)" fg:x="95468" fg:w="164"/><text x="85.0758%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="85.8734%" y="165" width="0.1723%" height="15" fill="rgb(243,47,2)" fg:x="96696" fg:w="194"/><text x="86.1663%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="86.0457%" y="165" width="0.1723%" height="15" fill="rgb(236,201,33)" fg:x="96890" fg:w="194"/><text x="86.3386%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.2694%" y="165" width="0.1989%" height="15" fill="rgb(248,56,2)" fg:x="98268" fg:w="224"/><text x="87.5624%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="87.4684%" y="165" width="0.1989%" height="15" fill="rgb(249,27,40)" fg:x="98492" fg:w="224"/><text x="87.7613%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.5056%" y="165" width="0.1989%" height="15" fill="rgb(230,30,32)" fg:x="99660" fg:w="224"/><text x="88.7986%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="88.7046%" y="165" width="0.1989%" height="15" fill="rgb(229,53,14)" fg:x="99884" fg:w="224"/><text x="88.9975%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.0633%" y="165" width="0.1190%" height="15" fill="rgb(233,84,4)" fg:x="101414" fg:w="134"/><text x="90.3563%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="90.1823%" y="165" width="0.1190%" height="15" fill="rgb(248,87,50)" fg:x="101548" fg:w="134"/><text x="90.4753%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.1930%" y="165" width="0.0728%" height="15" fill="rgb(243,135,1)" fg:x="102686" fg:w="82"/><text x="91.4859%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.2658%" y="165" width="0.1510%" height="15" fill="rgb(230,59,15)" fg:x="102768" fg:w="170"/><text x="91.5587%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.4167%" y="165" width="0.1510%" height="15" fill="rgb(247,135,52)" fg:x="102938" fg:w="170"/><text x="91.7097%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="91.5677%" y="165" width="0.0728%" height="15" fill="rgb(216,42,46)" fg:x="103108" fg:w="82"/><text x="91.8607%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.6405%" y="165" width="0.1510%" height="15" fill="rgb(221,145,19)" fg:x="103190" fg:w="170"/><text x="91.9335%" y="175.50"></text></g><g><title>memcpy (170 instructions, 0.15%)</title><rect x="91.7915%" y="165" width="0.1510%" height="15" fill="rgb(245,176,46)" fg:x="103360" fg:w="170"/><text x="92.0845%" y="175.50"></text></g><g><title>memcpy (125 instructions, 0.11%)</title><rect x="91.9425%" y="165" width="0.1110%" height="15" fill="rgb(254,137,51)" fg:x="103530" fg:w="125"/><text x="92.2355%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.0535%" y="165" width="0.1190%" height="15" fill="rgb(228,220,3)" fg:x="103655" fg:w="134"/><text x="92.3465%" y="175.50"></text></g><g><title>memmove (134 instructions, 0.12%)</title><rect x="92.1725%" y="165" width="0.1190%" height="15" fill="rgb(219,126,31)" fg:x="103789" fg:w="134"/><text x="92.4655%" y="175.50"></text></g><g><title>memmove (147 instructions, 0.13%)</title><rect x="92.2915%" y="165" width="0.1305%" height="15" fill="rgb(221,171,2)" fg:x="103923" fg:w="147"/><text x="92.5845%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.07%)</title><rect x="92.4220%" y="165" width="0.0728%" height="15" fill="rgb(233,69,19)" fg:x="104070" fg:w="82"/><text x="92.7150%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.4949%" y="165" width="0.2043%" height="15" fill="rgb(208,13,1)" fg:x="104152" fg:w="230"/><text x="92.7878%" y="175.50"></text></g><g><title>memcpy (230 instructions, 0.20%)</title><rect x="92.6991%" y="165" width="0.2043%" height="15" fill="rgb(224,48,21)" fg:x="104382" fg:w="230"/><text x="92.9921%" y="175.50"></text></g><g><title>memcpy (155 instructions, 0.14%)</title><rect x="92.9034%" y="165" width="0.1377%" height="15" fill="rgb(228,183,44)" fg:x="104612" fg:w="155"/><text x="93.1964%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.0410%" y="165" width="0.1456%" height="15" fill="rgb(247,14,38)" fg:x="104767" fg:w="164"/><text x="93.3340%" y="175.50"></text></g><g><title>memmove (164 instructions, 0.15%)</title><rect x="93.1867%" y="165" width="0.1456%" height="15" fill="rgb(243,44,0)" fg:x="104931" fg:w="164"/><text x="93.4797%" y="175.50"></text></g><g><title>memmove (207 instructions, 0.18%)</title><rect x="93.3323%" y="165" width="0.1838%" height="15" fill="rgb(236,195,1)" fg:x="105095" fg:w="207"/><text x="93.6253%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.5162%" y="165" width="0.1989%" height="15" fill="rgb(238,75,38)" fg:x="105302" fg:w="224"/><text x="93.8091%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.20%)</title><rect x="93.7151%" y="165" width="0.1989%" height="15" fill="rgb(219,205,2)" fg:x="105526" fg:w="224"/><text x="94.0081%" y="175.50"></text></g><g><title>memmove (149 instructions, 0.13%)</title><rect x="93.9140%" y="165" width="0.1323%" height="15" fill="rgb(238,58,2)" fg:x="105750" fg:w="149"/><text x="94.2070%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.4521%" y="165" width="0.1723%" height="15" fill="rgb(227,7,1)" fg:x="108608" fg:w="194"/><text x="96.7451%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.17%)</title><rect x="96.6244%" y="165" width="0.1723%" height="15" fill="rgb(214,186,16)" fg:x="108802" fg:w="194"/><text x="96.9174%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,401 instructions, 19.89%)</title><rect x="77.7954%" y="181" width="19.8938%" height="15" fill="rgb(247,227,36)" fg:x="87600" fg:w="22401"/><text x="78.0884%" y="191.50">alloc::collections::btree:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="97.6937%" y="133" width="0.1119%" height="15" fill="rgb(225,110,35)" fg:x="110006" fg:w="126"/><text x="97.9866%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.14%)</title><rect x="97.6937%" y="149" width="0.1359%" height="15" fill="rgb(220,165,26)" fg:x="110006" fg:w="153"/><text x="97.9866%" y="159.50"></text></g><g><title>memset (136 instructions, 0.12%)</title><rect x="97.8295%" y="149" width="0.1208%" height="15" fill="rgb(221,125,22)" fg:x="110159" fg:w="136"/><text x="98.1225%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (454 instructions, 0.40%)</title><rect x="97.6892%" y="165" width="0.4032%" height="15" fill="rgb(240,94,3)" fg:x="110001" fg:w="454"/><text x="97.9822%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.03%)</title><rect x="98.0924%" y="149" width="0.0284%" height="15" fill="rgb(247,35,42)" fg:x="110455" fg:w="32"/><text x="98.3854%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.10%)</title><rect x="98.1208%" y="101" width="0.1048%" height="15" fill="rgb(226,107,13)" fg:x="110487" fg:w="118"/><text x="98.4138%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.13%)</title><rect x="98.1208%" y="117" width="0.1350%" height="15" fill="rgb(246,183,2)" fg:x="110487" fg:w="152"/><text x="98.4138%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (217 instructions, 0.19%)</title><rect x="98.1208%" y="133" width="0.1927%" height="15" fill="rgb(223,3,41)" fg:x="110487" fg:w="217"/><text x="98.4138%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (401 instructions, 0.36%)</title><rect x="98.1208%" y="149" width="0.3561%" height="15" fill="rgb(214,199,2)" fg:x="110487" fg:w="401"/><text x="98.4138%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.03%)</title><rect x="98.4769%" y="149" width="0.0266%" height="15" fill="rgb(234,213,16)" fg:x="110888" fg:w="30"/><text x="98.7699%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (536 instructions, 0.48%)</title><rect x="98.0924%" y="165" width="0.4760%" height="15" fill="rgb(210,8,21)" fg:x="110455" fg:w="536"/><text x="98.3854%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.05%)</title><rect x="98.5729%" y="165" width="0.0488%" height="15" fill="rgb(224,93,3)" fg:x="110996" fg:w="55"/><text x="98.8658%" y="175.50"></text></g><g><title>candid::utils::write_args (1,114 instructions, 0.99%)</title><rect x="97.6892%" y="181" width="0.9893%" height="15" fill="rgb(233,145,13)" fg:x="110001" fg:w="1114"/><text x="97.9822%" y="191.50"></text></g><g><title>btreemap::batch_put_6_::{{closure}} (112,120 instructions, 99.57%)</title><rect x="0.1474%" y="197" width="99.5711%" height="15" fill="rgb(226,58,8)" fg:x="166" fg:w="112120"/><text x="0.4404%" y="207.50">btreemap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.7185%" y="197" width="0.0107%" height="15" fill="rgb(245,77,8)" fg:x="112286" fg:w="12"/><text x="100.0114%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.07%)</title><rect x="99.7291%" y="197" width="0.0719%" height="15" fill="rgb(231,131,26)" fg:x="112298" fg:w="81"/><text x="100.0221%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.11%)</title><rect x="99.8011%" y="197" width="0.1119%" height="15" fill="rgb(215,212,28)" fg:x="112379" fg:w="126"/><text x="100.0940%" y="207.50"></text></g><g><title>all (112,603 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,75,12)" fg:x="0" fg:w="112603"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (112,603 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,119,2)" fg:x="0" fg:w="112603"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>