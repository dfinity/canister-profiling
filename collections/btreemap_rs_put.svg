<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="95118"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0252%" height="15" fill="rgb(254,154,30)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="0.0252%" y="197" width="0.0862%" height="15" fill="rgb(206,187,15)" fg:x="24" fg:w="82"/><text x="0.3182%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="0.1114%" y="197" width="0.0862%" height="15" fill="rgb(207,226,26)" fg:x="106" fg:w="82"/><text x="0.4044%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="0.1976%" y="165" width="0.0862%" height="15" fill="rgb(225,208,31)" fg:x="188" fg:w="82"/><text x="0.4906%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.09%)</title><rect x="0.2839%" y="149" width="0.0862%" height="15" fill="rgb(238,127,20)" fg:x="270" fg:w="82"/><text x="0.5768%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.47%)</title><rect x="0.3701%" y="149" width="0.4657%" height="15" fill="rgb(226,161,36)" fg:x="352" fg:w="443"/><text x="0.6630%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="0.8358%" y="149" width="0.0999%" height="15" fill="rgb(205,161,19)" fg:x="795" fg:w="95"/><text x="1.1288%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9357%" y="149" width="0.0631%" height="15" fill="rgb(231,117,0)" fg:x="890" fg:w="60"/><text x="1.2286%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="0.9988%" y="149" width="0.0631%" height="15" fill="rgb(229,102,51)" fg:x="950" fg:w="60"/><text x="1.2917%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.0618%" y="149" width="0.0631%" height="15" fill="rgb(247,31,3)" fg:x="1010" fg:w="60"/><text x="1.3548%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.06%)</title><rect x="1.1249%" y="149" width="0.0631%" height="15" fill="rgb(216,105,1)" fg:x="1070" fg:w="60"/><text x="1.4179%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.09%)</title><rect x="1.1880%" y="149" width="0.0862%" height="15" fill="rgb(241,180,23)" fg:x="1130" fg:w="82"/><text x="1.4810%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="1.2742%" y="149" width="0.0736%" height="15" fill="rgb(246,219,25)" fg:x="1212" fg:w="70"/><text x="1.5672%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.47%)</title><rect x="1.3478%" y="149" width="0.4657%" height="15" fill="rgb(214,147,29)" fg:x="1282" fg:w="443"/><text x="1.6408%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="1.8135%" y="149" width="0.0200%" height="15" fill="rgb(249,125,24)" fg:x="1725" fg:w="19"/><text x="2.1065%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="1.8335%" y="133" width="0.0862%" height="15" fill="rgb(248,44,5)" fg:x="1744" fg:w="82"/><text x="2.1265%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="1.9197%" y="101" width="0.0704%" height="15" fill="rgb(232,165,18)" fg:x="1826" fg:w="67"/><text x="2.2127%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="1.9197%" y="117" width="0.1009%" height="15" fill="rgb(240,168,41)" fg:x="1826" fg:w="96"/><text x="2.2127%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.0206%" y="69" width="0.0116%" height="15" fill="rgb(227,184,40)" fg:x="1922" fg:w="11"/><text x="2.3136%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.0322%" y="53" width="0.0368%" height="15" fill="rgb(216,171,24)" fg:x="1933" fg:w="35"/><text x="2.3252%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="2.0322%" y="69" width="0.0673%" height="15" fill="rgb(219,68,19)" fg:x="1933" fg:w="64"/><text x="2.3252%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="2.0206%" y="85" width="0.1514%" height="15" fill="rgb(218,186,1)" fg:x="1922" fg:w="144"/><text x="2.3136%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="2.0206%" y="101" width="0.2197%" height="15" fill="rgb(243,183,23)" fg:x="1922" fg:w="209"/><text x="2.3136%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="2.0206%" y="117" width="0.2302%" height="15" fill="rgb(241,207,17)" fg:x="1922" fg:w="219"/><text x="2.3136%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.48%)</title><rect x="1.9197%" y="133" width="0.4805%" height="15" fill="rgb(229,123,23)" fg:x="1826" fg:w="457"/><text x="2.2127%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.71%)</title><rect x="1.8335%" y="149" width="0.7117%" height="15" fill="rgb(207,7,13)" fg:x="1744" fg:w="677"/><text x="2.1265%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="2.5453%" y="149" width="0.0999%" height="15" fill="rgb(229,203,10)" fg:x="2421" fg:w="95"/><text x="2.8382%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="2.6451%" y="149" width="0.0631%" height="15" fill="rgb(217,217,17)" fg:x="2516" fg:w="60"/><text x="2.9381%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="2.7082%" y="149" width="0.0799%" height="15" fill="rgb(233,6,38)" fg:x="2576" fg:w="76"/><text x="3.0012%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.07%)</title><rect x="2.7881%" y="149" width="0.0736%" height="15" fill="rgb(211,90,44)" fg:x="2652" fg:w="70"/><text x="3.0811%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.47%)</title><rect x="2.8617%" y="133" width="0.4657%" height="15" fill="rgb(220,98,7)" fg:x="2722" fg:w="443"/><text x="3.1547%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.3274%" y="133" width="0.0200%" height="15" fill="rgb(231,160,22)" fg:x="3165" fg:w="19"/><text x="3.6204%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="3.3474%" y="117" width="0.0862%" height="15" fill="rgb(227,43,11)" fg:x="3184" fg:w="82"/><text x="3.6404%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.07%)</title><rect x="3.4336%" y="85" width="0.0704%" height="15" fill="rgb(225,206,32)" fg:x="3266" fg:w="67"/><text x="3.7266%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.10%)</title><rect x="3.4336%" y="101" width="0.1009%" height="15" fill="rgb(224,73,51)" fg:x="3266" fg:w="96"/><text x="3.7266%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.5346%" y="53" width="0.0116%" height="15" fill="rgb(231,142,29)" fg:x="3362" fg:w="11"/><text x="3.8275%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.5461%" y="37" width="0.0368%" height="15" fill="rgb(235,161,22)" fg:x="3373" fg:w="35"/><text x="3.8391%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="3.5461%" y="53" width="0.0673%" height="15" fill="rgb(226,156,6)" fg:x="3373" fg:w="64"/><text x="3.8391%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.15%)</title><rect x="3.5346%" y="69" width="0.1514%" height="15" fill="rgb(228,10,29)" fg:x="3362" fg:w="144"/><text x="3.8275%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.22%)</title><rect x="3.5346%" y="85" width="0.2197%" height="15" fill="rgb(229,91,26)" fg:x="3362" fg:w="209"/><text x="3.8275%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.23%)</title><rect x="3.5346%" y="101" width="0.2302%" height="15" fill="rgb(243,140,10)" fg:x="3362" fg:w="219"/><text x="3.8275%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.48%)</title><rect x="3.4336%" y="117" width="0.4805%" height="15" fill="rgb(224,152,48)" fg:x="3266" fg:w="457"/><text x="3.7266%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.71%)</title><rect x="3.3474%" y="133" width="0.7117%" height="15" fill="rgb(236,218,4)" fg:x="3184" fg:w="677"/><text x="3.6404%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.10%)</title><rect x="4.0592%" y="133" width="0.0999%" height="15" fill="rgb(230,178,50)" fg:x="3861" fg:w="95"/><text x="4.3521%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="4.1590%" y="133" width="0.0631%" height="15" fill="rgb(248,124,35)" fg:x="3956" fg:w="60"/><text x="4.4520%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.09%)</title><rect x="4.2221%" y="117" width="0.0862%" height="15" fill="rgb(247,5,53)" fg:x="4016" fg:w="82"/><text x="4.5151%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.10%)</title><rect x="4.3083%" y="117" width="0.0999%" height="15" fill="rgb(216,191,54)" fg:x="4098" fg:w="95"/><text x="4.6013%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.4082%" y="117" width="0.0799%" height="15" fill="rgb(254,186,47)" fg:x="4193" fg:w="76"/><text x="4.7012%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.35%)</title><rect x="4.2221%" y="133" width="0.3469%" height="15" fill="rgb(247,151,30)" fg:x="4016" fg:w="330"/><text x="4.5151%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="4.5691%" y="133" width="0.0862%" height="15" fill="rgb(212,74,33)" fg:x="4346" fg:w="82"/><text x="4.8620%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 2.05%)</title><rect x="2.8617%" y="149" width="2.0522%" height="15" fill="rgb(208,82,11)" fg:x="2722" fg:w="1952"/><text x="3.1547%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.08%)</title><rect x="4.9139%" y="149" width="0.0799%" height="15" fill="rgb(233,14,43)" fg:x="4674" fg:w="76"/><text x="5.2069%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="4.9938%" y="149" width="0.0158%" height="15" fill="rgb(219,60,34)" fg:x="4750" fg:w="15"/><text x="5.2868%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.0096%" y="149" width="0.0158%" height="15" fill="rgb(222,100,15)" fg:x="4765" fg:w="15"/><text x="5.3025%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.0253%" y="149" width="0.0158%" height="15" fill="rgb(225,119,48)" fg:x="4780" fg:w="15"/><text x="5.3183%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.0474%" y="133" width="0.0862%" height="15" fill="rgb(212,188,12)" fg:x="4801" fg:w="82"/><text x="5.3404%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.19%)</title><rect x="5.0474%" y="149" width="0.1871%" height="15" fill="rgb(216,66,50)" fg:x="4801" fg:w="178"/><text x="5.3404%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.2346%" y="117" width="0.0862%" height="15" fill="rgb(246,76,17)" fg:x="4979" fg:w="82"/><text x="5.5275%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.14%)</title><rect x="5.2346%" y="133" width="0.1367%" height="15" fill="rgb(253,102,10)" fg:x="4979" fg:w="130"/><text x="5.5275%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.23%)</title><rect x="5.2346%" y="149" width="0.2260%" height="15" fill="rgb(235,130,49)" fg:x="4979" fg:w="215"/><text x="5.5275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.4606%" y="149" width="0.0862%" height="15" fill="rgb(241,27,31)" fg:x="5194" fg:w="82"/><text x="5.7536%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="5.5468%" y="149" width="0.0936%" height="15" fill="rgb(211,136,9)" fg:x="5276" fg:w="89"/><text x="5.8398%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.6404%" y="149" width="0.0862%" height="15" fill="rgb(253,170,51)" fg:x="5365" fg:w="82"/><text x="5.9333%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="5.7266%" y="149" width="0.0862%" height="15" fill="rgb(249,114,2)" fg:x="5447" fg:w="82"/><text x="6.0195%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="5.8170%" y="149" width="0.0936%" height="15" fill="rgb(221,123,32)" fg:x="5533" fg:w="89"/><text x="6.1100%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.41%)</title><rect x="5.9106%" y="149" width="0.4121%" height="15" fill="rgb(253,45,23)" fg:x="5622" fg:w="392"/><text x="6.2035%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.41%)</title><rect x="6.3227%" y="149" width="0.4121%" height="15" fill="rgb(238,220,1)" fg:x="6014" fg:w="392"/><text x="6.6156%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.53%)</title><rect x="6.7348%" y="149" width="0.5299%" height="15" fill="rgb(233,132,7)" fg:x="6406" fg:w="504"/><text x="7.0278%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 8.26%)</title><rect x="0.2839%" y="165" width="8.2571%" height="15" fill="rgb(205,14,34)" fg:x="270" fg:w="7854"/><text x="0.5768%" y="175.50">candid::d..</text></g><g><title>memcpy (344 instructions, 0.36%)</title><rect x="8.5410%" y="165" width="0.3617%" height="15" fill="rgb(223,220,6)" fg:x="8124" fg:w="344"/><text x="8.8339%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.02%)</title><rect x="8.9026%" y="165" width="0.0242%" height="15" fill="rgb(244,55,5)" fg:x="8468" fg:w="23"/><text x="9.1956%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="8.9268%" y="165" width="0.0862%" height="15" fill="rgb(236,30,30)" fg:x="8491" fg:w="82"/><text x="9.2198%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="9.0130%" y="149" width="0.0957%" height="15" fill="rgb(234,29,38)" fg:x="8573" fg:w="91"/><text x="9.3060%" y="159.50"></text></g><g><title>candid::types::internal::env_add (174 instructions, 0.18%)</title><rect x="9.0130%" y="165" width="0.1829%" height="15" fill="rgb(208,190,9)" fg:x="8573" fg:w="174"/><text x="9.3060%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="9.1959%" y="165" width="0.0957%" height="15" fill="rgb(253,84,15)" fg:x="8747" fg:w="91"/><text x="9.4889%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.08%)</title><rect x="9.2916%" y="149" width="0.0810%" height="15" fill="rgb(228,54,49)" fg:x="8838" fg:w="77"/><text x="9.5846%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.09%)</title><rect x="9.3726%" y="133" width="0.0936%" height="15" fill="rgb(239,2,44)" fg:x="8915" fg:w="89"/><text x="9.6655%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.14%)</title><rect x="9.3726%" y="149" width="0.1398%" height="15" fill="rgb(221,106,26)" fg:x="8915" fg:w="133"/><text x="9.6655%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 0.40%)</title><rect x="9.2916%" y="165" width="0.4016%" height="15" fill="rgb(250,215,14)" fg:x="8838" fg:w="382"/><text x="9.5846%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.05%)</title><rect x="9.6932%" y="149" width="0.0536%" height="15" fill="rgb(233,152,19)" fg:x="9220" fg:w="51"/><text x="9.9862%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="9.7468%" y="149" width="0.0137%" height="15" fill="rgb(219,58,54)" fg:x="9271" fg:w="13"/><text x="10.0398%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.21%)</title><rect x="9.6932%" y="165" width="0.2082%" height="15" fill="rgb(250,70,34)" fg:x="9220" fg:w="198"/><text x="9.9862%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.05%)</title><rect x="9.9014%" y="165" width="0.0515%" height="15" fill="rgb(215,106,42)" fg:x="9418" fg:w="49"/><text x="10.1944%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="9.9529%" y="149" width="0.0631%" height="15" fill="rgb(239,77,29)" fg:x="9467" fg:w="60"/><text x="10.2459%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="10.0622%" y="149" width="0.0631%" height="15" fill="rgb(232,68,30)" fg:x="9571" fg:w="60"/><text x="10.3552%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (208 instructions, 0.22%)</title><rect x="9.9529%" y="165" width="0.2187%" height="15" fill="rgb(226,201,16)" fg:x="9467" fg:w="208"/><text x="10.2459%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.04%)</title><rect x="10.1716%" y="149" width="0.0368%" height="15" fill="rgb(224,56,41)" fg:x="9675" fg:w="35"/><text x="10.4645%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="10.2084%" y="149" width="0.0357%" height="15" fill="rgb(254,157,37)" fg:x="9710" fg:w="34"/><text x="10.5013%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="10.2441%" y="149" width="0.0357%" height="15" fill="rgb(240,54,6)" fg:x="9744" fg:w="34"/><text x="10.5371%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.03%)</title><rect x="10.2799%" y="149" width="0.0347%" height="15" fill="rgb(244,87,44)" fg:x="9778" fg:w="33"/><text x="10.5728%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.26%)</title><rect x="10.1716%" y="165" width="0.2628%" height="15" fill="rgb(242,96,12)" fg:x="9675" fg:w="250"/><text x="10.4645%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.4344%" y="165" width="0.0137%" height="15" fill="rgb(245,9,48)" fg:x="9925" fg:w="13"/><text x="10.7274%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.4481%" y="165" width="0.0137%" height="15" fill="rgb(247,23,14)" fg:x="9938" fg:w="13"/><text x="10.7410%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.4617%" y="165" width="0.0137%" height="15" fill="rgb(211,9,1)" fg:x="9951" fg:w="13"/><text x="10.7547%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.05%)</title><rect x="10.4754%" y="165" width="0.0452%" height="15" fill="rgb(221,105,51)" fg:x="9964" fg:w="43"/><text x="10.7684%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="10.5280%" y="133" width="0.0284%" height="15" fill="rgb(235,101,7)" fg:x="10014" fg:w="27"/><text x="10.8209%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.12%)</title><rect x="10.5280%" y="149" width="0.1209%" height="15" fill="rgb(227,127,27)" fg:x="10014" fg:w="115"/><text x="10.8209%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="10.6489%" y="133" width="0.0631%" height="15" fill="rgb(218,37,2)" fg:x="10129" fg:w="60"/><text x="10.9418%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.11%)</title><rect x="10.6489%" y="149" width="0.1093%" height="15" fill="rgb(237,43,6)" fg:x="10129" fg:w="104"/><text x="10.9418%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.01%)</title><rect x="10.7582%" y="149" width="0.0137%" height="15" fill="rgb(253,29,20)" fg:x="10233" fg:w="13"/><text x="11.0512%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (306 instructions, 0.32%)</title><rect x="10.5206%" y="165" width="0.3217%" height="15" fill="rgb(220,86,16)" fg:x="10007" fg:w="306"/><text x="10.8136%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="10.8423%" y="165" width="0.0631%" height="15" fill="rgb(213,153,26)" fg:x="10313" fg:w="60"/><text x="11.1353%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,754 instructions, 12.36%)</title><rect x="0.1976%" y="181" width="12.3573%" height="15" fill="rgb(239,161,4)" fg:x="188" fg:w="11754"/><text x="0.4906%" y="191.50">ic_cdk::api::ca..</text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="12.5549%" y="165" width="0.2155%" height="15" fill="rgb(213,224,50)" fg:x="11942" fg:w="205"/><text x="12.8479%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="12.7705%" y="165" width="0.2155%" height="15" fill="rgb(205,23,27)" fg:x="12147" fg:w="205"/><text x="13.0634%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="14.1939%" y="165" width="0.2492%" height="15" fill="rgb(253,170,0)" fg:x="13501" fg:w="237"/><text x="14.4869%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="14.4431%" y="165" width="0.2492%" height="15" fill="rgb(247,213,9)" fg:x="13738" fg:w="237"/><text x="14.7361%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="15.5954%" y="165" width="0.1482%" height="15" fill="rgb(229,229,24)" fg:x="14834" fg:w="141"/><text x="15.8883%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="15.7436%" y="165" width="0.1482%" height="15" fill="rgb(237,41,13)" fg:x="14975" fg:w="141"/><text x="16.0366%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="16.9989%" y="165" width="0.0862%" height="15" fill="rgb(210,213,1)" fg:x="16169" fg:w="82"/><text x="17.2919%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="17.0851%" y="165" width="0.2607%" height="15" fill="rgb(243,85,49)" fg:x="16251" fg:w="248"/><text x="17.3781%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="17.3458%" y="165" width="0.2607%" height="15" fill="rgb(236,117,40)" fg:x="16499" fg:w="248"/><text x="17.6388%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="17.6066%" y="165" width="0.1819%" height="15" fill="rgb(212,78,14)" fg:x="16747" fg:w="173"/><text x="17.8995%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="17.7884%" y="165" width="0.1819%" height="15" fill="rgb(215,88,16)" fg:x="16920" fg:w="173"/><text x="18.0814%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.35%)</title><rect x="17.9703%" y="165" width="0.3501%" height="15" fill="rgb(254,199,17)" fg:x="17093" fg:w="333"/><text x="18.2633%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.35%)</title><rect x="18.3204%" y="165" width="0.3501%" height="15" fill="rgb(209,64,7)" fg:x="17426" fg:w="333"/><text x="18.6134%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="18.6705%" y="165" width="0.2155%" height="15" fill="rgb(238,10,15)" fg:x="17759" fg:w="205"/><text x="18.9635%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="20.0435%" y="165" width="0.2492%" height="15" fill="rgb(214,69,43)" fg:x="19065" fg:w="237"/><text x="20.3365%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="20.2927%" y="165" width="0.2492%" height="15" fill="rgb(242,81,43)" fg:x="19302" fg:w="237"/><text x="20.5857%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="21.2767%" y="165" width="0.1482%" height="15" fill="rgb(209,29,45)" fg:x="20238" fg:w="141"/><text x="21.5697%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="21.4250%" y="165" width="0.1482%" height="15" fill="rgb(233,28,24)" fg:x="20379" fg:w="141"/><text x="21.7179%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.6109%" y="165" width="0.1482%" height="15" fill="rgb(247,43,51)" fg:x="21507" fg:w="141"/><text x="22.9038%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="22.7591%" y="165" width="0.1482%" height="15" fill="rgb(217,186,39)" fg:x="21648" fg:w="141"/><text x="23.0521%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="23.8441%" y="165" width="0.0957%" height="15" fill="rgb(245,78,3)" fg:x="22680" fg:w="91"/><text x="24.1370%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="23.9397%" y="165" width="0.2607%" height="15" fill="rgb(208,227,24)" fg:x="22771" fg:w="248"/><text x="24.2327%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="24.2005%" y="165" width="0.2607%" height="15" fill="rgb(222,199,6)" fg:x="23019" fg:w="248"/><text x="24.4934%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="24.4612%" y="165" width="0.1482%" height="15" fill="rgb(250,202,14)" fg:x="23267" fg:w="141"/><text x="24.7542%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="24.6094%" y="165" width="0.1482%" height="15" fill="rgb(221,208,28)" fg:x="23408" fg:w="141"/><text x="24.9024%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="24.7577%" y="165" width="0.2492%" height="15" fill="rgb(240,132,27)" fg:x="23549" fg:w="237"/><text x="25.0506%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="25.0068%" y="165" width="0.2492%" height="15" fill="rgb(221,54,2)" fg:x="23786" fg:w="237"/><text x="25.2998%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="25.2560%" y="165" width="0.1651%" height="15" fill="rgb(215,32,13)" fg:x="24023" fg:w="157"/><text x="25.5490%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="26.6437%" y="165" width="0.3164%" height="15" fill="rgb(218,87,10)" fg:x="25343" fg:w="301"/><text x="26.9367%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="26.9602%" y="165" width="0.3164%" height="15" fill="rgb(250,225,5)" fg:x="25644" fg:w="301"/><text x="27.2532%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="28.2828%" y="165" width="0.2492%" height="15" fill="rgb(242,191,19)" fg:x="26902" fg:w="237"/><text x="28.5757%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="28.5319%" y="165" width="0.2492%" height="15" fill="rgb(222,113,40)" fg:x="27139" fg:w="237"/><text x="28.8249%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16,681 instructions, 17.54%)</title><rect x="12.5549%" y="181" width="17.5372%" height="15" fill="rgb(234,18,36)" fg:x="11942" fg:w="16681"/><text x="12.8479%" y="191.50">alloc::collections::btr..</text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="30.9889%" y="165" width="0.2155%" height="15" fill="rgb(230,193,9)" fg:x="29476" fg:w="205"/><text x="31.2818%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="31.2044%" y="165" width="0.2155%" height="15" fill="rgb(244,12,16)" fg:x="29681" fg:w="205"/><text x="31.4974%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="32.5606%" y="165" width="0.2492%" height="15" fill="rgb(247,218,15)" fg:x="30971" fg:w="237"/><text x="32.8536%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="32.8098%" y="165" width="0.2492%" height="15" fill="rgb(250,4,37)" fg:x="31208" fg:w="237"/><text x="33.1027%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="33.8611%" y="165" width="0.2492%" height="15" fill="rgb(243,112,50)" fg:x="32208" fg:w="237"/><text x="34.1541%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="34.1103%" y="165" width="0.2492%" height="15" fill="rgb(248,8,0)" fg:x="32445" fg:w="237"/><text x="34.4032%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,982 instructions, 5.24%)</title><rect x="30.0921%" y="181" width="5.2377%" height="15" fill="rgb(212,148,8)" fg:x="28623" fg:w="4982"/><text x="30.3851%" y="191.50">alloc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="36.5315%" y="165" width="0.0957%" height="15" fill="rgb(230,21,12)" fg:x="34748" fg:w="91"/><text x="36.8244%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="36.6271%" y="165" width="0.2607%" height="15" fill="rgb(244,59,11)" fg:x="34839" fg:w="248"/><text x="36.9201%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="36.8879%" y="165" width="0.2607%" height="15" fill="rgb(222,188,13)" fg:x="35087" fg:w="248"/><text x="37.1808%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="37.1486%" y="165" width="0.1819%" height="15" fill="rgb(252,49,28)" fg:x="35335" fg:w="173"/><text x="37.4416%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="37.3305%" y="165" width="0.1819%" height="15" fill="rgb(225,84,24)" fg:x="35508" fg:w="173"/><text x="37.6234%" y="175.50"></text></g><g><title>memmove (221 instructions, 0.23%)</title><rect x="37.5124%" y="165" width="0.2323%" height="15" fill="rgb(213,123,48)" fg:x="35681" fg:w="221"/><text x="37.8053%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="38.9737%" y="165" width="0.1819%" height="15" fill="rgb(208,1,54)" fg:x="37071" fg:w="173"/><text x="39.2667%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="39.1556%" y="165" width="0.1819%" height="15" fill="rgb(233,48,11)" fg:x="37244" fg:w="173"/><text x="39.4485%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="40.7452%" y="165" width="0.1651%" height="15" fill="rgb(230,49,21)" fg:x="38756" fg:w="157"/><text x="41.0381%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="40.9102%" y="165" width="0.1651%" height="15" fill="rgb(208,208,38)" fg:x="38913" fg:w="157"/><text x="41.2032%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="42.0793%" y="165" width="0.0957%" height="15" fill="rgb(207,62,26)" fg:x="40025" fg:w="91"/><text x="42.3723%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="42.1750%" y="165" width="0.2607%" height="15" fill="rgb(218,82,2)" fg:x="40116" fg:w="248"/><text x="42.4680%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="42.4357%" y="165" width="0.2607%" height="15" fill="rgb(235,90,48)" fg:x="40364" fg:w="248"/><text x="42.7287%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="44.1662%" y="165" width="0.3164%" height="15" fill="rgb(254,20,23)" fg:x="42010" fg:w="301"/><text x="44.4592%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="44.4826%" y="165" width="0.3164%" height="15" fill="rgb(211,78,34)" fg:x="42311" fg:w="301"/><text x="44.7756%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="45.7022%" y="165" width="0.1482%" height="15" fill="rgb(217,168,11)" fg:x="43471" fg:w="141"/><text x="45.9951%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="45.8504%" y="165" width="0.1482%" height="15" fill="rgb(225,71,26)" fg:x="43612" fg:w="141"/><text x="46.1434%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="47.0048%" y="165" width="0.1482%" height="15" fill="rgb(228,208,0)" fg:x="44710" fg:w="141"/><text x="47.2977%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="47.1530%" y="165" width="0.1482%" height="15" fill="rgb(217,169,25)" fg:x="44851" fg:w="141"/><text x="47.4460%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="48.6774%" y="165" width="0.1651%" height="15" fill="rgb(237,32,21)" fg:x="46301" fg:w="157"/><text x="48.9704%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="48.8425%" y="165" width="0.1651%" height="15" fill="rgb(209,21,25)" fg:x="46458" fg:w="157"/><text x="49.1355%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="49.9779%" y="165" width="0.2155%" height="15" fill="rgb(243,62,21)" fg:x="47538" fg:w="205"/><text x="50.2709%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="50.1934%" y="165" width="0.2155%" height="15" fill="rgb(251,38,7)" fg:x="47743" fg:w="205"/><text x="50.4864%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="51.2805%" y="165" width="0.3164%" height="15" fill="rgb(209,91,0)" fg:x="48777" fg:w="301"/><text x="51.5735%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="51.5970%" y="165" width="0.3164%" height="15" fill="rgb(239,63,47)" fg:x="49078" fg:w="301"/><text x="51.8899%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="52.9868%" y="165" width="0.2828%" height="15" fill="rgb(216,8,41)" fg:x="50400" fg:w="269"/><text x="53.2798%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="53.2696%" y="165" width="0.2828%" height="15" fill="rgb(244,116,14)" fg:x="50669" fg:w="269"/><text x="53.5626%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.35%)</title><rect x="54.8950%" y="165" width="0.3501%" height="15" fill="rgb(230,180,0)" fg:x="52215" fg:w="333"/><text x="55.1879%" y="175.50"></text></g><g><title>memmove (333 instructions, 0.35%)</title><rect x="55.2451%" y="165" width="0.3501%" height="15" fill="rgb(205,3,11)" fg:x="52548" fg:w="333"/><text x="55.5380%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="56.7022%" y="165" width="0.3164%" height="15" fill="rgb(218,136,21)" fg:x="53934" fg:w="301"/><text x="56.9952%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="57.0187%" y="165" width="0.3164%" height="15" fill="rgb(234,149,12)" fg:x="54235" fg:w="301"/><text x="57.3116%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22,048 instructions, 23.18%)</title><rect x="35.3298%" y="181" width="23.1796%" height="15" fill="rgb(243,6,15)" fg:x="33605" fg:w="22048"/><text x="35.6228%" y="191.50">alloc::collections::btree::map:..</text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="59.4735%" y="165" width="0.1651%" height="15" fill="rgb(210,218,2)" fg:x="56570" fg:w="157"/><text x="59.7665%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="59.6386%" y="165" width="0.1651%" height="15" fill="rgb(228,7,30)" fg:x="56727" fg:w="157"/><text x="59.9315%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="61.3165%" y="165" width="0.3164%" height="15" fill="rgb(229,54,48)" fg:x="58323" fg:w="301"/><text x="61.6094%" y="175.50"></text></g><g><title>memmove (301 instructions, 0.32%)</title><rect x="61.6329%" y="165" width="0.3164%" height="15" fill="rgb(229,194,42)" fg:x="58624" fg:w="301"/><text x="61.9259%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="62.8861%" y="165" width="0.0957%" height="15" fill="rgb(215,69,18)" fg:x="59816" fg:w="91"/><text x="63.1791%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="62.9818%" y="165" width="0.1934%" height="15" fill="rgb(254,22,8)" fg:x="59907" fg:w="184"/><text x="63.2747%" y="175.50"></text></g><g><title>memcpy (184 instructions, 0.19%)</title><rect x="63.1752%" y="165" width="0.1934%" height="15" fill="rgb(221,129,51)" fg:x="60091" fg:w="184"/><text x="63.4682%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="63.3687%" y="165" width="0.1482%" height="15" fill="rgb(247,150,43)" fg:x="60275" fg:w="141"/><text x="63.6616%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="63.5169%" y="165" width="0.1482%" height="15" fill="rgb(229,174,13)" fg:x="60416" fg:w="141"/><text x="63.8099%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="63.6651%" y="165" width="0.1482%" height="15" fill="rgb(252,168,45)" fg:x="60557" fg:w="141"/><text x="63.9581%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="63.8134%" y="165" width="0.1482%" height="15" fill="rgb(250,59,31)" fg:x="60698" fg:w="141"/><text x="64.1063%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="63.9616%" y="165" width="0.1651%" height="15" fill="rgb(239,34,48)" fg:x="60839" fg:w="157"/><text x="64.2546%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="65.6563%" y="165" width="0.0957%" height="15" fill="rgb(253,26,41)" fg:x="62451" fg:w="91"/><text x="65.9493%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="65.7520%" y="165" width="0.2607%" height="15" fill="rgb(235,47,10)" fg:x="62542" fg:w="248"/><text x="66.0450%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="66.0127%" y="165" width="0.2607%" height="15" fill="rgb(238,204,5)" fg:x="62790" fg:w="248"/><text x="66.3057%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="66.2735%" y="165" width="0.2155%" height="15" fill="rgb(240,115,52)" fg:x="63038" fg:w="205"/><text x="66.5664%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="66.4890%" y="165" width="0.2155%" height="15" fill="rgb(233,199,28)" fg:x="63243" fg:w="205"/><text x="66.7820%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,975 instructions, 9.44%)</title><rect x="58.5094%" y="181" width="9.4356%" height="15" fill="rgb(229,82,19)" fg:x="55653" fg:w="8975"/><text x="58.8024%" y="191.50">alloc::coll..</text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="68.9091%" y="165" width="0.1819%" height="15" fill="rgb(253,73,52)" fg:x="65545" fg:w="173"/><text x="69.2021%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="69.0910%" y="165" width="0.1819%" height="15" fill="rgb(250,158,4)" fg:x="65718" fg:w="173"/><text x="69.3840%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="70.2117%" y="165" width="0.2155%" height="15" fill="rgb(237,223,12)" fg:x="66784" fg:w="205"/><text x="70.5047%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="70.4273%" y="165" width="0.2155%" height="15" fill="rgb(225,191,6)" fg:x="66989" fg:w="205"/><text x="70.7202%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="71.6825%" y="165" width="0.2492%" height="15" fill="rgb(224,85,3)" fg:x="68183" fg:w="237"/><text x="71.9755%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="71.9317%" y="165" width="0.2492%" height="15" fill="rgb(248,128,1)" fg:x="68420" fg:w="237"/><text x="72.2247%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="73.2858%" y="165" width="0.2155%" height="15" fill="rgb(240,187,24)" fg:x="69708" fg:w="205"/><text x="73.5788%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="73.5013%" y="165" width="0.2155%" height="15" fill="rgb(232,180,31)" fg:x="69913" fg:w="205"/><text x="73.7943%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="74.6872%" y="165" width="0.1819%" height="15" fill="rgb(250,52,1)" fg:x="71041" fg:w="173"/><text x="74.9802%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="74.8691%" y="165" width="0.1819%" height="15" fill="rgb(244,21,41)" fg:x="71214" fg:w="173"/><text x="75.1621%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="75.9541%" y="165" width="0.2828%" height="15" fill="rgb(205,99,35)" fg:x="72246" fg:w="269"/><text x="76.2470%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="76.2369%" y="165" width="0.2828%" height="15" fill="rgb(205,17,46)" fg:x="72515" fg:w="269"/><text x="76.5299%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="77.6246%" y="165" width="0.0957%" height="15" fill="rgb(236,208,23)" fg:x="73835" fg:w="91"/><text x="77.9176%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.23%)</title><rect x="77.7203%" y="165" width="0.2271%" height="15" fill="rgb(222,66,36)" fg:x="73926" fg:w="216"/><text x="78.0133%" y="175.50"></text></g><g><title>memcpy (216 instructions, 0.23%)</title><rect x="77.9474%" y="165" width="0.2271%" height="15" fill="rgb(216,131,7)" fg:x="74142" fg:w="216"/><text x="78.2404%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="78.1745%" y="165" width="0.2492%" height="15" fill="rgb(205,223,18)" fg:x="74358" fg:w="237"/><text x="78.4674%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="78.4236%" y="165" width="0.2492%" height="15" fill="rgb(219,8,46)" fg:x="74595" fg:w="237"/><text x="78.7166%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="78.6728%" y="165" width="0.1482%" height="15" fill="rgb(250,210,0)" fg:x="74832" fg:w="141"/><text x="78.9658%" y="175.50"></text></g><g><title>memmove (141 instructions, 0.15%)</title><rect x="78.8210%" y="165" width="0.1482%" height="15" fill="rgb(227,39,33)" fg:x="74973" fg:w="141"/><text x="79.1140%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.17%)</title><rect x="78.9693%" y="165" width="0.1651%" height="15" fill="rgb(240,140,18)" fg:x="75114" fg:w="157"/><text x="79.2622%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="80.7965%" y="165" width="0.2492%" height="15" fill="rgb(220,153,37)" fg:x="76852" fg:w="237"/><text x="81.0895%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="81.0456%" y="165" width="0.2492%" height="15" fill="rgb(243,88,21)" fg:x="77089" fg:w="237"/><text x="81.3386%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="82.3346%" y="165" width="0.2492%" height="15" fill="rgb(210,13,29)" fg:x="78315" fg:w="237"/><text x="82.6275%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="82.5837%" y="165" width="0.2492%" height="15" fill="rgb(206,58,0)" fg:x="78552" fg:w="237"/><text x="82.8767%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.10%)</title><rect x="83.6351%" y="165" width="0.0957%" height="15" fill="rgb(238,198,18)" fg:x="79552" fg:w="91"/><text x="83.9280%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.7307%" y="165" width="0.2607%" height="15" fill="rgb(241,119,26)" fg:x="79643" fg:w="248"/><text x="84.0237%" y="175.50"></text></g><g><title>memcpy (248 instructions, 0.26%)</title><rect x="83.9915%" y="165" width="0.2607%" height="15" fill="rgb(223,15,50)" fg:x="79891" fg:w="248"/><text x="84.2844%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.2522%" y="165" width="0.1819%" height="15" fill="rgb(235,217,6)" fg:x="80139" fg:w="173"/><text x="84.5452%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="84.4341%" y="165" width="0.1819%" height="15" fill="rgb(232,141,42)" fg:x="80312" fg:w="173"/><text x="84.7270%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.6160%" y="165" width="0.2828%" height="15" fill="rgb(216,32,11)" fg:x="80485" fg:w="269"/><text x="84.9089%" y="175.50"></text></g><g><title>memmove (269 instructions, 0.28%)</title><rect x="84.8988%" y="165" width="0.2828%" height="15" fill="rgb(250,199,23)" fg:x="80754" fg:w="269"/><text x="85.1917%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="85.1816%" y="165" width="0.1819%" height="15" fill="rgb(228,24,6)" fg:x="81023" fg:w="173"/><text x="85.4745%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="86.9457%" y="165" width="0.2155%" height="15" fill="rgb(225,118,49)" fg:x="82701" fg:w="205"/><text x="87.2387%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.22%)</title><rect x="87.1612%" y="165" width="0.2155%" height="15" fill="rgb(239,8,44)" fg:x="82906" fg:w="205"/><text x="87.4542%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.3471%" y="165" width="0.1819%" height="15" fill="rgb(241,160,39)" fg:x="84034" fg:w="173"/><text x="88.6401%" y="175.50"></text></g><g><title>memmove (173 instructions, 0.18%)</title><rect x="88.5290%" y="165" width="0.1819%" height="15" fill="rgb(250,118,11)" fg:x="84207" fg:w="173"/><text x="88.8220%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="89.6476%" y="165" width="0.2492%" height="15" fill="rgb(247,107,4)" fg:x="85271" fg:w="237"/><text x="89.9406%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="89.8968%" y="165" width="0.2492%" height="15" fill="rgb(253,135,15)" fg:x="85508" fg:w="237"/><text x="90.1897%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="91.3875%" y="165" width="0.2492%" height="15" fill="rgb(253,51,16)" fg:x="86926" fg:w="237"/><text x="91.6805%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="91.6367%" y="165" width="0.2492%" height="15" fill="rgb(241,1,22)" fg:x="87163" fg:w="237"/><text x="91.9297%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="92.6880%" y="165" width="0.2492%" height="15" fill="rgb(228,131,13)" fg:x="88163" fg:w="237"/><text x="92.9810%" y="175.50"></text></g><g><title>memmove (237 instructions, 0.25%)</title><rect x="92.9372%" y="165" width="0.2492%" height="15" fill="rgb(215,96,44)" fg:x="88400" fg:w="237"/><text x="93.2302%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (24,708 instructions, 25.98%)</title><rect x="67.9451%" y="181" width="25.9762%" height="15" fill="rgb(207,157,39)" fg:x="64628" fg:w="24708"/><text x="68.2380%" y="191.50">alloc::collections::btree::map::BTr..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,077 instructions, 1.13%)</title><rect x="93.9212%" y="181" width="1.1323%" height="15" fill="rgb(229,60,0)" fg:x="89336" fg:w="1077"/><text x="94.2142%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.09%)</title><rect x="95.0535%" y="133" width="0.0873%" height="15" fill="rgb(243,86,5)" fg:x="90413" fg:w="83"/><text x="95.3465%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.13%)</title><rect x="95.0535%" y="149" width="0.1335%" height="15" fill="rgb(213,18,35)" fg:x="90413" fg:w="127"/><text x="95.3465%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.02%)</title><rect x="95.1870%" y="133" width="0.0242%" height="15" fill="rgb(245,114,0)" fg:x="90540" fg:w="23"/><text x="95.4800%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.15%)</title><rect x="95.1870%" y="149" width="0.1451%" height="15" fill="rgb(250,39,46)" fg:x="90540" fg:w="138"/><text x="95.4800%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (389 instructions, 0.41%)</title><rect x="95.0535%" y="165" width="0.4090%" height="15" fill="rgb(244,89,3)" fg:x="90413" fg:w="389"/><text x="95.3465%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.54%)</title><rect x="95.4625%" y="149" width="0.5446%" height="15" fill="rgb(246,33,2)" fg:x="90802" fg:w="518"/><text x="95.7554%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.09%)</title><rect x="96.0071%" y="101" width="0.0862%" height="15" fill="rgb(207,225,53)" fg:x="91320" fg:w="82"/><text x="96.3000%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.14%)</title><rect x="96.0071%" y="117" width="0.1367%" height="15" fill="rgb(205,193,53)" fg:x="91320" fg:w="130"/><text x="96.3000%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.22%)</title><rect x="96.0071%" y="133" width="0.2229%" height="15" fill="rgb(238,205,50)" fg:x="91320" fg:w="212"/><text x="96.3000%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.2299%" y="133" width="0.0158%" height="15" fill="rgb(238,106,28)" fg:x="91532" fg:w="15"/><text x="96.5229%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="96.2457%" y="133" width="0.0158%" height="15" fill="rgb(216,97,22)" fg:x="91547" fg:w="15"/><text x="96.5387%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.45%)</title><rect x="96.0071%" y="149" width="0.4500%" height="15" fill="rgb(223,95,35)" fg:x="91320" fg:w="428"/><text x="96.3000%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.54%)</title><rect x="96.4570%" y="149" width="0.5425%" height="15" fill="rgb(220,150,46)" fg:x="91748" fg:w="516"/><text x="96.7500%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 1.65%)</title><rect x="95.4625%" y="165" width="1.6464%" height="15" fill="rgb(247,78,8)" fg:x="90802" fg:w="1566"/><text x="95.7554%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.06%)</title><rect x="97.1236%" y="165" width="0.0631%" height="15" fill="rgb(222,118,18)" fg:x="92382" fg:w="60"/><text x="97.4165%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,631 instructions, 2.77%)</title><rect x="95.0535%" y="181" width="2.7660%" height="15" fill="rgb(243,217,5)" fg:x="90413" fg:w="2631"/><text x="95.3465%" y="191.50">ic..</text></g><g><title>btreemap::__canister_method_batch_put::{{closure}} (94,544 instructions, 99.40%)</title><rect x="0.1976%" y="197" width="99.3965%" height="15" fill="rgb(209,213,49)" fg:x="188" fg:w="94544"/><text x="0.4906%" y="207.50">btreemap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.01%)</title><rect x="99.5942%" y="197" width="0.0147%" height="15" fill="rgb(242,221,22)" fg:x="94732" fg:w="14"/><text x="99.8872%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.7035%" y="181" width="0.0284%" height="15" fill="rgb(221,225,17)" fg:x="94836" fg:w="27"/><text x="99.9965%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (227 instructions, 0.24%)</title><rect x="99.6100%" y="197" width="0.2387%" height="15" fill="rgb(214,46,12)" fg:x="94747" fg:w="227"/><text x="99.9029%" y="207.50"></text></g><g><title>all (95,118 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,210,20)" fg:x="0" fg:w="95118"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (95,118 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,108,50)" fg:x="0" fg:w="95118"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>