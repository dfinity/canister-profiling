<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="53561"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0149%" height="15" fill="rgb(218,13,37)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0149%" y="181" width="0.0168%" height="15" fill="rgb(206,187,46)" fg:x="8" fg:w="9"/><text x="0.3079%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0317%" y="181" width="0.0168%" height="15" fill="rgb(223,76,12)" fg:x="17" fg:w="9"/><text x="0.3247%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0485%" y="181" width="0.0168%" height="15" fill="rgb(254,151,54)" fg:x="26" fg:w="9"/><text x="0.3415%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0709%" y="181" width="0.0187%" height="15" fill="rgb(229,126,18)" fg:x="38" fg:w="10"/><text x="0.3639%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.0149%" y="197" width="0.2464%" height="15" fill="rgb(207,141,44)" fg:x="8" fg:w="132"/><text x="0.3079%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.0149%" y="213" width="0.2651%" height="15" fill="rgb(239,100,29)" fg:x="8" fg:w="142"/><text x="0.3079%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.0149%" y="229" width="0.2707%" height="15" fill="rgb(207,134,35)" fg:x="8" fg:w="145"/><text x="0.3079%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.2969%" y="181" width="0.0168%" height="15" fill="rgb(239,190,40)" fg:x="159" fg:w="9"/><text x="0.5898%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3137%" y="181" width="0.0168%" height="15" fill="rgb(233,61,18)" fg:x="168" fg:w="9"/><text x="0.6066%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3305%" y="181" width="0.0168%" height="15" fill="rgb(226,45,35)" fg:x="177" fg:w="9"/><text x="0.6234%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3529%" y="181" width="0.0187%" height="15" fill="rgb(240,14,46)" fg:x="189" fg:w="10"/><text x="0.6458%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.2969%" y="197" width="0.2464%" height="15" fill="rgb(235,47,27)" fg:x="159" fg:w="132"/><text x="0.5898%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.2969%" y="213" width="0.2651%" height="15" fill="rgb(220,5,7)" fg:x="159" fg:w="142"/><text x="0.5898%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.2969%" y="229" width="0.2707%" height="15" fill="rgb(207,196,7)" fg:x="159" fg:w="145"/><text x="0.5898%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.56%)</title><rect x="0.0149%" y="245" width="0.5638%" height="15" fill="rgb(224,140,42)" fg:x="8" fg:w="302"/><text x="0.3079%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5788%" y="245" width="0.0112%" height="15" fill="rgb(210,220,29)" fg:x="310" fg:w="6"/><text x="0.8717%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5900%" y="149" width="0.0168%" height="15" fill="rgb(232,202,4)" fg:x="316" fg:w="9"/><text x="0.8830%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6068%" y="149" width="0.0168%" height="15" fill="rgb(231,196,5)" fg:x="325" fg:w="9"/><text x="0.8998%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6236%" y="149" width="0.0168%" height="15" fill="rgb(248,57,5)" fg:x="334" fg:w="9"/><text x="0.9166%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.6460%" y="149" width="0.0187%" height="15" fill="rgb(228,82,36)" fg:x="346" fg:w="10"/><text x="0.9390%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.5900%" y="165" width="0.2464%" height="15" fill="rgb(252,201,11)" fg:x="316" fg:w="132"/><text x="0.8830%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.5900%" y="181" width="0.2651%" height="15" fill="rgb(220,194,37)" fg:x="316" fg:w="142"/><text x="0.8830%" y="191.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.5900%" y="197" width="0.2707%" height="15" fill="rgb(246,31,20)" fg:x="316" fg:w="145"/><text x="0.8830%" y="207.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="0.5900%" y="213" width="0.2819%" height="15" fill="rgb(251,65,5)" fg:x="316" fg:w="151"/><text x="0.8830%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (211 instructions, 0.39%)</title><rect x="0.5900%" y="229" width="0.3939%" height="15" fill="rgb(216,140,45)" fg:x="316" fg:w="211"/><text x="0.8830%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="0.9858%" y="181" width="0.1363%" height="15" fill="rgb(235,1,29)" fg:x="528" fg:w="73"/><text x="1.2788%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.1221%" y="117" width="0.0112%" height="15" fill="rgb(220,152,45)" fg:x="601" fg:w="6"/><text x="1.4151%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.1221%" y="133" width="0.0187%" height="15" fill="rgb(252,184,5)" fg:x="601" fg:w="10"/><text x="1.4151%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="1.1221%" y="149" width="0.8084%" height="15" fill="rgb(207,157,15)" fg:x="601" fg:w="433"/><text x="1.4151%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="1.9305%" y="149" width="0.1624%" height="15" fill="rgb(228,72,15)" fg:x="1034" fg:w="87"/><text x="2.2235%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.0929%" y="149" width="0.0971%" height="15" fill="rgb(205,45,1)" fg:x="1121" fg:w="52"/><text x="2.3859%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.1900%" y="149" width="0.0971%" height="15" fill="rgb(251,135,1)" fg:x="1173" fg:w="52"/><text x="2.4830%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.2871%" y="149" width="0.0971%" height="15" fill="rgb(223,151,4)" fg:x="1225" fg:w="52"/><text x="2.5801%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.3842%" y="149" width="0.0971%" height="15" fill="rgb(249,105,33)" fg:x="1277" fg:w="52"/><text x="2.6772%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (880 instructions, 1.64%)</title><rect x="1.1221%" y="181" width="1.6430%" height="15" fill="rgb(228,210,34)" fg:x="601" fg:w="880"/><text x="1.4151%" y="191.50"></text></g><g><title> 4]&gt;::read_options (880 instructions, 1.64%)</title><rect x="1.1221%" y="165" width="1.6430%" height="15" fill="rgb(231,222,21)" fg:x="601" fg:w="880"/><text x="1.4151%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="2.7651%" y="181" width="0.1363%" height="15" fill="rgb(214,7,45)" fg:x="1481" fg:w="73"/><text x="3.0580%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="2.9014%" y="165" width="0.1438%" height="15" fill="rgb(210,13,30)" fg:x="1554" fg:w="77"/><text x="3.1943%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="2.9014%" y="181" width="0.1942%" height="15" fill="rgb(209,5,37)" fg:x="1554" fg:w="104"/><text x="3.1943%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="3.0955%" y="133" width="0.0112%" height="15" fill="rgb(254,103,32)" fg:x="1658" fg:w="6"/><text x="3.3885%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="3.0955%" y="149" width="0.0187%" height="15" fill="rgb(215,36,11)" fg:x="1658" fg:w="10"/><text x="3.3885%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="3.0955%" y="165" width="0.8084%" height="15" fill="rgb(226,213,1)" fg:x="1658" fg:w="433"/><text x="3.3885%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.9040%" y="149" width="0.0336%" height="15" fill="rgb(235,116,11)" fg:x="2091" fg:w="18"/><text x="4.1969%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.9040%" y="165" width="0.0411%" height="15" fill="rgb(252,154,24)" fg:x="2091" fg:w="22"/><text x="4.1969%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9450%" y="69" width="0.0168%" height="15" fill="rgb(213,12,10)" fg:x="2113" fg:w="9"/><text x="4.2380%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9618%" y="69" width="0.0168%" height="15" fill="rgb(239,12,10)" fg:x="2122" fg:w="9"/><text x="4.2548%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9786%" y="69" width="0.0168%" height="15" fill="rgb(229,210,38)" fg:x="2131" fg:w="9"/><text x="4.2716%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="4.0010%" y="69" width="0.0187%" height="15" fill="rgb(221,184,51)" fg:x="2143" fg:w="10"/><text x="4.2940%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="3.9450%" y="85" width="0.2464%" height="15" fill="rgb(212,29,33)" fg:x="2113" fg:w="132"/><text x="4.2380%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="3.9450%" y="101" width="0.2651%" height="15" fill="rgb(213,142,40)" fg:x="2113" fg:w="142"/><text x="4.2380%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="3.9450%" y="117" width="0.2707%" height="15" fill="rgb(205,167,9)" fg:x="2113" fg:w="145"/><text x="4.2380%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="3.9450%" y="133" width="0.2819%" height="15" fill="rgb(219,78,51)" fg:x="2113" fg:w="151"/><text x="4.2380%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="4.2270%" y="85" width="0.1120%" height="15" fill="rgb(254,159,11)" fg:x="2264" fg:w="60"/><text x="4.5199%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="4.2270%" y="101" width="0.1195%" height="15" fill="rgb(233,172,1)" fg:x="2264" fg:w="64"/><text x="4.5199%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="4.2270%" y="117" width="0.1662%" height="15" fill="rgb(243,95,46)" fg:x="2264" fg:w="89"/><text x="4.5199%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="4.3931%" y="69" width="0.0187%" height="15" fill="rgb(224,51,37)" fg:x="2353" fg:w="10"/><text x="4.6861%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="4.4118%" y="37" width="0.0560%" height="15" fill="rgb(241,171,37)" fg:x="2363" fg:w="30"/><text x="4.7048%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="4.4118%" y="53" width="0.0635%" height="15" fill="rgb(207,22,19)" fg:x="2363" fg:w="34"/><text x="4.7048%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="4.4118%" y="69" width="0.1102%" height="15" fill="rgb(240,163,32)" fg:x="2363" fg:w="59"/><text x="4.7048%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="4.3931%" y="85" width="0.2222%" height="15" fill="rgb(208,27,50)" fg:x="2353" fg:w="119"/><text x="4.6861%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.32%)</title><rect x="4.3931%" y="101" width="0.3249%" height="15" fill="rgb(211,212,23)" fg:x="2353" fg:w="174"/><text x="4.6861%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.33%)</title><rect x="4.3931%" y="117" width="0.3342%" height="15" fill="rgb(231,119,25)" fg:x="2353" fg:w="179"/><text x="4.6861%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="4.2270%" y="133" width="0.7076%" height="15" fill="rgb(238,138,43)" fg:x="2264" fg:w="379"/><text x="4.5199%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="3.9450%" y="149" width="1.2565%" height="15" fill="rgb(243,8,9)" fg:x="2113" fg:w="673"/><text x="4.2380%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="5.2015%" y="149" width="0.1624%" height="15" fill="rgb(249,49,52)" fg:x="2786" fg:w="87"/><text x="5.4945%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="5.3901%" y="101" width="0.0112%" height="15" fill="rgb(213,121,26)" fg:x="2887" fg:w="6"/><text x="5.6831%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="5.4013%" y="101" width="0.0187%" height="15" fill="rgb(250,117,38)" fg:x="2893" fg:w="10"/><text x="5.6943%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="5.3640%" y="117" width="0.1307%" height="15" fill="rgb(245,78,7)" fg:x="2873" fg:w="70"/><text x="5.6569%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="5.3640%" y="133" width="0.1344%" height="15" fill="rgb(226,27,31)" fg:x="2873" fg:w="72"/><text x="5.6569%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="5.3640%" y="149" width="0.1438%" height="15" fill="rgb(206,33,6)" fg:x="2873" fg:w="77"/><text x="5.6569%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (908 instructions, 1.70%)</title><rect x="3.9450%" y="165" width="1.6953%" height="15" fill="rgb(240,43,8)" fg:x="2113" fg:w="908"/><text x="4.2380%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="5.6403%" y="165" width="0.0467%" height="15" fill="rgb(237,200,42)" fg:x="3021" fg:w="25"/><text x="5.9333%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,536 instructions, 2.87%)</title><rect x="3.0955%" y="181" width="2.8678%" height="15" fill="rgb(244,111,16)" fg:x="1658" fg:w="1536"/><text x="3.3885%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="5.9633%" y="181" width="0.1270%" height="15" fill="rgb(228,164,11)" fg:x="3194" fg:w="68"/><text x="6.2563%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="6.0903%" y="165" width="0.1438%" height="15" fill="rgb(222,75,43)" fg:x="3262" fg:w="77"/><text x="6.3832%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="6.0903%" y="181" width="0.1942%" height="15" fill="rgb(246,5,2)" fg:x="3262" fg:w="104"/><text x="6.3832%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="6.2844%" y="133" width="0.0112%" height="15" fill="rgb(231,41,40)" fg:x="3366" fg:w="6"/><text x="6.5774%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="6.2844%" y="149" width="0.0187%" height="15" fill="rgb(205,160,29)" fg:x="3366" fg:w="10"/><text x="6.5774%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="6.2844%" y="165" width="0.8084%" height="15" fill="rgb(222,213,42)" fg:x="3366" fg:w="433"/><text x="6.5774%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="7.0928%" y="149" width="0.0336%" height="15" fill="rgb(238,165,23)" fg:x="3799" fg:w="18"/><text x="7.3858%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="7.0928%" y="165" width="0.0411%" height="15" fill="rgb(219,1,8)" fg:x="3799" fg:w="22"/><text x="7.3858%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1339%" y="69" width="0.0168%" height="15" fill="rgb(214,102,25)" fg:x="3821" fg:w="9"/><text x="7.4269%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1507%" y="69" width="0.0168%" height="15" fill="rgb(206,34,27)" fg:x="3830" fg:w="9"/><text x="7.4437%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1675%" y="69" width="0.0168%" height="15" fill="rgb(226,116,10)" fg:x="3839" fg:w="9"/><text x="7.4605%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.1899%" y="69" width="0.0187%" height="15" fill="rgb(242,143,48)" fg:x="3851" fg:w="10"/><text x="7.4829%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="7.1339%" y="85" width="0.2464%" height="15" fill="rgb(207,212,14)" fg:x="3821" fg:w="132"/><text x="7.4269%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="7.1339%" y="101" width="0.2651%" height="15" fill="rgb(235,87,4)" fg:x="3821" fg:w="142"/><text x="7.4269%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="7.1339%" y="117" width="0.2707%" height="15" fill="rgb(254,151,14)" fg:x="3821" fg:w="145"/><text x="7.4269%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="7.1339%" y="133" width="0.2819%" height="15" fill="rgb(209,140,50)" fg:x="3821" fg:w="151"/><text x="7.4269%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="7.4158%" y="85" width="0.1120%" height="15" fill="rgb(207,75,12)" fg:x="3972" fg:w="60"/><text x="7.7088%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="7.4158%" y="101" width="0.1195%" height="15" fill="rgb(235,171,42)" fg:x="3972" fg:w="64"/><text x="7.7088%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="7.4158%" y="117" width="0.1662%" height="15" fill="rgb(252,27,32)" fg:x="3972" fg:w="89"/><text x="7.7088%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="7.5820%" y="69" width="0.0187%" height="15" fill="rgb(222,95,13)" fg:x="4061" fg:w="10"/><text x="7.8750%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="7.6007%" y="37" width="0.0560%" height="15" fill="rgb(218,128,25)" fg:x="4071" fg:w="30"/><text x="7.8936%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="7.6007%" y="53" width="0.0635%" height="15" fill="rgb(253,0,53)" fg:x="4071" fg:w="34"/><text x="7.8936%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="7.6007%" y="69" width="0.1102%" height="15" fill="rgb(250,134,44)" fg:x="4071" fg:w="59"/><text x="7.8936%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="7.5820%" y="85" width="0.2222%" height="15" fill="rgb(251,17,8)" fg:x="4061" fg:w="119"/><text x="7.8750%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.32%)</title><rect x="7.5820%" y="101" width="0.3249%" height="15" fill="rgb(215,229,28)" fg:x="4061" fg:w="174"/><text x="7.8750%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.33%)</title><rect x="7.5820%" y="117" width="0.3342%" height="15" fill="rgb(206,51,28)" fg:x="4061" fg:w="179"/><text x="7.8750%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="7.4158%" y="133" width="0.7076%" height="15" fill="rgb(237,47,6)" fg:x="3972" fg:w="379"/><text x="7.7088%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="7.1339%" y="149" width="1.2565%" height="15" fill="rgb(221,69,7)" fg:x="3821" fg:w="673"/><text x="7.4269%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="8.3904%" y="149" width="0.1624%" height="15" fill="rgb(211,19,25)" fg:x="4494" fg:w="87"/><text x="8.6834%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="8.5790%" y="101" width="0.0112%" height="15" fill="rgb(230,182,9)" fg:x="4595" fg:w="6"/><text x="8.8720%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="8.5902%" y="101" width="0.0187%" height="15" fill="rgb(246,110,35)" fg:x="4601" fg:w="10"/><text x="8.8832%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="8.5529%" y="117" width="0.1307%" height="15" fill="rgb(243,137,54)" fg:x="4581" fg:w="70"/><text x="8.8458%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="8.5529%" y="133" width="0.1344%" height="15" fill="rgb(206,14,20)" fg:x="4581" fg:w="72"/><text x="8.8458%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="8.5529%" y="149" width="0.1438%" height="15" fill="rgb(215,19,21)" fg:x="4581" fg:w="77"/><text x="8.8458%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (908 instructions, 1.70%)</title><rect x="7.1339%" y="165" width="1.6953%" height="15" fill="rgb(233,29,8)" fg:x="3821" fg:w="908"/><text x="7.4269%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="8.8292%" y="133" width="0.1363%" height="15" fill="rgb(224,47,54)" fg:x="4729" fg:w="73"/><text x="9.1222%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.21%)</title><rect x="8.9655%" y="117" width="0.2054%" height="15" fill="rgb(220,116,27)" fg:x="4802" fg:w="110"/><text x="9.2584%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.26%)</title><rect x="8.9655%" y="133" width="0.2558%" height="15" fill="rgb(221,41,54)" fg:x="4802" fg:w="137"/><text x="9.2584%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="9.2213%" y="133" width="0.1270%" height="15" fill="rgb(238,81,5)" fg:x="4939" fg:w="68"/><text x="9.5142%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (337 instructions, 0.63%)</title><rect x="8.8292%" y="149" width="0.6292%" height="15" fill="rgb(242,215,42)" fg:x="4729" fg:w="337"/><text x="9.1222%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4584%" y="85" width="0.0168%" height="15" fill="rgb(245,8,16)" fg:x="5066" fg:w="9"/><text x="9.7513%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4752%" y="85" width="0.0168%" height="15" fill="rgb(214,176,41)" fg:x="5075" fg:w="9"/><text x="9.7681%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4920%" y="85" width="0.0168%" height="15" fill="rgb(210,142,36)" fg:x="5084" fg:w="9"/><text x="9.7849%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="9.5144%" y="85" width="0.0187%" height="15" fill="rgb(211,51,45)" fg:x="5096" fg:w="10"/><text x="9.8074%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="9.4584%" y="101" width="0.2464%" height="15" fill="rgb(252,154,16)" fg:x="5066" fg:w="132"/><text x="9.7513%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="9.4584%" y="117" width="0.2651%" height="15" fill="rgb(243,138,30)" fg:x="5066" fg:w="142"/><text x="9.7513%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="9.4584%" y="133" width="0.2707%" height="15" fill="rgb(247,229,50)" fg:x="5066" fg:w="145"/><text x="9.7513%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="9.4584%" y="149" width="0.2819%" height="15" fill="rgb(246,181,34)" fg:x="5066" fg:w="151"/><text x="9.7513%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (567 instructions, 1.06%)</title><rect x="8.8292%" y="165" width="1.0586%" height="15" fill="rgb(206,209,9)" fg:x="4729" fg:w="567"/><text x="9.1222%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,078 instructions, 3.88%)</title><rect x="6.2844%" y="181" width="3.8797%" height="15" fill="rgb(247,81,45)" fg:x="3366" fg:w="2078"/><text x="6.5774%" y="191.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="10.1641%" y="181" width="0.1270%" height="15" fill="rgb(230,180,5)" fg:x="5444" fg:w="68"/><text x="10.4571%" y="191.50"></text></g><g><title>binread::BinRead::read (5,202 instructions, 9.71%)</title><rect x="0.9839%" y="197" width="9.7123%" height="15" fill="rgb(233,219,29)" fg:x="527" fg:w="5202"/><text x="1.2769%" y="207.50">binread::Bin..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.6962%" y="181" width="0.0261%" height="15" fill="rgb(223,73,21)" fg:x="5729" fg:w="14"/><text x="10.9892%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.7224%" y="165" width="0.0261%" height="15" fill="rgb(226,155,10)" fg:x="5743" fg:w="14"/><text x="11.0153%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 instructions, 0.12%)</title><rect x="10.7485%" y="165" width="0.1214%" height="15" fill="rgb(232,62,11)" fg:x="5757" fg:w="65"/><text x="11.0415%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="10.8698%" y="165" width="0.0355%" height="15" fill="rgb(235,161,37)" fg:x="5822" fg:w="19"/><text x="11.1628%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (250 instructions, 0.47%)</title><rect x="10.7224%" y="181" width="0.4668%" height="15" fill="rgb(219,42,4)" fg:x="5743" fg:w="250"/><text x="11.0153%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1891%" y="101" width="0.0168%" height="15" fill="rgb(213,172,16)" fg:x="5993" fg:w="9"/><text x="11.4821%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.2059%" y="101" width="0.0168%" height="15" fill="rgb(249,200,44)" fg:x="6002" fg:w="9"/><text x="11.4989%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.2227%" y="101" width="0.0168%" height="15" fill="rgb(242,213,22)" fg:x="6011" fg:w="9"/><text x="11.5157%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.2451%" y="101" width="0.0187%" height="15" fill="rgb(215,185,29)" fg:x="6023" fg:w="10"/><text x="11.5381%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.1891%" y="117" width="0.2464%" height="15" fill="rgb(213,146,15)" fg:x="5993" fg:w="132"/><text x="11.4821%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="11.1891%" y="133" width="0.2651%" height="15" fill="rgb(212,79,52)" fg:x="5993" fg:w="142"/><text x="11.4821%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.1891%" y="149" width="0.2707%" height="15" fill="rgb(228,30,17)" fg:x="5993" fg:w="145"/><text x="11.4821%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.1891%" y="165" width="0.2819%" height="15" fill="rgb(225,81,49)" fg:x="5993" fg:w="151"/><text x="11.4821%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (232 instructions, 0.43%)</title><rect x="11.1891%" y="181" width="0.4332%" height="15" fill="rgb(221,59,33)" fg:x="5993" fg:w="232"/><text x="11.4821%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.6223%" y="85" width="0.0168%" height="15" fill="rgb(252,188,42)" fg:x="6225" fg:w="9"/><text x="11.9152%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.6391%" y="85" width="0.0168%" height="15" fill="rgb(236,8,25)" fg:x="6234" fg:w="9"/><text x="11.9320%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.6559%" y="85" width="0.0168%" height="15" fill="rgb(222,87,37)" fg:x="6243" fg:w="9"/><text x="11.9488%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.6783%" y="85" width="0.0187%" height="15" fill="rgb(254,164,45)" fg:x="6255" fg:w="10"/><text x="11.9712%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.6223%" y="101" width="0.2464%" height="15" fill="rgb(238,125,53)" fg:x="6225" fg:w="132"/><text x="11.9152%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="11.6223%" y="117" width="0.2651%" height="15" fill="rgb(219,48,34)" fg:x="6225" fg:w="142"/><text x="11.9152%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.6223%" y="133" width="0.2707%" height="15" fill="rgb(242,93,17)" fg:x="6225" fg:w="145"/><text x="11.9152%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.6223%" y="149" width="0.2819%" height="15" fill="rgb(243,102,37)" fg:x="6225" fg:w="151"/><text x="11.9152%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="11.6223%" y="165" width="0.3417%" height="15" fill="rgb(249,14,0)" fg:x="6225" fg:w="183"/><text x="11.9152%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (253 instructions, 0.47%)</title><rect x="11.6223%" y="181" width="0.4724%" height="15" fill="rgb(252,104,3)" fg:x="6225" fg:w="253"/><text x="11.9152%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (976 instructions, 1.82%)</title><rect x="10.6962%" y="197" width="1.8222%" height="15" fill="rgb(243,93,36)" fg:x="5729" fg:w="976"/><text x="10.9892%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.5184%" y="117" width="0.0168%" height="15" fill="rgb(218,193,38)" fg:x="6705" fg:w="9"/><text x="12.8114%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.5352%" y="117" width="0.0168%" height="15" fill="rgb(216,11,17)" fg:x="6714" fg:w="9"/><text x="12.8282%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.5520%" y="117" width="0.0168%" height="15" fill="rgb(237,113,31)" fg:x="6723" fg:w="9"/><text x="12.8450%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="12.5744%" y="117" width="0.0187%" height="15" fill="rgb(222,173,37)" fg:x="6735" fg:w="10"/><text x="12.8674%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="12.5184%" y="133" width="0.2464%" height="15" fill="rgb(218,30,31)" fg:x="6705" fg:w="132"/><text x="12.8114%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="12.5184%" y="149" width="0.2651%" height="15" fill="rgb(241,29,6)" fg:x="6705" fg:w="142"/><text x="12.8114%" y="159.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="12.5184%" y="165" width="0.2707%" height="15" fill="rgb(245,108,40)" fg:x="6705" fg:w="145"/><text x="12.8114%" y="175.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="12.5184%" y="181" width="0.2819%" height="15" fill="rgb(249,40,9)" fg:x="6705" fg:w="151"/><text x="12.8114%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.8265%" y="133" width="0.0112%" height="15" fill="rgb(211,122,11)" fg:x="6870" fg:w="6"/><text x="13.1195%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.8377%" y="133" width="0.0299%" height="15" fill="rgb(209,157,28)" fg:x="6876" fg:w="16"/><text x="13.1307%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="12.8004%" y="149" width="0.1830%" height="15" fill="rgb(206,112,46)" fg:x="6856" fg:w="98"/><text x="13.0933%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="12.8004%" y="165" width="0.1867%" height="15" fill="rgb(219,193,0)" fg:x="6856" fg:w="100"/><text x="13.0933%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="12.8004%" y="181" width="0.1960%" height="15" fill="rgb(231,164,54)" fg:x="6856" fg:w="105"/><text x="13.0933%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (370 instructions, 0.69%)</title><rect x="12.5184%" y="197" width="0.6908%" height="15" fill="rgb(214,24,35)" fg:x="6705" fg:w="370"/><text x="12.8114%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2092%" y="133" width="0.0168%" height="15" fill="rgb(229,164,54)" fg:x="7075" fg:w="9"/><text x="13.5022%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2260%" y="133" width="0.0168%" height="15" fill="rgb(237,75,51)" fg:x="7084" fg:w="9"/><text x="13.5190%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2428%" y="133" width="0.0168%" height="15" fill="rgb(215,5,43)" fg:x="7093" fg:w="9"/><text x="13.5358%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.2652%" y="133" width="0.0187%" height="15" fill="rgb(235,185,25)" fg:x="7105" fg:w="10"/><text x="13.5582%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.2092%" y="149" width="0.2464%" height="15" fill="rgb(217,23,33)" fg:x="7075" fg:w="132"/><text x="13.5022%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="13.2092%" y="165" width="0.2651%" height="15" fill="rgb(229,140,51)" fg:x="7075" fg:w="142"/><text x="13.5022%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.2092%" y="181" width="0.2707%" height="15" fill="rgb(246,160,45)" fg:x="7075" fg:w="145"/><text x="13.5022%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.4912%" y="133" width="0.0168%" height="15" fill="rgb(254,71,40)" fg:x="7226" fg:w="9"/><text x="13.7841%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.5080%" y="133" width="0.0168%" height="15" fill="rgb(253,19,45)" fg:x="7235" fg:w="9"/><text x="13.8009%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.5248%" y="133" width="0.0168%" height="15" fill="rgb(212,195,20)" fg:x="7244" fg:w="9"/><text x="13.8177%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.5472%" y="133" width="0.0187%" height="15" fill="rgb(242,36,34)" fg:x="7256" fg:w="10"/><text x="13.8401%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.4912%" y="149" width="0.2464%" height="15" fill="rgb(238,110,2)" fg:x="7226" fg:w="132"/><text x="13.7841%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="13.4912%" y="165" width="0.2651%" height="15" fill="rgb(226,71,52)" fg:x="7226" fg:w="142"/><text x="13.7841%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.4912%" y="181" width="0.2707%" height="15" fill="rgb(234,99,49)" fg:x="7226" fg:w="145"/><text x="13.7841%" y="191.50"></text></g><g><title>__rust_alloc (302 instructions, 0.56%)</title><rect x="13.2092%" y="197" width="0.5638%" height="15" fill="rgb(234,178,45)" fg:x="7075" fg:w="302"/><text x="13.5022%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="13.7992%" y="149" width="0.0112%" height="15" fill="rgb(227,229,32)" fg:x="7391" fg:w="6"/><text x="14.0922%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="13.8104%" y="149" width="0.0299%" height="15" fill="rgb(223,85,48)" fg:x="7397" fg:w="16"/><text x="14.1034%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="13.7731%" y="165" width="0.1830%" height="15" fill="rgb(247,115,25)" fg:x="7377" fg:w="98"/><text x="14.0660%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="13.7731%" y="181" width="0.1867%" height="15" fill="rgb(214,144,44)" fg:x="7377" fg:w="100"/><text x="14.0660%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="13.7731%" y="197" width="0.1960%" height="15" fill="rgb(206,64,25)" fg:x="7377" fg:w="105"/><text x="14.0660%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="13.9691%" y="165" width="0.7711%" height="15" fill="rgb(213,9,34)" fg:x="7482" fg:w="413"/><text x="14.2621%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="13.9691%" y="181" width="0.7786%" height="15" fill="rgb(233,227,40)" fg:x="7482" fg:w="417"/><text x="14.2621%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.82%)</title><rect x="13.9691%" y="197" width="0.8159%" height="15" fill="rgb(230,129,10)" fg:x="7482" fg:w="437"/><text x="14.2621%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.69%)</title><rect x="14.7850%" y="181" width="0.6871%" height="15" fill="rgb(207,225,46)" fg:x="7919" fg:w="368"/><text x="15.0780%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.69%)</title><rect x="14.7850%" y="197" width="0.6945%" height="15" fill="rgb(253,9,12)" fg:x="7919" fg:w="372"/><text x="15.0780%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (8,112 instructions, 15.15%)</title><rect x="0.9839%" y="213" width="15.1453%" height="15" fill="rgb(252,217,45)" fg:x="527" fg:w="8112"/><text x="1.2769%" y="223.50">candid::de::IDLDese..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="16.1293%" y="197" width="0.7151%" height="15" fill="rgb(216,22,27)" fg:x="8639" fg:w="383"/><text x="16.4222%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="16.8518%" y="197" width="0.7151%" height="15" fill="rgb(227,17,11)" fg:x="9026" fg:w="383"/><text x="17.1448%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.45%)</title><rect x="16.1293%" y="213" width="1.4451%" height="15" fill="rgb(239,68,50)" fg:x="8639" fg:w="774"/><text x="16.4222%" y="223.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="17.5744%" y="149" width="0.0149%" height="15" fill="rgb(219,174,20)" fg:x="9413" fg:w="8"/><text x="17.8673%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 instructions, 0.10%)</title><rect x="17.5744%" y="165" width="0.1008%" height="15" fill="rgb(244,158,13)" fg:x="9413" fg:w="54"/><text x="17.8673%" y="175.50"></text></g><g><title>candid::types::internal::find_type (73 instructions, 0.14%)</title><rect x="17.5744%" y="181" width="0.1363%" height="15" fill="rgb(224,207,53)" fg:x="9413" fg:w="73"/><text x="17.8673%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.7106%" y="101" width="0.0168%" height="15" fill="rgb(245,54,52)" fg:x="9486" fg:w="9"/><text x="18.0036%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.7275%" y="101" width="0.0168%" height="15" fill="rgb(247,192,2)" fg:x="9495" fg:w="9"/><text x="18.0204%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.7443%" y="101" width="0.0168%" height="15" fill="rgb(232,204,40)" fg:x="9504" fg:w="9"/><text x="18.0372%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.03%)</title><rect x="17.7611%" y="101" width="0.0261%" height="15" fill="rgb(225,200,52)" fg:x="9513" fg:w="14"/><text x="18.0540%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.23%)</title><rect x="17.7106%" y="117" width="0.2315%" height="15" fill="rgb(251,173,34)" fg:x="9486" fg:w="124"/><text x="18.0036%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.25%)</title><rect x="17.7106%" y="133" width="0.2502%" height="15" fill="rgb(225,213,54)" fg:x="9486" fg:w="134"/><text x="18.0036%" y="143.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.26%)</title><rect x="17.7106%" y="149" width="0.2558%" height="15" fill="rgb(205,157,31)" fg:x="9486" fg:w="137"/><text x="18.0036%" y="159.50"></text></g><g><title>__rust_alloc (143 instructions, 0.27%)</title><rect x="17.7106%" y="165" width="0.2670%" height="15" fill="rgb(246,120,16)" fg:x="9486" fg:w="143"/><text x="18.0036%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (188 instructions, 0.35%)</title><rect x="17.7106%" y="181" width="0.3510%" height="15" fill="rgb(228,198,1)" fg:x="9486" fg:w="188"/><text x="18.0036%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="18.0616%" y="149" width="0.0149%" height="15" fill="rgb(230,159,39)" fg:x="9674" fg:w="8"/><text x="18.3546%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="18.0766%" y="133" width="0.1008%" height="15" fill="rgb(232,77,46)" fg:x="9682" fg:w="54"/><text x="18.3696%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="18.1774%" y="133" width="0.1680%" height="15" fill="rgb(225,11,11)" fg:x="9736" fg:w="90"/><text x="18.4704%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.30%)</title><rect x="18.3454%" y="133" width="0.3043%" height="15" fill="rgb(208,181,3)" fg:x="9826" fg:w="163"/><text x="18.6384%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="18.0766%" y="149" width="1.0381%" height="15" fill="rgb(216,119,9)" fg:x="9682" fg:w="556"/><text x="18.3696%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.18%)</title><rect x="19.1147%" y="149" width="0.1848%" height="15" fill="rgb(219,74,34)" fg:x="10238" fg:w="99"/><text x="19.4076%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (826 instructions, 1.54%)</title><rect x="18.0616%" y="165" width="1.5422%" height="15" fill="rgb(251,131,47)" fg:x="9674" fg:w="826"/><text x="18.3546%" y="175.50"></text></g><g><title>candid::types::internal::env_add (853 instructions, 1.59%)</title><rect x="18.0616%" y="181" width="1.5926%" height="15" fill="rgb(214,163,3)" fg:x="9674" fg:w="853"/><text x="18.3546%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.6542%" y="101" width="0.0168%" height="15" fill="rgb(244,117,18)" fg:x="10527" fg:w="9"/><text x="19.9472%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.6710%" y="101" width="0.0168%" height="15" fill="rgb(219,175,23)" fg:x="10536" fg:w="9"/><text x="19.9640%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::TreeChunk::leftmost_child (10 instructions, 0.02%)</title><rect x="19.7065%" y="101" width="0.0187%" height="15" fill="rgb(212,216,54)" fg:x="10555" fg:w="10"/><text x="19.9995%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.10%)</title><rect x="19.7326%" y="101" width="0.1046%" height="15" fill="rgb(237,57,30)" fg:x="10569" fg:w="56"/><text x="20.0256%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.8372%" y="101" width="0.0168%" height="15" fill="rgb(249,76,35)" fg:x="10625" fg:w="9"/><text x="20.1302%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.8652%" y="101" width="0.0187%" height="15" fill="rgb(216,124,25)" fg:x="10640" fg:w="10"/><text x="20.1582%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (237 instructions, 0.44%)</title><rect x="19.6542%" y="117" width="0.4425%" height="15" fill="rgb(226,95,21)" fg:x="10527" fg:w="237"/><text x="19.9472%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (247 instructions, 0.46%)</title><rect x="19.6542%" y="133" width="0.4612%" height="15" fill="rgb(223,124,46)" fg:x="10527" fg:w="247"/><text x="19.9472%" y="143.50"></text></g><g><title>__rdl_alloc (250 instructions, 0.47%)</title><rect x="19.6542%" y="149" width="0.4668%" height="15" fill="rgb(249,170,10)" fg:x="10527" fg:w="250"/><text x="19.9472%" y="159.50"></text></g><g><title>__rust_alloc (256 instructions, 0.48%)</title><rect x="19.6542%" y="165" width="0.4780%" height="15" fill="rgb(237,40,9)" fg:x="10527" fg:w="256"/><text x="19.9472%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (268 instructions, 0.50%)</title><rect x="19.6542%" y="181" width="0.5004%" height="15" fill="rgb(220,54,29)" fg:x="10527" fg:w="268"/><text x="19.9472%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="20.1546%" y="149" width="0.0149%" height="15" fill="rgb(253,134,4)" fg:x="10795" fg:w="8"/><text x="20.4476%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="20.1695%" y="133" width="0.1008%" height="15" fill="rgb(207,123,2)" fg:x="10803" fg:w="54"/><text x="20.4625%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="20.2703%" y="133" width="0.1680%" height="15" fill="rgb(236,176,3)" fg:x="10857" fg:w="90"/><text x="20.5633%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.30%)</title><rect x="20.4384%" y="133" width="0.3043%" height="15" fill="rgb(238,0,10)" fg:x="10947" fg:w="163"/><text x="20.7313%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="20.1695%" y="149" width="1.0381%" height="15" fill="rgb(234,112,49)" fg:x="10803" fg:w="556"/><text x="20.4625%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.14%)</title><rect x="21.2076%" y="133" width="0.1382%" height="15" fill="rgb(236,91,4)" fg:x="11359" fg:w="74"/><text x="21.5006%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.15%)</title><rect x="21.2076%" y="149" width="0.1456%" height="15" fill="rgb(213,56,12)" fg:x="11359" fg:w="78"/><text x="21.5006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="21.3794%" y="85" width="0.0112%" height="15" fill="rgb(216,139,21)" fg:x="11451" fg:w="6"/><text x="21.6723%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="21.3906%" y="85" width="0.0299%" height="15" fill="rgb(222,115,12)" fg:x="11457" fg:w="16"/><text x="21.6835%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="21.3532%" y="101" width="0.1830%" height="15" fill="rgb(223,13,38)" fg:x="11437" fg:w="98"/><text x="21.6462%" y="111.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="21.3532%" y="117" width="0.1867%" height="15" fill="rgb(212,78,8)" fg:x="11437" fg:w="100"/><text x="21.6462%" y="127.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="21.3532%" y="133" width="0.1960%" height="15" fill="rgb(247,6,12)" fg:x="11437" fg:w="105"/><text x="21.6462%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.26%)</title><rect x="21.3532%" y="149" width="0.2558%" height="15" fill="rgb(240,151,13)" fg:x="11437" fg:w="137"/><text x="21.6462%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (952 instructions, 1.78%)</title><rect x="20.1546%" y="165" width="1.7774%" height="15" fill="rgb(228,172,8)" fg:x="10795" fg:w="952"/><text x="20.4476%" y="175.50"></text></g><g><title>candid::types::internal::env_add (979 instructions, 1.83%)</title><rect x="20.1546%" y="181" width="1.8278%" height="15" fill="rgb(231,209,19)" fg:x="10795" fg:w="979"/><text x="20.4476%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (8 instructions, 0.01%)</title><rect x="21.9824%" y="149" width="0.0149%" height="15" fill="rgb(205,152,9)" fg:x="11774" fg:w="8"/><text x="22.2754%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="21.9973%" y="117" width="0.1008%" height="15" fill="rgb(241,43,19)" fg:x="11782" fg:w="54"/><text x="22.2903%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="21.9973%" y="133" width="0.1475%" height="15" fill="rgb(224,115,29)" fg:x="11782" fg:w="79"/><text x="22.2903%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.57%)</title><rect x="21.9973%" y="149" width="0.5657%" height="15" fill="rgb(208,29,4)" fg:x="11782" fg:w="303"/><text x="22.2903%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (18 instructions, 0.03%)</title><rect x="22.5631%" y="149" width="0.0336%" height="15" fill="rgb(208,35,46)" fg:x="12085" fg:w="18"/><text x="22.8560%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.5967%" y="149" width="0.0205%" height="15" fill="rgb(234,183,21)" fg:x="12103" fg:w="11"/><text x="22.8896%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (521 instructions, 0.97%)</title><rect x="21.9824%" y="165" width="0.9727%" height="15" fill="rgb(231,109,31)" fg:x="11774" fg:w="521"/><text x="22.2754%" y="175.50"></text></g><g><title>candid::types::internal::env_id (559 instructions, 1.04%)</title><rect x="21.9824%" y="181" width="1.0437%" height="15" fill="rgb(231,221,28)" fg:x="11774" fg:w="559"/><text x="22.2754%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (3,028 instructions, 5.65%)</title><rect x="17.5744%" y="197" width="5.6534%" height="15" fill="rgb(221,141,41)" fg:x="9413" fg:w="3028"/><text x="17.8673%" y="207.50">candid..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.07%)</title><rect x="23.2277%" y="197" width="0.0709%" height="15" fill="rgb(219,68,40)" fg:x="12441" fg:w="38"/><text x="23.5207%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.3248%" y="133" width="0.0112%" height="15" fill="rgb(247,153,2)" fg:x="12493" fg:w="6"/><text x="23.6178%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.3435%" y="133" width="0.0187%" height="15" fill="rgb(216,159,48)" fg:x="12503" fg:w="10"/><text x="23.6364%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="23.2987%" y="149" width="0.2633%" height="15" fill="rgb(243,213,2)" fg:x="12479" fg:w="141"/><text x="23.5916%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="23.2987%" y="165" width="0.2670%" height="15" fill="rgb(253,76,52)" fg:x="12479" fg:w="143"/><text x="23.5916%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="23.2987%" y="181" width="0.2763%" height="15" fill="rgb(229,105,33)" fg:x="12479" fg:w="148"/><text x="23.5916%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.6609%" y="133" width="0.0112%" height="15" fill="rgb(230,133,14)" fg:x="12673" fg:w="6"/><text x="23.9538%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.6795%" y="133" width="0.0187%" height="15" fill="rgb(217,131,41)" fg:x="12683" fg:w="10"/><text x="23.9725%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="23.6347%" y="149" width="0.2633%" height="15" fill="rgb(210,62,9)" fg:x="12659" fg:w="141"/><text x="23.9277%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="23.6347%" y="165" width="0.2670%" height="15" fill="rgb(227,97,36)" fg:x="12659" fg:w="143"/><text x="23.9277%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="23.6347%" y="181" width="0.2763%" height="15" fill="rgb(209,22,30)" fg:x="12659" fg:w="148"/><text x="23.9277%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.67%)</title><rect x="23.2987%" y="197" width="0.6721%" height="15" fill="rgb(222,136,32)" fg:x="12479" fg:w="360"/><text x="23.5916%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="23.9708%" y="181" width="0.0523%" height="15" fill="rgb(240,166,13)" fg:x="12839" fg:w="28"/><text x="24.2638%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (105 instructions, 0.20%)</title><rect x="23.9708%" y="197" width="0.1960%" height="15" fill="rgb(210,202,42)" fg:x="12839" fg:w="105"/><text x="24.2638%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="24.1668%" y="197" width="0.0205%" height="15" fill="rgb(252,176,30)" fg:x="12944" fg:w="11"/><text x="24.4598%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="24.1874%" y="197" width="0.0205%" height="15" fill="rgb(226,169,21)" fg:x="12955" fg:w="11"/><text x="24.4803%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="24.2079%" y="197" width="0.0205%" height="15" fill="rgb(230,58,24)" fg:x="12966" fg:w="11"/><text x="24.5009%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,736 instructions, 6.98%)</title><rect x="17.5744%" y="213" width="6.9752%" height="15" fill="rgb(228,164,27)" fg:x="9413" fg:w="3736"/><text x="17.8673%" y="223.50">candid::..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="24.5496%" y="197" width="0.7711%" height="15" fill="rgb(221,122,53)" fg:x="13149" fg:w="413"/><text x="24.8425%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="24.5496%" y="213" width="0.7786%" height="15" fill="rgb(212,19,22)" fg:x="13149" fg:w="417"/><text x="24.8425%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="25.3281%" y="197" width="0.0355%" height="15" fill="rgb(236,63,42)" fg:x="13566" fg:w="19"/><text x="25.6211%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.4047%" y="149" width="0.0112%" height="15" fill="rgb(229,157,1)" fg:x="13607" fg:w="6"/><text x="25.6976%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.4233%" y="149" width="0.0187%" height="15" fill="rgb(243,178,14)" fg:x="13617" fg:w="10"/><text x="25.7163%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.36%)</title><rect x="25.3636%" y="165" width="0.3603%" height="15" fill="rgb(210,105,3)" fg:x="13585" fg:w="193"/><text x="25.6566%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.36%)</title><rect x="25.3636%" y="181" width="0.3641%" height="15" fill="rgb(225,174,54)" fg:x="13585" fg:w="195"/><text x="25.6566%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.37%)</title><rect x="25.3636%" y="197" width="0.3734%" height="15" fill="rgb(234,129,42)" fg:x="13585" fg:w="200"/><text x="25.6566%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.7781%" y="133" width="0.0112%" height="15" fill="rgb(211,104,11)" fg:x="13807" fg:w="6"/><text x="26.0711%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.7968%" y="133" width="0.0187%" height="15" fill="rgb(219,136,0)" fg:x="13817" fg:w="10"/><text x="26.0897%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="25.8154%" y="133" width="0.1382%" height="15" fill="rgb(226,79,53)" fg:x="13827" fg:w="74"/><text x="26.1084%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.45%)</title><rect x="25.7370%" y="149" width="0.4537%" height="15" fill="rgb(243,151,32)" fg:x="13785" fg:w="243"/><text x="26.0300%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.46%)</title><rect x="25.7370%" y="165" width="0.4574%" height="15" fill="rgb(221,142,45)" fg:x="13785" fg:w="245"/><text x="26.0300%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.47%)</title><rect x="25.7370%" y="181" width="0.4668%" height="15" fill="rgb(208,217,24)" fg:x="13785" fg:w="250"/><text x="26.0300%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.53%)</title><rect x="25.7370%" y="197" width="0.5265%" height="15" fill="rgb(240,148,42)" fg:x="13785" fg:w="282"/><text x="26.0300%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="26.2635%" y="197" width="0.0205%" height="15" fill="rgb(221,213,14)" fg:x="14067" fg:w="11"/><text x="26.5565%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (614 instructions, 1.15%)</title><rect x="25.3281%" y="213" width="1.1464%" height="15" fill="rgb(254,215,23)" fg:x="13566" fg:w="614"/><text x="25.6211%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,756 instructions, 25.68%)</title><rect x="0.9839%" y="229" width="25.6829%" height="15" fill="rgb(250,8,29)" fg:x="527" fg:w="13756"/><text x="1.2769%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="26.6929%" y="181" width="0.0112%" height="15" fill="rgb(211,220,10)" fg:x="14297" fg:w="6"/><text x="26.9859%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.10%)</title><rect x="26.7116%" y="181" width="0.1046%" height="15" fill="rgb(234,99,1)" fg:x="14307" fg:w="56"/><text x="27.0046%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="26.8162%" y="181" width="0.0187%" height="15" fill="rgb(222,187,35)" fg:x="14363" fg:w="10"/><text x="27.1091%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="26.8348%" y="181" width="0.1382%" height="15" fill="rgb(241,42,32)" fg:x="14373" fg:w="74"/><text x="27.1278%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.43%)</title><rect x="26.6668%" y="197" width="0.4257%" height="15" fill="rgb(251,145,22)" fg:x="14283" fg:w="228"/><text x="26.9598%" y="207.50"></text></g><g><title>__rdl_dealloc (230 instructions, 0.43%)</title><rect x="26.6668%" y="213" width="0.4294%" height="15" fill="rgb(235,170,22)" fg:x="14283" fg:w="230"/><text x="26.9598%" y="223.50"></text></g><g><title>__rust_dealloc (235 instructions, 0.44%)</title><rect x="26.6668%" y="229" width="0.4388%" height="15" fill="rgb(251,158,16)" fg:x="14283" fg:w="235"/><text x="26.9598%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (14,243 instructions, 26.59%)</title><rect x="0.5900%" y="245" width="26.5921%" height="15" fill="rgb(244,126,45)" fg:x="316" fg:w="14243"/><text x="0.8830%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>heap::MAP::__getit (6 instructions, 0.01%)</title><rect x="27.1821%" y="245" width="0.0112%" height="15" fill="rgb(212,183,12)" fg:x="14559" fg:w="6"/><text x="27.4751%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="27.1933%" y="245" width="1.3573%" height="15" fill="rgb(207,97,19)" fg:x="14565" fg:w="727"/><text x="27.4863%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="28.5506%" y="245" width="1.4115%" height="15" fill="rgb(213,102,48)" fg:x="15292" fg:w="756"/><text x="28.8436%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="29.9621%" y="245" width="1.2789%" height="15" fill="rgb(251,10,9)" fg:x="16048" fg:w="685"/><text x="30.2551%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="31.2410%" y="245" width="1.3573%" height="15" fill="rgb(246,134,26)" fg:x="16733" fg:w="727"/><text x="31.5340%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="32.5983%" y="245" width="1.3573%" height="15" fill="rgb(252,110,45)" fg:x="17460" fg:w="727"/><text x="32.8913%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (772 instructions, 1.44%)</title><rect x="33.9557%" y="245" width="1.4413%" height="15" fill="rgb(213,52,48)" fg:x="18187" fg:w="772"/><text x="34.2486%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="35.3970%" y="245" width="1.4115%" height="15" fill="rgb(248,175,0)" fg:x="18959" fg:w="756"/><text x="35.6900%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="36.8085%" y="245" width="1.3573%" height="15" fill="rgb(252,225,29)" fg:x="19715" fg:w="727"/><text x="37.1015%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="38.1658%" y="245" width="1.3573%" height="15" fill="rgb(206,131,27)" fg:x="20442" fg:w="727"/><text x="38.4588%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="39.5232%" y="245" width="1.3573%" height="15" fill="rgb(249,179,27)" fg:x="21169" fg:w="727"/><text x="39.8161%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="40.8805%" y="245" width="1.4115%" height="15" fill="rgb(241,67,27)" fg:x="21896" fg:w="756"/><text x="41.1735%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="42.2920%" y="245" width="1.4115%" height="15" fill="rgb(230,56,10)" fg:x="22652" fg:w="756"/><text x="42.5849%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.33%)</title><rect x="43.7034%" y="245" width="1.3331%" height="15" fill="rgb(205,117,24)" fg:x="23408" fg:w="714"/><text x="43.9964%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="45.0365%" y="245" width="1.3573%" height="15" fill="rgb(230,195,15)" fg:x="24122" fg:w="727"/><text x="45.3295%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="46.3938%" y="245" width="1.3573%" height="15" fill="rgb(231,56,35)" fg:x="24849" fg:w="727"/><text x="46.6868%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="47.7512%" y="245" width="1.3573%" height="15" fill="rgb(248,124,45)" fg:x="25576" fg:w="727"/><text x="48.0441%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="49.1085%" y="245" width="1.3573%" height="15" fill="rgb(235,206,1)" fg:x="26303" fg:w="727"/><text x="49.4015%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="50.4658%" y="245" width="1.3573%" height="15" fill="rgb(208,165,15)" fg:x="27030" fg:w="727"/><text x="50.7588%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.33%)</title><rect x="51.8232%" y="245" width="1.3331%" height="15" fill="rgb(216,34,13)" fg:x="27757" fg:w="714"/><text x="52.1161%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="53.1562%" y="245" width="1.3573%" height="15" fill="rgb(234,210,20)" fg:x="28471" fg:w="727"/><text x="53.4492%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="54.5135%" y="245" width="1.3573%" height="15" fill="rgb(242,106,50)" fg:x="29198" fg:w="727"/><text x="54.8065%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="55.8709%" y="245" width="1.4115%" height="15" fill="rgb(233,110,24)" fg:x="29925" fg:w="756"/><text x="56.1638%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="57.2824%" y="245" width="1.3573%" height="15" fill="rgb(249,54,14)" fg:x="30681" fg:w="727"/><text x="57.5753%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="58.6397%" y="245" width="1.4115%" height="15" fill="rgb(253,88,10)" fg:x="31408" fg:w="756"/><text x="58.9327%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="60.0512%" y="245" width="1.3573%" height="15" fill="rgb(205,39,48)" fg:x="32164" fg:w="727"/><text x="60.3441%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="61.4085%" y="245" width="1.3573%" height="15" fill="rgb(218,93,35)" fg:x="32891" fg:w="727"/><text x="61.7015%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="62.7658%" y="245" width="1.4115%" height="15" fill="rgb(208,71,36)" fg:x="33618" fg:w="756"/><text x="63.0588%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="64.1773%" y="245" width="1.3573%" height="15" fill="rgb(242,157,32)" fg:x="34374" fg:w="727"/><text x="64.4703%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="65.5346%" y="245" width="1.2789%" height="15" fill="rgb(235,104,29)" fg:x="35101" fg:w="685"/><text x="65.8276%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (743 instructions, 1.39%)</title><rect x="66.8135%" y="245" width="1.3872%" height="15" fill="rgb(246,61,34)" fg:x="35786" fg:w="743"/><text x="67.1065%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="68.2007%" y="245" width="1.3573%" height="15" fill="rgb(250,112,28)" fg:x="36529" fg:w="727"/><text x="68.4937%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="69.5581%" y="245" width="1.3573%" height="15" fill="rgb(238,162,23)" fg:x="37256" fg:w="727"/><text x="69.8510%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="70.9154%" y="245" width="1.3573%" height="15" fill="rgb(227,65,8)" fg:x="37983" fg:w="727"/><text x="71.2084%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="72.2727%" y="245" width="1.3573%" height="15" fill="rgb(227,127,40)" fg:x="38710" fg:w="727"/><text x="72.5657%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="73.6301%" y="245" width="1.3573%" height="15" fill="rgb(230,14,26)" fg:x="39437" fg:w="727"/><text x="73.9230%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="74.9874%" y="245" width="1.4115%" height="15" fill="rgb(228,139,14)" fg:x="40164" fg:w="756"/><text x="75.2804%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="76.3989%" y="245" width="1.3573%" height="15" fill="rgb(239,107,30)" fg:x="40920" fg:w="727"/><text x="76.6918%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="77.7562%" y="245" width="1.4656%" height="15" fill="rgb(238,121,43)" fg:x="41647" fg:w="785"/><text x="78.0492%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="79.2218%" y="245" width="1.4656%" height="15" fill="rgb(245,88,2)" fg:x="42432" fg:w="785"/><text x="79.5148%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="80.6874%" y="245" width="1.2789%" height="15" fill="rgb(247,186,54)" fg:x="43217" fg:w="685"/><text x="80.9804%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="81.9664%" y="245" width="1.3573%" height="15" fill="rgb(242,34,43)" fg:x="43902" fg:w="727"/><text x="82.2593%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="83.3237%" y="245" width="1.4115%" height="15" fill="rgb(229,108,7)" fg:x="44629" fg:w="756"/><text x="83.6167%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="84.7352%" y="245" width="1.3573%" height="15" fill="rgb(243,52,43)" fg:x="45385" fg:w="727"/><text x="85.0281%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="86.0925%" y="245" width="1.3573%" height="15" fill="rgb(225,221,41)" fg:x="46112" fg:w="727"/><text x="86.3855%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="87.4498%" y="245" width="1.4115%" height="15" fill="rgb(254,217,48)" fg:x="46839" fg:w="756"/><text x="87.7428%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="88.8613%" y="245" width="1.2789%" height="15" fill="rgb(215,90,31)" fg:x="47595" fg:w="685"/><text x="89.1543%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="90.1402%" y="245" width="1.4115%" height="15" fill="rgb(254,105,35)" fg:x="48280" fg:w="756"/><text x="90.4332%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="91.5517%" y="245" width="1.3573%" height="15" fill="rgb(217,28,36)" fg:x="49036" fg:w="727"/><text x="91.8447%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="92.9090%" y="245" width="1.3573%" height="15" fill="rgb(211,89,42)" fg:x="49763" fg:w="727"/><text x="93.2020%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="94.2664%" y="245" width="1.3573%" height="15" fill="rgb(209,206,5)" fg:x="50490" fg:w="727"/><text x="94.5593%" y="255.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="95.6237%" y="213" width="0.0149%" height="15" fill="rgb(242,119,30)" fg:x="51217" fg:w="8"/><text x="95.9167%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="95.6648%" y="133" width="0.0112%" height="15" fill="rgb(238,106,11)" fg:x="51239" fg:w="6"/><text x="95.9577%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="95.6760%" y="133" width="0.0187%" height="15" fill="rgb(232,60,8)" fg:x="51245" fg:w="10"/><text x="95.9689%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="95.6386%" y="149" width="0.1307%" height="15" fill="rgb(218,7,45)" fg:x="51225" fg:w="70"/><text x="95.9316%" y="159.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="95.6386%" y="165" width="0.1344%" height="15" fill="rgb(215,56,11)" fg:x="51225" fg:w="72"/><text x="95.9316%" y="175.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="95.6386%" y="181" width="0.1438%" height="15" fill="rgb(240,69,0)" fg:x="51225" fg:w="77"/><text x="95.9316%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (109 instructions, 0.20%)</title><rect x="95.6386%" y="197" width="0.2035%" height="15" fill="rgb(250,48,39)" fg:x="51225" fg:w="109"/><text x="95.9316%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.25%)</title><rect x="95.8421%" y="181" width="0.2520%" height="15" fill="rgb(242,113,12)" fg:x="51334" fg:w="135"/><text x="96.1351%" y="191.50"></text></g><g><title>memset (139 instructions, 0.26%)</title><rect x="95.8421%" y="197" width="0.2595%" height="15" fill="rgb(214,98,40)" fg:x="51334" fg:w="139"/><text x="96.1351%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (323 instructions, 0.60%)</title><rect x="95.6386%" y="213" width="0.6031%" height="15" fill="rgb(246,1,24)" fg:x="51225" fg:w="323"/><text x="95.9316%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (416 instructions, 0.78%)</title><rect x="95.6237%" y="229" width="0.7767%" height="15" fill="rgb(210,149,23)" fg:x="51217" fg:w="416"/><text x="95.9167%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="96.4060%" y="197" width="0.0616%" height="15" fill="rgb(220,80,18)" fg:x="51636" fg:w="33"/><text x="96.6989%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.16%)</title><rect x="96.4060%" y="213" width="0.1643%" height="15" fill="rgb(222,59,48)" fg:x="51636" fg:w="88"/><text x="96.6989%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.5703%" y="101" width="0.0168%" height="15" fill="rgb(205,111,38)" fg:x="51724" fg:w="9"/><text x="96.8632%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.5871%" y="101" width="0.0168%" height="15" fill="rgb(226,196,2)" fg:x="51733" fg:w="9"/><text x="96.8800%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.6039%" y="101" width="0.0168%" height="15" fill="rgb(214,164,28)" fg:x="51742" fg:w="9"/><text x="96.8968%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="96.6263%" y="101" width="0.0187%" height="15" fill="rgb(238,48,29)" fg:x="51754" fg:w="10"/><text x="96.9192%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="96.5703%" y="117" width="0.2464%" height="15" fill="rgb(247,107,28)" fg:x="51724" fg:w="132"/><text x="96.8632%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="96.5703%" y="133" width="0.2651%" height="15" fill="rgb(219,172,54)" fg:x="51724" fg:w="142"/><text x="96.8632%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="96.5703%" y="149" width="0.2707%" height="15" fill="rgb(209,73,24)" fg:x="51724" fg:w="145"/><text x="96.8632%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="96.5703%" y="165" width="0.2819%" height="15" fill="rgb(229,225,45)" fg:x="51724" fg:w="151"/><text x="96.8632%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="96.5703%" y="181" width="0.3417%" height="15" fill="rgb(225,117,30)" fg:x="51724" fg:w="183"/><text x="96.8632%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 instructions, 0.47%)</title><rect x="96.5703%" y="197" width="0.4668%" height="15" fill="rgb(247,12,17)" fg:x="51724" fg:w="250"/><text x="96.8632%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="97.0370%" y="197" width="0.0187%" height="15" fill="rgb(220,105,39)" fg:x="51974" fg:w="10"/><text x="97.3300%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.0557%" y="181" width="0.0205%" height="15" fill="rgb(244,40,52)" fg:x="51984" fg:w="11"/><text x="97.3487%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.0837%" y="181" width="0.0205%" height="15" fill="rgb(244,122,27)" fg:x="51999" fg:w="11"/><text x="97.3767%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="97.0557%" y="197" width="0.0560%" height="15" fill="rgb(234,135,46)" fg:x="51984" fg:w="30"/><text x="97.3487%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (492 instructions, 0.92%)</title><rect x="96.5703%" y="213" width="0.9186%" height="15" fill="rgb(225,172,7)" fg:x="51724" fg:w="492"/><text x="96.8632%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="97.4888%" y="213" width="0.0112%" height="15" fill="rgb(221,153,16)" fg:x="52216" fg:w="6"/><text x="97.7818%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.06%)</title><rect x="97.5000%" y="197" width="0.0579%" height="15" fill="rgb(219,166,38)" fg:x="52222" fg:w="31"/><text x="97.7930%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.16%)</title><rect x="97.5000%" y="213" width="0.1606%" height="15" fill="rgb(225,166,5)" fg:x="52222" fg:w="86"/><text x="97.7930%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="97.6606%" y="213" width="0.0112%" height="15" fill="rgb(246,171,10)" fg:x="52308" fg:w="6"/><text x="97.9536%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="97.6718%" y="213" width="0.0280%" height="15" fill="rgb(226,228,14)" fg:x="52314" fg:w="15"/><text x="97.9648%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (772 instructions, 1.44%)</title><rect x="96.4060%" y="229" width="1.4413%" height="15" fill="rgb(212,110,10)" fg:x="51636" fg:w="772"/><text x="96.6989%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="97.8828%" y="181" width="0.0112%" height="15" fill="rgb(210,62,44)" fg:x="52427" fg:w="6"/><text x="98.1758%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="97.8940%" y="181" width="0.0187%" height="15" fill="rgb(220,61,4)" fg:x="52433" fg:w="10"/><text x="98.1870%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="97.8566%" y="197" width="0.1307%" height="15" fill="rgb(248,171,13)" fg:x="52413" fg:w="70"/><text x="98.1496%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="97.8566%" y="213" width="0.1344%" height="15" fill="rgb(232,59,54)" fg:x="52413" fg:w="72"/><text x="98.1496%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="97.8566%" y="229" width="0.1438%" height="15" fill="rgb(232,89,32)" fg:x="52413" fg:w="77"/><text x="98.1496%" y="239.50"></text></g><g><title>candid::utils::write_args (1,349 instructions, 2.52%)</title><rect x="95.6237%" y="245" width="2.5186%" height="15" fill="rgb(223,218,7)" fg:x="51217" fg:w="1349"/><text x="95.9167%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.1684%" y="197" width="0.0112%" height="15" fill="rgb(248,170,16)" fg:x="52580" fg:w="6"/><text x="98.4614%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="98.1796%" y="197" width="0.0299%" height="15" fill="rgb(246,84,42)" fg:x="52586" fg:w="16"/><text x="98.4726%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="98.1423%" y="213" width="0.1830%" height="15" fill="rgb(246,176,17)" fg:x="52566" fg:w="98"/><text x="98.4353%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="98.1423%" y="229" width="0.1867%" height="15" fill="rgb(234,117,16)" fg:x="52566" fg:w="100"/><text x="98.4353%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.3794%" y="197" width="0.0112%" height="15" fill="rgb(236,94,11)" fg:x="52693" fg:w="6"/><text x="98.6724%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.10%)</title><rect x="98.3981%" y="197" width="0.1046%" height="15" fill="rgb(213,44,40)" fg:x="52703" fg:w="56"/><text x="98.6911%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.5026%" y="197" width="0.0187%" height="15" fill="rgb(205,150,47)" fg:x="52759" fg:w="10"/><text x="98.7956%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="98.5213%" y="197" width="0.1382%" height="15" fill="rgb(220,136,43)" fg:x="52769" fg:w="74"/><text x="98.8143%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (280 instructions, 0.52%)</title><rect x="98.3383%" y="213" width="0.5228%" height="15" fill="rgb(243,180,3)" fg:x="52671" fg:w="280"/><text x="98.6313%" y="223.50"></text></g><g><title>__rdl_dealloc (282 instructions, 0.53%)</title><rect x="98.3383%" y="229" width="0.5265%" height="15" fill="rgb(235,30,37)" fg:x="52671" fg:w="282"/><text x="98.6313%" y="239.50"></text></g><g><title>__rust_dealloc (392 instructions, 0.73%)</title><rect x="98.1423%" y="245" width="0.7319%" height="15" fill="rgb(243,166,37)" fg:x="52566" fg:w="392"/><text x="98.4353%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (53,550 instructions, 99.98%)</title><rect x="0.0149%" y="261" width="99.9795%" height="15" fill="rgb(246,105,15)" fg:x="8" fg:w="53550"/><text x="0.3079%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (53,561 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,186,43)" fg:x="0" fg:w="53561"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_get (53,561 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(207,95,12)" fg:x="0" fg:w="53561"/><text x="0.2930%" y="287.50">canister_update batch_get</text></g></svg></svg>