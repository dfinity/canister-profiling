<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="50652"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.0000%" y="229" width="0.1619%" height="15" fill="rgb(232,162,36)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.1619%" y="229" width="0.1619%" height="15" fill="rgb(222,210,34)" fg:x="82" fg:w="82"/><text x="0.4549%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.3238%" y="181" width="0.1619%" height="15" fill="rgb(230,12,43)" fg:x="164" fg:w="82"/><text x="0.6167%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 2.25%)</title><rect x="0.3238%" y="197" width="2.2487%" height="15" fill="rgb(223,140,29)" fg:x="164" fg:w="1139"/><text x="0.6167%" y="207.50">i..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="2.5725%" y="165" width="0.1007%" height="15" fill="rgb(241,91,25)" fg:x="1303" fg:w="51"/><text x="2.8654%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.6731%" y="149" width="0.0118%" height="15" fill="rgb(231,63,32)" fg:x="1354" fg:w="6"/><text x="2.9661%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.86%)</title><rect x="2.6731%" y="165" width="0.8627%" height="15" fill="rgb(243,96,13)" fg:x="1354" fg:w="437"/><text x="2.9661%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="3.5359%" y="165" width="0.1264%" height="15" fill="rgb(215,220,14)" fg:x="1791" fg:w="64"/><text x="3.8289%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.6622%" y="165" width="0.1500%" height="15" fill="rgb(227,80,23)" fg:x="1855" fg:w="76"/><text x="3.9552%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.8123%" y="165" width="0.1500%" height="15" fill="rgb(254,24,25)" fg:x="1931" fg:w="76"/><text x="4.1053%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.9623%" y="165" width="0.1500%" height="15" fill="rgb(205,98,38)" fg:x="2007" fg:w="76"/><text x="4.2553%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="4.1124%" y="165" width="0.1500%" height="15" fill="rgb(216,200,8)" fg:x="2083" fg:w="76"/><text x="4.4053%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="4.2624%" y="165" width="0.1007%" height="15" fill="rgb(248,186,12)" fg:x="2159" fg:w="51"/><text x="4.5554%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.19%)</title><rect x="4.3631%" y="165" width="0.1876%" height="15" fill="rgb(235,116,45)" fg:x="2210" fg:w="95"/><text x="4.6561%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="4.5507%" y="149" width="0.0118%" height="15" fill="rgb(231,192,2)" fg:x="2305" fg:w="6"/><text x="4.8436%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.86%)</title><rect x="4.5507%" y="165" width="0.8627%" height="15" fill="rgb(249,26,33)" fg:x="2305" fg:w="437"/><text x="4.8436%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="5.4134%" y="165" width="0.0375%" height="15" fill="rgb(237,131,13)" fg:x="2742" fg:w="19"/><text x="5.7064%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="5.4509%" y="133" width="0.1619%" height="15" fill="rgb(244,176,3)" fg:x="2761" fg:w="82"/><text x="5.7439%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="5.6128%" y="101" width="0.1323%" height="15" fill="rgb(215,180,24)" fg:x="2843" fg:w="67"/><text x="5.9058%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="5.6128%" y="117" width="0.1895%" height="15" fill="rgb(225,33,19)" fg:x="2843" fg:w="96"/><text x="5.9058%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="5.8023%" y="69" width="0.0217%" height="15" fill="rgb(217,124,25)" fg:x="2939" fg:w="11"/><text x="6.0953%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="5.8241%" y="53" width="0.0691%" height="15" fill="rgb(212,118,39)" fg:x="2950" fg:w="35"/><text x="6.1170%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="5.8241%" y="69" width="0.1264%" height="15" fill="rgb(212,155,54)" fg:x="2950" fg:w="64"/><text x="6.1170%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.28%)</title><rect x="5.8023%" y="85" width="0.2843%" height="15" fill="rgb(213,38,18)" fg:x="2939" fg:w="144"/><text x="6.0953%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.41%)</title><rect x="5.8023%" y="101" width="0.4146%" height="15" fill="rgb(211,98,23)" fg:x="2939" fg:w="210"/><text x="6.0953%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.43%)</title><rect x="5.8023%" y="117" width="0.4343%" height="15" fill="rgb(236,184,40)" fg:x="2939" fg:w="220"/><text x="6.0953%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 0.89%)</title><rect x="5.6128%" y="133" width="0.8864%" height="15" fill="rgb(222,157,31)" fg:x="2843" fg:w="449"/><text x="5.9058%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.32%)</title><rect x="5.4509%" y="149" width="1.3168%" height="15" fill="rgb(237,2,18)" fg:x="2761" fg:w="667"/><text x="5.7439%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="6.7677%" y="149" width="0.1264%" height="15" fill="rgb(232,129,13)" fg:x="3428" fg:w="64"/><text x="7.0607%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="6.8941%" y="149" width="0.1204%" height="15" fill="rgb(205,183,10)" fg:x="3492" fg:w="61"/><text x="7.1871%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.78%)</title><rect x="5.4509%" y="165" width="1.7828%" height="15" fill="rgb(219,1,5)" fg:x="2761" fg:w="903"/><text x="5.7439%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.05%)</title><rect x="7.2337%" y="165" width="0.0533%" height="15" fill="rgb(219,170,29)" fg:x="3664" fg:w="27"/><text x="7.5266%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="7.2870%" y="165" width="0.0908%" height="15" fill="rgb(234,45,33)" fg:x="3691" fg:w="46"/><text x="7.5799%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.19%)</title><rect x="7.3778%" y="165" width="0.1876%" height="15" fill="rgb(235,194,27)" fg:x="3737" fg:w="95"/><text x="7.6708%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="7.5653%" y="133" width="0.0118%" height="15" fill="rgb(250,148,32)" fg:x="3832" fg:w="6"/><text x="7.8583%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.86%)</title><rect x="7.5653%" y="149" width="0.8627%" height="15" fill="rgb(216,130,10)" fg:x="3832" fg:w="437"/><text x="7.8583%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="8.4281%" y="149" width="0.0375%" height="15" fill="rgb(240,109,12)" fg:x="4269" fg:w="19"/><text x="8.7211%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.4656%" y="117" width="0.1619%" height="15" fill="rgb(225,128,34)" fg:x="4288" fg:w="82"/><text x="8.7586%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="8.6275%" y="85" width="0.1323%" height="15" fill="rgb(229,188,21)" fg:x="4370" fg:w="67"/><text x="8.9205%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="8.6275%" y="101" width="0.1895%" height="15" fill="rgb(211,180,45)" fg:x="4370" fg:w="96"/><text x="8.9205%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="8.8170%" y="53" width="0.0217%" height="15" fill="rgb(226,134,25)" fg:x="4466" fg:w="11"/><text x="9.1100%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="8.8387%" y="37" width="0.0691%" height="15" fill="rgb(213,145,18)" fg:x="4477" fg:w="35"/><text x="9.1317%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="8.8387%" y="53" width="0.1264%" height="15" fill="rgb(213,9,7)" fg:x="4477" fg:w="64"/><text x="9.1317%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.28%)</title><rect x="8.8170%" y="69" width="0.2843%" height="15" fill="rgb(239,43,30)" fg:x="4466" fg:w="144"/><text x="9.1100%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.41%)</title><rect x="8.8170%" y="85" width="0.4146%" height="15" fill="rgb(232,226,24)" fg:x="4466" fg:w="210"/><text x="9.1100%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.43%)</title><rect x="8.8170%" y="101" width="0.4343%" height="15" fill="rgb(212,39,50)" fg:x="4466" fg:w="220"/><text x="9.1100%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 0.89%)</title><rect x="8.6275%" y="117" width="0.8864%" height="15" fill="rgb(207,201,47)" fg:x="4370" fg:w="449"/><text x="8.9205%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.32%)</title><rect x="8.4656%" y="133" width="1.3168%" height="15" fill="rgb(227,114,40)" fg:x="4288" fg:w="667"/><text x="8.7586%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="9.7824%" y="133" width="0.1264%" height="15" fill="rgb(247,197,24)" fg:x="4955" fg:w="64"/><text x="10.0754%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="9.9088%" y="133" width="0.1204%" height="15" fill="rgb(233,227,36)" fg:x="5019" fg:w="61"/><text x="10.2018%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.78%)</title><rect x="8.4656%" y="149" width="1.7828%" height="15" fill="rgb(209,193,9)" fg:x="4288" fg:w="903"/><text x="8.7586%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="10.2484%" y="133" width="0.1007%" height="15" fill="rgb(236,125,19)" fg:x="5191" fg:w="51"/><text x="10.5413%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.23%)</title><rect x="10.3490%" y="133" width="0.2330%" height="15" fill="rgb(218,190,24)" fg:x="5242" fg:w="118"/><text x="10.6420%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="10.5820%" y="133" width="0.0908%" height="15" fill="rgb(246,112,52)" fg:x="5360" fg:w="46"/><text x="10.8750%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.56%)</title><rect x="10.2484%" y="149" width="0.5587%" height="15" fill="rgb(221,156,8)" fg:x="5191" fg:w="283"/><text x="10.5413%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.8071%" y="149" width="0.1619%" height="15" fill="rgb(233,193,24)" fg:x="5474" fg:w="82"/><text x="11.1000%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 3.77%)</title><rect x="7.5653%" y="165" width="3.7708%" height="15" fill="rgb(237,107,38)" fg:x="3832" fg:w="1910"/><text x="7.8583%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="11.3362%" y="165" width="0.0908%" height="15" fill="rgb(207,124,15)" fg:x="5742" fg:w="46"/><text x="11.6291%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="11.4270%" y="165" width="0.0296%" height="15" fill="rgb(215,125,5)" fg:x="5788" fg:w="15"/><text x="11.7200%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="11.4566%" y="165" width="0.0158%" height="15" fill="rgb(205,102,39)" fg:x="5803" fg:w="8"/><text x="11.7496%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="11.4724%" y="149" width="0.1619%" height="15" fill="rgb(246,88,50)" fg:x="5811" fg:w="82"/><text x="11.7654%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.35%)</title><rect x="11.4724%" y="165" width="0.3514%" height="15" fill="rgb(227,218,20)" fg:x="5811" fg:w="178"/><text x="11.7654%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="11.8238%" y="133" width="0.1619%" height="15" fill="rgb(224,71,2)" fg:x="5989" fg:w="82"/><text x="12.1168%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.24%)</title><rect x="11.8238%" y="149" width="0.2428%" height="15" fill="rgb(242,79,28)" fg:x="5989" fg:w="123"/><text x="12.1168%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.41%)</title><rect x="11.8238%" y="165" width="0.4146%" height="15" fill="rgb(205,26,24)" fg:x="5989" fg:w="210"/><text x="12.1168%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.2384%" y="165" width="0.1619%" height="15" fill="rgb(249,223,9)" fg:x="6199" fg:w="82"/><text x="12.5314%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="12.4003%" y="165" width="0.1757%" height="15" fill="rgb(217,91,52)" fg:x="6281" fg:w="89"/><text x="12.6933%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.5760%" y="165" width="0.1619%" height="15" fill="rgb(252,195,8)" fg:x="6370" fg:w="82"/><text x="12.8690%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.7379%" y="165" width="0.1619%" height="15" fill="rgb(206,127,44)" fg:x="6452" fg:w="82"/><text x="13.0309%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="12.9097%" y="165" width="0.1757%" height="15" fill="rgb(206,100,37)" fg:x="6539" fg:w="89"/><text x="13.2026%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.77%)</title><rect x="13.0854%" y="165" width="0.7739%" height="15" fill="rgb(219,154,13)" fg:x="6628" fg:w="392"/><text x="13.3783%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.77%)</title><rect x="13.8593%" y="165" width="0.7739%" height="15" fill="rgb(254,69,11)" fg:x="7020" fg:w="392"/><text x="14.1522%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.00%)</title><rect x="14.6332%" y="165" width="0.9950%" height="15" fill="rgb(251,59,29)" fg:x="7412" fg:w="504"/><text x="14.9262%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 15.51%)</title><rect x="2.5725%" y="181" width="15.5117%" height="15" fill="rgb(236,69,11)" fg:x="1303" fg:w="7857"/><text x="2.8654%" y="191.50">candid::de::IDLDeser..</text></g><g><title>memcpy (408 instructions, 0.81%)</title><rect x="18.0842%" y="181" width="0.8055%" height="15" fill="rgb(213,100,28)" fg:x="9160" fg:w="408"/><text x="18.3772%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.81%)</title><rect x="18.8897%" y="181" width="0.8055%" height="15" fill="rgb(237,68,27)" fg:x="9568" fg:w="408"/><text x="19.1826%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.05%)</title><rect x="19.6952%" y="181" width="0.0474%" height="15" fill="rgb(209,42,30)" fg:x="9976" fg:w="24"/><text x="19.9881%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="19.7426%" y="181" width="0.1619%" height="15" fill="rgb(238,104,15)" fg:x="10000" fg:w="82"/><text x="20.0355%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="19.9044%" y="165" width="0.1619%" height="15" fill="rgb(223,50,54)" fg:x="10082" fg:w="82"/><text x="20.1974%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.33%)</title><rect x="19.9044%" y="181" width="0.3277%" height="15" fill="rgb(238,75,43)" fg:x="10082" fg:w="166"/><text x="20.1974%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (214 instructions, 0.42%)</title><rect x="20.2322%" y="181" width="0.4225%" height="15" fill="rgb(243,105,46)" fg:x="10248" fg:w="214"/><text x="20.5251%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="20.6547%" y="165" width="0.1520%" height="15" fill="rgb(215,183,12)" fg:x="10462" fg:w="77"/><text x="20.9476%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="20.8067%" y="149" width="0.1757%" height="15" fill="rgb(220,57,39)" fg:x="10539" fg:w="89"/><text x="21.0996%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.32%)</title><rect x="20.8067%" y="165" width="0.3159%" height="15" fill="rgb(253,57,43)" fg:x="10539" fg:w="160"/><text x="21.0996%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 0.82%)</title><rect x="20.6547%" y="181" width="0.8213%" height="15" fill="rgb(252,99,52)" fg:x="10462" fg:w="416"/><text x="20.9476%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.10%)</title><rect x="21.4760%" y="165" width="0.0967%" height="15" fill="rgb(226,208,32)" fg:x="10878" fg:w="49"/><text x="21.7689%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="21.5727%" y="165" width="0.0276%" height="15" fill="rgb(245,60,25)" fg:x="10927" fg:w="14"/><text x="21.8657%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.39%)</title><rect x="21.4760%" y="181" width="0.3949%" height="15" fill="rgb(215,174,0)" fg:x="10878" fg:w="200"/><text x="21.7689%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="21.8708%" y="181" width="0.0967%" height="15" fill="rgb(212,43,43)" fg:x="11078" fg:w="49"/><text x="22.1638%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.16%)</title><rect x="21.9675%" y="165" width="0.1639%" height="15" fill="rgb(213,223,15)" fg:x="11127" fg:w="83"/><text x="22.2605%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="22.2716%" y="149" width="0.0454%" height="15" fill="rgb(221,65,48)" fg:x="11281" fg:w="23"/><text x="22.5645%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.27%)</title><rect x="22.2716%" y="165" width="0.2724%" height="15" fill="rgb(218,119,13)" fg:x="11281" fg:w="138"/><text x="22.5645%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 0.72%)</title><rect x="21.9675%" y="181" width="0.7167%" height="15" fill="rgb(240,148,43)" fg:x="11127" fg:w="363"/><text x="22.2605%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.07%)</title><rect x="22.6842%" y="165" width="0.0730%" height="15" fill="rgb(230,31,9)" fg:x="11490" fg:w="37"/><text x="22.9772%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.07%)</title><rect x="22.7572%" y="165" width="0.0671%" height="15" fill="rgb(213,118,41)" fg:x="11527" fg:w="34"/><text x="23.0502%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.07%)</title><rect x="22.8244%" y="165" width="0.0671%" height="15" fill="rgb(219,18,0)" fg:x="11561" fg:w="34"/><text x="23.1173%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.06%)</title><rect x="22.8915%" y="165" width="0.0612%" height="15" fill="rgb(224,72,19)" fg:x="11595" fg:w="31"/><text x="23.1845%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.52%)</title><rect x="22.6842%" y="181" width="0.5153%" height="15" fill="rgb(228,18,50)" fg:x="11490" fg:w="261"/><text x="22.9772%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.1995%" y="181" width="0.0276%" height="15" fill="rgb(218,6,29)" fg:x="11751" fg:w="14"/><text x="23.4924%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.2271%" y="181" width="0.0276%" height="15" fill="rgb(233,78,16)" fg:x="11765" fg:w="14"/><text x="23.5201%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.2548%" y="181" width="0.0276%" height="15" fill="rgb(212,6,9)" fg:x="11779" fg:w="14"/><text x="23.5477%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.07%)</title><rect x="23.2824%" y="181" width="0.0730%" height="15" fill="rgb(226,175,4)" fg:x="11793" fg:w="37"/><text x="23.5754%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="23.3554%" y="165" width="0.0158%" height="15" fill="rgb(224,36,13)" fg:x="11830" fg:w="8"/><text x="23.6484%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.3712%" y="149" width="0.0533%" height="15" fill="rgb(240,229,2)" fg:x="11838" fg:w="27"/><text x="23.6642%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.4245%" y="149" width="0.0533%" height="15" fill="rgb(250,136,24)" fg:x="11865" fg:w="27"/><text x="23.7175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.39%)</title><rect x="23.3712%" y="165" width="0.3889%" height="15" fill="rgb(251,142,38)" fg:x="11838" fg:w="197"/><text x="23.6642%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.7602%" y="133" width="0.0533%" height="15" fill="rgb(220,81,49)" fg:x="12035" fg:w="27"/><text x="24.0531%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="23.7602%" y="149" width="0.2803%" height="15" fill="rgb(215,146,3)" fg:x="12035" fg:w="142"/><text x="24.0531%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.42%)</title><rect x="23.7602%" y="165" width="0.4205%" height="15" fill="rgb(239,18,36)" fg:x="12035" fg:w="213"/><text x="24.0531%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="24.1807%" y="165" width="0.0276%" height="15" fill="rgb(217,143,22)" fg:x="12248" fg:w="14"/><text x="24.4737%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.2083%" y="165" width="0.0138%" height="15" fill="rgb(234,128,31)" fg:x="12262" fg:w="7"/><text x="24.5013%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (529 instructions, 1.04%)</title><rect x="23.3554%" y="181" width="1.0444%" height="15" fill="rgb(207,205,44)" fg:x="11830" fg:w="529"/><text x="23.6484%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,488 instructions, 22.68%)</title><rect x="2.5725%" y="197" width="22.6802%" height="15" fill="rgb(206,214,34)" fg:x="1303" fg:w="11488"/><text x="2.8654%" y="207.50">candid::utils::decode_args_wit..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="25.2527%" y="181" width="0.0533%" height="15" fill="rgb(216,155,23)" fg:x="12791" fg:w="27"/><text x="25.5457%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="25.2527%" y="197" width="0.2803%" height="15" fill="rgb(215,229,40)" fg:x="12791" fg:w="142"/><text x="25.5457%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,876 instructions, 25.42%)</title><rect x="0.3238%" y="213" width="25.4205%" height="15" fill="rgb(223,6,30)" fg:x="164" fg:w="12876"/><text x="0.6167%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="25.7443%" y="213" width="1.3228%" height="15" fill="rgb(209,219,47)" fg:x="13040" fg:w="670"/><text x="26.0373%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (693 instructions, 1.37%)</title><rect x="27.0670%" y="213" width="1.3682%" height="15" fill="rgb(222,13,43)" fg:x="13710" fg:w="693"/><text x="27.3600%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="28.4352%" y="213" width="1.3228%" height="15" fill="rgb(217,35,3)" fg:x="14403" fg:w="670"/><text x="28.7282%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="29.7580%" y="213" width="1.3228%" height="15" fill="rgb(208,142,35)" fg:x="15073" fg:w="670"/><text x="30.0509%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="31.0807%" y="213" width="1.3228%" height="15" fill="rgb(240,66,14)" fg:x="15743" fg:w="670"/><text x="31.3737%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="32.4035%" y="213" width="1.3840%" height="15" fill="rgb(221,171,53)" fg:x="16413" fg:w="701"/><text x="32.6964%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="33.7874%" y="213" width="1.3840%" height="15" fill="rgb(219,213,51)" fg:x="17114" fg:w="701"/><text x="34.0804%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="35.1714%" y="213" width="1.3228%" height="15" fill="rgb(224,39,54)" fg:x="17815" fg:w="670"/><text x="35.4643%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="36.4941%" y="213" width="1.3228%" height="15" fill="rgb(250,83,12)" fg:x="18485" fg:w="670"/><text x="36.7871%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="37.8169%" y="213" width="1.2458%" height="15" fill="rgb(223,134,46)" fg:x="19155" fg:w="631"/><text x="38.1098%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="39.0626%" y="213" width="1.3228%" height="15" fill="rgb(224,63,4)" fg:x="19786" fg:w="670"/><text x="39.3556%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="40.3854%" y="213" width="1.2458%" height="15" fill="rgb(231,128,22)" fg:x="20456" fg:w="631"/><text x="40.6783%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="41.6311%" y="213" width="1.3228%" height="15" fill="rgb(235,186,12)" fg:x="21087" fg:w="670"/><text x="41.9241%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="42.9539%" y="213" width="1.2458%" height="15" fill="rgb(205,137,46)" fg:x="21757" fg:w="631"/><text x="43.2469%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="44.1996%" y="213" width="1.3228%" height="15" fill="rgb(242,34,6)" fg:x="22388" fg:w="670"/><text x="44.4926%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="45.5224%" y="213" width="1.3228%" height="15" fill="rgb(249,123,34)" fg:x="23058" fg:w="670"/><text x="45.8154%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="46.8451%" y="213" width="1.3228%" height="15" fill="rgb(226,115,41)" fg:x="23728" fg:w="670"/><text x="47.1381%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="48.1679%" y="213" width="1.3228%" height="15" fill="rgb(222,212,45)" fg:x="24398" fg:w="670"/><text x="48.4609%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="49.4906%" y="213" width="1.3228%" height="15" fill="rgb(242,0,47)" fg:x="25068" fg:w="670"/><text x="49.7836%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="50.8134%" y="213" width="1.2458%" height="15" fill="rgb(227,86,0)" fg:x="25738" fg:w="631"/><text x="51.1064%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="52.0591%" y="213" width="1.3840%" height="15" fill="rgb(216,138,24)" fg:x="26369" fg:w="701"/><text x="52.3521%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (732 instructions, 1.45%)</title><rect x="53.4431%" y="213" width="1.4452%" height="15" fill="rgb(207,18,7)" fg:x="27070" fg:w="732"/><text x="53.7361%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="54.8883%" y="213" width="1.3228%" height="15" fill="rgb(216,158,19)" fg:x="27802" fg:w="670"/><text x="55.1812%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="56.2110%" y="213" width="1.3070%" height="15" fill="rgb(218,187,16)" fg:x="28472" fg:w="662"/><text x="56.5040%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="57.5180%" y="213" width="1.3070%" height="15" fill="rgb(235,47,38)" fg:x="29134" fg:w="662"/><text x="57.8109%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="58.8249%" y="213" width="1.2458%" height="15" fill="rgb(208,215,39)" fg:x="29796" fg:w="631"/><text x="59.1179%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="60.0707%" y="213" width="1.3228%" height="15" fill="rgb(218,94,16)" fg:x="30427" fg:w="670"/><text x="60.3636%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="61.3934%" y="213" width="1.3228%" height="15" fill="rgb(233,171,50)" fg:x="31097" fg:w="670"/><text x="61.6864%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="62.7162%" y="213" width="1.3840%" height="15" fill="rgb(215,108,23)" fg:x="31767" fg:w="701"/><text x="63.0091%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="64.1001%" y="213" width="1.2458%" height="15" fill="rgb(211,172,54)" fg:x="32468" fg:w="631"/><text x="64.3931%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="65.3459%" y="213" width="1.3840%" height="15" fill="rgb(253,199,35)" fg:x="33099" fg:w="701"/><text x="65.6389%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="66.7298%" y="213" width="1.2458%" height="15" fill="rgb(216,207,47)" fg:x="33800" fg:w="631"/><text x="67.0228%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="67.9756%" y="213" width="1.3840%" height="15" fill="rgb(239,210,4)" fg:x="34431" fg:w="701"/><text x="68.2686%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="69.3596%" y="213" width="1.3228%" height="15" fill="rgb(212,51,38)" fg:x="35132" fg:w="670"/><text x="69.6525%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="70.6823%" y="213" width="1.3228%" height="15" fill="rgb(250,118,12)" fg:x="35802" fg:w="670"/><text x="70.9753%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (763 instructions, 1.51%)</title><rect x="72.0051%" y="213" width="1.5064%" height="15" fill="rgb(216,162,26)" fg:x="36472" fg:w="763"/><text x="72.2980%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="73.5114%" y="213" width="1.3228%" height="15" fill="rgb(251,53,22)" fg:x="37235" fg:w="670"/><text x="73.8044%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="74.8342%" y="213" width="1.3228%" height="15" fill="rgb(238,189,21)" fg:x="37905" fg:w="670"/><text x="75.1271%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="76.1569%" y="213" width="1.3228%" height="15" fill="rgb(222,26,4)" fg:x="38575" fg:w="670"/><text x="76.4499%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="77.4797%" y="213" width="1.3228%" height="15" fill="rgb(223,58,47)" fg:x="39245" fg:w="670"/><text x="77.7726%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="78.8024%" y="213" width="1.3228%" height="15" fill="rgb(245,47,17)" fg:x="39915" fg:w="670"/><text x="79.0954%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="80.1252%" y="213" width="1.3228%" height="15" fill="rgb(236,26,49)" fg:x="40585" fg:w="670"/><text x="80.4181%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.38%)</title><rect x="81.4479%" y="213" width="1.3840%" height="15" fill="rgb(213,25,7)" fg:x="41255" fg:w="701"/><text x="81.7409%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="82.8319%" y="213" width="1.3228%" height="15" fill="rgb(217,79,2)" fg:x="41956" fg:w="670"/><text x="83.1248%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="84.1546%" y="213" width="1.3070%" height="15" fill="rgb(210,67,43)" fg:x="42626" fg:w="662"/><text x="84.4476%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="85.4616%" y="213" width="1.3228%" height="15" fill="rgb(213,193,23)" fg:x="43288" fg:w="670"/><text x="85.7545%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="86.7843%" y="213" width="1.3228%" height="15" fill="rgb(254,97,5)" fg:x="43958" fg:w="670"/><text x="87.0773%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="88.1071%" y="213" width="1.3228%" height="15" fill="rgb(213,64,41)" fg:x="44628" fg:w="670"/><text x="88.4001%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.32%)</title><rect x="89.4298%" y="213" width="1.3228%" height="15" fill="rgb(212,173,4)" fg:x="45298" fg:w="670"/><text x="89.7228%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="90.7526%" y="213" width="1.3070%" height="15" fill="rgb(205,3,12)" fg:x="45968" fg:w="662"/><text x="91.0456%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="92.0595%" y="165" width="0.1204%" height="15" fill="rgb(237,64,42)" fg:x="46630" fg:w="61"/><text x="92.3525%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.26%)</title><rect x="92.0595%" y="181" width="0.2606%" height="15" fill="rgb(253,70,5)" fg:x="46630" fg:w="132"/><text x="92.3525%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="92.3201%" y="165" width="0.0533%" height="15" fill="rgb(254,112,38)" fg:x="46762" fg:w="27"/><text x="92.6131%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="92.3735%" y="165" width="0.0533%" height="15" fill="rgb(246,80,10)" fg:x="46789" fg:w="27"/><text x="92.6664%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="92.4268%" y="165" width="0.1323%" height="15" fill="rgb(249,66,51)" fg:x="46816" fg:w="67"/><text x="92.7197%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 0.48%)</title><rect x="92.3201%" y="181" width="0.4778%" height="15" fill="rgb(216,55,28)" fg:x="46762" fg:w="242"/><text x="92.6131%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (550 instructions, 1.09%)</title><rect x="92.0595%" y="197" width="1.0858%" height="15" fill="rgb(246,74,31)" fg:x="46630" fg:w="550"/><text x="92.3525%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.02%)</title><rect x="93.1454%" y="181" width="1.0227%" height="15" fill="rgb(225,223,51)" fg:x="47180" fg:w="518"/><text x="93.4384%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="94.1680%" y="133" width="0.1619%" height="15" fill="rgb(244,4,36)" fg:x="47698" fg:w="82"/><text x="94.4610%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.24%)</title><rect x="94.1680%" y="149" width="0.2428%" height="15" fill="rgb(243,32,46)" fg:x="47698" fg:w="123"/><text x="94.4610%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.41%)</title><rect x="94.1680%" y="165" width="0.4067%" height="15" fill="rgb(215,29,35)" fg:x="47698" fg:w="206"/><text x="94.4610%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.5747%" y="165" width="0.0296%" height="15" fill="rgb(225,120,44)" fg:x="47904" fg:w="15"/><text x="94.8677%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.6044%" y="165" width="0.0296%" height="15" fill="rgb(212,173,40)" fg:x="47919" fg:w="15"/><text x="94.8973%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.84%)</title><rect x="94.1680%" y="181" width="0.8450%" height="15" fill="rgb(244,229,24)" fg:x="47698" fg:w="428"/><text x="94.4610%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.02%)</title><rect x="95.0130%" y="181" width="1.0187%" height="15" fill="rgb(230,226,50)" fg:x="48126" fg:w="516"/><text x="95.3060%" y="191.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.0317%" y="181" width="0.0138%" height="15" fill="rgb(244,18,25)" fg:x="48642" fg:w="7"/><text x="96.3247%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 3.05%)</title><rect x="93.1454%" y="197" width="3.0522%" height="15" fill="rgb(216,6,40)" fg:x="47180" fg:w="1546"/><text x="93.4384%" y="207.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="96.1976%" y="197" width="0.0158%" height="15" fill="rgb(234,210,21)" fg:x="48726" fg:w="8"/><text x="96.4906%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="96.2134%" y="197" width="0.0158%" height="15" fill="rgb(234,178,49)" fg:x="48734" fg:w="8"/><text x="96.5063%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="96.2292%" y="197" width="0.1204%" height="15" fill="rgb(224,24,42)" fg:x="48742" fg:w="61"/><text x="96.5221%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,806 instructions, 5.54%)</title><rect x="92.0595%" y="213" width="5.5398%" height="15" fill="rgb(242,70,33)" fg:x="46630" fg:w="2806"/><text x="92.3525%" y="223.50">ic_cdk..</text></g><g><title>heap::__canister_method_batch_get::{{closure}} (49,889 instructions, 98.49%)</title><rect x="0.3238%" y="229" width="98.4936%" height="15" fill="rgb(220,176,21)" fg:x="164" fg:w="49889"/><text x="0.6167%" y="239.50">heap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.03%)</title><rect x="98.8174%" y="229" width="0.0296%" height="15" fill="rgb(228,70,47)" fg:x="50053" fg:w="15"/><text x="99.1104%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.0247%" y="197" width="0.0533%" height="15" fill="rgb(242,175,25)" fg:x="50158" fg:w="27"/><text x="99.3177%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.13%)</title><rect x="99.0780%" y="197" width="0.1303%" height="15" fill="rgb(228,6,4)" fg:x="50185" fg:w="66"/><text x="99.3710%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="99.2083%" y="197" width="0.1323%" height="15" fill="rgb(233,177,21)" fg:x="50251" fg:w="67"/><text x="99.5013%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (370 instructions, 0.73%)</title><rect x="98.8490%" y="213" width="0.7305%" height="15" fill="rgb(228,193,4)" fg:x="50069" fg:w="370"/><text x="99.1420%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (488 instructions, 0.96%)</title><rect x="98.8470%" y="229" width="0.9634%" height="15" fill="rgb(252,180,53)" fg:x="50068" fg:w="488"/><text x="99.1400%" y="239.50"></text></g><g><title>all (50,652 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,172,32)" fg:x="0" fg:w="50652"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_get (50,652 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,157,52)" fg:x="0" fg:w="50652"/><text x="0.2930%" y="255.50">canister_update batch_get</text></g></svg></svg>