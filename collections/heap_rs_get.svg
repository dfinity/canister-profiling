<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53480"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0355%" height="15" fill="rgb(216,124,24)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0355%" y="197" width="0.1421%" height="15" fill="rgb(239,142,4)" fg:x="19" fg:w="76"/><text x="0.3285%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1776%" y="197" width="0.1421%" height="15" fill="rgb(248,23,49)" fg:x="95" fg:w="76"/><text x="0.4706%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3197%" y="165" width="0.1421%" height="15" fill="rgb(227,91,41)" fg:x="171" fg:w="76"/><text x="0.6127%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="0.4619%" y="149" width="0.1290%" height="15" fill="rgb(243,84,43)" fg:x="247" fg:w="69"/><text x="0.7548%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="0.5909%" y="149" width="0.7592%" height="15" fill="rgb(215,7,46)" fg:x="316" fg:w="406"/><text x="0.8838%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="1.3500%" y="149" width="0.1533%" height="15" fill="rgb(211,94,20)" fg:x="722" fg:w="82"/><text x="1.6430%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.5034%" y="149" width="0.1010%" height="15" fill="rgb(234,176,14)" fg:x="804" fg:w="54"/><text x="1.7963%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6043%" y="149" width="0.1010%" height="15" fill="rgb(253,23,36)" fg:x="858" fg:w="54"/><text x="1.8973%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7053%" y="149" width="0.1010%" height="15" fill="rgb(236,14,45)" fg:x="912" fg:w="54"/><text x="1.9983%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8063%" y="149" width="0.1010%" height="15" fill="rgb(222,188,31)" fg:x="966" fg:w="54"/><text x="2.0993%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="1.9073%" y="149" width="0.1290%" height="15" fill="rgb(221,202,15)" fg:x="1020" fg:w="69"/><text x="2.2002%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0363%" y="149" width="0.1215%" height="15" fill="rgb(233,162,10)" fg:x="1089" fg:w="65"/><text x="2.3292%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="2.1578%" y="149" width="0.7592%" height="15" fill="rgb(217,80,53)" fg:x="1154" fg:w="406"/><text x="2.4508%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9170%" y="149" width="0.0299%" height="15" fill="rgb(242,153,14)" fg:x="1560" fg:w="16"/><text x="3.2099%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9469%" y="133" width="0.1421%" height="15" fill="rgb(215,123,22)" fg:x="1576" fg:w="76"/><text x="3.2399%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0890%" y="101" width="0.1122%" height="15" fill="rgb(244,149,26)" fg:x="1652" fg:w="60"/><text x="3.3820%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0890%" y="117" width="0.1589%" height="15" fill="rgb(230,70,52)" fg:x="1652" fg:w="85"/><text x="3.3820%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2479%" y="69" width="0.0168%" height="15" fill="rgb(239,227,44)" fg:x="1737" fg:w="9"/><text x="3.5409%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2648%" y="53" width="0.0561%" height="15" fill="rgb(250,119,34)" fg:x="1746" fg:w="30"/><text x="3.5577%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2648%" y="69" width="0.1028%" height="15" fill="rgb(250,120,25)" fg:x="1746" fg:w="55"/><text x="3.5577%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2479%" y="85" width="0.2206%" height="15" fill="rgb(238,191,41)" fg:x="1737" fg:w="118"/><text x="3.5409%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2479%" y="101" width="0.3197%" height="15" fill="rgb(216,167,11)" fg:x="1737" fg:w="171"/><text x="3.5409%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2479%" y="117" width="0.3291%" height="15" fill="rgb(229,153,14)" fg:x="1737" fg:w="176"/><text x="3.5409%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="3.0890%" y="133" width="0.6956%" height="15" fill="rgb(244,151,11)" fg:x="1652" fg:w="372"/><text x="3.3820%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="2.9469%" y="149" width="1.1013%" height="15" fill="rgb(210,94,40)" fg:x="1576" fg:w="589"/><text x="3.2399%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="4.0482%" y="149" width="0.1533%" height="15" fill="rgb(252,89,9)" fg:x="2165" fg:w="82"/><text x="4.3412%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.2016%" y="149" width="0.1028%" height="15" fill="rgb(233,202,1)" fg:x="2247" fg:w="55"/><text x="4.4945%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="4.3044%" y="149" width="0.1178%" height="15" fill="rgb(221,88,29)" fg:x="2302" fg:w="63"/><text x="4.5974%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4222%" y="149" width="0.1215%" height="15" fill="rgb(210,126,42)" fg:x="2365" fg:w="65"/><text x="4.7152%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="4.5438%" y="133" width="0.7592%" height="15" fill="rgb(252,92,39)" fg:x="2430" fg:w="406"/><text x="4.8367%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.3029%" y="133" width="0.0299%" height="15" fill="rgb(217,53,16)" fg:x="2836" fg:w="16"/><text x="5.5959%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3328%" y="117" width="0.1421%" height="15" fill="rgb(229,207,38)" fg:x="2852" fg:w="76"/><text x="5.6258%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4749%" y="85" width="0.1122%" height="15" fill="rgb(244,103,14)" fg:x="2928" fg:w="60"/><text x="5.7679%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4749%" y="101" width="0.1589%" height="15" fill="rgb(239,117,40)" fg:x="2928" fg:w="85"/><text x="5.7679%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6339%" y="53" width="0.0168%" height="15" fill="rgb(223,119,42)" fg:x="3013" fg:w="9"/><text x="5.9269%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6507%" y="37" width="0.0561%" height="15" fill="rgb(244,170,20)" fg:x="3022" fg:w="30"/><text x="5.9437%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6507%" y="53" width="0.1028%" height="15" fill="rgb(230,107,50)" fg:x="3022" fg:w="55"/><text x="5.9437%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6339%" y="69" width="0.2206%" height="15" fill="rgb(221,158,16)" fg:x="3013" fg:w="118"/><text x="5.9269%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6339%" y="85" width="0.3197%" height="15" fill="rgb(227,182,7)" fg:x="3013" fg:w="171"/><text x="5.9269%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6339%" y="101" width="0.3291%" height="15" fill="rgb(238,162,11)" fg:x="3013" fg:w="176"/><text x="5.9269%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="5.4749%" y="117" width="0.6956%" height="15" fill="rgb(206,141,11)" fg:x="2928" fg:w="372"/><text x="5.7679%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="5.3328%" y="133" width="1.1013%" height="15" fill="rgb(253,164,12)" fg:x="2852" fg:w="589"/><text x="5.6258%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="6.4342%" y="133" width="0.1533%" height="15" fill="rgb(211,37,16)" fg:x="3441" fg:w="82"/><text x="6.7271%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.5875%" y="133" width="0.1028%" height="15" fill="rgb(254,74,42)" fg:x="3523" fg:w="55"/><text x="6.8805%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="6.6904%" y="117" width="0.1290%" height="15" fill="rgb(238,29,0)" fg:x="3578" fg:w="69"/><text x="6.9833%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8194%" y="117" width="0.1702%" height="15" fill="rgb(244,15,28)" fg:x="3647" fg:w="91"/><text x="7.1123%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="6.9895%" y="117" width="0.1178%" height="15" fill="rgb(248,190,18)" fg:x="3738" fg:w="63"/><text x="7.2825%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.53%)</title><rect x="6.6904%" y="133" width="0.5273%" height="15" fill="rgb(212,0,54)" fg:x="3578" fg:w="282"/><text x="6.9833%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.15%)</title><rect x="7.2177%" y="133" width="0.1458%" height="15" fill="rgb(228,91,50)" fg:x="3860" fg:w="78"/><text x="7.5106%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 3.20%)</title><rect x="4.5438%" y="149" width="3.1993%" height="15" fill="rgb(250,183,8)" fg:x="2430" fg:w="1711"/><text x="4.8367%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.7431%" y="149" width="0.1178%" height="15" fill="rgb(231,184,47)" fg:x="4141" fg:w="63"/><text x="8.0361%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8609%" y="149" width="0.0243%" height="15" fill="rgb(232,77,4)" fg:x="4204" fg:w="13"/><text x="8.1539%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8852%" y="149" width="0.0243%" height="15" fill="rgb(250,123,41)" fg:x="4217" fg:w="13"/><text x="8.1782%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.9095%" y="149" width="0.0131%" height="15" fill="rgb(243,49,51)" fg:x="4230" fg:w="7"/><text x="8.2025%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9226%" y="149" width="0.0280%" height="15" fill="rgb(230,100,20)" fg:x="4237" fg:w="15"/><text x="8.2156%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9506%" y="133" width="0.1421%" height="15" fill="rgb(238,56,50)" fg:x="4252" fg:w="76"/><text x="8.2436%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9506%" y="149" width="0.2973%" height="15" fill="rgb(237,5,9)" fg:x="4252" fg:w="159"/><text x="8.2436%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2479%" y="117" width="0.1421%" height="15" fill="rgb(253,34,27)" fg:x="4411" fg:w="76"/><text x="8.5409%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="8.2479%" y="133" width="0.2057%" height="15" fill="rgb(218,93,17)" fg:x="4411" fg:w="110"/><text x="8.5409%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.33%)</title><rect x="8.2479%" y="149" width="0.3328%" height="15" fill="rgb(234,137,14)" fg:x="4411" fg:w="178"/><text x="8.5409%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.5808%" y="149" width="0.1421%" height="15" fill="rgb(232,43,42)" fg:x="4589" fg:w="76"/><text x="8.8737%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.7229%" y="149" width="0.1515%" height="15" fill="rgb(231,63,26)" fg:x="4665" fg:w="81"/><text x="9.0159%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8743%" y="149" width="0.1421%" height="15" fill="rgb(251,195,40)" fg:x="4746" fg:w="76"/><text x="9.1673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="9.0165%" y="149" width="0.1421%" height="15" fill="rgb(217,168,18)" fg:x="4822" fg:w="76"/><text x="9.3094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1623%" y="149" width="0.1515%" height="15" fill="rgb(224,217,13)" fg:x="4900" fg:w="81"/><text x="9.4553%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.75%)</title><rect x="9.3138%" y="149" width="0.7461%" height="15" fill="rgb(206,159,22)" fg:x="4981" fg:w="399"/><text x="9.6067%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.75%)</title><rect x="10.0598%" y="149" width="0.7461%" height="15" fill="rgb(246,225,53)" fg:x="5380" fg:w="399"/><text x="10.3528%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 12.08%)</title><rect x="0.4619%" y="165" width="12.0774%" height="15" fill="rgb(205,111,26)" fg:x="247" fg:w="6459"/><text x="0.7548%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (354 instructions, 0.66%)</title><rect x="12.5393%" y="165" width="0.6619%" height="15" fill="rgb(248,210,44)" fg:x="6706" fg:w="354"/><text x="12.8322%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="13.2012%" y="165" width="0.0729%" height="15" fill="rgb(222,146,37)" fg:x="7060" fg:w="39"/><text x="13.4942%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="13.2741%" y="149" width="0.1028%" height="15" fill="rgb(245,126,23)" fg:x="7099" fg:w="55"/><text x="13.5671%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (200 instructions, 0.37%)</title><rect x="13.2741%" y="165" width="0.3740%" height="15" fill="rgb(224,77,15)" fg:x="7099" fg:w="200"/><text x="13.5671%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.6574%" y="133" width="0.0991%" height="15" fill="rgb(234,98,23)" fg:x="7304" fg:w="53"/><text x="13.9504%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="13.7565%" y="133" width="0.1645%" height="15" fill="rgb(226,96,45)" fg:x="7357" fg:w="88"/><text x="14.0495%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="13.9211%" y="133" width="0.3029%" height="15" fill="rgb(249,83,3)" fg:x="7445" fg:w="162"/><text x="14.2141%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.6574%" y="149" width="1.0097%" height="15" fill="rgb(228,31,51)" fg:x="7304" fg:w="540"/><text x="13.9504%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.40%)</title><rect x="13.6481%" y="165" width="1.4005%" height="15" fill="rgb(205,168,41)" fg:x="7299" fg:w="749"/><text x="13.9411%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="15.0486%" y="165" width="0.1421%" height="15" fill="rgb(207,31,51)" fg:x="8048" fg:w="76"/><text x="15.3416%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="15.2001%" y="133" width="0.0991%" height="15" fill="rgb(211,4,39)" fg:x="8129" fg:w="53"/><text x="15.4930%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="15.2992%" y="133" width="0.1645%" height="15" fill="rgb(236,84,47)" fg:x="8182" fg:w="88"/><text x="15.5921%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="15.4637%" y="133" width="0.3029%" height="15" fill="rgb(220,70,19)" fg:x="8270" fg:w="162"/><text x="15.7567%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="15.2001%" y="149" width="1.0097%" height="15" fill="rgb(250,59,30)" fg:x="8129" fg:w="540"/><text x="15.4930%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="16.2098%" y="149" width="0.1272%" height="15" fill="rgb(244,198,19)" fg:x="8669" fg:w="68"/><text x="16.5028%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.3369%" y="133" width="0.1515%" height="15" fill="rgb(239,207,32)" fg:x="8737" fg:w="81"/><text x="16.6299%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.3369%" y="149" width="0.2019%" height="15" fill="rgb(235,211,24)" fg:x="8737" fg:w="108"/><text x="16.6299%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.66%)</title><rect x="15.1907%" y="165" width="1.6642%" height="15" fill="rgb(249,186,37)" fg:x="8124" fg:w="890"/><text x="15.4837%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.8549%" y="117" width="0.0991%" height="15" fill="rgb(205,21,54)" fg:x="9014" fg:w="53"/><text x="17.1479%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.15%)</title><rect x="16.8549%" y="133" width="0.1458%" height="15" fill="rgb(237,162,5)" fg:x="9014" fg:w="78"/><text x="17.1479%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.55%)</title><rect x="16.8549%" y="149" width="0.5479%" height="15" fill="rgb(244,188,19)" fg:x="9014" fg:w="293"/><text x="17.1479%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1318 (15 instructions, 0.03%)</title><rect x="17.4028%" y="149" width="0.0280%" height="15" fill="rgb(247,149,5)" fg:x="9307" fg:w="15"/><text x="17.6957%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.4308%" y="149" width="0.0206%" height="15" fill="rgb(236,3,48)" fg:x="9322" fg:w="11"/><text x="17.7238%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.89%)</title><rect x="16.8549%" y="165" width="0.8938%" height="15" fill="rgb(231,216,12)" fg:x="9014" fg:w="478"/><text x="17.1479%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.09%)</title><rect x="17.7487%" y="165" width="0.0879%" height="15" fill="rgb(205,83,38)" fg:x="9492" fg:w="47"/><text x="18.0417%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.22%)</title><rect x="17.8366%" y="149" width="0.2244%" height="15" fill="rgb(214,167,16)" fg:x="9539" fg:w="120"/><text x="18.1295%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="18.1114%" y="149" width="0.2300%" height="15" fill="rgb(237,135,16)" fg:x="9686" fg:w="123"/><text x="18.4044%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 0.56%)</title><rect x="17.8366%" y="165" width="0.5553%" height="15" fill="rgb(221,210,53)" fg:x="9539" fg:w="297"/><text x="18.1295%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.3919%" y="149" width="0.0524%" height="15" fill="rgb(209,65,49)" fg:x="9836" fg:w="28"/><text x="18.6849%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="18.4443%" y="149" width="0.0280%" height="15" fill="rgb(214,176,54)" fg:x="9864" fg:w="15"/><text x="18.7372%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="18.4723%" y="149" width="0.0280%" height="15" fill="rgb(218,35,26)" fg:x="9879" fg:w="15"/><text x="18.7653%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.25%)</title><rect x="18.3919%" y="165" width="0.2524%" height="15" fill="rgb(243,45,39)" fg:x="9836" fg:w="135"/><text x="18.6849%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.6444%" y="165" width="0.0206%" height="15" fill="rgb(223,196,40)" fg:x="9971" fg:w="11"/><text x="18.9373%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.6649%" y="165" width="0.0206%" height="15" fill="rgb(239,30,51)" fg:x="9982" fg:w="11"/><text x="18.9579%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.6855%" y="165" width="0.0206%" height="15" fill="rgb(231,170,4)" fg:x="9993" fg:w="11"/><text x="18.9785%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.77%)</title><rect x="18.7061%" y="165" width="0.7666%" height="15" fill="rgb(224,118,41)" fg:x="10004" fg:w="410"/><text x="18.9990%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.4727%" y="133" width="0.0224%" height="15" fill="rgb(241,178,0)" fg:x="10414" fg:w="12"/><text x="19.7657%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.31%)</title><rect x="19.4951%" y="133" width="0.3141%" height="15" fill="rgb(208,158,54)" fg:x="10426" fg:w="168"/><text x="19.7881%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="19.8093%" y="101" width="0.1178%" height="15" fill="rgb(217,24,7)" fg:x="10594" fg:w="63"/><text x="20.1022%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.30%)</title><rect x="19.8093%" y="117" width="0.3048%" height="15" fill="rgb(244,166,20)" fg:x="10594" fg:w="163"/><text x="20.1022%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.36%)</title><rect x="19.8093%" y="133" width="0.3553%" height="15" fill="rgb(250,229,28)" fg:x="10594" fg:w="190"/><text x="20.1022%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.1645%" y="133" width="0.0206%" height="15" fill="rgb(239,113,40)" fg:x="10784" fg:w="11"/><text x="20.4575%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (421 instructions, 0.79%)</title><rect x="19.4727%" y="149" width="0.7872%" height="15" fill="rgb(233,110,12)" fg:x="10414" fg:w="421"/><text x="19.7657%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (459 instructions, 0.86%)</title><rect x="19.4727%" y="165" width="0.8583%" height="15" fill="rgb(254,190,13)" fg:x="10414" fg:w="459"/><text x="19.7657%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="20.3310%" y="149" width="0.1028%" height="15" fill="rgb(218,90,42)" fg:x="10873" fg:w="55"/><text x="20.6239%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="20.4338%" y="149" width="0.1178%" height="15" fill="rgb(239,151,50)" fg:x="10928" fg:w="63"/><text x="20.7268%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.37%)</title><rect x="20.3310%" y="165" width="0.3721%" height="15" fill="rgb(231,75,23)" fg:x="10873" fg:w="199"/><text x="20.6239%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,294 instructions, 21.12%)</title><rect x="0.3197%" y="181" width="21.1182%" height="15" fill="rgb(217,167,39)" fg:x="171" fg:w="11294"/><text x="0.6127%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="21.4379%" y="181" width="1.4959%" height="15" fill="rgb(245,27,52)" fg:x="11465" fg:w="800"/><text x="21.7309%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="22.9338%" y="181" width="1.4959%" height="15" fill="rgb(209,36,29)" fg:x="12265" fg:w="800"/><text x="23.2268%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="24.4297%" y="181" width="1.4959%" height="15" fill="rgb(215,155,24)" fg:x="13065" fg:w="800"/><text x="24.7227%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="25.9256%" y="181" width="1.5501%" height="15" fill="rgb(245,129,38)" fg:x="13865" fg:w="829"/><text x="26.2185%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="27.4757%" y="181" width="1.4959%" height="15" fill="rgb(245,168,7)" fg:x="14694" fg:w="800"/><text x="27.7687%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="28.9716%" y="181" width="1.4959%" height="15" fill="rgb(216,163,48)" fg:x="15494" fg:w="800"/><text x="29.2645%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="30.4675%" y="181" width="1.4959%" height="15" fill="rgb(236,95,26)" fg:x="16294" fg:w="800"/><text x="30.7604%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="31.9634%" y="181" width="1.4959%" height="15" fill="rgb(235,141,39)" fg:x="17094" fg:w="800"/><text x="32.2563%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="33.4592%" y="181" width="1.4959%" height="15" fill="rgb(209,108,49)" fg:x="17894" fg:w="800"/><text x="33.7522%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="34.9551%" y="181" width="1.4959%" height="15" fill="rgb(234,40,50)" fg:x="18694" fg:w="800"/><text x="35.2481%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="36.4510%" y="181" width="1.5501%" height="15" fill="rgb(250,18,38)" fg:x="19494" fg:w="829"/><text x="36.7440%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="38.0011%" y="181" width="1.4959%" height="15" fill="rgb(234,187,12)" fg:x="20323" fg:w="800"/><text x="38.2941%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="39.4970%" y="181" width="1.4959%" height="15" fill="rgb(206,208,44)" fg:x="21123" fg:w="800"/><text x="39.7900%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="40.9929%" y="181" width="1.4959%" height="15" fill="rgb(222,223,11)" fg:x="21923" fg:w="800"/><text x="41.2859%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="42.4888%" y="181" width="1.4959%" height="15" fill="rgb(238,179,16)" fg:x="22723" fg:w="800"/><text x="42.7817%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="43.9847%" y="181" width="1.4959%" height="15" fill="rgb(216,81,36)" fg:x="23523" fg:w="800"/><text x="44.2776%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.42%)</title><rect x="45.4806%" y="181" width="1.4248%" height="15" fill="rgb(225,152,46)" fg:x="24323" fg:w="762"/><text x="45.7735%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="46.9054%" y="181" width="1.4959%" height="15" fill="rgb(209,59,13)" fg:x="25085" fg:w="800"/><text x="47.1984%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="48.4013%" y="181" width="1.5501%" height="15" fill="rgb(245,228,2)" fg:x="25885" fg:w="829"/><text x="48.6942%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="49.9514%" y="181" width="1.4959%" height="15" fill="rgb(222,147,13)" fg:x="26714" fg:w="800"/><text x="50.2444%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="51.4473%" y="181" width="1.5501%" height="15" fill="rgb(254,212,38)" fg:x="27514" fg:w="829"/><text x="51.7402%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="52.9974%" y="181" width="1.4959%" height="15" fill="rgb(238,222,53)" fg:x="28343" fg:w="800"/><text x="53.2904%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="54.4933%" y="181" width="1.4959%" height="15" fill="rgb(234,224,17)" fg:x="29143" fg:w="800"/><text x="54.7862%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="55.9892%" y="181" width="1.4959%" height="15" fill="rgb(214,124,42)" fg:x="29943" fg:w="800"/><text x="56.2821%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="57.4850%" y="181" width="1.4959%" height="15" fill="rgb(253,149,52)" fg:x="30743" fg:w="800"/><text x="57.7780%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="58.9809%" y="181" width="1.5501%" height="15" fill="rgb(229,181,21)" fg:x="31543" fg:w="829"/><text x="59.2739%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.42%)</title><rect x="60.5310%" y="181" width="1.4248%" height="15" fill="rgb(245,10,19)" fg:x="32372" fg:w="762"/><text x="60.8240%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="61.9559%" y="181" width="1.4959%" height="15" fill="rgb(213,145,14)" fg:x="33134" fg:w="800"/><text x="62.2488%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="63.4518%" y="181" width="1.4959%" height="15" fill="rgb(252,69,53)" fg:x="33934" fg:w="800"/><text x="63.7447%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="64.9476%" y="181" width="1.4959%" height="15" fill="rgb(246,21,4)" fg:x="34734" fg:w="800"/><text x="65.2406%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="66.4435%" y="181" width="1.4959%" height="15" fill="rgb(206,14,52)" fg:x="35534" fg:w="800"/><text x="66.7365%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="67.9394%" y="181" width="1.5501%" height="15" fill="rgb(228,78,53)" fg:x="36334" fg:w="829"/><text x="68.2324%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="69.4895%" y="181" width="1.4959%" height="15" fill="rgb(227,185,36)" fg:x="37163" fg:w="800"/><text x="69.7825%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="70.9854%" y="181" width="1.4959%" height="15" fill="rgb(236,138,42)" fg:x="37963" fg:w="800"/><text x="71.2784%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="72.4813%" y="181" width="1.4959%" height="15" fill="rgb(213,3,33)" fg:x="38763" fg:w="800"/><text x="72.7743%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="73.9772%" y="181" width="1.4959%" height="15" fill="rgb(228,223,3)" fg:x="39563" fg:w="800"/><text x="74.2702%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="75.4731%" y="181" width="1.4959%" height="15" fill="rgb(205,7,19)" fg:x="40363" fg:w="800"/><text x="75.7660%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="76.9690%" y="181" width="1.5501%" height="15" fill="rgb(206,27,35)" fg:x="41163" fg:w="829"/><text x="77.2619%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="78.5191%" y="181" width="1.4959%" height="15" fill="rgb(222,11,49)" fg:x="41992" fg:w="800"/><text x="78.8120%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="80.0150%" y="181" width="1.4959%" height="15" fill="rgb(232,106,53)" fg:x="42792" fg:w="800"/><text x="80.3079%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="81.5108%" y="181" width="1.5501%" height="15" fill="rgb(248,194,39)" fg:x="43592" fg:w="829"/><text x="81.8038%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="83.0610%" y="181" width="1.4959%" height="15" fill="rgb(210,47,11)" fg:x="44421" fg:w="800"/><text x="83.3539%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="84.5568%" y="181" width="1.4959%" height="15" fill="rgb(242,202,54)" fg:x="45221" fg:w="800"/><text x="84.8498%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="86.0527%" y="181" width="1.4959%" height="15" fill="rgb(214,143,9)" fg:x="46021" fg:w="800"/><text x="86.3457%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="87.5486%" y="181" width="1.4959%" height="15" fill="rgb(232,18,24)" fg:x="46821" fg:w="800"/><text x="87.8416%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="89.0445%" y="181" width="1.4959%" height="15" fill="rgb(206,66,29)" fg:x="47621" fg:w="800"/><text x="89.3375%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="90.5404%" y="181" width="1.4959%" height="15" fill="rgb(237,98,32)" fg:x="48421" fg:w="800"/><text x="90.8334%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="92.0363%" y="181" width="1.5501%" height="15" fill="rgb(214,186,31)" fg:x="49221" fg:w="829"/><text x="92.3292%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="93.5864%" y="181" width="1.4959%" height="15" fill="rgb(247,84,38)" fg:x="50050" fg:w="800"/><text x="93.8794%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="95.0823%" y="181" width="1.4959%" height="15" fill="rgb(216,225,19)" fg:x="50850" fg:w="800"/><text x="95.3752%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.19%)</title><rect x="96.5875%" y="133" width="0.1870%" height="15" fill="rgb(210,13,51)" fg:x="51655" fg:w="100"/><text x="96.8805%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.24%)</title><rect x="96.5875%" y="149" width="0.2375%" height="15" fill="rgb(249,188,22)" fg:x="51655" fg:w="127"/><text x="96.8805%" y="159.50"></text></g><g><title>memset (136 instructions, 0.25%)</title><rect x="96.8250%" y="149" width="0.2543%" height="15" fill="rgb(208,44,49)" fg:x="51782" fg:w="136"/><text x="97.1180%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (428 instructions, 0.80%)</title><rect x="96.5782%" y="165" width="0.8003%" height="15" fill="rgb(239,178,13)" fg:x="51650" fg:w="428"/><text x="96.8711%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="97.3785%" y="149" width="0.0598%" height="15" fill="rgb(236,225,3)" fg:x="52078" fg:w="32"/><text x="97.6714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.4383%" y="101" width="0.1421%" height="15" fill="rgb(231,155,31)" fg:x="52110" fg:w="76"/><text x="97.7313%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="97.4383%" y="117" width="0.2057%" height="15" fill="rgb(232,13,16)" fg:x="52110" fg:w="110"/><text x="97.7313%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.33%)</title><rect x="97.4383%" y="133" width="0.3272%" height="15" fill="rgb(223,153,43)" fg:x="52110" fg:w="175"/><text x="97.7313%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7655%" y="133" width="0.0206%" height="15" fill="rgb(254,208,3)" fg:x="52285" fg:w="11"/><text x="98.0585%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7861%" y="133" width="0.0206%" height="15" fill="rgb(250,117,36)" fg:x="52296" fg:w="11"/><text x="98.0791%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.67%)</title><rect x="97.4383%" y="149" width="0.6713%" height="15" fill="rgb(211,36,50)" fg:x="52110" fg:w="359"/><text x="97.7313%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.06%)</title><rect x="98.1096%" y="149" width="0.0561%" height="15" fill="rgb(207,175,6)" fg:x="52469" fg:w="30"/><text x="98.4025%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 0.92%)</title><rect x="97.3785%" y="165" width="0.9237%" height="15" fill="rgb(226,154,7)" fg:x="52078" fg:w="494"/><text x="97.6714%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.3115%" y="165" width="0.1028%" height="15" fill="rgb(239,34,44)" fg:x="52577" fg:w="55"/><text x="98.6045%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,056 instructions, 1.97%)</title><rect x="96.5782%" y="181" width="1.9746%" height="15" fill="rgb(247,125,24)" fg:x="51650" fg:w="1056"/><text x="96.8711%" y="191.50"></text></g><g><title>heap::batch_get_5_::{{closure}} (52,874 instructions, 98.87%)</title><rect x="0.3197%" y="197" width="98.8669%" height="15" fill="rgb(235,168,20)" fg:x="171" fg:w="52874"/><text x="0.6127%" y="207.50">heap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.1866%" y="197" width="0.0224%" height="15" fill="rgb(238,15,36)" fg:x="53045" fg:w="12"/><text x="99.4796%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="99.3605%" y="181" width="0.1028%" height="15" fill="rgb(206,17,48)" fg:x="53138" fg:w="55"/><text x="99.6535%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="99.4634%" y="181" width="0.1178%" height="15" fill="rgb(233,228,0)" fg:x="53193" fg:w="63"/><text x="99.7563%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 0.61%)</title><rect x="99.2091%" y="197" width="0.6077%" height="15" fill="rgb(215,124,17)" fg:x="53057" fg:w="325"/><text x="99.5020%" y="207.50"></text></g><g><title>all (53,480 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,110,46)" fg:x="0" fg:w="53480"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (53,480 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,4,25)" fg:x="0" fg:w="53480"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>