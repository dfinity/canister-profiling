<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="45877"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0414%" height="15" fill="rgb(222,70,25)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0414%" y="197" width="0.1657%" height="15" fill="rgb(227,91,53)" fg:x="19" fg:w="76"/><text x="0.3344%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2071%" y="197" width="0.1657%" height="15" fill="rgb(245,208,45)" fg:x="95" fg:w="76"/><text x="0.5000%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3727%" y="165" width="0.1657%" height="15" fill="rgb(247,1,5)" fg:x="171" fg:w="76"/><text x="0.6657%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="0.5384%" y="149" width="0.1548%" height="15" fill="rgb(228,188,47)" fg:x="247" fg:w="71"/><text x="0.8314%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="0.6932%" y="149" width="0.8719%" height="15" fill="rgb(251,223,38)" fg:x="318" fg:w="400"/><text x="0.9861%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.19%)</title><rect x="1.5651%" y="149" width="0.1853%" height="15" fill="rgb(232,15,11)" fg:x="718" fg:w="85"/><text x="1.8580%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.7503%" y="149" width="0.1177%" height="15" fill="rgb(246,176,11)" fg:x="803" fg:w="54"/><text x="2.0433%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8680%" y="149" width="0.1177%" height="15" fill="rgb(215,85,34)" fg:x="857" fg:w="54"/><text x="2.1610%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9857%" y="149" width="0.1177%" height="15" fill="rgb(241,155,41)" fg:x="911" fg:w="54"/><text x="2.2787%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.1035%" y="149" width="0.1177%" height="15" fill="rgb(221,181,8)" fg:x="965" fg:w="54"/><text x="2.3964%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="2.2212%" y="149" width="0.1548%" height="15" fill="rgb(231,136,30)" fg:x="1019" fg:w="71"/><text x="2.5141%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="2.3759%" y="149" width="0.1417%" height="15" fill="rgb(241,198,27)" fg:x="1090" fg:w="65"/><text x="2.6689%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="2.5176%" y="149" width="0.8719%" height="15" fill="rgb(210,83,39)" fg:x="1155" fg:w="400"/><text x="2.8106%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.3895%" y="149" width="0.0349%" height="15" fill="rgb(217,88,30)" fg:x="1555" fg:w="16"/><text x="3.6825%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.4244%" y="133" width="0.1657%" height="15" fill="rgb(247,196,11)" fg:x="1571" fg:w="76"/><text x="3.7173%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="3.5900%" y="101" width="0.1308%" height="15" fill="rgb(247,12,24)" fg:x="1647" fg:w="60"/><text x="3.8830%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="3.5900%" y="117" width="0.1853%" height="15" fill="rgb(245,4,51)" fg:x="1647" fg:w="85"/><text x="3.8830%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.7753%" y="69" width="0.0196%" height="15" fill="rgb(220,29,3)" fg:x="1732" fg:w="9"/><text x="4.0683%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.7949%" y="53" width="0.0654%" height="15" fill="rgb(213,19,20)" fg:x="1741" fg:w="30"/><text x="4.0879%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.7949%" y="69" width="0.1199%" height="15" fill="rgb(235,155,32)" fg:x="1741" fg:w="55"/><text x="4.0879%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="3.7753%" y="85" width="0.2572%" height="15" fill="rgb(239,55,50)" fg:x="1732" fg:w="118"/><text x="4.0683%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="3.7753%" y="101" width="0.3727%" height="15" fill="rgb(213,171,4)" fg:x="1732" fg:w="171"/><text x="4.0683%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="3.7753%" y="117" width="0.3836%" height="15" fill="rgb(242,21,39)" fg:x="1732" fg:w="176"/><text x="4.0683%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="3.5900%" y="133" width="0.8109%" height="15" fill="rgb(208,33,48)" fg:x="1647" fg:w="372"/><text x="3.8830%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="3.4244%" y="149" width="1.2948%" height="15" fill="rgb(238,183,42)" fg:x="1571" fg:w="594"/><text x="3.7173%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.19%)</title><rect x="4.7191%" y="149" width="0.1853%" height="15" fill="rgb(240,72,38)" fg:x="2165" fg:w="85"/><text x="5.0121%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="4.9044%" y="149" width="0.1199%" height="15" fill="rgb(215,198,1)" fg:x="2250" fg:w="55"/><text x="5.1974%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="5.0243%" y="149" width="0.1439%" height="15" fill="rgb(218,173,28)" fg:x="2305" fg:w="66"/><text x="5.3173%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="5.1682%" y="149" width="0.1417%" height="15" fill="rgb(233,37,3)" fg:x="2371" fg:w="65"/><text x="5.4611%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="5.3099%" y="133" width="0.8719%" height="15" fill="rgb(228,35,35)" fg:x="2436" fg:w="400"/><text x="5.6028%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.1817%" y="133" width="0.0349%" height="15" fill="rgb(223,136,54)" fg:x="2836" fg:w="16"/><text x="6.4747%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.2166%" y="117" width="0.1657%" height="15" fill="rgb(247,57,35)" fg:x="2852" fg:w="76"/><text x="6.5096%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="6.3823%" y="85" width="0.1308%" height="15" fill="rgb(227,5,17)" fg:x="2928" fg:w="60"/><text x="6.6753%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="6.3823%" y="101" width="0.1853%" height="15" fill="rgb(227,53,32)" fg:x="2928" fg:w="85"/><text x="6.6753%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.5676%" y="53" width="0.0196%" height="15" fill="rgb(248,111,3)" fg:x="3013" fg:w="9"/><text x="6.8605%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.5872%" y="37" width="0.0654%" height="15" fill="rgb(236,229,12)" fg:x="3022" fg:w="30"/><text x="6.8801%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.5872%" y="53" width="0.1199%" height="15" fill="rgb(222,197,9)" fg:x="3022" fg:w="55"/><text x="6.8801%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="6.5676%" y="69" width="0.2572%" height="15" fill="rgb(244,132,36)" fg:x="3013" fg:w="118"/><text x="6.8605%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="6.5676%" y="85" width="0.3727%" height="15" fill="rgb(247,167,31)" fg:x="3013" fg:w="171"/><text x="6.8605%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="6.5676%" y="101" width="0.3836%" height="15" fill="rgb(250,5,44)" fg:x="3013" fg:w="176"/><text x="6.8605%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="6.3823%" y="117" width="0.8109%" height="15" fill="rgb(227,219,11)" fg:x="2928" fg:w="372"/><text x="6.6753%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="6.2166%" y="133" width="1.2948%" height="15" fill="rgb(230,169,46)" fg:x="2852" fg:w="594"/><text x="6.5096%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.19%)</title><rect x="7.5114%" y="133" width="0.1853%" height="15" fill="rgb(210,117,1)" fg:x="3446" fg:w="85"/><text x="7.8044%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.6967%" y="133" width="0.1199%" height="15" fill="rgb(254,104,15)" fg:x="3531" fg:w="55"/><text x="7.9896%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="7.8166%" y="117" width="0.1548%" height="15" fill="rgb(230,88,10)" fg:x="3586" fg:w="71"/><text x="8.1095%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.20%)</title><rect x="7.9713%" y="117" width="0.1984%" height="15" fill="rgb(244,45,39)" fg:x="3657" fg:w="91"/><text x="8.2643%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="8.1697%" y="117" width="0.1439%" height="15" fill="rgb(240,221,46)" fg:x="3748" fg:w="66"/><text x="8.4626%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.63%)</title><rect x="7.8166%" y="133" width="0.6256%" height="15" fill="rgb(211,199,52)" fg:x="3586" fg:w="287"/><text x="8.1095%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="8.4421%" y="133" width="0.1657%" height="15" fill="rgb(209,67,46)" fg:x="3873" fg:w="76"/><text x="8.7351%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 3.74%)</title><rect x="5.3099%" y="149" width="3.7361%" height="15" fill="rgb(217,18,15)" fg:x="2436" fg:w="1714"/><text x="5.6028%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="9.0459%" y="149" width="0.1439%" height="15" fill="rgb(215,61,54)" fg:x="4150" fg:w="66"/><text x="9.3389%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1898%" y="149" width="0.0283%" height="15" fill="rgb(252,157,1)" fg:x="4216" fg:w="13"/><text x="9.4828%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.2181%" y="149" width="0.0283%" height="15" fill="rgb(243,142,4)" fg:x="4229" fg:w="13"/><text x="9.5111%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.2465%" y="149" width="0.0153%" height="15" fill="rgb(254,56,24)" fg:x="4242" fg:w="7"/><text x="9.5394%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.2617%" y="149" width="0.0327%" height="15" fill="rgb(205,97,37)" fg:x="4249" fg:w="15"/><text x="9.5547%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.2944%" y="133" width="0.1657%" height="15" fill="rgb(224,79,1)" fg:x="4264" fg:w="76"/><text x="9.5874%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.35%)</title><rect x="9.2944%" y="149" width="0.3466%" height="15" fill="rgb(238,2,4)" fg:x="4264" fg:w="159"/><text x="9.5874%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.6410%" y="117" width="0.1657%" height="15" fill="rgb(230,102,4)" fg:x="4423" fg:w="76"/><text x="9.9340%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="9.6410%" y="133" width="0.2507%" height="15" fill="rgb(213,67,19)" fg:x="4423" fg:w="115"/><text x="9.9340%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 instructions, 0.40%)</title><rect x="9.6410%" y="149" width="0.3989%" height="15" fill="rgb(254,137,17)" fg:x="4423" fg:w="183"/><text x="9.9340%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.0399%" y="149" width="0.1657%" height="15" fill="rgb(241,71,47)" fg:x="4606" fg:w="76"/><text x="10.3329%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.2055%" y="149" width="0.1766%" height="15" fill="rgb(227,53,11)" fg:x="4682" fg:w="81"/><text x="10.4985%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.3821%" y="149" width="0.1657%" height="15" fill="rgb(247,60,0)" fg:x="4763" fg:w="76"/><text x="10.6751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.5478%" y="149" width="0.1657%" height="15" fill="rgb(245,128,43)" fg:x="4839" fg:w="76"/><text x="10.8407%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.7178%" y="149" width="0.1766%" height="15" fill="rgb(254,111,16)" fg:x="4917" fg:w="81"/><text x="11.0108%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="10.8943%" y="149" width="0.8305%" height="15" fill="rgb(243,222,36)" fg:x="4998" fg:w="381"/><text x="11.1873%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="11.7248%" y="149" width="0.8305%" height="15" fill="rgb(208,222,20)" fg:x="5379" fg:w="381"/><text x="12.0178%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,428 instructions, 14.01%)</title><rect x="0.5384%" y="165" width="14.0114%" height="15" fill="rgb(234,69,8)" fg:x="247" fg:w="6428"/><text x="0.8314%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (336 instructions, 0.73%)</title><rect x="14.5498%" y="165" width="0.7324%" height="15" fill="rgb(236,178,54)" fg:x="6675" fg:w="336"/><text x="14.8427%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.2822%" y="149" width="0.0109%" height="15" fill="rgb(244,188,38)" fg:x="7011" fg:w="5"/><text x="15.5751%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.09%)</title><rect x="15.2822%" y="165" width="0.0850%" height="15" fill="rgb(215,71,18)" fg:x="7011" fg:w="39"/><text x="15.5751%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.16%)</title><rect x="15.3672%" y="165" width="0.1591%" height="15" fill="rgb(224,27,49)" fg:x="7050" fg:w="73"/><text x="15.6601%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.5263%" y="149" width="0.0109%" height="15" fill="rgb(242,65,32)" fg:x="7123" fg:w="5"/><text x="15.8193%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="15.5372%" y="133" width="0.1155%" height="15" fill="rgb(240,2,7)" fg:x="7128" fg:w="53"/><text x="15.8302%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="15.6527%" y="133" width="0.1940%" height="15" fill="rgb(215,51,41)" fg:x="7181" fg:w="89"/><text x="15.9457%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="15.8467%" y="133" width="0.3509%" height="15" fill="rgb(213,114,51)" fg:x="7270" fg:w="161"/><text x="16.1397%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="15.5372%" y="149" width="1.1771%" height="15" fill="rgb(236,175,29)" fg:x="7128" fg:w="540"/><text x="15.8302%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.65%)</title><rect x="15.5263%" y="165" width="1.6457%" height="15" fill="rgb(252,5,32)" fg:x="7123" fg:w="755"/><text x="15.8193%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="17.1720%" y="149" width="0.1199%" height="15" fill="rgb(243,5,26)" fg:x="7878" fg:w="55"/><text x="17.4650%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (162 instructions, 0.35%)</title><rect x="17.1720%" y="165" width="0.3531%" height="15" fill="rgb(247,138,42)" fg:x="7878" fg:w="162"/><text x="17.4650%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.5251%" y="149" width="0.0109%" height="15" fill="rgb(230,91,16)" fg:x="8040" fg:w="5"/><text x="17.8181%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="17.5360%" y="133" width="0.1155%" height="15" fill="rgb(237,190,4)" fg:x="8045" fg:w="53"/><text x="17.8290%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="17.6515%" y="133" width="0.1940%" height="15" fill="rgb(210,139,11)" fg:x="8098" fg:w="89"/><text x="17.9445%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="17.8455%" y="133" width="0.3509%" height="15" fill="rgb(234,64,18)" fg:x="8187" fg:w="161"/><text x="18.1385%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="17.5360%" y="149" width="1.1771%" height="15" fill="rgb(228,186,7)" fg:x="8045" fg:w="540"/><text x="17.8290%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="18.7131%" y="149" width="0.1482%" height="15" fill="rgb(214,206,17)" fg:x="8585" fg:w="68"/><text x="19.0060%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="18.8613%" y="133" width="0.1766%" height="15" fill="rgb(254,7,13)" fg:x="8653" fg:w="81"/><text x="19.1543%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.24%)</title><rect x="18.8613%" y="149" width="0.2354%" height="15" fill="rgb(207,21,18)" fg:x="8653" fg:w="108"/><text x="19.1543%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.94%)</title><rect x="17.5251%" y="165" width="1.9378%" height="15" fill="rgb(226,47,47)" fg:x="8040" fg:w="889"/><text x="17.8181%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="19.4629%" y="117" width="0.1155%" height="15" fill="rgb(215,39,5)" fg:x="8929" fg:w="53"/><text x="19.7559%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.17%)</title><rect x="19.4629%" y="133" width="0.1722%" height="15" fill="rgb(219,43,5)" fg:x="8929" fg:w="79"/><text x="19.7559%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.64%)</title><rect x="19.4629%" y="149" width="0.6365%" height="15" fill="rgb(216,12,8)" fg:x="8929" fg:w="292"/><text x="19.7559%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.03%)</title><rect x="20.0994%" y="149" width="0.0327%" height="15" fill="rgb(212,28,34)" fg:x="9221" fg:w="15"/><text x="20.3924%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.1321%" y="149" width="0.0240%" height="15" fill="rgb(241,132,21)" fg:x="9236" fg:w="11"/><text x="20.4251%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.04%)</title><rect x="19.4629%" y="165" width="1.0419%" height="15" fill="rgb(222,189,14)" fg:x="8929" fg:w="478"/><text x="19.7559%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.07%)</title><rect x="20.5048%" y="165" width="0.0719%" height="15" fill="rgb(237,60,46)" fg:x="9407" fg:w="33"/><text x="20.7978%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.5768%" y="149" width="0.2681%" height="15" fill="rgb(236,6,48)" fg:x="9440" fg:w="123"/><text x="20.8697%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.9037%" y="149" width="0.2681%" height="15" fill="rgb(208,213,39)" fg:x="9590" fg:w="123"/><text x="21.1967%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.65%)</title><rect x="20.5768%" y="165" width="0.6539%" height="15" fill="rgb(239,115,17)" fg:x="9440" fg:w="300"/><text x="20.8697%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="21.2307%" y="149" width="0.0610%" height="15" fill="rgb(214,119,12)" fg:x="9740" fg:w="28"/><text x="21.5237%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.21%)</title><rect x="21.2307%" y="165" width="0.2114%" height="15" fill="rgb(224,91,2)" fg:x="9740" fg:w="97"/><text x="21.5237%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.4421%" y="165" width="0.0240%" height="15" fill="rgb(223,56,17)" fg:x="9837" fg:w="11"/><text x="21.7351%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.4661%" y="165" width="0.0240%" height="15" fill="rgb(231,144,0)" fg:x="9848" fg:w="11"/><text x="21.7591%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.4901%" y="165" width="0.0240%" height="15" fill="rgb(232,128,45)" fg:x="9859" fg:w="11"/><text x="21.7830%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.90%)</title><rect x="21.5140%" y="165" width="0.8959%" height="15" fill="rgb(252,169,21)" fg:x="9870" fg:w="411"/><text x="21.8070%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="22.4099%" y="133" width="0.0262%" height="15" fill="rgb(208,105,28)" fg:x="10281" fg:w="12"/><text x="22.7029%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.37%)</title><rect x="22.4361%" y="133" width="0.3662%" height="15" fill="rgb(221,138,46)" fg:x="10293" fg:w="168"/><text x="22.7290%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="22.8023%" y="101" width="0.1373%" height="15" fill="rgb(210,4,3)" fg:x="10461" fg:w="63"/><text x="23.0952%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.46%)</title><rect x="22.8023%" y="117" width="0.4556%" height="15" fill="rgb(222,164,1)" fg:x="10461" fg:w="209"/><text x="23.0952%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.51%)</title><rect x="22.8023%" y="133" width="0.5144%" height="15" fill="rgb(245,186,34)" fg:x="10461" fg:w="236"/><text x="23.0952%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.3167%" y="133" width="0.0240%" height="15" fill="rgb(227,89,23)" fg:x="10697" fg:w="11"/><text x="23.6097%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 1.02%)</title><rect x="22.4099%" y="149" width="1.0223%" height="15" fill="rgb(215,30,15)" fg:x="10281" fg:w="469"/><text x="22.7029%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 1.10%)</title><rect x="22.4099%" y="165" width="1.0964%" height="15" fill="rgb(246,32,0)" fg:x="10281" fg:w="503"/><text x="22.7029%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="23.5063%" y="149" width="0.1199%" height="15" fill="rgb(205,118,10)" fg:x="10784" fg:w="55"/><text x="23.7993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="23.6262%" y="149" width="0.1373%" height="15" fill="rgb(206,18,31)" fg:x="10839" fg:w="63"/><text x="23.9192%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 0.44%)</title><rect x="23.5063%" y="165" width="0.4359%" height="15" fill="rgb(242,197,26)" fg:x="10784" fg:w="200"/><text x="23.7993%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,204 instructions, 24.42%)</title><rect x="0.3727%" y="181" width="24.4218%" height="15" fill="rgb(225,130,40)" fg:x="171" fg:w="11204"/><text x="0.6657%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="24.7946%" y="181" width="1.4125%" height="15" fill="rgb(239,68,17)" fg:x="11375" fg:w="648"/><text x="25.0875%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="26.2070%" y="181" width="1.4757%" height="15" fill="rgb(233,58,7)" fg:x="12023" fg:w="677"/><text x="26.5000%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.33%)</title><rect x="27.6827%" y="181" width="1.3296%" height="15" fill="rgb(236,212,2)" fg:x="12700" fg:w="610"/><text x="27.9757%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="29.0124%" y="181" width="1.4125%" height="15" fill="rgb(233,174,35)" fg:x="13310" fg:w="648"/><text x="29.3053%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="30.4248%" y="181" width="1.4125%" height="15" fill="rgb(213,172,15)" fg:x="13958" fg:w="648"/><text x="30.7178%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (697 instructions, 1.52%)</title><rect x="31.8373%" y="181" width="1.5193%" height="15" fill="rgb(245,85,29)" fg:x="14606" fg:w="697"/><text x="32.1303%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="33.3566%" y="181" width="1.4757%" height="15" fill="rgb(248,196,9)" fg:x="15303" fg:w="677"/><text x="33.6496%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="34.8323%" y="181" width="1.4125%" height="15" fill="rgb(239,65,41)" fg:x="15980" fg:w="648"/><text x="35.1252%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="36.2447%" y="181" width="1.4125%" height="15" fill="rgb(246,37,22)" fg:x="16628" fg:w="648"/><text x="36.5377%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="37.6572%" y="181" width="1.4125%" height="15" fill="rgb(225,163,41)" fg:x="17276" fg:w="648"/><text x="37.9502%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="39.0697%" y="181" width="1.4757%" height="15" fill="rgb(250,63,48)" fg:x="17924" fg:w="677"/><text x="39.3627%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="40.5454%" y="181" width="1.4757%" height="15" fill="rgb(230,25,53)" fg:x="18601" fg:w="677"/><text x="40.8383%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (639 instructions, 1.39%)</title><rect x="42.0211%" y="181" width="1.3929%" height="15" fill="rgb(216,131,53)" fg:x="19278" fg:w="639"/><text x="42.3140%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="43.4139%" y="181" width="1.4125%" height="15" fill="rgb(224,145,40)" fg:x="19917" fg:w="648"/><text x="43.7069%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="44.8264%" y="181" width="1.4125%" height="15" fill="rgb(219,66,44)" fg:x="20565" fg:w="648"/><text x="45.1194%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="46.2389%" y="181" width="1.4125%" height="15" fill="rgb(222,32,35)" fg:x="21213" fg:w="648"/><text x="46.5318%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="47.6513%" y="181" width="1.4125%" height="15" fill="rgb(242,187,1)" fg:x="21861" fg:w="648"/><text x="47.9443%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="49.0638%" y="181" width="1.4125%" height="15" fill="rgb(245,140,25)" fg:x="22509" fg:w="648"/><text x="49.3568%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (639 instructions, 1.39%)</title><rect x="50.4763%" y="181" width="1.3929%" height="15" fill="rgb(206,184,13)" fg:x="23157" fg:w="639"/><text x="50.7692%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="51.8691%" y="181" width="1.4125%" height="15" fill="rgb(217,175,29)" fg:x="23796" fg:w="648"/><text x="52.1621%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="53.2816%" y="181" width="1.4125%" height="15" fill="rgb(225,63,48)" fg:x="24444" fg:w="648"/><text x="53.5746%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="54.6941%" y="181" width="1.4757%" height="15" fill="rgb(251,26,2)" fg:x="25092" fg:w="677"/><text x="54.9870%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="56.1698%" y="181" width="1.4125%" height="15" fill="rgb(239,30,50)" fg:x="25769" fg:w="648"/><text x="56.4627%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="57.5822%" y="181" width="1.4757%" height="15" fill="rgb(251,23,45)" fg:x="26417" fg:w="677"/><text x="57.8752%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="59.0579%" y="181" width="1.4125%" height="15" fill="rgb(225,121,0)" fg:x="27094" fg:w="648"/><text x="59.3509%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="60.4704%" y="181" width="1.4125%" height="15" fill="rgb(238,221,26)" fg:x="27742" fg:w="648"/><text x="60.7634%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="61.8829%" y="181" width="1.4757%" height="15" fill="rgb(215,152,42)" fg:x="28390" fg:w="677"/><text x="62.1758%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="63.3585%" y="181" width="1.4125%" height="15" fill="rgb(242,67,11)" fg:x="29067" fg:w="648"/><text x="63.6515%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.33%)</title><rect x="64.7710%" y="181" width="1.3296%" height="15" fill="rgb(216,163,25)" fg:x="29715" fg:w="610"/><text x="65.0640%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (668 instructions, 1.46%)</title><rect x="66.1007%" y="181" width="1.4561%" height="15" fill="rgb(217,13,10)" fg:x="30325" fg:w="668"/><text x="66.3936%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="67.5567%" y="181" width="1.4125%" height="15" fill="rgb(216,203,35)" fg:x="30993" fg:w="648"/><text x="67.8497%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="68.9692%" y="181" width="1.4125%" height="15" fill="rgb(215,228,20)" fg:x="31641" fg:w="648"/><text x="69.2622%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="70.3817%" y="181" width="1.4125%" height="15" fill="rgb(236,71,43)" fg:x="32289" fg:w="648"/><text x="70.6746%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="71.7941%" y="181" width="1.4125%" height="15" fill="rgb(244,50,9)" fg:x="32937" fg:w="648"/><text x="72.0871%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="73.2066%" y="181" width="1.4125%" height="15" fill="rgb(209,94,20)" fg:x="33585" fg:w="648"/><text x="73.4996%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="74.6191%" y="181" width="1.4757%" height="15" fill="rgb(205,219,4)" fg:x="34233" fg:w="677"/><text x="74.9121%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="76.0948%" y="181" width="1.4125%" height="15" fill="rgb(250,207,27)" fg:x="34910" fg:w="648"/><text x="76.3877%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.54%)</title><rect x="77.5072%" y="181" width="1.5389%" height="15" fill="rgb(248,91,49)" fg:x="35558" fg:w="706"/><text x="77.8002%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.54%)</title><rect x="79.0461%" y="181" width="1.5389%" height="15" fill="rgb(213,131,25)" fg:x="36264" fg:w="706"/><text x="79.3391%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.33%)</title><rect x="80.5850%" y="181" width="1.3296%" height="15" fill="rgb(208,157,45)" fg:x="36970" fg:w="610"/><text x="80.8780%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="81.9147%" y="181" width="1.4125%" height="15" fill="rgb(244,87,12)" fg:x="37580" fg:w="648"/><text x="82.2077%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="83.3272%" y="181" width="1.4757%" height="15" fill="rgb(215,190,43)" fg:x="38228" fg:w="677"/><text x="83.6201%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="84.8028%" y="181" width="1.4125%" height="15" fill="rgb(212,173,46)" fg:x="38905" fg:w="648"/><text x="85.0958%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="86.2153%" y="181" width="1.4125%" height="15" fill="rgb(236,207,51)" fg:x="39553" fg:w="648"/><text x="86.5083%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="87.6278%" y="181" width="1.4757%" height="15" fill="rgb(226,141,36)" fg:x="40201" fg:w="677"/><text x="87.9208%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.33%)</title><rect x="89.1035%" y="181" width="1.3296%" height="15" fill="rgb(230,179,42)" fg:x="40878" fg:w="610"/><text x="89.3964%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.48%)</title><rect x="90.4331%" y="181" width="1.4757%" height="15" fill="rgb(218,161,12)" fg:x="41488" fg:w="677"/><text x="90.7261%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="91.9088%" y="181" width="1.4125%" height="15" fill="rgb(210,164,48)" fg:x="42165" fg:w="648"/><text x="92.2018%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="93.3213%" y="181" width="1.4125%" height="15" fill="rgb(243,64,22)" fg:x="42813" fg:w="648"/><text x="93.6142%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="94.7337%" y="181" width="1.4125%" height="15" fill="rgb(217,212,3)" fg:x="43461" fg:w="648"/><text x="95.0267%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="96.1462%" y="149" width="0.0109%" height="15" fill="rgb(248,45,43)" fg:x="44109" fg:w="5"/><text x="96.4392%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="96.1571%" y="133" width="0.1199%" height="15" fill="rgb(248,135,29)" fg:x="44114" fg:w="55"/><text x="96.4501%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.18%)</title><rect x="96.1571%" y="149" width="0.1787%" height="15" fill="rgb(229,12,23)" fg:x="44114" fg:w="82"/><text x="96.4501%" y="159.50"></text></g><g><title>memset (136 instructions, 0.30%)</title><rect x="96.3359%" y="149" width="0.2964%" height="15" fill="rgb(212,27,39)" fg:x="44196" fg:w="136"/><text x="96.6288%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (382 instructions, 0.83%)</title><rect x="96.1462%" y="165" width="0.8327%" height="15" fill="rgb(249,223,45)" fg:x="44109" fg:w="382"/><text x="96.4392%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="96.9789%" y="149" width="0.0698%" height="15" fill="rgb(223,120,0)" fg:x="44491" fg:w="32"/><text x="97.2718%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="97.0486%" y="117" width="0.1657%" height="15" fill="rgb(254,117,27)" fg:x="44523" fg:w="76"/><text x="97.3416%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="97.0486%" y="133" width="0.2507%" height="15" fill="rgb(209,138,22)" fg:x="44523" fg:w="115"/><text x="97.3416%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (180 instructions, 0.39%)</title><rect x="97.0486%" y="149" width="0.3924%" height="15" fill="rgb(226,199,7)" fg:x="44523" fg:w="180"/><text x="97.3416%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.4410%" y="149" width="0.0240%" height="15" fill="rgb(210,16,42)" fg:x="44703" fg:w="11"/><text x="97.7340%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.4650%" y="149" width="0.0240%" height="15" fill="rgb(211,86,30)" fg:x="44714" fg:w="11"/><text x="97.7579%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="97.4889%" y="149" width="0.0654%" height="15" fill="rgb(228,105,21)" fg:x="44725" fg:w="30"/><text x="97.7819%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="97.5543%" y="149" width="0.0109%" height="15" fill="rgb(247,56,0)" fg:x="44755" fg:w="5"/><text x="97.8473%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (476 instructions, 1.04%)</title><rect x="96.9789%" y="165" width="1.0376%" height="15" fill="rgb(239,199,20)" fg:x="44491" fg:w="476"/><text x="97.2718%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.0164%" y="165" width="0.0109%" height="15" fill="rgb(219,4,24)" fg:x="44967" fg:w="5"/><text x="98.3094%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="98.0273%" y="165" width="0.1199%" height="15" fill="rgb(232,15,15)" fg:x="44972" fg:w="55"/><text x="98.3203%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (992 instructions, 2.16%)</title><rect x="96.1462%" y="181" width="2.1623%" height="15" fill="rgb(230,23,13)" fg:x="44109" fg:w="992"/><text x="96.4392%" y="191.50">i..</text></g><g><title>heap::batch_get_2_::{{closure}} (45,270 instructions, 98.68%)</title><rect x="0.3727%" y="197" width="98.6769%" height="15" fill="rgb(252,33,49)" fg:x="171" fg:w="45270"/><text x="0.6657%" y="207.50">heap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.0496%" y="197" width="0.0262%" height="15" fill="rgb(248,46,26)" fg:x="45441" fg:w="12"/><text x="99.3426%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="99.2523%" y="181" width="0.1199%" height="15" fill="rgb(246,53,14)" fg:x="45534" fg:w="55"/><text x="99.5453%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="99.3722%" y="181" width="0.1373%" height="15" fill="rgb(207,152,10)" fg:x="45589" fg:w="63"/><text x="99.6652%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (326 instructions, 0.71%)</title><rect x="99.0758%" y="197" width="0.7106%" height="15" fill="rgb(249,40,1)" fg:x="45453" fg:w="326"/><text x="99.3688%" y="207.50"></text></g><g><title>all (45,877 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,90,47)" fg:x="0" fg:w="45877"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (45,877 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(254,122,17)" fg:x="0" fg:w="45877"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>