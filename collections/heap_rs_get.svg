<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="49946"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0481%" height="15" fill="rgb(214,67,17)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.0481%" y="197" width="0.1642%" height="15" fill="rgb(222,30,26)" fg:x="24" fg:w="82"/><text x="0.3410%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.2122%" y="197" width="0.1642%" height="15" fill="rgb(206,85,42)" fg:x="106" fg:w="82"/><text x="0.5052%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.3764%" y="165" width="0.1642%" height="15" fill="rgb(238,55,25)" fg:x="188" fg:w="82"/><text x="0.6694%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5406%" y="149" width="0.1642%" height="15" fill="rgb(215,196,38)" fg:x="270" fg:w="82"/><text x="0.8336%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7048%" y="133" width="0.0120%" height="15" fill="rgb(247,223,46)" fg:x="352" fg:w="6"/><text x="0.9977%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="0.7048%" y="149" width="0.8870%" height="15" fill="rgb(206,59,35)" fg:x="352" fg:w="443"/><text x="0.9977%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5917%" y="149" width="0.1902%" height="15" fill="rgb(232,167,12)" fg:x="795" fg:w="95"/><text x="1.8847%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7819%" y="149" width="0.1201%" height="15" fill="rgb(243,183,14)" fg:x="890" fg:w="60"/><text x="2.0749%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9021%" y="149" width="0.1201%" height="15" fill="rgb(223,17,13)" fg:x="950" fg:w="60"/><text x="2.1950%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0222%" y="149" width="0.1201%" height="15" fill="rgb(238,120,5)" fg:x="1010" fg:w="60"/><text x="2.3152%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1423%" y="149" width="0.1201%" height="15" fill="rgb(238,133,10)" fg:x="1070" fg:w="60"/><text x="2.4353%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2624%" y="149" width="0.1642%" height="15" fill="rgb(207,32,44)" fg:x="1130" fg:w="82"/><text x="2.5554%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4266%" y="149" width="0.1402%" height="15" fill="rgb(219,116,6)" fg:x="1212" fg:w="70"/><text x="2.7196%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5668%" y="133" width="0.0120%" height="15" fill="rgb(209,43,26)" fg:x="1282" fg:w="6"/><text x="2.8597%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="2.5668%" y="149" width="0.8870%" height="15" fill="rgb(225,101,38)" fg:x="1282" fg:w="443"/><text x="2.8597%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4537%" y="149" width="0.0380%" height="15" fill="rgb(241,87,15)" fg:x="1725" fg:w="19"/><text x="3.7467%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="3.4918%" y="133" width="0.1642%" height="15" fill="rgb(223,63,12)" fg:x="1744" fg:w="82"/><text x="3.7847%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6559%" y="101" width="0.1341%" height="15" fill="rgb(216,94,12)" fg:x="1826" fg:w="67"/><text x="3.9489%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="3.6559%" y="117" width="0.1922%" height="15" fill="rgb(216,0,18)" fg:x="1826" fg:w="96"/><text x="3.9489%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8482%" y="69" width="0.0220%" height="15" fill="rgb(246,193,41)" fg:x="1922" fg:w="11"/><text x="4.1411%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8702%" y="53" width="0.0701%" height="15" fill="rgb(213,213,29)" fg:x="1933" fg:w="35"/><text x="4.1631%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="3.8702%" y="69" width="0.1281%" height="15" fill="rgb(234,219,14)" fg:x="1933" fg:w="64"/><text x="4.1631%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="3.8482%" y="85" width="0.2883%" height="15" fill="rgb(231,204,54)" fg:x="1922" fg:w="144"/><text x="4.1411%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="3.8482%" y="101" width="0.4185%" height="15" fill="rgb(232,88,3)" fg:x="1922" fg:w="209"/><text x="4.1411%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="3.8482%" y="117" width="0.4385%" height="15" fill="rgb(245,86,49)" fg:x="1922" fg:w="219"/><text x="4.1411%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.91%)</title><rect x="3.6559%" y="133" width="0.9150%" height="15" fill="rgb(221,187,51)" fg:x="1826" fg:w="457"/><text x="3.9489%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.36%)</title><rect x="3.4918%" y="149" width="1.3555%" height="15" fill="rgb(219,137,35)" fg:x="1744" fg:w="677"/><text x="3.7847%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8472%" y="149" width="0.1902%" height="15" fill="rgb(219,34,27)" fg:x="2421" fg:w="95"/><text x="5.1402%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0374%" y="149" width="0.1201%" height="15" fill="rgb(228,150,19)" fg:x="2516" fg:w="60"/><text x="5.3304%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1576%" y="149" width="0.1522%" height="15" fill="rgb(243,74,7)" fg:x="2576" fg:w="76"/><text x="5.4505%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3097%" y="149" width="0.1402%" height="15" fill="rgb(222,140,20)" fg:x="2652" fg:w="70"/><text x="5.6027%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4499%" y="117" width="0.0120%" height="15" fill="rgb(217,178,27)" fg:x="2722" fg:w="6"/><text x="5.7429%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="5.4499%" y="133" width="0.8870%" height="15" fill="rgb(231,117,12)" fg:x="2722" fg:w="443"/><text x="5.7429%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3368%" y="133" width="0.0380%" height="15" fill="rgb(236,26,4)" fg:x="3165" fg:w="19"/><text x="6.6298%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="6.3749%" y="117" width="0.1642%" height="15" fill="rgb(224,147,5)" fg:x="3184" fg:w="82"/><text x="6.6679%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5391%" y="85" width="0.1341%" height="15" fill="rgb(216,90,6)" fg:x="3266" fg:w="67"/><text x="6.8320%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="6.5391%" y="101" width="0.1922%" height="15" fill="rgb(241,44,31)" fg:x="3266" fg:w="96"/><text x="6.8320%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7313%" y="53" width="0.0220%" height="15" fill="rgb(235,56,2)" fg:x="3362" fg:w="11"/><text x="7.0242%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7533%" y="37" width="0.0701%" height="15" fill="rgb(249,221,40)" fg:x="3373" fg:w="35"/><text x="7.0463%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="6.7533%" y="53" width="0.1281%" height="15" fill="rgb(233,118,51)" fg:x="3373" fg:w="64"/><text x="7.0463%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="6.7313%" y="69" width="0.2883%" height="15" fill="rgb(213,86,9)" fg:x="3362" fg:w="144"/><text x="7.0242%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="6.7313%" y="85" width="0.4185%" height="15" fill="rgb(207,219,11)" fg:x="3362" fg:w="209"/><text x="7.0242%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="6.7313%" y="101" width="0.4385%" height="15" fill="rgb(224,74,31)" fg:x="3362" fg:w="219"/><text x="7.0242%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.91%)</title><rect x="6.5391%" y="117" width="0.9150%" height="15" fill="rgb(235,22,31)" fg:x="3266" fg:w="457"/><text x="6.8320%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.36%)</title><rect x="6.3749%" y="133" width="1.3555%" height="15" fill="rgb(210,131,47)" fg:x="3184" fg:w="677"/><text x="6.6679%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7303%" y="133" width="0.1902%" height="15" fill="rgb(253,56,19)" fg:x="3861" fg:w="95"/><text x="8.0233%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9206%" y="133" width="0.1201%" height="15" fill="rgb(211,123,36)" fg:x="3956" fg:w="60"/><text x="8.2135%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0407%" y="117" width="0.1642%" height="15" fill="rgb(239,21,49)" fg:x="4016" fg:w="82"/><text x="8.3337%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2049%" y="117" width="0.1902%" height="15" fill="rgb(249,102,52)" fg:x="4098" fg:w="95"/><text x="8.4978%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.3951%" y="117" width="0.1522%" height="15" fill="rgb(217,101,36)" fg:x="4193" fg:w="76"/><text x="8.6880%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0407%" y="133" width="0.6607%" height="15" fill="rgb(215,104,24)" fg:x="4016" fg:w="330"/><text x="8.3337%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7014%" y="133" width="0.1642%" height="15" fill="rgb(219,78,26)" fg:x="4346" fg:w="82"/><text x="8.9944%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 3.90%)</title><rect x="5.4499%" y="149" width="3.8962%" height="15" fill="rgb(251,36,4)" fg:x="2722" fg:w="1946"/><text x="5.7429%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3461%" y="149" width="0.1522%" height="15" fill="rgb(207,138,26)" fg:x="4668" fg:w="76"/><text x="9.6391%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.4983%" y="149" width="0.0300%" height="15" fill="rgb(212,70,11)" fg:x="4744" fg:w="15"/><text x="9.7912%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5283%" y="149" width="0.0300%" height="15" fill="rgb(221,228,7)" fg:x="4759" fg:w="15"/><text x="9.8213%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5583%" y="149" width="0.0300%" height="15" fill="rgb(242,24,40)" fg:x="4774" fg:w="15"/><text x="9.8513%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="9.5884%" y="149" width="0.0140%" height="15" fill="rgb(242,35,0)" fg:x="4789" fg:w="7"/><text x="9.8813%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="9.6024%" y="133" width="0.1642%" height="15" fill="rgb(231,21,5)" fg:x="4796" fg:w="82"/><text x="9.8953%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.36%)</title><rect x="9.6024%" y="149" width="0.3564%" height="15" fill="rgb(215,41,3)" fg:x="4796" fg:w="178"/><text x="9.8953%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="9.9588%" y="117" width="0.1642%" height="15" fill="rgb(235,227,33)" fg:x="4974" fg:w="82"/><text x="10.2517%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.26%)</title><rect x="9.9588%" y="133" width="0.2603%" height="15" fill="rgb(218,9,30)" fg:x="4974" fg:w="130"/><text x="10.2517%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.43%)</title><rect x="9.9588%" y="149" width="0.4305%" height="15" fill="rgb(210,141,17)" fg:x="4974" fg:w="215"/><text x="10.2517%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.3892%" y="149" width="0.1642%" height="15" fill="rgb(225,111,34)" fg:x="5189" fg:w="82"/><text x="10.6822%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.5534%" y="149" width="0.1782%" height="15" fill="rgb(218,5,37)" fg:x="5271" fg:w="89"/><text x="10.8464%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.7316%" y="149" width="0.1642%" height="15" fill="rgb(227,109,15)" fg:x="5360" fg:w="82"/><text x="11.0246%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.8958%" y="149" width="0.1642%" height="15" fill="rgb(226,210,49)" fg:x="5442" fg:w="82"/><text x="11.1887%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.0680%" y="149" width="0.1782%" height="15" fill="rgb(212,140,3)" fg:x="5528" fg:w="89"/><text x="11.3609%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.78%)</title><rect x="11.2461%" y="149" width="0.7848%" height="15" fill="rgb(214,156,51)" fg:x="5617" fg:w="392"/><text x="11.5391%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.78%)</title><rect x="12.0310%" y="149" width="0.7848%" height="15" fill="rgb(212,80,31)" fg:x="6009" fg:w="392"/><text x="12.3240%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.01%)</title><rect x="12.8158%" y="149" width="1.0091%" height="15" fill="rgb(233,9,5)" fg:x="6401" fg:w="504"/><text x="13.1088%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 15.70%)</title><rect x="0.5406%" y="165" width="15.7050%" height="15" fill="rgb(230,63,38)" fg:x="270" fg:w="7844"/><text x="0.8336%" y="175.50">candid::de::IDLDeser..</text></g><g><title>memcpy (344 instructions, 0.69%)</title><rect x="16.2455%" y="165" width="0.6887%" height="15" fill="rgb(225,6,38)" fg:x="8114" fg:w="344"/><text x="16.5385%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.9343%" y="149" width="0.0140%" height="15" fill="rgb(229,93,20)" fg:x="8458" fg:w="7"/><text x="17.2273%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="16.9343%" y="165" width="0.0781%" height="15" fill="rgb(250,179,39)" fg:x="8458" fg:w="39"/><text x="17.2273%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="17.0124%" y="165" width="0.1642%" height="15" fill="rgb(212,122,32)" fg:x="8497" fg:w="82"/><text x="17.3053%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="17.1766%" y="149" width="0.0140%" height="15" fill="rgb(239,157,32)" fg:x="8579" fg:w="7"/><text x="17.4695%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="17.1906%" y="133" width="0.1181%" height="15" fill="rgb(250,5,41)" fg:x="8586" fg:w="59"/><text x="17.4835%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="17.3087%" y="133" width="0.1882%" height="15" fill="rgb(238,33,4)" fg:x="8645" fg:w="94"/><text x="17.6017%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="17.4969%" y="133" width="0.3464%" height="15" fill="rgb(209,189,50)" fg:x="8739" fg:w="173"/><text x="17.7899%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="17.1906%" y="149" width="1.1593%" height="15" fill="rgb(232,110,42)" fg:x="8586" fg:w="579"/><text x="17.4835%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 1.60%)</title><rect x="17.1766%" y="165" width="1.5957%" height="15" fill="rgb(208,229,47)" fg:x="8579" fg:w="797"/><text x="17.4695%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (219 instructions, 0.44%)</title><rect x="18.7723%" y="165" width="0.4385%" height="15" fill="rgb(235,206,31)" fg:x="9376" fg:w="219"/><text x="19.0652%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="19.2107%" y="149" width="0.0140%" height="15" fill="rgb(222,185,3)" fg:x="9595" fg:w="7"/><text x="19.5037%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="19.2248%" y="133" width="0.1181%" height="15" fill="rgb(242,228,33)" fg:x="9602" fg:w="59"/><text x="19.5177%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="19.3429%" y="133" width="0.1882%" height="15" fill="rgb(250,18,49)" fg:x="9661" fg:w="94"/><text x="19.6359%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="19.5311%" y="133" width="0.3464%" height="15" fill="rgb(246,166,31)" fg:x="9755" fg:w="173"/><text x="19.8241%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="19.2248%" y="149" width="1.1593%" height="15" fill="rgb(220,70,36)" fg:x="9602" fg:w="579"/><text x="19.5177%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="20.3840%" y="149" width="0.1542%" height="15" fill="rgb(215,156,47)" fg:x="10181" fg:w="77"/><text x="20.6770%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="20.5382%" y="133" width="0.1782%" height="15" fill="rgb(221,212,53)" fg:x="10258" fg:w="89"/><text x="20.8311%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.27%)</title><rect x="20.5382%" y="149" width="0.2663%" height="15" fill="rgb(243,100,36)" fg:x="10258" fg:w="133"/><text x="20.8311%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 1.95%)</title><rect x="19.2107%" y="165" width="1.9521%" height="15" fill="rgb(219,122,14)" fg:x="9595" fg:w="975"/><text x="19.5037%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="21.1629%" y="117" width="0.1181%" height="15" fill="rgb(230,87,20)" fg:x="10570" fg:w="59"/><text x="21.4558%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.20%)</title><rect x="21.1629%" y="133" width="0.2042%" height="15" fill="rgb(219,54,7)" fg:x="10570" fg:w="102"/><text x="21.4558%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.65%)</title><rect x="21.1629%" y="149" width="0.6467%" height="15" fill="rgb(233,218,46)" fg:x="10570" fg:w="323"/><text x="21.4558%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.307 (34 instructions, 0.07%)</title><rect x="21.8096%" y="149" width="0.0681%" height="15" fill="rgb(231,218,51)" fg:x="10893" fg:w="34"/><text x="22.1025%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.8776%" y="149" width="0.0260%" height="15" fill="rgb(212,146,43)" fg:x="10927" fg:w="13"/><text x="22.1706%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 1.11%)</title><rect x="21.1629%" y="165" width="1.1112%" height="15" fill="rgb(226,53,29)" fg:x="10570" fg:w="555"/><text x="21.4558%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="22.2741%" y="165" width="0.0981%" height="15" fill="rgb(254,77,4)" fg:x="11125" fg:w="49"/><text x="22.5670%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="22.3722%" y="133" width="0.0541%" height="15" fill="rgb(244,196,20)" fg:x="11174" fg:w="27"/><text x="22.6651%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="22.3722%" y="149" width="0.2843%" height="15" fill="rgb(247,35,40)" fg:x="11174" fg:w="142"/><text x="22.6651%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="22.7446%" y="133" width="0.0541%" height="15" fill="rgb(235,94,9)" fg:x="11360" fg:w="27"/><text x="23.0375%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="22.7446%" y="149" width="0.2843%" height="15" fill="rgb(211,134,38)" fg:x="11360" fg:w="142"/><text x="23.0375%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 0.74%)</title><rect x="22.3722%" y="165" width="0.7448%" height="15" fill="rgb(249,51,11)" fg:x="11174" fg:w="372"/><text x="22.6651%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.07%)</title><rect x="23.1170%" y="149" width="0.0701%" height="15" fill="rgb(241,171,44)" fg:x="11546" fg:w="35"/><text x="23.4099%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.07%)</title><rect x="23.1870%" y="149" width="0.0681%" height="15" fill="rgb(250,10,21)" fg:x="11581" fg:w="34"/><text x="23.4800%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.07%)</title><rect x="23.2551%" y="149" width="0.0681%" height="15" fill="rgb(224,196,44)" fg:x="11615" fg:w="34"/><text x="23.5481%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.07%)</title><rect x="23.3232%" y="149" width="0.0661%" height="15" fill="rgb(235,84,52)" fg:x="11649" fg:w="33"/><text x="23.6162%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.50%)</title><rect x="23.1170%" y="165" width="0.5005%" height="15" fill="rgb(234,136,51)" fg:x="11546" fg:w="250"/><text x="23.4099%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.6175%" y="165" width="0.0260%" height="15" fill="rgb(240,127,46)" fg:x="11796" fg:w="13"/><text x="23.9105%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.6435%" y="165" width="0.0260%" height="15" fill="rgb(238,156,52)" fg:x="11809" fg:w="13"/><text x="23.9365%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.6696%" y="165" width="0.0260%" height="15" fill="rgb(252,133,42)" fg:x="11822" fg:w="13"/><text x="23.9625%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.09%)</title><rect x="23.6956%" y="165" width="0.0861%" height="15" fill="rgb(243,180,10)" fg:x="11835" fg:w="43"/><text x="23.9886%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="23.7817%" y="149" width="0.0140%" height="15" fill="rgb(244,201,34)" fg:x="11878" fg:w="7"/><text x="24.0747%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.7957%" y="133" width="0.0541%" height="15" fill="rgb(216,44,5)" fg:x="11885" fg:w="27"/><text x="24.0887%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.8498%" y="133" width="0.0541%" height="15" fill="rgb(214,128,17)" fg:x="11912" fg:w="27"/><text x="24.1427%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.39%)</title><rect x="23.7957%" y="149" width="0.3944%" height="15" fill="rgb(214,50,34)" fg:x="11885" fg:w="197"/><text x="24.0887%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="24.1901%" y="117" width="0.0541%" height="15" fill="rgb(251,212,33)" fg:x="12082" fg:w="27"/><text x="24.4831%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="24.1901%" y="133" width="0.2843%" height="15" fill="rgb(212,74,14)" fg:x="12082" fg:w="142"/><text x="24.4831%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.37%)</title><rect x="24.1901%" y="149" width="0.3724%" height="15" fill="rgb(206,13,39)" fg:x="12082" fg:w="186"/><text x="24.4831%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.5625%" y="149" width="0.0260%" height="15" fill="rgb(214,74,45)" fg:x="12268" fg:w="13"/><text x="24.8555%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.5886%" y="149" width="0.0140%" height="15" fill="rgb(210,224,40)" fg:x="12281" fg:w="7"/><text x="24.8815%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 0.94%)</title><rect x="23.7817%" y="165" width="0.9410%" height="15" fill="rgb(231,46,20)" fg:x="11878" fg:w="470"/><text x="24.0747%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="24.7227%" y="149" width="0.0541%" height="15" fill="rgb(217,223,49)" fg:x="12348" fg:w="27"/><text x="25.0157%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="24.7227%" y="165" width="0.2843%" height="15" fill="rgb(218,61,19)" fg:x="12348" fg:w="142"/><text x="25.0157%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,871 instructions, 27.77%)</title><rect x="0.3764%" y="181" width="27.7720%" height="15" fill="rgb(210,111,20)" fg:x="188" fg:w="13871"/><text x="0.6694%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="28.1484%" y="181" width="1.2814%" height="15" fill="rgb(227,31,47)" fg:x="14059" fg:w="640"/><text x="28.4414%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (665 instructions, 1.33%)</title><rect x="29.4298%" y="181" width="1.3314%" height="15" fill="rgb(246,2,54)" fg:x="14699" fg:w="665"/><text x="29.7228%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="30.7612%" y="181" width="1.2814%" height="15" fill="rgb(223,82,44)" fg:x="15364" fg:w="640"/><text x="31.0542%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="32.0426%" y="181" width="1.2814%" height="15" fill="rgb(215,95,20)" fg:x="16004" fg:w="640"/><text x="32.3356%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="33.3240%" y="181" width="1.2814%" height="15" fill="rgb(208,51,10)" fg:x="16644" fg:w="640"/><text x="33.6170%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="34.6054%" y="181" width="1.3435%" height="15" fill="rgb(243,142,54)" fg:x="17284" fg:w="671"/><text x="34.8983%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="35.9488%" y="181" width="1.3435%" height="15" fill="rgb(244,37,54)" fg:x="17955" fg:w="671"/><text x="36.2418%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="37.2923%" y="181" width="1.2814%" height="15" fill="rgb(213,45,33)" fg:x="18626" fg:w="640"/><text x="37.5852%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="38.5737%" y="181" width="1.2814%" height="15" fill="rgb(216,179,28)" fg:x="19266" fg:w="640"/><text x="38.8666%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="39.8550%" y="181" width="1.2073%" height="15" fill="rgb(213,164,53)" fg:x="19906" fg:w="603"/><text x="40.1480%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="41.0623%" y="181" width="1.2814%" height="15" fill="rgb(215,50,39)" fg:x="20509" fg:w="640"/><text x="41.3553%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="42.3437%" y="181" width="1.2073%" height="15" fill="rgb(222,210,47)" fg:x="21149" fg:w="603"/><text x="42.6367%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="43.5510%" y="181" width="1.2814%" height="15" fill="rgb(226,85,14)" fg:x="21752" fg:w="640"/><text x="43.8440%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="44.8324%" y="181" width="1.2073%" height="15" fill="rgb(243,46,43)" fg:x="22392" fg:w="603"/><text x="45.1254%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="46.0397%" y="181" width="1.2814%" height="15" fill="rgb(221,57,35)" fg:x="22995" fg:w="640"/><text x="46.3327%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="47.3211%" y="181" width="1.2814%" height="15" fill="rgb(212,75,38)" fg:x="23635" fg:w="640"/><text x="47.6141%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="48.6025%" y="181" width="1.2814%" height="15" fill="rgb(212,204,54)" fg:x="24275" fg:w="640"/><text x="48.8955%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="49.8839%" y="181" width="1.2814%" height="15" fill="rgb(234,196,21)" fg:x="24915" fg:w="640"/><text x="50.1768%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="51.1653%" y="181" width="1.2814%" height="15" fill="rgb(231,106,5)" fg:x="25555" fg:w="640"/><text x="51.4582%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="52.4466%" y="181" width="1.2073%" height="15" fill="rgb(227,60,49)" fg:x="26195" fg:w="603"/><text x="52.7396%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="53.6539%" y="181" width="1.3435%" height="15" fill="rgb(205,189,14)" fg:x="26798" fg:w="671"/><text x="53.9469%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.41%)</title><rect x="54.9974%" y="181" width="1.4055%" height="15" fill="rgb(219,162,27)" fg:x="27469" fg:w="702"/><text x="55.2904%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="56.4029%" y="181" width="1.2814%" height="15" fill="rgb(213,210,32)" fg:x="28171" fg:w="640"/><text x="56.6959%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="57.6843%" y="181" width="1.2694%" height="15" fill="rgb(231,145,9)" fg:x="28811" fg:w="634"/><text x="57.9773%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="58.9537%" y="181" width="1.2694%" height="15" fill="rgb(229,203,6)" fg:x="29445" fg:w="634"/><text x="59.2466%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="60.2230%" y="181" width="1.2073%" height="15" fill="rgb(242,125,42)" fg:x="30079" fg:w="603"/><text x="60.5160%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="61.4303%" y="181" width="1.2814%" height="15" fill="rgb(254,35,21)" fg:x="30682" fg:w="640"/><text x="61.7233%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="62.7117%" y="181" width="1.2814%" height="15" fill="rgb(206,167,49)" fg:x="31322" fg:w="640"/><text x="63.0047%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="63.9931%" y="181" width="1.3435%" height="15" fill="rgb(231,17,8)" fg:x="31962" fg:w="671"/><text x="64.2861%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="65.3366%" y="181" width="1.2073%" height="15" fill="rgb(228,211,24)" fg:x="32633" fg:w="603"/><text x="65.6295%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="66.5439%" y="181" width="1.3435%" height="15" fill="rgb(229,135,8)" fg:x="33236" fg:w="671"/><text x="66.8368%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="67.8873%" y="181" width="1.2073%" height="15" fill="rgb(218,34,40)" fg:x="33907" fg:w="603"/><text x="68.1803%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="69.0946%" y="181" width="1.3435%" height="15" fill="rgb(218,51,21)" fg:x="34510" fg:w="671"/><text x="69.3876%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="70.4381%" y="181" width="1.2814%" height="15" fill="rgb(237,162,39)" fg:x="35181" fg:w="640"/><text x="70.7310%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="71.7195%" y="181" width="1.2814%" height="15" fill="rgb(238,171,43)" fg:x="35821" fg:w="640"/><text x="72.0124%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.47%)</title><rect x="73.0008%" y="181" width="1.4676%" height="15" fill="rgb(236,62,16)" fg:x="36461" fg:w="733"/><text x="73.2938%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="74.4684%" y="181" width="1.2814%" height="15" fill="rgb(220,130,11)" fg:x="37194" fg:w="640"/><text x="74.7614%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="75.7498%" y="181" width="1.2814%" height="15" fill="rgb(231,78,12)" fg:x="37834" fg:w="640"/><text x="76.0428%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="77.0312%" y="181" width="1.2814%" height="15" fill="rgb(234,33,37)" fg:x="38474" fg:w="640"/><text x="77.3242%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="78.3126%" y="181" width="1.2814%" height="15" fill="rgb(221,126,39)" fg:x="39114" fg:w="640"/><text x="78.6055%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="79.5940%" y="181" width="1.2814%" height="15" fill="rgb(230,106,6)" fg:x="39754" fg:w="640"/><text x="79.8869%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="80.8753%" y="181" width="1.2814%" height="15" fill="rgb(243,58,50)" fg:x="40394" fg:w="640"/><text x="81.1683%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="82.1567%" y="181" width="1.3435%" height="15" fill="rgb(224,96,14)" fg:x="41034" fg:w="671"/><text x="82.4497%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="83.5002%" y="181" width="1.2814%" height="15" fill="rgb(243,128,20)" fg:x="41705" fg:w="640"/><text x="83.7931%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="84.7816%" y="181" width="1.2694%" height="15" fill="rgb(220,100,48)" fg:x="42345" fg:w="634"/><text x="85.0745%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="86.0509%" y="181" width="1.2814%" height="15" fill="rgb(235,203,45)" fg:x="42979" fg:w="640"/><text x="86.3439%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="87.3323%" y="181" width="1.2814%" height="15" fill="rgb(247,163,48)" fg:x="43619" fg:w="640"/><text x="87.6253%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="88.6137%" y="181" width="1.2814%" height="15" fill="rgb(239,20,8)" fg:x="44259" fg:w="640"/><text x="88.9067%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="89.8951%" y="181" width="1.2814%" height="15" fill="rgb(212,170,10)" fg:x="44899" fg:w="640"/><text x="90.1881%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="91.1765%" y="181" width="1.2694%" height="15" fill="rgb(237,56,37)" fg:x="45539" fg:w="634"/><text x="91.4694%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="92.4458%" y="165" width="0.0140%" height="15" fill="rgb(213,192,52)" fg:x="46173" fg:w="7"/><text x="92.7388%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="92.4599%" y="149" width="0.1201%" height="15" fill="rgb(232,33,23)" fg:x="46180" fg:w="60"/><text x="92.7528%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.21%)</title><rect x="92.4599%" y="165" width="0.2082%" height="15" fill="rgb(227,119,41)" fg:x="46180" fg:w="104"/><text x="92.7528%" y="175.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.6681%" y="165" width="0.3043%" height="15" fill="rgb(206,39,53)" fg:x="46284" fg:w="152"/><text x="92.9611%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (437 instructions, 0.87%)</title><rect x="92.4458%" y="181" width="0.8749%" height="15" fill="rgb(232,112,21)" fg:x="46173" fg:w="437"/><text x="92.7388%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.3208%" y="165" width="1.0371%" height="15" fill="rgb(211,80,29)" fg:x="46610" fg:w="518"/><text x="93.6138%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="94.3579%" y="117" width="0.1642%" height="15" fill="rgb(219,28,40)" fg:x="47128" fg:w="82"/><text x="94.6509%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.26%)</title><rect x="94.3579%" y="133" width="0.2603%" height="15" fill="rgb(224,110,29)" fg:x="47128" fg:w="130"/><text x="94.6509%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.42%)</title><rect x="94.3579%" y="149" width="0.4245%" height="15" fill="rgb(224,152,9)" fg:x="47128" fg:w="212"/><text x="94.6509%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7824%" y="149" width="0.0300%" height="15" fill="rgb(212,210,45)" fg:x="47340" fg:w="15"/><text x="95.0753%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.8124%" y="149" width="0.0300%" height="15" fill="rgb(212,7,21)" fg:x="47355" fg:w="15"/><text x="95.1054%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 0.86%)</title><rect x="94.3579%" y="165" width="0.8609%" height="15" fill="rgb(218,116,8)" fg:x="47128" fg:w="430"/><text x="94.6509%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.2188%" y="165" width="1.0331%" height="15" fill="rgb(227,125,19)" fg:x="47558" fg:w="516"/><text x="95.5118%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.2520%" y="165" width="0.0140%" height="15" fill="rgb(252,53,6)" fg:x="48074" fg:w="7"/><text x="96.5449%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 3.14%)</title><rect x="93.3208%" y="181" width="3.1394%" height="15" fill="rgb(254,55,36)" fg:x="46610" fg:w="1568"/><text x="93.6138%" y="191.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.4602%" y="165" width="0.0140%" height="15" fill="rgb(245,151,38)" fg:x="48178" fg:w="7"/><text x="96.7531%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.4742%" y="165" width="0.1201%" height="15" fill="rgb(219,26,6)" fg:x="48185" fg:w="60"/><text x="96.7672%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.26%)</title><rect x="96.4602%" y="181" width="0.2623%" height="15" fill="rgb(216,210,44)" fg:x="48178" fg:w="131"/><text x="96.7531%" y="191.50"></text></g><g><title>heap::__canister_method_batch_get::{{closure}} (49,266 instructions, 98.64%)</title><rect x="0.3764%" y="197" width="98.6385%" height="15" fill="rgb(209,15,35)" fg:x="188" fg:w="49266"/><text x="0.6694%" y="207.50">heap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.0149%" y="197" width="0.0280%" height="15" fill="rgb(208,7,17)" fg:x="49454" fg:w="14"/><text x="99.3079%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.2232%" y="181" width="0.0541%" height="15" fill="rgb(235,228,4)" fg:x="49558" fg:w="27"/><text x="99.5161%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.2772%" y="181" width="0.0541%" height="15" fill="rgb(249,86,20)" fg:x="49585" fg:w="27"/><text x="99.5702%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="99.3313%" y="181" width="0.1361%" height="15" fill="rgb(213,88,24)" fg:x="49612" fg:w="68"/><text x="99.6242%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (333 instructions, 0.67%)</title><rect x="99.0450%" y="197" width="0.6667%" height="15" fill="rgb(227,133,7)" fg:x="49469" fg:w="333"/><text x="99.3379%" y="207.50"></text></g><g><title>all (49,946 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,160,51)" fg:x="0" fg:w="49946"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (49,946 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(239,72,39)" fg:x="0" fg:w="49946"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>