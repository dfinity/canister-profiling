<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="50073"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0479%" height="15" fill="rgb(238,27,2)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0479%" y="197" width="0.1658%" height="15" fill="rgb(224,140,13)" fg:x="24" fg:w="83"/><text x="0.3409%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2137%" y="197" width="0.1658%" height="15" fill="rgb(222,132,22)" fg:x="107" fg:w="83"/><text x="0.5067%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3794%" y="165" width="0.1658%" height="15" fill="rgb(216,179,16)" fg:x="190" fg:w="83"/><text x="0.6724%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5452%" y="149" width="0.1638%" height="15" fill="rgb(222,21,52)" fg:x="273" fg:w="82"/><text x="0.8382%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7090%" y="133" width="0.0120%" height="15" fill="rgb(212,73,31)" fg:x="355" fg:w="6"/><text x="1.0019%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="0.7090%" y="149" width="0.8787%" height="15" fill="rgb(252,44,7)" fg:x="355" fg:w="440"/><text x="1.0019%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5877%" y="149" width="0.1897%" height="15" fill="rgb(242,80,41)" fg:x="795" fg:w="95"/><text x="1.8807%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7774%" y="149" width="0.1198%" height="15" fill="rgb(233,136,11)" fg:x="890" fg:w="60"/><text x="2.0704%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8972%" y="149" width="0.1198%" height="15" fill="rgb(238,76,53)" fg:x="950" fg:w="60"/><text x="2.1902%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0171%" y="149" width="0.1198%" height="15" fill="rgb(233,11,10)" fg:x="1010" fg:w="60"/><text x="2.3100%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1369%" y="149" width="0.1198%" height="15" fill="rgb(235,172,39)" fg:x="1070" fg:w="60"/><text x="2.4298%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2567%" y="149" width="0.1638%" height="15" fill="rgb(248,194,0)" fg:x="1130" fg:w="82"/><text x="2.5497%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4205%" y="149" width="0.1398%" height="15" fill="rgb(215,222,51)" fg:x="1212" fg:w="70"/><text x="2.7134%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5603%" y="133" width="0.0120%" height="15" fill="rgb(230,13,20)" fg:x="1282" fg:w="6"/><text x="2.8532%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="2.5603%" y="149" width="0.8787%" height="15" fill="rgb(253,2,0)" fg:x="1282" fg:w="440"/><text x="2.8532%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4390%" y="149" width="0.0379%" height="15" fill="rgb(225,90,14)" fg:x="1722" fg:w="19"/><text x="3.7319%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.4769%" y="133" width="0.1658%" height="15" fill="rgb(214,30,0)" fg:x="1741" fg:w="83"/><text x="3.7699%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6427%" y="101" width="0.1338%" height="15" fill="rgb(238,141,30)" fg:x="1824" fg:w="67"/><text x="3.9357%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="3.6427%" y="117" width="0.1957%" height="15" fill="rgb(221,223,11)" fg:x="1824" fg:w="98"/><text x="3.9357%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8384%" y="69" width="0.0220%" height="15" fill="rgb(211,15,35)" fg:x="1922" fg:w="11"/><text x="4.1314%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8604%" y="53" width="0.0699%" height="15" fill="rgb(253,105,1)" fg:x="1933" fg:w="35"/><text x="4.1533%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="3.8604%" y="69" width="0.1318%" height="15" fill="rgb(242,18,4)" fg:x="1933" fg:w="66"/><text x="4.1533%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="3.8384%" y="85" width="0.2936%" height="15" fill="rgb(254,98,17)" fg:x="1922" fg:w="147"/><text x="4.1314%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="3.8384%" y="101" width="0.4234%" height="15" fill="rgb(249,86,8)" fg:x="1922" fg:w="212"/><text x="4.1314%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="3.8384%" y="117" width="0.4434%" height="15" fill="rgb(214,87,3)" fg:x="1922" fg:w="222"/><text x="4.1314%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="3.6427%" y="133" width="0.9207%" height="15" fill="rgb(215,56,42)" fg:x="1824" fg:w="461"/><text x="3.9357%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="3.4769%" y="149" width="1.3760%" height="15" fill="rgb(218,100,1)" fg:x="1741" fg:w="689"/><text x="3.7699%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8529%" y="149" width="0.1897%" height="15" fill="rgb(209,156,1)" fg:x="2430" fg:w="95"/><text x="5.1459%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0426%" y="149" width="0.1198%" height="15" fill="rgb(219,90,28)" fg:x="2525" fg:w="60"/><text x="5.3356%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1625%" y="149" width="0.1518%" height="15" fill="rgb(217,139,2)" fg:x="2585" fg:w="76"/><text x="5.4554%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3142%" y="149" width="0.1398%" height="15" fill="rgb(231,42,23)" fg:x="2661" fg:w="70"/><text x="5.6072%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4540%" y="117" width="0.0120%" height="15" fill="rgb(215,175,4)" fg:x="2731" fg:w="6"/><text x="5.7470%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="5.4540%" y="133" width="0.8787%" height="15" fill="rgb(235,83,13)" fg:x="2731" fg:w="440"/><text x="5.7470%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3328%" y="133" width="0.0379%" height="15" fill="rgb(247,7,16)" fg:x="3171" fg:w="19"/><text x="6.6257%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3707%" y="117" width="0.1658%" height="15" fill="rgb(223,19,5)" fg:x="3190" fg:w="83"/><text x="6.6637%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5365%" y="85" width="0.1338%" height="15" fill="rgb(251,159,39)" fg:x="3273" fg:w="67"/><text x="6.8294%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="6.5365%" y="101" width="0.1957%" height="15" fill="rgb(236,16,18)" fg:x="3273" fg:w="98"/><text x="6.8294%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7322%" y="53" width="0.0220%" height="15" fill="rgb(234,103,44)" fg:x="3371" fg:w="11"/><text x="7.0251%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7541%" y="37" width="0.0699%" height="15" fill="rgb(231,195,28)" fg:x="3382" fg:w="35"/><text x="7.0471%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="6.7541%" y="53" width="0.1318%" height="15" fill="rgb(231,207,4)" fg:x="3382" fg:w="66"/><text x="7.0471%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="6.7322%" y="69" width="0.2936%" height="15" fill="rgb(221,136,42)" fg:x="3371" fg:w="147"/><text x="7.0251%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="6.7322%" y="85" width="0.4234%" height="15" fill="rgb(220,164,27)" fg:x="3371" fg:w="212"/><text x="7.0251%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="6.7322%" y="101" width="0.4434%" height="15" fill="rgb(223,79,44)" fg:x="3371" fg:w="222"/><text x="7.0251%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="6.5365%" y="117" width="0.9207%" height="15" fill="rgb(228,120,12)" fg:x="3273" fg:w="461"/><text x="6.8294%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="6.3707%" y="133" width="1.3760%" height="15" fill="rgb(248,107,35)" fg:x="3190" fg:w="689"/><text x="6.6637%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7467%" y="133" width="0.1897%" height="15" fill="rgb(249,91,28)" fg:x="3879" fg:w="95"/><text x="8.0397%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9364%" y="133" width="0.1198%" height="15" fill="rgb(210,55,7)" fg:x="3974" fg:w="60"/><text x="8.2294%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0562%" y="117" width="0.1638%" height="15" fill="rgb(207,40,12)" fg:x="4034" fg:w="82"/><text x="8.3492%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2200%" y="117" width="0.1897%" height="15" fill="rgb(231,110,48)" fg:x="4116" fg:w="95"/><text x="8.5130%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.4097%" y="117" width="0.1518%" height="15" fill="rgb(243,42,21)" fg:x="4211" fg:w="76"/><text x="8.7027%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0562%" y="133" width="0.6590%" height="15" fill="rgb(210,34,38)" fg:x="4034" fg:w="330"/><text x="8.3492%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7153%" y="133" width="0.1638%" height="15" fill="rgb(235,176,3)" fg:x="4364" fg:w="82"/><text x="9.0082%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 3.91%)</title><rect x="5.4540%" y="149" width="3.9143%" height="15" fill="rgb(245,218,16)" fg:x="2731" fg:w="1960"/><text x="5.7470%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3683%" y="149" width="0.1518%" height="15" fill="rgb(208,212,11)" fg:x="4691" fg:w="76"/><text x="9.6613%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5201%" y="149" width="0.0300%" height="15" fill="rgb(245,163,32)" fg:x="4767" fg:w="15"/><text x="9.8131%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5501%" y="149" width="0.0300%" height="15" fill="rgb(247,0,8)" fg:x="4782" fg:w="15"/><text x="9.8430%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5800%" y="149" width="0.0180%" height="15" fill="rgb(214,159,46)" fg:x="4797" fg:w="9"/><text x="9.8730%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.04%)</title><rect x="9.5980%" y="149" width="0.0359%" height="15" fill="rgb(226,37,42)" fg:x="4806" fg:w="18"/><text x="9.8910%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6339%" y="133" width="0.1658%" height="15" fill="rgb(214,106,27)" fg:x="4824" fg:w="83"/><text x="9.9269%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6339%" y="149" width="0.3575%" height="15" fill="rgb(221,52,41)" fg:x="4824" fg:w="179"/><text x="9.9269%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9914%" y="117" width="0.1658%" height="15" fill="rgb(240,64,39)" fg:x="5003" fg:w="83"/><text x="10.2844%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9914%" y="133" width="0.2516%" height="15" fill="rgb(207,179,28)" fg:x="5003" fg:w="126"/><text x="10.2844%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.42%)</title><rect x="9.9914%" y="149" width="0.4154%" height="15" fill="rgb(213,223,8)" fg:x="5003" fg:w="208"/><text x="10.2844%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.4068%" y="149" width="0.1658%" height="15" fill="rgb(229,8,15)" fg:x="5211" fg:w="83"/><text x="10.6998%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="10.5726%" y="149" width="0.1717%" height="15" fill="rgb(217,148,54)" fg:x="5294" fg:w="86"/><text x="10.8655%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7443%" y="149" width="0.1658%" height="15" fill="rgb(253,69,53)" fg:x="5380" fg:w="83"/><text x="11.0373%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9101%" y="149" width="0.1658%" height="15" fill="rgb(241,5,9)" fg:x="5463" fg:w="83"/><text x="11.2030%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="11.0838%" y="149" width="0.1717%" height="15" fill="rgb(223,97,21)" fg:x="5550" fg:w="86"/><text x="11.3768%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.85%)</title><rect x="11.2556%" y="149" width="0.8548%" height="15" fill="rgb(212,143,29)" fg:x="5636" fg:w="428"/><text x="11.5485%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.85%)</title><rect x="12.1103%" y="149" width="0.8548%" height="15" fill="rgb(233,201,22)" fg:x="6064" fg:w="428"/><text x="12.4033%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,366 instructions, 14.71%)</title><rect x="0.5452%" y="165" width="14.7105%" height="15" fill="rgb(240,37,48)" fg:x="273" fg:w="7366"/><text x="0.8382%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.2557%" y="165" width="0.7589%" height="15" fill="rgb(232,26,19)" fg:x="7639" fg:w="380"/><text x="15.5487%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.0146%" y="149" width="0.0280%" height="15" fill="rgb(219,199,20)" fg:x="8019" fg:w="14"/><text x="16.3076%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.13%)</title><rect x="16.0146%" y="165" width="0.1258%" height="15" fill="rgb(223,110,34)" fg:x="8019" fg:w="63"/><text x="16.3076%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="16.1404%" y="149" width="0.1238%" height="15" fill="rgb(206,31,30)" fg:x="8082" fg:w="62"/><text x="16.4334%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (220 instructions, 0.44%)</title><rect x="16.1404%" y="165" width="0.4394%" height="15" fill="rgb(213,107,4)" fg:x="8082" fg:w="220"/><text x="16.4334%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.5798%" y="149" width="0.0280%" height="15" fill="rgb(207,146,20)" fg:x="8302" fg:w="14"/><text x="16.8728%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.6078%" y="133" width="0.1178%" height="15" fill="rgb(251,21,25)" fg:x="8316" fg:w="59"/><text x="16.9007%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.7256%" y="133" width="0.1877%" height="15" fill="rgb(205,45,0)" fg:x="8375" fg:w="94"/><text x="17.0185%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.9133%" y="133" width="0.3455%" height="15" fill="rgb(227,36,36)" fg:x="8469" fg:w="173"/><text x="17.2063%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.6078%" y="149" width="1.1563%" height="15" fill="rgb(213,100,15)" fg:x="8316" fg:w="579"/><text x="16.9007%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 1.64%)</title><rect x="16.5798%" y="165" width="1.6396%" height="15" fill="rgb(212,24,46)" fg:x="8302" fg:w="821"/><text x="16.8728%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="18.2194%" y="165" width="0.1658%" height="15" fill="rgb(249,35,21)" fg:x="9123" fg:w="83"/><text x="18.5124%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="18.3852%" y="149" width="0.0280%" height="15" fill="rgb(241,175,51)" fg:x="9206" fg:w="14"/><text x="18.6781%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.4131%" y="133" width="0.1178%" height="15" fill="rgb(214,196,32)" fg:x="9220" fg:w="59"/><text x="18.7061%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.5309%" y="133" width="0.1877%" height="15" fill="rgb(210,187,54)" fg:x="9279" fg:w="94"/><text x="18.8239%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.7187%" y="133" width="0.3455%" height="15" fill="rgb(229,155,28)" fg:x="9373" fg:w="173"/><text x="19.0116%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.4131%" y="149" width="1.1563%" height="15" fill="rgb(223,69,4)" fg:x="9220" fg:w="579"/><text x="18.7061%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.5694%" y="149" width="0.1538%" height="15" fill="rgb(205,165,21)" fg:x="9799" fg:w="77"/><text x="19.8624%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="19.7232%" y="133" width="0.1717%" height="15" fill="rgb(231,105,52)" fg:x="9876" fg:w="86"/><text x="20.0162%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.24%)</title><rect x="19.7232%" y="149" width="0.2416%" height="15" fill="rgb(243,133,27)" fg:x="9876" fg:w="121"/><text x="20.0162%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.97%)</title><rect x="18.3852%" y="165" width="1.9691%" height="15" fill="rgb(244,98,29)" fg:x="9206" fg:w="986"/><text x="18.6781%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.3543%" y="117" width="0.1178%" height="15" fill="rgb(214,56,45)" fg:x="10192" fg:w="59"/><text x="20.6473%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="20.3543%" y="133" width="0.1877%" height="15" fill="rgb(207,197,51)" fg:x="10192" fg:w="94"/><text x="20.6473%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.63%)</title><rect x="20.3543%" y="149" width="0.6291%" height="15" fill="rgb(226,211,14)" fg:x="10192" fg:w="315"/><text x="20.6473%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.852 (18 instructions, 0.04%)</title><rect x="20.9834%" y="149" width="0.0359%" height="15" fill="rgb(213,123,48)" fg:x="10507" fg:w="18"/><text x="21.2763%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.0193%" y="149" width="0.0260%" height="15" fill="rgb(240,107,51)" fg:x="10525" fg:w="13"/><text x="21.3123%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.10%)</title><rect x="20.3543%" y="165" width="1.1004%" height="15" fill="rgb(205,83,12)" fg:x="10192" fg:w="551"/><text x="20.6473%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.4547%" y="165" width="0.1058%" height="15" fill="rgb(226,146,51)" fg:x="10743" fg:w="53"/><text x="21.7476%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (130 instructions, 0.26%)</title><rect x="21.5605%" y="149" width="0.2596%" height="15" fill="rgb(235,71,50)" fg:x="10796" fg:w="130"/><text x="21.8535%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.8900%" y="149" width="0.2636%" height="15" fill="rgb(242,13,42)" fg:x="10961" fg:w="132"/><text x="22.1830%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (332 instructions, 0.66%)</title><rect x="21.5605%" y="165" width="0.6630%" height="15" fill="rgb(232,120,28)" fg:x="10796" fg:w="332"/><text x="21.8535%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="22.2236%" y="149" width="0.0679%" height="15" fill="rgb(226,38,46)" fg:x="11128" fg:w="34"/><text x="22.5165%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (18 instructions, 0.04%)</title><rect x="22.2915%" y="149" width="0.0359%" height="15" fill="rgb(213,130,8)" fg:x="11162" fg:w="18"/><text x="22.5844%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (18 instructions, 0.04%)</title><rect x="22.3274%" y="149" width="0.0359%" height="15" fill="rgb(212,34,25)" fg:x="11180" fg:w="18"/><text x="22.6204%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.34%)</title><rect x="22.2236%" y="165" width="0.3375%" height="15" fill="rgb(240,194,26)" fg:x="11128" fg:w="169"/><text x="22.5165%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5611%" y="165" width="0.0260%" height="15" fill="rgb(225,191,3)" fg:x="11297" fg:w="13"/><text x="22.8540%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5870%" y="165" width="0.0260%" height="15" fill="rgb(252,26,53)" fg:x="11310" fg:w="13"/><text x="22.8800%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.6130%" y="165" width="0.0260%" height="15" fill="rgb(254,175,23)" fg:x="11323" fg:w="13"/><text x="22.9060%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.6389%" y="165" width="0.8787%" height="15" fill="rgb(225,126,18)" fg:x="11336" fg:w="440"/><text x="22.9319%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="23.5177%" y="133" width="0.0379%" height="15" fill="rgb(221,73,54)" fg:x="11776" fg:w="19"/><text x="23.8106%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.5556%" y="133" width="0.3615%" height="15" fill="rgb(233,45,17)" fg:x="11795" fg:w="181"/><text x="23.8486%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="23.9171%" y="101" width="0.1338%" height="15" fill="rgb(247,1,34)" fg:x="11976" fg:w="67"/><text x="24.2100%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.9171%" y="117" width="0.3615%" height="15" fill="rgb(205,221,16)" fg:x="11976" fg:w="181"/><text x="24.2100%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 0.43%)</title><rect x="23.9171%" y="133" width="0.4314%" height="15" fill="rgb(222,160,32)" fg:x="11976" fg:w="216"/><text x="24.2100%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.3485%" y="133" width="0.0260%" height="15" fill="rgb(206,79,34)" fg:x="12192" fg:w="13"/><text x="24.6414%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (491 instructions, 0.98%)</title><rect x="23.5177%" y="149" width="0.9806%" height="15" fill="rgb(237,7,28)" fg:x="11776" fg:w="491"/><text x="23.8106%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (540 instructions, 1.08%)</title><rect x="23.5177%" y="165" width="1.0784%" height="15" fill="rgb(228,17,29)" fg:x="11776" fg:w="540"/><text x="23.8106%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="24.5961%" y="149" width="0.1238%" height="15" fill="rgb(234,95,33)" fg:x="12316" fg:w="62"/><text x="24.8891%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="24.7199%" y="149" width="0.1338%" height="15" fill="rgb(210,88,51)" fg:x="12378" fg:w="67"/><text x="25.0129%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.46%)</title><rect x="24.5961%" y="165" width="0.4553%" height="15" fill="rgb(211,79,53)" fg:x="12316" fg:w="228"/><text x="24.8891%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,822 instructions, 27.60%)</title><rect x="0.3794%" y="181" width="27.6037%" height="15" fill="rgb(224,219,30)" fg:x="190" fg:w="13822"/><text x="0.6724%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="27.9831%" y="181" width="1.2821%" height="15" fill="rgb(249,130,1)" fg:x="14012" fg:w="642"/><text x="28.2761%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (667 instructions, 1.33%)</title><rect x="29.2653%" y="181" width="1.3321%" height="15" fill="rgb(253,133,12)" fg:x="14654" fg:w="667"/><text x="29.5582%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="30.5973%" y="181" width="1.2821%" height="15" fill="rgb(244,214,45)" fg:x="15321" fg:w="642"/><text x="30.8903%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="31.8795%" y="181" width="1.2821%" height="15" fill="rgb(244,141,37)" fg:x="15963" fg:w="642"/><text x="32.1724%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="33.1616%" y="181" width="1.2821%" height="15" fill="rgb(235,75,10)" fg:x="16605" fg:w="642"/><text x="33.4546%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="34.4437%" y="181" width="1.3440%" height="15" fill="rgb(244,205,9)" fg:x="17247" fg:w="673"/><text x="34.7367%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="35.7877%" y="181" width="1.3440%" height="15" fill="rgb(250,95,26)" fg:x="17920" fg:w="673"/><text x="36.0807%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="37.1318%" y="181" width="1.2821%" height="15" fill="rgb(220,98,29)" fg:x="18593" fg:w="642"/><text x="37.4248%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="38.4139%" y="181" width="1.2821%" height="15" fill="rgb(249,97,54)" fg:x="19235" fg:w="642"/><text x="38.7069%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="39.6960%" y="181" width="1.2082%" height="15" fill="rgb(253,78,23)" fg:x="19877" fg:w="605"/><text x="39.9890%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="40.9043%" y="181" width="1.2821%" height="15" fill="rgb(235,37,48)" fg:x="20482" fg:w="642"/><text x="41.1972%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="42.1864%" y="181" width="1.2082%" height="15" fill="rgb(221,10,54)" fg:x="21124" fg:w="605"/><text x="42.4794%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="43.3946%" y="181" width="1.2821%" height="15" fill="rgb(230,104,44)" fg:x="21729" fg:w="642"/><text x="43.6876%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="44.6768%" y="181" width="1.2082%" height="15" fill="rgb(243,46,11)" fg:x="22371" fg:w="605"/><text x="44.9697%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="45.8850%" y="181" width="1.2821%" height="15" fill="rgb(216,144,12)" fg:x="22976" fg:w="642"/><text x="46.1780%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="47.1671%" y="181" width="1.2821%" height="15" fill="rgb(223,110,10)" fg:x="23618" fg:w="642"/><text x="47.4601%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="48.4493%" y="181" width="1.2821%" height="15" fill="rgb(207,133,26)" fg:x="24260" fg:w="642"/><text x="48.7422%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="49.7314%" y="181" width="1.2821%" height="15" fill="rgb(221,34,2)" fg:x="24902" fg:w="642"/><text x="50.0244%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="51.0135%" y="181" width="1.2821%" height="15" fill="rgb(221,104,42)" fg:x="25544" fg:w="642"/><text x="51.3065%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="52.2956%" y="181" width="1.2082%" height="15" fill="rgb(254,15,49)" fg:x="26186" fg:w="605"/><text x="52.5886%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="53.5039%" y="181" width="1.3440%" height="15" fill="rgb(235,64,27)" fg:x="26791" fg:w="673"/><text x="53.7969%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (704 instructions, 1.41%)</title><rect x="54.8479%" y="181" width="1.4059%" height="15" fill="rgb(219,104,9)" fg:x="27464" fg:w="704"/><text x="55.1409%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="56.2539%" y="181" width="1.2821%" height="15" fill="rgb(239,121,28)" fg:x="28168" fg:w="642"/><text x="56.5468%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="57.5360%" y="181" width="1.2701%" height="15" fill="rgb(211,148,11)" fg:x="28810" fg:w="636"/><text x="57.8290%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="58.8061%" y="181" width="1.2701%" height="15" fill="rgb(224,112,8)" fg:x="29446" fg:w="636"/><text x="59.0991%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="60.0763%" y="181" width="1.2082%" height="15" fill="rgb(225,110,11)" fg:x="30082" fg:w="605"/><text x="60.3693%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="61.2845%" y="181" width="1.2821%" height="15" fill="rgb(239,94,50)" fg:x="30687" fg:w="642"/><text x="61.5775%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="62.5667%" y="181" width="1.2821%" height="15" fill="rgb(217,104,4)" fg:x="31329" fg:w="642"/><text x="62.8596%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="63.8488%" y="181" width="1.3440%" height="15" fill="rgb(236,213,34)" fg:x="31971" fg:w="673"/><text x="64.1417%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="65.1928%" y="181" width="1.2082%" height="15" fill="rgb(230,30,32)" fg:x="32644" fg:w="605"/><text x="65.4858%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="66.4011%" y="181" width="1.3440%" height="15" fill="rgb(214,183,24)" fg:x="33249" fg:w="673"/><text x="66.6940%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="67.7451%" y="181" width="1.2082%" height="15" fill="rgb(244,15,24)" fg:x="33922" fg:w="605"/><text x="68.0381%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="68.9533%" y="181" width="1.3440%" height="15" fill="rgb(225,208,32)" fg:x="34527" fg:w="673"/><text x="69.2463%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="70.2974%" y="181" width="1.2821%" height="15" fill="rgb(237,194,1)" fg:x="35200" fg:w="642"/><text x="70.5903%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="71.5795%" y="181" width="1.2821%" height="15" fill="rgb(211,157,35)" fg:x="35842" fg:w="642"/><text x="71.8725%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.47%)</title><rect x="72.8616%" y="181" width="1.4679%" height="15" fill="rgb(216,119,40)" fg:x="36484" fg:w="735"/><text x="73.1546%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="74.3295%" y="181" width="1.2821%" height="15" fill="rgb(245,158,40)" fg:x="37219" fg:w="642"/><text x="74.6224%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="75.6116%" y="181" width="1.2821%" height="15" fill="rgb(231,225,18)" fg:x="37861" fg:w="642"/><text x="75.9046%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="76.8937%" y="181" width="1.2821%" height="15" fill="rgb(209,82,6)" fg:x="38503" fg:w="642"/><text x="77.1867%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="78.1759%" y="181" width="1.2821%" height="15" fill="rgb(231,168,11)" fg:x="39145" fg:w="642"/><text x="78.4688%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="79.4580%" y="181" width="1.2821%" height="15" fill="rgb(209,32,19)" fg:x="39787" fg:w="642"/><text x="79.7510%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="80.7401%" y="181" width="1.2821%" height="15" fill="rgb(245,14,16)" fg:x="40429" fg:w="642"/><text x="81.0331%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="82.0222%" y="181" width="1.3440%" height="15" fill="rgb(206,53,47)" fg:x="41071" fg:w="673"/><text x="82.3152%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="83.3663%" y="181" width="1.2821%" height="15" fill="rgb(252,87,48)" fg:x="41744" fg:w="642"/><text x="83.6593%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="84.6484%" y="181" width="1.2701%" height="15" fill="rgb(233,170,16)" fg:x="42386" fg:w="636"/><text x="84.9414%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="85.9186%" y="181" width="1.2821%" height="15" fill="rgb(206,97,36)" fg:x="43022" fg:w="642"/><text x="86.2115%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="87.2007%" y="181" width="1.2821%" height="15" fill="rgb(253,201,4)" fg:x="43664" fg:w="642"/><text x="87.4937%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="88.4828%" y="181" width="1.2821%" height="15" fill="rgb(211,2,44)" fg:x="44306" fg:w="642"/><text x="88.7758%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="89.7649%" y="181" width="1.2821%" height="15" fill="rgb(211,106,30)" fg:x="44948" fg:w="642"/><text x="90.0579%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="91.0471%" y="181" width="1.2701%" height="15" fill="rgb(245,61,15)" fg:x="45590" fg:w="636"/><text x="91.3400%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="92.3172%" y="149" width="0.0280%" height="15" fill="rgb(218,34,34)" fg:x="46226" fg:w="14"/><text x="92.6102%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.22%)</title><rect x="92.3452%" y="133" width="0.2177%" height="15" fill="rgb(242,219,15)" fg:x="46240" fg:w="109"/><text x="92.6381%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 instructions, 0.29%)</title><rect x="92.3452%" y="149" width="0.2876%" height="15" fill="rgb(207,209,6)" fg:x="46240" fg:w="144"/><text x="92.6381%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.6328%" y="149" width="0.3036%" height="15" fill="rgb(244,48,19)" fg:x="46384" fg:w="152"/><text x="92.9257%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (490 instructions, 0.98%)</title><rect x="92.3172%" y="165" width="0.9786%" height="15" fill="rgb(222,25,47)" fg:x="46226" fg:w="490"/><text x="92.6102%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.03%)</title><rect x="93.2958%" y="149" width="1.0345%" height="15" fill="rgb(216,125,25)" fg:x="46716" fg:w="518"/><text x="93.5888%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.3303%" y="101" width="0.1658%" height="15" fill="rgb(242,199,45)" fg:x="47234" fg:w="83"/><text x="94.6232%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.3303%" y="117" width="0.2516%" height="15" fill="rgb(233,92,45)" fg:x="47234" fg:w="126"/><text x="94.6232%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.41%)</title><rect x="94.3303%" y="133" width="0.4094%" height="15" fill="rgb(229,70,51)" fg:x="47234" fg:w="205"/><text x="94.6232%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7397%" y="133" width="0.0300%" height="15" fill="rgb(223,218,43)" fg:x="47439" fg:w="15"/><text x="95.0326%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7696%" y="133" width="0.0300%" height="15" fill="rgb(208,215,14)" fg:x="47454" fg:w="15"/><text x="95.0626%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.84%)</title><rect x="94.3303%" y="149" width="0.8448%" height="15" fill="rgb(221,190,13)" fg:x="47234" fg:w="423"/><text x="94.6232%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.1750%" y="149" width="1.0305%" height="15" fill="rgb(207,6,26)" fg:x="47657" fg:w="516"/><text x="95.4680%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.2055%" y="149" width="0.0140%" height="15" fill="rgb(220,156,22)" fg:x="48173" fg:w="7"/><text x="96.4985%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 3.11%)</title><rect x="93.2958%" y="165" width="3.1095%" height="15" fill="rgb(239,34,53)" fg:x="46716" fg:w="1557"/><text x="93.5888%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="96.4052%" y="165" width="0.0120%" height="15" fill="rgb(251,202,37)" fg:x="48273" fg:w="6"/><text x="96.6982%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.4172%" y="165" width="0.1198%" height="15" fill="rgb(254,83,29)" fg:x="48279" fg:w="60"/><text x="96.7102%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,719 instructions, 5.43%)</title><rect x="92.3172%" y="181" width="5.4301%" height="15" fill="rgb(217,26,49)" fg:x="46226" fg:w="2719"/><text x="92.6102%" y="191.50">ic_cd..</text></g><g><title>heap::batch_get_5_::{{closure}} (49,361 instructions, 98.58%)</title><rect x="0.3794%" y="197" width="98.5781%" height="15" fill="rgb(206,131,42)" fg:x="190" fg:w="49361"/><text x="0.6724%" y="207.50">heap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.9575%" y="197" width="0.0280%" height="15" fill="rgb(229,144,32)" fg:x="49551" fg:w="14"/><text x="99.2505%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="99.1592%" y="181" width="0.1238%" height="15" fill="rgb(242,211,40)" fg:x="49652" fg:w="62"/><text x="99.4522%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="99.2830%" y="181" width="0.1338%" height="15" fill="rgb(235,206,17)" fg:x="49714" fg:w="67"/><text x="99.5760%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (363 instructions, 0.72%)</title><rect x="98.9875%" y="197" width="0.7249%" height="15" fill="rgb(220,68,38)" fg:x="49566" fg:w="363"/><text x="99.2804%" y="207.50"></text></g><g><title>all (50,073 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,8,30)" fg:x="0" fg:w="50073"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (50,073 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,64,39)" fg:x="0" fg:w="50073"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>