<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53320"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0356%" height="15" fill="rgb(220,119,50)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0356%" y="197" width="0.1425%" height="15" fill="rgb(239,46,46)" fg:x="19" fg:w="76"/><text x="0.3286%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1782%" y="197" width="0.1425%" height="15" fill="rgb(241,219,32)" fg:x="95" fg:w="76"/><text x="0.4711%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3207%" y="165" width="0.1425%" height="15" fill="rgb(217,58,41)" fg:x="171" fg:w="76"/><text x="0.6137%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="0.4632%" y="149" width="0.1294%" height="15" fill="rgb(241,83,17)" fg:x="247" fg:w="69"/><text x="0.7562%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="0.5926%" y="149" width="0.7614%" height="15" fill="rgb(237,54,12)" fg:x="316" fg:w="406"/><text x="0.8856%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="1.3541%" y="149" width="0.1538%" height="15" fill="rgb(251,120,40)" fg:x="722" fg:w="82"/><text x="1.6471%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.5079%" y="149" width="0.1013%" height="15" fill="rgb(247,177,44)" fg:x="804" fg:w="54"/><text x="1.8008%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6092%" y="149" width="0.1013%" height="15" fill="rgb(220,65,17)" fg:x="858" fg:w="54"/><text x="1.9021%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7104%" y="149" width="0.1013%" height="15" fill="rgb(241,30,40)" fg:x="912" fg:w="54"/><text x="2.0034%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8117%" y="149" width="0.1013%" height="15" fill="rgb(225,197,42)" fg:x="966" fg:w="54"/><text x="2.1047%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="1.9130%" y="149" width="0.1294%" height="15" fill="rgb(220,50,52)" fg:x="1020" fg:w="69"/><text x="2.2059%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0424%" y="149" width="0.1219%" height="15" fill="rgb(234,183,51)" fg:x="1089" fg:w="65"/><text x="2.3354%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="2.1643%" y="149" width="0.7614%" height="15" fill="rgb(215,105,39)" fg:x="1154" fg:w="406"/><text x="2.4573%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9257%" y="149" width="0.0300%" height="15" fill="rgb(251,150,29)" fg:x="1560" fg:w="16"/><text x="3.2187%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9557%" y="133" width="0.1425%" height="15" fill="rgb(241,58,27)" fg:x="1576" fg:w="76"/><text x="3.2487%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0983%" y="101" width="0.1125%" height="15" fill="rgb(254,227,35)" fg:x="1652" fg:w="60"/><text x="3.3912%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0983%" y="117" width="0.1594%" height="15" fill="rgb(205,37,10)" fg:x="1652" fg:w="85"/><text x="3.3912%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2577%" y="69" width="0.0169%" height="15" fill="rgb(231,34,4)" fg:x="1737" fg:w="9"/><text x="3.5507%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2746%" y="53" width="0.0563%" height="15" fill="rgb(250,227,44)" fg:x="1746" fg:w="30"/><text x="3.5675%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2746%" y="69" width="0.1032%" height="15" fill="rgb(223,21,22)" fg:x="1746" fg:w="55"/><text x="3.5675%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2577%" y="85" width="0.2213%" height="15" fill="rgb(225,97,0)" fg:x="1737" fg:w="118"/><text x="3.5507%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2577%" y="101" width="0.3207%" height="15" fill="rgb(219,44,8)" fg:x="1737" fg:w="171"/><text x="3.5507%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2577%" y="117" width="0.3301%" height="15" fill="rgb(218,183,51)" fg:x="1737" fg:w="176"/><text x="3.5507%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="3.0983%" y="133" width="0.6977%" height="15" fill="rgb(252,50,52)" fg:x="1652" fg:w="372"/><text x="3.3912%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="2.9557%" y="149" width="1.1047%" height="15" fill="rgb(241,125,32)" fg:x="1576" fg:w="589"/><text x="3.2487%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="4.0604%" y="149" width="0.1538%" height="15" fill="rgb(253,115,39)" fg:x="2165" fg:w="82"/><text x="4.3534%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.2142%" y="149" width="0.1032%" height="15" fill="rgb(245,101,50)" fg:x="2247" fg:w="55"/><text x="4.5071%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="4.3173%" y="149" width="0.1182%" height="15" fill="rgb(246,47,12)" fg:x="2302" fg:w="63"/><text x="4.6103%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4355%" y="149" width="0.1219%" height="15" fill="rgb(207,91,26)" fg:x="2365" fg:w="65"/><text x="4.7285%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="4.5574%" y="133" width="0.7614%" height="15" fill="rgb(207,25,16)" fg:x="2430" fg:w="406"/><text x="4.8504%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.3188%" y="133" width="0.0300%" height="15" fill="rgb(232,74,50)" fg:x="2836" fg:w="16"/><text x="5.6118%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3488%" y="117" width="0.1425%" height="15" fill="rgb(242,50,30)" fg:x="2852" fg:w="76"/><text x="5.6418%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4914%" y="85" width="0.1125%" height="15" fill="rgb(232,181,34)" fg:x="2928" fg:w="60"/><text x="5.7843%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4914%" y="101" width="0.1594%" height="15" fill="rgb(244,80,20)" fg:x="2928" fg:w="85"/><text x="5.7843%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6508%" y="53" width="0.0169%" height="15" fill="rgb(220,57,50)" fg:x="3013" fg:w="9"/><text x="5.9438%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6677%" y="37" width="0.0563%" height="15" fill="rgb(246,80,2)" fg:x="3022" fg:w="30"/><text x="5.9606%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6677%" y="53" width="0.1032%" height="15" fill="rgb(254,129,4)" fg:x="3022" fg:w="55"/><text x="5.9606%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6508%" y="69" width="0.2213%" height="15" fill="rgb(242,178,5)" fg:x="3013" fg:w="118"/><text x="5.9438%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6508%" y="85" width="0.3207%" height="15" fill="rgb(238,25,35)" fg:x="3013" fg:w="171"/><text x="5.9438%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6508%" y="101" width="0.3301%" height="15" fill="rgb(218,3,48)" fg:x="3013" fg:w="176"/><text x="5.9438%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="5.4914%" y="117" width="0.6977%" height="15" fill="rgb(244,100,30)" fg:x="2928" fg:w="372"/><text x="5.7843%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="5.3488%" y="133" width="1.1047%" height="15" fill="rgb(245,60,21)" fg:x="2852" fg:w="589"/><text x="5.6418%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="6.4535%" y="133" width="0.1538%" height="15" fill="rgb(241,95,40)" fg:x="3441" fg:w="82"/><text x="6.7465%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.6073%" y="133" width="0.1032%" height="15" fill="rgb(216,105,19)" fg:x="3523" fg:w="55"/><text x="6.9002%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="6.7104%" y="117" width="0.1294%" height="15" fill="rgb(223,89,31)" fg:x="3578" fg:w="69"/><text x="7.0034%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8398%" y="117" width="0.1707%" height="15" fill="rgb(222,100,6)" fg:x="3647" fg:w="91"/><text x="7.1328%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.0105%" y="117" width="0.1182%" height="15" fill="rgb(209,129,20)" fg:x="3738" fg:w="63"/><text x="7.3035%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.53%)</title><rect x="6.7104%" y="133" width="0.5289%" height="15" fill="rgb(231,219,1)" fg:x="3578" fg:w="282"/><text x="7.0034%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.2393%" y="133" width="0.1425%" height="15" fill="rgb(212,212,40)" fg:x="3860" fg:w="76"/><text x="7.5323%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 3.21%)</title><rect x="4.5574%" y="149" width="3.2052%" height="15" fill="rgb(209,29,3)" fg:x="2430" fg:w="1709"/><text x="4.8504%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.7626%" y="149" width="0.1182%" height="15" fill="rgb(240,157,7)" fg:x="4139" fg:w="63"/><text x="8.0555%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8807%" y="149" width="0.0244%" height="15" fill="rgb(223,77,25)" fg:x="4202" fg:w="13"/><text x="8.1737%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.9051%" y="149" width="0.0244%" height="15" fill="rgb(212,220,27)" fg:x="4215" fg:w="13"/><text x="8.1981%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.9295%" y="149" width="0.0131%" height="15" fill="rgb(247,148,32)" fg:x="4228" fg:w="7"/><text x="8.2225%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9426%" y="149" width="0.0281%" height="15" fill="rgb(236,173,44)" fg:x="4235" fg:w="15"/><text x="8.2356%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9707%" y="133" width="0.1425%" height="15" fill="rgb(241,81,11)" fg:x="4250" fg:w="76"/><text x="8.2637%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9707%" y="149" width="0.2982%" height="15" fill="rgb(243,226,47)" fg:x="4250" fg:w="159"/><text x="8.2637%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2689%" y="117" width="0.1425%" height="15" fill="rgb(214,155,47)" fg:x="4409" fg:w="76"/><text x="8.5619%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="8.2689%" y="133" width="0.2063%" height="15" fill="rgb(227,139,25)" fg:x="4409" fg:w="110"/><text x="8.5619%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.33%)</title><rect x="8.2689%" y="149" width="0.3338%" height="15" fill="rgb(248,50,17)" fg:x="4409" fg:w="178"/><text x="8.5619%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.6028%" y="149" width="0.1425%" height="15" fill="rgb(213,81,33)" fg:x="4587" fg:w="76"/><text x="8.8957%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.7453%" y="149" width="0.1519%" height="15" fill="rgb(208,81,43)" fg:x="4663" fg:w="81"/><text x="9.0383%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8972%" y="149" width="0.1425%" height="15" fill="rgb(242,178,47)" fg:x="4744" fg:w="76"/><text x="9.1902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="9.0398%" y="149" width="0.1425%" height="15" fill="rgb(252,51,25)" fg:x="4820" fg:w="76"/><text x="9.3327%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1860%" y="149" width="0.1519%" height="15" fill="rgb(237,121,48)" fg:x="4898" fg:w="81"/><text x="9.4790%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="9.3380%" y="149" width="0.7127%" height="15" fill="rgb(248,168,33)" fg:x="4979" fg:w="380"/><text x="9.6309%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="10.0506%" y="149" width="0.7127%" height="15" fill="rgb(215,37,19)" fg:x="5359" fg:w="380"/><text x="10.3436%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,436 instructions, 12.07%)</title><rect x="0.4632%" y="165" width="12.0705%" height="15" fill="rgb(252,203,46)" fg:x="247" fg:w="6436"/><text x="0.7562%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (335 instructions, 0.63%)</title><rect x="12.5338%" y="165" width="0.6283%" height="15" fill="rgb(244,106,5)" fg:x="6683" fg:w="335"/><text x="12.8267%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="13.1620%" y="165" width="0.0731%" height="15" fill="rgb(205,206,19)" fg:x="7018" fg:w="39"/><text x="13.4550%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.13%)</title><rect x="13.2352%" y="165" width="0.1332%" height="15" fill="rgb(234,6,26)" fg:x="7057" fg:w="71"/><text x="13.5282%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.3777%" y="133" width="0.0994%" height="15" fill="rgb(247,107,20)" fg:x="7133" fg:w="53"/><text x="13.6707%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.17%)</title><rect x="13.4771%" y="133" width="0.1650%" height="15" fill="rgb(253,178,17)" fg:x="7186" fg:w="88"/><text x="13.7701%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="13.6422%" y="133" width="0.3038%" height="15" fill="rgb(240,225,41)" fg:x="7274" fg:w="162"/><text x="13.9351%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.3777%" y="149" width="1.0128%" height="15" fill="rgb(252,6,51)" fg:x="7133" fg:w="540"/><text x="13.6707%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.40%)</title><rect x="13.3683%" y="165" width="1.4047%" height="15" fill="rgb(225,4,40)" fg:x="7128" fg:w="749"/><text x="13.6613%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="14.7731%" y="149" width="0.1032%" height="15" fill="rgb(237,22,27)" fg:x="7877" fg:w="55"/><text x="15.0660%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.31%)</title><rect x="14.7731%" y="165" width="0.3057%" height="15" fill="rgb(217,11,7)" fg:x="7877" fg:w="163"/><text x="15.0660%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="15.0881%" y="133" width="0.0994%" height="15" fill="rgb(238,216,47)" fg:x="8045" fg:w="53"/><text x="15.3811%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.17%)</title><rect x="15.1875%" y="133" width="0.1650%" height="15" fill="rgb(249,217,49)" fg:x="8098" fg:w="88"/><text x="15.4805%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="15.3526%" y="133" width="0.3038%" height="15" fill="rgb(206,30,50)" fg:x="8186" fg:w="162"/><text x="15.6456%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="15.0881%" y="149" width="1.0128%" height="15" fill="rgb(240,0,49)" fg:x="8045" fg:w="540"/><text x="15.3811%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="16.1009%" y="149" width="0.1275%" height="15" fill="rgb(251,168,54)" fg:x="8585" fg:w="68"/><text x="16.3939%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.2284%" y="133" width="0.1519%" height="15" fill="rgb(210,185,2)" fg:x="8653" fg:w="81"/><text x="16.5214%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.2284%" y="149" width="0.2026%" height="15" fill="rgb(218,28,48)" fg:x="8653" fg:w="108"/><text x="16.5214%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.67%)</title><rect x="15.0788%" y="165" width="1.6692%" height="15" fill="rgb(220,122,47)" fg:x="8040" fg:w="890"/><text x="15.3717%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.7479%" y="117" width="0.0994%" height="15" fill="rgb(220,112,26)" fg:x="8930" fg:w="53"/><text x="17.0409%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.15%)</title><rect x="16.7479%" y="133" width="0.1463%" height="15" fill="rgb(218,221,15)" fg:x="8930" fg:w="78"/><text x="17.0409%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.55%)</title><rect x="16.7479%" y="149" width="0.5495%" height="15" fill="rgb(210,180,42)" fg:x="8930" fg:w="293"/><text x="17.0409%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1282 (15 instructions, 0.03%)</title><rect x="17.2974%" y="149" width="0.0281%" height="15" fill="rgb(237,10,25)" fg:x="9223" fg:w="15"/><text x="17.5904%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3256%" y="149" width="0.0206%" height="15" fill="rgb(206,67,51)" fg:x="9238" fg:w="11"/><text x="17.6186%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.90%)</title><rect x="16.7479%" y="165" width="0.8965%" height="15" fill="rgb(234,133,10)" fg:x="8930" fg:w="478"/><text x="17.0409%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.09%)</title><rect x="17.6444%" y="165" width="0.0881%" height="15" fill="rgb(222,89,36)" fg:x="9408" fg:w="47"/><text x="17.9374%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.7326%" y="149" width="0.2307%" height="15" fill="rgb(215,128,51)" fg:x="9455" fg:w="123"/><text x="18.0255%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="18.0139%" y="149" width="0.2307%" height="15" fill="rgb(253,166,16)" fg:x="9605" fg:w="123"/><text x="18.3068%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.7326%" y="165" width="0.5626%" height="15" fill="rgb(236,187,25)" fg:x="9455" fg:w="300"/><text x="18.0255%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.2952%" y="149" width="0.0525%" height="15" fill="rgb(227,22,43)" fg:x="9755" fg:w="28"/><text x="18.5882%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.18%)</title><rect x="18.2952%" y="165" width="0.1819%" height="15" fill="rgb(242,188,45)" fg:x="9755" fg:w="97"/><text x="18.5882%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4771%" y="165" width="0.0206%" height="15" fill="rgb(236,211,39)" fg:x="9852" fg:w="11"/><text x="18.7701%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4977%" y="165" width="0.0206%" height="15" fill="rgb(246,141,28)" fg:x="9863" fg:w="11"/><text x="18.7907%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.5184%" y="165" width="0.0206%" height="15" fill="rgb(241,132,25)" fg:x="9874" fg:w="11"/><text x="18.8113%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.77%)</title><rect x="18.5390%" y="165" width="0.7689%" height="15" fill="rgb(251,10,3)" fg:x="9885" fg:w="410"/><text x="18.8320%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.3080%" y="133" width="0.0225%" height="15" fill="rgb(231,137,0)" fg:x="10295" fg:w="12"/><text x="19.6009%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.32%)</title><rect x="19.3305%" y="133" width="0.3151%" height="15" fill="rgb(214,173,17)" fg:x="10307" fg:w="168"/><text x="19.6234%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="19.6455%" y="101" width="0.1182%" height="15" fill="rgb(215,134,12)" fg:x="10475" fg:w="63"/><text x="19.9385%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.39%)</title><rect x="19.6455%" y="117" width="0.3901%" height="15" fill="rgb(244,18,14)" fg:x="10475" fg:w="208"/><text x="19.9385%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.44%)</title><rect x="19.6455%" y="133" width="0.4407%" height="15" fill="rgb(222,131,50)" fg:x="10475" fg:w="235"/><text x="19.9385%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.0863%" y="133" width="0.0206%" height="15" fill="rgb(247,9,26)" fg:x="10710" fg:w="11"/><text x="20.3792%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 0.88%)</title><rect x="19.3080%" y="149" width="0.8777%" height="15" fill="rgb(222,83,1)" fg:x="10295" fg:w="468"/><text x="19.6009%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 0.94%)</title><rect x="19.3080%" y="165" width="0.9434%" height="15" fill="rgb(240,27,8)" fg:x="10295" fg:w="503"/><text x="19.6009%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="20.2513%" y="149" width="0.1032%" height="15" fill="rgb(252,130,1)" fg:x="10798" fg:w="55"/><text x="20.5443%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="20.3545%" y="149" width="0.1182%" height="15" fill="rgb(207,116,22)" fg:x="10853" fg:w="63"/><text x="20.6474%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.37%)</title><rect x="20.2513%" y="165" width="0.3732%" height="15" fill="rgb(216,80,4)" fg:x="10798" fg:w="199"/><text x="20.5443%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,217 instructions, 21.04%)</title><rect x="0.3207%" y="181" width="21.0371%" height="15" fill="rgb(207,53,23)" fg:x="171" fg:w="11217"/><text x="0.6137%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="21.3578%" y="181" width="1.5004%" height="15" fill="rgb(211,27,5)" fg:x="11388" fg:w="800"/><text x="21.6508%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="22.8582%" y="181" width="1.5004%" height="15" fill="rgb(236,84,30)" fg:x="12188" fg:w="800"/><text x="23.1512%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="24.3586%" y="181" width="1.5004%" height="15" fill="rgb(205,92,36)" fg:x="12988" fg:w="800"/><text x="24.6516%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="25.8590%" y="181" width="1.5548%" height="15" fill="rgb(241,38,4)" fg:x="13788" fg:w="829"/><text x="26.1519%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="27.4137%" y="181" width="1.5004%" height="15" fill="rgb(219,213,17)" fg:x="14617" fg:w="800"/><text x="27.7067%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="28.9141%" y="181" width="1.5004%" height="15" fill="rgb(241,0,26)" fg:x="15417" fg:w="800"/><text x="29.2071%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="30.4145%" y="181" width="1.5004%" height="15" fill="rgb(211,28,12)" fg:x="16217" fg:w="800"/><text x="30.7074%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="31.9149%" y="181" width="1.5004%" height="15" fill="rgb(228,103,37)" fg:x="17017" fg:w="800"/><text x="32.2078%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="33.4152%" y="181" width="1.5004%" height="15" fill="rgb(251,202,9)" fg:x="17817" fg:w="800"/><text x="33.7082%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="34.9156%" y="181" width="1.5004%" height="15" fill="rgb(210,77,32)" fg:x="18617" fg:w="800"/><text x="35.2086%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="36.4160%" y="181" width="1.5548%" height="15" fill="rgb(239,99,49)" fg:x="19417" fg:w="829"/><text x="36.7089%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="37.9707%" y="181" width="1.5004%" height="15" fill="rgb(212,129,38)" fg:x="20246" fg:w="800"/><text x="38.2637%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="39.4711%" y="181" width="1.5004%" height="15" fill="rgb(240,48,13)" fg:x="21046" fg:w="800"/><text x="39.7641%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="40.9715%" y="181" width="1.5004%" height="15" fill="rgb(233,189,51)" fg:x="21846" fg:w="800"/><text x="41.2645%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="42.4719%" y="181" width="1.5004%" height="15" fill="rgb(233,205,41)" fg:x="22646" fg:w="800"/><text x="42.7648%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="43.9722%" y="181" width="1.5004%" height="15" fill="rgb(209,128,46)" fg:x="23446" fg:w="800"/><text x="44.2652%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.43%)</title><rect x="45.4726%" y="181" width="1.4291%" height="15" fill="rgb(214,176,13)" fg:x="24246" fg:w="762"/><text x="45.7656%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="46.9017%" y="181" width="1.5004%" height="15" fill="rgb(229,79,23)" fg:x="25008" fg:w="800"/><text x="47.1947%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="48.4021%" y="181" width="1.5548%" height="15" fill="rgb(235,164,36)" fg:x="25808" fg:w="829"/><text x="48.6951%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="49.9569%" y="181" width="1.5004%" height="15" fill="rgb(210,98,0)" fg:x="26637" fg:w="800"/><text x="50.2498%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="51.4572%" y="181" width="1.5548%" height="15" fill="rgb(247,208,31)" fg:x="27437" fg:w="829"/><text x="51.7502%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="53.0120%" y="181" width="1.5004%" height="15" fill="rgb(205,227,52)" fg:x="28266" fg:w="800"/><text x="53.3050%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="54.5124%" y="181" width="1.5004%" height="15" fill="rgb(229,151,22)" fg:x="29066" fg:w="800"/><text x="54.8053%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="56.0128%" y="181" width="1.5004%" height="15" fill="rgb(217,104,19)" fg:x="29866" fg:w="800"/><text x="56.3057%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="57.5131%" y="181" width="1.5004%" height="15" fill="rgb(216,169,3)" fg:x="30666" fg:w="800"/><text x="57.8061%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="59.0135%" y="181" width="1.5548%" height="15" fill="rgb(207,26,54)" fg:x="31466" fg:w="829"/><text x="59.3065%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.43%)</title><rect x="60.5683%" y="181" width="1.4291%" height="15" fill="rgb(234,89,43)" fg:x="32295" fg:w="762"/><text x="60.8612%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="61.9974%" y="181" width="1.5004%" height="15" fill="rgb(242,31,50)" fg:x="33057" fg:w="800"/><text x="62.2903%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="63.4977%" y="181" width="1.5004%" height="15" fill="rgb(209,110,28)" fg:x="33857" fg:w="800"/><text x="63.7907%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="64.9981%" y="181" width="1.5004%" height="15" fill="rgb(217,227,53)" fg:x="34657" fg:w="800"/><text x="65.2911%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="66.4985%" y="181" width="1.5004%" height="15" fill="rgb(212,44,25)" fg:x="35457" fg:w="800"/><text x="66.7915%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="67.9989%" y="181" width="1.5548%" height="15" fill="rgb(228,159,29)" fg:x="36257" fg:w="829"/><text x="68.2918%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="69.5536%" y="181" width="1.5004%" height="15" fill="rgb(239,171,33)" fg:x="37086" fg:w="800"/><text x="69.8466%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="71.0540%" y="181" width="1.5004%" height="15" fill="rgb(249,170,19)" fg:x="37886" fg:w="800"/><text x="71.3470%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="72.5544%" y="181" width="1.5004%" height="15" fill="rgb(219,60,13)" fg:x="38686" fg:w="800"/><text x="72.8474%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="74.0548%" y="181" width="1.5004%" height="15" fill="rgb(221,110,8)" fg:x="39486" fg:w="800"/><text x="74.3477%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="75.5551%" y="181" width="1.5004%" height="15" fill="rgb(210,34,48)" fg:x="40286" fg:w="800"/><text x="75.8481%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="77.0555%" y="181" width="1.5548%" height="15" fill="rgb(211,138,47)" fg:x="41086" fg:w="829"/><text x="77.3485%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="78.6103%" y="181" width="1.5004%" height="15" fill="rgb(225,42,23)" fg:x="41915" fg:w="800"/><text x="78.9032%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="80.1107%" y="181" width="1.5004%" height="15" fill="rgb(206,213,35)" fg:x="42715" fg:w="800"/><text x="80.4036%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="81.6110%" y="181" width="1.5548%" height="15" fill="rgb(247,54,53)" fg:x="43515" fg:w="829"/><text x="81.9040%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="83.1658%" y="181" width="1.5004%" height="15" fill="rgb(221,76,31)" fg:x="44344" fg:w="800"/><text x="83.4588%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="84.6662%" y="181" width="1.5004%" height="15" fill="rgb(229,18,31)" fg:x="45144" fg:w="800"/><text x="84.9591%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="86.1665%" y="181" width="1.5004%" height="15" fill="rgb(209,149,14)" fg:x="45944" fg:w="800"/><text x="86.4595%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="87.6669%" y="181" width="1.5004%" height="15" fill="rgb(239,67,10)" fg:x="46744" fg:w="800"/><text x="87.9599%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="89.1673%" y="181" width="1.5004%" height="15" fill="rgb(206,128,1)" fg:x="47544" fg:w="800"/><text x="89.4603%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="90.6677%" y="181" width="1.5004%" height="15" fill="rgb(211,65,38)" fg:x="48344" fg:w="800"/><text x="90.9606%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="92.1680%" y="181" width="1.5548%" height="15" fill="rgb(221,170,54)" fg:x="49144" fg:w="829"/><text x="92.4610%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="93.7228%" y="181" width="1.5004%" height="15" fill="rgb(212,178,40)" fg:x="49973" fg:w="800"/><text x="94.0158%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="95.2232%" y="181" width="1.5004%" height="15" fill="rgb(239,14,44)" fg:x="50773" fg:w="800"/><text x="95.5161%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="96.7329%" y="133" width="0.1032%" height="15" fill="rgb(212,224,20)" fg:x="51578" fg:w="55"/><text x="97.0259%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.15%)</title><rect x="96.7329%" y="149" width="0.1538%" height="15" fill="rgb(216,12,16)" fg:x="51578" fg:w="82"/><text x="97.0259%" y="159.50"></text></g><g><title>memset (136 instructions, 0.26%)</title><rect x="96.8867%" y="149" width="0.2551%" height="15" fill="rgb(206,2,37)" fg:x="51660" fg:w="136"/><text x="97.1797%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (383 instructions, 0.72%)</title><rect x="96.7236%" y="165" width="0.7183%" height="15" fill="rgb(230,223,7)" fg:x="51573" fg:w="383"/><text x="97.0165%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.4419%" y="117" width="0.1425%" height="15" fill="rgb(207,227,50)" fg:x="51956" fg:w="76"/><text x="97.7348%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="97.4419%" y="133" width="0.2063%" height="15" fill="rgb(252,29,40)" fg:x="51956" fg:w="110"/><text x="97.7348%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.33%)</title><rect x="97.4419%" y="149" width="0.3282%" height="15" fill="rgb(233,112,46)" fg:x="51956" fg:w="175"/><text x="97.7348%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7701%" y="149" width="0.0206%" height="15" fill="rgb(216,200,25)" fg:x="52131" fg:w="11"/><text x="98.0630%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7907%" y="149" width="0.0206%" height="15" fill="rgb(254,127,26)" fg:x="52142" fg:w="11"/><text x="98.0837%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.06%)</title><rect x="97.8113%" y="149" width="0.0563%" height="15" fill="rgb(231,135,15)" fg:x="52153" fg:w="30"/><text x="98.1043%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (453 instructions, 0.85%)</title><rect x="97.4419%" y="165" width="0.8496%" height="15" fill="rgb(215,89,34)" fg:x="51956" fg:w="453"/><text x="97.7348%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.3008%" y="165" width="0.1032%" height="15" fill="rgb(220,1,24)" fg:x="52414" fg:w="55"/><text x="98.5938%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (972 instructions, 1.82%)</title><rect x="96.7236%" y="181" width="1.8230%" height="15" fill="rgb(246,167,14)" fg:x="51573" fg:w="972"/><text x="97.0165%" y="191.50"></text></g><g><title>heap::batch_get_2_::{{closure}} (52,714 instructions, 98.86%)</title><rect x="0.3207%" y="197" width="98.8635%" height="15" fill="rgb(222,225,9)" fg:x="171" fg:w="52714"/><text x="0.6137%" y="207.50">heap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.1842%" y="197" width="0.0225%" height="15" fill="rgb(221,22,17)" fg:x="52885" fg:w="12"/><text x="99.4771%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="99.3586%" y="181" width="0.1032%" height="15" fill="rgb(235,139,40)" fg:x="52978" fg:w="55"/><text x="99.6516%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="99.4617%" y="181" width="0.1182%" height="15" fill="rgb(215,149,13)" fg:x="53033" fg:w="63"/><text x="99.7547%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 0.61%)</title><rect x="99.2067%" y="197" width="0.6095%" height="15" fill="rgb(209,193,15)" fg:x="52897" fg:w="325"/><text x="99.4996%" y="207.50"></text></g><g><title>all (53,320 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(218,197,51)" fg:x="0" fg:w="53320"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (53,320 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(218,207,52)" fg:x="0" fg:w="53320"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>