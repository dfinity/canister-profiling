<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="49928"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0481%" height="15" fill="rgb(237,214,29)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0481%" y="197" width="0.1662%" height="15" fill="rgb(235,12,47)" fg:x="24" fg:w="83"/><text x="0.3410%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2143%" y="197" width="0.1662%" height="15" fill="rgb(244,98,51)" fg:x="107" fg:w="83"/><text x="0.5073%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3805%" y="165" width="0.1662%" height="15" fill="rgb(238,179,16)" fg:x="190" fg:w="83"/><text x="0.6735%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5468%" y="149" width="0.1642%" height="15" fill="rgb(240,191,33)" fg:x="273" fg:w="82"/><text x="0.8398%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7110%" y="133" width="0.0120%" height="15" fill="rgb(253,105,14)" fg:x="355" fg:w="6"/><text x="1.0040%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="0.7110%" y="149" width="0.8873%" height="15" fill="rgb(230,219,10)" fg:x="355" fg:w="443"/><text x="1.0040%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5983%" y="149" width="0.1903%" height="15" fill="rgb(226,122,44)" fg:x="798" fg:w="95"/><text x="1.8913%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7886%" y="149" width="0.1202%" height="15" fill="rgb(232,201,17)" fg:x="893" fg:w="60"/><text x="2.0815%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9087%" y="149" width="0.1202%" height="15" fill="rgb(216,92,17)" fg:x="953" fg:w="60"/><text x="2.2017%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0289%" y="149" width="0.1202%" height="15" fill="rgb(245,174,29)" fg:x="1013" fg:w="60"/><text x="2.3219%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1491%" y="149" width="0.1202%" height="15" fill="rgb(236,30,4)" fg:x="1073" fg:w="60"/><text x="2.4421%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2693%" y="149" width="0.1642%" height="15" fill="rgb(254,96,12)" fg:x="1133" fg:w="82"/><text x="2.5622%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4335%" y="149" width="0.1402%" height="15" fill="rgb(214,111,34)" fg:x="1215" fg:w="70"/><text x="2.7265%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5737%" y="133" width="0.0120%" height="15" fill="rgb(228,116,36)" fg:x="1285" fg:w="6"/><text x="2.8667%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="2.5737%" y="149" width="0.8873%" height="15" fill="rgb(252,69,25)" fg:x="1285" fg:w="443"/><text x="2.8667%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4610%" y="149" width="0.0381%" height="15" fill="rgb(233,121,10)" fg:x="1728" fg:w="19"/><text x="3.7540%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.4990%" y="133" width="0.1662%" height="15" fill="rgb(253,96,42)" fg:x="1747" fg:w="83"/><text x="3.7920%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6653%" y="101" width="0.1342%" height="15" fill="rgb(214,92,52)" fg:x="1830" fg:w="67"/><text x="3.9582%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="3.6653%" y="117" width="0.1923%" height="15" fill="rgb(215,199,3)" fg:x="1830" fg:w="96"/><text x="3.9582%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8576%" y="69" width="0.0220%" height="15" fill="rgb(215,219,11)" fg:x="1926" fg:w="11"/><text x="4.1505%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8796%" y="53" width="0.0701%" height="15" fill="rgb(206,123,7)" fg:x="1937" fg:w="35"/><text x="4.1726%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="3.8796%" y="69" width="0.1282%" height="15" fill="rgb(207,1,5)" fg:x="1937" fg:w="64"/><text x="4.1726%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="3.8576%" y="85" width="0.2884%" height="15" fill="rgb(252,211,35)" fg:x="1926" fg:w="144"/><text x="4.1505%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="3.8576%" y="101" width="0.4186%" height="15" fill="rgb(211,189,10)" fg:x="1926" fg:w="209"/><text x="4.1505%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="3.8576%" y="117" width="0.4386%" height="15" fill="rgb(216,157,11)" fg:x="1926" fg:w="219"/><text x="4.1505%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.91%)</title><rect x="3.6653%" y="133" width="0.9073%" height="15" fill="rgb(247,202,52)" fg:x="1830" fg:w="453"/><text x="3.9582%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.35%)</title><rect x="3.4990%" y="149" width="1.3499%" height="15" fill="rgb(216,186,0)" fg:x="1747" fg:w="674"/><text x="3.7920%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8490%" y="149" width="0.1903%" height="15" fill="rgb(234,105,30)" fg:x="2421" fg:w="95"/><text x="5.1420%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0393%" y="149" width="0.1202%" height="15" fill="rgb(211,48,6)" fg:x="2516" fg:w="60"/><text x="5.3322%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1594%" y="149" width="0.1522%" height="15" fill="rgb(247,142,20)" fg:x="2576" fg:w="76"/><text x="5.4524%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3116%" y="149" width="0.1402%" height="15" fill="rgb(214,185,13)" fg:x="2652" fg:w="70"/><text x="5.6046%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4519%" y="117" width="0.0120%" height="15" fill="rgb(242,145,39)" fg:x="2722" fg:w="6"/><text x="5.7448%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="5.4519%" y="133" width="0.8873%" height="15" fill="rgb(247,95,25)" fg:x="2722" fg:w="443"/><text x="5.7448%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3391%" y="133" width="0.0381%" height="15" fill="rgb(244,206,25)" fg:x="3165" fg:w="19"/><text x="6.6321%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3772%" y="117" width="0.1662%" height="15" fill="rgb(242,89,26)" fg:x="3184" fg:w="83"/><text x="6.6702%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5434%" y="85" width="0.1342%" height="15" fill="rgb(207,177,51)" fg:x="3267" fg:w="67"/><text x="6.8364%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="6.5434%" y="101" width="0.1923%" height="15" fill="rgb(214,32,43)" fg:x="3267" fg:w="96"/><text x="6.8364%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7357%" y="53" width="0.0220%" height="15" fill="rgb(221,41,11)" fg:x="3363" fg:w="11"/><text x="7.0287%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7577%" y="37" width="0.0701%" height="15" fill="rgb(209,90,4)" fg:x="3374" fg:w="35"/><text x="7.0507%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="6.7577%" y="53" width="0.1282%" height="15" fill="rgb(236,125,10)" fg:x="3374" fg:w="64"/><text x="7.0507%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="6.7357%" y="69" width="0.2884%" height="15" fill="rgb(232,74,42)" fg:x="3363" fg:w="144"/><text x="7.0287%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="6.7357%" y="85" width="0.4186%" height="15" fill="rgb(251,212,4)" fg:x="3363" fg:w="209"/><text x="7.0287%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="6.7357%" y="101" width="0.4386%" height="15" fill="rgb(248,96,11)" fg:x="3363" fg:w="219"/><text x="7.0287%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.91%)</title><rect x="6.5434%" y="117" width="0.9073%" height="15" fill="rgb(209,217,28)" fg:x="3267" fg:w="453"/><text x="6.8364%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.35%)</title><rect x="6.3772%" y="133" width="1.3499%" height="15" fill="rgb(240,167,31)" fg:x="3184" fg:w="674"/><text x="6.6702%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7271%" y="133" width="0.1903%" height="15" fill="rgb(213,183,17)" fg:x="3858" fg:w="95"/><text x="8.0201%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9174%" y="133" width="0.1202%" height="15" fill="rgb(227,173,50)" fg:x="3953" fg:w="60"/><text x="8.2104%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0376%" y="117" width="0.1642%" height="15" fill="rgb(209,107,50)" fg:x="4013" fg:w="82"/><text x="8.3305%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2018%" y="117" width="0.1903%" height="15" fill="rgb(245,128,50)" fg:x="4095" fg:w="95"/><text x="8.4948%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.3921%" y="117" width="0.1522%" height="15" fill="rgb(242,164,15)" fg:x="4190" fg:w="76"/><text x="8.6851%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0376%" y="133" width="0.6610%" height="15" fill="rgb(232,13,36)" fg:x="4013" fg:w="330"/><text x="8.3305%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="8.6985%" y="133" width="0.1662%" height="15" fill="rgb(214,98,13)" fg:x="4343" fg:w="83"/><text x="8.9915%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 3.90%)</title><rect x="5.4519%" y="149" width="3.8996%" height="15" fill="rgb(249,142,12)" fg:x="2722" fg:w="1947"/><text x="5.7448%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3515%" y="149" width="0.1522%" height="15" fill="rgb(223,122,28)" fg:x="4669" fg:w="76"/><text x="9.6444%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5037%" y="149" width="0.0300%" height="15" fill="rgb(231,50,44)" fg:x="4745" fg:w="15"/><text x="9.7967%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5337%" y="149" width="0.0300%" height="15" fill="rgb(208,3,9)" fg:x="4760" fg:w="15"/><text x="9.8267%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5638%" y="149" width="0.0180%" height="15" fill="rgb(239,4,43)" fg:x="4775" fg:w="9"/><text x="9.8567%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.03%)</title><rect x="9.5818%" y="149" width="0.0320%" height="15" fill="rgb(228,127,2)" fg:x="4784" fg:w="16"/><text x="9.8748%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6138%" y="133" width="0.1662%" height="15" fill="rgb(215,14,40)" fg:x="4800" fg:w="83"/><text x="9.9068%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6138%" y="149" width="0.3585%" height="15" fill="rgb(216,78,1)" fg:x="4800" fg:w="179"/><text x="9.9068%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9724%" y="117" width="0.1662%" height="15" fill="rgb(232,82,16)" fg:x="4979" fg:w="83"/><text x="10.2653%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9724%" y="133" width="0.2524%" height="15" fill="rgb(225,107,9)" fg:x="4979" fg:w="126"/><text x="10.2653%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.42%)</title><rect x="9.9724%" y="149" width="0.4226%" height="15" fill="rgb(206,122,33)" fg:x="4979" fg:w="211"/><text x="10.2653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.3950%" y="149" width="0.1662%" height="15" fill="rgb(251,0,34)" fg:x="5190" fg:w="83"/><text x="10.6879%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.5612%" y="149" width="0.1783%" height="15" fill="rgb(227,72,35)" fg:x="5273" fg:w="89"/><text x="10.8542%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7395%" y="149" width="0.1662%" height="15" fill="rgb(212,155,17)" fg:x="5362" fg:w="83"/><text x="11.0324%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9057%" y="149" width="0.1662%" height="15" fill="rgb(215,31,8)" fg:x="5445" fg:w="83"/><text x="11.1987%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.0800%" y="149" width="0.1783%" height="15" fill="rgb(216,94,50)" fg:x="5532" fg:w="89"/><text x="11.3729%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="11.2582%" y="149" width="0.8572%" height="15" fill="rgb(205,7,39)" fg:x="5621" fg:w="428"/><text x="11.5512%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="12.1154%" y="149" width="0.8572%" height="15" fill="rgb(244,61,21)" fg:x="6049" fg:w="428"/><text x="12.4084%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 14.81%)</title><rect x="0.5468%" y="165" width="14.8073%" height="15" fill="rgb(233,64,10)" fg:x="273" fg:w="7393"/><text x="0.8398%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.3541%" y="165" width="0.7611%" height="15" fill="rgb(241,70,5)" fg:x="7666" fg:w="380"/><text x="15.6471%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.1152%" y="149" width="0.0140%" height="15" fill="rgb(220,224,38)" fg:x="8046" fg:w="7"/><text x="16.4082%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="16.1152%" y="165" width="0.0781%" height="15" fill="rgb(243,126,29)" fg:x="8046" fg:w="39"/><text x="16.4082%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (212 instructions, 0.42%)</title><rect x="16.1933%" y="165" width="0.4246%" height="15" fill="rgb(245,59,48)" fg:x="8085" fg:w="212"/><text x="16.4863%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.6179%" y="149" width="0.0140%" height="15" fill="rgb(212,30,13)" fg:x="8297" fg:w="7"/><text x="16.9109%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.6320%" y="133" width="0.1182%" height="15" fill="rgb(211,172,32)" fg:x="8304" fg:w="59"/><text x="16.9249%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.7501%" y="133" width="0.1883%" height="15" fill="rgb(222,121,22)" fg:x="8363" fg:w="94"/><text x="17.0431%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.9384%" y="133" width="0.3465%" height="15" fill="rgb(226,47,41)" fg:x="8457" fg:w="173"/><text x="17.2314%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.6320%" y="149" width="1.1597%" height="15" fill="rgb(243,44,47)" fg:x="8304" fg:w="579"/><text x="16.9249%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 1.60%)</title><rect x="16.6179%" y="165" width="1.5983%" height="15" fill="rgb(249,53,19)" fg:x="8297" fg:w="798"/><text x="16.9109%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="18.2162%" y="165" width="0.1662%" height="15" fill="rgb(233,62,29)" fg:x="9095" fg:w="83"/><text x="18.5092%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="18.3825%" y="149" width="0.0140%" height="15" fill="rgb(235,96,37)" fg:x="9178" fg:w="7"/><text x="18.6754%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.3965%" y="133" width="0.1182%" height="15" fill="rgb(218,178,14)" fg:x="9185" fg:w="59"/><text x="18.6895%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.5147%" y="133" width="0.1883%" height="15" fill="rgb(227,2,51)" fg:x="9244" fg:w="94"/><text x="18.8076%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.7029%" y="133" width="0.3465%" height="15" fill="rgb(220,118,19)" fg:x="9338" fg:w="173"/><text x="18.9959%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.3965%" y="149" width="1.1597%" height="15" fill="rgb(225,93,24)" fg:x="9185" fg:w="579"/><text x="18.6895%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.5562%" y="149" width="0.1542%" height="15" fill="rgb(227,122,11)" fg:x="9764" fg:w="77"/><text x="19.8491%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="19.7104%" y="133" width="0.1783%" height="15" fill="rgb(224,34,45)" fg:x="9841" fg:w="89"/><text x="20.0034%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.25%)</title><rect x="19.7104%" y="149" width="0.2484%" height="15" fill="rgb(217,119,26)" fg:x="9841" fg:w="124"/><text x="20.0034%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 1.93%)</title><rect x="18.3825%" y="165" width="1.9328%" height="15" fill="rgb(226,176,39)" fg:x="9178" fg:w="965"/><text x="18.6754%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.3153%" y="117" width="0.1182%" height="15" fill="rgb(215,86,44)" fg:x="10143" fg:w="59"/><text x="20.6082%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.19%)</title><rect x="20.3153%" y="133" width="0.1863%" height="15" fill="rgb(247,68,27)" fg:x="10143" fg:w="93"/><text x="20.6082%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.63%)</title><rect x="20.3153%" y="149" width="0.6329%" height="15" fill="rgb(242,67,28)" fg:x="10143" fg:w="316"/><text x="20.6082%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.324 (18 instructions, 0.04%)</title><rect x="20.9482%" y="149" width="0.0361%" height="15" fill="rgb(210,93,3)" fg:x="10459" fg:w="18"/><text x="21.2411%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.9842%" y="149" width="0.0260%" height="15" fill="rgb(238,99,51)" fg:x="10477" fg:w="13"/><text x="21.2772%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 1.06%)</title><rect x="20.3153%" y="165" width="1.0595%" height="15" fill="rgb(233,60,15)" fg:x="10143" fg:w="529"/><text x="20.6082%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.3748%" y="165" width="0.1062%" height="15" fill="rgb(227,121,8)" fg:x="10672" fg:w="53"/><text x="21.6677%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="21.4809%" y="133" width="0.0461%" height="15" fill="rgb(249,42,28)" fg:x="10725" fg:w="23"/><text x="21.7739%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.28%)</title><rect x="21.4809%" y="149" width="0.2764%" height="15" fill="rgb(207,124,20)" fg:x="10725" fg:w="138"/><text x="21.7739%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="21.8274%" y="133" width="0.0541%" height="15" fill="rgb(206,207,13)" fg:x="10898" fg:w="27"/><text x="22.1204%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="21.8274%" y="149" width="0.2844%" height="15" fill="rgb(228,151,33)" fg:x="10898" fg:w="142"/><text x="22.1204%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (350 instructions, 0.70%)</title><rect x="21.4809%" y="165" width="0.7010%" height="15" fill="rgb(242,176,27)" fg:x="10725" fg:w="350"/><text x="21.7739%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="22.1819%" y="149" width="0.0681%" height="15" fill="rgb(238,193,54)" fg:x="11075" fg:w="34"/><text x="22.4749%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.04%)</title><rect x="22.2500%" y="149" width="0.0361%" height="15" fill="rgb(248,32,37)" fg:x="11109" fg:w="18"/><text x="22.5430%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.04%)</title><rect x="22.2861%" y="149" width="0.0361%" height="15" fill="rgb(238,208,14)" fg:x="11127" fg:w="18"/><text x="22.5791%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.33%)</title><rect x="22.1819%" y="165" width="0.3345%" height="15" fill="rgb(211,158,25)" fg:x="11075" fg:w="167"/><text x="22.4749%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5164%" y="165" width="0.0260%" height="15" fill="rgb(217,1,0)" fg:x="11242" fg:w="13"/><text x="22.8094%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5425%" y="165" width="0.0260%" height="15" fill="rgb(213,56,37)" fg:x="11255" fg:w="13"/><text x="22.8354%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5685%" y="165" width="0.0260%" height="15" fill="rgb(248,119,5)" fg:x="11268" fg:w="13"/><text x="22.8615%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.5945%" y="165" width="0.8813%" height="15" fill="rgb(233,103,45)" fg:x="11281" fg:w="440"/><text x="22.8875%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="23.4758%" y="133" width="0.0140%" height="15" fill="rgb(245,187,54)" fg:x="11721" fg:w="7"/><text x="23.7688%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.4898%" y="117" width="0.0541%" height="15" fill="rgb(220,166,17)" fg:x="11728" fg:w="27"/><text x="23.7828%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.5439%" y="117" width="0.0541%" height="15" fill="rgb(238,21,50)" fg:x="11755" fg:w="27"/><text x="23.8369%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.39%)</title><rect x="23.4898%" y="133" width="0.3946%" height="15" fill="rgb(213,203,41)" fg:x="11728" fg:w="197"/><text x="23.7828%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.8844%" y="101" width="0.0541%" height="15" fill="rgb(214,25,8)" fg:x="11925" fg:w="27"/><text x="24.1774%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="23.9385%" y="101" width="0.1362%" height="15" fill="rgb(240,122,18)" fg:x="11952" fg:w="68"/><text x="24.2314%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (189 instructions, 0.38%)</title><rect x="23.8844%" y="117" width="0.3785%" height="15" fill="rgb(239,200,26)" fg:x="11925" fg:w="189"/><text x="24.1774%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (224 instructions, 0.45%)</title><rect x="23.8844%" y="133" width="0.4486%" height="15" fill="rgb(213,108,53)" fg:x="11925" fg:w="224"/><text x="24.1774%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.3330%" y="133" width="0.0260%" height="15" fill="rgb(216,197,43)" fg:x="12149" fg:w="13"/><text x="24.6260%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (503 instructions, 1.01%)</title><rect x="23.4758%" y="149" width="1.0075%" height="15" fill="rgb(218,55,3)" fg:x="11721" fg:w="503"/><text x="23.7688%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (552 instructions, 1.11%)</title><rect x="23.4758%" y="165" width="1.1056%" height="15" fill="rgb(247,108,14)" fg:x="11721" fg:w="552"/><text x="23.7688%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.14%)</title><rect x="24.5814%" y="149" width="0.1382%" height="15" fill="rgb(227,151,38)" fg:x="12273" fg:w="69"/><text x="24.8744%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="24.7196%" y="149" width="0.1362%" height="15" fill="rgb(226,53,18)" fg:x="12342" fg:w="68"/><text x="25.0126%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.46%)</title><rect x="24.5814%" y="165" width="0.4627%" height="15" fill="rgb(231,200,24)" fg:x="12273" fg:w="231"/><text x="24.8744%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,784 instructions, 27.61%)</title><rect x="0.3805%" y="181" width="27.6078%" height="15" fill="rgb(251,204,10)" fg:x="190" fg:w="13784"/><text x="0.6735%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="27.9883%" y="181" width="1.2818%" height="15" fill="rgb(243,116,38)" fg:x="13974" fg:w="640"/><text x="28.2813%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (665 instructions, 1.33%)</title><rect x="29.2701%" y="181" width="1.3319%" height="15" fill="rgb(218,129,45)" fg:x="14614" fg:w="665"/><text x="29.5631%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="30.6021%" y="181" width="1.2818%" height="15" fill="rgb(250,151,12)" fg:x="15279" fg:w="640"/><text x="30.8950%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="31.8839%" y="181" width="1.2818%" height="15" fill="rgb(246,104,17)" fg:x="15919" fg:w="640"/><text x="32.1769%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="33.1658%" y="181" width="1.2818%" height="15" fill="rgb(251,197,52)" fg:x="16559" fg:w="640"/><text x="33.4587%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="34.4476%" y="181" width="1.3439%" height="15" fill="rgb(222,215,53)" fg:x="17199" fg:w="671"/><text x="34.7406%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="35.7915%" y="181" width="1.3439%" height="15" fill="rgb(220,173,12)" fg:x="17870" fg:w="671"/><text x="36.0845%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="37.1355%" y="181" width="1.2818%" height="15" fill="rgb(245,104,14)" fg:x="18541" fg:w="640"/><text x="37.4284%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="38.4173%" y="181" width="1.2818%" height="15" fill="rgb(241,34,27)" fg:x="19181" fg:w="640"/><text x="38.7103%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="39.6992%" y="181" width="1.2077%" height="15" fill="rgb(223,98,46)" fg:x="19821" fg:w="603"/><text x="39.9921%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="40.9069%" y="181" width="1.2818%" height="15" fill="rgb(223,215,50)" fg:x="20424" fg:w="640"/><text x="41.1999%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="42.1888%" y="181" width="1.2077%" height="15" fill="rgb(205,26,45)" fg:x="21064" fg:w="603"/><text x="42.4817%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="43.3965%" y="181" width="1.2818%" height="15" fill="rgb(249,172,18)" fg:x="21667" fg:w="640"/><text x="43.6895%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="44.6783%" y="181" width="1.2077%" height="15" fill="rgb(249,9,47)" fg:x="22307" fg:w="603"/><text x="44.9713%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="45.8861%" y="181" width="1.2818%" height="15" fill="rgb(229,78,42)" fg:x="22910" fg:w="640"/><text x="46.1790%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="47.1679%" y="181" width="1.2818%" height="15" fill="rgb(209,115,8)" fg:x="23550" fg:w="640"/><text x="47.4609%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="48.4498%" y="181" width="1.2818%" height="15" fill="rgb(253,45,33)" fg:x="24190" fg:w="640"/><text x="48.7427%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="49.7316%" y="181" width="1.2818%" height="15" fill="rgb(250,112,6)" fg:x="24830" fg:w="640"/><text x="50.0246%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="51.0135%" y="181" width="1.2818%" height="15" fill="rgb(246,35,43)" fg:x="25470" fg:w="640"/><text x="51.3064%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="52.2953%" y="181" width="1.2077%" height="15" fill="rgb(247,4,50)" fg:x="26110" fg:w="603"/><text x="52.5883%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="53.5030%" y="181" width="1.3439%" height="15" fill="rgb(205,42,9)" fg:x="26713" fg:w="671"/><text x="53.7960%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.41%)</title><rect x="54.8470%" y="181" width="1.4060%" height="15" fill="rgb(222,226,45)" fg:x="27384" fg:w="702"/><text x="55.1399%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="56.2530%" y="181" width="1.2818%" height="15" fill="rgb(213,166,37)" fg:x="28086" fg:w="640"/><text x="56.5460%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="57.5349%" y="181" width="1.2698%" height="15" fill="rgb(254,198,37)" fg:x="28726" fg:w="634"/><text x="57.8278%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="58.8047%" y="181" width="1.2698%" height="15" fill="rgb(238,203,45)" fg:x="29360" fg:w="634"/><text x="59.0976%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="60.0745%" y="181" width="1.2077%" height="15" fill="rgb(235,12,36)" fg:x="29994" fg:w="603"/><text x="60.3675%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="61.2822%" y="181" width="1.2818%" height="15" fill="rgb(208,3,42)" fg:x="30597" fg:w="640"/><text x="61.5752%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="62.5641%" y="181" width="1.2818%" height="15" fill="rgb(230,229,34)" fg:x="31237" fg:w="640"/><text x="62.8571%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="63.8459%" y="181" width="1.3439%" height="15" fill="rgb(247,165,13)" fg:x="31877" fg:w="671"/><text x="64.1389%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="65.1899%" y="181" width="1.2077%" height="15" fill="rgb(241,139,44)" fg:x="32548" fg:w="603"/><text x="65.4828%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="66.3976%" y="181" width="1.3439%" height="15" fill="rgb(224,195,4)" fg:x="33151" fg:w="671"/><text x="66.6906%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="67.7415%" y="181" width="1.2077%" height="15" fill="rgb(246,121,34)" fg:x="33822" fg:w="603"/><text x="68.0345%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="68.9493%" y="181" width="1.3439%" height="15" fill="rgb(251,151,32)" fg:x="34425" fg:w="671"/><text x="69.2423%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="70.2932%" y="181" width="1.2818%" height="15" fill="rgb(250,112,5)" fg:x="35096" fg:w="640"/><text x="70.5862%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="71.5751%" y="181" width="1.2818%" height="15" fill="rgb(233,30,35)" fg:x="35736" fg:w="640"/><text x="71.8680%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.47%)</title><rect x="72.8569%" y="181" width="1.4681%" height="15" fill="rgb(219,162,1)" fg:x="36376" fg:w="733"/><text x="73.1499%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="74.3250%" y="181" width="1.2818%" height="15" fill="rgb(239,210,38)" fg:x="37109" fg:w="640"/><text x="74.6180%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="75.6069%" y="181" width="1.2818%" height="15" fill="rgb(233,199,24)" fg:x="37749" fg:w="640"/><text x="75.8998%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="76.8887%" y="181" width="1.2818%" height="15" fill="rgb(208,91,5)" fg:x="38389" fg:w="640"/><text x="77.1817%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="78.1706%" y="181" width="1.2818%" height="15" fill="rgb(235,146,34)" fg:x="39029" fg:w="640"/><text x="78.4635%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="79.4524%" y="181" width="1.2818%" height="15" fill="rgb(250,130,26)" fg:x="39669" fg:w="640"/><text x="79.7454%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="80.7343%" y="181" width="1.2818%" height="15" fill="rgb(225,214,35)" fg:x="40309" fg:w="640"/><text x="81.0272%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="82.0161%" y="181" width="1.3439%" height="15" fill="rgb(249,12,43)" fg:x="40949" fg:w="671"/><text x="82.3091%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="83.3600%" y="181" width="1.2818%" height="15" fill="rgb(224,198,24)" fg:x="41620" fg:w="640"/><text x="83.6530%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="84.6419%" y="181" width="1.2698%" height="15" fill="rgb(206,180,6)" fg:x="42260" fg:w="634"/><text x="84.9349%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="85.9117%" y="181" width="1.2818%" height="15" fill="rgb(231,202,53)" fg:x="42894" fg:w="640"/><text x="86.2047%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="87.1936%" y="181" width="1.2818%" height="15" fill="rgb(245,20,23)" fg:x="43534" fg:w="640"/><text x="87.4865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="88.4754%" y="181" width="1.2818%" height="15" fill="rgb(249,2,9)" fg:x="44174" fg:w="640"/><text x="88.7684%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="89.7573%" y="181" width="1.2818%" height="15" fill="rgb(232,222,16)" fg:x="44814" fg:w="640"/><text x="90.0502%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="91.0391%" y="181" width="1.2698%" height="15" fill="rgb(248,92,29)" fg:x="45454" fg:w="634"/><text x="91.3321%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="92.3089%" y="149" width="0.0140%" height="15" fill="rgb(226,197,51)" fg:x="46088" fg:w="7"/><text x="92.6019%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="92.3229%" y="117" width="0.0541%" height="15" fill="rgb(242,20,43)" fg:x="46095" fg:w="27"/><text x="92.6159%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.23%)</title><rect x="92.3229%" y="133" width="0.2303%" height="15" fill="rgb(251,186,2)" fg:x="46095" fg:w="115"/><text x="92.6159%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 instructions, 0.30%)</title><rect x="92.3229%" y="149" width="0.3004%" height="15" fill="rgb(225,229,37)" fg:x="46095" fg:w="150"/><text x="92.6159%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.6234%" y="149" width="0.3044%" height="15" fill="rgb(212,4,33)" fg:x="46245" fg:w="152"/><text x="92.9163%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (480 instructions, 0.96%)</title><rect x="92.3089%" y="165" width="0.9614%" height="15" fill="rgb(223,136,21)" fg:x="46088" fg:w="480"/><text x="92.6019%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.2703%" y="149" width="1.0375%" height="15" fill="rgb(226,57,19)" fg:x="46568" fg:w="518"/><text x="93.5633%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.3078%" y="101" width="0.1662%" height="15" fill="rgb(207,144,14)" fg:x="47086" fg:w="83"/><text x="94.6008%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.3078%" y="117" width="0.2524%" height="15" fill="rgb(205,190,53)" fg:x="47086" fg:w="126"/><text x="94.6008%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.42%)</title><rect x="94.3078%" y="133" width="0.4166%" height="15" fill="rgb(215,137,49)" fg:x="47086" fg:w="208"/><text x="94.6008%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7244%" y="133" width="0.0300%" height="15" fill="rgb(250,84,52)" fg:x="47294" fg:w="15"/><text x="95.0174%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7544%" y="133" width="0.0300%" height="15" fill="rgb(234,128,8)" fg:x="47309" fg:w="15"/><text x="95.0474%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 0.85%)</title><rect x="94.3078%" y="149" width="0.8532%" height="15" fill="rgb(252,211,21)" fg:x="47086" fg:w="426"/><text x="94.6008%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.1610%" y="149" width="1.0335%" height="15" fill="rgb(207,101,44)" fg:x="47512" fg:w="516"/><text x="95.4540%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.1945%" y="149" width="0.0140%" height="15" fill="rgb(221,108,11)" fg:x="48028" fg:w="7"/><text x="96.4875%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 3.12%)</title><rect x="93.2703%" y="165" width="3.1245%" height="15" fill="rgb(216,0,50)" fg:x="46568" fg:w="1560"/><text x="93.5633%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.3948%" y="165" width="0.0140%" height="15" fill="rgb(240,201,40)" fg:x="48128" fg:w="7"/><text x="96.6878%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.4088%" y="165" width="0.1202%" height="15" fill="rgb(225,52,24)" fg:x="48135" fg:w="60"/><text x="96.7018%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,713 instructions, 5.43%)</title><rect x="92.3089%" y="181" width="5.4338%" height="15" fill="rgb(250,82,49)" fg:x="46088" fg:w="2713"/><text x="92.6019%" y="191.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_get::{{closure}} (49,204 instructions, 98.55%)</title><rect x="0.3805%" y="197" width="98.5499%" height="15" fill="rgb(250,86,48)" fg:x="190" fg:w="49204"/><text x="0.6735%" y="207.50">heap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.9305%" y="197" width="0.0280%" height="15" fill="rgb(232,140,0)" fg:x="49394" fg:w="14"/><text x="99.2234%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.1388%" y="181" width="0.0541%" height="15" fill="rgb(214,208,44)" fg:x="49498" fg:w="27"/><text x="99.4317%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.14%)</title><rect x="99.1928%" y="181" width="0.1382%" height="15" fill="rgb(232,132,46)" fg:x="49525" fg:w="69"/><text x="99.4858%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="99.3310%" y="181" width="0.1362%" height="15" fill="rgb(208,96,22)" fg:x="49594" fg:w="68"/><text x="99.6240%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (375 instructions, 0.75%)</title><rect x="98.9605%" y="197" width="0.7511%" height="15" fill="rgb(242,117,29)" fg:x="49409" fg:w="375"/><text x="99.2535%" y="207.50"></text></g><g><title>all (49,928 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,199,35)" fg:x="0" fg:w="49928"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (49,928 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,168,9)" fg:x="0" fg:w="49928"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>