<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="45955"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0413%" height="15" fill="rgb(249,32,21)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0413%" y="197" width="0.1654%" height="15" fill="rgb(222,186,3)" fg:x="19" fg:w="76"/><text x="0.3343%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2067%" y="197" width="0.1654%" height="15" fill="rgb(251,155,16)" fg:x="95" fg:w="76"/><text x="0.4997%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3721%" y="165" width="0.1654%" height="15" fill="rgb(224,222,14)" fg:x="171" fg:w="76"/><text x="0.6651%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="0.5375%" y="149" width="0.1545%" height="15" fill="rgb(220,77,27)" fg:x="247" fg:w="71"/><text x="0.8305%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="0.6920%" y="149" width="0.8704%" height="15" fill="rgb(243,38,36)" fg:x="318" fg:w="400"/><text x="0.9850%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="1.5624%" y="149" width="0.1850%" height="15" fill="rgb(234,60,29)" fg:x="718" fg:w="85"/><text x="1.8554%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.12%)</title><rect x="1.7474%" y="149" width="0.1219%" height="15" fill="rgb(249,93,26)" fg:x="803" fg:w="56"/><text x="2.0403%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.12%)</title><rect x="1.8692%" y="149" width="0.1219%" height="15" fill="rgb(212,208,38)" fg:x="859" fg:w="56"/><text x="2.1622%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.12%)</title><rect x="1.9911%" y="149" width="0.1219%" height="15" fill="rgb(217,146,50)" fg:x="915" fg:w="56"/><text x="2.2840%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.12%)</title><rect x="2.1129%" y="149" width="0.1219%" height="15" fill="rgb(210,126,32)" fg:x="971" fg:w="56"/><text x="2.4059%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="2.2348%" y="149" width="0.1545%" height="15" fill="rgb(219,217,3)" fg:x="1027" fg:w="71"/><text x="2.5278%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.15%)</title><rect x="2.3893%" y="149" width="0.1501%" height="15" fill="rgb(208,2,3)" fg:x="1098" fg:w="69"/><text x="2.6823%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="2.5394%" y="149" width="0.8704%" height="15" fill="rgb(220,70,45)" fg:x="1167" fg:w="400"/><text x="2.8324%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.4099%" y="149" width="0.0348%" height="15" fill="rgb(218,27,33)" fg:x="1567" fg:w="16"/><text x="3.7028%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.4447%" y="133" width="0.1654%" height="15" fill="rgb(241,20,6)" fg:x="1583" fg:w="76"/><text x="3.7376%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="3.6101%" y="101" width="0.1306%" height="15" fill="rgb(243,48,6)" fg:x="1659" fg:w="60"/><text x="3.9030%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.18%)</title><rect x="3.6101%" y="117" width="0.1850%" height="15" fill="rgb(246,6,10)" fg:x="1659" fg:w="85"/><text x="3.9030%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.7950%" y="69" width="0.0196%" height="15" fill="rgb(226,170,20)" fg:x="1744" fg:w="9"/><text x="4.0880%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.8146%" y="53" width="0.0653%" height="15" fill="rgb(214,189,0)" fg:x="1753" fg:w="30"/><text x="4.1076%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.8146%" y="69" width="0.1197%" height="15" fill="rgb(240,74,0)" fg:x="1753" fg:w="55"/><text x="4.1076%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="3.7950%" y="85" width="0.2568%" height="15" fill="rgb(208,113,52)" fg:x="1744" fg:w="118"/><text x="4.0880%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="3.7950%" y="101" width="0.3721%" height="15" fill="rgb(241,135,4)" fg:x="1744" fg:w="171"/><text x="4.0880%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="3.7950%" y="117" width="0.3830%" height="15" fill="rgb(229,138,3)" fg:x="1744" fg:w="176"/><text x="4.0880%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="3.6101%" y="133" width="0.8095%" height="15" fill="rgb(253,88,19)" fg:x="1659" fg:w="372"/><text x="3.9030%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="3.4447%" y="149" width="1.2926%" height="15" fill="rgb(207,181,23)" fg:x="1583" fg:w="594"/><text x="3.7376%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="4.7372%" y="149" width="0.1850%" height="15" fill="rgb(245,212,7)" fg:x="2177" fg:w="85"/><text x="5.0302%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="4.9222%" y="149" width="0.1197%" height="15" fill="rgb(209,164,24)" fg:x="2262" fg:w="55"/><text x="5.2152%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="5.0419%" y="149" width="0.1436%" height="15" fill="rgb(222,70,25)" fg:x="2317" fg:w="66"/><text x="5.3349%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.15%)</title><rect x="5.1855%" y="149" width="0.1501%" height="15" fill="rgb(227,91,53)" fg:x="2383" fg:w="69"/><text x="5.4785%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="5.3357%" y="133" width="0.8704%" height="15" fill="rgb(245,208,45)" fg:x="2452" fg:w="400"/><text x="5.6286%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.2061%" y="133" width="0.0348%" height="15" fill="rgb(247,1,5)" fg:x="2852" fg:w="16"/><text x="6.4990%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.2409%" y="117" width="0.1654%" height="15" fill="rgb(228,188,47)" fg:x="2868" fg:w="76"/><text x="6.5339%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="6.4063%" y="85" width="0.1306%" height="15" fill="rgb(251,223,38)" fg:x="2944" fg:w="60"/><text x="6.6992%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.18%)</title><rect x="6.4063%" y="101" width="0.1850%" height="15" fill="rgb(232,15,11)" fg:x="2944" fg:w="85"/><text x="6.6992%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.5912%" y="53" width="0.0196%" height="15" fill="rgb(246,176,11)" fg:x="3029" fg:w="9"/><text x="6.8842%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.6108%" y="37" width="0.0653%" height="15" fill="rgb(215,85,34)" fg:x="3038" fg:w="30"/><text x="6.9038%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.6108%" y="53" width="0.1197%" height="15" fill="rgb(241,155,41)" fg:x="3038" fg:w="55"/><text x="6.9038%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="6.5912%" y="69" width="0.2568%" height="15" fill="rgb(221,181,8)" fg:x="3029" fg:w="118"/><text x="6.8842%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="6.5912%" y="85" width="0.3721%" height="15" fill="rgb(231,136,30)" fg:x="3029" fg:w="171"/><text x="6.8842%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="6.5912%" y="101" width="0.3830%" height="15" fill="rgb(241,198,27)" fg:x="3029" fg:w="176"/><text x="6.8842%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="6.4063%" y="117" width="0.8095%" height="15" fill="rgb(210,83,39)" fg:x="2944" fg:w="372"/><text x="6.6992%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="6.2409%" y="133" width="1.2926%" height="15" fill="rgb(217,88,30)" fg:x="2868" fg:w="594"/><text x="6.5339%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="7.5335%" y="133" width="0.1850%" height="15" fill="rgb(247,196,11)" fg:x="3462" fg:w="85"/><text x="7.8264%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.7184%" y="133" width="0.1197%" height="15" fill="rgb(247,12,24)" fg:x="3547" fg:w="55"/><text x="8.0114%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="7.8381%" y="117" width="0.1545%" height="15" fill="rgb(245,4,51)" fg:x="3602" fg:w="71"/><text x="8.1311%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.21%)</title><rect x="7.9926%" y="117" width="0.2067%" height="15" fill="rgb(220,29,3)" fg:x="3673" fg:w="95"/><text x="8.2856%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="8.1993%" y="117" width="0.1436%" height="15" fill="rgb(213,19,20)" fg:x="3768" fg:w="66"/><text x="8.4923%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.62%)</title><rect x="7.8381%" y="133" width="0.6158%" height="15" fill="rgb(235,155,32)" fg:x="3602" fg:w="283"/><text x="8.1311%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="8.4539%" y="133" width="0.1654%" height="15" fill="rgb(239,55,50)" fg:x="3885" fg:w="76"/><text x="8.7469%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,678 instructions, 3.65%)</title><rect x="5.3357%" y="149" width="3.6514%" height="15" fill="rgb(213,171,4)" fg:x="2452" fg:w="1678"/><text x="5.6286%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="8.9871%" y="149" width="0.1436%" height="15" fill="rgb(242,21,39)" fg:x="4130" fg:w="66"/><text x="9.2800%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1307%" y="149" width="0.0283%" height="15" fill="rgb(208,33,48)" fg:x="4196" fg:w="13"/><text x="9.4236%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1590%" y="149" width="0.0283%" height="15" fill="rgb(238,183,42)" fg:x="4209" fg:w="13"/><text x="9.4519%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.1872%" y="149" width="0.0152%" height="15" fill="rgb(240,72,38)" fg:x="4222" fg:w="7"/><text x="9.4802%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="9.2025%" y="149" width="0.0261%" height="15" fill="rgb(215,198,1)" fg:x="4229" fg:w="12"/><text x="9.4954%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.2286%" y="133" width="0.1654%" height="15" fill="rgb(218,173,28)" fg:x="4241" fg:w="76"/><text x="9.5216%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.35%)</title><rect x="9.2286%" y="149" width="0.3460%" height="15" fill="rgb(233,37,3)" fg:x="4241" fg:w="159"/><text x="9.5216%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.5746%" y="117" width="0.1654%" height="15" fill="rgb(228,35,35)" fg:x="4400" fg:w="76"/><text x="9.8676%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="9.5746%" y="133" width="0.2502%" height="15" fill="rgb(223,136,54)" fg:x="4400" fg:w="115"/><text x="9.8676%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (187 instructions, 0.41%)</title><rect x="9.5746%" y="149" width="0.4069%" height="15" fill="rgb(247,57,35)" fg:x="4400" fg:w="187"/><text x="9.8676%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.9815%" y="149" width="0.1654%" height="15" fill="rgb(227,5,17)" fg:x="4587" fg:w="76"/><text x="10.2745%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.1469%" y="149" width="0.1763%" height="15" fill="rgb(227,53,32)" fg:x="4663" fg:w="81"/><text x="10.4399%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.3231%" y="149" width="0.1654%" height="15" fill="rgb(248,111,3)" fg:x="4744" fg:w="76"/><text x="10.6161%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.4885%" y="149" width="0.1654%" height="15" fill="rgb(236,229,12)" fg:x="4820" fg:w="76"/><text x="10.7815%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.6583%" y="149" width="0.1763%" height="15" fill="rgb(222,197,9)" fg:x="4898" fg:w="81"/><text x="10.9512%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="10.8345%" y="149" width="0.8291%" height="15" fill="rgb(244,132,36)" fg:x="4979" fg:w="381"/><text x="11.1275%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="11.6636%" y="149" width="0.8291%" height="15" fill="rgb(247,167,31)" fg:x="5360" fg:w="381"/><text x="11.9566%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,397 instructions, 13.92%)</title><rect x="0.5375%" y="165" width="13.9201%" height="15" fill="rgb(250,5,44)" fg:x="247" fg:w="6397"/><text x="0.8305%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (336 instructions, 0.73%)</title><rect x="14.4576%" y="165" width="0.7312%" height="15" fill="rgb(227,219,11)" fg:x="6644" fg:w="336"/><text x="14.7506%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.1888%" y="149" width="0.0109%" height="15" fill="rgb(230,169,46)" fg:x="6980" fg:w="5"/><text x="15.4817%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="15.1888%" y="165" width="0.0849%" height="15" fill="rgb(210,117,1)" fg:x="6980" fg:w="39"/><text x="15.4817%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.16%)</title><rect x="15.2736%" y="165" width="0.1589%" height="15" fill="rgb(254,104,15)" fg:x="7019" fg:w="73"/><text x="15.5666%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.4325%" y="149" width="0.0109%" height="15" fill="rgb(230,88,10)" fg:x="7092" fg:w="5"/><text x="15.7255%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="15.4434%" y="133" width="0.1153%" height="15" fill="rgb(244,45,39)" fg:x="7097" fg:w="53"/><text x="15.7363%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="15.5587%" y="133" width="0.1937%" height="15" fill="rgb(240,221,46)" fg:x="7150" fg:w="89"/><text x="15.8517%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="15.7524%" y="133" width="0.3503%" height="15" fill="rgb(211,199,52)" fg:x="7239" fg:w="161"/><text x="16.0453%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="15.4434%" y="149" width="1.1751%" height="15" fill="rgb(209,67,46)" fg:x="7097" fg:w="540"/><text x="15.7363%" y="159.50"></text></g><g><title>candid::types::internal::env_add (759 instructions, 1.65%)</title><rect x="15.4325%" y="165" width="1.6516%" height="15" fill="rgb(217,18,15)" fg:x="7092" fg:w="759"/><text x="15.7255%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (161 instructions, 0.35%)</title><rect x="17.0841%" y="165" width="0.3503%" height="15" fill="rgb(215,61,54)" fg:x="7851" fg:w="161"/><text x="17.3771%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.4344%" y="149" width="0.0109%" height="15" fill="rgb(252,157,1)" fg:x="8012" fg:w="5"/><text x="17.7274%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="17.4453%" y="133" width="0.1153%" height="15" fill="rgb(243,142,4)" fg:x="8017" fg:w="53"/><text x="17.7383%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="17.5607%" y="133" width="0.1937%" height="15" fill="rgb(254,56,24)" fg:x="8070" fg:w="89"/><text x="17.8536%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="17.7543%" y="133" width="0.3503%" height="15" fill="rgb(205,97,37)" fg:x="8159" fg:w="161"/><text x="18.0473%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="17.4453%" y="149" width="1.1751%" height="15" fill="rgb(224,79,1)" fg:x="8017" fg:w="540"/><text x="17.7383%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="18.6204%" y="149" width="0.1480%" height="15" fill="rgb(238,2,4)" fg:x="8557" fg:w="68"/><text x="18.9134%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="18.7684%" y="133" width="0.1763%" height="15" fill="rgb(230,102,4)" fg:x="8625" fg:w="81"/><text x="19.0613%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.24%)</title><rect x="18.7684%" y="149" width="0.2415%" height="15" fill="rgb(213,67,19)" fg:x="8625" fg:w="111"/><text x="19.0613%" y="159.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 1.94%)</title><rect x="17.4344%" y="165" width="1.9432%" height="15" fill="rgb(254,137,17)" fg:x="8012" fg:w="893"/><text x="17.7274%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="19.3777%" y="117" width="0.1153%" height="15" fill="rgb(241,71,47)" fg:x="8905" fg:w="53"/><text x="19.6706%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.17%)</title><rect x="19.3777%" y="133" width="0.1719%" height="15" fill="rgb(227,53,11)" fg:x="8905" fg:w="79"/><text x="19.6706%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.64%)</title><rect x="19.3777%" y="149" width="0.6354%" height="15" fill="rgb(247,60,0)" fg:x="8905" fg:w="292"/><text x="19.6706%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.196 (15 instructions, 0.03%)</title><rect x="20.0131%" y="149" width="0.0326%" height="15" fill="rgb(245,128,43)" fg:x="9197" fg:w="15"/><text x="20.3060%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.0457%" y="149" width="0.0239%" height="15" fill="rgb(254,111,16)" fg:x="9212" fg:w="11"/><text x="20.3387%" y="159.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 1.04%)</title><rect x="19.3777%" y="165" width="1.0423%" height="15" fill="rgb(243,222,36)" fg:x="8905" fg:w="479"/><text x="19.6706%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.07%)</title><rect x="20.4200%" y="165" width="0.0718%" height="15" fill="rgb(208,222,20)" fg:x="9384" fg:w="33"/><text x="20.7129%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.27%)</title><rect x="20.4918%" y="149" width="0.2698%" height="15" fill="rgb(234,69,8)" fg:x="9417" fg:w="124"/><text x="20.7848%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.27%)</title><rect x="20.8269%" y="149" width="0.2698%" height="15" fill="rgb(236,178,54)" fg:x="9571" fg:w="124"/><text x="21.1199%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 0.67%)</title><rect x="20.4918%" y="165" width="0.6702%" height="15" fill="rgb(244,188,38)" fg:x="9417" fg:w="308"/><text x="20.7848%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (83 instructions, 0.18%)</title><rect x="21.1620%" y="165" width="0.1806%" height="15" fill="rgb(215,71,18)" fg:x="9725" fg:w="83"/><text x="21.4550%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.3426%" y="165" width="0.0239%" height="15" fill="rgb(224,27,49)" fg:x="9808" fg:w="11"/><text x="21.6356%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.3666%" y="165" width="0.0239%" height="15" fill="rgb(242,65,32)" fg:x="9819" fg:w="11"/><text x="21.6595%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.3905%" y="165" width="0.0239%" height="15" fill="rgb(240,2,7)" fg:x="9830" fg:w="11"/><text x="21.6835%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.89%)</title><rect x="21.4144%" y="165" width="0.8944%" height="15" fill="rgb(215,51,41)" fg:x="9841" fg:w="411"/><text x="21.7074%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="22.3088%" y="149" width="0.0109%" height="15" fill="rgb(213,114,51)" fg:x="10252" fg:w="5"/><text x="22.6017%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (170 instructions, 0.37%)</title><rect x="22.3197%" y="149" width="0.3699%" height="15" fill="rgb(236,175,29)" fg:x="10257" fg:w="170"/><text x="22.6126%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="22.6896%" y="117" width="0.1371%" height="15" fill="rgb(252,5,32)" fg:x="10427" fg:w="63"/><text x="22.9826%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (211 instructions, 0.46%)</title><rect x="22.6896%" y="133" width="0.4591%" height="15" fill="rgb(243,5,26)" fg:x="10427" fg:w="211"/><text x="22.9826%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (241 instructions, 0.52%)</title><rect x="22.6896%" y="149" width="0.5244%" height="15" fill="rgb(247,138,42)" fg:x="10427" fg:w="241"/><text x="22.9826%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.2140%" y="149" width="0.0239%" height="15" fill="rgb(230,91,16)" fg:x="10668" fg:w="11"/><text x="23.5070%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (494 instructions, 1.07%)</title><rect x="22.3088%" y="165" width="1.0750%" height="15" fill="rgb(237,190,4)" fg:x="10252" fg:w="494"/><text x="22.6017%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="23.3837%" y="149" width="0.1371%" height="15" fill="rgb(210,139,11)" fg:x="10746" fg:w="63"/><text x="23.6767%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.43%)</title><rect x="23.3837%" y="165" width="0.4287%" height="15" fill="rgb(234,64,18)" fg:x="10746" fg:w="197"/><text x="23.6767%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,164 instructions, 24.29%)</title><rect x="0.3721%" y="181" width="24.2933%" height="15" fill="rgb(228,186,7)" fg:x="171" fg:w="11164"/><text x="0.6651%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="24.6654%" y="149" width="0.0109%" height="15" fill="rgb(214,206,17)" fg:x="11335" fg:w="5"/><text x="24.9584%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="24.6763%" y="133" width="0.1197%" height="15" fill="rgb(254,7,13)" fg:x="11340" fg:w="55"/><text x="24.9693%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (85 instructions, 0.18%)</title><rect x="24.6763%" y="149" width="0.1850%" height="15" fill="rgb(207,21,18)" fg:x="11340" fg:w="85"/><text x="24.9693%" y="159.50"></text></g><g><title>memset (136 instructions, 0.30%)</title><rect x="24.8613%" y="149" width="0.2959%" height="15" fill="rgb(226,47,47)" fg:x="11425" fg:w="136"/><text x="25.1542%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (385 instructions, 0.84%)</title><rect x="24.6654%" y="165" width="0.8378%" height="15" fill="rgb(215,39,5)" fg:x="11335" fg:w="385"/><text x="24.9584%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="25.5032%" y="149" width="0.0696%" height="15" fill="rgb(219,43,5)" fg:x="11720" fg:w="32"/><text x="25.7962%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="25.5728%" y="117" width="0.1654%" height="15" fill="rgb(216,12,8)" fg:x="11752" fg:w="76"/><text x="25.8658%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="25.5728%" y="133" width="0.2502%" height="15" fill="rgb(212,28,34)" fg:x="11752" fg:w="115"/><text x="25.8658%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (184 instructions, 0.40%)</title><rect x="25.5728%" y="149" width="0.4004%" height="15" fill="rgb(241,132,21)" fg:x="11752" fg:w="184"/><text x="25.8658%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="25.9732%" y="149" width="0.0239%" height="15" fill="rgb(222,189,14)" fg:x="11936" fg:w="11"/><text x="26.2662%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="25.9972%" y="149" width="0.0239%" height="15" fill="rgb(237,60,46)" fg:x="11947" fg:w="11"/><text x="26.2901%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="26.0211%" y="149" width="0.0653%" height="15" fill="rgb(236,6,48)" fg:x="11958" fg:w="30"/><text x="26.3141%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="26.0864%" y="149" width="0.0109%" height="15" fill="rgb(208,213,39)" fg:x="11988" fg:w="5"/><text x="26.3794%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (480 instructions, 1.04%)</title><rect x="25.5032%" y="165" width="1.0445%" height="15" fill="rgb(239,115,17)" fg:x="11720" fg:w="480"/><text x="25.7962%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="26.5477%" y="165" width="0.0109%" height="15" fill="rgb(214,119,12)" fg:x="12200" fg:w="5"/><text x="26.8407%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="26.5586%" y="165" width="0.1197%" height="15" fill="rgb(224,91,2)" fg:x="12205" fg:w="55"/><text x="26.8516%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (999 instructions, 2.17%)</title><rect x="24.6654%" y="181" width="2.1739%" height="15" fill="rgb(223,56,17)" fg:x="11335" fg:w="999"/><text x="24.9584%" y="191.50">i..</text></g><g><title>heap::batch_get_2_::{{closure}} (45,345 instructions, 98.67%)</title><rect x="0.3721%" y="197" width="98.6726%" height="15" fill="rgb(231,144,0)" fg:x="171" fg:w="45345"/><text x="0.6651%" y="207.50">heap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.0447%" y="197" width="0.0261%" height="15" fill="rgb(232,128,45)" fg:x="45516" fg:w="12"/><text x="99.3377%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="99.2471%" y="181" width="0.1371%" height="15" fill="rgb(252,169,21)" fg:x="45609" fg:w="63"/><text x="99.5401%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (324 instructions, 0.71%)</title><rect x="99.0708%" y="197" width="0.7050%" height="15" fill="rgb(208,105,28)" fg:x="45528" fg:w="324"/><text x="99.3638%" y="207.50"></text></g><g><title>all (45,955 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,138,46)" fg:x="0" fg:w="45955"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (45,955 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,4,3)" fg:x="0" fg:w="45955"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>