<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="45761"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0415%" height="15" fill="rgb(235,11,53)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0415%" y="197" width="0.1661%" height="15" fill="rgb(239,33,33)" fg:x="19" fg:w="76"/><text x="0.3345%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2076%" y="197" width="0.1661%" height="15" fill="rgb(238,214,10)" fg:x="95" fg:w="76"/><text x="0.5006%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3737%" y="165" width="0.1661%" height="15" fill="rgb(206,228,18)" fg:x="171" fg:w="76"/><text x="0.6666%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="0.5398%" y="149" width="0.1508%" height="15" fill="rgb(250,8,6)" fg:x="247" fg:w="69"/><text x="0.8327%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="0.6905%" y="149" width="0.8872%" height="15" fill="rgb(228,56,21)" fg:x="316" fg:w="406"/><text x="0.9835%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="1.5778%" y="149" width="0.1792%" height="15" fill="rgb(228,226,26)" fg:x="722" fg:w="82"/><text x="1.8707%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.7570%" y="149" width="0.1180%" height="15" fill="rgb(228,111,8)" fg:x="804" fg:w="54"/><text x="2.0499%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8750%" y="149" width="0.1180%" height="15" fill="rgb(209,178,17)" fg:x="858" fg:w="54"/><text x="2.1679%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9930%" y="149" width="0.1180%" height="15" fill="rgb(251,32,22)" fg:x="912" fg:w="54"/><text x="2.2859%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.1110%" y="149" width="0.1180%" height="15" fill="rgb(239,90,17)" fg:x="966" fg:w="54"/><text x="2.4039%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="2.2290%" y="149" width="0.1508%" height="15" fill="rgb(236,206,16)" fg:x="1020" fg:w="69"/><text x="2.5219%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="2.3798%" y="149" width="0.1420%" height="15" fill="rgb(215,141,0)" fg:x="1089" fg:w="65"/><text x="2.6727%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="2.5218%" y="149" width="0.8872%" height="15" fill="rgb(237,185,38)" fg:x="1154" fg:w="406"/><text x="2.8148%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.4090%" y="149" width="0.0350%" height="15" fill="rgb(227,112,28)" fg:x="1560" fg:w="16"/><text x="3.7020%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.4440%" y="133" width="0.1661%" height="15" fill="rgb(223,18,4)" fg:x="1576" fg:w="76"/><text x="3.7369%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="3.6101%" y="101" width="0.1311%" height="15" fill="rgb(216,84,53)" fg:x="1652" fg:w="60"/><text x="3.9030%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="3.6101%" y="117" width="0.1857%" height="15" fill="rgb(237,144,42)" fg:x="1652" fg:w="85"/><text x="3.9030%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.7958%" y="69" width="0.0197%" height="15" fill="rgb(238,181,32)" fg:x="1737" fg:w="9"/><text x="4.0888%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.8155%" y="53" width="0.0656%" height="15" fill="rgb(248,133,52)" fg:x="1746" fg:w="30"/><text x="4.1084%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.8155%" y="69" width="0.1202%" height="15" fill="rgb(241,118,23)" fg:x="1746" fg:w="55"/><text x="4.1084%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="3.7958%" y="85" width="0.2579%" height="15" fill="rgb(219,170,43)" fg:x="1737" fg:w="118"/><text x="4.0888%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="3.7958%" y="101" width="0.3737%" height="15" fill="rgb(235,200,29)" fg:x="1737" fg:w="171"/><text x="4.0888%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="3.7958%" y="117" width="0.3846%" height="15" fill="rgb(235,109,54)" fg:x="1737" fg:w="176"/><text x="4.0888%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="3.6101%" y="133" width="0.8129%" height="15" fill="rgb(249,71,32)" fg:x="1652" fg:w="372"/><text x="3.9030%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.29%)</title><rect x="3.4440%" y="149" width="1.2871%" height="15" fill="rgb(250,175,29)" fg:x="1576" fg:w="589"/><text x="3.7369%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="4.7311%" y="149" width="0.1792%" height="15" fill="rgb(249,65,45)" fg:x="2165" fg:w="82"/><text x="5.0241%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="4.9103%" y="149" width="0.1202%" height="15" fill="rgb(215,33,37)" fg:x="2247" fg:w="55"/><text x="5.2033%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="5.0305%" y="149" width="0.1377%" height="15" fill="rgb(253,18,8)" fg:x="2302" fg:w="63"/><text x="5.3235%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="5.1682%" y="149" width="0.1420%" height="15" fill="rgb(212,89,25)" fg:x="2365" fg:w="65"/><text x="5.4611%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="5.3102%" y="133" width="0.8872%" height="15" fill="rgb(212,208,3)" fg:x="2430" fg:w="406"/><text x="5.6032%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.1974%" y="133" width="0.0350%" height="15" fill="rgb(238,200,24)" fg:x="2836" fg:w="16"/><text x="6.4904%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.2324%" y="117" width="0.1661%" height="15" fill="rgb(247,208,27)" fg:x="2852" fg:w="76"/><text x="6.5254%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="6.3985%" y="85" width="0.1311%" height="15" fill="rgb(238,141,25)" fg:x="2928" fg:w="60"/><text x="6.6914%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="6.3985%" y="101" width="0.1857%" height="15" fill="rgb(223,40,45)" fg:x="2928" fg:w="85"/><text x="6.6914%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.5842%" y="53" width="0.0197%" height="15" fill="rgb(251,91,42)" fg:x="3013" fg:w="9"/><text x="6.8772%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.6039%" y="37" width="0.0656%" height="15" fill="rgb(253,227,16)" fg:x="3022" fg:w="30"/><text x="6.8968%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.6039%" y="53" width="0.1202%" height="15" fill="rgb(219,141,43)" fg:x="3022" fg:w="55"/><text x="6.8968%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="6.5842%" y="69" width="0.2579%" height="15" fill="rgb(250,106,48)" fg:x="3013" fg:w="118"/><text x="6.8772%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="6.5842%" y="85" width="0.3737%" height="15" fill="rgb(239,102,41)" fg:x="3013" fg:w="171"/><text x="6.8772%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="6.5842%" y="101" width="0.3846%" height="15" fill="rgb(216,125,42)" fg:x="3013" fg:w="176"/><text x="6.8772%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="6.3985%" y="117" width="0.8129%" height="15" fill="rgb(215,169,29)" fg:x="2928" fg:w="372"/><text x="6.6914%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.29%)</title><rect x="6.2324%" y="133" width="1.2871%" height="15" fill="rgb(233,154,51)" fg:x="2852" fg:w="589"/><text x="6.5254%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="7.5195%" y="133" width="0.1792%" height="15" fill="rgb(223,4,51)" fg:x="3441" fg:w="82"/><text x="7.8125%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.6987%" y="133" width="0.1202%" height="15" fill="rgb(207,100,42)" fg:x="3523" fg:w="55"/><text x="7.9917%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="7.8189%" y="117" width="0.1508%" height="15" fill="rgb(223,126,0)" fg:x="3578" fg:w="69"/><text x="8.1119%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.20%)</title><rect x="7.9697%" y="117" width="0.1989%" height="15" fill="rgb(240,84,36)" fg:x="3647" fg:w="91"/><text x="8.2626%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="8.1685%" y="117" width="0.1377%" height="15" fill="rgb(236,79,32)" fg:x="3738" fg:w="63"/><text x="8.4615%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.62%)</title><rect x="7.8189%" y="133" width="0.6162%" height="15" fill="rgb(244,17,9)" fg:x="3578" fg:w="282"/><text x="8.1119%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.17%)</title><rect x="8.4351%" y="133" width="0.1705%" height="15" fill="rgb(235,207,17)" fg:x="3860" fg:w="78"/><text x="8.7281%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 3.74%)</title><rect x="5.3102%" y="149" width="3.7390%" height="15" fill="rgb(252,210,24)" fg:x="2430" fg:w="1711"/><text x="5.6032%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="9.0492%" y="149" width="0.1377%" height="15" fill="rgb(222,219,6)" fg:x="4141" fg:w="63"/><text x="9.3422%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1869%" y="149" width="0.0284%" height="15" fill="rgb(215,106,51)" fg:x="4204" fg:w="13"/><text x="9.4798%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.2153%" y="149" width="0.0284%" height="15" fill="rgb(233,223,11)" fg:x="4217" fg:w="13"/><text x="9.5082%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.2437%" y="149" width="0.0153%" height="15" fill="rgb(223,192,31)" fg:x="4230" fg:w="7"/><text x="9.5366%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.2590%" y="149" width="0.0328%" height="15" fill="rgb(215,210,4)" fg:x="4237" fg:w="15"/><text x="9.5519%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.2918%" y="133" width="0.1661%" height="15" fill="rgb(214,202,49)" fg:x="4252" fg:w="76"/><text x="9.5847%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.35%)</title><rect x="9.2918%" y="149" width="0.3475%" height="15" fill="rgb(228,108,53)" fg:x="4252" fg:w="159"/><text x="9.5847%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.6392%" y="117" width="0.1661%" height="15" fill="rgb(232,207,52)" fg:x="4411" fg:w="76"/><text x="9.9322%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.24%)</title><rect x="9.6392%" y="133" width="0.2404%" height="15" fill="rgb(240,206,36)" fg:x="4411" fg:w="110"/><text x="9.9322%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.39%)</title><rect x="9.6392%" y="149" width="0.3890%" height="15" fill="rgb(243,193,7)" fg:x="4411" fg:w="178"/><text x="9.9322%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.0282%" y="149" width="0.1661%" height="15" fill="rgb(244,71,21)" fg:x="4589" fg:w="76"/><text x="10.3212%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.1943%" y="149" width="0.1770%" height="15" fill="rgb(211,157,38)" fg:x="4665" fg:w="81"/><text x="10.4872%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.3713%" y="149" width="0.1661%" height="15" fill="rgb(233,125,12)" fg:x="4746" fg:w="76"/><text x="10.6642%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.5374%" y="149" width="0.1661%" height="15" fill="rgb(251,199,31)" fg:x="4822" fg:w="76"/><text x="10.8303%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.7078%" y="149" width="0.1770%" height="15" fill="rgb(243,190,37)" fg:x="4900" fg:w="81"/><text x="11.0008%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.87%)</title><rect x="10.8848%" y="149" width="0.8719%" height="15" fill="rgb(238,169,48)" fg:x="4981" fg:w="399"/><text x="11.1778%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.87%)</title><rect x="11.7567%" y="149" width="0.8719%" height="15" fill="rgb(226,103,8)" fg:x="5380" fg:w="399"/><text x="12.0497%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 14.11%)</title><rect x="0.5398%" y="165" width="14.1146%" height="15" fill="rgb(212,150,1)" fg:x="247" fg:w="6459"/><text x="0.8327%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (354 instructions, 0.77%)</title><rect x="14.6544%" y="165" width="0.7736%" height="15" fill="rgb(206,119,11)" fg:x="6706" fg:w="354"/><text x="14.9474%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.4280%" y="149" width="0.0109%" height="15" fill="rgb(231,97,5)" fg:x="7060" fg:w="5"/><text x="15.7210%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.09%)</title><rect x="15.4280%" y="165" width="0.0852%" height="15" fill="rgb(235,110,13)" fg:x="7060" fg:w="39"/><text x="15.7210%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="15.5132%" y="149" width="0.1202%" height="15" fill="rgb(248,156,22)" fg:x="7099" fg:w="55"/><text x="15.8062%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (200 instructions, 0.44%)</title><rect x="15.5132%" y="165" width="0.4371%" height="15" fill="rgb(219,108,25)" fg:x="7099" fg:w="200"/><text x="15.8062%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.9503%" y="149" width="0.0109%" height="15" fill="rgb(230,18,38)" fg:x="7299" fg:w="5"/><text x="16.2432%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="15.9612%" y="133" width="0.1158%" height="15" fill="rgb(250,193,54)" fg:x="7304" fg:w="53"/><text x="16.2542%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.19%)</title><rect x="16.0770%" y="133" width="0.1923%" height="15" fill="rgb(242,151,2)" fg:x="7357" fg:w="88"/><text x="16.3700%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.35%)</title><rect x="16.2693%" y="133" width="0.3540%" height="15" fill="rgb(254,193,27)" fg:x="7445" fg:w="162"/><text x="16.5623%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="15.9612%" y="149" width="1.1800%" height="15" fill="rgb(238,95,19)" fg:x="7304" fg:w="540"/><text x="16.2542%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.64%)</title><rect x="15.9503%" y="165" width="1.6368%" height="15" fill="rgb(242,208,32)" fg:x="7299" fg:w="749"/><text x="16.2432%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="17.5870%" y="165" width="0.1661%" height="15" fill="rgb(229,155,9)" fg:x="8048" fg:w="76"/><text x="17.8800%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.7531%" y="149" width="0.0109%" height="15" fill="rgb(207,69,26)" fg:x="8124" fg:w="5"/><text x="18.0461%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="17.7640%" y="133" width="0.1158%" height="15" fill="rgb(235,74,40)" fg:x="8129" fg:w="53"/><text x="18.0570%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.19%)</title><rect x="17.8799%" y="133" width="0.1923%" height="15" fill="rgb(247,43,19)" fg:x="8182" fg:w="88"/><text x="18.1728%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.35%)</title><rect x="18.0722%" y="133" width="0.3540%" height="15" fill="rgb(238,24,7)" fg:x="8270" fg:w="162"/><text x="18.3651%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="17.7640%" y="149" width="1.1800%" height="15" fill="rgb(216,48,46)" fg:x="8129" fg:w="540"/><text x="18.0570%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="18.9441%" y="149" width="0.1486%" height="15" fill="rgb(219,173,51)" fg:x="8669" fg:w="68"/><text x="19.2370%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="19.0927%" y="133" width="0.1770%" height="15" fill="rgb(249,197,11)" fg:x="8737" fg:w="81"/><text x="19.3856%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.24%)</title><rect x="19.0927%" y="149" width="0.2360%" height="15" fill="rgb(220,51,21)" fg:x="8737" fg:w="108"/><text x="19.3856%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.94%)</title><rect x="17.7531%" y="165" width="1.9449%" height="15" fill="rgb(248,13,14)" fg:x="8124" fg:w="890"/><text x="18.0461%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="19.6980%" y="117" width="0.1158%" height="15" fill="rgb(238,208,13)" fg:x="9014" fg:w="53"/><text x="19.9910%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.17%)</title><rect x="19.6980%" y="133" width="0.1705%" height="15" fill="rgb(210,50,43)" fg:x="9014" fg:w="78"/><text x="19.9910%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.64%)</title><rect x="19.6980%" y="149" width="0.6403%" height="15" fill="rgb(206,48,27)" fg:x="9014" fg:w="293"/><text x="19.9910%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1318 (15 instructions, 0.03%)</title><rect x="20.3383%" y="149" width="0.0328%" height="15" fill="rgb(240,177,40)" fg:x="9307" fg:w="15"/><text x="20.6312%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.3711%" y="149" width="0.0240%" height="15" fill="rgb(219,23,51)" fg:x="9322" fg:w="11"/><text x="20.6640%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.04%)</title><rect x="19.6980%" y="165" width="1.0446%" height="15" fill="rgb(242,226,12)" fg:x="9014" fg:w="478"/><text x="19.9910%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.10%)</title><rect x="20.7426%" y="165" width="0.1027%" height="15" fill="rgb(241,71,32)" fg:x="9492" fg:w="47"/><text x="21.0355%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.26%)</title><rect x="20.8453%" y="149" width="0.2622%" height="15" fill="rgb(226,67,15)" fg:x="9539" fg:w="120"/><text x="21.1382%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="21.1665%" y="149" width="0.2688%" height="15" fill="rgb(237,221,8)" fg:x="9686" fg:w="123"/><text x="21.4595%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 0.65%)</title><rect x="20.8453%" y="165" width="0.6490%" height="15" fill="rgb(253,206,43)" fg:x="9539" fg:w="297"/><text x="21.1382%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="21.4943%" y="149" width="0.0612%" height="15" fill="rgb(236,197,13)" fg:x="9836" fg:w="28"/><text x="21.7873%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="21.5555%" y="149" width="0.0328%" height="15" fill="rgb(254,223,3)" fg:x="9864" fg:w="15"/><text x="21.8484%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="21.5883%" y="149" width="0.0328%" height="15" fill="rgb(219,74,18)" fg:x="9879" fg:w="15"/><text x="21.8812%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.30%)</title><rect x="21.4943%" y="165" width="0.2950%" height="15" fill="rgb(227,47,41)" fg:x="9836" fg:w="135"/><text x="21.7873%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.7893%" y="165" width="0.0240%" height="15" fill="rgb(229,4,25)" fg:x="9971" fg:w="11"/><text x="22.0823%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.8133%" y="165" width="0.0240%" height="15" fill="rgb(208,111,48)" fg:x="9982" fg:w="11"/><text x="22.1063%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.8374%" y="165" width="0.0240%" height="15" fill="rgb(238,28,27)" fg:x="9993" fg:w="11"/><text x="22.1303%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.90%)</title><rect x="21.8614%" y="165" width="0.8960%" height="15" fill="rgb(223,65,47)" fg:x="10004" fg:w="410"/><text x="22.1544%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="22.7574%" y="133" width="0.0262%" height="15" fill="rgb(215,220,53)" fg:x="10414" fg:w="12"/><text x="23.0503%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.37%)</title><rect x="22.7836%" y="133" width="0.3671%" height="15" fill="rgb(252,136,38)" fg:x="10426" fg:w="168"/><text x="23.0766%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="23.1507%" y="101" width="0.1377%" height="15" fill="rgb(253,211,40)" fg:x="10594" fg:w="63"/><text x="23.4437%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.36%)</title><rect x="23.1507%" y="117" width="0.3562%" height="15" fill="rgb(226,77,21)" fg:x="10594" fg:w="163"/><text x="23.4437%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.42%)</title><rect x="23.1507%" y="133" width="0.4152%" height="15" fill="rgb(250,42,12)" fg:x="10594" fg:w="190"/><text x="23.4437%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5659%" y="133" width="0.0240%" height="15" fill="rgb(207,216,8)" fg:x="10784" fg:w="11"/><text x="23.8589%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (421 instructions, 0.92%)</title><rect x="22.7574%" y="149" width="0.9200%" height="15" fill="rgb(249,142,1)" fg:x="10414" fg:w="421"/><text x="23.0503%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (459 instructions, 1.00%)</title><rect x="22.7574%" y="165" width="1.0030%" height="15" fill="rgb(224,203,34)" fg:x="10414" fg:w="459"/><text x="23.0503%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="23.7604%" y="149" width="0.1202%" height="15" fill="rgb(244,126,23)" fg:x="10873" fg:w="55"/><text x="24.0534%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="23.8806%" y="149" width="0.1377%" height="15" fill="rgb(217,103,32)" fg:x="10928" fg:w="63"/><text x="24.1736%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.43%)</title><rect x="23.7604%" y="165" width="0.4349%" height="15" fill="rgb(242,212,1)" fg:x="10873" fg:w="199"/><text x="24.0534%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,294 instructions, 24.68%)</title><rect x="0.3737%" y="181" width="24.6804%" height="15" fill="rgb(240,65,21)" fg:x="171" fg:w="11294"/><text x="0.6666%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="25.0541%" y="181" width="1.4161%" height="15" fill="rgb(213,97,53)" fg:x="11465" fg:w="648"/><text x="25.3471%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (668 instructions, 1.46%)</title><rect x="26.4701%" y="181" width="1.4598%" height="15" fill="rgb(234,65,5)" fg:x="12113" fg:w="668"/><text x="26.7631%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="27.9299%" y="181" width="1.4161%" height="15" fill="rgb(250,62,36)" fg:x="12781" fg:w="648"/><text x="28.2229%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="29.3459%" y="181" width="1.4161%" height="15" fill="rgb(225,169,3)" fg:x="13429" fg:w="648"/><text x="29.6389%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="30.7620%" y="181" width="1.4161%" height="15" fill="rgb(222,209,19)" fg:x="14077" fg:w="648"/><text x="31.0550%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="32.1781%" y="181" width="1.4794%" height="15" fill="rgb(221,152,14)" fg:x="14725" fg:w="677"/><text x="32.4710%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="33.6575%" y="181" width="1.4794%" height="15" fill="rgb(205,184,38)" fg:x="15402" fg:w="677"/><text x="33.9505%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="35.1369%" y="181" width="1.4161%" height="15" fill="rgb(210,6,17)" fg:x="16079" fg:w="648"/><text x="35.4299%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="36.5530%" y="181" width="1.4161%" height="15" fill="rgb(231,24,8)" fg:x="16727" fg:w="648"/><text x="36.8459%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="37.9690%" y="181" width="1.3330%" height="15" fill="rgb(223,139,12)" fg:x="17375" fg:w="610"/><text x="38.2620%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="39.3020%" y="181" width="1.4161%" height="15" fill="rgb(252,179,16)" fg:x="17985" fg:w="648"/><text x="39.5950%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="40.7181%" y="181" width="1.3330%" height="15" fill="rgb(240,97,17)" fg:x="18633" fg:w="610"/><text x="41.0110%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="42.0511%" y="181" width="1.4161%" height="15" fill="rgb(236,106,5)" fg:x="19243" fg:w="648"/><text x="42.3441%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="43.4671%" y="181" width="1.3330%" height="15" fill="rgb(237,118,10)" fg:x="19891" fg:w="610"/><text x="43.7601%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="44.8002%" y="181" width="1.4161%" height="15" fill="rgb(229,149,15)" fg:x="20501" fg:w="648"/><text x="45.0931%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="46.2162%" y="181" width="1.4161%" height="15" fill="rgb(241,217,38)" fg:x="21149" fg:w="648"/><text x="46.5092%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="47.6323%" y="181" width="1.4161%" height="15" fill="rgb(235,164,30)" fg:x="21797" fg:w="648"/><text x="47.9252%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="49.0483%" y="181" width="1.4161%" height="15" fill="rgb(219,92,18)" fg:x="22445" fg:w="648"/><text x="49.3413%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="50.4644%" y="181" width="1.4161%" height="15" fill="rgb(249,135,28)" fg:x="23093" fg:w="648"/><text x="50.7573%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="51.8804%" y="181" width="1.3330%" height="15" fill="rgb(251,199,9)" fg:x="23741" fg:w="610"/><text x="52.1734%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="53.2134%" y="181" width="1.4794%" height="15" fill="rgb(226,161,15)" fg:x="24351" fg:w="677"/><text x="53.5064%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (706 instructions, 1.54%)</title><rect x="54.6929%" y="181" width="1.5428%" height="15" fill="rgb(217,28,1)" fg:x="25028" fg:w="706"/><text x="54.9858%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="56.2357%" y="181" width="1.4161%" height="15" fill="rgb(235,6,27)" fg:x="25734" fg:w="648"/><text x="56.5286%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="57.6517%" y="181" width="1.3964%" height="15" fill="rgb(253,65,52)" fg:x="26382" fg:w="639"/><text x="57.9447%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="59.0481%" y="181" width="1.3964%" height="15" fill="rgb(210,80,26)" fg:x="27021" fg:w="639"/><text x="59.3411%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="60.4445%" y="181" width="1.3330%" height="15" fill="rgb(238,61,52)" fg:x="27660" fg:w="610"/><text x="60.7375%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="61.7775%" y="181" width="1.4161%" height="15" fill="rgb(238,211,17)" fg:x="28270" fg:w="648"/><text x="62.0705%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="63.1935%" y="181" width="1.4161%" height="15" fill="rgb(228,56,25)" fg:x="28918" fg:w="648"/><text x="63.4865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="64.6096%" y="181" width="1.4794%" height="15" fill="rgb(221,3,28)" fg:x="29566" fg:w="677"/><text x="64.9026%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="66.0890%" y="181" width="1.3330%" height="15" fill="rgb(235,128,22)" fg:x="30243" fg:w="610"/><text x="66.3820%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="67.4220%" y="181" width="1.4794%" height="15" fill="rgb(225,183,16)" fg:x="30853" fg:w="677"/><text x="67.7150%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="68.9015%" y="181" width="1.3330%" height="15" fill="rgb(234,77,37)" fg:x="31530" fg:w="610"/><text x="69.1944%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="70.2345%" y="181" width="1.4794%" height="15" fill="rgb(230,116,29)" fg:x="32140" fg:w="677"/><text x="70.5274%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="71.7139%" y="181" width="1.4161%" height="15" fill="rgb(246,195,32)" fg:x="32817" fg:w="648"/><text x="72.0069%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="73.1300%" y="181" width="1.4161%" height="15" fill="rgb(248,58,21)" fg:x="33465" fg:w="648"/><text x="73.4229%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.61%)</title><rect x="74.5460%" y="181" width="1.6062%" height="15" fill="rgb(230,214,1)" fg:x="34113" fg:w="735"/><text x="74.8390%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="76.1522%" y="181" width="1.4161%" height="15" fill="rgb(209,175,23)" fg:x="34848" fg:w="648"/><text x="76.4452%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="77.5682%" y="181" width="1.4161%" height="15" fill="rgb(223,147,54)" fg:x="35496" fg:w="648"/><text x="77.8612%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="78.9843%" y="181" width="1.4161%" height="15" fill="rgb(209,27,2)" fg:x="36144" fg:w="648"/><text x="79.2773%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="80.4003%" y="181" width="1.4161%" height="15" fill="rgb(224,87,15)" fg:x="36792" fg:w="648"/><text x="80.6933%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="81.8164%" y="181" width="1.4161%" height="15" fill="rgb(212,213,32)" fg:x="37440" fg:w="648"/><text x="82.1094%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="83.2324%" y="181" width="1.4161%" height="15" fill="rgb(233,97,51)" fg:x="38088" fg:w="648"/><text x="83.5254%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="84.6485%" y="181" width="1.4794%" height="15" fill="rgb(240,193,27)" fg:x="38736" fg:w="677"/><text x="84.9415%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="86.1279%" y="181" width="1.4161%" height="15" fill="rgb(250,118,42)" fg:x="39413" fg:w="648"/><text x="86.4209%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="87.5440%" y="181" width="1.3964%" height="15" fill="rgb(211,1,8)" fg:x="40061" fg:w="639"/><text x="87.8369%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="88.9404%" y="181" width="1.4161%" height="15" fill="rgb(212,66,37)" fg:x="40700" fg:w="648"/><text x="89.2333%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="90.3564%" y="181" width="1.4161%" height="15" fill="rgb(213,14,38)" fg:x="41348" fg:w="648"/><text x="90.6494%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="91.7725%" y="181" width="1.4161%" height="15" fill="rgb(209,54,6)" fg:x="41996" fg:w="648"/><text x="92.0654%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="93.1885%" y="181" width="1.4161%" height="15" fill="rgb(249,214,26)" fg:x="42644" fg:w="648"/><text x="93.4815%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="94.6046%" y="181" width="1.3964%" height="15" fill="rgb(225,64,51)" fg:x="43292" fg:w="639"/><text x="94.8975%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="96.0010%" y="149" width="0.0109%" height="15" fill="rgb(210,43,2)" fg:x="43931" fg:w="5"/><text x="96.2939%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.22%)</title><rect x="96.0119%" y="133" width="0.2185%" height="15" fill="rgb(253,198,45)" fg:x="43936" fg:w="100"/><text x="96.3049%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.28%)</title><rect x="96.0119%" y="149" width="0.2775%" height="15" fill="rgb(242,109,32)" fg:x="43936" fg:w="127"/><text x="96.3049%" y="159.50"></text></g><g><title>memset (136 instructions, 0.30%)</title><rect x="96.2894%" y="149" width="0.2972%" height="15" fill="rgb(223,143,7)" fg:x="44063" fg:w="136"/><text x="96.5824%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (428 instructions, 0.94%)</title><rect x="96.0010%" y="165" width="0.9353%" height="15" fill="rgb(253,78,33)" fg:x="43931" fg:w="428"/><text x="96.2939%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="96.9363%" y="149" width="0.0699%" height="15" fill="rgb(247,42,20)" fg:x="44359" fg:w="32"/><text x="97.2292%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="97.0062%" y="101" width="0.1661%" height="15" fill="rgb(229,195,53)" fg:x="44391" fg:w="76"/><text x="97.2992%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.24%)</title><rect x="97.0062%" y="117" width="0.2404%" height="15" fill="rgb(252,53,30)" fg:x="44391" fg:w="110"/><text x="97.2992%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.38%)</title><rect x="97.0062%" y="133" width="0.3824%" height="15" fill="rgb(236,63,25)" fg:x="44391" fg:w="175"/><text x="97.2992%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.3886%" y="133" width="0.0240%" height="15" fill="rgb(209,193,35)" fg:x="44566" fg:w="11"/><text x="97.6816%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.4126%" y="133" width="0.0240%" height="15" fill="rgb(226,100,16)" fg:x="44577" fg:w="11"/><text x="97.7056%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.78%)</title><rect x="97.0062%" y="149" width="0.7845%" height="15" fill="rgb(240,212,50)" fg:x="44391" fg:w="359"/><text x="97.2992%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="97.7907%" y="149" width="0.0656%" height="15" fill="rgb(208,6,22)" fg:x="44750" fg:w="30"/><text x="98.0837%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="97.8563%" y="149" width="0.0109%" height="15" fill="rgb(231,135,19)" fg:x="44780" fg:w="5"/><text x="98.1492%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 1.08%)</title><rect x="96.9363%" y="165" width="1.0795%" height="15" fill="rgb(239,110,2)" fg:x="44359" fg:w="494"/><text x="97.2292%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.0158%" y="165" width="0.0109%" height="15" fill="rgb(234,178,32)" fg:x="44853" fg:w="5"/><text x="98.3087%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="98.0267%" y="165" width="0.1202%" height="15" fill="rgb(220,173,10)" fg:x="44858" fg:w="55"/><text x="98.3197%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,056 instructions, 2.31%)</title><rect x="96.0010%" y="181" width="2.3076%" height="15" fill="rgb(226,69,42)" fg:x="43931" fg:w="1056"/><text x="96.2939%" y="191.50">i..</text></g><g><title>heap::batch_get_5_::{{closure}} (45,155 instructions, 98.68%)</title><rect x="0.3737%" y="197" width="98.6757%" height="15" fill="rgb(239,181,47)" fg:x="171" fg:w="45155"/><text x="0.6666%" y="207.50">heap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.0494%" y="197" width="0.0262%" height="15" fill="rgb(206,31,9)" fg:x="45326" fg:w="12"/><text x="99.3424%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="99.2526%" y="181" width="0.1202%" height="15" fill="rgb(225,174,32)" fg:x="45419" fg:w="55"/><text x="99.5456%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="99.3728%" y="181" width="0.1377%" height="15" fill="rgb(231,201,12)" fg:x="45474" fg:w="63"/><text x="99.6658%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 0.71%)</title><rect x="99.0756%" y="197" width="0.7102%" height="15" fill="rgb(221,180,13)" fg:x="45338" fg:w="325"/><text x="99.3686%" y="207.50"></text></g><g><title>all (45,761 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,114,1)" fg:x="0" fg:w="45761"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (45,761 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,73,20)" fg:x="0" fg:w="45761"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>