<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="50072"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0479%" height="15" fill="rgb(229,177,11)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0479%" y="197" width="0.1658%" height="15" fill="rgb(251,225,2)" fg:x="24" fg:w="83"/><text x="0.3409%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2137%" y="197" width="0.1658%" height="15" fill="rgb(213,157,6)" fg:x="107" fg:w="83"/><text x="0.5067%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3795%" y="165" width="0.1658%" height="15" fill="rgb(218,177,50)" fg:x="190" fg:w="83"/><text x="0.6724%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5452%" y="149" width="0.1638%" height="15" fill="rgb(224,14,45)" fg:x="273" fg:w="82"/><text x="0.8382%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7090%" y="133" width="0.0120%" height="15" fill="rgb(220,55,44)" fg:x="355" fg:w="6"/><text x="1.0019%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="0.7090%" y="149" width="0.8787%" height="15" fill="rgb(254,45,26)" fg:x="355" fg:w="440"/><text x="1.0019%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5877%" y="149" width="0.1897%" height="15" fill="rgb(227,107,43)" fg:x="795" fg:w="95"/><text x="1.8807%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7774%" y="149" width="0.1198%" height="15" fill="rgb(210,68,44)" fg:x="890" fg:w="60"/><text x="2.0704%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8973%" y="149" width="0.1198%" height="15" fill="rgb(223,193,40)" fg:x="950" fg:w="60"/><text x="2.1902%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0171%" y="149" width="0.1198%" height="15" fill="rgb(244,10,46)" fg:x="1010" fg:w="60"/><text x="2.3101%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1369%" y="149" width="0.1198%" height="15" fill="rgb(207,157,16)" fg:x="1070" fg:w="60"/><text x="2.4299%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2568%" y="149" width="0.1638%" height="15" fill="rgb(252,189,48)" fg:x="1130" fg:w="82"/><text x="2.5497%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4205%" y="149" width="0.1398%" height="15" fill="rgb(218,6,2)" fg:x="1212" fg:w="70"/><text x="2.7135%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5603%" y="133" width="0.0120%" height="15" fill="rgb(239,185,54)" fg:x="1282" fg:w="6"/><text x="2.8533%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="2.5603%" y="149" width="0.8787%" height="15" fill="rgb(209,135,10)" fg:x="1282" fg:w="440"/><text x="2.8533%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4390%" y="149" width="0.0379%" height="15" fill="rgb(244,218,17)" fg:x="1722" fg:w="19"/><text x="3.7320%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.4770%" y="133" width="0.1658%" height="15" fill="rgb(238,212,50)" fg:x="1741" fg:w="83"/><text x="3.7700%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6428%" y="101" width="0.1338%" height="15" fill="rgb(234,97,40)" fg:x="1824" fg:w="67"/><text x="3.9357%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="3.6428%" y="117" width="0.1957%" height="15" fill="rgb(247,137,8)" fg:x="1824" fg:w="98"/><text x="3.9357%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8385%" y="69" width="0.0220%" height="15" fill="rgb(235,82,14)" fg:x="1922" fg:w="11"/><text x="4.1314%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8604%" y="53" width="0.0699%" height="15" fill="rgb(210,48,29)" fg:x="1933" fg:w="35"/><text x="4.1534%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="3.8604%" y="69" width="0.1318%" height="15" fill="rgb(216,129,40)" fg:x="1933" fg:w="66"/><text x="4.1534%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="3.8385%" y="85" width="0.2936%" height="15" fill="rgb(214,11,22)" fg:x="1922" fg:w="147"/><text x="4.1314%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="3.8385%" y="101" width="0.4234%" height="15" fill="rgb(235,29,17)" fg:x="1922" fg:w="212"/><text x="4.1314%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="3.8385%" y="117" width="0.4434%" height="15" fill="rgb(254,42,30)" fg:x="1922" fg:w="222"/><text x="4.1314%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="3.6428%" y="133" width="0.9207%" height="15" fill="rgb(253,110,48)" fg:x="1824" fg:w="461"/><text x="3.9357%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="3.4770%" y="149" width="1.3760%" height="15" fill="rgb(218,54,33)" fg:x="1741" fg:w="689"/><text x="3.7700%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8530%" y="149" width="0.1897%" height="15" fill="rgb(224,100,29)" fg:x="2430" fg:w="95"/><text x="5.1460%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0427%" y="149" width="0.1198%" height="15" fill="rgb(248,138,54)" fg:x="2525" fg:w="60"/><text x="5.3357%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1626%" y="149" width="0.1518%" height="15" fill="rgb(205,124,23)" fg:x="2585" fg:w="76"/><text x="5.4555%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3143%" y="149" width="0.1398%" height="15" fill="rgb(218,33,54)" fg:x="2661" fg:w="70"/><text x="5.6073%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4541%" y="117" width="0.0120%" height="15" fill="rgb(222,211,9)" fg:x="2731" fg:w="6"/><text x="5.7471%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="5.4541%" y="133" width="0.8787%" height="15" fill="rgb(242,150,11)" fg:x="2731" fg:w="440"/><text x="5.7471%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3329%" y="133" width="0.0379%" height="15" fill="rgb(237,199,48)" fg:x="3171" fg:w="19"/><text x="6.6258%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3708%" y="117" width="0.1658%" height="15" fill="rgb(210,219,41)" fg:x="3190" fg:w="83"/><text x="6.6638%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5366%" y="85" width="0.1338%" height="15" fill="rgb(240,220,41)" fg:x="3273" fg:w="67"/><text x="6.8296%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="6.5366%" y="101" width="0.1957%" height="15" fill="rgb(244,49,18)" fg:x="3273" fg:w="98"/><text x="6.8296%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7323%" y="53" width="0.0220%" height="15" fill="rgb(226,59,33)" fg:x="3371" fg:w="11"/><text x="7.0253%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7543%" y="37" width="0.0699%" height="15" fill="rgb(248,56,39)" fg:x="3382" fg:w="35"/><text x="7.0472%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="6.7543%" y="53" width="0.1318%" height="15" fill="rgb(245,204,31)" fg:x="3382" fg:w="66"/><text x="7.0472%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="6.7323%" y="69" width="0.2936%" height="15" fill="rgb(209,42,15)" fg:x="3371" fg:w="147"/><text x="7.0253%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="6.7323%" y="85" width="0.4234%" height="15" fill="rgb(254,114,35)" fg:x="3371" fg:w="212"/><text x="7.0253%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="6.7323%" y="101" width="0.4434%" height="15" fill="rgb(237,55,26)" fg:x="3371" fg:w="222"/><text x="7.0253%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="6.5366%" y="117" width="0.9207%" height="15" fill="rgb(219,61,2)" fg:x="3273" fg:w="461"/><text x="6.8296%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="6.3708%" y="133" width="1.3760%" height="15" fill="rgb(236,76,13)" fg:x="3190" fg:w="689"/><text x="6.6638%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7468%" y="133" width="0.1897%" height="15" fill="rgb(218,137,11)" fg:x="3879" fg:w="95"/><text x="8.0398%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9366%" y="133" width="0.1198%" height="15" fill="rgb(206,151,2)" fg:x="3974" fg:w="60"/><text x="8.2295%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0564%" y="117" width="0.1638%" height="15" fill="rgb(209,207,50)" fg:x="4034" fg:w="82"/><text x="8.3494%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2202%" y="117" width="0.1897%" height="15" fill="rgb(206,94,20)" fg:x="4116" fg:w="95"/><text x="8.5131%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.4099%" y="117" width="0.1518%" height="15" fill="rgb(250,25,46)" fg:x="4211" fg:w="76"/><text x="8.7029%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0564%" y="133" width="0.6591%" height="15" fill="rgb(223,186,46)" fg:x="4034" fg:w="330"/><text x="8.3494%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7154%" y="133" width="0.1638%" height="15" fill="rgb(227,166,12)" fg:x="4364" fg:w="82"/><text x="9.0084%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 3.91%)</title><rect x="5.4541%" y="149" width="3.9144%" height="15" fill="rgb(244,107,40)" fg:x="2731" fg:w="1960"/><text x="5.7471%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3685%" y="149" width="0.1518%" height="15" fill="rgb(252,107,23)" fg:x="4691" fg:w="76"/><text x="9.6615%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5203%" y="149" width="0.0300%" height="15" fill="rgb(253,50,24)" fg:x="4767" fg:w="15"/><text x="9.8133%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5502%" y="149" width="0.0300%" height="15" fill="rgb(218,83,23)" fg:x="4782" fg:w="15"/><text x="9.8432%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5802%" y="149" width="0.0180%" height="15" fill="rgb(244,23,53)" fg:x="4797" fg:w="9"/><text x="9.8732%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.04%)</title><rect x="9.5982%" y="149" width="0.0359%" height="15" fill="rgb(253,69,51)" fg:x="4806" fg:w="18"/><text x="9.8911%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6341%" y="133" width="0.1658%" height="15" fill="rgb(252,215,44)" fg:x="4824" fg:w="83"/><text x="9.9271%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6341%" y="149" width="0.3575%" height="15" fill="rgb(226,95,50)" fg:x="4824" fg:w="179"/><text x="9.9271%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9916%" y="117" width="0.1658%" height="15" fill="rgb(213,161,19)" fg:x="5003" fg:w="83"/><text x="10.2846%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9916%" y="133" width="0.2516%" height="15" fill="rgb(241,29,27)" fg:x="5003" fg:w="126"/><text x="10.2846%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.42%)</title><rect x="9.9916%" y="149" width="0.4154%" height="15" fill="rgb(229,44,53)" fg:x="5003" fg:w="208"/><text x="10.2846%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.4070%" y="149" width="0.1658%" height="15" fill="rgb(248,226,15)" fg:x="5211" fg:w="83"/><text x="10.7000%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="10.5728%" y="149" width="0.1718%" height="15" fill="rgb(219,68,21)" fg:x="5294" fg:w="86"/><text x="10.8657%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7445%" y="149" width="0.1658%" height="15" fill="rgb(215,16,11)" fg:x="5380" fg:w="83"/><text x="11.0375%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9103%" y="149" width="0.1658%" height="15" fill="rgb(243,198,43)" fg:x="5463" fg:w="83"/><text x="11.2033%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="11.0840%" y="149" width="0.1718%" height="15" fill="rgb(242,174,16)" fg:x="5550" fg:w="86"/><text x="11.3770%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.85%)</title><rect x="11.2558%" y="149" width="0.8548%" height="15" fill="rgb(239,1,9)" fg:x="5636" fg:w="428"/><text x="11.5488%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.85%)</title><rect x="12.1106%" y="149" width="0.8548%" height="15" fill="rgb(224,142,16)" fg:x="6064" fg:w="428"/><text x="12.4035%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,365 instructions, 14.71%)</title><rect x="0.5452%" y="165" width="14.7088%" height="15" fill="rgb(218,178,9)" fg:x="273" fg:w="7365"/><text x="0.8382%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.2540%" y="165" width="0.7589%" height="15" fill="rgb(235,116,5)" fg:x="7638" fg:w="380"/><text x="15.5470%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.0129%" y="149" width="0.0280%" height="15" fill="rgb(243,3,8)" fg:x="8018" fg:w="14"/><text x="16.3059%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.13%)</title><rect x="16.0129%" y="165" width="0.1258%" height="15" fill="rgb(245,120,35)" fg:x="8018" fg:w="63"/><text x="16.3059%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="16.1388%" y="149" width="0.1238%" height="15" fill="rgb(247,225,51)" fg:x="8081" fg:w="62"/><text x="16.4317%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (220 instructions, 0.44%)</title><rect x="16.1388%" y="165" width="0.4394%" height="15" fill="rgb(218,78,34)" fg:x="8081" fg:w="220"/><text x="16.4317%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.5781%" y="149" width="0.0280%" height="15" fill="rgb(206,130,0)" fg:x="8301" fg:w="14"/><text x="16.8711%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.6061%" y="133" width="0.1178%" height="15" fill="rgb(224,191,45)" fg:x="8315" fg:w="59"/><text x="16.8991%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.7239%" y="133" width="0.1877%" height="15" fill="rgb(251,161,12)" fg:x="8374" fg:w="94"/><text x="17.0169%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.9116%" y="133" width="0.3455%" height="15" fill="rgb(247,225,6)" fg:x="8468" fg:w="173"/><text x="17.2046%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.6061%" y="149" width="1.1563%" height="15" fill="rgb(214,178,3)" fg:x="8315" fg:w="579"/><text x="16.8991%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 1.64%)</title><rect x="16.5781%" y="165" width="1.6396%" height="15" fill="rgb(228,124,5)" fg:x="8301" fg:w="821"/><text x="16.8711%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="18.2178%" y="165" width="0.1658%" height="15" fill="rgb(249,34,13)" fg:x="9122" fg:w="83"/><text x="18.5107%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="18.3835%" y="149" width="0.0280%" height="15" fill="rgb(219,228,10)" fg:x="9205" fg:w="14"/><text x="18.6765%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.4115%" y="133" width="0.1178%" height="15" fill="rgb(227,149,10)" fg:x="9219" fg:w="59"/><text x="18.7045%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.5293%" y="133" width="0.1877%" height="15" fill="rgb(213,191,0)" fg:x="9278" fg:w="94"/><text x="18.8223%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.7170%" y="133" width="0.3455%" height="15" fill="rgb(208,106,32)" fg:x="9372" fg:w="173"/><text x="19.0100%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.4115%" y="149" width="1.1563%" height="15" fill="rgb(245,207,25)" fg:x="9219" fg:w="579"/><text x="18.7045%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.5678%" y="149" width="0.1538%" height="15" fill="rgb(214,66,24)" fg:x="9798" fg:w="77"/><text x="19.8608%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="19.7216%" y="133" width="0.1718%" height="15" fill="rgb(237,14,40)" fg:x="9875" fg:w="86"/><text x="20.0146%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.24%)</title><rect x="19.7216%" y="149" width="0.2417%" height="15" fill="rgb(232,15,35)" fg:x="9875" fg:w="121"/><text x="20.0146%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.97%)</title><rect x="18.3835%" y="165" width="1.9692%" height="15" fill="rgb(237,119,46)" fg:x="9205" fg:w="986"/><text x="18.6765%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.3527%" y="117" width="0.1178%" height="15" fill="rgb(218,186,53)" fg:x="10191" fg:w="59"/><text x="20.6457%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="20.3527%" y="133" width="0.1877%" height="15" fill="rgb(226,118,25)" fg:x="10191" fg:w="94"/><text x="20.6457%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.63%)</title><rect x="20.3527%" y="149" width="0.6291%" height="15" fill="rgb(241,212,17)" fg:x="10191" fg:w="315"/><text x="20.6457%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.323 (18 instructions, 0.04%)</title><rect x="20.9818%" y="149" width="0.0359%" height="15" fill="rgb(232,15,39)" fg:x="10506" fg:w="18"/><text x="21.2748%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.0177%" y="149" width="0.0260%" height="15" fill="rgb(240,75,17)" fg:x="10524" fg:w="13"/><text x="21.3107%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.10%)</title><rect x="20.3527%" y="165" width="1.1004%" height="15" fill="rgb(245,182,14)" fg:x="10191" fg:w="551"/><text x="20.6457%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.4531%" y="165" width="0.1058%" height="15" fill="rgb(205,228,34)" fg:x="10742" fg:w="53"/><text x="21.7461%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (130 instructions, 0.26%)</title><rect x="21.5590%" y="149" width="0.2596%" height="15" fill="rgb(247,102,26)" fg:x="10795" fg:w="130"/><text x="21.8519%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.8885%" y="149" width="0.2636%" height="15" fill="rgb(234,196,42)" fg:x="10960" fg:w="132"/><text x="22.1814%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (332 instructions, 0.66%)</title><rect x="21.5590%" y="165" width="0.6630%" height="15" fill="rgb(244,185,21)" fg:x="10795" fg:w="332"/><text x="21.8519%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="22.2220%" y="149" width="0.0679%" height="15" fill="rgb(206,111,12)" fg:x="11127" fg:w="34"/><text x="22.5150%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1353 (18 instructions, 0.04%)</title><rect x="22.2899%" y="149" width="0.0359%" height="15" fill="rgb(227,228,24)" fg:x="11161" fg:w="18"/><text x="22.5829%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1353 (18 instructions, 0.04%)</title><rect x="22.3259%" y="149" width="0.0359%" height="15" fill="rgb(217,172,42)" fg:x="11179" fg:w="18"/><text x="22.6188%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.34%)</title><rect x="22.2220%" y="165" width="0.3375%" height="15" fill="rgb(222,100,36)" fg:x="11127" fg:w="169"/><text x="22.5150%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5595%" y="165" width="0.0260%" height="15" fill="rgb(243,127,47)" fg:x="11296" fg:w="13"/><text x="22.8525%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.5855%" y="165" width="0.0260%" height="15" fill="rgb(238,31,22)" fg:x="11309" fg:w="13"/><text x="22.8784%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.6114%" y="165" width="0.0260%" height="15" fill="rgb(236,203,32)" fg:x="11322" fg:w="13"/><text x="22.9044%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.6374%" y="165" width="0.8787%" height="15" fill="rgb(233,62,25)" fg:x="11335" fg:w="440"/><text x="22.9304%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="23.5161%" y="133" width="0.0379%" height="15" fill="rgb(241,16,44)" fg:x="11775" fg:w="19"/><text x="23.8091%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.5541%" y="133" width="0.3615%" height="15" fill="rgb(247,181,50)" fg:x="11794" fg:w="181"/><text x="23.8471%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="23.9156%" y="101" width="0.1338%" height="15" fill="rgb(236,91,8)" fg:x="11975" fg:w="67"/><text x="24.2085%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.9156%" y="117" width="0.3615%" height="15" fill="rgb(216,97,25)" fg:x="11975" fg:w="181"/><text x="24.2085%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 0.43%)</title><rect x="23.9156%" y="133" width="0.4314%" height="15" fill="rgb(222,37,24)" fg:x="11975" fg:w="216"/><text x="24.2085%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.3469%" y="133" width="0.0260%" height="15" fill="rgb(229,106,9)" fg:x="12191" fg:w="13"/><text x="24.6399%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (491 instructions, 0.98%)</title><rect x="23.5161%" y="149" width="0.9806%" height="15" fill="rgb(253,144,28)" fg:x="11775" fg:w="491"/><text x="23.8091%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (540 instructions, 1.08%)</title><rect x="23.5161%" y="165" width="1.0784%" height="15" fill="rgb(223,168,9)" fg:x="11775" fg:w="540"/><text x="23.8091%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="24.5946%" y="149" width="0.1238%" height="15" fill="rgb(224,161,13)" fg:x="12315" fg:w="62"/><text x="24.8876%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="24.7184%" y="149" width="0.1338%" height="15" fill="rgb(229,127,18)" fg:x="12377" fg:w="67"/><text x="25.0114%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.46%)</title><rect x="24.5946%" y="165" width="0.4553%" height="15" fill="rgb(225,51,14)" fg:x="12315" fg:w="228"/><text x="24.8876%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,821 instructions, 27.60%)</title><rect x="0.3795%" y="181" width="27.6023%" height="15" fill="rgb(248,12,0)" fg:x="190" fg:w="13821"/><text x="0.6724%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="27.9817%" y="181" width="1.2822%" height="15" fill="rgb(224,184,21)" fg:x="14011" fg:w="642"/><text x="28.2747%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (667 instructions, 1.33%)</title><rect x="29.2639%" y="181" width="1.3321%" height="15" fill="rgb(211,148,11)" fg:x="14653" fg:w="667"/><text x="29.5568%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="30.5959%" y="181" width="1.2822%" height="15" fill="rgb(234,54,23)" fg:x="15320" fg:w="642"/><text x="30.8889%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="31.8781%" y="181" width="1.2822%" height="15" fill="rgb(216,199,44)" fg:x="15962" fg:w="642"/><text x="32.1711%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="33.1602%" y="181" width="1.2822%" height="15" fill="rgb(237,81,32)" fg:x="16604" fg:w="642"/><text x="33.4532%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="34.4424%" y="181" width="1.3441%" height="15" fill="rgb(222,15,42)" fg:x="17246" fg:w="673"/><text x="34.7354%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="35.7865%" y="181" width="1.3441%" height="15" fill="rgb(249,10,26)" fg:x="17919" fg:w="673"/><text x="36.0794%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="37.1305%" y="181" width="1.2822%" height="15" fill="rgb(243,205,25)" fg:x="18592" fg:w="642"/><text x="37.4235%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="38.4127%" y="181" width="1.2822%" height="15" fill="rgb(233,91,53)" fg:x="19234" fg:w="642"/><text x="38.7057%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="39.6948%" y="181" width="1.2083%" height="15" fill="rgb(244,101,51)" fg:x="19876" fg:w="605"/><text x="39.9878%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="40.9031%" y="181" width="1.2822%" height="15" fill="rgb(238,111,25)" fg:x="20481" fg:w="642"/><text x="41.1961%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="42.1853%" y="181" width="1.2083%" height="15" fill="rgb(234,19,27)" fg:x="21123" fg:w="605"/><text x="42.4782%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="43.3935%" y="181" width="1.2822%" height="15" fill="rgb(209,121,18)" fg:x="21728" fg:w="642"/><text x="43.6865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="44.6757%" y="181" width="1.2083%" height="15" fill="rgb(213,84,18)" fg:x="22370" fg:w="605"/><text x="44.9686%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="45.8839%" y="181" width="1.2822%" height="15" fill="rgb(251,73,32)" fg:x="22975" fg:w="642"/><text x="46.1769%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="47.1661%" y="181" width="1.2822%" height="15" fill="rgb(248,93,22)" fg:x="23617" fg:w="642"/><text x="47.4590%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="48.4482%" y="181" width="1.2822%" height="15" fill="rgb(253,218,18)" fg:x="24259" fg:w="642"/><text x="48.7412%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="49.7304%" y="181" width="1.2822%" height="15" fill="rgb(250,191,32)" fg:x="24901" fg:w="642"/><text x="50.0234%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="51.0125%" y="181" width="1.2822%" height="15" fill="rgb(251,194,43)" fg:x="25543" fg:w="642"/><text x="51.3055%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="52.2947%" y="181" width="1.2083%" height="15" fill="rgb(216,63,11)" fg:x="26185" fg:w="605"/><text x="52.5877%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="53.5030%" y="181" width="1.3441%" height="15" fill="rgb(234,22,17)" fg:x="26790" fg:w="673"/><text x="53.7959%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (704 instructions, 1.41%)</title><rect x="54.8470%" y="181" width="1.4060%" height="15" fill="rgb(247,48,30)" fg:x="27463" fg:w="704"/><text x="55.1400%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="56.2530%" y="181" width="1.2822%" height="15" fill="rgb(205,170,34)" fg:x="28167" fg:w="642"/><text x="56.5460%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="57.5351%" y="181" width="1.2702%" height="15" fill="rgb(206,205,17)" fg:x="28809" fg:w="636"/><text x="57.8281%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="58.8053%" y="181" width="1.2702%" height="15" fill="rgb(211,0,35)" fg:x="29445" fg:w="636"/><text x="59.0983%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="60.0755%" y="181" width="1.2083%" height="15" fill="rgb(223,113,13)" fg:x="30081" fg:w="605"/><text x="60.3685%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="61.2838%" y="181" width="1.2822%" height="15" fill="rgb(221,127,8)" fg:x="30686" fg:w="642"/><text x="61.5767%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="62.5659%" y="181" width="1.2822%" height="15" fill="rgb(224,105,26)" fg:x="31328" fg:w="642"/><text x="62.8589%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="63.8481%" y="181" width="1.3441%" height="15" fill="rgb(248,41,11)" fg:x="31970" fg:w="673"/><text x="64.1410%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="65.1921%" y="181" width="1.2083%" height="15" fill="rgb(247,141,40)" fg:x="32643" fg:w="605"/><text x="65.4851%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="66.4004%" y="181" width="1.3441%" height="15" fill="rgb(247,30,33)" fg:x="33248" fg:w="673"/><text x="66.6934%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="67.7444%" y="181" width="1.2083%" height="15" fill="rgb(240,180,34)" fg:x="33921" fg:w="605"/><text x="68.0374%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="68.9527%" y="181" width="1.3441%" height="15" fill="rgb(241,193,0)" fg:x="34526" fg:w="673"/><text x="69.2457%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="70.2968%" y="181" width="1.2822%" height="15" fill="rgb(238,125,13)" fg:x="35199" fg:w="642"/><text x="70.5897%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="71.5789%" y="181" width="1.2822%" height="15" fill="rgb(213,151,29)" fg:x="35841" fg:w="642"/><text x="71.8719%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.47%)</title><rect x="72.8611%" y="181" width="1.4679%" height="15" fill="rgb(214,116,47)" fg:x="36483" fg:w="735"/><text x="73.1540%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="74.3290%" y="181" width="1.2822%" height="15" fill="rgb(221,24,52)" fg:x="37218" fg:w="642"/><text x="74.6219%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="75.6111%" y="181" width="1.2822%" height="15" fill="rgb(205,24,20)" fg:x="37860" fg:w="642"/><text x="75.9041%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="76.8933%" y="181" width="1.2822%" height="15" fill="rgb(254,121,33)" fg:x="38502" fg:w="642"/><text x="77.1862%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="78.1754%" y="181" width="1.2822%" height="15" fill="rgb(234,142,29)" fg:x="39144" fg:w="642"/><text x="78.4684%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="79.4576%" y="181" width="1.2822%" height="15" fill="rgb(226,10,1)" fg:x="39786" fg:w="642"/><text x="79.7505%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="80.7397%" y="181" width="1.2822%" height="15" fill="rgb(241,123,30)" fg:x="40428" fg:w="642"/><text x="81.0327%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="82.0219%" y="181" width="1.3441%" height="15" fill="rgb(227,199,22)" fg:x="41070" fg:w="673"/><text x="82.3149%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="83.3660%" y="181" width="1.2822%" height="15" fill="rgb(244,13,3)" fg:x="41743" fg:w="642"/><text x="83.6589%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="84.6481%" y="181" width="1.2702%" height="15" fill="rgb(209,151,24)" fg:x="42385" fg:w="636"/><text x="84.9411%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="85.9183%" y="181" width="1.2822%" height="15" fill="rgb(208,101,7)" fg:x="43021" fg:w="642"/><text x="86.2112%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="87.2004%" y="181" width="1.2822%" height="15" fill="rgb(221,22,47)" fg:x="43663" fg:w="642"/><text x="87.4934%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="88.4826%" y="181" width="1.2822%" height="15" fill="rgb(245,205,38)" fg:x="44305" fg:w="642"/><text x="88.7756%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="89.7647%" y="181" width="1.2822%" height="15" fill="rgb(221,123,17)" fg:x="44947" fg:w="642"/><text x="90.0577%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="91.0469%" y="181" width="1.2702%" height="15" fill="rgb(232,200,4)" fg:x="45589" fg:w="636"/><text x="91.3399%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="92.3171%" y="149" width="0.0280%" height="15" fill="rgb(208,20,30)" fg:x="46225" fg:w="14"/><text x="92.6100%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.22%)</title><rect x="92.3450%" y="133" width="0.2177%" height="15" fill="rgb(219,36,14)" fg:x="46239" fg:w="109"/><text x="92.6380%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 instructions, 0.29%)</title><rect x="92.3450%" y="149" width="0.2876%" height="15" fill="rgb(222,132,48)" fg:x="46239" fg:w="144"/><text x="92.6380%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.6326%" y="149" width="0.3036%" height="15" fill="rgb(242,5,26)" fg:x="46383" fg:w="152"/><text x="92.9256%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (490 instructions, 0.98%)</title><rect x="92.3171%" y="165" width="0.9786%" height="15" fill="rgb(247,175,3)" fg:x="46225" fg:w="490"/><text x="92.6100%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.03%)</title><rect x="93.2957%" y="149" width="1.0345%" height="15" fill="rgb(251,154,37)" fg:x="46715" fg:w="518"/><text x="93.5886%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.3302%" y="101" width="0.1658%" height="15" fill="rgb(225,40,23)" fg:x="47233" fg:w="83"/><text x="94.6231%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.3302%" y="117" width="0.2516%" height="15" fill="rgb(205,164,0)" fg:x="47233" fg:w="126"/><text x="94.6231%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.41%)</title><rect x="94.3302%" y="133" width="0.4094%" height="15" fill="rgb(242,6,18)" fg:x="47233" fg:w="205"/><text x="94.6231%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7396%" y="133" width="0.0300%" height="15" fill="rgb(221,141,26)" fg:x="47438" fg:w="15"/><text x="95.0325%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.7695%" y="133" width="0.0300%" height="15" fill="rgb(220,175,17)" fg:x="47453" fg:w="15"/><text x="95.0625%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.84%)</title><rect x="94.3302%" y="149" width="0.8448%" height="15" fill="rgb(227,190,19)" fg:x="47233" fg:w="423"/><text x="94.6231%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.1749%" y="149" width="1.0305%" height="15" fill="rgb(214,173,25)" fg:x="47656" fg:w="516"/><text x="95.4679%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.2055%" y="149" width="0.0140%" height="15" fill="rgb(230,181,12)" fg:x="48172" fg:w="7"/><text x="96.4984%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 3.11%)</title><rect x="93.2957%" y="165" width="3.1095%" height="15" fill="rgb(234,213,47)" fg:x="46715" fg:w="1557"/><text x="93.5886%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="96.4052%" y="165" width="0.0120%" height="15" fill="rgb(243,59,50)" fg:x="48272" fg:w="6"/><text x="96.6981%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.4172%" y="165" width="0.1198%" height="15" fill="rgb(250,141,51)" fg:x="48278" fg:w="60"/><text x="96.7101%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,719 instructions, 5.43%)</title><rect x="92.3171%" y="181" width="5.4302%" height="15" fill="rgb(212,21,37)" fg:x="46225" fg:w="2719"/><text x="92.6100%" y="191.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_get::{{closure}} (49,360 instructions, 98.58%)</title><rect x="0.3795%" y="197" width="98.5780%" height="15" fill="rgb(243,114,2)" fg:x="190" fg:w="49360"/><text x="0.6724%" y="207.50">heap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.9575%" y="197" width="0.0280%" height="15" fill="rgb(253,110,24)" fg:x="49550" fg:w="14"/><text x="99.2505%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="99.1592%" y="181" width="0.1238%" height="15" fill="rgb(220,136,53)" fg:x="49651" fg:w="62"/><text x="99.4522%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.13%)</title><rect x="99.2830%" y="181" width="0.1338%" height="15" fill="rgb(212,31,2)" fg:x="49713" fg:w="67"/><text x="99.5760%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (363 instructions, 0.72%)</title><rect x="98.9875%" y="197" width="0.7250%" height="15" fill="rgb(239,226,12)" fg:x="49565" fg:w="363"/><text x="99.2804%" y="207.50"></text></g><g><title>all (50,072 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,200,16)" fg:x="0" fg:w="50072"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (50,072 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,82,47)" fg:x="0" fg:w="50072"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>