<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="48902"><g><title>ic_cdk::setup (7 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0143%" height="15" fill="rgb(206,225,42)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.0143%" y="165" width="0.1840%" height="15" fill="rgb(224,55,48)" fg:x="7" fg:w="90"/><text x="0.3073%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.0143%" y="181" width="0.2045%" height="15" fill="rgb(221,143,16)" fg:x="7" fg:w="100"/><text x="0.3073%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.2249%" y="165" width="0.1840%" height="15" fill="rgb(205,62,48)" fg:x="110" fg:w="90"/><text x="0.5179%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.2249%" y="181" width="0.2045%" height="15" fill="rgb(210,191,8)" fg:x="110" fg:w="100"/><text x="0.5179%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 0.42%)</title><rect x="0.0143%" y="197" width="0.4213%" height="15" fill="rgb(252,128,31)" fg:x="7" fg:w="206"/><text x="0.3073%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.4356%" y="133" width="0.1840%" height="15" fill="rgb(251,74,19)" fg:x="213" fg:w="90"/><text x="0.7285%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.4356%" y="149" width="0.2045%" height="15" fill="rgb(234,225,24)" fg:x="213" fg:w="100"/><text x="0.7285%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="0.4356%" y="165" width="0.2106%" height="15" fill="rgb(211,192,53)" fg:x="213" fg:w="103"/><text x="0.7285%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (162 instructions, 0.33%)</title><rect x="0.4356%" y="181" width="0.3313%" height="15" fill="rgb(223,101,54)" fg:x="213" fg:w="162"/><text x="0.7285%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="0.7668%" y="165" width="0.1247%" height="15" fill="rgb(215,52,51)" fg:x="375" fg:w="61"/><text x="1.0598%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="0.8916%" y="165" width="0.8323%" height="15" fill="rgb(226,162,52)" fg:x="436" fg:w="407"/><text x="1.1845%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="1.7239%" y="165" width="0.1513%" height="15" fill="rgb(221,132,3)" fg:x="843" fg:w="74"/><text x="2.0168%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="1.8752%" y="165" width="0.1104%" height="15" fill="rgb(253,33,48)" fg:x="917" fg:w="54"/><text x="2.1681%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="1.9856%" y="165" width="0.1104%" height="15" fill="rgb(219,173,5)" fg:x="971" fg:w="54"/><text x="2.2786%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="2.0960%" y="165" width="0.1104%" height="15" fill="rgb(210,36,2)" fg:x="1025" fg:w="54"/><text x="2.3890%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="2.2065%" y="165" width="0.1104%" height="15" fill="rgb(239,18,50)" fg:x="1079" fg:w="54"/><text x="2.4994%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="2.3169%" y="165" width="0.1247%" height="15" fill="rgb(220,145,18)" fg:x="1133" fg:w="61"/><text x="2.6098%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.20%)</title><rect x="2.4416%" y="165" width="0.1984%" height="15" fill="rgb(229,227,49)" fg:x="1194" fg:w="97"/><text x="2.7346%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="2.6400%" y="165" width="0.8323%" height="15" fill="rgb(235,21,9)" fg:x="1291" fg:w="407"/><text x="2.9329%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.4723%" y="165" width="0.0327%" height="15" fill="rgb(223,141,39)" fg:x="1698" fg:w="16"/><text x="3.7652%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="3.5050%" y="101" width="0.1840%" height="15" fill="rgb(235,59,37)" fg:x="1714" fg:w="90"/><text x="3.7979%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="3.5050%" y="117" width="0.2045%" height="15" fill="rgb(206,65,7)" fg:x="1714" fg:w="100"/><text x="3.7979%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="3.5050%" y="133" width="0.2106%" height="15" fill="rgb(220,204,14)" fg:x="1714" fg:w="103"/><text x="3.7979%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.12%)</title><rect x="3.7156%" y="101" width="0.1227%" height="15" fill="rgb(222,31,27)" fg:x="1817" fg:w="60"/><text x="4.0086%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.17%)</title><rect x="3.7156%" y="117" width="0.1738%" height="15" fill="rgb(224,123,12)" fg:x="1817" fg:w="85"/><text x="4.0086%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.8894%" y="69" width="0.0184%" height="15" fill="rgb(254,146,11)" fg:x="1902" fg:w="9"/><text x="4.1824%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.9078%" y="53" width="0.0613%" height="15" fill="rgb(244,219,2)" fg:x="1911" fg:w="30"/><text x="4.2008%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.11%)</title><rect x="3.9078%" y="69" width="0.1125%" height="15" fill="rgb(205,166,4)" fg:x="1911" fg:w="55"/><text x="4.2008%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.24%)</title><rect x="3.8894%" y="85" width="0.2372%" height="15" fill="rgb(246,15,21)" fg:x="1902" fg:w="116"/><text x="4.1824%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.35%)</title><rect x="3.8894%" y="101" width="0.3456%" height="15" fill="rgb(246,1,53)" fg:x="1902" fg:w="169"/><text x="4.1824%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.36%)</title><rect x="3.8894%" y="117" width="0.3558%" height="15" fill="rgb(208,36,27)" fg:x="1902" fg:w="174"/><text x="4.1824%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 0.75%)</title><rect x="3.7156%" y="133" width="0.7505%" height="15" fill="rgb(238,175,45)" fg:x="1817" fg:w="367"/><text x="4.0086%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.25%)</title><rect x="3.5050%" y="149" width="1.2535%" height="15" fill="rgb(224,24,19)" fg:x="1714" fg:w="613"/><text x="3.7979%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="4.7585%" y="149" width="0.1513%" height="15" fill="rgb(232,137,10)" fg:x="2327" fg:w="74"/><text x="5.0515%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="4.9098%" y="149" width="0.1104%" height="15" fill="rgb(254,43,11)" fg:x="2401" fg:w="54"/><text x="5.2028%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 1.66%)</title><rect x="3.5050%" y="165" width="1.6605%" height="15" fill="rgb(240,77,12)" fg:x="1714" fg:w="812"/><text x="3.7979%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="5.1654%" y="165" width="0.1145%" height="15" fill="rgb(236,190,14)" fg:x="2526" fg:w="56"/><text x="5.4584%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.20%)</title><rect x="5.2799%" y="165" width="0.1984%" height="15" fill="rgb(250,93,10)" fg:x="2582" fg:w="97"/><text x="5.5729%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="5.4783%" y="149" width="0.8323%" height="15" fill="rgb(214,1,32)" fg:x="2679" fg:w="407"/><text x="5.7713%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.3106%" y="149" width="0.0327%" height="15" fill="rgb(240,67,37)" fg:x="3086" fg:w="16"/><text x="6.6035%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="6.3433%" y="85" width="0.1840%" height="15" fill="rgb(218,226,6)" fg:x="3102" fg:w="90"/><text x="6.6363%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="6.3433%" y="101" width="0.2045%" height="15" fill="rgb(230,165,46)" fg:x="3102" fg:w="100"/><text x="6.6363%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="6.3433%" y="117" width="0.2106%" height="15" fill="rgb(225,184,33)" fg:x="3102" fg:w="103"/><text x="6.6363%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.12%)</title><rect x="6.5539%" y="85" width="0.1227%" height="15" fill="rgb(214,37,13)" fg:x="3205" fg:w="60"/><text x="6.8469%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.17%)</title><rect x="6.5539%" y="101" width="0.1738%" height="15" fill="rgb(229,76,13)" fg:x="3205" fg:w="85"/><text x="6.8469%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.7277%" y="53" width="0.0184%" height="15" fill="rgb(215,188,51)" fg:x="3290" fg:w="9"/><text x="7.0207%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="6.7461%" y="37" width="0.0613%" height="15" fill="rgb(235,152,53)" fg:x="3299" fg:w="30"/><text x="7.0391%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.11%)</title><rect x="6.7461%" y="53" width="0.1125%" height="15" fill="rgb(217,11,33)" fg:x="3299" fg:w="55"/><text x="7.0391%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.24%)</title><rect x="6.7277%" y="69" width="0.2372%" height="15" fill="rgb(229,35,23)" fg:x="3290" fg:w="116"/><text x="7.0207%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.35%)</title><rect x="6.7277%" y="85" width="0.3456%" height="15" fill="rgb(236,169,22)" fg:x="3290" fg:w="169"/><text x="7.0207%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.36%)</title><rect x="6.7277%" y="101" width="0.3558%" height="15" fill="rgb(237,147,24)" fg:x="3290" fg:w="174"/><text x="7.0207%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 0.75%)</title><rect x="6.5539%" y="117" width="0.7505%" height="15" fill="rgb(221,107,38)" fg:x="3205" fg:w="367"/><text x="6.8469%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.25%)</title><rect x="6.3433%" y="133" width="1.2535%" height="15" fill="rgb(234,34,38)" fg:x="3102" fg:w="613"/><text x="6.6363%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="7.5968%" y="133" width="0.1513%" height="15" fill="rgb(244,9,7)" fg:x="3715" fg:w="74"/><text x="7.8898%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="7.7481%" y="133" width="0.1104%" height="15" fill="rgb(217,37,29)" fg:x="3789" fg:w="54"/><text x="8.0411%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 1.66%)</title><rect x="6.3433%" y="149" width="1.6605%" height="15" fill="rgb(244,196,53)" fg:x="3102" fg:w="812"/><text x="6.6363%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="8.0038%" y="133" width="0.1247%" height="15" fill="rgb(242,164,16)" fg:x="3914" fg:w="61"/><text x="8.2967%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.26%)</title><rect x="8.1285%" y="133" width="0.2577%" height="15" fill="rgb(205,183,10)" fg:x="3975" fg:w="126"/><text x="8.4215%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="8.3862%" y="133" width="0.1145%" height="15" fill="rgb(247,144,26)" fg:x="4101" fg:w="56"/><text x="8.6791%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 0.62%)</title><rect x="8.0038%" y="149" width="0.6237%" height="15" fill="rgb(225,122,8)" fg:x="3914" fg:w="305"/><text x="8.2967%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="8.6275%" y="117" width="0.1840%" height="15" fill="rgb(243,94,22)" fg:x="4219" fg:w="90"/><text x="8.9204%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="8.6275%" y="133" width="0.2045%" height="15" fill="rgb(254,179,25)" fg:x="4219" fg:w="100"/><text x="8.9204%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="8.6275%" y="149" width="0.2106%" height="15" fill="rgb(218,32,6)" fg:x="4219" fg:w="103"/><text x="8.9204%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,868 instructions, 3.82%)</title><rect x="5.4783%" y="165" width="3.8199%" height="15" fill="rgb(229,91,41)" fg:x="2679" fg:w="1868"/><text x="5.7713%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="9.2982%" y="165" width="0.1145%" height="15" fill="rgb(208,112,18)" fg:x="4547" fg:w="56"/><text x="9.5912%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.4127%" y="165" width="0.0266%" height="15" fill="rgb(241,128,25)" fg:x="4603" fg:w="13"/><text x="9.7057%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.4393%" y="165" width="0.0266%" height="15" fill="rgb(244,49,43)" fg:x="4616" fg:w="13"/><text x="9.7323%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="9.4659%" y="165" width="0.0450%" height="15" fill="rgb(220,70,51)" fg:x="4629" fg:w="22"/><text x="9.7588%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="9.5109%" y="117" width="0.1840%" height="15" fill="rgb(231,4,35)" fg:x="4651" fg:w="90"/><text x="9.8038%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="9.5109%" y="133" width="0.2045%" height="15" fill="rgb(222,155,37)" fg:x="4651" fg:w="100"/><text x="9.8038%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="9.5109%" y="149" width="0.2106%" height="15" fill="rgb(254,173,41)" fg:x="4651" fg:w="103"/><text x="9.8038%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (183 instructions, 0.37%)</title><rect x="9.5109%" y="165" width="0.3742%" height="15" fill="rgb(232,111,14)" fg:x="4651" fg:w="183"/><text x="9.8038%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="9.8851%" y="101" width="0.1840%" height="15" fill="rgb(254,78,34)" fg:x="4834" fg:w="90"/><text x="10.1780%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="9.8851%" y="117" width="0.2045%" height="15" fill="rgb(244,94,12)" fg:x="4834" fg:w="100"/><text x="10.1780%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="9.8851%" y="133" width="0.2106%" height="15" fill="rgb(241,29,12)" fg:x="4834" fg:w="103"/><text x="10.1780%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.27%)</title><rect x="9.8851%" y="149" width="0.2720%" height="15" fill="rgb(220,62,48)" fg:x="4834" fg:w="133"/><text x="10.1780%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (201 instructions, 0.41%)</title><rect x="9.8851%" y="165" width="0.4110%" height="15" fill="rgb(222,224,4)" fg:x="4834" fg:w="201"/><text x="10.1780%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.2961%" y="133" width="0.1840%" height="15" fill="rgb(245,93,37)" fg:x="5035" fg:w="90"/><text x="10.5891%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.2961%" y="149" width="0.2045%" height="15" fill="rgb(254,35,15)" fg:x="5035" fg:w="100"/><text x="10.5891%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="10.2961%" y="165" width="0.2106%" height="15" fill="rgb(247,223,20)" fg:x="5035" fg:w="103"/><text x="10.5891%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="10.5067%" y="165" width="0.1656%" height="15" fill="rgb(207,98,17)" fg:x="5138" fg:w="81"/><text x="10.7997%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.6724%" y="133" width="0.1840%" height="15" fill="rgb(230,13,48)" fg:x="5219" fg:w="90"/><text x="10.9653%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.6724%" y="149" width="0.2045%" height="15" fill="rgb(205,222,33)" fg:x="5219" fg:w="100"/><text x="10.9653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.8830%" y="133" width="0.1840%" height="15" fill="rgb(226,34,42)" fg:x="5322" fg:w="90"/><text x="11.1760%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.8830%" y="149" width="0.2045%" height="15" fill="rgb(214,217,30)" fg:x="5322" fg:w="100"/><text x="11.1760%" y="159.50"></text></g><g><title>__rust_alloc (206 instructions, 0.42%)</title><rect x="10.6724%" y="165" width="0.4213%" height="15" fill="rgb(254,184,47)" fg:x="5219" fg:w="206"/><text x="10.9653%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.03%)</title><rect x="11.0936%" y="165" width="0.0286%" height="15" fill="rgb(243,58,26)" fg:x="5425" fg:w="14"/><text x="11.3866%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="11.1222%" y="165" width="0.1656%" height="15" fill="rgb(251,33,12)" fg:x="5439" fg:w="81"/><text x="11.4152%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.84%)</title><rect x="11.2879%" y="165" width="0.8405%" height="15" fill="rgb(243,89,1)" fg:x="5520" fg:w="411"/><text x="11.5809%" y="175.50"></text></g><g><title>memcpy (366 instructions, 0.75%)</title><rect x="12.1283%" y="165" width="0.7484%" height="15" fill="rgb(213,55,8)" fg:x="5931" fg:w="366"/><text x="12.4213%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,237 instructions, 14.80%)</title><rect x="0.7668%" y="181" width="14.7990%" height="15" fill="rgb(242,28,15)" fg:x="375" fg:w="7237"/><text x="1.0598%" y="191.50">candid::de::IDLDese..</text></g><g><title>memcpy (381 instructions, 0.78%)</title><rect x="15.5658%" y="181" width="0.7791%" height="15" fill="rgb(206,183,48)" fg:x="7612" fg:w="381"/><text x="15.8588%" y="191.50"></text></g><g><title>memcpy (381 instructions, 0.78%)</title><rect x="16.3449%" y="181" width="0.7791%" height="15" fill="rgb(225,24,21)" fg:x="7993" fg:w="381"/><text x="16.6379%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.01%)</title><rect x="17.1240%" y="165" width="0.0123%" height="15" fill="rgb(220,113,10)" fg:x="8374" fg:w="6"/><text x="17.4170%" y="175.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.09%)</title><rect x="17.1240%" y="181" width="0.0920%" height="15" fill="rgb(254,69,14)" fg:x="8374" fg:w="45"/><text x="17.4170%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.18%)</title><rect x="17.2161%" y="133" width="0.1820%" height="15" fill="rgb(208,20,25)" fg:x="8419" fg:w="89"/><text x="17.5090%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.20%)</title><rect x="17.2161%" y="149" width="0.2024%" height="15" fill="rgb(214,217,12)" fg:x="8419" fg:w="99"/><text x="17.5090%" y="159.50"></text></g><g><title>__rust_alloc (102 instructions, 0.21%)</title><rect x="17.2161%" y="165" width="0.2086%" height="15" fill="rgb(226,26,32)" fg:x="8419" fg:w="102"/><text x="17.5090%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (148 instructions, 0.30%)</title><rect x="17.2161%" y="181" width="0.3026%" height="15" fill="rgb(237,178,45)" fg:x="8419" fg:w="148"/><text x="17.5090%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.5187%" y="149" width="0.0102%" height="15" fill="rgb(210,10,39)" fg:x="8567" fg:w="5"/><text x="17.8117%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="17.5289%" y="133" width="0.1084%" height="15" fill="rgb(220,227,31)" fg:x="8572" fg:w="53"/><text x="17.8219%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.18%)</title><rect x="17.6373%" y="133" width="0.1820%" height="15" fill="rgb(209,70,1)" fg:x="8625" fg:w="89"/><text x="17.9303%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.33%)</title><rect x="17.8193%" y="133" width="0.3292%" height="15" fill="rgb(211,122,10)" fg:x="8714" fg:w="161"/><text x="18.1123%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.12%)</title><rect x="17.5289%" y="149" width="1.1165%" height="15" fill="rgb(227,204,5)" fg:x="8572" fg:w="546"/><text x="17.8219%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 1.63%)</title><rect x="17.5187%" y="165" width="1.6277%" height="15" fill="rgb(220,102,51)" fg:x="8567" fg:w="796"/><text x="17.8117%" y="175.50"></text></g><g><title>candid::types::internal::env_add (822 instructions, 1.68%)</title><rect x="17.5187%" y="181" width="1.6809%" height="15" fill="rgb(215,197,36)" fg:x="8567" fg:w="822"/><text x="17.8117%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.11%)</title><rect x="19.1996%" y="133" width="0.1104%" height="15" fill="rgb(246,217,10)" fg:x="9389" fg:w="54"/><text x="19.4926%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (178 instructions, 0.36%)</title><rect x="19.1996%" y="149" width="0.3640%" height="15" fill="rgb(212,62,49)" fg:x="9389" fg:w="178"/><text x="19.4926%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (188 instructions, 0.38%)</title><rect x="19.1996%" y="165" width="0.3844%" height="15" fill="rgb(218,141,8)" fg:x="9389" fg:w="188"/><text x="19.4926%" y="175.50"></text></g><g><title>__rust_alloc (191 instructions, 0.39%)</title><rect x="19.1996%" y="181" width="0.3906%" height="15" fill="rgb(248,198,51)" fg:x="9389" fg:w="191"/><text x="19.4926%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.5902%" y="149" width="0.0102%" height="15" fill="rgb(237,183,54)" fg:x="9580" fg:w="5"/><text x="19.8832%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="19.6004%" y="133" width="0.1084%" height="15" fill="rgb(231,94,21)" fg:x="9585" fg:w="53"/><text x="19.8934%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.18%)</title><rect x="19.7088%" y="133" width="0.1820%" height="15" fill="rgb(248,104,6)" fg:x="9638" fg:w="89"/><text x="20.0018%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.33%)</title><rect x="19.8908%" y="133" width="0.3292%" height="15" fill="rgb(223,227,0)" fg:x="9727" fg:w="161"/><text x="20.1838%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.12%)</title><rect x="19.6004%" y="149" width="1.1165%" height="15" fill="rgb(245,161,32)" fg:x="9585" fg:w="546"/><text x="19.8934%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.14%)</title><rect x="20.7169%" y="149" width="0.1391%" height="15" fill="rgb(245,218,1)" fg:x="10131" fg:w="68"/><text x="21.0099%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="20.8560%" y="133" width="0.1656%" height="15" fill="rgb(226,33,26)" fg:x="10199" fg:w="81"/><text x="21.1490%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.23%)</title><rect x="20.8560%" y="149" width="0.2270%" height="15" fill="rgb(215,101,12)" fg:x="10199" fg:w="111"/><text x="21.1490%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 1.85%)</title><rect x="19.5902%" y="165" width="1.8486%" height="15" fill="rgb(221,133,48)" fg:x="9580" fg:w="904"/><text x="19.8832%" y="175.50"></text></g><g><title>candid::types::internal::env_add (930 instructions, 1.90%)</title><rect x="19.5902%" y="181" width="1.9018%" height="15" fill="rgb(210,152,28)" fg:x="9580" fg:w="930"/><text x="19.8832%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.01%)</title><rect x="21.4920%" y="149" width="0.0102%" height="15" fill="rgb(241,1,0)" fg:x="10510" fg:w="5"/><text x="21.7849%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="21.5022%" y="117" width="0.1084%" height="15" fill="rgb(222,56,34)" fg:x="10515" fg:w="53"/><text x="21.7952%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.16%)</title><rect x="21.5022%" y="133" width="0.1595%" height="15" fill="rgb(254,79,4)" fg:x="10515" fg:w="78"/><text x="21.7952%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 0.61%)</title><rect x="21.5022%" y="149" width="0.6135%" height="15" fill="rgb(225,6,30)" fg:x="10515" fg:w="300"/><text x="21.7952%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.06%)</title><rect x="22.1157%" y="149" width="0.0552%" height="15" fill="rgb(245,226,1)" fg:x="10815" fg:w="27"/><text x="22.4086%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.1709%" y="149" width="0.0225%" height="15" fill="rgb(239,198,45)" fg:x="10842" fg:w="11"/><text x="22.4638%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 1.05%)</title><rect x="21.4920%" y="165" width="1.0531%" height="15" fill="rgb(225,25,16)" fg:x="10510" fg:w="515"/><text x="21.7849%" y="175.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 1.13%)</title><rect x="21.4920%" y="181" width="1.1288%" height="15" fill="rgb(228,123,43)" fg:x="10510" fg:w="552"/><text x="21.7849%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.08%)</title><rect x="22.6208%" y="181" width="0.0757%" height="15" fill="rgb(231,123,54)" fg:x="11062" fg:w="37"/><text x="22.9137%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.25%)</title><rect x="22.6964%" y="165" width="0.2515%" height="15" fill="rgb(235,121,45)" fg:x="11099" fg:w="123"/><text x="22.9894%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.25%)</title><rect x="23.0093%" y="165" width="0.2515%" height="15" fill="rgb(241,115,52)" fg:x="11252" fg:w="123"/><text x="23.3023%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 0.63%)</title><rect x="22.6964%" y="181" width="0.6257%" height="15" fill="rgb(253,103,12)" fg:x="11099" fg:w="306"/><text x="22.9894%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (104 instructions, 0.21%)</title><rect x="23.3222%" y="181" width="0.2127%" height="15" fill="rgb(243,219,50)" fg:x="11405" fg:w="104"/><text x="23.6151%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5348%" y="181" width="0.0225%" height="15" fill="rgb(223,72,39)" fg:x="11509" fg:w="11"/><text x="23.8278%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5573%" y="181" width="0.0225%" height="15" fill="rgb(250,47,11)" fg:x="11520" fg:w="11"/><text x="23.8503%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5798%" y="181" width="0.0225%" height="15" fill="rgb(248,50,6)" fg:x="11531" fg:w="11"/><text x="23.8728%" y="191.50"></text></g><g><title>memcpy (411 instructions, 0.84%)</title><rect x="23.6023%" y="181" width="0.8405%" height="15" fill="rgb(235,94,12)" fg:x="11542" fg:w="411"/><text x="23.8953%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="24.4428%" y="165" width="0.0450%" height="15" fill="rgb(211,125,29)" fg:x="11953" fg:w="22"/><text x="24.7357%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.35%)</title><rect x="24.4878%" y="165" width="0.3456%" height="15" fill="rgb(226,92,15)" fg:x="11975" fg:w="169"/><text x="24.7807%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.15%)</title><rect x="24.8333%" y="133" width="0.1452%" height="15" fill="rgb(239,118,4)" fg:x="12144" fg:w="71"/><text x="25.1263%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 0.44%)</title><rect x="24.8333%" y="149" width="0.4417%" height="15" fill="rgb(225,61,14)" fg:x="12144" fg:w="216"/><text x="25.1263%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 0.50%)</title><rect x="24.8333%" y="165" width="0.5030%" height="15" fill="rgb(240,5,20)" fg:x="12144" fg:w="246"/><text x="25.1263%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="25.3364%" y="165" width="0.0225%" height="15" fill="rgb(222,41,47)" fg:x="12390" fg:w="11"/><text x="25.6294%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="25.3589%" y="165" width="0.0102%" height="15" fill="rgb(223,13,3)" fg:x="12401" fg:w="5"/><text x="25.6518%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (547 instructions, 1.12%)</title><rect x="24.4428%" y="181" width="1.1186%" height="15" fill="rgb(241,160,9)" fg:x="11953" fg:w="547"/><text x="24.7357%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.11%)</title><rect x="25.5613%" y="165" width="0.1104%" height="15" fill="rgb(246,68,6)" fg:x="12500" fg:w="54"/><text x="25.8543%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.15%)</title><rect x="25.6718%" y="165" width="0.1452%" height="15" fill="rgb(208,85,34)" fg:x="12554" fg:w="71"/><text x="25.9647%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.42%)</title><rect x="25.5613%" y="181" width="0.4192%" height="15" fill="rgb(244,143,22)" fg:x="12500" fg:w="205"/><text x="25.8543%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,899 instructions, 26.38%)</title><rect x="0.4356%" y="197" width="26.3772%" height="15" fill="rgb(232,181,20)" fg:x="213" fg:w="12899"/><text x="0.7285%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>heap::MAP::__getit (5 instructions, 0.01%)</title><rect x="26.8128%" y="197" width="0.0102%" height="15" fill="rgb(223,17,36)" fg:x="13112" fg:w="5"/><text x="27.1058%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="26.8230%" y="197" width="1.3640%" height="15" fill="rgb(239,45,51)" fg:x="13117" fg:w="667"/><text x="27.1160%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="28.1870%" y="197" width="1.4233%" height="15" fill="rgb(220,198,45)" fg:x="13784" fg:w="696"/><text x="28.4800%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.29%)</title><rect x="29.6102%" y="197" width="1.2862%" height="15" fill="rgb(227,203,47)" fg:x="14480" fg:w="629"/><text x="29.9032%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="30.8965%" y="197" width="1.3640%" height="15" fill="rgb(231,193,50)" fg:x="15109" fg:w="667"/><text x="31.1895%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="32.2604%" y="197" width="1.3640%" height="15" fill="rgb(228,15,32)" fg:x="15776" fg:w="667"/><text x="32.5534%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (716 instructions, 1.46%)</title><rect x="33.6244%" y="197" width="1.4642%" height="15" fill="rgb(236,79,51)" fg:x="16443" fg:w="716"/><text x="33.9174%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="35.0885%" y="197" width="1.4233%" height="15" fill="rgb(222,110,46)" fg:x="17159" fg:w="696"/><text x="35.3815%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="36.5118%" y="197" width="1.3640%" height="15" fill="rgb(237,5,10)" fg:x="17855" fg:w="667"/><text x="36.8048%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="37.8758%" y="197" width="1.3640%" height="15" fill="rgb(231,143,19)" fg:x="18522" fg:w="667"/><text x="38.1687%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="39.2397%" y="197" width="1.3640%" height="15" fill="rgb(227,222,6)" fg:x="19189" fg:w="667"/><text x="39.5327%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="40.6037%" y="197" width="1.4233%" height="15" fill="rgb(246,184,9)" fg:x="19856" fg:w="696"/><text x="40.8966%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="42.0269%" y="197" width="1.4233%" height="15" fill="rgb(229,122,15)" fg:x="20552" fg:w="696"/><text x="42.3199%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 instructions, 1.35%)</title><rect x="43.4502%" y="197" width="1.3455%" height="15" fill="rgb(254,217,29)" fg:x="21248" fg:w="658"/><text x="43.7431%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="44.7957%" y="197" width="1.3640%" height="15" fill="rgb(242,177,40)" fg:x="21906" fg:w="667"/><text x="45.0887%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="46.1597%" y="197" width="1.3640%" height="15" fill="rgb(212,83,32)" fg:x="22573" fg:w="667"/><text x="46.4526%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="47.5236%" y="197" width="1.3640%" height="15" fill="rgb(233,215,54)" fg:x="23240" fg:w="667"/><text x="47.8166%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="48.8876%" y="197" width="1.3640%" height="15" fill="rgb(232,196,25)" fg:x="23907" fg:w="667"/><text x="49.1805%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="50.2515%" y="197" width="1.3640%" height="15" fill="rgb(206,9,16)" fg:x="24574" fg:w="667"/><text x="50.5445%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 instructions, 1.35%)</title><rect x="51.6155%" y="197" width="1.3455%" height="15" fill="rgb(237,68,16)" fg:x="25241" fg:w="658"/><text x="51.9084%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="52.9610%" y="197" width="1.3640%" height="15" fill="rgb(235,70,32)" fg:x="25899" fg:w="667"/><text x="53.2540%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="54.3250%" y="197" width="1.3640%" height="15" fill="rgb(208,164,18)" fg:x="26566" fg:w="667"/><text x="54.6179%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="55.6889%" y="197" width="1.4233%" height="15" fill="rgb(248,140,15)" fg:x="27233" fg:w="696"/><text x="55.9819%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="57.1122%" y="197" width="1.3640%" height="15" fill="rgb(224,217,24)" fg:x="27929" fg:w="667"/><text x="57.4052%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="58.4761%" y="197" width="1.4233%" height="15" fill="rgb(243,4,1)" fg:x="28596" fg:w="696"/><text x="58.7691%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="59.8994%" y="197" width="1.3640%" height="15" fill="rgb(225,62,37)" fg:x="29292" fg:w="667"/><text x="60.1924%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="61.2633%" y="197" width="1.3640%" height="15" fill="rgb(231,131,0)" fg:x="29959" fg:w="667"/><text x="61.5563%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="62.6273%" y="197" width="1.4233%" height="15" fill="rgb(218,36,54)" fg:x="30626" fg:w="696"/><text x="62.9203%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="64.0506%" y="197" width="1.3640%" height="15" fill="rgb(211,43,47)" fg:x="31322" fg:w="667"/><text x="64.3435%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.29%)</title><rect x="65.4145%" y="197" width="1.2862%" height="15" fill="rgb(217,9,10)" fg:x="31989" fg:w="629"/><text x="65.7075%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (687 instructions, 1.40%)</title><rect x="66.7007%" y="197" width="1.4049%" height="15" fill="rgb(231,196,39)" fg:x="32618" fg:w="687"/><text x="66.9937%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="68.1056%" y="197" width="1.3640%" height="15" fill="rgb(240,32,5)" fg:x="33305" fg:w="667"/><text x="68.3986%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="69.4696%" y="197" width="1.3640%" height="15" fill="rgb(246,192,43)" fg:x="33972" fg:w="667"/><text x="69.7625%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="70.8335%" y="197" width="1.3640%" height="15" fill="rgb(220,132,47)" fg:x="34639" fg:w="667"/><text x="71.1265%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="72.1975%" y="197" width="1.3640%" height="15" fill="rgb(215,59,25)" fg:x="35306" fg:w="667"/><text x="72.4904%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="73.5614%" y="197" width="1.3640%" height="15" fill="rgb(252,68,42)" fg:x="35973" fg:w="667"/><text x="73.8544%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="74.9254%" y="197" width="1.4233%" height="15" fill="rgb(220,92,17)" fg:x="36640" fg:w="696"/><text x="75.2183%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="76.3486%" y="197" width="1.3640%" height="15" fill="rgb(226,106,19)" fg:x="37336" fg:w="667"/><text x="76.6416%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="77.7126%" y="197" width="1.4826%" height="15" fill="rgb(246,94,14)" fg:x="38003" fg:w="725"/><text x="78.0055%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="79.1951%" y="197" width="1.4826%" height="15" fill="rgb(250,109,5)" fg:x="38728" fg:w="725"/><text x="79.4881%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.29%)</title><rect x="80.6777%" y="197" width="1.2862%" height="15" fill="rgb(247,100,43)" fg:x="39453" fg:w="629"/><text x="80.9707%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="81.9639%" y="197" width="1.3640%" height="15" fill="rgb(224,37,3)" fg:x="40082" fg:w="667"/><text x="82.2569%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="83.3279%" y="197" width="1.4233%" height="15" fill="rgb(212,98,3)" fg:x="40749" fg:w="696"/><text x="83.6208%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="84.7511%" y="197" width="1.3640%" height="15" fill="rgb(206,78,49)" fg:x="41445" fg:w="667"/><text x="85.0441%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="86.1151%" y="197" width="1.3640%" height="15" fill="rgb(210,32,30)" fg:x="42112" fg:w="667"/><text x="86.4081%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="87.4790%" y="197" width="1.4233%" height="15" fill="rgb(237,76,36)" fg:x="42779" fg:w="696"/><text x="87.7720%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.29%)</title><rect x="88.9023%" y="197" width="1.2862%" height="15" fill="rgb(253,14,48)" fg:x="43475" fg:w="629"/><text x="89.1953%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="90.1885%" y="197" width="1.4233%" height="15" fill="rgb(254,194,45)" fg:x="44104" fg:w="696"/><text x="90.4815%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="91.6118%" y="197" width="1.3640%" height="15" fill="rgb(233,16,43)" fg:x="44800" fg:w="667"/><text x="91.9048%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="92.9757%" y="197" width="1.3640%" height="15" fill="rgb(232,142,30)" fg:x="45467" fg:w="667"/><text x="93.2687%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="94.3397%" y="197" width="1.3640%" height="15" fill="rgb(252,103,47)" fg:x="46134" fg:w="667"/><text x="94.6327%" y="207.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="95.7037%" y="165" width="0.0102%" height="15" fill="rgb(252,22,26)" fg:x="46801" fg:w="5"/><text x="95.9966%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="95.7139%" y="149" width="0.1104%" height="15" fill="rgb(217,76,15)" fg:x="46806" fg:w="54"/><text x="96.0068%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 instructions, 0.17%)</title><rect x="95.7139%" y="165" width="0.1718%" height="15" fill="rgb(239,103,48)" fg:x="46806" fg:w="84"/><text x="96.0068%" y="175.50"></text></g><g><title>memset (136 instructions, 0.28%)</title><rect x="95.8856%" y="165" width="0.2781%" height="15" fill="rgb(219,38,43)" fg:x="46890" fg:w="136"/><text x="96.1786%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (382 instructions, 0.78%)</title><rect x="95.7037%" y="181" width="0.7812%" height="15" fill="rgb(218,227,17)" fg:x="46801" fg:w="382"/><text x="95.9966%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.16%)</title><rect x="96.4848%" y="165" width="0.1595%" height="15" fill="rgb(251,102,26)" fg:x="47183" fg:w="78"/><text x="96.7778%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="96.6443%" y="101" width="0.1840%" height="15" fill="rgb(212,98,7)" fg:x="47261" fg:w="90"/><text x="96.9373%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="96.6443%" y="117" width="0.2045%" height="15" fill="rgb(205,17,4)" fg:x="47261" fg:w="100"/><text x="96.9373%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="96.6443%" y="133" width="0.2106%" height="15" fill="rgb(218,145,13)" fg:x="47261" fg:w="103"/><text x="96.9373%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.27%)</title><rect x="96.6443%" y="149" width="0.2720%" height="15" fill="rgb(226,223,20)" fg:x="47261" fg:w="133"/><text x="96.9373%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 0.40%)</title><rect x="96.6443%" y="165" width="0.4049%" height="15" fill="rgb(240,30,6)" fg:x="47261" fg:w="198"/><text x="96.9373%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.0492%" y="165" width="0.0225%" height="15" fill="rgb(209,139,50)" fg:x="47459" fg:w="11"/><text x="97.3422%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.0717%" y="165" width="0.0225%" height="15" fill="rgb(254,179,25)" fg:x="47470" fg:w="11"/><text x="97.3647%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.16%)</title><rect x="97.0942%" y="165" width="0.1554%" height="15" fill="rgb(213,54,16)" fg:x="47481" fg:w="76"/><text x="97.3872%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.03%)</title><rect x="97.2496%" y="165" width="0.0286%" height="15" fill="rgb(242,62,24)" fg:x="47557" fg:w="14"/><text x="97.5426%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (670 instructions, 1.37%)</title><rect x="96.4848%" y="181" width="1.3701%" height="15" fill="rgb(250,13,27)" fg:x="47183" fg:w="670"/><text x="96.7778%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="97.8549%" y="181" width="0.0102%" height="15" fill="rgb(238,147,31)" fg:x="47853" fg:w="5"/><text x="98.1479%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="97.8651%" y="181" width="0.1104%" height="15" fill="rgb(219,149,50)" fg:x="47858" fg:w="54"/><text x="98.1581%" y="191.50"></text></g><g><title>candid::utils::write_args (1,175 instructions, 2.40%)</title><rect x="95.7037%" y="197" width="2.4028%" height="15" fill="rgb(251,103,27)" fg:x="46801" fg:w="1175"/><text x="95.9966%" y="207.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.11%)</title><rect x="98.2721%" y="181" width="0.1104%" height="15" fill="rgb(250,103,44)" fg:x="48057" fg:w="54"/><text x="98.5650%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.15%)</title><rect x="98.3825%" y="181" width="0.1452%" height="15" fill="rgb(249,189,2)" fg:x="48111" fg:w="71"/><text x="98.6754%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (332 instructions, 0.68%)</title><rect x="98.1064%" y="197" width="0.6789%" height="15" fill="rgb(238,119,13)" fg:x="47976" fg:w="332"/><text x="98.3994%" y="207.50"></text></g><g><title>all (48,902 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,17,42)" fg:x="0" fg:w="48902"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (48,902 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,138,53)" fg:x="0" fg:w="48902"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>