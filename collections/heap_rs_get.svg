<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="48389"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0496%" height="15" fill="rgb(211,178,26)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.0496%" y="197" width="0.1695%" height="15" fill="rgb(237,124,42)" fg:x="24" fg:w="82"/><text x="0.3426%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.2191%" y="197" width="0.1695%" height="15" fill="rgb(246,215,51)" fg:x="106" fg:w="82"/><text x="0.5120%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.3885%" y="165" width="0.1695%" height="15" fill="rgb(237,140,28)" fg:x="188" fg:w="82"/><text x="0.6815%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="0.5580%" y="149" width="0.1695%" height="15" fill="rgb(251,69,27)" fg:x="270" fg:w="82"/><text x="0.8509%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7274%" y="133" width="0.0124%" height="15" fill="rgb(242,201,3)" fg:x="352" fg:w="6"/><text x="1.0204%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="0.7274%" y="149" width="0.9155%" height="15" fill="rgb(235,104,47)" fg:x="352" fg:w="443"/><text x="1.0204%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="1.6429%" y="149" width="0.1963%" height="15" fill="rgb(220,188,2)" fg:x="795" fg:w="95"/><text x="1.9359%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8393%" y="149" width="0.1240%" height="15" fill="rgb(205,30,40)" fg:x="890" fg:w="60"/><text x="2.1322%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9633%" y="149" width="0.1240%" height="15" fill="rgb(211,158,48)" fg:x="950" fg:w="60"/><text x="2.2562%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0873%" y="149" width="0.1240%" height="15" fill="rgb(251,28,18)" fg:x="1010" fg:w="60"/><text x="2.3802%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.2112%" y="149" width="0.1240%" height="15" fill="rgb(220,211,30)" fg:x="1070" fg:w="60"/><text x="2.5042%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="2.3352%" y="149" width="0.1695%" height="15" fill="rgb(234,25,14)" fg:x="1130" fg:w="82"/><text x="2.6282%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.5047%" y="149" width="0.1447%" height="15" fill="rgb(214,88,15)" fg:x="1212" fg:w="70"/><text x="2.7977%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.6494%" y="133" width="0.0124%" height="15" fill="rgb(233,50,27)" fg:x="1282" fg:w="6"/><text x="2.9423%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="2.6494%" y="149" width="0.9155%" height="15" fill="rgb(243,8,29)" fg:x="1282" fg:w="443"/><text x="2.9423%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.5649%" y="149" width="0.0393%" height="15" fill="rgb(231,35,5)" fg:x="1725" fg:w="19"/><text x="3.8578%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="3.6041%" y="133" width="0.1695%" height="15" fill="rgb(240,174,26)" fg:x="1744" fg:w="82"/><text x="3.8971%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="3.7736%" y="101" width="0.1385%" height="15" fill="rgb(223,172,27)" fg:x="1826" fg:w="67"/><text x="4.0666%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.20%)</title><rect x="3.7736%" y="117" width="0.1984%" height="15" fill="rgb(237,84,23)" fg:x="1826" fg:w="96"/><text x="4.0666%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.9720%" y="69" width="0.0227%" height="15" fill="rgb(232,27,7)" fg:x="1922" fg:w="11"/><text x="4.2649%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.9947%" y="53" width="0.0723%" height="15" fill="rgb(218,130,46)" fg:x="1933" fg:w="35"/><text x="4.2877%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="3.9947%" y="69" width="0.1323%" height="15" fill="rgb(216,159,32)" fg:x="1933" fg:w="64"/><text x="4.2877%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.30%)</title><rect x="3.9720%" y="85" width="0.2976%" height="15" fill="rgb(219,155,42)" fg:x="1922" fg:w="144"/><text x="4.2649%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.43%)</title><rect x="3.9720%" y="101" width="0.4319%" height="15" fill="rgb(245,229,28)" fg:x="1922" fg:w="209"/><text x="4.2649%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.45%)</title><rect x="3.9720%" y="117" width="0.4526%" height="15" fill="rgb(238,175,35)" fg:x="1922" fg:w="219"/><text x="4.2649%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.94%)</title><rect x="3.7736%" y="133" width="0.9444%" height="15" fill="rgb(247,155,13)" fg:x="1826" fg:w="457"/><text x="4.0666%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.40%)</title><rect x="3.6041%" y="149" width="1.3991%" height="15" fill="rgb(213,12,5)" fg:x="1744" fg:w="677"/><text x="3.8971%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="5.0032%" y="149" width="0.1963%" height="15" fill="rgb(249,122,3)" fg:x="2421" fg:w="95"/><text x="5.2962%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.1995%" y="149" width="0.1240%" height="15" fill="rgb(209,130,26)" fg:x="2516" fg:w="60"/><text x="5.4925%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="5.3235%" y="149" width="0.1571%" height="15" fill="rgb(218,131,41)" fg:x="2576" fg:w="76"/><text x="5.6165%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.4806%" y="149" width="0.1447%" height="15" fill="rgb(220,143,20)" fg:x="2652" fg:w="70"/><text x="5.7736%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.6252%" y="117" width="0.0124%" height="15" fill="rgb(211,12,1)" fg:x="2722" fg:w="6"/><text x="5.9182%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="5.6252%" y="133" width="0.9155%" height="15" fill="rgb(216,223,31)" fg:x="2722" fg:w="443"/><text x="5.9182%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.5407%" y="133" width="0.0393%" height="15" fill="rgb(241,101,26)" fg:x="3165" fg:w="19"/><text x="6.8337%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="6.5800%" y="117" width="0.1695%" height="15" fill="rgb(243,228,6)" fg:x="3184" fg:w="82"/><text x="6.8730%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="6.7495%" y="85" width="0.1385%" height="15" fill="rgb(211,225,50)" fg:x="3266" fg:w="67"/><text x="7.0424%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.20%)</title><rect x="6.7495%" y="101" width="0.1984%" height="15" fill="rgb(230,218,24)" fg:x="3266" fg:w="96"/><text x="7.0424%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.9479%" y="53" width="0.0227%" height="15" fill="rgb(223,216,25)" fg:x="3362" fg:w="11"/><text x="7.2408%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.9706%" y="37" width="0.0723%" height="15" fill="rgb(243,7,14)" fg:x="3373" fg:w="35"/><text x="7.2636%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="6.9706%" y="53" width="0.1323%" height="15" fill="rgb(242,217,46)" fg:x="3373" fg:w="64"/><text x="7.2636%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.30%)</title><rect x="6.9479%" y="69" width="0.2976%" height="15" fill="rgb(212,94,24)" fg:x="3362" fg:w="144"/><text x="7.2408%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.43%)</title><rect x="6.9479%" y="85" width="0.4319%" height="15" fill="rgb(238,26,35)" fg:x="3362" fg:w="209"/><text x="7.2408%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.45%)</title><rect x="6.9479%" y="101" width="0.4526%" height="15" fill="rgb(213,77,49)" fg:x="3362" fg:w="219"/><text x="7.2408%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.94%)</title><rect x="6.7495%" y="117" width="0.9444%" height="15" fill="rgb(207,133,12)" fg:x="3266" fg:w="457"/><text x="7.0424%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.40%)</title><rect x="6.5800%" y="133" width="1.3991%" height="15" fill="rgb(224,30,44)" fg:x="3184" fg:w="677"/><text x="6.8730%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="7.9791%" y="133" width="0.1963%" height="15" fill="rgb(239,108,50)" fg:x="3861" fg:w="95"/><text x="8.2721%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="8.1754%" y="133" width="0.1240%" height="15" fill="rgb(232,127,22)" fg:x="3956" fg:w="60"/><text x="8.4684%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="8.2994%" y="117" width="0.1695%" height="15" fill="rgb(209,41,39)" fg:x="4016" fg:w="82"/><text x="8.5924%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.20%)</title><rect x="8.4689%" y="117" width="0.1963%" height="15" fill="rgb(206,64,12)" fg:x="4098" fg:w="95"/><text x="8.7618%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="8.6652%" y="117" width="0.1571%" height="15" fill="rgb(216,145,48)" fg:x="4193" fg:w="76"/><text x="8.9582%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.68%)</title><rect x="8.2994%" y="133" width="0.6820%" height="15" fill="rgb(254,117,12)" fg:x="4016" fg:w="330"/><text x="8.5924%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="8.9814%" y="133" width="0.1695%" height="15" fill="rgb(234,125,20)" fg:x="4346" fg:w="82"/><text x="9.2743%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 4.03%)</title><rect x="5.6252%" y="149" width="4.0340%" height="15" fill="rgb(238,107,2)" fg:x="2722" fg:w="1952"/><text x="5.9182%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="9.6592%" y="149" width="0.1571%" height="15" fill="rgb(246,21,1)" fg:x="4674" fg:w="76"/><text x="9.9522%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8163%" y="149" width="0.0310%" height="15" fill="rgb(238,15,42)" fg:x="4750" fg:w="15"/><text x="10.1092%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8473%" y="149" width="0.0310%" height="15" fill="rgb(254,152,15)" fg:x="4765" fg:w="15"/><text x="10.1402%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8783%" y="149" width="0.0310%" height="15" fill="rgb(231,189,43)" fg:x="4780" fg:w="15"/><text x="10.1712%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="9.9093%" y="149" width="0.0124%" height="15" fill="rgb(215,111,52)" fg:x="4795" fg:w="6"/><text x="10.2022%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="9.9217%" y="133" width="0.1695%" height="15" fill="rgb(212,229,40)" fg:x="4801" fg:w="82"/><text x="10.2146%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.37%)</title><rect x="9.9217%" y="149" width="0.3679%" height="15" fill="rgb(221,39,23)" fg:x="4801" fg:w="178"/><text x="10.2146%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="10.2895%" y="117" width="0.1695%" height="15" fill="rgb(245,87,7)" fg:x="4979" fg:w="82"/><text x="10.5825%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.27%)</title><rect x="10.2895%" y="133" width="0.2687%" height="15" fill="rgb(213,169,5)" fg:x="4979" fg:w="130"/><text x="10.5825%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.44%)</title><rect x="10.2895%" y="149" width="0.4443%" height="15" fill="rgb(253,35,52)" fg:x="4979" fg:w="215"/><text x="10.5825%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="10.7338%" y="149" width="0.1695%" height="15" fill="rgb(219,79,45)" fg:x="5194" fg:w="82"/><text x="11.0268%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.9033%" y="149" width="0.1839%" height="15" fill="rgb(254,12,2)" fg:x="5276" fg:w="89"/><text x="11.1963%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="11.0872%" y="149" width="0.1695%" height="15" fill="rgb(233,99,10)" fg:x="5365" fg:w="82"/><text x="11.3802%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="11.2567%" y="149" width="0.1695%" height="15" fill="rgb(206,42,50)" fg:x="5447" fg:w="82"/><text x="11.5497%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.4344%" y="149" width="0.1839%" height="15" fill="rgb(238,128,24)" fg:x="5533" fg:w="89"/><text x="11.7274%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.81%)</title><rect x="11.6183%" y="149" width="0.8101%" height="15" fill="rgb(232,135,52)" fg:x="5622" fg:w="392"/><text x="11.9113%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.81%)</title><rect x="12.4284%" y="149" width="0.8101%" height="15" fill="rgb(242,110,25)" fg:x="6014" fg:w="392"/><text x="12.7214%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.04%)</title><rect x="13.2385%" y="149" width="1.0416%" height="15" fill="rgb(221,157,12)" fg:x="6406" fg:w="504"/><text x="13.5315%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 16.23%)</title><rect x="0.5580%" y="165" width="16.2310%" height="15" fill="rgb(245,111,9)" fg:x="270" fg:w="7854"/><text x="0.8509%" y="175.50">candid::de::IDLDeseri..</text></g><g><title>memcpy (344 instructions, 0.71%)</title><rect x="16.7889%" y="165" width="0.7109%" height="15" fill="rgb(213,31,22)" fg:x="8124" fg:w="344"/><text x="17.0819%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.05%)</title><rect x="17.4998%" y="165" width="0.0475%" height="15" fill="rgb(216,71,4)" fg:x="8468" fg:w="23"/><text x="17.7928%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="17.5474%" y="165" width="0.1695%" height="15" fill="rgb(210,207,15)" fg:x="8491" fg:w="82"/><text x="17.8403%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="17.7168%" y="149" width="0.1695%" height="15" fill="rgb(232,28,40)" fg:x="8573" fg:w="82"/><text x="18.0098%" y="159.50"></text></g><g><title>candid::types::internal::env_add (165 instructions, 0.34%)</title><rect x="17.7168%" y="165" width="0.3410%" height="15" fill="rgb(243,130,36)" fg:x="8573" fg:w="165"/><text x="18.0098%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (219 instructions, 0.45%)</title><rect x="18.0578%" y="165" width="0.4526%" height="15" fill="rgb(228,79,20)" fg:x="8738" fg:w="219"/><text x="18.3508%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.16%)</title><rect x="18.5104%" y="149" width="0.1591%" height="15" fill="rgb(211,184,35)" fg:x="8957" fg:w="77"/><text x="18.8034%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="18.6695%" y="133" width="0.1839%" height="15" fill="rgb(253,94,20)" fg:x="9034" fg:w="89"/><text x="18.9625%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.27%)</title><rect x="18.6695%" y="149" width="0.2749%" height="15" fill="rgb(226,11,51)" fg:x="9034" fg:w="133"/><text x="18.9625%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 0.79%)</title><rect x="18.5104%" y="165" width="0.7894%" height="15" fill="rgb(214,173,41)" fg:x="8957" fg:w="382"/><text x="18.8034%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.11%)</title><rect x="19.2998%" y="149" width="0.1054%" height="15" fill="rgb(254,205,32)" fg:x="9339" fg:w="51"/><text x="19.5928%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="19.4052%" y="149" width="0.0269%" height="15" fill="rgb(222,123,35)" fg:x="9390" fg:w="13"/><text x="19.6982%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.41%)</title><rect x="19.2998%" y="165" width="0.4092%" height="15" fill="rgb(244,95,37)" fg:x="9339" fg:w="198"/><text x="19.5928%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="19.7090%" y="165" width="0.1013%" height="15" fill="rgb(244,134,16)" fg:x="9537" fg:w="49"/><text x="20.0020%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.17%)</title><rect x="19.8103%" y="149" width="0.1715%" height="15" fill="rgb(245,223,7)" fg:x="9586" fg:w="83"/><text x="20.1033%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="20.0727%" y="133" width="0.0475%" height="15" fill="rgb(253,78,46)" fg:x="9713" fg:w="23"/><text x="20.3657%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.29%)</title><rect x="20.0727%" y="149" width="0.2852%" height="15" fill="rgb(220,181,13)" fg:x="9713" fg:w="138"/><text x="20.3657%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.64%)</title><rect x="19.8103%" y="165" width="0.6386%" height="15" fill="rgb(220,202,51)" fg:x="9586" fg:w="309"/><text x="20.1033%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.07%)</title><rect x="20.4489%" y="149" width="0.0723%" height="15" fill="rgb(238,131,1)" fg:x="9895" fg:w="35"/><text x="20.7418%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1137 (34 instructions, 0.07%)</title><rect x="20.5212%" y="149" width="0.0703%" height="15" fill="rgb(244,76,5)" fg:x="9930" fg:w="34"/><text x="20.8142%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1137 (34 instructions, 0.07%)</title><rect x="20.5915%" y="149" width="0.0703%" height="15" fill="rgb(254,139,38)" fg:x="9964" fg:w="34"/><text x="20.8844%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.07%)</title><rect x="20.6617%" y="149" width="0.0682%" height="15" fill="rgb(249,200,31)" fg:x="9998" fg:w="33"/><text x="20.9547%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.52%)</title><rect x="20.4489%" y="165" width="0.5166%" height="15" fill="rgb(237,191,5)" fg:x="9895" fg:w="250"/><text x="20.7418%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.9655%" y="165" width="0.0269%" height="15" fill="rgb(236,104,27)" fg:x="10145" fg:w="13"/><text x="21.2585%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.9924%" y="165" width="0.0269%" height="15" fill="rgb(213,117,26)" fg:x="10158" fg:w="13"/><text x="21.2853%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.0192%" y="165" width="0.0269%" height="15" fill="rgb(251,210,39)" fg:x="10171" fg:w="13"/><text x="21.3122%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.09%)</title><rect x="21.0461%" y="165" width="0.0889%" height="15" fill="rgb(205,138,47)" fg:x="10184" fg:w="43"/><text x="21.3391%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="21.1350%" y="149" width="0.0145%" height="15" fill="rgb(231,155,26)" fg:x="10227" fg:w="7"/><text x="21.4279%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.1494%" y="133" width="0.0558%" height="15" fill="rgb(237,92,0)" fg:x="10234" fg:w="27"/><text x="21.4424%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.2052%" y="133" width="0.0558%" height="15" fill="rgb(213,183,20)" fg:x="10261" fg:w="27"/><text x="21.4982%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.41%)</title><rect x="21.1494%" y="149" width="0.4071%" height="15" fill="rgb(216,85,5)" fg:x="10234" fg:w="197"/><text x="21.4424%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.5566%" y="117" width="0.0558%" height="15" fill="rgb(220,101,9)" fg:x="10431" fg:w="27"/><text x="21.8495%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.29%)</title><rect x="21.5566%" y="133" width="0.2935%" height="15" fill="rgb(231,1,44)" fg:x="10431" fg:w="142"/><text x="21.8495%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.38%)</title><rect x="21.5566%" y="149" width="0.3844%" height="15" fill="rgb(248,50,41)" fg:x="10431" fg:w="186"/><text x="21.8495%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.9409%" y="149" width="0.0269%" height="15" fill="rgb(224,23,11)" fg:x="10617" fg:w="13"/><text x="22.2339%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="21.9678%" y="149" width="0.0145%" height="15" fill="rgb(238,67,38)" fg:x="10630" fg:w="7"/><text x="22.2608%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 0.97%)</title><rect x="21.1350%" y="165" width="0.9713%" height="15" fill="rgb(209,128,13)" fg:x="10227" fg:w="470"/><text x="21.4279%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="22.1063%" y="149" width="0.0558%" height="15" fill="rgb(206,88,38)" fg:x="10697" fg:w="27"/><text x="22.3992%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.29%)</title><rect x="22.1063%" y="165" width="0.2935%" height="15" fill="rgb(244,101,4)" fg:x="10697" fg:w="142"/><text x="22.3992%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,220 instructions, 25.25%)</title><rect x="0.3885%" y="181" width="25.2537%" height="15" fill="rgb(220,49,1)" fg:x="188" fg:w="12220"/><text x="0.6815%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="25.6422%" y="181" width="1.3226%" height="15" fill="rgb(213,68,50)" fg:x="12408" fg:w="640"/><text x="25.9352%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (665 instructions, 1.37%)</title><rect x="26.9648%" y="181" width="1.3743%" height="15" fill="rgb(210,144,3)" fg:x="13048" fg:w="665"/><text x="27.2578%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="28.3391%" y="181" width="1.3226%" height="15" fill="rgb(238,80,47)" fg:x="13713" fg:w="640"/><text x="28.6321%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="29.6617%" y="181" width="1.3226%" height="15" fill="rgb(231,68,35)" fg:x="14353" fg:w="640"/><text x="29.9547%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="30.9843%" y="181" width="1.3226%" height="15" fill="rgb(252,226,19)" fg:x="14993" fg:w="640"/><text x="31.2773%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="32.3069%" y="181" width="1.3867%" height="15" fill="rgb(216,226,42)" fg:x="15633" fg:w="671"/><text x="32.5999%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="33.6936%" y="181" width="1.3867%" height="15" fill="rgb(243,71,17)" fg:x="16304" fg:w="671"/><text x="33.9866%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="35.0803%" y="181" width="1.3226%" height="15" fill="rgb(215,201,47)" fg:x="16975" fg:w="640"/><text x="35.3733%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="36.4029%" y="181" width="1.3226%" height="15" fill="rgb(222,188,39)" fg:x="17615" fg:w="640"/><text x="36.6959%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="37.7255%" y="181" width="1.2462%" height="15" fill="rgb(220,137,24)" fg:x="18255" fg:w="603"/><text x="38.0185%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="38.9717%" y="181" width="1.3226%" height="15" fill="rgb(209,209,43)" fg:x="18858" fg:w="640"/><text x="39.2646%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="40.2943%" y="181" width="1.2462%" height="15" fill="rgb(221,147,28)" fg:x="19498" fg:w="603"/><text x="40.5873%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="41.5404%" y="181" width="1.3226%" height="15" fill="rgb(216,17,36)" fg:x="20101" fg:w="640"/><text x="41.8334%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="42.8630%" y="181" width="1.2462%" height="15" fill="rgb(254,209,19)" fg:x="20741" fg:w="603"/><text x="43.1560%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="44.1092%" y="181" width="1.3226%" height="15" fill="rgb(226,147,23)" fg:x="21344" fg:w="640"/><text x="44.4022%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="45.4318%" y="181" width="1.3226%" height="15" fill="rgb(237,214,29)" fg:x="21984" fg:w="640"/><text x="45.7248%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="46.7544%" y="181" width="1.3226%" height="15" fill="rgb(235,12,47)" fg:x="22624" fg:w="640"/><text x="47.0474%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="48.0770%" y="181" width="1.3226%" height="15" fill="rgb(244,98,51)" fg:x="23264" fg:w="640"/><text x="48.3700%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="49.3997%" y="181" width="1.3226%" height="15" fill="rgb(238,179,16)" fg:x="23904" fg:w="640"/><text x="49.6926%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="50.7223%" y="181" width="1.2462%" height="15" fill="rgb(240,191,33)" fg:x="24544" fg:w="603"/><text x="51.0152%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="51.9684%" y="181" width="1.3867%" height="15" fill="rgb(253,105,14)" fg:x="25147" fg:w="671"/><text x="52.2614%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.45%)</title><rect x="53.3551%" y="181" width="1.4507%" height="15" fill="rgb(230,219,10)" fg:x="25818" fg:w="702"/><text x="53.6481%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="54.8058%" y="181" width="1.3226%" height="15" fill="rgb(226,122,44)" fg:x="26520" fg:w="640"/><text x="55.0988%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.31%)</title><rect x="56.1285%" y="181" width="1.3102%" height="15" fill="rgb(232,201,17)" fg:x="27160" fg:w="634"/><text x="56.4214%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.31%)</title><rect x="57.4387%" y="181" width="1.3102%" height="15" fill="rgb(216,92,17)" fg:x="27794" fg:w="634"/><text x="57.7316%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="58.7489%" y="181" width="1.2462%" height="15" fill="rgb(245,174,29)" fg:x="28428" fg:w="603"/><text x="59.0419%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="59.9950%" y="181" width="1.3226%" height="15" fill="rgb(236,30,4)" fg:x="29031" fg:w="640"/><text x="60.2880%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="61.3177%" y="181" width="1.3226%" height="15" fill="rgb(254,96,12)" fg:x="29671" fg:w="640"/><text x="61.6106%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="62.6403%" y="181" width="1.3867%" height="15" fill="rgb(214,111,34)" fg:x="30311" fg:w="671"/><text x="62.9332%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="64.0269%" y="181" width="1.2462%" height="15" fill="rgb(228,116,36)" fg:x="30982" fg:w="603"/><text x="64.3199%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="65.2731%" y="181" width="1.3867%" height="15" fill="rgb(252,69,25)" fg:x="31585" fg:w="671"/><text x="65.5661%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="66.6598%" y="181" width="1.2462%" height="15" fill="rgb(233,121,10)" fg:x="32256" fg:w="603"/><text x="66.9527%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="67.9059%" y="181" width="1.3867%" height="15" fill="rgb(253,96,42)" fg:x="32859" fg:w="671"/><text x="68.1989%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="69.2926%" y="181" width="1.3226%" height="15" fill="rgb(214,92,52)" fg:x="33530" fg:w="640"/><text x="69.5856%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="70.6152%" y="181" width="1.3226%" height="15" fill="rgb(215,199,3)" fg:x="34170" fg:w="640"/><text x="70.9082%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.51%)</title><rect x="71.9378%" y="181" width="1.5148%" height="15" fill="rgb(215,219,11)" fg:x="34810" fg:w="733"/><text x="72.2308%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="73.4526%" y="181" width="1.3226%" height="15" fill="rgb(206,123,7)" fg:x="35543" fg:w="640"/><text x="73.7456%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="74.7753%" y="181" width="1.3226%" height="15" fill="rgb(207,1,5)" fg:x="36183" fg:w="640"/><text x="75.0682%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="76.0979%" y="181" width="1.3226%" height="15" fill="rgb(252,211,35)" fg:x="36823" fg:w="640"/><text x="76.3908%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="77.4205%" y="181" width="1.3226%" height="15" fill="rgb(211,189,10)" fg:x="37463" fg:w="640"/><text x="77.7135%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="78.7431%" y="181" width="1.3226%" height="15" fill="rgb(216,157,11)" fg:x="38103" fg:w="640"/><text x="79.0361%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="80.0657%" y="181" width="1.3226%" height="15" fill="rgb(247,202,52)" fg:x="38743" fg:w="640"/><text x="80.3587%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="81.3883%" y="181" width="1.3867%" height="15" fill="rgb(216,186,0)" fg:x="39383" fg:w="671"/><text x="81.6813%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="82.7750%" y="181" width="1.3226%" height="15" fill="rgb(234,105,30)" fg:x="40054" fg:w="640"/><text x="83.0680%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.31%)</title><rect x="84.0976%" y="181" width="1.3102%" height="15" fill="rgb(211,48,6)" fg:x="40694" fg:w="634"/><text x="84.3906%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="85.4078%" y="181" width="1.3226%" height="15" fill="rgb(247,142,20)" fg:x="41328" fg:w="640"/><text x="85.7008%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="86.7305%" y="181" width="1.3226%" height="15" fill="rgb(214,185,13)" fg:x="41968" fg:w="640"/><text x="87.0234%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="88.0531%" y="181" width="1.3226%" height="15" fill="rgb(242,145,39)" fg:x="42608" fg:w="640"/><text x="88.3460%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.32%)</title><rect x="89.3757%" y="181" width="1.3226%" height="15" fill="rgb(247,95,25)" fg:x="43248" fg:w="640"/><text x="89.6687%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.31%)</title><rect x="90.6983%" y="181" width="1.3102%" height="15" fill="rgb(244,206,25)" fg:x="43888" fg:w="634"/><text x="90.9913%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="92.0085%" y="133" width="0.1240%" height="15" fill="rgb(242,89,26)" fg:x="44522" fg:w="60"/><text x="92.3015%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.21%)</title><rect x="92.0085%" y="149" width="0.2149%" height="15" fill="rgb(207,177,51)" fg:x="44522" fg:w="104"/><text x="92.3015%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="92.2234%" y="133" width="0.0558%" height="15" fill="rgb(214,32,43)" fg:x="44626" fg:w="27"/><text x="92.5164%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="92.2792%" y="133" width="0.0558%" height="15" fill="rgb(221,41,11)" fg:x="44653" fg:w="27"/><text x="92.5722%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="92.3350%" y="133" width="0.1405%" height="15" fill="rgb(209,90,4)" fg:x="44680" fg:w="68"/><text x="92.6280%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.50%)</title><rect x="92.2234%" y="149" width="0.5042%" height="15" fill="rgb(236,125,10)" fg:x="44626" fg:w="244"/><text x="92.5164%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (472 instructions, 0.98%)</title><rect x="92.0085%" y="165" width="0.9754%" height="15" fill="rgb(232,74,42)" fg:x="44522" fg:w="472"/><text x="92.3015%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.07%)</title><rect x="92.9839%" y="149" width="1.0705%" height="15" fill="rgb(251,212,4)" fg:x="44994" fg:w="518"/><text x="93.2769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="94.0544%" y="101" width="0.1695%" height="15" fill="rgb(248,96,11)" fg:x="45512" fg:w="82"/><text x="94.3474%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.27%)</title><rect x="94.0544%" y="117" width="0.2687%" height="15" fill="rgb(209,217,28)" fg:x="45512" fg:w="130"/><text x="94.3474%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.44%)</title><rect x="94.0544%" y="133" width="0.4381%" height="15" fill="rgb(240,167,31)" fg:x="45512" fg:w="212"/><text x="94.3474%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.4925%" y="133" width="0.0310%" height="15" fill="rgb(213,183,17)" fg:x="45724" fg:w="15"/><text x="94.7855%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.5235%" y="133" width="0.0310%" height="15" fill="rgb(227,173,50)" fg:x="45739" fg:w="15"/><text x="94.8165%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.88%)</title><rect x="94.0544%" y="149" width="0.8845%" height="15" fill="rgb(209,107,50)" fg:x="45512" fg:w="428"/><text x="94.3474%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.07%)</title><rect x="94.9389%" y="149" width="1.0664%" height="15" fill="rgb(245,128,50)" fg:x="45940" fg:w="516"/><text x="95.2319%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.0053%" y="149" width="0.0145%" height="15" fill="rgb(242,164,15)" fg:x="46456" fg:w="7"/><text x="96.2983%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 3.24%)</title><rect x="92.9839%" y="165" width="3.2363%" height="15" fill="rgb(232,13,36)" fg:x="44994" fg:w="1566"/><text x="93.2769%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.2202%" y="165" width="0.0145%" height="15" fill="rgb(214,98,13)" fg:x="46560" fg:w="7"/><text x="96.5132%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.2347%" y="165" width="0.0145%" height="15" fill="rgb(249,142,12)" fg:x="46567" fg:w="7"/><text x="96.5277%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.2491%" y="165" width="0.1240%" height="15" fill="rgb(223,122,28)" fg:x="46574" fg:w="60"/><text x="96.5421%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,716 instructions, 5.61%)</title><rect x="92.0085%" y="181" width="5.6128%" height="15" fill="rgb(231,50,44)" fg:x="44522" fg:w="2716"/><text x="92.3015%" y="191.50">ic_cdk..</text></g><g><title>heap::__canister_method_batch_get::{{closure}} (47,667 instructions, 98.51%)</title><rect x="0.3885%" y="197" width="98.5079%" height="15" fill="rgb(208,3,9)" fg:x="188" fg:w="47667"/><text x="0.6815%" y="207.50">heap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="98.8964%" y="197" width="0.0289%" height="15" fill="rgb(239,4,43)" fg:x="47855" fg:w="14"/><text x="99.1894%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="99.1114%" y="181" width="0.0558%" height="15" fill="rgb(228,127,2)" fg:x="47959" fg:w="27"/><text x="99.4043%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.14%)</title><rect x="99.1672%" y="181" width="0.1426%" height="15" fill="rgb(215,14,40)" fg:x="47986" fg:w="69"/><text x="99.4601%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.14%)</title><rect x="99.3098%" y="181" width="0.1405%" height="15" fill="rgb(216,78,1)" fg:x="48055" fg:w="68"/><text x="99.6027%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (375 instructions, 0.77%)</title><rect x="98.9274%" y="197" width="0.7750%" height="15" fill="rgb(232,82,16)" fg:x="47870" fg:w="375"/><text x="99.2204%" y="207.50"></text></g><g><title>all (48,389 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(225,107,9)" fg:x="0" fg:w="48389"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (48,389 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,122,33)" fg:x="0" fg:w="48389"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>