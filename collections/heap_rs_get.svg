<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53382"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0356%" height="15" fill="rgb(239,5,38)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0356%" y="197" width="0.1424%" height="15" fill="rgb(247,54,52)" fg:x="19" fg:w="76"/><text x="0.3286%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1780%" y="197" width="0.1424%" height="15" fill="rgb(209,79,45)" fg:x="95" fg:w="76"/><text x="0.4709%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3203%" y="165" width="0.1424%" height="15" fill="rgb(212,67,2)" fg:x="171" fg:w="76"/><text x="0.6133%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="0.4627%" y="149" width="0.1293%" height="15" fill="rgb(210,130,47)" fg:x="247" fg:w="69"/><text x="0.7557%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="0.5920%" y="149" width="0.7606%" height="15" fill="rgb(241,120,50)" fg:x="316" fg:w="406"/><text x="0.8849%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="1.3525%" y="149" width="0.1536%" height="15" fill="rgb(228,15,14)" fg:x="722" fg:w="82"/><text x="1.6455%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.5061%" y="149" width="0.1012%" height="15" fill="rgb(248,219,31)" fg:x="804" fg:w="54"/><text x="1.7991%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6073%" y="149" width="0.1012%" height="15" fill="rgb(228,170,39)" fg:x="858" fg:w="54"/><text x="1.9003%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7084%" y="149" width="0.1012%" height="15" fill="rgb(215,86,3)" fg:x="912" fg:w="54"/><text x="2.0014%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8096%" y="149" width="0.1012%" height="15" fill="rgb(250,48,22)" fg:x="966" fg:w="54"/><text x="2.1026%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="1.9108%" y="149" width="0.1293%" height="15" fill="rgb(223,69,30)" fg:x="1020" fg:w="69"/><text x="2.2037%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0400%" y="149" width="0.1218%" height="15" fill="rgb(208,127,11)" fg:x="1089" fg:w="65"/><text x="2.3330%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="2.1618%" y="149" width="0.7606%" height="15" fill="rgb(229,20,16)" fg:x="1154" fg:w="406"/><text x="2.4547%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9223%" y="149" width="0.0300%" height="15" fill="rgb(237,62,32)" fg:x="1560" fg:w="16"/><text x="3.2153%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9523%" y="133" width="0.1424%" height="15" fill="rgb(225,144,45)" fg:x="1576" fg:w="76"/><text x="3.2453%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0947%" y="101" width="0.1124%" height="15" fill="rgb(211,91,7)" fg:x="1652" fg:w="60"/><text x="3.3876%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0947%" y="117" width="0.1592%" height="15" fill="rgb(214,17,8)" fg:x="1652" fg:w="85"/><text x="3.3876%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2539%" y="69" width="0.0169%" height="15" fill="rgb(242,98,2)" fg:x="1737" fg:w="9"/><text x="3.5469%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2708%" y="53" width="0.0562%" height="15" fill="rgb(207,114,40)" fg:x="1746" fg:w="30"/><text x="3.5637%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2708%" y="69" width="0.1030%" height="15" fill="rgb(212,202,1)" fg:x="1746" fg:w="55"/><text x="3.5637%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2539%" y="85" width="0.2210%" height="15" fill="rgb(223,217,23)" fg:x="1737" fg:w="118"/><text x="3.5469%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2539%" y="101" width="0.3203%" height="15" fill="rgb(229,137,51)" fg:x="1737" fg:w="171"/><text x="3.5469%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2539%" y="117" width="0.3297%" height="15" fill="rgb(218,90,8)" fg:x="1737" fg:w="176"/><text x="3.5469%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="3.0947%" y="133" width="0.6969%" height="15" fill="rgb(248,226,44)" fg:x="1652" fg:w="372"/><text x="3.3876%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="2.9523%" y="149" width="1.1034%" height="15" fill="rgb(212,224,5)" fg:x="1576" fg:w="589"/><text x="3.2453%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="4.0557%" y="149" width="0.1536%" height="15" fill="rgb(246,33,24)" fg:x="2165" fg:w="82"/><text x="4.3486%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.2093%" y="149" width="0.1030%" height="15" fill="rgb(215,83,9)" fg:x="2247" fg:w="55"/><text x="4.5023%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="4.3123%" y="149" width="0.1180%" height="15" fill="rgb(205,214,7)" fg:x="2302" fg:w="63"/><text x="4.6053%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4303%" y="149" width="0.1218%" height="15" fill="rgb(224,60,6)" fg:x="2365" fg:w="65"/><text x="4.7233%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="4.5521%" y="133" width="0.7606%" height="15" fill="rgb(229,164,47)" fg:x="2430" fg:w="406"/><text x="4.8451%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.3127%" y="133" width="0.0300%" height="15" fill="rgb(228,9,39)" fg:x="2836" fg:w="16"/><text x="5.6056%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3426%" y="117" width="0.1424%" height="15" fill="rgb(233,55,6)" fg:x="2852" fg:w="76"/><text x="5.6356%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4850%" y="85" width="0.1124%" height="15" fill="rgb(222,53,23)" fg:x="2928" fg:w="60"/><text x="5.7780%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4850%" y="101" width="0.1592%" height="15" fill="rgb(242,108,33)" fg:x="2928" fg:w="85"/><text x="5.7780%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6442%" y="53" width="0.0169%" height="15" fill="rgb(248,94,6)" fg:x="3013" fg:w="9"/><text x="5.9372%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6611%" y="37" width="0.0562%" height="15" fill="rgb(233,177,28)" fg:x="3022" fg:w="30"/><text x="5.9541%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6611%" y="53" width="0.1030%" height="15" fill="rgb(227,50,43)" fg:x="3022" fg:w="55"/><text x="5.9541%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6442%" y="69" width="0.2210%" height="15" fill="rgb(225,110,20)" fg:x="3013" fg:w="118"/><text x="5.9372%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6442%" y="85" width="0.3203%" height="15" fill="rgb(226,190,43)" fg:x="3013" fg:w="171"/><text x="5.9372%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6442%" y="101" width="0.3297%" height="15" fill="rgb(224,160,5)" fg:x="3013" fg:w="176"/><text x="5.9372%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="5.4850%" y="117" width="0.6969%" height="15" fill="rgb(212,160,16)" fg:x="2928" fg:w="372"/><text x="5.7780%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="5.3426%" y="133" width="1.1034%" height="15" fill="rgb(207,144,31)" fg:x="2852" fg:w="589"/><text x="5.6356%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="6.4460%" y="133" width="0.1536%" height="15" fill="rgb(226,52,18)" fg:x="3441" fg:w="82"/><text x="6.7390%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.5996%" y="133" width="0.1030%" height="15" fill="rgb(209,60,49)" fg:x="3523" fg:w="55"/><text x="6.8926%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="6.7026%" y="117" width="0.1293%" height="15" fill="rgb(222,47,22)" fg:x="3578" fg:w="69"/><text x="6.9956%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8319%" y="117" width="0.1705%" height="15" fill="rgb(247,96,32)" fg:x="3647" fg:w="91"/><text x="7.1249%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.0024%" y="117" width="0.1180%" height="15" fill="rgb(230,181,50)" fg:x="3738" fg:w="63"/><text x="7.2953%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.53%)</title><rect x="6.7026%" y="133" width="0.5283%" height="15" fill="rgb(222,80,0)" fg:x="3578" fg:w="282"/><text x="6.9956%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.2309%" y="133" width="0.1424%" height="15" fill="rgb(216,17,32)" fg:x="3860" fg:w="76"/><text x="7.5239%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 3.20%)</title><rect x="4.5521%" y="149" width="3.2015%" height="15" fill="rgb(214,125,13)" fg:x="2430" fg:w="1709"/><text x="4.8451%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.7535%" y="149" width="0.1180%" height="15" fill="rgb(241,39,33)" fg:x="4139" fg:w="63"/><text x="8.0465%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8716%" y="149" width="0.0244%" height="15" fill="rgb(223,125,21)" fg:x="4202" fg:w="13"/><text x="8.1645%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8959%" y="149" width="0.0244%" height="15" fill="rgb(214,84,21)" fg:x="4215" fg:w="13"/><text x="8.1889%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.9203%" y="149" width="0.0131%" height="15" fill="rgb(228,93,41)" fg:x="4228" fg:w="7"/><text x="8.2132%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9334%" y="149" width="0.0281%" height="15" fill="rgb(245,2,27)" fg:x="4235" fg:w="15"/><text x="8.2264%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9615%" y="133" width="0.1424%" height="15" fill="rgb(252,198,37)" fg:x="4250" fg:w="76"/><text x="8.2545%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9615%" y="149" width="0.2979%" height="15" fill="rgb(213,189,21)" fg:x="4250" fg:w="159"/><text x="8.2545%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2593%" y="117" width="0.1424%" height="15" fill="rgb(205,25,29)" fg:x="4409" fg:w="76"/><text x="8.5523%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="8.2593%" y="133" width="0.2061%" height="15" fill="rgb(224,156,39)" fg:x="4409" fg:w="110"/><text x="8.5523%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.33%)</title><rect x="8.2593%" y="149" width="0.3334%" height="15" fill="rgb(231,59,14)" fg:x="4409" fg:w="178"/><text x="8.5523%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.5928%" y="149" width="0.1424%" height="15" fill="rgb(227,142,19)" fg:x="4587" fg:w="76"/><text x="8.8858%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.7352%" y="149" width="0.1517%" height="15" fill="rgb(218,144,22)" fg:x="4663" fg:w="81"/><text x="9.0281%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8869%" y="149" width="0.1424%" height="15" fill="rgb(211,176,1)" fg:x="4744" fg:w="76"/><text x="9.1799%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="9.0293%" y="149" width="0.1424%" height="15" fill="rgb(242,90,26)" fg:x="4820" fg:w="76"/><text x="9.3222%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1754%" y="149" width="0.1517%" height="15" fill="rgb(253,227,25)" fg:x="4898" fg:w="81"/><text x="9.4683%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="9.3271%" y="149" width="0.7119%" height="15" fill="rgb(233,7,20)" fg:x="4979" fg:w="380"/><text x="9.6201%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="10.0390%" y="149" width="0.7119%" height="15" fill="rgb(237,167,21)" fg:x="5359" fg:w="380"/><text x="10.3319%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,407 instructions, 12.00%)</title><rect x="0.4627%" y="165" width="12.0022%" height="15" fill="rgb(213,43,24)" fg:x="247" fg:w="6407"/><text x="0.7557%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (335 instructions, 0.63%)</title><rect x="12.4649%" y="165" width="0.6276%" height="15" fill="rgb(239,182,4)" fg:x="6654" fg:w="335"/><text x="12.7578%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="13.0924%" y="149" width="0.0225%" height="15" fill="rgb(215,93,9)" fg:x="6989" fg:w="12"/><text x="13.3854%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.09%)</title><rect x="13.0924%" y="165" width="0.0937%" height="15" fill="rgb(230,132,39)" fg:x="6989" fg:w="50"/><text x="13.3854%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.13%)</title><rect x="13.1861%" y="165" width="0.1330%" height="15" fill="rgb(231,183,22)" fg:x="7039" fg:w="71"/><text x="13.4791%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="13.3191%" y="149" width="0.0225%" height="15" fill="rgb(223,15,46)" fg:x="7110" fg:w="12"/><text x="13.6121%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.3416%" y="133" width="0.0993%" height="15" fill="rgb(245,194,24)" fg:x="7122" fg:w="53"/><text x="13.6345%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="13.4409%" y="133" width="0.1648%" height="15" fill="rgb(228,210,37)" fg:x="7175" fg:w="88"/><text x="13.7338%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="13.6057%" y="133" width="0.3035%" height="15" fill="rgb(205,53,4)" fg:x="7263" fg:w="162"/><text x="13.8987%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.3416%" y="149" width="1.0116%" height="15" fill="rgb(244,7,30)" fg:x="7122" fg:w="540"/><text x="13.6345%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 1.45%)</title><rect x="13.3191%" y="165" width="1.4462%" height="15" fill="rgb(233,48,29)" fg:x="7110" fg:w="772"/><text x="13.6121%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="14.7653%" y="149" width="0.1030%" height="15" fill="rgb(254,41,28)" fg:x="7882" fg:w="55"/><text x="15.0582%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.31%)</title><rect x="14.7653%" y="165" width="0.3053%" height="15" fill="rgb(211,208,12)" fg:x="7882" fg:w="163"/><text x="15.0582%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="15.0706%" y="149" width="0.0225%" height="15" fill="rgb(252,196,38)" fg:x="8045" fg:w="12"/><text x="15.3636%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="15.0931%" y="133" width="0.0993%" height="15" fill="rgb(223,37,6)" fg:x="8057" fg:w="53"/><text x="15.3861%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="15.1924%" y="133" width="0.1648%" height="15" fill="rgb(207,22,10)" fg:x="8110" fg:w="88"/><text x="15.4854%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="15.3572%" y="133" width="0.3035%" height="15" fill="rgb(227,71,50)" fg:x="8198" fg:w="162"/><text x="15.6502%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="15.0931%" y="149" width="1.0116%" height="15" fill="rgb(237,85,4)" fg:x="8057" fg:w="540"/><text x="15.3861%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="16.1047%" y="149" width="0.1274%" height="15" fill="rgb(224,54,23)" fg:x="8597" fg:w="68"/><text x="16.3976%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.2321%" y="133" width="0.1517%" height="15" fill="rgb(214,180,37)" fg:x="8665" fg:w="81"/><text x="16.5250%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.2321%" y="149" width="0.2023%" height="15" fill="rgb(218,4,31)" fg:x="8665" fg:w="108"/><text x="16.5250%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 1.71%)</title><rect x="15.0706%" y="165" width="1.7084%" height="15" fill="rgb(228,53,45)" fg:x="8045" fg:w="912"/><text x="15.3636%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.7791%" y="117" width="0.0993%" height="15" fill="rgb(236,172,53)" fg:x="8957" fg:w="53"/><text x="17.0720%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="16.7791%" y="133" width="0.1480%" height="15" fill="rgb(229,121,28)" fg:x="8957" fg:w="79"/><text x="17.0720%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.55%)</title><rect x="16.7791%" y="149" width="0.5470%" height="15" fill="rgb(230,28,12)" fg:x="8957" fg:w="292"/><text x="17.0720%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1086 (15 instructions, 0.03%)</title><rect x="17.3261%" y="149" width="0.0281%" height="15" fill="rgb(237,25,22)" fg:x="9249" fg:w="15"/><text x="17.6190%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3542%" y="149" width="0.0206%" height="15" fill="rgb(246,48,40)" fg:x="9264" fg:w="11"/><text x="17.6471%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 0.98%)</title><rect x="16.7791%" y="165" width="0.9779%" height="15" fill="rgb(216,8,33)" fg:x="8957" fg:w="522"/><text x="17.0720%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.06%)</title><rect x="17.7569%" y="165" width="0.0637%" height="15" fill="rgb(239,71,52)" fg:x="9479" fg:w="34"/><text x="18.0499%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.8206%" y="149" width="0.2304%" height="15" fill="rgb(218,22,2)" fg:x="9513" fg:w="123"/><text x="18.1136%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="18.1016%" y="149" width="0.2304%" height="15" fill="rgb(232,55,46)" fg:x="9663" fg:w="123"/><text x="18.3946%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.8206%" y="165" width="0.5620%" height="15" fill="rgb(221,135,18)" fg:x="9513" fg:w="300"/><text x="18.1136%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.3826%" y="149" width="0.0525%" height="15" fill="rgb(236,81,48)" fg:x="9813" fg:w="28"/><text x="18.6756%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.18%)</title><rect x="18.3826%" y="165" width="0.1817%" height="15" fill="rgb(247,190,34)" fg:x="9813" fg:w="97"/><text x="18.6756%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.5643%" y="165" width="0.0206%" height="15" fill="rgb(248,51,3)" fg:x="9910" fg:w="11"/><text x="18.8573%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.5849%" y="165" width="0.0206%" height="15" fill="rgb(220,1,26)" fg:x="9921" fg:w="11"/><text x="18.8779%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.6055%" y="165" width="0.0206%" height="15" fill="rgb(242,148,28)" fg:x="9932" fg:w="11"/><text x="18.8985%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.77%)</title><rect x="18.6261%" y="165" width="0.7680%" height="15" fill="rgb(218,171,48)" fg:x="9943" fg:w="410"/><text x="18.9191%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.3942%" y="133" width="0.0225%" height="15" fill="rgb(239,35,10)" fg:x="10353" fg:w="12"/><text x="19.6871%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.31%)</title><rect x="19.4167%" y="133" width="0.3147%" height="15" fill="rgb(213,32,0)" fg:x="10365" fg:w="168"/><text x="19.7096%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="19.7314%" y="101" width="0.1180%" height="15" fill="rgb(205,104,52)" fg:x="10533" fg:w="63"/><text x="20.0243%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.39%)</title><rect x="19.7314%" y="117" width="0.3896%" height="15" fill="rgb(226,202,26)" fg:x="10533" fg:w="208"/><text x="20.0243%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.44%)</title><rect x="19.7314%" y="133" width="0.4402%" height="15" fill="rgb(237,160,44)" fg:x="10533" fg:w="235"/><text x="20.0243%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.1716%" y="133" width="0.0206%" height="15" fill="rgb(237,161,30)" fg:x="10768" fg:w="11"/><text x="20.4646%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 0.88%)</title><rect x="19.3942%" y="149" width="0.8767%" height="15" fill="rgb(205,62,48)" fg:x="10353" fg:w="468"/><text x="19.6871%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (502 instructions, 0.94%)</title><rect x="19.3942%" y="165" width="0.9404%" height="15" fill="rgb(240,116,49)" fg:x="10353" fg:w="502"/><text x="19.6871%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="20.3346%" y="149" width="0.1030%" height="15" fill="rgb(243,97,52)" fg:x="10855" fg:w="55"/><text x="20.6275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="20.4376%" y="149" width="0.1180%" height="15" fill="rgb(214,188,39)" fg:x="10910" fg:w="63"/><text x="20.7306%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.37%)</title><rect x="20.3346%" y="165" width="0.3728%" height="15" fill="rgb(252,92,27)" fg:x="10855" fg:w="199"/><text x="20.6275%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,274 instructions, 21.12%)</title><rect x="0.3203%" y="181" width="21.1195%" height="15" fill="rgb(239,4,24)" fg:x="171" fg:w="11274"/><text x="0.6133%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="21.4398%" y="181" width="1.4986%" height="15" fill="rgb(251,86,29)" fg:x="11445" fg:w="800"/><text x="21.7328%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="22.9384%" y="181" width="1.4986%" height="15" fill="rgb(219,77,2)" fg:x="12245" fg:w="800"/><text x="23.2314%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="24.4371%" y="181" width="1.4986%" height="15" fill="rgb(228,181,4)" fg:x="13045" fg:w="800"/><text x="24.7300%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="25.9357%" y="181" width="1.5530%" height="15" fill="rgb(253,83,45)" fg:x="13845" fg:w="829"/><text x="26.2287%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="27.4887%" y="181" width="1.4986%" height="15" fill="rgb(240,29,17)" fg:x="14674" fg:w="800"/><text x="27.7816%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="28.9873%" y="181" width="1.4986%" height="15" fill="rgb(214,28,20)" fg:x="15474" fg:w="800"/><text x="29.2803%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="30.4859%" y="181" width="1.4986%" height="15" fill="rgb(241,216,41)" fg:x="16274" fg:w="800"/><text x="30.7789%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="31.9846%" y="181" width="1.4986%" height="15" fill="rgb(246,120,16)" fg:x="17074" fg:w="800"/><text x="32.2775%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="33.4832%" y="181" width="1.4986%" height="15" fill="rgb(249,194,39)" fg:x="17874" fg:w="800"/><text x="33.7762%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="34.9818%" y="181" width="1.4986%" height="15" fill="rgb(205,115,12)" fg:x="18674" fg:w="800"/><text x="35.2748%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="36.4805%" y="181" width="1.5530%" height="15" fill="rgb(231,28,14)" fg:x="19474" fg:w="829"/><text x="36.7734%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="38.0334%" y="181" width="1.4986%" height="15" fill="rgb(222,20,51)" fg:x="20303" fg:w="800"/><text x="38.3264%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="39.5321%" y="181" width="1.4986%" height="15" fill="rgb(210,181,15)" fg:x="21103" fg:w="800"/><text x="39.8250%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="41.0307%" y="181" width="1.4986%" height="15" fill="rgb(229,51,6)" fg:x="21903" fg:w="800"/><text x="41.3237%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="42.5293%" y="181" width="1.4986%" height="15" fill="rgb(244,227,48)" fg:x="22703" fg:w="800"/><text x="42.8223%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="44.0279%" y="181" width="1.4986%" height="15" fill="rgb(252,109,22)" fg:x="23503" fg:w="800"/><text x="44.3209%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.43%)</title><rect x="45.5266%" y="181" width="1.4274%" height="15" fill="rgb(219,79,2)" fg:x="24303" fg:w="762"/><text x="45.8196%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="46.9540%" y="181" width="1.4986%" height="15" fill="rgb(221,8,18)" fg:x="25065" fg:w="800"/><text x="47.2470%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="48.4527%" y="181" width="1.5530%" height="15" fill="rgb(237,35,13)" fg:x="25865" fg:w="829"/><text x="48.7456%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="50.0056%" y="181" width="1.4986%" height="15" fill="rgb(227,213,35)" fg:x="26694" fg:w="800"/><text x="50.2986%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="51.5043%" y="181" width="1.5530%" height="15" fill="rgb(216,104,53)" fg:x="27494" fg:w="829"/><text x="51.7972%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="53.0572%" y="181" width="1.4986%" height="15" fill="rgb(249,103,24)" fg:x="28323" fg:w="800"/><text x="53.3502%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="54.5558%" y="181" width="1.4986%" height="15" fill="rgb(238,211,38)" fg:x="29123" fg:w="800"/><text x="54.8488%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="56.0545%" y="181" width="1.4986%" height="15" fill="rgb(248,70,13)" fg:x="29923" fg:w="800"/><text x="56.3474%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="57.5531%" y="181" width="1.4986%" height="15" fill="rgb(236,9,21)" fg:x="30723" fg:w="800"/><text x="57.8461%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="59.0517%" y="181" width="1.5530%" height="15" fill="rgb(242,76,31)" fg:x="31523" fg:w="829"/><text x="59.3447%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (762 instructions, 1.43%)</title><rect x="60.6047%" y="181" width="1.4274%" height="15" fill="rgb(222,47,7)" fg:x="32352" fg:w="762"/><text x="60.8977%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="62.0321%" y="181" width="1.4986%" height="15" fill="rgb(241,89,41)" fg:x="33114" fg:w="800"/><text x="62.3251%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="63.5308%" y="181" width="1.4986%" height="15" fill="rgb(248,35,3)" fg:x="33914" fg:w="800"/><text x="63.8237%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="65.0294%" y="181" width="1.4986%" height="15" fill="rgb(243,174,49)" fg:x="34714" fg:w="800"/><text x="65.3224%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="66.5280%" y="181" width="1.4986%" height="15" fill="rgb(208,167,48)" fg:x="35514" fg:w="800"/><text x="66.8210%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="68.0267%" y="181" width="1.5530%" height="15" fill="rgb(228,142,30)" fg:x="36314" fg:w="829"/><text x="68.3196%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="69.5796%" y="181" width="1.4986%" height="15" fill="rgb(249,179,20)" fg:x="37143" fg:w="800"/><text x="69.8726%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="71.0783%" y="181" width="1.4986%" height="15" fill="rgb(207,116,23)" fg:x="37943" fg:w="800"/><text x="71.3712%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="72.5769%" y="181" width="1.4986%" height="15" fill="rgb(208,161,26)" fg:x="38743" fg:w="800"/><text x="72.8699%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="74.0755%" y="181" width="1.4986%" height="15" fill="rgb(250,38,39)" fg:x="39543" fg:w="800"/><text x="74.3685%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="75.5742%" y="181" width="1.4986%" height="15" fill="rgb(218,97,52)" fg:x="40343" fg:w="800"/><text x="75.8671%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="77.0728%" y="181" width="1.5530%" height="15" fill="rgb(220,176,0)" fg:x="41143" fg:w="829"/><text x="77.3658%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="78.6258%" y="181" width="1.4986%" height="15" fill="rgb(249,167,8)" fg:x="41972" fg:w="800"/><text x="78.9187%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="80.1244%" y="181" width="1.4986%" height="15" fill="rgb(248,107,27)" fg:x="42772" fg:w="800"/><text x="80.4174%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="81.6230%" y="181" width="1.5530%" height="15" fill="rgb(253,43,23)" fg:x="43572" fg:w="829"/><text x="81.9160%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="83.1760%" y="181" width="1.4986%" height="15" fill="rgb(217,75,48)" fg:x="44401" fg:w="800"/><text x="83.4689%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="84.6746%" y="181" width="1.4986%" height="15" fill="rgb(220,66,52)" fg:x="45201" fg:w="800"/><text x="84.9676%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="86.1732%" y="181" width="1.4986%" height="15" fill="rgb(216,177,50)" fg:x="46001" fg:w="800"/><text x="86.4662%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="87.6719%" y="181" width="1.4986%" height="15" fill="rgb(249,217,41)" fg:x="46801" fg:w="800"/><text x="87.9648%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="89.1705%" y="181" width="1.4986%" height="15" fill="rgb(224,184,46)" fg:x="47601" fg:w="800"/><text x="89.4635%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="90.6691%" y="181" width="1.4986%" height="15" fill="rgb(215,199,48)" fg:x="48401" fg:w="800"/><text x="90.9621%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="92.1678%" y="181" width="1.5530%" height="15" fill="rgb(223,179,27)" fg:x="49201" fg:w="829"/><text x="92.4607%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="93.7207%" y="181" width="1.4986%" height="15" fill="rgb(246,164,1)" fg:x="50030" fg:w="800"/><text x="94.0137%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.50%)</title><rect x="95.2194%" y="181" width="1.4986%" height="15" fill="rgb(239,80,53)" fg:x="50830" fg:w="800"/><text x="95.5123%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="96.7180%" y="149" width="0.0225%" height="15" fill="rgb(240,62,32)" fg:x="51630" fg:w="12"/><text x="97.0110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="96.7405%" y="133" width="0.1030%" height="15" fill="rgb(214,56,33)" fg:x="51642" fg:w="55"/><text x="97.0334%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.15%)</title><rect x="96.7405%" y="149" width="0.1536%" height="15" fill="rgb(252,34,41)" fg:x="51642" fg:w="82"/><text x="97.0334%" y="159.50"></text></g><g><title>memset (136 instructions, 0.25%)</title><rect x="96.8941%" y="149" width="0.2548%" height="15" fill="rgb(210,56,16)" fg:x="51724" fg:w="136"/><text x="97.1871%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (388 instructions, 0.73%)</title><rect x="96.7180%" y="165" width="0.7268%" height="15" fill="rgb(244,178,52)" fg:x="51630" fg:w="388"/><text x="97.0110%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.4448%" y="117" width="0.1424%" height="15" fill="rgb(220,218,4)" fg:x="52018" fg:w="76"/><text x="97.7378%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="97.4448%" y="133" width="0.2061%" height="15" fill="rgb(253,8,22)" fg:x="52018" fg:w="110"/><text x="97.7378%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.33%)</title><rect x="97.4448%" y="149" width="0.3278%" height="15" fill="rgb(243,61,26)" fg:x="52018" fg:w="175"/><text x="97.7378%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7727%" y="149" width="0.0206%" height="15" fill="rgb(224,78,13)" fg:x="52193" fg:w="11"/><text x="98.0656%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7933%" y="149" width="0.0206%" height="15" fill="rgb(211,81,3)" fg:x="52204" fg:w="11"/><text x="98.0862%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.06%)</title><rect x="97.8139%" y="149" width="0.0562%" height="15" fill="rgb(215,225,7)" fg:x="52215" fg:w="30"/><text x="98.1068%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (453 instructions, 0.85%)</title><rect x="97.4448%" y="165" width="0.8486%" height="15" fill="rgb(212,147,33)" fg:x="52018" fg:w="453"/><text x="97.7378%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.3028%" y="165" width="0.1030%" height="15" fill="rgb(215,61,13)" fg:x="52476" fg:w="55"/><text x="98.5958%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (977 instructions, 1.83%)</title><rect x="96.7180%" y="181" width="1.8302%" height="15" fill="rgb(239,168,19)" fg:x="51630" fg:w="977"/><text x="97.0110%" y="191.50"></text></g><g><title>heap::batch_get_2_::{{closure}} (52,776 instructions, 98.86%)</title><rect x="0.3203%" y="197" width="98.8648%" height="15" fill="rgb(207,200,22)" fg:x="171" fg:w="52776"/><text x="0.6133%" y="207.50">heap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.1851%" y="197" width="0.0225%" height="15" fill="rgb(234,172,22)" fg:x="52947" fg:w="12"/><text x="99.4781%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="99.3593%" y="181" width="0.1030%" height="15" fill="rgb(253,82,3)" fg:x="53040" fg:w="55"/><text x="99.6523%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="99.4624%" y="181" width="0.1180%" height="15" fill="rgb(208,179,9)" fg:x="53095" fg:w="63"/><text x="99.7553%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 0.61%)</title><rect x="99.2076%" y="197" width="0.6088%" height="15" fill="rgb(213,162,12)" fg:x="52959" fg:w="325"/><text x="99.5006%" y="207.50"></text></g><g><title>all (53,382 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,22,16)" fg:x="0" fg:w="53382"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (53,382 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,68,17)" fg:x="0" fg:w="53382"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>