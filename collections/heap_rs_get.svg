<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="53243"><g><title>ic_cdk::setup (8 instructions, 0.02%)</title><rect x="0.0000%" y="261" width="0.0150%" height="15" fill="rgb(244,111,16)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0150%" y="181" width="0.0169%" height="15" fill="rgb(228,164,11)" fg:x="8" fg:w="9"/><text x="0.3080%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0319%" y="181" width="0.0169%" height="15" fill="rgb(222,75,43)" fg:x="17" fg:w="9"/><text x="0.3249%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0488%" y="181" width="0.0169%" height="15" fill="rgb(246,5,2)" fg:x="26" fg:w="9"/><text x="0.3418%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0714%" y="181" width="0.0188%" height="15" fill="rgb(231,41,40)" fg:x="38" fg:w="10"/><text x="0.3643%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.0150%" y="197" width="0.2479%" height="15" fill="rgb(205,160,29)" fg:x="8" fg:w="132"/><text x="0.3080%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.0150%" y="213" width="0.2667%" height="15" fill="rgb(222,213,42)" fg:x="8" fg:w="142"/><text x="0.3080%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.0150%" y="229" width="0.2723%" height="15" fill="rgb(238,165,23)" fg:x="8" fg:w="145"/><text x="0.3080%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.2986%" y="181" width="0.0169%" height="15" fill="rgb(219,1,8)" fg:x="159" fg:w="9"/><text x="0.5916%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3155%" y="181" width="0.0169%" height="15" fill="rgb(214,102,25)" fg:x="168" fg:w="9"/><text x="0.6085%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3324%" y="181" width="0.0169%" height="15" fill="rgb(206,34,27)" fg:x="177" fg:w="9"/><text x="0.6254%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3550%" y="181" width="0.0188%" height="15" fill="rgb(226,116,10)" fg:x="189" fg:w="10"/><text x="0.6479%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.2986%" y="197" width="0.2479%" height="15" fill="rgb(242,143,48)" fg:x="159" fg:w="132"/><text x="0.5916%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.2986%" y="213" width="0.2667%" height="15" fill="rgb(207,212,14)" fg:x="159" fg:w="142"/><text x="0.5916%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.2986%" y="229" width="0.2723%" height="15" fill="rgb(235,87,4)" fg:x="159" fg:w="145"/><text x="0.5916%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.57%)</title><rect x="0.0150%" y="245" width="0.5672%" height="15" fill="rgb(254,151,14)" fg:x="8" fg:w="302"/><text x="0.3080%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5822%" y="245" width="0.0113%" height="15" fill="rgb(209,140,50)" fg:x="310" fg:w="6"/><text x="0.8752%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5935%" y="149" width="0.0169%" height="15" fill="rgb(207,75,12)" fg:x="316" fg:w="9"/><text x="0.8865%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6104%" y="149" width="0.0169%" height="15" fill="rgb(235,171,42)" fg:x="325" fg:w="9"/><text x="0.9034%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6273%" y="149" width="0.0169%" height="15" fill="rgb(252,27,32)" fg:x="334" fg:w="9"/><text x="0.9203%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.6499%" y="149" width="0.0188%" height="15" fill="rgb(222,95,13)" fg:x="346" fg:w="10"/><text x="0.9428%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.5935%" y="165" width="0.2479%" height="15" fill="rgb(218,128,25)" fg:x="316" fg:w="132"/><text x="0.8865%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.5935%" y="181" width="0.2667%" height="15" fill="rgb(253,0,53)" fg:x="316" fg:w="142"/><text x="0.8865%" y="191.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.5935%" y="197" width="0.2723%" height="15" fill="rgb(250,134,44)" fg:x="316" fg:w="145"/><text x="0.8865%" y="207.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="0.5935%" y="213" width="0.2836%" height="15" fill="rgb(251,17,8)" fg:x="316" fg:w="151"/><text x="0.8865%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (209 instructions, 0.39%)</title><rect x="0.5935%" y="229" width="0.3925%" height="15" fill="rgb(215,229,28)" fg:x="316" fg:w="209"/><text x="0.8865%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="0.9879%" y="181" width="0.1183%" height="15" fill="rgb(206,51,28)" fg:x="526" fg:w="63"/><text x="1.2809%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.1062%" y="117" width="0.0113%" height="15" fill="rgb(237,47,6)" fg:x="589" fg:w="6"/><text x="1.3992%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.1062%" y="133" width="0.0188%" height="15" fill="rgb(221,69,7)" fg:x="589" fg:w="10"/><text x="1.3992%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="1.1062%" y="149" width="0.8133%" height="15" fill="rgb(211,19,25)" fg:x="589" fg:w="433"/><text x="1.3992%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="1.9195%" y="149" width="0.1427%" height="15" fill="rgb(230,182,9)" fg:x="1022" fg:w="76"/><text x="2.2125%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.0622%" y="149" width="0.0977%" height="15" fill="rgb(246,110,35)" fg:x="1098" fg:w="52"/><text x="2.3552%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.1599%" y="149" width="0.0977%" height="15" fill="rgb(243,137,54)" fg:x="1150" fg:w="52"/><text x="2.4529%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.2576%" y="149" width="0.0977%" height="15" fill="rgb(206,14,20)" fg:x="1202" fg:w="52"/><text x="2.5505%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.3552%" y="149" width="0.0977%" height="15" fill="rgb(215,19,21)" fg:x="1254" fg:w="52"/><text x="2.6482%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (859 instructions, 1.61%)</title><rect x="1.1062%" y="181" width="1.6134%" height="15" fill="rgb(233,29,8)" fg:x="589" fg:w="859"/><text x="1.3992%" y="191.50"></text></g><g><title> 4]&gt;::read_options (859 instructions, 1.61%)</title><rect x="1.1062%" y="165" width="1.6134%" height="15" fill="rgb(224,47,54)" fg:x="589" fg:w="859"/><text x="1.3992%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="2.7196%" y="181" width="0.1183%" height="15" fill="rgb(220,116,27)" fg:x="1448" fg:w="63"/><text x="3.0126%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="2.8379%" y="165" width="0.1446%" height="15" fill="rgb(221,41,54)" fg:x="1511" fg:w="77"/><text x="3.1309%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.20%)</title><rect x="2.8379%" y="181" width="0.1953%" height="15" fill="rgb(238,81,5)" fg:x="1511" fg:w="104"/><text x="3.1309%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="3.0333%" y="133" width="0.0113%" height="15" fill="rgb(242,215,42)" fg:x="1615" fg:w="6"/><text x="3.3262%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="3.0333%" y="149" width="0.0188%" height="15" fill="rgb(245,8,16)" fg:x="1615" fg:w="10"/><text x="3.3262%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="3.0333%" y="165" width="0.8133%" height="15" fill="rgb(214,176,41)" fg:x="1615" fg:w="433"/><text x="3.3262%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.8465%" y="149" width="0.0338%" height="15" fill="rgb(210,142,36)" fg:x="2048" fg:w="18"/><text x="4.1395%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.8465%" y="165" width="0.0413%" height="15" fill="rgb(211,51,45)" fg:x="2048" fg:w="22"/><text x="4.1395%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.8878%" y="69" width="0.0169%" height="15" fill="rgb(252,154,16)" fg:x="2070" fg:w="9"/><text x="4.1808%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9047%" y="69" width="0.0169%" height="15" fill="rgb(243,138,30)" fg:x="2079" fg:w="9"/><text x="4.1977%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9216%" y="69" width="0.0169%" height="15" fill="rgb(247,229,50)" fg:x="2088" fg:w="9"/><text x="4.2146%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="3.9442%" y="69" width="0.0188%" height="15" fill="rgb(246,181,34)" fg:x="2100" fg:w="10"/><text x="4.2371%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="3.8878%" y="85" width="0.2479%" height="15" fill="rgb(206,209,9)" fg:x="2070" fg:w="132"/><text x="4.1808%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="3.8878%" y="101" width="0.2667%" height="15" fill="rgb(247,81,45)" fg:x="2070" fg:w="142"/><text x="4.1808%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="3.8878%" y="117" width="0.2723%" height="15" fill="rgb(230,180,5)" fg:x="2070" fg:w="145"/><text x="4.1808%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="3.8878%" y="133" width="0.2836%" height="15" fill="rgb(233,219,29)" fg:x="2070" fg:w="151"/><text x="4.1808%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="4.1714%" y="85" width="0.1127%" height="15" fill="rgb(223,73,21)" fg:x="2221" fg:w="60"/><text x="4.4644%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="4.1714%" y="101" width="0.1202%" height="15" fill="rgb(226,155,10)" fg:x="2221" fg:w="64"/><text x="4.4644%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="4.1714%" y="117" width="0.1672%" height="15" fill="rgb(232,62,11)" fg:x="2221" fg:w="89"/><text x="4.4644%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="4.3386%" y="69" width="0.0188%" height="15" fill="rgb(235,161,37)" fg:x="2310" fg:w="10"/><text x="4.6316%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="4.3574%" y="37" width="0.0563%" height="15" fill="rgb(219,42,4)" fg:x="2320" fg:w="30"/><text x="4.6503%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="4.3574%" y="53" width="0.0639%" height="15" fill="rgb(213,172,16)" fg:x="2320" fg:w="34"/><text x="4.6503%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="4.3574%" y="69" width="0.1108%" height="15" fill="rgb(249,200,44)" fg:x="2320" fg:w="59"/><text x="4.6503%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="4.3386%" y="85" width="0.2235%" height="15" fill="rgb(242,213,22)" fg:x="2310" fg:w="119"/><text x="4.6316%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.33%)</title><rect x="4.3386%" y="101" width="0.3268%" height="15" fill="rgb(215,185,29)" fg:x="2310" fg:w="174"/><text x="4.6316%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.34%)</title><rect x="4.3386%" y="117" width="0.3362%" height="15" fill="rgb(213,146,15)" fg:x="2310" fg:w="179"/><text x="4.6316%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="4.1714%" y="133" width="0.7118%" height="15" fill="rgb(212,79,52)" fg:x="2221" fg:w="379"/><text x="4.4644%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="3.8878%" y="149" width="1.2640%" height="15" fill="rgb(228,30,17)" fg:x="2070" fg:w="673"/><text x="4.1808%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="5.1519%" y="149" width="0.1427%" height="15" fill="rgb(225,81,49)" fg:x="2743" fg:w="76"/><text x="5.4448%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="5.3209%" y="101" width="0.0113%" height="15" fill="rgb(221,59,33)" fg:x="2833" fg:w="6"/><text x="5.6139%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="5.3322%" y="101" width="0.0188%" height="15" fill="rgb(252,188,42)" fg:x="2839" fg:w="10"/><text x="5.6251%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="5.2946%" y="117" width="0.1315%" height="15" fill="rgb(236,8,25)" fg:x="2819" fg:w="70"/><text x="5.5876%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.14%)</title><rect x="5.2946%" y="133" width="0.1352%" height="15" fill="rgb(222,87,37)" fg:x="2819" fg:w="72"/><text x="5.5876%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="5.2946%" y="149" width="0.1446%" height="15" fill="rgb(254,164,45)" fg:x="2819" fg:w="77"/><text x="5.5876%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 1.68%)</title><rect x="3.8878%" y="165" width="1.6847%" height="15" fill="rgb(238,125,53)" fg:x="2070" fg:w="897"/><text x="4.1808%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="5.5726%" y="165" width="0.0470%" height="15" fill="rgb(219,48,34)" fg:x="2967" fg:w="25"/><text x="5.8655%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,525 instructions, 2.86%)</title><rect x="3.0333%" y="181" width="2.8642%" height="15" fill="rgb(242,93,17)" fg:x="1615" fg:w="1525"/><text x="3.3262%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="5.8975%" y="181" width="0.1089%" height="15" fill="rgb(243,102,37)" fg:x="3140" fg:w="58"/><text x="6.1905%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="6.0064%" y="165" width="0.1446%" height="15" fill="rgb(249,14,0)" fg:x="3198" fg:w="77"/><text x="6.2994%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.20%)</title><rect x="6.0064%" y="181" width="0.1953%" height="15" fill="rgb(252,104,3)" fg:x="3198" fg:w="104"/><text x="6.2994%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="6.2018%" y="133" width="0.0113%" height="15" fill="rgb(243,93,36)" fg:x="3302" fg:w="6"/><text x="6.4947%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="6.2018%" y="149" width="0.0188%" height="15" fill="rgb(218,193,38)" fg:x="3302" fg:w="10"/><text x="6.4947%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="6.2018%" y="165" width="0.8133%" height="15" fill="rgb(216,11,17)" fg:x="3302" fg:w="433"/><text x="6.4947%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="7.0150%" y="149" width="0.0338%" height="15" fill="rgb(237,113,31)" fg:x="3735" fg:w="18"/><text x="7.3080%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="7.0150%" y="165" width="0.0413%" height="15" fill="rgb(222,173,37)" fg:x="3735" fg:w="22"/><text x="7.3080%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0563%" y="69" width="0.0169%" height="15" fill="rgb(218,30,31)" fg:x="3757" fg:w="9"/><text x="7.3493%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0732%" y="69" width="0.0169%" height="15" fill="rgb(241,29,6)" fg:x="3766" fg:w="9"/><text x="7.3662%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0901%" y="69" width="0.0169%" height="15" fill="rgb(245,108,40)" fg:x="3775" fg:w="9"/><text x="7.3831%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.1127%" y="69" width="0.0188%" height="15" fill="rgb(249,40,9)" fg:x="3787" fg:w="10"/><text x="7.4056%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="7.0563%" y="85" width="0.2479%" height="15" fill="rgb(211,122,11)" fg:x="3757" fg:w="132"/><text x="7.3493%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="7.0563%" y="101" width="0.2667%" height="15" fill="rgb(209,157,28)" fg:x="3757" fg:w="142"/><text x="7.3493%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="7.0563%" y="117" width="0.2723%" height="15" fill="rgb(206,112,46)" fg:x="3757" fg:w="145"/><text x="7.3493%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="7.0563%" y="133" width="0.2836%" height="15" fill="rgb(219,193,0)" fg:x="3757" fg:w="151"/><text x="7.3493%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="7.3399%" y="85" width="0.1127%" height="15" fill="rgb(231,164,54)" fg:x="3908" fg:w="60"/><text x="7.6329%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="7.3399%" y="101" width="0.1202%" height="15" fill="rgb(214,24,35)" fg:x="3908" fg:w="64"/><text x="7.6329%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="7.3399%" y="117" width="0.1672%" height="15" fill="rgb(229,164,54)" fg:x="3908" fg:w="89"/><text x="7.6329%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="7.5071%" y="69" width="0.0188%" height="15" fill="rgb(237,75,51)" fg:x="3997" fg:w="10"/><text x="7.8001%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="7.5259%" y="37" width="0.0563%" height="15" fill="rgb(215,5,43)" fg:x="4007" fg:w="30"/><text x="7.8188%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="7.5259%" y="53" width="0.0639%" height="15" fill="rgb(235,185,25)" fg:x="4007" fg:w="34"/><text x="7.8188%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="7.5259%" y="69" width="0.1108%" height="15" fill="rgb(217,23,33)" fg:x="4007" fg:w="59"/><text x="7.8188%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="7.5071%" y="85" width="0.2235%" height="15" fill="rgb(229,140,51)" fg:x="3997" fg:w="119"/><text x="7.8001%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.33%)</title><rect x="7.5071%" y="101" width="0.3268%" height="15" fill="rgb(246,160,45)" fg:x="3997" fg:w="174"/><text x="7.8001%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.34%)</title><rect x="7.5071%" y="117" width="0.3362%" height="15" fill="rgb(254,71,40)" fg:x="3997" fg:w="179"/><text x="7.8001%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="7.3399%" y="133" width="0.7118%" height="15" fill="rgb(253,19,45)" fg:x="3908" fg:w="379"/><text x="7.6329%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="7.0563%" y="149" width="1.2640%" height="15" fill="rgb(212,195,20)" fg:x="3757" fg:w="673"/><text x="7.3493%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="8.3203%" y="149" width="0.1427%" height="15" fill="rgb(242,36,34)" fg:x="4430" fg:w="76"/><text x="8.6133%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="8.4894%" y="101" width="0.0113%" height="15" fill="rgb(238,110,2)" fg:x="4520" fg:w="6"/><text x="8.7823%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="8.5006%" y="101" width="0.0188%" height="15" fill="rgb(226,71,52)" fg:x="4526" fg:w="10"/><text x="8.7936%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="8.4631%" y="117" width="0.1315%" height="15" fill="rgb(234,99,49)" fg:x="4506" fg:w="70"/><text x="8.7561%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.14%)</title><rect x="8.4631%" y="133" width="0.1352%" height="15" fill="rgb(234,178,45)" fg:x="4506" fg:w="72"/><text x="8.7561%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="8.4631%" y="149" width="0.1446%" height="15" fill="rgb(227,229,32)" fg:x="4506" fg:w="77"/><text x="8.7561%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 1.68%)</title><rect x="7.0563%" y="165" width="1.6847%" height="15" fill="rgb(223,85,48)" fg:x="3757" fg:w="897"/><text x="7.3493%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="8.7411%" y="133" width="0.1183%" height="15" fill="rgb(247,115,25)" fg:x="4654" fg:w="63"/><text x="9.0340%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.21%)</title><rect x="8.8594%" y="117" width="0.2066%" height="15" fill="rgb(214,144,44)" fg:x="4717" fg:w="110"/><text x="9.1523%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.26%)</title><rect x="8.8594%" y="133" width="0.2573%" height="15" fill="rgb(206,64,25)" fg:x="4717" fg:w="137"/><text x="9.1523%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="9.1167%" y="133" width="0.1089%" height="15" fill="rgb(213,9,34)" fg:x="4854" fg:w="58"/><text x="9.4097%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (314 instructions, 0.59%)</title><rect x="8.7411%" y="149" width="0.5897%" height="15" fill="rgb(233,227,40)" fg:x="4654" fg:w="314"/><text x="9.0340%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.3308%" y="85" width="0.0169%" height="15" fill="rgb(230,129,10)" fg:x="4968" fg:w="9"/><text x="9.6238%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.3477%" y="85" width="0.0169%" height="15" fill="rgb(207,225,46)" fg:x="4977" fg:w="9"/><text x="9.6407%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.3646%" y="85" width="0.0169%" height="15" fill="rgb(253,9,12)" fg:x="4986" fg:w="9"/><text x="9.6576%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="9.3871%" y="85" width="0.0188%" height="15" fill="rgb(252,217,45)" fg:x="4998" fg:w="10"/><text x="9.6801%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="9.3308%" y="101" width="0.2479%" height="15" fill="rgb(216,22,27)" fg:x="4968" fg:w="132"/><text x="9.6238%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="9.3308%" y="117" width="0.2667%" height="15" fill="rgb(227,17,11)" fg:x="4968" fg:w="142"/><text x="9.6238%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="9.3308%" y="133" width="0.2723%" height="15" fill="rgb(239,68,50)" fg:x="4968" fg:w="145"/><text x="9.6238%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="9.3308%" y="149" width="0.2836%" height="15" fill="rgb(219,174,20)" fg:x="4968" fg:w="151"/><text x="9.6238%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (550 instructions, 1.03%)</title><rect x="8.7411%" y="165" width="1.0330%" height="15" fill="rgb(244,158,13)" fg:x="4654" fg:w="550"/><text x="9.0340%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,050 instructions, 3.85%)</title><rect x="6.2018%" y="181" width="3.8503%" height="15" fill="rgb(224,207,53)" fg:x="3302" fg:w="2050"/><text x="6.4947%" y="191.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="10.0520%" y="181" width="0.1089%" height="15" fill="rgb(245,54,52)" fg:x="5352" fg:w="58"/><text x="10.3450%" y="191.50"></text></g><g><title>binread::BinRead::read (5,102 instructions, 9.58%)</title><rect x="0.9860%" y="197" width="9.5825%" height="15" fill="rgb(247,192,2)" fg:x="525" fg:w="5102"/><text x="1.2790%" y="207.50">binread::Bi..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.5685%" y="181" width="0.0263%" height="15" fill="rgb(232,204,40)" fg:x="5627" fg:w="14"/><text x="10.8615%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.5948%" y="165" width="0.0263%" height="15" fill="rgb(225,200,52)" fg:x="5641" fg:w="14"/><text x="10.8878%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="10.6211%" y="165" width="0.0470%" height="15" fill="rgb(251,173,34)" fg:x="5655" fg:w="25"/><text x="10.9141%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="10.6681%" y="165" width="0.0357%" height="15" fill="rgb(225,213,54)" fg:x="5680" fg:w="19"/><text x="10.9610%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (210 instructions, 0.39%)</title><rect x="10.5948%" y="181" width="0.3944%" height="15" fill="rgb(205,157,31)" fg:x="5641" fg:w="210"/><text x="10.8878%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9892%" y="101" width="0.0169%" height="15" fill="rgb(246,120,16)" fg:x="5851" fg:w="9"/><text x="11.2822%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.0061%" y="101" width="0.0169%" height="15" fill="rgb(228,198,1)" fg:x="5860" fg:w="9"/><text x="11.2991%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.0230%" y="101" width="0.0169%" height="15" fill="rgb(230,159,39)" fg:x="5869" fg:w="9"/><text x="11.3160%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.0456%" y="101" width="0.0188%" height="15" fill="rgb(232,77,46)" fg:x="5881" fg:w="10"/><text x="11.3386%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="10.9892%" y="117" width="0.2479%" height="15" fill="rgb(225,11,11)" fg:x="5851" fg:w="132"/><text x="11.2822%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="10.9892%" y="133" width="0.2667%" height="15" fill="rgb(208,181,3)" fg:x="5851" fg:w="142"/><text x="11.2822%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="10.9892%" y="149" width="0.2723%" height="15" fill="rgb(216,119,9)" fg:x="5851" fg:w="145"/><text x="11.2822%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="10.9892%" y="165" width="0.2836%" height="15" fill="rgb(219,74,34)" fg:x="5851" fg:w="151"/><text x="11.2822%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (232 instructions, 0.44%)</title><rect x="10.9892%" y="181" width="0.4357%" height="15" fill="rgb(251,131,47)" fg:x="5851" fg:w="232"/><text x="11.2822%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.4250%" y="85" width="0.0169%" height="15" fill="rgb(214,163,3)" fg:x="6083" fg:w="9"/><text x="11.7179%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.4419%" y="85" width="0.0169%" height="15" fill="rgb(244,117,18)" fg:x="6092" fg:w="9"/><text x="11.7348%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.4588%" y="85" width="0.0169%" height="15" fill="rgb(219,175,23)" fg:x="6101" fg:w="9"/><text x="11.7518%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.4813%" y="85" width="0.0188%" height="15" fill="rgb(212,216,54)" fg:x="6113" fg:w="10"/><text x="11.7743%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.4250%" y="101" width="0.2479%" height="15" fill="rgb(237,57,30)" fg:x="6083" fg:w="132"/><text x="11.7179%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="11.4250%" y="117" width="0.2667%" height="15" fill="rgb(249,76,35)" fg:x="6083" fg:w="142"/><text x="11.7179%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.4250%" y="133" width="0.2723%" height="15" fill="rgb(216,124,25)" fg:x="6083" fg:w="145"/><text x="11.7179%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.4250%" y="149" width="0.2836%" height="15" fill="rgb(226,95,21)" fg:x="6083" fg:w="151"/><text x="11.7179%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="11.4250%" y="165" width="0.3437%" height="15" fill="rgb(223,124,46)" fg:x="6083" fg:w="183"/><text x="11.7179%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (253 instructions, 0.48%)</title><rect x="11.4250%" y="181" width="0.4752%" height="15" fill="rgb(249,170,10)" fg:x="6083" fg:w="253"/><text x="11.7179%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (936 instructions, 1.76%)</title><rect x="10.5685%" y="197" width="1.7580%" height="15" fill="rgb(237,40,9)" fg:x="5627" fg:w="936"/><text x="10.8615%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.3265%" y="117" width="0.0169%" height="15" fill="rgb(220,54,29)" fg:x="6563" fg:w="9"/><text x="12.6195%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.3434%" y="117" width="0.0169%" height="15" fill="rgb(253,134,4)" fg:x="6572" fg:w="9"/><text x="12.6364%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.3603%" y="117" width="0.0169%" height="15" fill="rgb(207,123,2)" fg:x="6581" fg:w="9"/><text x="12.6533%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="12.3828%" y="117" width="0.0188%" height="15" fill="rgb(236,176,3)" fg:x="6593" fg:w="10"/><text x="12.6758%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="12.3265%" y="133" width="0.2479%" height="15" fill="rgb(238,0,10)" fg:x="6563" fg:w="132"/><text x="12.6195%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="12.3265%" y="149" width="0.2667%" height="15" fill="rgb(234,112,49)" fg:x="6563" fg:w="142"/><text x="12.6195%" y="159.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="12.3265%" y="165" width="0.2723%" height="15" fill="rgb(236,91,4)" fg:x="6563" fg:w="145"/><text x="12.6195%" y="175.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="12.3265%" y="181" width="0.2836%" height="15" fill="rgb(213,56,12)" fg:x="6563" fg:w="151"/><text x="12.6195%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.6364%" y="133" width="0.0113%" height="15" fill="rgb(216,139,21)" fg:x="6728" fg:w="6"/><text x="12.9294%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.6477%" y="133" width="0.0301%" height="15" fill="rgb(222,115,12)" fg:x="6734" fg:w="16"/><text x="12.9406%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="12.6101%" y="149" width="0.1841%" height="15" fill="rgb(223,13,38)" fg:x="6714" fg:w="98"/><text x="12.9031%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="12.6101%" y="165" width="0.1878%" height="15" fill="rgb(212,78,8)" fg:x="6714" fg:w="100"/><text x="12.9031%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="12.6101%" y="181" width="0.1972%" height="15" fill="rgb(247,6,12)" fg:x="6714" fg:w="105"/><text x="12.9031%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (370 instructions, 0.69%)</title><rect x="12.3265%" y="197" width="0.6949%" height="15" fill="rgb(240,151,13)" fg:x="6563" fg:w="370"/><text x="12.6195%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.0214%" y="133" width="0.0169%" height="15" fill="rgb(228,172,8)" fg:x="6933" fg:w="9"/><text x="13.3144%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.0383%" y="133" width="0.0169%" height="15" fill="rgb(231,209,19)" fg:x="6942" fg:w="9"/><text x="13.3313%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.0552%" y="133" width="0.0169%" height="15" fill="rgb(205,152,9)" fg:x="6951" fg:w="9"/><text x="13.3482%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.0778%" y="133" width="0.0188%" height="15" fill="rgb(241,43,19)" fg:x="6963" fg:w="10"/><text x="13.3707%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.0214%" y="149" width="0.2479%" height="15" fill="rgb(224,115,29)" fg:x="6933" fg:w="132"/><text x="13.3144%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="13.0214%" y="165" width="0.2667%" height="15" fill="rgb(208,29,4)" fg:x="6933" fg:w="142"/><text x="13.3144%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.0214%" y="181" width="0.2723%" height="15" fill="rgb(208,35,46)" fg:x="6933" fg:w="145"/><text x="13.3144%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.3050%" y="133" width="0.0169%" height="15" fill="rgb(234,183,21)" fg:x="7084" fg:w="9"/><text x="13.5980%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.3219%" y="133" width="0.0169%" height="15" fill="rgb(231,109,31)" fg:x="7093" fg:w="9"/><text x="13.6149%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.3388%" y="133" width="0.0169%" height="15" fill="rgb(231,221,28)" fg:x="7102" fg:w="9"/><text x="13.6318%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.3614%" y="133" width="0.0188%" height="15" fill="rgb(221,141,41)" fg:x="7114" fg:w="10"/><text x="13.6543%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.3050%" y="149" width="0.2479%" height="15" fill="rgb(219,68,40)" fg:x="7084" fg:w="132"/><text x="13.5980%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="13.3050%" y="165" width="0.2667%" height="15" fill="rgb(247,153,2)" fg:x="7084" fg:w="142"/><text x="13.5980%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.3050%" y="181" width="0.2723%" height="15" fill="rgb(216,159,48)" fg:x="7084" fg:w="145"/><text x="13.5980%" y="191.50"></text></g><g><title>__rust_alloc (302 instructions, 0.57%)</title><rect x="13.0214%" y="197" width="0.5672%" height="15" fill="rgb(243,213,2)" fg:x="6933" fg:w="302"/><text x="13.3144%" y="207.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (15 instructions, 0.03%)</title><rect x="13.5886%" y="197" width="0.0282%" height="15" fill="rgb(253,76,52)" fg:x="7235" fg:w="15"/><text x="13.8816%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="13.6431%" y="149" width="0.0113%" height="15" fill="rgb(229,105,33)" fg:x="7264" fg:w="6"/><text x="13.9361%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="13.6544%" y="149" width="0.0301%" height="15" fill="rgb(230,133,14)" fg:x="7270" fg:w="16"/><text x="13.9473%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="13.6168%" y="165" width="0.1841%" height="15" fill="rgb(217,131,41)" fg:x="7250" fg:w="98"/><text x="13.9098%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="13.6168%" y="181" width="0.1878%" height="15" fill="rgb(210,62,9)" fg:x="7250" fg:w="100"/><text x="13.9098%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="13.6168%" y="197" width="0.1972%" height="15" fill="rgb(227,97,36)" fg:x="7250" fg:w="105"/><text x="13.9098%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.78%)</title><rect x="13.8140%" y="165" width="0.7757%" height="15" fill="rgb(209,22,30)" fg:x="7355" fg:w="413"/><text x="14.1070%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="13.8140%" y="181" width="0.7832%" height="15" fill="rgb(222,136,32)" fg:x="7355" fg:w="417"/><text x="14.1070%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.82%)</title><rect x="13.8140%" y="197" width="0.8208%" height="15" fill="rgb(240,166,13)" fg:x="7355" fg:w="437"/><text x="14.1070%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.69%)</title><rect x="14.6348%" y="181" width="0.6912%" height="15" fill="rgb(210,202,42)" fg:x="7792" fg:w="368"/><text x="14.9278%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.70%)</title><rect x="14.6348%" y="197" width="0.6987%" height="15" fill="rgb(252,176,30)" fg:x="7792" fg:w="372"/><text x="14.9278%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,984 instructions, 15.00%)</title><rect x="0.9860%" y="213" width="14.9954%" height="15" fill="rgb(226,169,21)" fg:x="525" fg:w="7984"/><text x="1.2790%" y="223.50">candid::de::IDLDese..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="15.9814%" y="197" width="0.7193%" height="15" fill="rgb(230,58,24)" fg:x="8509" fg:w="383"/><text x="16.2744%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="16.7083%" y="197" width="0.7193%" height="15" fill="rgb(228,164,27)" fg:x="8896" fg:w="383"/><text x="17.0013%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.45%)</title><rect x="15.9814%" y="213" width="1.4537%" height="15" fill="rgb(221,122,53)" fg:x="8509" fg:w="774"/><text x="16.2744%" y="223.50"></text></g><g><title>candid::types::internal::find_type (38 instructions, 0.07%)</title><rect x="17.4352%" y="181" width="0.0714%" height="15" fill="rgb(212,19,22)" fg:x="9283" fg:w="38"/><text x="17.7281%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.5065%" y="101" width="0.0169%" height="15" fill="rgb(236,63,42)" fg:x="9321" fg:w="9"/><text x="17.7995%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.5234%" y="101" width="0.0169%" height="15" fill="rgb(229,157,1)" fg:x="9330" fg:w="9"/><text x="17.8164%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.5403%" y="101" width="0.0169%" height="15" fill="rgb(243,178,14)" fg:x="9339" fg:w="9"/><text x="17.8333%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.03%)</title><rect x="17.5572%" y="101" width="0.0263%" height="15" fill="rgb(210,105,3)" fg:x="9348" fg:w="14"/><text x="17.8502%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.23%)</title><rect x="17.5065%" y="117" width="0.2329%" height="15" fill="rgb(225,174,54)" fg:x="9321" fg:w="124"/><text x="17.7995%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.25%)</title><rect x="17.5065%" y="133" width="0.2517%" height="15" fill="rgb(234,129,42)" fg:x="9321" fg:w="134"/><text x="17.7995%" y="143.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.26%)</title><rect x="17.5065%" y="149" width="0.2573%" height="15" fill="rgb(211,104,11)" fg:x="9321" fg:w="137"/><text x="17.7995%" y="159.50"></text></g><g><title>__rust_alloc (143 instructions, 0.27%)</title><rect x="17.5065%" y="165" width="0.2686%" height="15" fill="rgb(219,136,0)" fg:x="9321" fg:w="143"/><text x="17.7995%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (188 instructions, 0.35%)</title><rect x="17.5065%" y="181" width="0.3531%" height="15" fill="rgb(226,79,53)" fg:x="9321" fg:w="188"/><text x="17.7995%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="17.8596%" y="133" width="0.1014%" height="15" fill="rgb(243,151,32)" fg:x="9509" fg:w="54"/><text x="18.1526%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="17.9610%" y="133" width="0.1690%" height="15" fill="rgb(221,142,45)" fg:x="9563" fg:w="90"/><text x="18.2540%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.31%)</title><rect x="18.1301%" y="133" width="0.3061%" height="15" fill="rgb(208,217,24)" fg:x="9653" fg:w="163"/><text x="18.4231%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="17.8596%" y="149" width="1.0443%" height="15" fill="rgb(240,148,42)" fg:x="9509" fg:w="556"/><text x="18.1526%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.19%)</title><rect x="18.9039%" y="149" width="0.1859%" height="15" fill="rgb(221,213,14)" fg:x="10065" fg:w="99"/><text x="19.1969%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (760 instructions, 1.43%)</title><rect x="17.8596%" y="165" width="1.4274%" height="15" fill="rgb(254,215,23)" fg:x="9509" fg:w="760"/><text x="18.1526%" y="175.50"></text></g><g><title>candid::types::internal::env_add (813 instructions, 1.53%)</title><rect x="17.8596%" y="181" width="1.5270%" height="15" fill="rgb(250,8,29)" fg:x="9509" fg:w="813"/><text x="18.1526%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.3866%" y="101" width="0.0169%" height="15" fill="rgb(211,220,10)" fg:x="10322" fg:w="9"/><text x="19.6796%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.4035%" y="101" width="0.0169%" height="15" fill="rgb(234,99,1)" fg:x="10331" fg:w="9"/><text x="19.6965%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::TreeChunk::leftmost_child (10 instructions, 0.02%)</title><rect x="19.4392%" y="101" width="0.0188%" height="15" fill="rgb(222,187,35)" fg:x="10350" fg:w="10"/><text x="19.7321%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.11%)</title><rect x="19.4655%" y="101" width="0.1052%" height="15" fill="rgb(241,42,32)" fg:x="10364" fg:w="56"/><text x="19.7584%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.5706%" y="101" width="0.0169%" height="15" fill="rgb(251,145,22)" fg:x="10420" fg:w="9"/><text x="19.8636%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.5988%" y="101" width="0.0188%" height="15" fill="rgb(235,170,22)" fg:x="10435" fg:w="10"/><text x="19.8918%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (237 instructions, 0.45%)</title><rect x="19.3866%" y="117" width="0.4451%" height="15" fill="rgb(251,158,16)" fg:x="10322" fg:w="237"/><text x="19.6796%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (247 instructions, 0.46%)</title><rect x="19.3866%" y="133" width="0.4639%" height="15" fill="rgb(244,126,45)" fg:x="10322" fg:w="247"/><text x="19.6796%" y="143.50"></text></g><g><title>__rdl_alloc (250 instructions, 0.47%)</title><rect x="19.3866%" y="149" width="0.4695%" height="15" fill="rgb(212,183,12)" fg:x="10322" fg:w="250"/><text x="19.6796%" y="159.50"></text></g><g><title>__rust_alloc (256 instructions, 0.48%)</title><rect x="19.3866%" y="165" width="0.4808%" height="15" fill="rgb(207,97,19)" fg:x="10322" fg:w="256"/><text x="19.6796%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (268 instructions, 0.50%)</title><rect x="19.3866%" y="181" width="0.5034%" height="15" fill="rgb(213,102,48)" fg:x="10322" fg:w="268"/><text x="19.6796%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="19.8899%" y="133" width="0.1014%" height="15" fill="rgb(251,10,9)" fg:x="10590" fg:w="54"/><text x="20.1829%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="19.9914%" y="133" width="0.1690%" height="15" fill="rgb(246,134,26)" fg:x="10644" fg:w="90"/><text x="20.2843%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.31%)</title><rect x="20.1604%" y="133" width="0.3061%" height="15" fill="rgb(252,110,45)" fg:x="10734" fg:w="163"/><text x="20.4534%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="19.8899%" y="149" width="1.0443%" height="15" fill="rgb(213,52,48)" fg:x="10590" fg:w="556"/><text x="20.1829%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.14%)</title><rect x="20.9342%" y="133" width="0.1390%" height="15" fill="rgb(248,175,0)" fg:x="11146" fg:w="74"/><text x="21.2272%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.15%)</title><rect x="20.9342%" y="149" width="0.1465%" height="15" fill="rgb(252,225,29)" fg:x="11146" fg:w="78"/><text x="21.2272%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (743 instructions, 1.40%)</title><rect x="19.8899%" y="165" width="1.3955%" height="15" fill="rgb(206,131,27)" fg:x="10590" fg:w="743"/><text x="20.1829%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="21.3117%" y="101" width="0.0113%" height="15" fill="rgb(249,179,27)" fg:x="11347" fg:w="6"/><text x="21.6047%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="21.3230%" y="101" width="0.0301%" height="15" fill="rgb(241,67,27)" fg:x="11353" fg:w="16"/><text x="21.6160%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="21.2854%" y="117" width="0.1841%" height="15" fill="rgb(230,56,10)" fg:x="11333" fg:w="98"/><text x="21.5784%" y="127.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="21.2854%" y="133" width="0.1878%" height="15" fill="rgb(205,117,24)" fg:x="11333" fg:w="100"/><text x="21.5784%" y="143.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="21.2854%" y="149" width="0.1972%" height="15" fill="rgb(230,195,15)" fg:x="11333" fg:w="105"/><text x="21.5784%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.26%)</title><rect x="21.2854%" y="165" width="0.2573%" height="15" fill="rgb(231,56,35)" fg:x="11333" fg:w="137"/><text x="21.5784%" y="175.50"></text></g><g><title>candid::types::internal::env_add (937 instructions, 1.76%)</title><rect x="19.8899%" y="181" width="1.7599%" height="15" fill="rgb(248,124,45)" fg:x="10590" fg:w="937"/><text x="20.1829%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="21.6498%" y="133" width="0.1014%" height="15" fill="rgb(235,206,1)" fg:x="11527" fg:w="54"/><text x="21.9428%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="21.6498%" y="149" width="0.1484%" height="15" fill="rgb(208,165,15)" fg:x="11527" fg:w="79"/><text x="21.9428%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.57%)</title><rect x="21.6498%" y="165" width="0.5691%" height="15" fill="rgb(216,34,13)" fg:x="11527" fg:w="303"/><text x="21.9428%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (35 instructions, 0.07%)</title><rect x="22.2189%" y="165" width="0.0657%" height="15" fill="rgb(234,210,20)" fg:x="11830" fg:w="35"/><text x="22.5119%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.2846%" y="165" width="0.0207%" height="15" fill="rgb(242,106,50)" fg:x="11865" fg:w="11"/><text x="22.5776%" y="175.50"></text></g><g><title>candid::types::internal::env_id (506 instructions, 0.95%)</title><rect x="21.6498%" y="181" width="0.9504%" height="15" fill="rgb(233,110,24)" fg:x="11527" fg:w="506"/><text x="21.9428%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,858 instructions, 5.37%)</title><rect x="17.4352%" y="197" width="5.3678%" height="15" fill="rgb(249,54,14)" fg:x="9283" fg:w="2858"/><text x="17.7281%" y="207.50">candi..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.07%)</title><rect x="22.8030%" y="197" width="0.0714%" height="15" fill="rgb(253,88,10)" fg:x="12141" fg:w="38"/><text x="23.0960%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.9007%" y="133" width="0.0113%" height="15" fill="rgb(205,39,48)" fg:x="12193" fg:w="6"/><text x="23.1936%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.9194%" y="133" width="0.0188%" height="15" fill="rgb(218,93,35)" fg:x="12203" fg:w="10"/><text x="23.2124%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="22.8744%" y="149" width="0.2648%" height="15" fill="rgb(208,71,36)" fg:x="12179" fg:w="141"/><text x="23.1673%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="22.8744%" y="165" width="0.2686%" height="15" fill="rgb(242,157,32)" fg:x="12179" fg:w="143"/><text x="23.1673%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="22.8744%" y="181" width="0.2780%" height="15" fill="rgb(235,104,29)" fg:x="12179" fg:w="148"/><text x="23.1673%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.2387%" y="133" width="0.0113%" height="15" fill="rgb(246,61,34)" fg:x="12373" fg:w="6"/><text x="23.5317%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.2575%" y="133" width="0.0188%" height="15" fill="rgb(250,112,28)" fg:x="12383" fg:w="10"/><text x="23.5505%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="23.2124%" y="149" width="0.2648%" height="15" fill="rgb(238,162,23)" fg:x="12359" fg:w="141"/><text x="23.5054%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="23.2124%" y="165" width="0.2686%" height="15" fill="rgb(227,65,8)" fg:x="12359" fg:w="143"/><text x="23.5054%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="23.2124%" y="181" width="0.2780%" height="15" fill="rgb(227,127,40)" fg:x="12359" fg:w="148"/><text x="23.5054%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.68%)</title><rect x="22.8744%" y="197" width="0.6761%" height="15" fill="rgb(230,14,26)" fg:x="12179" fg:w="360"/><text x="23.1673%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="23.5505%" y="181" width="0.0526%" height="15" fill="rgb(228,139,14)" fg:x="12539" fg:w="28"/><text x="23.8435%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (105 instructions, 0.20%)</title><rect x="23.5505%" y="197" width="0.1972%" height="15" fill="rgb(239,107,30)" fg:x="12539" fg:w="105"/><text x="23.8435%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.7477%" y="197" width="0.0207%" height="15" fill="rgb(238,121,43)" fg:x="12644" fg:w="11"/><text x="24.0407%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.7684%" y="197" width="0.0207%" height="15" fill="rgb(245,88,2)" fg:x="12655" fg:w="11"/><text x="24.0614%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.7890%" y="197" width="0.0207%" height="15" fill="rgb(247,186,54)" fg:x="12666" fg:w="11"/><text x="24.0820%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,562 instructions, 6.69%)</title><rect x="17.4352%" y="213" width="6.6901%" height="15" fill="rgb(242,34,43)" fg:x="9283" fg:w="3562"/><text x="17.7281%" y="223.50">candid:..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.78%)</title><rect x="24.1252%" y="197" width="0.7757%" height="15" fill="rgb(229,108,7)" fg:x="12845" fg:w="413"/><text x="24.4182%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="24.1252%" y="213" width="0.7832%" height="15" fill="rgb(243,52,43)" fg:x="12845" fg:w="417"/><text x="24.4182%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="24.9084%" y="197" width="0.0357%" height="15" fill="rgb(225,221,41)" fg:x="13262" fg:w="19"/><text x="25.2014%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="24.9854%" y="149" width="0.0113%" height="15" fill="rgb(254,217,48)" fg:x="13303" fg:w="6"/><text x="25.2784%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.0042%" y="149" width="0.0188%" height="15" fill="rgb(215,90,31)" fg:x="13313" fg:w="10"/><text x="25.2972%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.36%)</title><rect x="24.9441%" y="165" width="0.3625%" height="15" fill="rgb(254,105,35)" fg:x="13281" fg:w="193"/><text x="25.2371%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.37%)</title><rect x="24.9441%" y="181" width="0.3662%" height="15" fill="rgb(217,28,36)" fg:x="13281" fg:w="195"/><text x="25.2371%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.38%)</title><rect x="24.9441%" y="197" width="0.3756%" height="15" fill="rgb(211,89,42)" fg:x="13281" fg:w="200"/><text x="25.2371%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.3611%" y="133" width="0.0113%" height="15" fill="rgb(209,206,5)" fg:x="13503" fg:w="6"/><text x="25.6540%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.3799%" y="133" width="0.0188%" height="15" fill="rgb(242,119,30)" fg:x="13513" fg:w="10"/><text x="25.6728%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="25.3986%" y="133" width="0.1390%" height="15" fill="rgb(238,106,11)" fg:x="13523" fg:w="74"/><text x="25.6916%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.46%)</title><rect x="25.3198%" y="149" width="0.4564%" height="15" fill="rgb(232,60,8)" fg:x="13481" fg:w="243"/><text x="25.6127%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.46%)</title><rect x="25.3198%" y="165" width="0.4602%" height="15" fill="rgb(218,7,45)" fg:x="13481" fg:w="245"/><text x="25.6127%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.47%)</title><rect x="25.3198%" y="181" width="0.4695%" height="15" fill="rgb(215,56,11)" fg:x="13481" fg:w="250"/><text x="25.6127%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.53%)</title><rect x="25.3198%" y="197" width="0.5296%" height="15" fill="rgb(240,69,0)" fg:x="13481" fg:w="282"/><text x="25.6127%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="25.8494%" y="197" width="0.0207%" height="15" fill="rgb(250,48,39)" fg:x="13763" fg:w="11"/><text x="26.1424%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (614 instructions, 1.15%)</title><rect x="24.9084%" y="213" width="1.1532%" height="15" fill="rgb(242,113,12)" fg:x="13262" fg:w="614"/><text x="25.2014%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,454 instructions, 25.27%)</title><rect x="0.9860%" y="229" width="25.2690%" height="15" fill="rgb(214,98,40)" fg:x="525" fg:w="13454"/><text x="1.2790%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="26.2814%" y="181" width="0.0113%" height="15" fill="rgb(246,1,24)" fg:x="13993" fg:w="6"/><text x="26.5744%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.11%)</title><rect x="26.3002%" y="181" width="0.1052%" height="15" fill="rgb(210,149,23)" fg:x="14003" fg:w="56"/><text x="26.5931%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="26.4053%" y="181" width="0.0188%" height="15" fill="rgb(220,80,18)" fg:x="14059" fg:w="10"/><text x="26.6983%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="26.4241%" y="181" width="0.1390%" height="15" fill="rgb(222,59,48)" fg:x="14069" fg:w="74"/><text x="26.7171%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.43%)</title><rect x="26.2551%" y="197" width="0.4282%" height="15" fill="rgb(205,111,38)" fg:x="13979" fg:w="228"/><text x="26.5481%" y="207.50"></text></g><g><title>__rdl_dealloc (230 instructions, 0.43%)</title><rect x="26.2551%" y="213" width="0.4320%" height="15" fill="rgb(226,196,2)" fg:x="13979" fg:w="230"/><text x="26.5481%" y="223.50"></text></g><g><title>__rust_dealloc (235 instructions, 0.44%)</title><rect x="26.2551%" y="229" width="0.4414%" height="15" fill="rgb(214,164,28)" fg:x="13979" fg:w="235"/><text x="26.5481%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,939 instructions, 26.18%)</title><rect x="0.5935%" y="245" width="26.1800%" height="15" fill="rgb(238,48,29)" fg:x="316" fg:w="13939"/><text x="0.8865%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="26.7735%" y="245" width="1.3654%" height="15" fill="rgb(247,107,28)" fg:x="14255" fg:w="727"/><text x="27.0664%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="28.1389%" y="245" width="1.4199%" height="15" fill="rgb(219,172,54)" fg:x="14982" fg:w="756"/><text x="28.4319%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.29%)</title><rect x="29.5588%" y="245" width="1.2866%" height="15" fill="rgb(209,73,24)" fg:x="15738" fg:w="685"/><text x="29.8518%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="30.8454%" y="245" width="1.3654%" height="15" fill="rgb(229,225,45)" fg:x="16423" fg:w="727"/><text x="31.1383%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="32.2108%" y="245" width="1.3654%" height="15" fill="rgb(225,117,30)" fg:x="17150" fg:w="727"/><text x="32.5038%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (772 instructions, 1.45%)</title><rect x="33.5762%" y="245" width="1.4500%" height="15" fill="rgb(247,12,17)" fg:x="17877" fg:w="772"/><text x="33.8692%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="35.0262%" y="245" width="1.4199%" height="15" fill="rgb(220,105,39)" fg:x="18649" fg:w="756"/><text x="35.3192%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="36.4461%" y="245" width="1.3654%" height="15" fill="rgb(244,40,52)" fg:x="19405" fg:w="727"/><text x="36.7391%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="37.8115%" y="245" width="1.3654%" height="15" fill="rgb(244,122,27)" fg:x="20132" fg:w="727"/><text x="38.1045%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="39.1770%" y="245" width="1.3654%" height="15" fill="rgb(234,135,46)" fg:x="20859" fg:w="727"/><text x="39.4699%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="40.5424%" y="245" width="1.4199%" height="15" fill="rgb(225,172,7)" fg:x="21586" fg:w="756"/><text x="40.8354%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="41.9623%" y="245" width="1.4199%" height="15" fill="rgb(221,153,16)" fg:x="22342" fg:w="756"/><text x="42.2553%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.34%)</title><rect x="43.3822%" y="245" width="1.3410%" height="15" fill="rgb(219,166,38)" fg:x="23098" fg:w="714"/><text x="43.6752%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="44.7233%" y="245" width="1.3654%" height="15" fill="rgb(225,166,5)" fg:x="23812" fg:w="727"/><text x="45.0162%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="46.0887%" y="245" width="1.3654%" height="15" fill="rgb(246,171,10)" fg:x="24539" fg:w="727"/><text x="46.3817%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="47.4541%" y="245" width="1.3654%" height="15" fill="rgb(226,228,14)" fg:x="25266" fg:w="727"/><text x="47.7471%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="48.8196%" y="245" width="1.3654%" height="15" fill="rgb(212,110,10)" fg:x="25993" fg:w="727"/><text x="49.1125%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="50.1850%" y="245" width="1.3654%" height="15" fill="rgb(210,62,44)" fg:x="26720" fg:w="727"/><text x="50.4780%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.34%)</title><rect x="51.5504%" y="245" width="1.3410%" height="15" fill="rgb(220,61,4)" fg:x="27447" fg:w="714"/><text x="51.8434%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="52.8915%" y="245" width="1.3654%" height="15" fill="rgb(248,171,13)" fg:x="28161" fg:w="727"/><text x="53.1844%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="54.2569%" y="245" width="1.3654%" height="15" fill="rgb(232,59,54)" fg:x="28888" fg:w="727"/><text x="54.5499%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="55.6223%" y="245" width="1.4199%" height="15" fill="rgb(232,89,32)" fg:x="29615" fg:w="756"/><text x="55.9153%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="57.0422%" y="245" width="1.3654%" height="15" fill="rgb(223,218,7)" fg:x="30371" fg:w="727"/><text x="57.3352%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="58.4077%" y="245" width="1.4199%" height="15" fill="rgb(248,170,16)" fg:x="31098" fg:w="756"/><text x="58.7006%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="59.8276%" y="245" width="1.3654%" height="15" fill="rgb(246,84,42)" fg:x="31854" fg:w="727"/><text x="60.1206%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="61.1930%" y="245" width="1.3654%" height="15" fill="rgb(246,176,17)" fg:x="32581" fg:w="727"/><text x="61.4860%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="62.5585%" y="245" width="1.4199%" height="15" fill="rgb(234,117,16)" fg:x="33308" fg:w="756"/><text x="62.8514%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="63.9784%" y="245" width="1.3654%" height="15" fill="rgb(236,94,11)" fg:x="34064" fg:w="727"/><text x="64.2713%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.29%)</title><rect x="65.3438%" y="245" width="1.2866%" height="15" fill="rgb(213,44,40)" fg:x="34791" fg:w="685"/><text x="65.6368%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (743 instructions, 1.40%)</title><rect x="66.6304%" y="245" width="1.3955%" height="15" fill="rgb(205,150,47)" fg:x="35476" fg:w="743"/><text x="66.9233%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="68.0258%" y="245" width="1.3654%" height="15" fill="rgb(220,136,43)" fg:x="36219" fg:w="727"/><text x="68.3188%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="69.3913%" y="245" width="1.3654%" height="15" fill="rgb(243,180,3)" fg:x="36946" fg:w="727"/><text x="69.6843%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="70.7567%" y="245" width="1.3654%" height="15" fill="rgb(235,30,37)" fg:x="37673" fg:w="727"/><text x="71.0497%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="72.1222%" y="245" width="1.3654%" height="15" fill="rgb(243,166,37)" fg:x="38400" fg:w="727"/><text x="72.4151%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="73.4876%" y="245" width="1.3654%" height="15" fill="rgb(246,105,15)" fg:x="39127" fg:w="727"/><text x="73.7806%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="74.8530%" y="245" width="1.4199%" height="15" fill="rgb(247,186,43)" fg:x="39854" fg:w="756"/><text x="75.1460%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="76.2729%" y="245" width="1.3654%" height="15" fill="rgb(207,95,12)" fg:x="40610" fg:w="727"/><text x="76.5659%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="77.6384%" y="245" width="1.4744%" height="15" fill="rgb(224,221,34)" fg:x="41337" fg:w="785"/><text x="77.9313%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="79.1127%" y="245" width="1.4744%" height="15" fill="rgb(244,74,54)" fg:x="42122" fg:w="785"/><text x="79.4057%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.29%)</title><rect x="80.5871%" y="245" width="1.2866%" height="15" fill="rgb(226,57,44)" fg:x="42907" fg:w="685"/><text x="80.8801%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="81.8737%" y="245" width="1.3654%" height="15" fill="rgb(213,0,26)" fg:x="43592" fg:w="727"/><text x="82.1666%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="83.2391%" y="245" width="1.4199%" height="15" fill="rgb(242,112,11)" fg:x="44319" fg:w="756"/><text x="83.5321%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="84.6590%" y="245" width="1.3654%" height="15" fill="rgb(221,30,4)" fg:x="45075" fg:w="727"/><text x="84.9520%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="86.0245%" y="245" width="1.3654%" height="15" fill="rgb(246,218,50)" fg:x="45802" fg:w="727"/><text x="86.3174%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="87.3899%" y="245" width="1.4199%" height="15" fill="rgb(232,216,8)" fg:x="46529" fg:w="756"/><text x="87.6829%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.29%)</title><rect x="88.8098%" y="245" width="1.2866%" height="15" fill="rgb(237,140,50)" fg:x="47285" fg:w="685"/><text x="89.1028%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="90.0964%" y="245" width="1.4199%" height="15" fill="rgb(220,35,32)" fg:x="47970" fg:w="756"/><text x="90.3893%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="91.5163%" y="245" width="1.3654%" height="15" fill="rgb(227,179,41)" fg:x="48726" fg:w="727"/><text x="91.8092%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="92.8817%" y="245" width="1.3654%" height="15" fill="rgb(236,81,52)" fg:x="49453" fg:w="727"/><text x="93.1747%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.37%)</title><rect x="94.2471%" y="245" width="1.3654%" height="15" fill="rgb(213,225,9)" fg:x="50180" fg:w="727"/><text x="94.5401%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="95.6389%" y="133" width="0.0113%" height="15" fill="rgb(243,91,46)" fg:x="50921" fg:w="6"/><text x="95.9318%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="95.6501%" y="133" width="0.0188%" height="15" fill="rgb(205,47,39)" fg:x="50927" fg:w="10"/><text x="95.9431%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="95.6126%" y="149" width="0.1315%" height="15" fill="rgb(221,15,35)" fg:x="50907" fg:w="70"/><text x="95.9055%" y="159.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.14%)</title><rect x="95.6126%" y="165" width="0.1352%" height="15" fill="rgb(235,221,26)" fg:x="50907" fg:w="72"/><text x="95.9055%" y="175.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="95.6126%" y="181" width="0.1446%" height="15" fill="rgb(209,44,28)" fg:x="50907" fg:w="77"/><text x="95.9055%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (109 instructions, 0.20%)</title><rect x="95.6126%" y="197" width="0.2047%" height="15" fill="rgb(249,67,31)" fg:x="50907" fg:w="109"/><text x="95.9055%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.25%)</title><rect x="95.8173%" y="181" width="0.2536%" height="15" fill="rgb(232,44,34)" fg:x="51016" fg:w="135"/><text x="96.1103%" y="191.50"></text></g><g><title>memset (139 instructions, 0.26%)</title><rect x="95.8173%" y="197" width="0.2611%" height="15" fill="rgb(254,219,45)" fg:x="51016" fg:w="139"/><text x="96.1103%" y="207.50"></text></g><g><title>candid::types::internal::env_clear (350 instructions, 0.66%)</title><rect x="95.6126%" y="213" width="0.6574%" height="15" fill="rgb(208,125,30)" fg:x="50907" fg:w="350"/><text x="95.9055%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (414 instructions, 0.78%)</title><rect x="95.6126%" y="229" width="0.7776%" height="15" fill="rgb(210,97,39)" fg:x="50907" fg:w="414"/><text x="95.9055%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="96.3958%" y="197" width="0.0620%" height="15" fill="rgb(229,103,21)" fg:x="51324" fg:w="33"/><text x="96.6887%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.17%)</title><rect x="96.3958%" y="213" width="0.1653%" height="15" fill="rgb(248,118,20)" fg:x="51324" fg:w="88"/><text x="96.6887%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.5611%" y="101" width="0.0169%" height="15" fill="rgb(233,193,42)" fg:x="51412" fg:w="9"/><text x="96.8540%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.5780%" y="101" width="0.0169%" height="15" fill="rgb(248,51,1)" fg:x="51421" fg:w="9"/><text x="96.8709%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.5949%" y="101" width="0.0169%" height="15" fill="rgb(219,2,2)" fg:x="51430" fg:w="9"/><text x="96.8878%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="96.6174%" y="101" width="0.0188%" height="15" fill="rgb(217,211,24)" fg:x="51442" fg:w="10"/><text x="96.9104%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="96.5611%" y="117" width="0.2479%" height="15" fill="rgb(231,166,19)" fg:x="51412" fg:w="132"/><text x="96.8540%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="96.5611%" y="133" width="0.2667%" height="15" fill="rgb(220,159,4)" fg:x="51412" fg:w="142"/><text x="96.8540%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="96.5611%" y="149" width="0.2723%" height="15" fill="rgb(250,200,2)" fg:x="51412" fg:w="145"/><text x="96.8540%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="96.5611%" y="165" width="0.2836%" height="15" fill="rgb(241,225,48)" fg:x="51412" fg:w="151"/><text x="96.8540%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="96.5611%" y="181" width="0.3437%" height="15" fill="rgb(229,34,40)" fg:x="51412" fg:w="183"/><text x="96.8540%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 instructions, 0.47%)</title><rect x="96.5611%" y="197" width="0.4695%" height="15" fill="rgb(227,74,41)" fg:x="51412" fg:w="250"/><text x="96.8540%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="97.0306%" y="197" width="0.0188%" height="15" fill="rgb(253,19,36)" fg:x="51662" fg:w="10"/><text x="97.3236%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.0494%" y="181" width="0.0207%" height="15" fill="rgb(252,15,3)" fg:x="51672" fg:w="11"/><text x="97.3423%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.0776%" y="181" width="0.0207%" height="15" fill="rgb(234,174,49)" fg:x="51687" fg:w="11"/><text x="97.3705%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="97.0494%" y="197" width="0.0563%" height="15" fill="rgb(237,169,4)" fg:x="51672" fg:w="30"/><text x="97.3423%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (492 instructions, 0.92%)</title><rect x="96.5611%" y="213" width="0.9241%" height="15" fill="rgb(240,210,23)" fg:x="51412" fg:w="492"/><text x="96.8540%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="97.4851%" y="213" width="0.0113%" height="15" fill="rgb(243,219,25)" fg:x="51904" fg:w="6"/><text x="97.7781%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.06%)</title><rect x="97.4964%" y="197" width="0.0582%" height="15" fill="rgb(228,3,33)" fg:x="51910" fg:w="31"/><text x="97.7894%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.16%)</title><rect x="97.4964%" y="213" width="0.1615%" height="15" fill="rgb(253,161,15)" fg:x="51910" fg:w="86"/><text x="97.7894%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="97.6579%" y="213" width="0.0113%" height="15" fill="rgb(212,92,54)" fg:x="51996" fg:w="6"/><text x="97.9509%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="97.6692%" y="213" width="0.0282%" height="15" fill="rgb(247,201,17)" fg:x="52002" fg:w="15"/><text x="97.9621%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (772 instructions, 1.45%)</title><rect x="96.3958%" y="229" width="1.4500%" height="15" fill="rgb(213,124,48)" fg:x="51324" fg:w="772"/><text x="96.6887%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="97.8814%" y="181" width="0.0113%" height="15" fill="rgb(248,173,29)" fg:x="52115" fg:w="6"/><text x="98.1744%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="97.8927%" y="181" width="0.0188%" height="15" fill="rgb(241,123,29)" fg:x="52121" fg:w="10"/><text x="98.1856%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="97.8551%" y="197" width="0.1315%" height="15" fill="rgb(245,50,40)" fg:x="52101" fg:w="70"/><text x="98.1481%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.14%)</title><rect x="97.8551%" y="213" width="0.1352%" height="15" fill="rgb(247,75,11)" fg:x="52101" fg:w="72"/><text x="98.1481%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="97.8551%" y="229" width="0.1446%" height="15" fill="rgb(252,195,6)" fg:x="52101" fg:w="77"/><text x="98.1481%" y="239.50"></text></g><g><title>candid::utils::write_args (1,347 instructions, 2.53%)</title><rect x="95.6126%" y="245" width="2.5299%" height="15" fill="rgb(233,195,28)" fg:x="50907" fg:w="1347"/><text x="95.9055%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.1688%" y="197" width="0.0113%" height="15" fill="rgb(233,211,2)" fg:x="52268" fg:w="6"/><text x="98.4617%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="98.1800%" y="197" width="0.0301%" height="15" fill="rgb(245,100,26)" fg:x="52274" fg:w="16"/><text x="98.4730%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="98.1425%" y="213" width="0.1841%" height="15" fill="rgb(214,170,1)" fg:x="52254" fg:w="98"/><text x="98.4354%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="98.1425%" y="229" width="0.1878%" height="15" fill="rgb(227,122,23)" fg:x="52254" fg:w="100"/><text x="98.4354%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.3810%" y="197" width="0.0113%" height="15" fill="rgb(237,0,25)" fg:x="52381" fg:w="6"/><text x="98.6740%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.11%)</title><rect x="98.3998%" y="197" width="0.1052%" height="15" fill="rgb(222,120,21)" fg:x="52391" fg:w="56"/><text x="98.6928%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.5050%" y="197" width="0.0188%" height="15" fill="rgb(214,124,7)" fg:x="52447" fg:w="10"/><text x="98.7979%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.14%)</title><rect x="98.5237%" y="197" width="0.1390%" height="15" fill="rgb(254,86,48)" fg:x="52457" fg:w="74"/><text x="98.8167%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (280 instructions, 0.53%)</title><rect x="98.3397%" y="213" width="0.5259%" height="15" fill="rgb(238,219,46)" fg:x="52359" fg:w="280"/><text x="98.6327%" y="223.50"></text></g><g><title>__rdl_dealloc (282 instructions, 0.53%)</title><rect x="98.3397%" y="229" width="0.5296%" height="15" fill="rgb(245,214,28)" fg:x="52359" fg:w="282"/><text x="98.6327%" y="239.50"></text></g><g><title>__rust_dealloc (392 instructions, 0.74%)</title><rect x="98.1425%" y="245" width="0.7362%" height="15" fill="rgb(253,196,39)" fg:x="52254" fg:w="392"/><text x="98.4354%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (53,232 instructions, 99.98%)</title><rect x="0.0150%" y="261" width="99.9793%" height="15" fill="rgb(254,189,20)" fg:x="8" fg:w="53232"/><text x="0.3080%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (53,243 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,116,13)" fg:x="0" fg:w="53243"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_get (53,243 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(231,164,47)" fg:x="0" fg:w="53243"/><text x="0.2930%" y="287.50">canister_update batch_get</text></g></svg></svg>