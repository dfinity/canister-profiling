<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="44362"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0428%" height="15" fill="rgb(215,173,47)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0428%" y="197" width="0.1713%" height="15" fill="rgb(251,179,50)" fg:x="19" fg:w="76"/><text x="0.3358%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2141%" y="197" width="0.1713%" height="15" fill="rgb(219,146,3)" fg:x="95" fg:w="76"/><text x="0.5071%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3855%" y="165" width="0.1713%" height="15" fill="rgb(230,27,21)" fg:x="171" fg:w="76"/><text x="0.6784%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="0.5568%" y="149" width="0.1600%" height="15" fill="rgb(245,169,31)" fg:x="247" fg:w="71"/><text x="0.8498%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="0.7168%" y="149" width="0.9062%" height="15" fill="rgb(224,182,13)" fg:x="318" fg:w="402"/><text x="1.0098%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="1.6230%" y="149" width="0.1871%" height="15" fill="rgb(249,29,35)" fg:x="720" fg:w="83"/><text x="1.9160%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8101%" y="149" width="0.1217%" height="15" fill="rgb(251,71,36)" fg:x="803" fg:w="54"/><text x="2.1031%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9318%" y="149" width="0.1217%" height="15" fill="rgb(254,201,28)" fg:x="857" fg:w="54"/><text x="2.2248%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.0536%" y="149" width="0.1217%" height="15" fill="rgb(237,133,11)" fg:x="911" fg:w="54"/><text x="2.3465%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.1753%" y="149" width="0.1217%" height="15" fill="rgb(248,53,1)" fg:x="965" fg:w="54"/><text x="2.4683%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="2.2970%" y="149" width="0.1600%" height="15" fill="rgb(221,19,33)" fg:x="1019" fg:w="71"/><text x="2.5900%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.15%)</title><rect x="2.4571%" y="149" width="0.1465%" height="15" fill="rgb(224,222,41)" fg:x="1090" fg:w="65"/><text x="2.7500%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="2.6036%" y="149" width="0.9062%" height="15" fill="rgb(251,182,0)" fg:x="1155" fg:w="402"/><text x="2.8965%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="3.5098%" y="149" width="0.0361%" height="15" fill="rgb(237,159,51)" fg:x="1557" fg:w="16"/><text x="3.8027%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.5458%" y="133" width="0.1713%" height="15" fill="rgb(241,157,1)" fg:x="1573" fg:w="76"/><text x="3.8388%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.14%)</title><rect x="3.7171%" y="101" width="0.1353%" height="15" fill="rgb(207,148,20)" fg:x="1649" fg:w="60"/><text x="4.0101%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="3.7171%" y="117" width="0.1916%" height="15" fill="rgb(243,7,34)" fg:x="1649" fg:w="85"/><text x="4.0101%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.9088%" y="69" width="0.0203%" height="15" fill="rgb(239,12,14)" fg:x="1734" fg:w="9"/><text x="4.2017%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.9290%" y="53" width="0.0676%" height="15" fill="rgb(222,157,27)" fg:x="1743" fg:w="30"/><text x="4.2220%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.9290%" y="69" width="0.1240%" height="15" fill="rgb(224,53,5)" fg:x="1743" fg:w="55"/><text x="4.2220%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.26%)</title><rect x="3.9088%" y="85" width="0.2570%" height="15" fill="rgb(243,54,42)" fg:x="1734" fg:w="114"/><text x="4.2017%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.38%)</title><rect x="3.9088%" y="101" width="0.3764%" height="15" fill="rgb(235,218,38)" fg:x="1734" fg:w="167"/><text x="4.2017%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.39%)</title><rect x="3.9088%" y="117" width="0.3877%" height="15" fill="rgb(221,79,41)" fg:x="1734" fg:w="172"/><text x="4.2017%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.83%)</title><rect x="3.7171%" y="133" width="0.8295%" height="15" fill="rgb(229,21,2)" fg:x="1649" fg:w="368"/><text x="4.0101%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 1.27%)</title><rect x="3.5458%" y="149" width="1.2736%" height="15" fill="rgb(225,113,39)" fg:x="1573" fg:w="565"/><text x="3.8388%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="4.8194%" y="149" width="0.1871%" height="15" fill="rgb(221,23,48)" fg:x="2138" fg:w="83"/><text x="5.1124%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="5.0065%" y="149" width="0.1240%" height="15" fill="rgb(219,68,44)" fg:x="2221" fg:w="55"/><text x="5.2995%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="5.1305%" y="149" width="0.1465%" height="15" fill="rgb(228,172,29)" fg:x="2276" fg:w="65"/><text x="5.4235%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.15%)</title><rect x="5.2770%" y="149" width="0.1465%" height="15" fill="rgb(238,41,11)" fg:x="2341" fg:w="65"/><text x="5.5700%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="5.4236%" y="133" width="0.9062%" height="15" fill="rgb(238,34,6)" fg:x="2406" fg:w="402"/><text x="5.7165%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="6.3297%" y="133" width="0.0361%" height="15" fill="rgb(232,131,24)" fg:x="2808" fg:w="16"/><text x="6.6227%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.3658%" y="117" width="0.1713%" height="15" fill="rgb(210,176,7)" fg:x="2824" fg:w="76"/><text x="6.6588%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.14%)</title><rect x="6.5371%" y="85" width="0.1353%" height="15" fill="rgb(219,185,15)" fg:x="2900" fg:w="60"/><text x="6.8301%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="6.5371%" y="101" width="0.1916%" height="15" fill="rgb(231,42,10)" fg:x="2900" fg:w="85"/><text x="6.8301%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.7287%" y="53" width="0.0203%" height="15" fill="rgb(227,95,24)" fg:x="2985" fg:w="9"/><text x="7.0217%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.7490%" y="37" width="0.0676%" height="15" fill="rgb(210,114,39)" fg:x="2994" fg:w="30"/><text x="7.0420%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.7490%" y="53" width="0.1240%" height="15" fill="rgb(241,49,19)" fg:x="2994" fg:w="55"/><text x="7.0420%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.26%)</title><rect x="6.7287%" y="69" width="0.2570%" height="15" fill="rgb(228,205,39)" fg:x="2985" fg:w="114"/><text x="7.0217%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.38%)</title><rect x="6.7287%" y="85" width="0.3764%" height="15" fill="rgb(225,58,19)" fg:x="2985" fg:w="167"/><text x="7.0217%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.39%)</title><rect x="6.7287%" y="101" width="0.3877%" height="15" fill="rgb(221,50,31)" fg:x="2985" fg:w="172"/><text x="7.0217%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.83%)</title><rect x="6.5371%" y="117" width="0.8295%" height="15" fill="rgb(212,30,33)" fg:x="2900" fg:w="368"/><text x="6.8301%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 1.27%)</title><rect x="6.3658%" y="133" width="1.2736%" height="15" fill="rgb(212,184,37)" fg:x="2824" fg:w="565"/><text x="6.6588%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="7.6394%" y="133" width="0.1871%" height="15" fill="rgb(230,17,39)" fg:x="3389" fg:w="83"/><text x="7.9324%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.8265%" y="133" width="0.1240%" height="15" fill="rgb(219,26,35)" fg:x="3472" fg:w="55"/><text x="8.1195%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="7.9505%" y="117" width="0.1600%" height="15" fill="rgb(209,88,4)" fg:x="3527" fg:w="71"/><text x="8.2435%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.20%)</title><rect x="8.1105%" y="117" width="0.2029%" height="15" fill="rgb(228,148,27)" fg:x="3598" fg:w="90"/><text x="8.4035%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="8.3134%" y="117" width="0.1465%" height="15" fill="rgb(248,179,39)" fg:x="3688" fg:w="65"/><text x="8.6064%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.64%)</title><rect x="7.9505%" y="133" width="0.6424%" height="15" fill="rgb(250,120,49)" fg:x="3527" fg:w="285"/><text x="8.2435%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.18%)</title><rect x="8.5929%" y="133" width="0.1758%" height="15" fill="rgb(226,179,7)" fg:x="3812" fg:w="78"/><text x="8.8859%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 3.80%)</title><rect x="5.4236%" y="149" width="3.8028%" height="15" fill="rgb(209,225,9)" fg:x="2406" fg:w="1687"/><text x="5.7165%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="9.2264%" y="149" width="0.1465%" height="15" fill="rgb(211,65,46)" fg:x="4093" fg:w="65"/><text x="9.5193%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.3729%" y="149" width="0.0293%" height="15" fill="rgb(233,194,50)" fg:x="4158" fg:w="13"/><text x="9.6659%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.4022%" y="149" width="0.0293%" height="15" fill="rgb(250,4,30)" fg:x="4171" fg:w="13"/><text x="9.6952%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.4315%" y="149" width="0.0158%" height="15" fill="rgb(240,184,41)" fg:x="4184" fg:w="7"/><text x="9.7245%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.4473%" y="149" width="0.0338%" height="15" fill="rgb(245,152,26)" fg:x="4191" fg:w="15"/><text x="9.7402%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.4811%" y="133" width="0.1713%" height="15" fill="rgb(236,200,26)" fg:x="4206" fg:w="76"/><text x="9.7741%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.36%)</title><rect x="9.4811%" y="149" width="0.3584%" height="15" fill="rgb(244,109,20)" fg:x="4206" fg:w="159"/><text x="9.7741%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.8395%" y="117" width="0.1713%" height="15" fill="rgb(227,69,12)" fg:x="4365" fg:w="76"/><text x="10.1325%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.25%)</title><rect x="9.8395%" y="133" width="0.2480%" height="15" fill="rgb(230,5,23)" fg:x="4365" fg:w="110"/><text x="10.1325%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.41%)</title><rect x="9.8395%" y="149" width="0.4058%" height="15" fill="rgb(228,8,15)" fg:x="4365" fg:w="180"/><text x="10.1325%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.2453%" y="149" width="0.1713%" height="15" fill="rgb(229,194,2)" fg:x="4545" fg:w="76"/><text x="10.5382%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.4166%" y="149" width="0.1826%" height="15" fill="rgb(215,13,30)" fg:x="4621" fg:w="81"/><text x="10.7095%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.5992%" y="149" width="0.1713%" height="15" fill="rgb(244,16,39)" fg:x="4702" fg:w="76"/><text x="10.8921%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.7705%" y="149" width="0.1713%" height="15" fill="rgb(244,60,40)" fg:x="4778" fg:w="76"/><text x="11.0634%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.9463%" y="149" width="0.1826%" height="15" fill="rgb(225,99,27)" fg:x="4856" fg:w="81"/><text x="11.2393%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.90%)</title><rect x="11.1289%" y="149" width="0.8994%" height="15" fill="rgb(208,37,53)" fg:x="4937" fg:w="399"/><text x="11.4219%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.90%)</title><rect x="12.0283%" y="149" width="0.8994%" height="15" fill="rgb(250,183,49)" fg:x="5336" fg:w="399"/><text x="12.3213%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 14.53%)</title><rect x="0.5568%" y="165" width="14.5350%" height="15" fill="rgb(216,207,5)" fg:x="247" fg:w="6448"/><text x="0.8498%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (354 instructions, 0.80%)</title><rect x="15.0917%" y="165" width="0.7980%" height="15" fill="rgb(246,156,11)" fg:x="6695" fg:w="354"/><text x="15.3847%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="15.8897%" y="149" width="0.0271%" height="15" fill="rgb(251,213,43)" fg:x="7049" fg:w="12"/><text x="16.1827%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.11%)</title><rect x="15.8897%" y="165" width="0.1127%" height="15" fill="rgb(241,198,37)" fg:x="7049" fg:w="50"/><text x="16.1827%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="16.0024%" y="149" width="0.1240%" height="15" fill="rgb(252,138,22)" fg:x="7099" fg:w="55"/><text x="16.2954%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (196 instructions, 0.44%)</title><rect x="16.0024%" y="165" width="0.4418%" height="15" fill="rgb(249,86,51)" fg:x="7099" fg:w="196"/><text x="16.2954%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="16.4443%" y="149" width="0.0271%" height="15" fill="rgb(223,4,5)" fg:x="7295" fg:w="12"/><text x="16.7372%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="16.4713%" y="133" width="0.1195%" height="15" fill="rgb(226,119,53)" fg:x="7307" fg:w="53"/><text x="16.7643%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.20%)</title><rect x="16.5908%" y="133" width="0.1984%" height="15" fill="rgb(213,203,52)" fg:x="7360" fg:w="88"/><text x="16.8837%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.37%)</title><rect x="16.7891%" y="133" width="0.3652%" height="15" fill="rgb(205,187,13)" fg:x="7448" fg:w="162"/><text x="17.0821%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.22%)</title><rect x="16.4713%" y="149" width="1.2173%" height="15" fill="rgb(246,135,5)" fg:x="7307" fg:w="540"/><text x="16.7643%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 1.71%)</title><rect x="16.4443%" y="165" width="1.7132%" height="15" fill="rgb(226,72,26)" fg:x="7295" fg:w="760"/><text x="16.7372%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="18.1574%" y="165" width="0.1713%" height="15" fill="rgb(222,223,27)" fg:x="8055" fg:w="76"/><text x="18.4504%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="18.3287%" y="149" width="0.0271%" height="15" fill="rgb(254,105,35)" fg:x="8131" fg:w="12"/><text x="18.6217%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="18.3558%" y="133" width="0.1195%" height="15" fill="rgb(231,89,13)" fg:x="8143" fg:w="53"/><text x="18.6488%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.20%)</title><rect x="18.4753%" y="133" width="0.1984%" height="15" fill="rgb(230,86,1)" fg:x="8196" fg:w="88"/><text x="18.7682%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.37%)</title><rect x="18.6736%" y="133" width="0.3652%" height="15" fill="rgb(221,30,24)" fg:x="8284" fg:w="162"/><text x="18.9666%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.22%)</title><rect x="18.3558%" y="149" width="1.2173%" height="15" fill="rgb(222,178,32)" fg:x="8143" fg:w="540"/><text x="18.6488%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="19.5731%" y="149" width="0.1533%" height="15" fill="rgb(214,13,14)" fg:x="8683" fg:w="68"/><text x="19.8660%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="19.7263%" y="133" width="0.1826%" height="15" fill="rgb(227,56,43)" fg:x="8751" fg:w="81"/><text x="20.0193%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.24%)</title><rect x="19.7263%" y="149" width="0.2435%" height="15" fill="rgb(212,181,29)" fg:x="8751" fg:w="108"/><text x="20.0193%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 2.02%)</title><rect x="18.3287%" y="165" width="2.0175%" height="15" fill="rgb(241,128,46)" fg:x="8131" fg:w="895"/><text x="18.6217%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="20.3462%" y="117" width="0.1195%" height="15" fill="rgb(233,132,22)" fg:x="9026" fg:w="53"/><text x="20.6392%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.18%)</title><rect x="20.3462%" y="133" width="0.1781%" height="15" fill="rgb(222,88,31)" fg:x="9026" fg:w="79"/><text x="20.6392%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.66%)</title><rect x="20.3462%" y="149" width="0.6582%" height="15" fill="rgb(225,164,18)" fg:x="9026" fg:w="292"/><text x="20.6392%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.852 (15 instructions, 0.03%)</title><rect x="21.0045%" y="149" width="0.0338%" height="15" fill="rgb(246,64,17)" fg:x="9318" fg:w="15"/><text x="21.2974%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.0383%" y="149" width="0.0248%" height="15" fill="rgb(219,189,28)" fg:x="9333" fg:w="11"/><text x="21.3312%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 1.12%)</title><rect x="20.3462%" y="165" width="1.1226%" height="15" fill="rgb(220,190,34)" fg:x="9026" fg:w="498"/><text x="20.6392%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.10%)</title><rect x="21.4688%" y="165" width="0.1014%" height="15" fill="rgb(220,204,35)" fg:x="9524" fg:w="45"/><text x="21.7618%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.27%)</title><rect x="21.5703%" y="149" width="0.2705%" height="15" fill="rgb(247,22,35)" fg:x="9569" fg:w="120"/><text x="21.8632%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.28%)</title><rect x="21.9016%" y="149" width="0.2773%" height="15" fill="rgb(242,94,14)" fg:x="9716" fg:w="123"/><text x="22.1946%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 0.67%)</title><rect x="21.5703%" y="165" width="0.6695%" height="15" fill="rgb(230,97,51)" fg:x="9569" fg:w="297"/><text x="21.8632%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="22.2398%" y="149" width="0.0631%" height="15" fill="rgb(209,110,47)" fg:x="9866" fg:w="28"/><text x="22.5327%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (15 instructions, 0.03%)</title><rect x="22.3029%" y="149" width="0.0338%" height="15" fill="rgb(251,176,13)" fg:x="9894" fg:w="15"/><text x="22.5958%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (15 instructions, 0.03%)</title><rect x="22.3367%" y="149" width="0.0338%" height="15" fill="rgb(240,193,32)" fg:x="9909" fg:w="15"/><text x="22.6297%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.30%)</title><rect x="22.2398%" y="165" width="0.3043%" height="15" fill="rgb(232,106,45)" fg:x="9866" fg:w="135"/><text x="22.5327%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.5441%" y="165" width="0.0248%" height="15" fill="rgb(241,88,30)" fg:x="10001" fg:w="11"/><text x="22.8370%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.5689%" y="165" width="0.0248%" height="15" fill="rgb(236,37,6)" fg:x="10012" fg:w="11"/><text x="22.8618%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.5937%" y="165" width="0.0248%" height="15" fill="rgb(242,130,26)" fg:x="10023" fg:w="11"/><text x="22.8866%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.92%)</title><rect x="22.6185%" y="165" width="0.9242%" height="15" fill="rgb(238,184,29)" fg:x="10034" fg:w="410"/><text x="22.9114%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.03%)</title><rect x="23.5427%" y="133" width="0.0338%" height="15" fill="rgb(226,199,20)" fg:x="10444" fg:w="15"/><text x="23.8356%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.38%)</title><rect x="23.5765%" y="133" width="0.3787%" height="15" fill="rgb(212,217,9)" fg:x="10459" fg:w="168"/><text x="23.8695%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="23.9552%" y="101" width="0.1420%" height="15" fill="rgb(238,207,4)" fg:x="10627" fg:w="63"/><text x="24.2482%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.37%)</title><rect x="23.9552%" y="117" width="0.3674%" height="15" fill="rgb(228,116,1)" fg:x="10627" fg:w="163"/><text x="24.2482%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.43%)</title><rect x="23.9552%" y="133" width="0.4283%" height="15" fill="rgb(252,7,21)" fg:x="10627" fg:w="190"/><text x="24.2482%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="24.3835%" y="133" width="0.0248%" height="15" fill="rgb(233,92,31)" fg:x="10817" fg:w="11"/><text x="24.6765%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 0.96%)</title><rect x="23.5427%" y="149" width="0.9558%" height="15" fill="rgb(207,167,50)" fg:x="10444" fg:w="424"/><text x="23.8356%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (461 instructions, 1.04%)</title><rect x="23.5427%" y="165" width="1.0392%" height="15" fill="rgb(244,5,2)" fg:x="10444" fg:w="461"/><text x="23.8356%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="24.5818%" y="149" width="0.1240%" height="15" fill="rgb(250,192,6)" fg:x="10905" fg:w="55"/><text x="24.8748%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="24.7058%" y="149" width="0.1420%" height="15" fill="rgb(224,227,49)" fg:x="10960" fg:w="63"/><text x="24.9988%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.45%)</title><rect x="24.5818%" y="165" width="0.4486%" height="15" fill="rgb(220,107,19)" fg:x="10905" fg:w="199"/><text x="24.8748%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,315 instructions, 25.51%)</title><rect x="0.3855%" y="181" width="25.5061%" height="15" fill="rgb(238,102,27)" fg:x="171" fg:w="11315"/><text x="0.6784%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="25.8915%" y="181" width="1.3953%" height="15" fill="rgb(229,181,45)" fg:x="11486" fg:w="619"/><text x="26.1845%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (641 instructions, 1.44%)</title><rect x="27.2869%" y="181" width="1.4449%" height="15" fill="rgb(209,202,13)" fg:x="12105" fg:w="641"/><text x="27.5798%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="28.7318%" y="181" width="1.3953%" height="15" fill="rgb(216,168,24)" fg:x="12746" fg:w="619"/><text x="29.0248%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="30.1271%" y="181" width="1.3953%" height="15" fill="rgb(238,53,34)" fg:x="13365" fg:w="619"/><text x="30.4201%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="31.5225%" y="181" width="1.3953%" height="15" fill="rgb(217,208,20)" fg:x="13984" fg:w="619"/><text x="31.8154%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="32.9178%" y="181" width="1.4607%" height="15" fill="rgb(205,11,13)" fg:x="14603" fg:w="648"/><text x="33.2108%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="34.3785%" y="181" width="1.4607%" height="15" fill="rgb(227,3,23)" fg:x="15251" fg:w="648"/><text x="34.6715%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="35.8392%" y="181" width="1.3953%" height="15" fill="rgb(214,205,42)" fg:x="15899" fg:w="619"/><text x="36.1322%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="37.2346%" y="181" width="1.3953%" height="15" fill="rgb(219,41,0)" fg:x="16518" fg:w="619"/><text x="37.5275%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="38.6299%" y="181" width="1.3142%" height="15" fill="rgb(205,8,34)" fg:x="17137" fg:w="583"/><text x="38.9229%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="39.9441%" y="181" width="1.3953%" height="15" fill="rgb(212,28,33)" fg:x="17720" fg:w="619"/><text x="40.2371%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="41.3394%" y="181" width="1.3142%" height="15" fill="rgb(232,65,5)" fg:x="18339" fg:w="583"/><text x="41.6324%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="42.6536%" y="181" width="1.3953%" height="15" fill="rgb(232,9,33)" fg:x="18922" fg:w="619"/><text x="42.9466%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="44.0490%" y="181" width="1.3142%" height="15" fill="rgb(238,64,39)" fg:x="19541" fg:w="583"/><text x="44.3419%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="45.3631%" y="181" width="1.3953%" height="15" fill="rgb(210,56,38)" fg:x="20124" fg:w="619"/><text x="45.6561%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="46.7585%" y="181" width="1.3953%" height="15" fill="rgb(234,166,22)" fg:x="20743" fg:w="619"/><text x="47.0515%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="48.1538%" y="181" width="1.3953%" height="15" fill="rgb(240,189,39)" fg:x="21362" fg:w="619"/><text x="48.4468%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="49.5492%" y="181" width="1.3953%" height="15" fill="rgb(225,12,15)" fg:x="21981" fg:w="619"/><text x="49.8421%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="50.9445%" y="181" width="1.3953%" height="15" fill="rgb(212,6,49)" fg:x="22600" fg:w="619"/><text x="51.2375%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="52.3398%" y="181" width="1.3142%" height="15" fill="rgb(213,29,33)" fg:x="23219" fg:w="583"/><text x="52.6328%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="53.6540%" y="181" width="1.4607%" height="15" fill="rgb(217,10,17)" fg:x="23802" fg:w="648"/><text x="53.9470%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.53%)</title><rect x="55.1147%" y="181" width="1.5261%" height="15" fill="rgb(229,160,48)" fg:x="24450" fg:w="677"/><text x="55.4077%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="56.6408%" y="181" width="1.3953%" height="15" fill="rgb(237,28,0)" fg:x="25127" fg:w="619"/><text x="56.9338%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="58.0362%" y="181" width="1.3796%" height="15" fill="rgb(212,217,50)" fg:x="25746" fg:w="612"/><text x="58.3291%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="59.4157%" y="181" width="1.3796%" height="15" fill="rgb(241,165,44)" fg:x="26358" fg:w="612"/><text x="59.7087%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="60.7953%" y="181" width="1.3142%" height="15" fill="rgb(216,213,27)" fg:x="26970" fg:w="583"/><text x="61.0882%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="62.1095%" y="181" width="1.3953%" height="15" fill="rgb(227,177,25)" fg:x="27553" fg:w="619"/><text x="62.4024%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="63.5048%" y="181" width="1.3953%" height="15" fill="rgb(219,85,15)" fg:x="28172" fg:w="619"/><text x="63.7978%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="64.9001%" y="181" width="1.4607%" height="15" fill="rgb(219,217,14)" fg:x="28791" fg:w="648"/><text x="65.1931%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="66.3608%" y="181" width="1.3142%" height="15" fill="rgb(229,137,24)" fg:x="29439" fg:w="583"/><text x="66.6538%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="67.6750%" y="181" width="1.4607%" height="15" fill="rgb(243,67,47)" fg:x="30022" fg:w="648"/><text x="67.9680%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="69.1357%" y="181" width="1.3142%" height="15" fill="rgb(228,128,0)" fg:x="30670" fg:w="583"/><text x="69.4287%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="70.4499%" y="181" width="1.4607%" height="15" fill="rgb(232,20,51)" fg:x="31253" fg:w="648"/><text x="70.7429%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="71.9106%" y="181" width="1.3953%" height="15" fill="rgb(230,99,25)" fg:x="31901" fg:w="619"/><text x="72.2036%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="73.3060%" y="181" width="1.3953%" height="15" fill="rgb(209,6,6)" fg:x="32520" fg:w="619"/><text x="73.5990%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (706 instructions, 1.59%)</title><rect x="74.7013%" y="181" width="1.5915%" height="15" fill="rgb(229,116,3)" fg:x="33139" fg:w="706"/><text x="74.9943%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="76.2928%" y="181" width="1.3953%" height="15" fill="rgb(231,181,8)" fg:x="33845" fg:w="619"/><text x="76.5857%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="77.6881%" y="181" width="1.3953%" height="15" fill="rgb(214,71,28)" fg:x="34464" fg:w="619"/><text x="77.9811%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="79.0834%" y="181" width="1.3953%" height="15" fill="rgb(210,179,40)" fg:x="35083" fg:w="619"/><text x="79.3764%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="80.4788%" y="181" width="1.3953%" height="15" fill="rgb(238,101,27)" fg:x="35702" fg:w="619"/><text x="80.7718%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="81.8741%" y="181" width="1.3953%" height="15" fill="rgb(228,50,19)" fg:x="36321" fg:w="619"/><text x="82.1671%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="83.2695%" y="181" width="1.3953%" height="15" fill="rgb(208,206,25)" fg:x="36940" fg:w="619"/><text x="83.5624%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="84.6648%" y="181" width="1.4607%" height="15" fill="rgb(250,16,13)" fg:x="37559" fg:w="648"/><text x="84.9578%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="86.1255%" y="181" width="1.3953%" height="15" fill="rgb(231,71,33)" fg:x="38207" fg:w="619"/><text x="86.4185%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="87.5209%" y="181" width="1.3796%" height="15" fill="rgb(211,50,52)" fg:x="38826" fg:w="612"/><text x="87.8138%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="88.9004%" y="181" width="1.3953%" height="15" fill="rgb(252,66,43)" fg:x="39438" fg:w="619"/><text x="89.1934%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="90.2957%" y="181" width="1.3953%" height="15" fill="rgb(233,196,22)" fg:x="40057" fg:w="619"/><text x="90.5887%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="91.6911%" y="181" width="1.3953%" height="15" fill="rgb(229,66,0)" fg:x="40676" fg:w="619"/><text x="91.9841%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="93.0864%" y="181" width="1.3953%" height="15" fill="rgb(229,27,9)" fg:x="41295" fg:w="619"/><text x="93.3794%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="94.4818%" y="181" width="1.3796%" height="15" fill="rgb(209,105,31)" fg:x="41914" fg:w="612"/><text x="94.7747%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="95.8613%" y="149" width="0.0271%" height="15" fill="rgb(247,163,53)" fg:x="42526" fg:w="12"/><text x="96.1543%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.23%)</title><rect x="95.8884%" y="133" width="0.2254%" height="15" fill="rgb(233,221,12)" fg:x="42538" fg:w="100"/><text x="96.1813%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.29%)</title><rect x="95.8884%" y="149" width="0.2863%" height="15" fill="rgb(223,149,14)" fg:x="42538" fg:w="127"/><text x="96.1813%" y="159.50"></text></g><g><title>memset (136 instructions, 0.31%)</title><rect x="96.1747%" y="149" width="0.3066%" height="15" fill="rgb(248,90,34)" fg:x="42665" fg:w="136"/><text x="96.4676%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (433 instructions, 0.98%)</title><rect x="95.8613%" y="165" width="0.9761%" height="15" fill="rgb(254,68,8)" fg:x="42526" fg:w="433"/><text x="96.1543%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="96.8374%" y="149" width="0.0721%" height="15" fill="rgb(212,162,27)" fg:x="42959" fg:w="32"/><text x="97.1304%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="96.9095%" y="101" width="0.1713%" height="15" fill="rgb(228,35,6)" fg:x="42991" fg:w="76"/><text x="97.2025%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.25%)</title><rect x="96.9095%" y="117" width="0.2480%" height="15" fill="rgb(233,183,7)" fg:x="42991" fg:w="110"/><text x="97.2025%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 0.40%)</title><rect x="96.9095%" y="133" width="0.3990%" height="15" fill="rgb(219,153,25)" fg:x="42991" fg:w="177"/><text x="97.2025%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.3085%" y="133" width="0.0248%" height="15" fill="rgb(251,52,9)" fg:x="43168" fg:w="11"/><text x="97.6015%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.3333%" y="133" width="0.0248%" height="15" fill="rgb(245,80,15)" fg:x="43179" fg:w="11"/><text x="97.6263%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 0.81%)</title><rect x="96.9095%" y="149" width="0.8138%" height="15" fill="rgb(252,52,28)" fg:x="42991" fg:w="361"/><text x="97.2025%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="97.7233%" y="149" width="0.0676%" height="15" fill="rgb(215,175,20)" fg:x="43352" fg:w="30"/><text x="98.0162%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="97.7909%" y="149" width="0.0113%" height="15" fill="rgb(250,196,27)" fg:x="43382" fg:w="5"/><text x="98.0839%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 1.12%)</title><rect x="96.8374%" y="165" width="1.1181%" height="15" fill="rgb(229,188,6)" fg:x="42959" fg:w="496"/><text x="97.1304%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="97.9645%" y="165" width="0.1240%" height="15" fill="rgb(233,62,26)" fg:x="43459" fg:w="55"/><text x="98.2574%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,062 instructions, 2.39%)</title><rect x="95.8613%" y="181" width="2.3939%" height="15" fill="rgb(216,41,33)" fg:x="42526" fg:w="1062"/><text x="96.1543%" y="191.50">i..</text></g><g><title>heap::batch_get_5_::{{closure}} (43,756 instructions, 98.63%)</title><rect x="0.3855%" y="197" width="98.6340%" height="15" fill="rgb(206,20,46)" fg:x="171" fg:w="43756"/><text x="0.6784%" y="207.50">heap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.0194%" y="197" width="0.0271%" height="15" fill="rgb(224,100,1)" fg:x="43927" fg:w="12"/><text x="99.3124%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.12%)</title><rect x="99.2291%" y="181" width="0.1240%" height="15" fill="rgb(237,34,23)" fg:x="44020" fg:w="55"/><text x="99.5220%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.14%)</title><rect x="99.3530%" y="181" width="0.1420%" height="15" fill="rgb(212,225,25)" fg:x="44075" fg:w="63"/><text x="99.6460%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 0.73%)</title><rect x="99.0465%" y="197" width="0.7326%" height="15" fill="rgb(212,18,40)" fg:x="43939" fg:w="325"/><text x="99.3394%" y="207.50"></text></g><g><title>all (44,362 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,90,2)" fg:x="0" fg:w="44362"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (44,362 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(239,189,1)" fg:x="0" fg:w="44362"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>