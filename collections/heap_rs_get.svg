<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53320"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0356%" height="15" fill="rgb(249,8,30)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0356%" y="197" width="0.1425%" height="15" fill="rgb(249,180,9)" fg:x="19" fg:w="76"/><text x="0.3286%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1782%" y="197" width="0.1425%" height="15" fill="rgb(252,76,28)" fg:x="95" fg:w="76"/><text x="0.4711%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3207%" y="165" width="0.1425%" height="15" fill="rgb(241,72,6)" fg:x="171" fg:w="76"/><text x="0.6137%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="0.4632%" y="149" width="0.1332%" height="15" fill="rgb(220,5,6)" fg:x="247" fg:w="71"/><text x="0.7562%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="0.5964%" y="149" width="0.7502%" height="15" fill="rgb(244,60,47)" fg:x="318" fg:w="400"/><text x="0.8894%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="1.3466%" y="149" width="0.1594%" height="15" fill="rgb(226,216,21)" fg:x="718" fg:w="85"/><text x="1.6396%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.5060%" y="149" width="0.1013%" height="15" fill="rgb(209,73,12)" fg:x="803" fg:w="54"/><text x="1.7990%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6073%" y="149" width="0.1013%" height="15" fill="rgb(207,97,36)" fg:x="857" fg:w="54"/><text x="1.9002%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7086%" y="149" width="0.1013%" height="15" fill="rgb(254,22,0)" fg:x="911" fg:w="54"/><text x="2.0015%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8098%" y="149" width="0.1013%" height="15" fill="rgb(240,98,28)" fg:x="965" fg:w="54"/><text x="2.1028%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="1.9111%" y="149" width="0.1332%" height="15" fill="rgb(229,20,21)" fg:x="1019" fg:w="71"/><text x="2.2041%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0443%" y="149" width="0.1219%" height="15" fill="rgb(246,110,6)" fg:x="1090" fg:w="65"/><text x="2.3372%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="2.1662%" y="149" width="0.7502%" height="15" fill="rgb(249,86,2)" fg:x="1155" fg:w="400"/><text x="2.4591%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9164%" y="149" width="0.0300%" height="15" fill="rgb(254,122,8)" fg:x="1555" fg:w="16"/><text x="3.2093%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9464%" y="133" width="0.1425%" height="15" fill="rgb(218,146,19)" fg:x="1571" fg:w="76"/><text x="3.2393%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0889%" y="101" width="0.1125%" height="15" fill="rgb(253,178,53)" fg:x="1647" fg:w="60"/><text x="3.3819%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0889%" y="117" width="0.1594%" height="15" fill="rgb(231,180,48)" fg:x="1647" fg:w="85"/><text x="3.3819%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2483%" y="69" width="0.0169%" height="15" fill="rgb(240,165,48)" fg:x="1732" fg:w="9"/><text x="3.5413%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2652%" y="53" width="0.0563%" height="15" fill="rgb(212,83,49)" fg:x="1741" fg:w="30"/><text x="3.5582%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2652%" y="69" width="0.1032%" height="15" fill="rgb(235,33,10)" fg:x="1741" fg:w="55"/><text x="3.5582%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2483%" y="85" width="0.2213%" height="15" fill="rgb(221,221,12)" fg:x="1732" fg:w="118"/><text x="3.5413%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2483%" y="101" width="0.3207%" height="15" fill="rgb(227,8,6)" fg:x="1732" fg:w="171"/><text x="3.5413%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2483%" y="117" width="0.3301%" height="15" fill="rgb(205,219,27)" fg:x="1732" fg:w="176"/><text x="3.5413%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="3.0889%" y="133" width="0.6977%" height="15" fill="rgb(209,177,47)" fg:x="1647" fg:w="372"/><text x="3.3819%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.11%)</title><rect x="2.9464%" y="149" width="1.1140%" height="15" fill="rgb(228,87,18)" fg:x="1571" fg:w="594"/><text x="3.2393%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="4.0604%" y="149" width="0.1594%" height="15" fill="rgb(221,36,3)" fg:x="2165" fg:w="85"/><text x="4.3534%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.2198%" y="149" width="0.1032%" height="15" fill="rgb(234,153,41)" fg:x="2250" fg:w="55"/><text x="4.5128%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="4.3230%" y="149" width="0.1238%" height="15" fill="rgb(207,105,28)" fg:x="2305" fg:w="66"/><text x="4.6159%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4467%" y="149" width="0.1219%" height="15" fill="rgb(251,10,44)" fg:x="2371" fg:w="65"/><text x="4.7397%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="4.5686%" y="133" width="0.7502%" height="15" fill="rgb(249,157,16)" fg:x="2436" fg:w="400"/><text x="4.8616%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.3188%" y="133" width="0.0300%" height="15" fill="rgb(226,115,44)" fg:x="2836" fg:w="16"/><text x="5.6118%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3488%" y="117" width="0.1425%" height="15" fill="rgb(223,105,40)" fg:x="2852" fg:w="76"/><text x="5.6418%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4914%" y="85" width="0.1125%" height="15" fill="rgb(223,43,0)" fg:x="2928" fg:w="60"/><text x="5.7843%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4914%" y="101" width="0.1594%" height="15" fill="rgb(217,216,24)" fg:x="2928" fg:w="85"/><text x="5.7843%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6508%" y="53" width="0.0169%" height="15" fill="rgb(209,101,9)" fg:x="3013" fg:w="9"/><text x="5.9438%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6677%" y="37" width="0.0563%" height="15" fill="rgb(234,121,6)" fg:x="3022" fg:w="30"/><text x="5.9606%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6677%" y="53" width="0.1032%" height="15" fill="rgb(213,112,50)" fg:x="3022" fg:w="55"/><text x="5.9606%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6508%" y="69" width="0.2213%" height="15" fill="rgb(224,139,41)" fg:x="3013" fg:w="118"/><text x="5.9438%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6508%" y="85" width="0.3207%" height="15" fill="rgb(228,117,24)" fg:x="3013" fg:w="171"/><text x="5.9438%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6508%" y="101" width="0.3301%" height="15" fill="rgb(211,33,1)" fg:x="3013" fg:w="176"/><text x="5.9438%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.70%)</title><rect x="5.4914%" y="117" width="0.6977%" height="15" fill="rgb(250,89,26)" fg:x="2928" fg:w="372"/><text x="5.7843%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.11%)</title><rect x="5.3488%" y="133" width="1.1140%" height="15" fill="rgb(231,209,20)" fg:x="2852" fg:w="594"/><text x="5.6418%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="6.4629%" y="133" width="0.1594%" height="15" fill="rgb(226,127,50)" fg:x="3446" fg:w="85"/><text x="6.7558%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.6223%" y="133" width="0.1032%" height="15" fill="rgb(210,122,47)" fg:x="3531" fg:w="55"/><text x="6.9152%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="6.7254%" y="117" width="0.1332%" height="15" fill="rgb(212,38,33)" fg:x="3586" fg:w="71"/><text x="7.0184%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8586%" y="117" width="0.1707%" height="15" fill="rgb(240,25,34)" fg:x="3657" fg:w="91"/><text x="7.1516%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="7.0293%" y="117" width="0.1238%" height="15" fill="rgb(214,220,1)" fg:x="3748" fg:w="66"/><text x="7.3222%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.54%)</title><rect x="6.7254%" y="133" width="0.5383%" height="15" fill="rgb(212,226,2)" fg:x="3586" fg:w="287"/><text x="7.0184%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.2637%" y="133" width="0.1425%" height="15" fill="rgb(247,213,31)" fg:x="3873" fg:w="76"/><text x="7.5567%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 3.21%)</title><rect x="4.5686%" y="149" width="3.2146%" height="15" fill="rgb(248,169,13)" fg:x="2436" fg:w="1714"/><text x="4.8616%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="7.7832%" y="149" width="0.1238%" height="15" fill="rgb(213,125,5)" fg:x="4150" fg:w="66"/><text x="8.0762%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.9070%" y="149" width="0.0244%" height="15" fill="rgb(207,223,15)" fg:x="4216" fg:w="13"/><text x="8.1999%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.9314%" y="149" width="0.0244%" height="15" fill="rgb(236,5,36)" fg:x="4229" fg:w="13"/><text x="8.2243%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.9557%" y="149" width="0.0131%" height="15" fill="rgb(246,56,3)" fg:x="4242" fg:w="7"/><text x="8.2487%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9689%" y="149" width="0.0281%" height="15" fill="rgb(231,71,3)" fg:x="4249" fg:w="15"/><text x="8.2618%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9970%" y="133" width="0.1425%" height="15" fill="rgb(235,191,1)" fg:x="4264" fg:w="76"/><text x="8.2900%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9970%" y="149" width="0.2982%" height="15" fill="rgb(249,65,16)" fg:x="4264" fg:w="159"/><text x="8.2900%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2952%" y="117" width="0.1425%" height="15" fill="rgb(225,135,25)" fg:x="4423" fg:w="76"/><text x="8.5882%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.21%)</title><rect x="8.2952%" y="133" width="0.2082%" height="15" fill="rgb(254,124,28)" fg:x="4423" fg:w="111"/><text x="8.5882%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 0.34%)</title><rect x="8.2952%" y="149" width="0.3357%" height="15" fill="rgb(211,201,36)" fg:x="4423" fg:w="179"/><text x="8.5882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.6309%" y="149" width="0.1425%" height="15" fill="rgb(215,75,19)" fg:x="4602" fg:w="76"/><text x="8.9239%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.7734%" y="149" width="0.1519%" height="15" fill="rgb(220,202,3)" fg:x="4678" fg:w="81"/><text x="9.0664%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.9254%" y="149" width="0.1425%" height="15" fill="rgb(230,190,41)" fg:x="4759" fg:w="76"/><text x="9.2183%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="9.0679%" y="149" width="0.1425%" height="15" fill="rgb(213,113,4)" fg:x="4835" fg:w="76"/><text x="9.3609%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.2142%" y="149" width="0.1519%" height="15" fill="rgb(208,7,46)" fg:x="4913" fg:w="81"/><text x="9.5071%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.71%)</title><rect x="9.3661%" y="149" width="0.7146%" height="15" fill="rgb(227,144,51)" fg:x="4994" fg:w="381"/><text x="9.6591%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.71%)</title><rect x="10.0806%" y="149" width="0.7146%" height="15" fill="rgb(227,212,17)" fg:x="5375" fg:w="381"/><text x="10.3736%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,424 instructions, 12.05%)</title><rect x="0.4632%" y="165" width="12.0480%" height="15" fill="rgb(221,150,10)" fg:x="247" fg:w="6424"/><text x="0.7562%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (336 instructions, 0.63%)</title><rect x="12.5113%" y="165" width="0.6302%" height="15" fill="rgb(224,172,37)" fg:x="6671" fg:w="336"/><text x="12.8042%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="13.1414%" y="165" width="0.0731%" height="15" fill="rgb(251,95,38)" fg:x="7007" fg:w="39"/><text x="13.4344%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.14%)</title><rect x="13.2146%" y="165" width="0.1369%" height="15" fill="rgb(220,163,6)" fg:x="7046" fg:w="73"/><text x="13.5075%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.3608%" y="133" width="0.0994%" height="15" fill="rgb(219,63,19)" fg:x="7124" fg:w="53"/><text x="13.6538%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.17%)</title><rect x="13.4602%" y="133" width="0.1669%" height="15" fill="rgb(244,2,36)" fg:x="7177" fg:w="89"/><text x="13.7532%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.30%)</title><rect x="13.6272%" y="133" width="0.3020%" height="15" fill="rgb(223,30,31)" fg:x="7266" fg:w="161"/><text x="13.9201%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.3608%" y="149" width="1.0128%" height="15" fill="rgb(228,17,54)" fg:x="7124" fg:w="540"/><text x="13.6538%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.42%)</title><rect x="13.3515%" y="165" width="1.4160%" height="15" fill="rgb(218,161,5)" fg:x="7119" fg:w="755"/><text x="13.6444%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="14.7674%" y="149" width="0.1032%" height="15" fill="rgb(251,109,20)" fg:x="7874" fg:w="55"/><text x="15.0604%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (162 instructions, 0.30%)</title><rect x="14.7674%" y="165" width="0.3038%" height="15" fill="rgb(238,200,29)" fg:x="7874" fg:w="162"/><text x="15.0604%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="15.0806%" y="133" width="0.0994%" height="15" fill="rgb(224,155,16)" fg:x="8041" fg:w="53"/><text x="15.3736%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.17%)</title><rect x="15.1800%" y="133" width="0.1669%" height="15" fill="rgb(215,5,54)" fg:x="8094" fg:w="89"/><text x="15.4730%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.30%)</title><rect x="15.3470%" y="133" width="0.3020%" height="15" fill="rgb(252,145,25)" fg:x="8183" fg:w="161"/><text x="15.6399%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="15.0806%" y="149" width="1.0128%" height="15" fill="rgb(223,215,44)" fg:x="8041" fg:w="540"/><text x="15.3736%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="16.0934%" y="149" width="0.1275%" height="15" fill="rgb(222,10,10)" fg:x="8581" fg:w="68"/><text x="16.3864%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.2209%" y="133" width="0.1519%" height="15" fill="rgb(254,105,22)" fg:x="8649" fg:w="81"/><text x="16.5139%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.2209%" y="149" width="0.2026%" height="15" fill="rgb(205,144,16)" fg:x="8649" fg:w="108"/><text x="16.5139%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.67%)</title><rect x="15.0713%" y="165" width="1.6673%" height="15" fill="rgb(221,100,13)" fg:x="8036" fg:w="889"/><text x="15.3642%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.7386%" y="117" width="0.0994%" height="15" fill="rgb(232,112,47)" fg:x="8925" fg:w="53"/><text x="17.0315%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="16.7386%" y="133" width="0.1482%" height="15" fill="rgb(240,131,1)" fg:x="8925" fg:w="79"/><text x="17.0315%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.55%)</title><rect x="16.7386%" y="149" width="0.5476%" height="15" fill="rgb(212,13,45)" fg:x="8925" fg:w="292"/><text x="17.0315%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.03%)</title><rect x="17.2862%" y="149" width="0.0281%" height="15" fill="rgb(223,98,29)" fg:x="9217" fg:w="15"/><text x="17.5792%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3143%" y="149" width="0.0206%" height="15" fill="rgb(211,222,1)" fg:x="9232" fg:w="11"/><text x="17.6073%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.90%)</title><rect x="16.7386%" y="165" width="0.8965%" height="15" fill="rgb(222,11,39)" fg:x="8925" fg:w="478"/><text x="17.0315%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.06%)</title><rect x="17.6350%" y="165" width="0.0619%" height="15" fill="rgb(254,216,39)" fg:x="9403" fg:w="33"/><text x="17.9280%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.6969%" y="149" width="0.2307%" height="15" fill="rgb(210,202,14)" fg:x="9436" fg:w="123"/><text x="17.9899%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.9782%" y="149" width="0.2307%" height="15" fill="rgb(234,134,20)" fg:x="9586" fg:w="123"/><text x="18.2712%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.6969%" y="165" width="0.5626%" height="15" fill="rgb(220,47,8)" fg:x="9436" fg:w="300"/><text x="17.9899%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.2596%" y="149" width="0.0525%" height="15" fill="rgb(224,66,20)" fg:x="9736" fg:w="28"/><text x="18.5525%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.18%)</title><rect x="18.2596%" y="165" width="0.1819%" height="15" fill="rgb(226,202,6)" fg:x="9736" fg:w="97"/><text x="18.5525%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4415%" y="165" width="0.0206%" height="15" fill="rgb(218,59,13)" fg:x="9833" fg:w="11"/><text x="18.7345%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4621%" y="165" width="0.0206%" height="15" fill="rgb(238,208,11)" fg:x="9844" fg:w="11"/><text x="18.7551%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4827%" y="165" width="0.0206%" height="15" fill="rgb(205,73,34)" fg:x="9855" fg:w="11"/><text x="18.7757%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.77%)</title><rect x="18.5034%" y="165" width="0.7708%" height="15" fill="rgb(227,99,51)" fg:x="9866" fg:w="411"/><text x="18.7963%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.2742%" y="133" width="0.0225%" height="15" fill="rgb(235,28,15)" fg:x="10277" fg:w="12"/><text x="19.5672%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.32%)</title><rect x="19.2967%" y="133" width="0.3151%" height="15" fill="rgb(235,21,45)" fg:x="10289" fg:w="168"/><text x="19.5897%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="19.6118%" y="101" width="0.1182%" height="15" fill="rgb(248,127,33)" fg:x="10457" fg:w="63"/><text x="19.9047%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.39%)</title><rect x="19.6118%" y="117" width="0.3920%" height="15" fill="rgb(238,69,17)" fg:x="10457" fg:w="209"/><text x="19.9047%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.44%)</title><rect x="19.6118%" y="133" width="0.4426%" height="15" fill="rgb(239,12,34)" fg:x="10457" fg:w="236"/><text x="19.9047%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.0544%" y="133" width="0.0206%" height="15" fill="rgb(229,188,4)" fg:x="10693" fg:w="11"/><text x="20.3474%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 0.88%)</title><rect x="19.2742%" y="149" width="0.8796%" height="15" fill="rgb(231,201,40)" fg:x="10277" fg:w="469"/><text x="19.5672%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 0.94%)</title><rect x="19.2742%" y="165" width="0.9434%" height="15" fill="rgb(254,197,38)" fg:x="10277" fg:w="503"/><text x="19.5672%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="20.2176%" y="149" width="0.1032%" height="15" fill="rgb(239,5,38)" fg:x="10780" fg:w="55"/><text x="20.5105%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="20.3207%" y="149" width="0.1182%" height="15" fill="rgb(247,54,52)" fg:x="10835" fg:w="63"/><text x="20.6137%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 0.38%)</title><rect x="20.2176%" y="165" width="0.3751%" height="15" fill="rgb(209,79,45)" fg:x="10780" fg:w="200"/><text x="20.5105%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,200 instructions, 21.01%)</title><rect x="0.3207%" y="181" width="21.0053%" height="15" fill="rgb(212,67,2)" fg:x="171" fg:w="11200"/><text x="0.6137%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="21.3260%" y="181" width="1.5004%" height="15" fill="rgb(210,130,47)" fg:x="11371" fg:w="800"/><text x="21.6189%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="22.8263%" y="181" width="1.5004%" height="15" fill="rgb(241,120,50)" fg:x="12171" fg:w="800"/><text x="23.1193%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="24.3267%" y="181" width="1.5004%" height="15" fill="rgb(228,15,14)" fg:x="12971" fg:w="800"/><text x="24.6197%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="25.8271%" y="181" width="1.5548%" height="15" fill="rgb(248,219,31)" fg:x="13771" fg:w="829"/><text x="26.1201%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="27.3818%" y="181" width="1.5004%" height="15" fill="rgb(228,170,39)" fg:x="14600" fg:w="800"/><text x="27.6748%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="28.8822%" y="181" width="1.5004%" height="15" fill="rgb(215,86,3)" fg:x="15400" fg:w="800"/><text x="29.1752%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="30.3826%" y="181" width="1.5004%" height="15" fill="rgb(250,48,22)" fg:x="16200" fg:w="800"/><text x="30.6756%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="31.8830%" y="181" width="1.5004%" height="15" fill="rgb(223,69,30)" fg:x="17000" fg:w="800"/><text x="32.1759%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="33.3833%" y="181" width="1.5004%" height="15" fill="rgb(208,127,11)" fg:x="17800" fg:w="800"/><text x="33.6763%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="34.8837%" y="181" width="1.5004%" height="15" fill="rgb(229,20,16)" fg:x="18600" fg:w="800"/><text x="35.1767%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="36.3841%" y="181" width="1.5548%" height="15" fill="rgb(237,62,32)" fg:x="19400" fg:w="829"/><text x="36.6771%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="37.9389%" y="181" width="1.5004%" height="15" fill="rgb(225,144,45)" fg:x="20229" fg:w="800"/><text x="38.2318%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="39.4392%" y="181" width="1.5004%" height="15" fill="rgb(211,91,7)" fg:x="21029" fg:w="800"/><text x="39.7322%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="40.9396%" y="181" width="1.5004%" height="15" fill="rgb(214,17,8)" fg:x="21829" fg:w="800"/><text x="41.2326%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="42.4400%" y="181" width="1.5004%" height="15" fill="rgb(242,98,2)" fg:x="22629" fg:w="800"/><text x="42.7330%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="43.9404%" y="181" width="1.5004%" height="15" fill="rgb(207,114,40)" fg:x="23429" fg:w="800"/><text x="44.2333%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (762 instructions, 1.43%)</title><rect x="45.4407%" y="181" width="1.4291%" height="15" fill="rgb(212,202,1)" fg:x="24229" fg:w="762"/><text x="45.7337%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="46.8698%" y="181" width="1.5004%" height="15" fill="rgb(223,217,23)" fg:x="24991" fg:w="800"/><text x="47.1628%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="48.3702%" y="181" width="1.5548%" height="15" fill="rgb(229,137,51)" fg:x="25791" fg:w="829"/><text x="48.6632%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="49.9250%" y="181" width="1.5004%" height="15" fill="rgb(218,90,8)" fg:x="26620" fg:w="800"/><text x="50.2179%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="51.4254%" y="181" width="1.5548%" height="15" fill="rgb(248,226,44)" fg:x="27420" fg:w="829"/><text x="51.7183%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="52.9801%" y="181" width="1.5004%" height="15" fill="rgb(212,224,5)" fg:x="28249" fg:w="800"/><text x="53.2731%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="54.4805%" y="181" width="1.5004%" height="15" fill="rgb(246,33,24)" fg:x="29049" fg:w="800"/><text x="54.7735%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="55.9809%" y="181" width="1.5004%" height="15" fill="rgb(215,83,9)" fg:x="29849" fg:w="800"/><text x="56.2738%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="57.4812%" y="181" width="1.5004%" height="15" fill="rgb(205,214,7)" fg:x="30649" fg:w="800"/><text x="57.7742%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="58.9816%" y="181" width="1.5548%" height="15" fill="rgb(224,60,6)" fg:x="31449" fg:w="829"/><text x="59.2746%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (762 instructions, 1.43%)</title><rect x="60.5364%" y="181" width="1.4291%" height="15" fill="rgb(229,164,47)" fg:x="32278" fg:w="762"/><text x="60.8294%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="61.9655%" y="181" width="1.5004%" height="15" fill="rgb(228,9,39)" fg:x="33040" fg:w="800"/><text x="62.2585%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="63.4659%" y="181" width="1.5004%" height="15" fill="rgb(233,55,6)" fg:x="33840" fg:w="800"/><text x="63.7588%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="64.9662%" y="181" width="1.5004%" height="15" fill="rgb(222,53,23)" fg:x="34640" fg:w="800"/><text x="65.2592%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="66.4666%" y="181" width="1.5004%" height="15" fill="rgb(242,108,33)" fg:x="35440" fg:w="800"/><text x="66.7596%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="67.9670%" y="181" width="1.5548%" height="15" fill="rgb(248,94,6)" fg:x="36240" fg:w="829"/><text x="68.2600%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="69.5218%" y="181" width="1.5004%" height="15" fill="rgb(233,177,28)" fg:x="37069" fg:w="800"/><text x="69.8147%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="71.0221%" y="181" width="1.5004%" height="15" fill="rgb(227,50,43)" fg:x="37869" fg:w="800"/><text x="71.3151%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="72.5225%" y="181" width="1.5004%" height="15" fill="rgb(225,110,20)" fg:x="38669" fg:w="800"/><text x="72.8155%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="74.0229%" y="181" width="1.5004%" height="15" fill="rgb(226,190,43)" fg:x="39469" fg:w="800"/><text x="74.3158%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="75.5233%" y="181" width="1.5004%" height="15" fill="rgb(224,160,5)" fg:x="40269" fg:w="800"/><text x="75.8162%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="77.0236%" y="181" width="1.5548%" height="15" fill="rgb(212,160,16)" fg:x="41069" fg:w="829"/><text x="77.3166%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="78.5784%" y="181" width="1.5004%" height="15" fill="rgb(207,144,31)" fg:x="41898" fg:w="800"/><text x="78.8714%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="80.0788%" y="181" width="1.5004%" height="15" fill="rgb(226,52,18)" fg:x="42698" fg:w="800"/><text x="80.3717%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="81.5791%" y="181" width="1.5548%" height="15" fill="rgb(209,60,49)" fg:x="43498" fg:w="829"/><text x="81.8721%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="83.1339%" y="181" width="1.5004%" height="15" fill="rgb(222,47,22)" fg:x="44327" fg:w="800"/><text x="83.4269%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="84.6343%" y="181" width="1.5004%" height="15" fill="rgb(247,96,32)" fg:x="45127" fg:w="800"/><text x="84.9273%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="86.1347%" y="181" width="1.5004%" height="15" fill="rgb(230,181,50)" fg:x="45927" fg:w="800"/><text x="86.4276%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="87.6350%" y="181" width="1.5004%" height="15" fill="rgb(222,80,0)" fg:x="46727" fg:w="800"/><text x="87.9280%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="89.1354%" y="181" width="1.5004%" height="15" fill="rgb(216,17,32)" fg:x="47527" fg:w="800"/><text x="89.4284%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="90.6358%" y="181" width="1.5004%" height="15" fill="rgb(214,125,13)" fg:x="48327" fg:w="800"/><text x="90.9288%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="92.1362%" y="181" width="1.5548%" height="15" fill="rgb(241,39,33)" fg:x="49127" fg:w="829"/><text x="92.4291%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="93.6909%" y="181" width="1.5004%" height="15" fill="rgb(223,125,21)" fg:x="49956" fg:w="800"/><text x="93.9839%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.50%)</title><rect x="95.1913%" y="181" width="1.5004%" height="15" fill="rgb(214,84,21)" fg:x="50756" fg:w="800"/><text x="95.4843%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="96.7011%" y="133" width="0.1032%" height="15" fill="rgb(228,93,41)" fg:x="51561" fg:w="55"/><text x="96.9940%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.15%)</title><rect x="96.7011%" y="149" width="0.1538%" height="15" fill="rgb(245,2,27)" fg:x="51561" fg:w="82"/><text x="96.9940%" y="159.50"></text></g><g><title>memset (136 instructions, 0.26%)</title><rect x="96.8548%" y="149" width="0.2551%" height="15" fill="rgb(252,198,37)" fg:x="51643" fg:w="136"/><text x="97.1478%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (382 instructions, 0.72%)</title><rect x="96.6917%" y="165" width="0.7164%" height="15" fill="rgb(213,189,21)" fg:x="51556" fg:w="382"/><text x="96.9846%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="97.4081%" y="149" width="0.0600%" height="15" fill="rgb(205,25,29)" fg:x="51938" fg:w="32"/><text x="97.7011%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.4681%" y="117" width="0.1425%" height="15" fill="rgb(224,156,39)" fg:x="51970" fg:w="76"/><text x="97.7611%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.21%)</title><rect x="97.4681%" y="133" width="0.2082%" height="15" fill="rgb(231,59,14)" fg:x="51970" fg:w="111"/><text x="97.7611%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 0.33%)</title><rect x="97.4681%" y="149" width="0.3301%" height="15" fill="rgb(227,142,19)" fg:x="51970" fg:w="176"/><text x="97.7611%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7982%" y="149" width="0.0206%" height="15" fill="rgb(218,144,22)" fg:x="52146" fg:w="11"/><text x="98.0912%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.8188%" y="149" width="0.0206%" height="15" fill="rgb(211,176,1)" fg:x="52157" fg:w="11"/><text x="98.1118%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.06%)</title><rect x="97.8395%" y="149" width="0.0563%" height="15" fill="rgb(242,90,26)" fg:x="52168" fg:w="30"/><text x="98.1324%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 0.89%)</title><rect x="97.4081%" y="165" width="0.8852%" height="15" fill="rgb(253,227,25)" fg:x="51938" fg:w="472"/><text x="97.7011%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.3027%" y="165" width="0.1032%" height="15" fill="rgb(233,7,20)" fg:x="52415" fg:w="55"/><text x="98.5957%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (988 instructions, 1.85%)</title><rect x="96.6917%" y="181" width="1.8530%" height="15" fill="rgb(237,167,21)" fg:x="51556" fg:w="988"/><text x="96.9846%" y="191.50"></text></g><g><title>heap::batch_get_2_::{{closure}} (52,713 instructions, 98.86%)</title><rect x="0.3207%" y="197" width="98.8616%" height="15" fill="rgb(213,43,24)" fg:x="171" fg:w="52713"/><text x="0.6137%" y="207.50">heap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.1823%" y="197" width="0.0225%" height="15" fill="rgb(239,182,4)" fg:x="52884" fg:w="12"/><text x="99.4753%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="99.3567%" y="181" width="0.1032%" height="15" fill="rgb(215,93,9)" fg:x="52977" fg:w="55"/><text x="99.6497%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.12%)</title><rect x="99.4599%" y="181" width="0.1182%" height="15" fill="rgb(230,132,39)" fg:x="53032" fg:w="63"/><text x="99.7528%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (326 instructions, 0.61%)</title><rect x="99.2048%" y="197" width="0.6114%" height="15" fill="rgb(231,183,22)" fg:x="52896" fg:w="326"/><text x="99.4978%" y="207.50"></text></g><g><title>all (53,320 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,15,46)" fg:x="0" fg:w="53320"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (53,320 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,194,24)" fg:x="0" fg:w="53320"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>