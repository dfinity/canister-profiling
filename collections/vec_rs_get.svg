<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17251"><g><title>ic_cdk::setup (24 instructions, 0.14%)</title><rect x="0.0000%" y="197" width="0.1391%" height="15" fill="rgb(244,151,32)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="0.1391%" y="197" width="0.4811%" height="15" fill="rgb(212,101,21)" fg:x="24" fg:w="83"/><text x="0.4321%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="0.6203%" y="197" width="0.4811%" height="15" fill="rgb(242,76,6)" fg:x="107" fg:w="83"/><text x="0.9132%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="1.1014%" y="165" width="0.4811%" height="15" fill="rgb(223,154,18)" fg:x="190" fg:w="83"/><text x="1.3944%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.48%)</title><rect x="1.5825%" y="149" width="0.4753%" height="15" fill="rgb(227,144,43)" fg:x="273" fg:w="82"/><text x="1.8755%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="2.0579%" y="133" width="0.0348%" height="15" fill="rgb(227,73,17)" fg:x="355" fg:w="6"/><text x="2.3508%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.57%)</title><rect x="2.0579%" y="149" width="2.5680%" height="15" fill="rgb(221,25,5)" fg:x="355" fg:w="443"/><text x="2.3508%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="4.6258%" y="149" width="0.5507%" height="15" fill="rgb(220,79,25)" fg:x="798" fg:w="95"/><text x="4.9188%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.1765%" y="149" width="0.3478%" height="15" fill="rgb(207,173,44)" fg:x="893" fg:w="60"/><text x="5.4695%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.5243%" y="149" width="0.3478%" height="15" fill="rgb(217,4,21)" fg:x="953" fg:w="60"/><text x="5.8173%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.8721%" y="149" width="0.3478%" height="15" fill="rgb(213,186,40)" fg:x="1013" fg:w="60"/><text x="6.1651%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="6.2199%" y="149" width="0.3478%" height="15" fill="rgb(234,106,23)" fg:x="1073" fg:w="60"/><text x="6.5129%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.48%)</title><rect x="6.5677%" y="149" width="0.4753%" height="15" fill="rgb(205,197,5)" fg:x="1133" fg:w="82"/><text x="6.8607%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.41%)</title><rect x="7.0431%" y="149" width="0.4058%" height="15" fill="rgb(250,10,9)" fg:x="1215" fg:w="70"/><text x="7.3360%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="7.4488%" y="133" width="0.0348%" height="15" fill="rgb(238,76,3)" fg:x="1285" fg:w="6"/><text x="7.7418%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.57%)</title><rect x="7.4488%" y="149" width="2.5680%" height="15" fill="rgb(212,52,12)" fg:x="1285" fg:w="443"/><text x="7.7418%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="10.0168%" y="149" width="0.1101%" height="15" fill="rgb(221,129,18)" fg:x="1728" fg:w="19"/><text x="10.3098%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="10.1269%" y="133" width="0.4811%" height="15" fill="rgb(235,147,54)" fg:x="1747" fg:w="83"/><text x="10.4199%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="10.6081%" y="101" width="0.3884%" height="15" fill="rgb(207,76,15)" fg:x="1830" fg:w="67"/><text x="10.9010%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.56%)</title><rect x="10.6081%" y="117" width="0.5565%" height="15" fill="rgb(254,101,42)" fg:x="1830" fg:w="96"/><text x="10.9010%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="11.1646%" y="69" width="0.0638%" height="15" fill="rgb(248,88,14)" fg:x="1926" fg:w="11"/><text x="11.4575%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="11.2283%" y="53" width="0.2029%" height="15" fill="rgb(211,6,51)" fg:x="1937" fg:w="35"/><text x="11.5213%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.37%)</title><rect x="11.2283%" y="69" width="0.3710%" height="15" fill="rgb(207,221,7)" fg:x="1937" fg:w="64"/><text x="11.5213%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.83%)</title><rect x="11.1646%" y="85" width="0.8347%" height="15" fill="rgb(243,50,34)" fg:x="1926" fg:w="144"/><text x="11.4575%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.21%)</title><rect x="11.1646%" y="101" width="1.2115%" height="15" fill="rgb(254,0,19)" fg:x="1926" fg:w="209"/><text x="11.4575%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.27%)</title><rect x="11.1646%" y="117" width="1.2695%" height="15" fill="rgb(240,122,9)" fg:x="1926" fg:w="219"/><text x="11.4575%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 2.63%)</title><rect x="10.6081%" y="133" width="2.6259%" height="15" fill="rgb(221,172,16)" fg:x="1830" fg:w="453"/><text x="10.9010%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 3.91%)</title><rect x="10.1269%" y="149" width="3.9070%" height="15" fill="rgb(231,20,26)" fg:x="1747" fg:w="674"/><text x="10.4199%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="14.0340%" y="149" width="0.5507%" height="15" fill="rgb(205,99,32)" fg:x="2421" fg:w="95"/><text x="14.3269%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="14.5847%" y="149" width="0.3478%" height="15" fill="rgb(237,88,32)" fg:x="2516" fg:w="60"/><text x="14.8776%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="14.9325%" y="149" width="0.4406%" height="15" fill="rgb(226,76,50)" fg:x="2576" fg:w="76"/><text x="15.2254%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.41%)</title><rect x="15.3730%" y="149" width="0.4058%" height="15" fill="rgb(246,138,51)" fg:x="2652" fg:w="70"/><text x="15.6660%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="15.7788%" y="117" width="0.0348%" height="15" fill="rgb(244,202,2)" fg:x="2722" fg:w="6"/><text x="16.0718%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.57%)</title><rect x="15.7788%" y="133" width="2.5680%" height="15" fill="rgb(209,172,0)" fg:x="2722" fg:w="443"/><text x="16.0718%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="18.3468%" y="133" width="0.1101%" height="15" fill="rgb(216,113,15)" fg:x="3165" fg:w="19"/><text x="18.6397%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="18.4569%" y="117" width="0.4811%" height="15" fill="rgb(254,32,49)" fg:x="3184" fg:w="83"/><text x="18.7499%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="18.9380%" y="85" width="0.3884%" height="15" fill="rgb(212,148,24)" fg:x="3267" fg:w="67"/><text x="19.2310%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.56%)</title><rect x="18.9380%" y="101" width="0.5565%" height="15" fill="rgb(206,7,6)" fg:x="3267" fg:w="96"/><text x="19.2310%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="19.4945%" y="53" width="0.0638%" height="15" fill="rgb(235,12,49)" fg:x="3363" fg:w="11"/><text x="19.7875%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="19.5583%" y="37" width="0.2029%" height="15" fill="rgb(211,48,9)" fg:x="3374" fg:w="35"/><text x="19.8513%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.37%)</title><rect x="19.5583%" y="53" width="0.3710%" height="15" fill="rgb(238,193,33)" fg:x="3374" fg:w="64"/><text x="19.8513%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.83%)</title><rect x="19.4945%" y="69" width="0.8347%" height="15" fill="rgb(244,93,53)" fg:x="3363" fg:w="144"/><text x="19.7875%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.21%)</title><rect x="19.4945%" y="85" width="1.2115%" height="15" fill="rgb(223,202,52)" fg:x="3363" fg:w="209"/><text x="19.7875%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.27%)</title><rect x="19.4945%" y="101" width="1.2695%" height="15" fill="rgb(243,84,28)" fg:x="3363" fg:w="219"/><text x="19.7875%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 2.63%)</title><rect x="18.9380%" y="117" width="2.6259%" height="15" fill="rgb(224,160,39)" fg:x="3267" fg:w="453"/><text x="19.2310%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 3.91%)</title><rect x="18.4569%" y="133" width="3.9070%" height="15" fill="rgb(233,130,31)" fg:x="3184" fg:w="674"/><text x="18.7499%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="22.3639%" y="133" width="0.5507%" height="15" fill="rgb(212,172,4)" fg:x="3858" fg:w="95"/><text x="22.6569%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="22.9146%" y="133" width="0.3478%" height="15" fill="rgb(223,186,11)" fg:x="3953" fg:w="60"/><text x="23.2076%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.48%)</title><rect x="23.2624%" y="117" width="0.4753%" height="15" fill="rgb(251,56,32)" fg:x="4013" fg:w="82"/><text x="23.5554%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.55%)</title><rect x="23.7378%" y="117" width="0.5507%" height="15" fill="rgb(238,27,2)" fg:x="4095" fg:w="95"/><text x="24.0307%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="24.2884%" y="117" width="0.4406%" height="15" fill="rgb(224,140,13)" fg:x="4190" fg:w="76"/><text x="24.5814%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.91%)</title><rect x="23.2624%" y="133" width="1.9129%" height="15" fill="rgb(222,132,22)" fg:x="4013" fg:w="330"/><text x="23.5554%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="25.1754%" y="133" width="0.4811%" height="15" fill="rgb(216,179,16)" fg:x="4343" fg:w="83"/><text x="25.4683%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 11.29%)</title><rect x="15.7788%" y="149" width="11.2863%" height="15" fill="rgb(222,21,52)" fg:x="2722" fg:w="1947"/><text x="16.0718%" y="159.50">binread::binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="27.0651%" y="149" width="0.4406%" height="15" fill="rgb(212,73,31)" fg:x="4669" fg:w="76"/><text x="27.3581%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.5057%" y="149" width="0.0870%" height="15" fill="rgb(252,44,7)" fg:x="4745" fg:w="15"/><text x="27.7986%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.5926%" y="149" width="0.0870%" height="15" fill="rgb(242,80,41)" fg:x="4760" fg:w="15"/><text x="27.8856%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.05%)</title><rect x="27.6796%" y="149" width="0.0522%" height="15" fill="rgb(233,136,11)" fg:x="4775" fg:w="9"/><text x="27.9725%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.09%)</title><rect x="27.7317%" y="149" width="0.0927%" height="15" fill="rgb(238,76,53)" fg:x="4784" fg:w="16"/><text x="28.0247%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="27.8245%" y="133" width="0.4811%" height="15" fill="rgb(233,11,10)" fg:x="4800" fg:w="83"/><text x="28.1174%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 1.04%)</title><rect x="27.8245%" y="149" width="1.0376%" height="15" fill="rgb(235,172,39)" fg:x="4800" fg:w="179"/><text x="28.1174%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="28.8621%" y="117" width="0.4811%" height="15" fill="rgb(248,194,0)" fg:x="4979" fg:w="83"/><text x="29.1551%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.73%)</title><rect x="28.8621%" y="133" width="0.7304%" height="15" fill="rgb(215,222,51)" fg:x="4979" fg:w="126"/><text x="29.1551%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 1.22%)</title><rect x="28.8621%" y="149" width="1.2231%" height="15" fill="rgb(230,13,20)" fg:x="4979" fg:w="211"/><text x="29.1551%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="30.0852%" y="149" width="0.4811%" height="15" fill="rgb(253,2,0)" fg:x="5190" fg:w="83"/><text x="30.3782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.52%)</title><rect x="30.5663%" y="149" width="0.5159%" height="15" fill="rgb(225,90,14)" fg:x="5273" fg:w="89"/><text x="30.8593%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="31.0823%" y="149" width="0.4811%" height="15" fill="rgb(214,30,0)" fg:x="5362" fg:w="83"/><text x="31.3752%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="31.5634%" y="149" width="0.4811%" height="15" fill="rgb(238,141,30)" fg:x="5445" fg:w="83"/><text x="31.8564%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="32.0445%" y="149" width="0.0232%" height="15" fill="rgb(221,223,11)" fg:x="5528" fg:w="4"/><text x="32.3375%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.52%)</title><rect x="32.0677%" y="149" width="0.5159%" height="15" fill="rgb(211,15,35)" fg:x="5532" fg:w="89"/><text x="32.3607%" y="159.50"></text></g><g><title>memcpy (428 instructions, 2.48%)</title><rect x="32.5836%" y="149" width="2.4810%" height="15" fill="rgb(253,105,1)" fg:x="5621" fg:w="428"/><text x="32.8766%" y="159.50">m..</text></g><g><title>memcpy (428 instructions, 2.48%)</title><rect x="35.0646%" y="149" width="2.4810%" height="15" fill="rgb(242,18,4)" fg:x="6049" fg:w="428"/><text x="35.3576%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 42.86%)</title><rect x="1.5825%" y="165" width="42.8555%" height="15" fill="rgb(254,98,17)" fg:x="273" fg:w="7393"/><text x="1.8755%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 2.20%)</title><rect x="44.4380%" y="165" width="2.2028%" height="15" fill="rgb(249,86,8)" fg:x="7666" fg:w="380"/><text x="44.7310%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="46.6408%" y="149" width="0.0406%" height="15" fill="rgb(214,87,3)" fg:x="8046" fg:w="7"/><text x="46.9337%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="46.6408%" y="165" width="0.2261%" height="15" fill="rgb(215,56,42)" fg:x="8046" fg:w="39"/><text x="46.9337%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (212 instructions, 1.23%)</title><rect x="46.8668%" y="165" width="1.2289%" height="15" fill="rgb(218,100,1)" fg:x="8085" fg:w="212"/><text x="47.1598%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="48.0958%" y="149" width="0.0406%" height="15" fill="rgb(209,156,1)" fg:x="8297" fg:w="7"/><text x="48.3887%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="48.1363%" y="133" width="0.3420%" height="15" fill="rgb(219,90,28)" fg:x="8304" fg:w="59"/><text x="48.4293%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="48.4783%" y="133" width="0.5449%" height="15" fill="rgb(217,139,2)" fg:x="8363" fg:w="94"/><text x="48.7713%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="49.0232%" y="133" width="1.0028%" height="15" fill="rgb(231,42,23)" fg:x="8457" fg:w="173"/><text x="49.3162%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.36%)</title><rect x="48.1363%" y="149" width="3.3563%" height="15" fill="rgb(215,175,4)" fg:x="8304" fg:w="579"/><text x="48.4293%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (798 instructions, 4.63%)</title><rect x="48.0958%" y="165" width="4.6258%" height="15" fill="rgb(235,83,13)" fg:x="8297" fg:w="798"/><text x="48.3887%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="52.7216%" y="165" width="0.4811%" height="15" fill="rgb(247,7,16)" fg:x="9095" fg:w="83"/><text x="53.0146%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="53.2027%" y="149" width="0.0406%" height="15" fill="rgb(223,19,5)" fg:x="9178" fg:w="7"/><text x="53.4957%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="53.2433%" y="133" width="0.3420%" height="15" fill="rgb(251,159,39)" fg:x="9185" fg:w="59"/><text x="53.5363%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="53.5853%" y="133" width="0.5449%" height="15" fill="rgb(236,16,18)" fg:x="9244" fg:w="94"/><text x="53.8783%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="54.1302%" y="133" width="1.0028%" height="15" fill="rgb(234,103,44)" fg:x="9338" fg:w="173"/><text x="54.4232%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.36%)</title><rect x="53.2433%" y="149" width="3.3563%" height="15" fill="rgb(231,195,28)" fg:x="9185" fg:w="579"/><text x="53.5363%" y="159.50">co..</text></g><g><title>memcmp (77 instructions, 0.45%)</title><rect x="56.5996%" y="149" width="0.4464%" height="15" fill="rgb(231,207,4)" fg:x="9764" fg:w="77"/><text x="56.8926%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.52%)</title><rect x="57.0460%" y="133" width="0.5159%" height="15" fill="rgb(221,136,42)" fg:x="9841" fg:w="89"/><text x="57.3389%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.72%)</title><rect x="57.0460%" y="149" width="0.7188%" height="15" fill="rgb(220,164,27)" fg:x="9841" fg:w="124"/><text x="57.3389%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 5.59%)</title><rect x="53.2027%" y="165" width="5.5939%" height="15" fill="rgb(223,79,44)" fg:x="9178" fg:w="965"/><text x="53.4957%" y="175.50">candid..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="58.7966%" y="117" width="0.3420%" height="15" fill="rgb(228,120,12)" fg:x="10143" fg:w="59"/><text x="59.0896%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.54%)</title><rect x="58.7966%" y="133" width="0.5391%" height="15" fill="rgb(248,107,35)" fg:x="10143" fg:w="93"/><text x="59.0896%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 1.83%)</title><rect x="58.7966%" y="149" width="1.8318%" height="15" fill="rgb(249,91,28)" fg:x="10143" fg:w="316"/><text x="59.0896%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.315 (18 instructions, 0.10%)</title><rect x="60.6284%" y="149" width="0.1043%" height="15" fill="rgb(210,55,7)" fg:x="10459" fg:w="18"/><text x="60.9213%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="60.7327%" y="149" width="0.0754%" height="15" fill="rgb(207,40,12)" fg:x="10477" fg:w="13"/><text x="61.0257%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 3.07%)</title><rect x="58.7966%" y="165" width="3.0665%" height="15" fill="rgb(231,110,48)" fg:x="10143" fg:w="529"/><text x="59.0896%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.31%)</title><rect x="61.8631%" y="165" width="0.3072%" height="15" fill="rgb(243,42,21)" fg:x="10672" fg:w="53"/><text x="62.1560%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.13%)</title><rect x="62.1703%" y="133" width="0.1333%" height="15" fill="rgb(210,34,38)" fg:x="10725" fg:w="23"/><text x="62.4633%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.80%)</title><rect x="62.1703%" y="149" width="0.8000%" height="15" fill="rgb(235,176,3)" fg:x="10725" fg:w="138"/><text x="62.4633%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="63.1731%" y="133" width="0.1565%" height="15" fill="rgb(245,218,16)" fg:x="10898" fg:w="27"/><text x="63.4661%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.82%)</title><rect x="63.1731%" y="149" width="0.8231%" height="15" fill="rgb(208,212,11)" fg:x="10898" fg:w="142"/><text x="63.4661%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (350 instructions, 2.03%)</title><rect x="62.1703%" y="165" width="2.0289%" height="15" fill="rgb(245,163,32)" fg:x="10725" fg:w="350"/><text x="62.4633%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.20%)</title><rect x="64.1992%" y="149" width="0.1971%" height="15" fill="rgb(247,0,8)" fg:x="11075" fg:w="34"/><text x="64.4921%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1595 (18 instructions, 0.10%)</title><rect x="64.3963%" y="149" width="0.1043%" height="15" fill="rgb(214,159,46)" fg:x="11109" fg:w="18"/><text x="64.6892%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1595 (18 instructions, 0.10%)</title><rect x="64.5006%" y="149" width="0.1043%" height="15" fill="rgb(226,37,42)" fg:x="11127" fg:w="18"/><text x="64.7936%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.97%)</title><rect x="64.1992%" y="165" width="0.9681%" height="15" fill="rgb(214,106,27)" fg:x="11075" fg:w="167"/><text x="64.4921%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.1672%" y="165" width="0.0754%" height="15" fill="rgb(221,52,41)" fg:x="11242" fg:w="13"/><text x="65.4602%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.2426%" y="165" width="0.0754%" height="15" fill="rgb(240,64,39)" fg:x="11255" fg:w="13"/><text x="65.5356%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.3180%" y="165" width="0.0754%" height="15" fill="rgb(207,179,28)" fg:x="11268" fg:w="13"/><text x="65.6109%" y="175.50"></text></g><g><title>memcpy (440 instructions, 2.55%)</title><rect x="65.3933%" y="165" width="2.5506%" height="15" fill="rgb(213,223,8)" fg:x="11281" fg:w="440"/><text x="65.6863%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="67.9439%" y="133" width="0.0406%" height="15" fill="rgb(229,8,15)" fg:x="11721" fg:w="7"/><text x="68.2369%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="67.9845%" y="117" width="0.1565%" height="15" fill="rgb(217,148,54)" fg:x="11728" fg:w="27"/><text x="68.2774%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="68.1410%" y="117" width="0.1565%" height="15" fill="rgb(253,69,53)" fg:x="11755" fg:w="27"/><text x="68.4339%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.14%)</title><rect x="67.9845%" y="133" width="1.1420%" height="15" fill="rgb(241,5,9)" fg:x="11728" fg:w="197"/><text x="68.2774%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="69.1264%" y="101" width="0.1565%" height="15" fill="rgb(223,97,21)" fg:x="11925" fg:w="27"/><text x="69.4194%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.39%)</title><rect x="69.2829%" y="101" width="0.3942%" height="15" fill="rgb(212,143,29)" fg:x="11952" fg:w="68"/><text x="69.5759%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (189 instructions, 1.10%)</title><rect x="69.1264%" y="117" width="1.0956%" height="15" fill="rgb(233,201,22)" fg:x="11925" fg:w="189"/><text x="69.4194%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (224 instructions, 1.30%)</title><rect x="69.1264%" y="133" width="1.2985%" height="15" fill="rgb(240,37,48)" fg:x="11925" fg:w="224"/><text x="69.4194%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="70.4249%" y="133" width="0.0754%" height="15" fill="rgb(232,26,19)" fg:x="12149" fg:w="13"/><text x="70.7179%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (503 instructions, 2.92%)</title><rect x="67.9439%" y="149" width="2.9158%" height="15" fill="rgb(219,199,20)" fg:x="11721" fg:w="503"/><text x="68.2369%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (552 instructions, 3.20%)</title><rect x="67.9439%" y="165" width="3.1998%" height="15" fill="rgb(223,110,34)" fg:x="11721" fg:w="552"/><text x="68.2369%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.40%)</title><rect x="71.1437%" y="149" width="0.4000%" height="15" fill="rgb(206,31,30)" fg:x="12273" fg:w="69"/><text x="71.4367%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.39%)</title><rect x="71.5437%" y="149" width="0.3942%" height="15" fill="rgb(213,107,4)" fg:x="12342" fg:w="68"/><text x="71.8366%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 1.34%)</title><rect x="71.1437%" y="165" width="1.3391%" height="15" fill="rgb(207,146,20)" fg:x="12273" fg:w="231"/><text x="71.4367%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,782 instructions, 79.89%)</title><rect x="1.1014%" y="181" width="79.8910%" height="15" fill="rgb(251,21,25)" fg:x="190" fg:w="13782"/><text x="1.3944%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="80.9924%" y="149" width="0.0406%" height="15" fill="rgb(205,45,0)" fg:x="13972" fg:w="7"/><text x="81.2854%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="81.0330%" y="117" width="0.1565%" height="15" fill="rgb(227,36,36)" fg:x="13979" fg:w="27"/><text x="81.3260%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.67%)</title><rect x="81.0330%" y="133" width="0.6666%" height="15" fill="rgb(213,100,15)" fg:x="13979" fg:w="115"/><text x="81.3260%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 instructions, 0.87%)</title><rect x="81.0330%" y="149" width="0.8695%" height="15" fill="rgb(212,24,46)" fg:x="13979" fg:w="150"/><text x="81.3260%" y="159.50"></text></g><g><title>memset (152 instructions, 0.88%)</title><rect x="81.9025%" y="149" width="0.8811%" height="15" fill="rgb(249,35,21)" fg:x="14129" fg:w="152"/><text x="82.1955%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (480 instructions, 2.78%)</title><rect x="80.9924%" y="165" width="2.7824%" height="15" fill="rgb(241,175,51)" fg:x="13972" fg:w="480"/><text x="81.2854%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (518 instructions, 3.00%)</title><rect x="83.7749%" y="149" width="3.0027%" height="15" fill="rgb(214,196,32)" fg:x="14452" fg:w="518"/><text x="84.0678%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="86.7776%" y="101" width="0.4811%" height="15" fill="rgb(210,187,54)" fg:x="14970" fg:w="83"/><text x="87.0705%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.73%)</title><rect x="86.7776%" y="117" width="0.7304%" height="15" fill="rgb(229,155,28)" fg:x="14970" fg:w="126"/><text x="87.0705%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 1.21%)</title><rect x="86.7776%" y="133" width="1.2057%" height="15" fill="rgb(223,69,4)" fg:x="14970" fg:w="208"/><text x="87.0705%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="87.9833%" y="133" width="0.0870%" height="15" fill="rgb(205,165,21)" fg:x="15178" fg:w="15"/><text x="88.2763%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="88.0703%" y="133" width="0.0870%" height="15" fill="rgb(231,105,52)" fg:x="15193" fg:w="15"/><text x="88.3632%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 2.47%)</title><rect x="86.7776%" y="149" width="2.4694%" height="15" fill="rgb(243,133,27)" fg:x="14970" fg:w="426"/><text x="87.0705%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.99%)</title><rect x="89.2470%" y="149" width="2.9911%" height="15" fill="rgb(244,98,29)" fg:x="15396" fg:w="516"/><text x="89.5400%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="92.2381%" y="149" width="0.0406%" height="15" fill="rgb(214,56,45)" fg:x="15912" fg:w="7"/><text x="92.5311%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 9.04%)</title><rect x="83.7749%" y="165" width="9.0430%" height="15" fill="rgb(207,197,51)" fg:x="14452" fg:w="1560"/><text x="84.0678%" y="175.50">candid::ser..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="92.8178%" y="165" width="0.0406%" height="15" fill="rgb(226,211,14)" fg:x="16012" fg:w="7"/><text x="93.1108%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="92.8584%" y="165" width="0.3478%" height="15" fill="rgb(213,123,48)" fg:x="16019" fg:w="60"/><text x="93.1514%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,713 instructions, 15.73%)</title><rect x="80.9924%" y="181" width="15.7266%" height="15" fill="rgb(240,107,51)" fg:x="13972" fg:w="2713"/><text x="81.2854%" y="191.50">ic_cdk::api::call::r..</text></g><g><title>vector::__canister_method_batch_get::{{closure}} (16,527 instructions, 95.80%)</title><rect x="1.1014%" y="197" width="95.8031%" height="15" fill="rgb(205,83,12)" fg:x="190" fg:w="16527"/><text x="1.3944%" y="207.50">vector::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.08%)</title><rect x="96.9045%" y="197" width="0.0812%" height="15" fill="rgb(226,146,51)" fg:x="16717" fg:w="14"/><text x="97.1975%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="97.5074%" y="181" width="0.1565%" height="15" fill="rgb(235,71,50)" fg:x="16821" fg:w="27"/><text x="97.8004%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.40%)</title><rect x="97.6639%" y="181" width="0.4000%" height="15" fill="rgb(242,13,42)" fg:x="16848" fg:w="69"/><text x="97.9569%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.39%)</title><rect x="98.0639%" y="181" width="0.3942%" height="15" fill="rgb(232,120,28)" fg:x="16917" fg:w="68"/><text x="98.3568%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (375 instructions, 2.17%)</title><rect x="96.9915%" y="197" width="2.1738%" height="15" fill="rgb(226,38,46)" fg:x="16732" fg:w="375"/><text x="97.2844%" y="207.50">d..</text></g><g><title>all (17,251 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,130,8)" fg:x="0" fg:w="17251"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,251 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,34,25)" fg:x="0" fg:w="17251"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>