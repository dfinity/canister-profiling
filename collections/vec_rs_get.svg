<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17283"><g><title>ic_cdk::setup (24 instructions, 0.14%)</title><rect x="0.0000%" y="197" width="0.1389%" height="15" fill="rgb(210,100,23)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="0.1389%" y="197" width="0.4745%" height="15" fill="rgb(237,137,4)" fg:x="24" fg:w="82"/><text x="0.4318%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="0.6133%" y="197" width="0.4745%" height="15" fill="rgb(228,155,21)" fg:x="106" fg:w="82"/><text x="0.9063%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="1.0878%" y="165" width="0.4745%" height="15" fill="rgb(215,75,45)" fg:x="188" fg:w="82"/><text x="1.3807%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="1.5622%" y="149" width="0.4745%" height="15" fill="rgb(207,29,24)" fg:x="270" fg:w="82"/><text x="1.8552%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="2.0367%" y="133" width="0.0347%" height="15" fill="rgb(246,207,11)" fg:x="352" fg:w="6"/><text x="2.3297%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.56%)</title><rect x="2.0367%" y="149" width="2.5632%" height="15" fill="rgb(249,177,48)" fg:x="352" fg:w="443"/><text x="2.3297%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="4.5999%" y="149" width="0.5497%" height="15" fill="rgb(251,148,8)" fg:x="795" fg:w="95"/><text x="4.8929%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.1496%" y="149" width="0.3472%" height="15" fill="rgb(219,170,51)" fg:x="890" fg:w="60"/><text x="5.4425%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.4967%" y="149" width="0.3472%" height="15" fill="rgb(238,69,53)" fg:x="950" fg:w="60"/><text x="5.7897%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.8439%" y="149" width="0.3472%" height="15" fill="rgb(216,15,36)" fg:x="1010" fg:w="60"/><text x="6.1369%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="6.1911%" y="149" width="0.3472%" height="15" fill="rgb(221,176,22)" fg:x="1070" fg:w="60"/><text x="6.4840%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="6.5382%" y="149" width="0.4745%" height="15" fill="rgb(208,34,37)" fg:x="1130" fg:w="82"/><text x="6.8312%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.41%)</title><rect x="7.0127%" y="149" width="0.4050%" height="15" fill="rgb(207,193,25)" fg:x="1212" fg:w="70"/><text x="7.3056%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="7.4177%" y="133" width="0.0347%" height="15" fill="rgb(239,186,31)" fg:x="1282" fg:w="6"/><text x="7.7107%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.56%)</title><rect x="7.4177%" y="149" width="2.5632%" height="15" fill="rgb(205,150,37)" fg:x="1282" fg:w="443"/><text x="7.7107%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="9.9809%" y="149" width="0.1099%" height="15" fill="rgb(214,85,20)" fg:x="1725" fg:w="19"/><text x="10.2739%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="10.0908%" y="133" width="0.4745%" height="15" fill="rgb(210,83,9)" fg:x="1744" fg:w="82"/><text x="10.3838%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="10.5653%" y="101" width="0.3877%" height="15" fill="rgb(235,31,45)" fg:x="1826" fg:w="67"/><text x="10.8583%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.56%)</title><rect x="10.5653%" y="117" width="0.5555%" height="15" fill="rgb(247,40,48)" fg:x="1826" fg:w="96"/><text x="10.8583%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="11.1208%" y="69" width="0.0636%" height="15" fill="rgb(233,95,38)" fg:x="1922" fg:w="11"/><text x="11.4137%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="11.1844%" y="53" width="0.2025%" height="15" fill="rgb(207,5,8)" fg:x="1933" fg:w="35"/><text x="11.4774%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.37%)</title><rect x="11.1844%" y="69" width="0.3703%" height="15" fill="rgb(247,226,53)" fg:x="1933" fg:w="64"/><text x="11.4774%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.83%)</title><rect x="11.1208%" y="85" width="0.8332%" height="15" fill="rgb(207,99,18)" fg:x="1922" fg:w="144"/><text x="11.4137%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.21%)</title><rect x="11.1208%" y="101" width="1.2093%" height="15" fill="rgb(219,132,18)" fg:x="1922" fg:w="209"/><text x="11.4137%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.27%)</title><rect x="11.1208%" y="117" width="1.2671%" height="15" fill="rgb(216,30,19)" fg:x="1922" fg:w="219"/><text x="11.4137%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 2.64%)</title><rect x="10.5653%" y="133" width="2.6442%" height="15" fill="rgb(205,72,27)" fg:x="1826" fg:w="457"/><text x="10.8583%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.92%)</title><rect x="10.0908%" y="149" width="3.9171%" height="15" fill="rgb(214,4,3)" fg:x="1744" fg:w="677"/><text x="10.3838%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="14.0080%" y="149" width="0.5497%" height="15" fill="rgb(233,199,3)" fg:x="2421" fg:w="95"/><text x="14.3010%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="14.5577%" y="149" width="0.3472%" height="15" fill="rgb(212,41,18)" fg:x="2516" fg:w="60"/><text x="14.8506%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="14.9048%" y="149" width="0.4397%" height="15" fill="rgb(236,120,7)" fg:x="2576" fg:w="76"/><text x="15.1978%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.41%)</title><rect x="15.3446%" y="149" width="0.4050%" height="15" fill="rgb(220,36,2)" fg:x="2652" fg:w="70"/><text x="15.6375%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="15.7496%" y="117" width="0.0347%" height="15" fill="rgb(249,119,52)" fg:x="2722" fg:w="6"/><text x="16.0425%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.56%)</title><rect x="15.7496%" y="133" width="2.5632%" height="15" fill="rgb(244,30,53)" fg:x="2722" fg:w="443"/><text x="16.0425%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="18.3128%" y="133" width="0.1099%" height="15" fill="rgb(209,105,3)" fg:x="3165" fg:w="19"/><text x="18.6058%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="18.4227%" y="117" width="0.4745%" height="15" fill="rgb(217,188,15)" fg:x="3184" fg:w="82"/><text x="18.7157%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="18.8972%" y="85" width="0.3877%" height="15" fill="rgb(205,160,47)" fg:x="3266" fg:w="67"/><text x="19.1902%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.56%)</title><rect x="18.8972%" y="101" width="0.5555%" height="15" fill="rgb(250,103,12)" fg:x="3266" fg:w="96"/><text x="19.1902%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="19.4526%" y="53" width="0.0636%" height="15" fill="rgb(209,49,10)" fg:x="3362" fg:w="11"/><text x="19.7456%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="19.5163%" y="37" width="0.2025%" height="15" fill="rgb(212,191,48)" fg:x="3373" fg:w="35"/><text x="19.8093%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.37%)</title><rect x="19.5163%" y="53" width="0.3703%" height="15" fill="rgb(230,204,6)" fg:x="3373" fg:w="64"/><text x="19.8093%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.83%)</title><rect x="19.4526%" y="69" width="0.8332%" height="15" fill="rgb(210,1,3)" fg:x="3362" fg:w="144"/><text x="19.7456%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.21%)</title><rect x="19.4526%" y="85" width="1.2093%" height="15" fill="rgb(232,99,40)" fg:x="3362" fg:w="209"/><text x="19.7456%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.27%)</title><rect x="19.4526%" y="101" width="1.2671%" height="15" fill="rgb(209,25,47)" fg:x="3362" fg:w="219"/><text x="19.7456%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 2.64%)</title><rect x="18.8972%" y="117" width="2.6442%" height="15" fill="rgb(211,43,29)" fg:x="3266" fg:w="457"/><text x="19.1902%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.92%)</title><rect x="18.4227%" y="133" width="3.9171%" height="15" fill="rgb(205,68,49)" fg:x="3184" fg:w="677"/><text x="18.7157%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="22.3399%" y="133" width="0.5497%" height="15" fill="rgb(216,151,17)" fg:x="3861" fg:w="95"/><text x="22.6328%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="22.8895%" y="133" width="0.3472%" height="15" fill="rgb(218,74,44)" fg:x="3956" fg:w="60"/><text x="23.1825%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="23.2367%" y="117" width="0.4745%" height="15" fill="rgb(226,176,0)" fg:x="4016" fg:w="82"/><text x="23.5297%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.55%)</title><rect x="23.7112%" y="117" width="0.5497%" height="15" fill="rgb(212,173,32)" fg:x="4098" fg:w="95"/><text x="24.0041%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="24.2608%" y="117" width="0.4397%" height="15" fill="rgb(208,121,39)" fg:x="4193" fg:w="76"/><text x="24.5538%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.91%)</title><rect x="23.2367%" y="133" width="1.9094%" height="15" fill="rgb(249,126,31)" fg:x="4016" fg:w="330"/><text x="23.5297%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="25.1461%" y="133" width="0.4745%" height="15" fill="rgb(235,182,32)" fg:x="4346" fg:w="82"/><text x="25.4391%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 11.26%)</title><rect x="15.7496%" y="149" width="11.2596%" height="15" fill="rgb(237,13,1)" fg:x="2722" fg:w="1946"/><text x="16.0425%" y="159.50">binread::binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="27.0092%" y="149" width="0.4397%" height="15" fill="rgb(248,169,54)" fg:x="4668" fg:w="76"/><text x="27.3022%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.4489%" y="149" width="0.0868%" height="15" fill="rgb(210,185,5)" fg:x="4744" fg:w="15"/><text x="27.7419%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.5357%" y="149" width="0.0868%" height="15" fill="rgb(231,193,21)" fg:x="4759" fg:w="15"/><text x="27.8287%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.6225%" y="149" width="0.0868%" height="15" fill="rgb(211,194,8)" fg:x="4774" fg:w="15"/><text x="27.9155%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="27.7093%" y="149" width="0.0405%" height="15" fill="rgb(244,67,26)" fg:x="4789" fg:w="7"/><text x="28.0023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="27.7498%" y="133" width="0.4745%" height="15" fill="rgb(205,197,16)" fg:x="4796" fg:w="82"/><text x="28.0428%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 1.03%)</title><rect x="27.7498%" y="149" width="1.0299%" height="15" fill="rgb(249,144,31)" fg:x="4796" fg:w="178"/><text x="28.0428%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="28.7797%" y="117" width="0.4745%" height="15" fill="rgb(218,14,35)" fg:x="4974" fg:w="82"/><text x="29.0727%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.75%)</title><rect x="28.7797%" y="133" width="0.7522%" height="15" fill="rgb(217,33,0)" fg:x="4974" fg:w="130"/><text x="29.0727%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 1.24%)</title><rect x="28.7797%" y="149" width="1.2440%" height="15" fill="rgb(211,52,40)" fg:x="4974" fg:w="215"/><text x="29.0727%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="30.0237%" y="149" width="0.4745%" height="15" fill="rgb(244,83,1)" fg:x="5189" fg:w="82"/><text x="30.3167%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="30.4982%" y="149" width="0.5150%" height="15" fill="rgb(223,134,51)" fg:x="5271" fg:w="89"/><text x="30.7911%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="31.0131%" y="149" width="0.4745%" height="15" fill="rgb(216,146,3)" fg:x="5360" fg:w="82"/><text x="31.3061%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="31.4876%" y="149" width="0.4745%" height="15" fill="rgb(248,58,37)" fg:x="5442" fg:w="82"/><text x="31.7806%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="31.9620%" y="149" width="0.0231%" height="15" fill="rgb(244,89,39)" fg:x="5524" fg:w="4"/><text x="32.2550%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="31.9852%" y="149" width="0.5150%" height="15" fill="rgb(244,51,48)" fg:x="5528" fg:w="89"/><text x="32.2782%" y="159.50"></text></g><g><title>memcpy (392 instructions, 2.27%)</title><rect x="32.5001%" y="149" width="2.2681%" height="15" fill="rgb(236,179,30)" fg:x="5617" fg:w="392"/><text x="32.7931%" y="159.50">m..</text></g><g><title>memcpy (392 instructions, 2.27%)</title><rect x="34.7683%" y="149" width="2.2681%" height="15" fill="rgb(237,135,15)" fg:x="6009" fg:w="392"/><text x="35.0612%" y="159.50">m..</text></g><g><title>memcpy (504 instructions, 2.92%)</title><rect x="37.0364%" y="149" width="2.9162%" height="15" fill="rgb(233,10,40)" fg:x="6401" fg:w="504"/><text x="37.3294%" y="159.50">me..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 45.39%)</title><rect x="1.5622%" y="165" width="45.3856%" height="15" fill="rgb(205,143,4)" fg:x="270" fg:w="7844"/><text x="1.8552%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.99%)</title><rect x="46.9479%" y="165" width="1.9904%" height="15" fill="rgb(218,107,9)" fg:x="8114" fg:w="344"/><text x="47.2408%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="48.9383%" y="149" width="0.0405%" height="15" fill="rgb(245,156,11)" fg:x="8458" fg:w="7"/><text x="49.2312%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="48.9383%" y="165" width="0.2257%" height="15" fill="rgb(220,221,16)" fg:x="8458" fg:w="39"/><text x="49.2312%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="49.1639%" y="165" width="0.4745%" height="15" fill="rgb(222,94,30)" fg:x="8497" fg:w="82"/><text x="49.4569%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="49.6384%" y="149" width="0.0405%" height="15" fill="rgb(243,51,40)" fg:x="8579" fg:w="7"/><text x="49.9313%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="49.6789%" y="133" width="0.3414%" height="15" fill="rgb(230,131,51)" fg:x="8586" fg:w="59"/><text x="49.9718%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="50.0203%" y="133" width="0.5439%" height="15" fill="rgb(250,132,7)" fg:x="8645" fg:w="94"/><text x="50.3132%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="50.5641%" y="133" width="1.0010%" height="15" fill="rgb(239,171,24)" fg:x="8739" fg:w="173"/><text x="50.8571%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.35%)</title><rect x="49.6789%" y="149" width="3.3501%" height="15" fill="rgb(218,185,14)" fg:x="8586" fg:w="579"/><text x="49.9718%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (797 instructions, 4.61%)</title><rect x="49.6384%" y="165" width="4.6115%" height="15" fill="rgb(206,155,53)" fg:x="8579" fg:w="797"/><text x="49.9313%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (219 instructions, 1.27%)</title><rect x="54.2498%" y="165" width="1.2671%" height="15" fill="rgb(251,96,50)" fg:x="9376" fg:w="219"/><text x="54.5428%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="55.5170%" y="149" width="0.0405%" height="15" fill="rgb(216,223,25)" fg:x="9595" fg:w="7"/><text x="55.8100%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="55.5575%" y="133" width="0.3414%" height="15" fill="rgb(248,160,10)" fg:x="9602" fg:w="59"/><text x="55.8505%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="55.8989%" y="133" width="0.5439%" height="15" fill="rgb(234,82,21)" fg:x="9661" fg:w="94"/><text x="56.1918%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="56.4427%" y="133" width="1.0010%" height="15" fill="rgb(218,229,41)" fg:x="9755" fg:w="173"/><text x="56.7357%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.35%)</title><rect x="55.5575%" y="149" width="3.3501%" height="15" fill="rgb(217,80,46)" fg:x="9602" fg:w="579"/><text x="55.8505%" y="159.50">co..</text></g><g><title>memcmp (77 instructions, 0.45%)</title><rect x="58.9076%" y="149" width="0.4455%" height="15" fill="rgb(205,179,28)" fg:x="10181" fg:w="77"/><text x="59.2006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="59.3531%" y="133" width="0.5150%" height="15" fill="rgb(208,28,39)" fg:x="10258" fg:w="89"/><text x="59.6461%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.77%)</title><rect x="59.3531%" y="149" width="0.7695%" height="15" fill="rgb(236,67,46)" fg:x="10258" fg:w="133"/><text x="59.6461%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 5.64%)</title><rect x="55.5170%" y="165" width="5.6414%" height="15" fill="rgb(241,178,27)" fg:x="9595" fg:w="975"/><text x="55.8100%" y="175.50">candid..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="61.1584%" y="117" width="0.3414%" height="15" fill="rgb(242,65,8)" fg:x="10570" fg:w="59"/><text x="61.4513%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.59%)</title><rect x="61.1584%" y="133" width="0.5902%" height="15" fill="rgb(222,124,32)" fg:x="10570" fg:w="102"/><text x="61.4513%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.87%)</title><rect x="61.1584%" y="149" width="1.8689%" height="15" fill="rgb(223,133,36)" fg:x="10570" fg:w="323"/><text x="61.4513%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.302 (34 instructions, 0.20%)</title><rect x="63.0273%" y="149" width="0.1967%" height="15" fill="rgb(238,25,35)" fg:x="10893" fg:w="34"/><text x="63.3202%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="63.2240%" y="149" width="0.0752%" height="15" fill="rgb(224,144,44)" fg:x="10927" fg:w="13"/><text x="63.5169%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 3.21%)</title><rect x="61.1584%" y="165" width="3.2112%" height="15" fill="rgb(208,61,2)" fg:x="10570" fg:w="555"/><text x="61.4513%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.28%)</title><rect x="64.3696%" y="165" width="0.2835%" height="15" fill="rgb(254,194,30)" fg:x="11125" fg:w="49"/><text x="64.6626%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="64.6531%" y="133" width="0.1562%" height="15" fill="rgb(222,208,25)" fg:x="11174" fg:w="27"/><text x="64.9461%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.82%)</title><rect x="64.6531%" y="149" width="0.8216%" height="15" fill="rgb(250,153,14)" fg:x="11174" fg:w="142"/><text x="64.9461%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="65.7293%" y="133" width="0.1562%" height="15" fill="rgb(228,155,25)" fg:x="11360" fg:w="27"/><text x="66.0223%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.82%)</title><rect x="65.7293%" y="149" width="0.8216%" height="15" fill="rgb(213,141,27)" fg:x="11360" fg:w="142"/><text x="66.0223%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 2.15%)</title><rect x="64.6531%" y="165" width="2.1524%" height="15" fill="rgb(251,43,41)" fg:x="11174" fg:w="372"/><text x="64.9461%" y="175.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.20%)</title><rect x="66.8055%" y="149" width="0.2025%" height="15" fill="rgb(211,141,46)" fg:x="11546" fg:w="35"/><text x="67.0985%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1621 (34 instructions, 0.20%)</title><rect x="67.0080%" y="149" width="0.1967%" height="15" fill="rgb(214,185,18)" fg:x="11581" fg:w="34"/><text x="67.3010%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1621 (34 instructions, 0.20%)</title><rect x="67.2048%" y="149" width="0.1967%" height="15" fill="rgb(244,183,46)" fg:x="11615" fg:w="34"/><text x="67.4977%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.19%)</title><rect x="67.4015%" y="149" width="0.1909%" height="15" fill="rgb(252,8,33)" fg:x="11649" fg:w="33"/><text x="67.6945%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.45%)</title><rect x="66.8055%" y="165" width="1.4465%" height="15" fill="rgb(235,43,14)" fg:x="11546" fg:w="250"/><text x="67.0985%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="68.2520%" y="165" width="0.0752%" height="15" fill="rgb(224,222,23)" fg:x="11796" fg:w="13"/><text x="68.5450%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="68.3273%" y="165" width="0.0752%" height="15" fill="rgb(234,43,48)" fg:x="11809" fg:w="13"/><text x="68.6202%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="68.4025%" y="165" width="0.0752%" height="15" fill="rgb(222,57,45)" fg:x="11822" fg:w="13"/><text x="68.6954%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.25%)</title><rect x="68.4777%" y="165" width="0.2488%" height="15" fill="rgb(206,102,13)" fg:x="11835" fg:w="43"/><text x="68.7707%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="68.7265%" y="149" width="0.0405%" height="15" fill="rgb(229,143,0)" fg:x="11878" fg:w="7"/><text x="69.0195%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="68.7670%" y="133" width="0.1562%" height="15" fill="rgb(236,15,37)" fg:x="11885" fg:w="27"/><text x="69.0600%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="68.9232%" y="133" width="0.1562%" height="15" fill="rgb(247,214,10)" fg:x="11912" fg:w="27"/><text x="69.2162%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.14%)</title><rect x="68.7670%" y="149" width="1.1398%" height="15" fill="rgb(223,99,44)" fg:x="11885" fg:w="197"/><text x="69.0600%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="69.9068%" y="117" width="0.1562%" height="15" fill="rgb(230,63,21)" fg:x="12082" fg:w="27"/><text x="70.1998%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.82%)</title><rect x="69.9068%" y="133" width="0.8216%" height="15" fill="rgb(235,64,23)" fg:x="12082" fg:w="142"/><text x="70.1998%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 1.08%)</title><rect x="69.9068%" y="149" width="1.0762%" height="15" fill="rgb(208,3,33)" fg:x="12082" fg:w="186"/><text x="70.1998%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="70.9830%" y="149" width="0.0752%" height="15" fill="rgb(217,154,37)" fg:x="12268" fg:w="13"/><text x="71.2760%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="71.0583%" y="149" width="0.0405%" height="15" fill="rgb(219,35,27)" fg:x="12281" fg:w="7"/><text x="71.3512%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.72%)</title><rect x="68.7265%" y="165" width="2.7194%" height="15" fill="rgb(215,87,18)" fg:x="11878" fg:w="470"/><text x="69.0195%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="71.4459%" y="149" width="0.1562%" height="15" fill="rgb(232,32,52)" fg:x="12348" fg:w="27"/><text x="71.7389%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.82%)</title><rect x="71.4459%" y="165" width="0.8216%" height="15" fill="rgb(240,0,28)" fg:x="12348" fg:w="142"/><text x="71.7389%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,871 instructions, 80.26%)</title><rect x="1.0878%" y="181" width="80.2581%" height="15" fill="rgb(248,36,26)" fg:x="188" fg:w="13871"/><text x="1.3807%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="81.3458%" y="149" width="0.0405%" height="15" fill="rgb(216,145,39)" fg:x="14059" fg:w="7"/><text x="81.6388%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="81.3863%" y="133" width="0.3472%" height="15" fill="rgb(252,1,12)" fg:x="14066" fg:w="60"/><text x="81.6793%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.60%)</title><rect x="81.3863%" y="149" width="0.6017%" height="15" fill="rgb(240,204,44)" fg:x="14066" fg:w="104"/><text x="81.6793%" y="159.50"></text></g><g><title>memset (152 instructions, 0.88%)</title><rect x="81.9881%" y="149" width="0.8795%" height="15" fill="rgb(249,181,29)" fg:x="14170" fg:w="152"/><text x="82.2810%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (437 instructions, 2.53%)</title><rect x="81.3458%" y="165" width="2.5285%" height="15" fill="rgb(239,216,35)" fg:x="14059" fg:w="437"/><text x="81.6388%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 3.00%)</title><rect x="83.8743%" y="149" width="2.9972%" height="15" fill="rgb(226,206,7)" fg:x="14496" fg:w="518"/><text x="84.1673%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="86.8715%" y="101" width="0.4745%" height="15" fill="rgb(224,205,23)" fg:x="15014" fg:w="82"/><text x="87.1645%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.75%)</title><rect x="86.8715%" y="117" width="0.7522%" height="15" fill="rgb(231,30,31)" fg:x="15014" fg:w="130"/><text x="87.1645%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 1.23%)</title><rect x="86.8715%" y="133" width="1.2266%" height="15" fill="rgb(250,183,42)" fg:x="15014" fg:w="212"/><text x="87.1645%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="88.0981%" y="133" width="0.0868%" height="15" fill="rgb(207,196,53)" fg:x="15226" fg:w="15"/><text x="88.3911%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="88.1849%" y="133" width="0.0868%" height="15" fill="rgb(251,102,50)" fg:x="15241" fg:w="15"/><text x="88.4779%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 2.49%)</title><rect x="86.8715%" y="149" width="2.4880%" height="15" fill="rgb(222,227,19)" fg:x="15014" fg:w="430"/><text x="87.1645%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.99%)</title><rect x="89.3595%" y="149" width="2.9856%" height="15" fill="rgb(234,67,7)" fg:x="15444" fg:w="516"/><text x="89.6525%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="92.3451%" y="149" width="0.0405%" height="15" fill="rgb(208,76,19)" fg:x="15960" fg:w="7"/><text x="92.6380%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 9.07%)</title><rect x="83.8743%" y="165" width="9.0725%" height="15" fill="rgb(238,80,39)" fg:x="14496" fg:w="1568"/><text x="84.1673%" y="175.50">candid::ser..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="92.9468%" y="165" width="0.0405%" height="15" fill="rgb(247,138,35)" fg:x="16064" fg:w="7"/><text x="93.2398%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="92.9873%" y="165" width="0.3472%" height="15" fill="rgb(228,11,47)" fg:x="16071" fg:w="60"/><text x="93.2803%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,676 instructions, 15.48%)</title><rect x="81.3458%" y="181" width="15.4834%" height="15" fill="rgb(239,197,44)" fg:x="14059" fg:w="2676"/><text x="81.6388%" y="191.50">ic_cdk::api::call::r..</text></g><g><title>vector::__canister_method_batch_get::{{closure}} (16,603 instructions, 96.07%)</title><rect x="1.0878%" y="197" width="96.0655%" height="15" fill="rgb(220,161,28)" fg:x="188" fg:w="16603"/><text x="1.3807%" y="207.50">vector::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.08%)</title><rect x="97.1533%" y="197" width="0.0810%" height="15" fill="rgb(244,69,10)" fg:x="16791" fg:w="14"/><text x="97.4462%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="97.7550%" y="181" width="0.1562%" height="15" fill="rgb(239,158,38)" fg:x="16895" fg:w="27"/><text x="98.0480%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="97.9112%" y="181" width="0.1562%" height="15" fill="rgb(206,54,2)" fg:x="16922" fg:w="27"/><text x="98.2042%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.39%)</title><rect x="98.0675%" y="181" width="0.3935%" height="15" fill="rgb(211,133,22)" fg:x="16949" fg:w="68"/><text x="98.3604%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (333 instructions, 1.93%)</title><rect x="97.2401%" y="197" width="1.9267%" height="15" fill="rgb(232,86,12)" fg:x="16806" fg:w="333"/><text x="97.5330%" y="207.50"></text></g><g><title>all (17,283 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,207,33)" fg:x="0" fg:w="17283"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,283 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,151,45)" fg:x="0" fg:w="17283"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>