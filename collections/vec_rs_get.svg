<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="16494"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="0.0000%" y="229" width="0.4972%" height="15" fill="rgb(245,108,8)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="0.4972%" y="229" width="0.4972%" height="15" fill="rgb(219,113,12)" fg:x="82" fg:w="82"/><text x="0.7901%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="0.9943%" y="181" width="0.4972%" height="15" fill="rgb(217,199,0)" fg:x="164" fg:w="82"/><text x="1.2873%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 6.91%)</title><rect x="0.9943%" y="197" width="6.9055%" height="15" fill="rgb(217,31,7)" fg:x="164" fg:w="1139"/><text x="1.2873%" y="207.50">ic_cdk:..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.31%)</title><rect x="7.8998%" y="165" width="0.3092%" height="15" fill="rgb(228,130,8)" fg:x="1303" fg:w="51"/><text x="8.1928%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="8.2090%" y="149" width="0.0364%" height="15" fill="rgb(230,133,19)" fg:x="1354" fg:w="6"/><text x="8.5020%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.65%)</title><rect x="8.2090%" y="165" width="2.6494%" height="15" fill="rgb(228,150,9)" fg:x="1354" fg:w="437"/><text x="8.5020%" y="175.50">c..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.39%)</title><rect x="10.8585%" y="165" width="0.3880%" height="15" fill="rgb(245,76,26)" fg:x="1791" fg:w="64"/><text x="11.1515%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.46%)</title><rect x="11.2465%" y="165" width="0.4608%" height="15" fill="rgb(252,167,45)" fg:x="1855" fg:w="76"/><text x="11.5395%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.46%)</title><rect x="11.7073%" y="165" width="0.4608%" height="15" fill="rgb(214,19,36)" fg:x="1931" fg:w="76"/><text x="12.0003%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.46%)</title><rect x="12.1681%" y="165" width="0.4608%" height="15" fill="rgb(242,97,48)" fg:x="2007" fg:w="76"/><text x="12.4610%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.46%)</title><rect x="12.6288%" y="165" width="0.4608%" height="15" fill="rgb(213,215,11)" fg:x="2083" fg:w="76"/><text x="12.9218%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.31%)</title><rect x="13.0896%" y="165" width="0.3092%" height="15" fill="rgb(211,202,8)" fg:x="2159" fg:w="51"/><text x="13.3826%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.58%)</title><rect x="13.3988%" y="165" width="0.5760%" height="15" fill="rgb(216,52,7)" fg:x="2210" fg:w="95"/><text x="13.6918%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="13.9748%" y="149" width="0.0364%" height="15" fill="rgb(228,107,33)" fg:x="2305" fg:w="6"/><text x="14.2677%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.65%)</title><rect x="13.9748%" y="165" width="2.6494%" height="15" fill="rgb(243,186,42)" fg:x="2305" fg:w="437"/><text x="14.2677%" y="175.50">c..</text></g><g><title>memcmp (19 instructions, 0.12%)</title><rect x="16.6242%" y="165" width="0.1152%" height="15" fill="rgb(223,19,22)" fg:x="2742" fg:w="19"/><text x="16.9172%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="16.7394%" y="133" width="0.4972%" height="15" fill="rgb(227,191,47)" fg:x="2761" fg:w="82"/><text x="17.0324%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.41%)</title><rect x="17.2366%" y="101" width="0.4062%" height="15" fill="rgb(211,67,0)" fg:x="2843" fg:w="67"/><text x="17.5295%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.58%)</title><rect x="17.2366%" y="117" width="0.5820%" height="15" fill="rgb(221,37,36)" fg:x="2843" fg:w="96"/><text x="17.5295%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="17.8186%" y="69" width="0.0667%" height="15" fill="rgb(240,81,11)" fg:x="2939" fg:w="11"/><text x="18.1116%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.21%)</title><rect x="17.8853%" y="53" width="0.2122%" height="15" fill="rgb(222,223,41)" fg:x="2950" fg:w="35"/><text x="18.1783%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.39%)</title><rect x="17.8853%" y="69" width="0.3880%" height="15" fill="rgb(208,190,15)" fg:x="2950" fg:w="64"/><text x="18.1783%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.87%)</title><rect x="17.8186%" y="85" width="0.8730%" height="15" fill="rgb(244,9,32)" fg:x="2939" fg:w="144"/><text x="18.1116%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.27%)</title><rect x="17.8186%" y="101" width="1.2732%" height="15" fill="rgb(237,67,13)" fg:x="2939" fg:w="210"/><text x="18.1116%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.33%)</title><rect x="17.8186%" y="117" width="1.3338%" height="15" fill="rgb(226,77,40)" fg:x="2939" fg:w="220"/><text x="18.1116%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 2.72%)</title><rect x="17.2366%" y="133" width="2.7222%" height="15" fill="rgb(224,11,9)" fg:x="2843" fg:w="449"/><text x="17.5295%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 4.04%)</title><rect x="16.7394%" y="149" width="4.0439%" height="15" fill="rgb(228,195,21)" fg:x="2761" fg:w="667"/><text x="17.0324%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.39%)</title><rect x="20.7833%" y="149" width="0.3880%" height="15" fill="rgb(253,9,30)" fg:x="3428" fg:w="64"/><text x="21.0763%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.37%)</title><rect x="21.1713%" y="149" width="0.3698%" height="15" fill="rgb(228,53,8)" fg:x="3492" fg:w="61"/><text x="21.4643%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.47%)</title><rect x="16.7394%" y="165" width="5.4747%" height="15" fill="rgb(214,41,17)" fg:x="2761" fg:w="903"/><text x="17.0324%" y="175.50">binre..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.16%)</title><rect x="22.2141%" y="165" width="0.1637%" height="15" fill="rgb(251,23,41)" fg:x="3664" fg:w="27"/><text x="22.5071%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.28%)</title><rect x="22.3778%" y="165" width="0.2789%" height="15" fill="rgb(245,77,7)" fg:x="3691" fg:w="46"/><text x="22.6708%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.58%)</title><rect x="22.6567%" y="165" width="0.5760%" height="15" fill="rgb(238,133,21)" fg:x="3737" fg:w="95"/><text x="22.9497%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="23.2327%" y="133" width="0.0364%" height="15" fill="rgb(207,24,16)" fg:x="3832" fg:w="6"/><text x="23.5257%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.65%)</title><rect x="23.2327%" y="149" width="2.6494%" height="15" fill="rgb(254,129,17)" fg:x="3832" fg:w="437"/><text x="23.5257%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.12%)</title><rect x="25.8821%" y="149" width="0.1152%" height="15" fill="rgb(215,52,11)" fg:x="4269" fg:w="19"/><text x="26.1751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="25.9973%" y="117" width="0.4972%" height="15" fill="rgb(213,48,11)" fg:x="4288" fg:w="82"/><text x="26.2903%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.41%)</title><rect x="26.4945%" y="85" width="0.4062%" height="15" fill="rgb(225,176,25)" fg:x="4370" fg:w="67"/><text x="26.7875%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.58%)</title><rect x="26.4945%" y="101" width="0.5820%" height="15" fill="rgb(222,141,17)" fg:x="4370" fg:w="96"/><text x="26.7875%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="27.0765%" y="53" width="0.0667%" height="15" fill="rgb(248,77,33)" fg:x="4466" fg:w="11"/><text x="27.3695%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.21%)</title><rect x="27.1432%" y="37" width="0.2122%" height="15" fill="rgb(246,225,34)" fg:x="4477" fg:w="35"/><text x="27.4362%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.39%)</title><rect x="27.1432%" y="53" width="0.3880%" height="15" fill="rgb(224,124,38)" fg:x="4477" fg:w="64"/><text x="27.4362%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.87%)</title><rect x="27.0765%" y="69" width="0.8730%" height="15" fill="rgb(242,118,12)" fg:x="4466" fg:w="144"/><text x="27.3695%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.27%)</title><rect x="27.0765%" y="85" width="1.2732%" height="15" fill="rgb(225,31,40)" fg:x="4466" fg:w="210"/><text x="27.3695%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.33%)</title><rect x="27.0765%" y="101" width="1.3338%" height="15" fill="rgb(240,129,39)" fg:x="4466" fg:w="220"/><text x="27.3695%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 2.72%)</title><rect x="26.4945%" y="117" width="2.7222%" height="15" fill="rgb(249,153,31)" fg:x="4370" fg:w="449"/><text x="26.7875%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 4.04%)</title><rect x="25.9973%" y="133" width="4.0439%" height="15" fill="rgb(212,117,54)" fg:x="4288" fg:w="667"/><text x="26.2903%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.39%)</title><rect x="30.0412%" y="133" width="0.3880%" height="15" fill="rgb(243,63,13)" fg:x="4955" fg:w="64"/><text x="30.3342%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.37%)</title><rect x="30.4292%" y="133" width="0.3698%" height="15" fill="rgb(223,107,2)" fg:x="5019" fg:w="61"/><text x="30.7222%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.47%)</title><rect x="25.9973%" y="149" width="5.4747%" height="15" fill="rgb(228,4,26)" fg:x="4288" fg:w="903"/><text x="26.2903%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.31%)</title><rect x="31.4721%" y="133" width="0.3092%" height="15" fill="rgb(219,109,38)" fg:x="5191" fg:w="51"/><text x="31.7650%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.72%)</title><rect x="31.7813%" y="133" width="0.7154%" height="15" fill="rgb(218,101,37)" fg:x="5242" fg:w="118"/><text x="32.0742%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.28%)</title><rect x="32.4967%" y="133" width="0.2789%" height="15" fill="rgb(248,119,49)" fg:x="5360" fg:w="46"/><text x="32.7896%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.72%)</title><rect x="31.4721%" y="149" width="1.7158%" height="15" fill="rgb(231,78,21)" fg:x="5191" fg:w="283"/><text x="31.7650%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="33.1878%" y="149" width="0.4972%" height="15" fill="rgb(214,99,29)" fg:x="5474" fg:w="82"/><text x="33.4808%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 11.58%)</title><rect x="23.2327%" y="165" width="11.5800%" height="15" fill="rgb(232,161,30)" fg:x="3832" fg:w="1910"/><text x="23.5257%" y="175.50">binread::binre..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.28%)</title><rect x="34.8127%" y="165" width="0.2789%" height="15" fill="rgb(239,52,29)" fg:x="5742" fg:w="46"/><text x="35.1056%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="35.0915%" y="165" width="0.0909%" height="15" fill="rgb(227,95,31)" fg:x="5788" fg:w="15"/><text x="35.3845%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="35.1825%" y="165" width="0.0485%" height="15" fill="rgb(242,127,45)" fg:x="5803" fg:w="8"/><text x="35.4755%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="35.2310%" y="149" width="0.4972%" height="15" fill="rgb(241,97,47)" fg:x="5811" fg:w="82"/><text x="35.5240%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 1.08%)</title><rect x="35.2310%" y="165" width="1.0792%" height="15" fill="rgb(238,37,25)" fg:x="5811" fg:w="178"/><text x="35.5240%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="36.3102%" y="133" width="0.4972%" height="15" fill="rgb(218,47,13)" fg:x="5989" fg:w="82"/><text x="36.6031%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.75%)</title><rect x="36.3102%" y="149" width="0.7457%" height="15" fill="rgb(246,95,49)" fg:x="5989" fg:w="123"/><text x="36.6031%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 1.27%)</title><rect x="36.3102%" y="165" width="1.2732%" height="15" fill="rgb(232,46,24)" fg:x="5989" fg:w="210"/><text x="36.6031%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="37.5834%" y="165" width="0.4972%" height="15" fill="rgb(251,36,17)" fg:x="6199" fg:w="82"/><text x="37.8763%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.54%)</title><rect x="38.0805%" y="165" width="0.5396%" height="15" fill="rgb(241,200,34)" fg:x="6281" fg:w="89"/><text x="38.3735%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="38.6201%" y="165" width="0.4972%" height="15" fill="rgb(219,38,46)" fg:x="6370" fg:w="82"/><text x="38.9131%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="39.1173%" y="165" width="0.4972%" height="15" fill="rgb(248,163,10)" fg:x="6452" fg:w="82"/><text x="39.4102%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="39.6144%" y="165" width="0.0303%" height="15" fill="rgb(209,0,48)" fg:x="6534" fg:w="5"/><text x="39.9074%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.54%)</title><rect x="39.6447%" y="165" width="0.5396%" height="15" fill="rgb(223,194,24)" fg:x="6539" fg:w="89"/><text x="39.9377%" y="175.50"></text></g><g><title>memcpy (392 instructions, 2.38%)</title><rect x="40.1843%" y="165" width="2.3766%" height="15" fill="rgb(250,31,33)" fg:x="6628" fg:w="392"/><text x="40.4773%" y="175.50">m..</text></g><g><title>memcpy (392 instructions, 2.38%)</title><rect x="42.5609%" y="165" width="2.3766%" height="15" fill="rgb(218,179,19)" fg:x="7020" fg:w="392"/><text x="42.8539%" y="175.50">m..</text></g><g><title>memcpy (504 instructions, 3.06%)</title><rect x="44.9376%" y="165" width="3.0557%" height="15" fill="rgb(226,168,35)" fg:x="7412" fg:w="504"/><text x="45.2305%" y="175.50">me..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 47.64%)</title><rect x="7.8998%" y="181" width="47.6355%" height="15" fill="rgb(226,156,4)" fg:x="1303" fg:w="7857"/><text x="8.1928%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 2.47%)</title><rect x="55.5353%" y="181" width="2.4736%" height="15" fill="rgb(213,89,19)" fg:x="9160" fg:w="408"/><text x="55.8283%" y="191.50">m..</text></g><g><title>memcpy (408 instructions, 2.47%)</title><rect x="58.0090%" y="181" width="2.4736%" height="15" fill="rgb(215,117,27)" fg:x="9568" fg:w="408"/><text x="58.3019%" y="191.50">m..</text></g><g><title>candid::types::internal::find_type (24 instructions, 0.15%)</title><rect x="60.4826%" y="181" width="0.1455%" height="15" fill="rgb(231,49,39)" fg:x="9976" fg:w="24"/><text x="60.7756%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="60.6281%" y="181" width="0.4972%" height="15" fill="rgb(212,137,8)" fg:x="10000" fg:w="82"/><text x="60.9211%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="61.1253%" y="165" width="0.4972%" height="15" fill="rgb(251,158,10)" fg:x="10082" fg:w="82"/><text x="61.4182%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 1.01%)</title><rect x="61.1253%" y="181" width="1.0064%" height="15" fill="rgb(211,194,23)" fg:x="10082" fg:w="166"/><text x="61.4182%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (214 instructions, 1.30%)</title><rect x="62.1317%" y="181" width="1.2974%" height="15" fill="rgb(241,162,18)" fg:x="10248" fg:w="214"/><text x="62.4247%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.47%)</title><rect x="63.4291%" y="165" width="0.4668%" height="15" fill="rgb(226,82,18)" fg:x="10462" fg:w="77"/><text x="63.7221%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.54%)</title><rect x="63.8960%" y="149" width="0.5396%" height="15" fill="rgb(220,184,18)" fg:x="10539" fg:w="89"/><text x="64.1889%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.97%)</title><rect x="63.8960%" y="165" width="0.9700%" height="15" fill="rgb(223,67,26)" fg:x="10539" fg:w="160"/><text x="64.1889%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 2.52%)</title><rect x="63.4291%" y="181" width="2.5221%" height="15" fill="rgb(237,33,48)" fg:x="10462" fg:w="416"/><text x="63.7221%" y="191.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.30%)</title><rect x="65.9513%" y="165" width="0.2971%" height="15" fill="rgb(215,223,13)" fg:x="10878" fg:w="49"/><text x="66.2442%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="66.2483%" y="165" width="0.0849%" height="15" fill="rgb(209,198,26)" fg:x="10927" fg:w="14"/><text x="66.5413%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 1.21%)</title><rect x="65.9513%" y="181" width="1.2126%" height="15" fill="rgb(208,13,2)" fg:x="10878" fg:w="200"/><text x="66.2442%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.30%)</title><rect x="67.1638%" y="181" width="0.2971%" height="15" fill="rgb(228,81,46)" fg:x="11078" fg:w="49"/><text x="67.4568%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.50%)</title><rect x="67.4609%" y="165" width="0.5032%" height="15" fill="rgb(210,144,42)" fg:x="11127" fg:w="83"/><text x="67.7539%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.14%)</title><rect x="68.3946%" y="149" width="0.1394%" height="15" fill="rgb(230,113,34)" fg:x="11281" fg:w="23"/><text x="68.6875%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.84%)</title><rect x="68.3946%" y="165" width="0.8367%" height="15" fill="rgb(243,78,50)" fg:x="11281" fg:w="138"/><text x="68.6875%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 2.20%)</title><rect x="67.4609%" y="181" width="2.2008%" height="15" fill="rgb(216,83,45)" fg:x="11127" fg:w="363"/><text x="67.7539%" y="191.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.22%)</title><rect x="69.6617%" y="165" width="0.2243%" height="15" fill="rgb(230,175,3)" fg:x="11490" fg:w="37"/><text x="69.9547%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.21%)</title><rect x="69.8860%" y="165" width="0.2061%" height="15" fill="rgb(234,30,0)" fg:x="11527" fg:w="34"/><text x="70.1790%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.21%)</title><rect x="70.0922%" y="165" width="0.2061%" height="15" fill="rgb(221,197,23)" fg:x="11561" fg:w="34"/><text x="70.3851%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.19%)</title><rect x="70.2983%" y="165" width="0.1879%" height="15" fill="rgb(214,203,52)" fg:x="11595" fg:w="31"/><text x="70.5913%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.58%)</title><rect x="69.6617%" y="181" width="1.5824%" height="15" fill="rgb(207,100,52)" fg:x="11490" fg:w="261"/><text x="69.9547%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="71.2441%" y="181" width="0.0849%" height="15" fill="rgb(243,166,49)" fg:x="11751" fg:w="14"/><text x="71.5371%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="71.3290%" y="181" width="0.0849%" height="15" fill="rgb(241,184,15)" fg:x="11765" fg:w="14"/><text x="71.6219%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="71.4138%" y="181" width="0.0849%" height="15" fill="rgb(214,125,43)" fg:x="11779" fg:w="14"/><text x="71.7068%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.22%)</title><rect x="71.4987%" y="181" width="0.2243%" height="15" fill="rgb(220,72,45)" fg:x="11793" fg:w="37"/><text x="71.7917%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="71.7231%" y="165" width="0.0485%" height="15" fill="rgb(230,88,0)" fg:x="11830" fg:w="8"/><text x="72.0160%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="71.7716%" y="149" width="0.1637%" height="15" fill="rgb(210,139,9)" fg:x="11838" fg:w="27"/><text x="72.0645%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="71.9352%" y="149" width="0.1637%" height="15" fill="rgb(232,181,12)" fg:x="11865" fg:w="27"/><text x="72.2282%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.19%)</title><rect x="71.7716%" y="165" width="1.1944%" height="15" fill="rgb(239,96,11)" fg:x="11838" fg:w="197"/><text x="72.0645%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="72.9659%" y="133" width="0.1637%" height="15" fill="rgb(229,10,24)" fg:x="12035" fg:w="27"/><text x="73.2589%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.86%)</title><rect x="72.9659%" y="149" width="0.8609%" height="15" fill="rgb(220,136,16)" fg:x="12035" fg:w="142"/><text x="73.2589%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 1.29%)</title><rect x="72.9659%" y="165" width="1.2914%" height="15" fill="rgb(250,89,23)" fg:x="12035" fg:w="213"/><text x="73.2589%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="74.2573%" y="165" width="0.0849%" height="15" fill="rgb(237,199,3)" fg:x="12248" fg:w="14"/><text x="74.5503%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (521 instructions, 3.16%)</title><rect x="71.7231%" y="181" width="3.1587%" height="15" fill="rgb(242,214,35)" fg:x="11830" fg:w="521"/><text x="72.0160%" y="191.50">co..</text></g><g><title>candid::utils::decode_args_with_config_debug (11,480 instructions, 69.60%)</title><rect x="7.8998%" y="197" width="69.6011%" height="15" fill="rgb(209,46,30)" fg:x="1303" fg:w="11480"/><text x="8.1928%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="77.5009%" y="181" width="0.1637%" height="15" fill="rgb(241,229,36)" fg:x="12783" fg:w="27"/><text x="77.7939%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.86%)</title><rect x="77.5009%" y="197" width="0.8609%" height="15" fill="rgb(216,85,30)" fg:x="12783" fg:w="142"/><text x="77.7939%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,868 instructions, 78.02%)</title><rect x="0.9943%" y="213" width="78.0162%" height="15" fill="rgb(210,184,47)" fg:x="164" fg:w="12868"/><text x="1.2873%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.37%)</title><rect x="79.0105%" y="165" width="0.3698%" height="15" fill="rgb(227,28,23)" fg:x="13032" fg:w="61"/><text x="79.3035%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.80%)</title><rect x="79.0105%" y="181" width="0.8003%" height="15" fill="rgb(224,28,44)" fg:x="13032" fg:w="132"/><text x="79.3035%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="79.8108%" y="165" width="0.1637%" height="15" fill="rgb(228,78,2)" fg:x="13164" fg:w="27"/><text x="80.1038%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="79.9745%" y="165" width="0.1637%" height="15" fill="rgb(226,187,7)" fg:x="13191" fg:w="27"/><text x="80.2675%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.41%)</title><rect x="80.1382%" y="165" width="0.4062%" height="15" fill="rgb(208,55,47)" fg:x="13218" fg:w="67"/><text x="80.4312%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (242 instructions, 1.47%)</title><rect x="79.8108%" y="181" width="1.4672%" height="15" fill="rgb(207,153,25)" fg:x="13164" fg:w="242"/><text x="80.1038%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (550 instructions, 3.33%)</title><rect x="79.0105%" y="197" width="3.3345%" height="15" fill="rgb(232,42,28)" fg:x="13032" fg:w="550"/><text x="79.3035%" y="207.50">ca..</text></g><g><title>std::io::Write::write_all (518 instructions, 3.14%)</title><rect x="82.3451%" y="181" width="3.1405%" height="15" fill="rgb(240,66,51)" fg:x="13582" fg:w="518"/><text x="82.6381%" y="191.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.50%)</title><rect x="85.4856%" y="133" width="0.4972%" height="15" fill="rgb(251,35,35)" fg:x="14100" fg:w="82"/><text x="85.7786%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.75%)</title><rect x="85.4856%" y="149" width="0.7457%" height="15" fill="rgb(224,164,16)" fg:x="14100" fg:w="123"/><text x="85.7786%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 1.25%)</title><rect x="85.4856%" y="165" width="1.2489%" height="15" fill="rgb(207,208,52)" fg:x="14100" fg:w="206"/><text x="85.7786%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="86.7346%" y="165" width="0.0909%" height="15" fill="rgb(230,163,47)" fg:x="14306" fg:w="15"/><text x="87.0275%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="86.8255%" y="165" width="0.0909%" height="15" fill="rgb(246,113,9)" fg:x="14321" fg:w="15"/><text x="87.1185%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 2.59%)</title><rect x="85.4856%" y="181" width="2.5949%" height="15" fill="rgb(222,213,11)" fg:x="14100" fg:w="428"/><text x="85.7786%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 3.13%)</title><rect x="88.0805%" y="181" width="3.1284%" height="15" fill="rgb(246,228,22)" fg:x="14528" fg:w="516"/><text x="88.3735%" y="191.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="91.2089%" y="181" width="0.0424%" height="15" fill="rgb(234,93,34)" fg:x="15044" fg:w="7"/><text x="91.5019%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 9.37%)</title><rect x="82.3451%" y="197" width="9.3731%" height="15" fill="rgb(209,183,47)" fg:x="13582" fg:w="1546"/><text x="82.6381%" y="207.50">candid::ser..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="91.7182%" y="197" width="0.0485%" height="15" fill="rgb(218,1,22)" fg:x="15128" fg:w="8"/><text x="92.0112%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="91.7667%" y="197" width="0.0485%" height="15" fill="rgb(222,196,48)" fg:x="15136" fg:w="8"/><text x="92.0597%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.37%)</title><rect x="91.8152%" y="197" width="0.3698%" height="15" fill="rgb(213,108,27)" fg:x="15144" fg:w="61"/><text x="92.1082%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,806 instructions, 17.01%)</title><rect x="79.0105%" y="213" width="17.0122%" height="15" fill="rgb(225,2,19)" fg:x="13032" fg:w="2806"/><text x="79.3035%" y="223.50">ic_cdk::api::call::rep..</text></g><g><title>vector::__canister_method_batch_get::{{closure}} (15,731 instructions, 95.37%)</title><rect x="0.9943%" y="229" width="95.3741%" height="15" fill="rgb(227,214,36)" fg:x="164" fg:w="15731"/><text x="1.2873%" y="239.50">vector::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.09%)</title><rect x="96.3684%" y="229" width="0.0909%" height="15" fill="rgb(208,77,50)" fg:x="15895" fg:w="15"/><text x="96.6613%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="97.0050%" y="197" width="0.1637%" height="15" fill="rgb(225,228,50)" fg:x="16000" fg:w="27"/><text x="97.2979%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (66 instructions, 0.40%)</title><rect x="97.1687%" y="197" width="0.4001%" height="15" fill="rgb(224,226,54)" fg:x="16027" fg:w="66"/><text x="97.4616%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.41%)</title><rect x="97.5688%" y="197" width="0.4062%" height="15" fill="rgb(213,34,15)" fg:x="16093" fg:w="67"/><text x="97.8618%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (370 instructions, 2.24%)</title><rect x="96.4654%" y="213" width="2.2432%" height="15" fill="rgb(209,10,39)" fg:x="15911" fg:w="370"/><text x="96.7584%" y="223.50">d..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (488 instructions, 2.96%)</title><rect x="96.4593%" y="229" width="2.9587%" height="15" fill="rgb(248,197,3)" fg:x="15910" fg:w="488"/><text x="96.7523%" y="239.50">&lt;a..</text></g><g><title>all (16,494 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,8,42)" fg:x="0" fg:w="16494"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_get (16,494 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,192,33)" fg:x="0" fg:w="16494"/><text x="0.2930%" y="255.50">canister_update batch_get</text></g></svg></svg>