<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="12986"><g><title>ic_cdk::setup (19 instructions, 0.15%)</title><rect x="0.0000%" y="197" width="0.1463%" height="15" fill="rgb(207,207,4)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="0.1463%" y="197" width="0.5852%" height="15" fill="rgb(249,50,53)" fg:x="19" fg:w="76"/><text x="0.4393%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="0.7316%" y="197" width="0.5852%" height="15" fill="rgb(238,163,20)" fg:x="95" fg:w="76"/><text x="1.0245%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="1.3168%" y="165" width="0.5852%" height="15" fill="rgb(221,126,12)" fg:x="171" fg:w="76"/><text x="1.6098%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.53%)</title><rect x="1.9020%" y="149" width="0.5313%" height="15" fill="rgb(224,203,9)" fg:x="247" fg:w="69"/><text x="2.1950%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="2.4334%" y="133" width="0.0308%" height="15" fill="rgb(236,26,5)" fg:x="316" fg:w="4"/><text x="2.7264%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 3.13%)</title><rect x="2.4334%" y="149" width="3.1264%" height="15" fill="rgb(232,107,43)" fg:x="316" fg:w="406"/><text x="2.7264%" y="159.50">co..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.63%)</title><rect x="5.5598%" y="149" width="0.6314%" height="15" fill="rgb(230,33,32)" fg:x="722" fg:w="82"/><text x="5.8528%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.42%)</title><rect x="6.1913%" y="149" width="0.4158%" height="15" fill="rgb(220,207,26)" fg:x="804" fg:w="54"/><text x="6.4843%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.42%)</title><rect x="6.6071%" y="149" width="0.4158%" height="15" fill="rgb(213,181,12)" fg:x="858" fg:w="54"/><text x="6.9001%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.42%)</title><rect x="7.0229%" y="149" width="0.4158%" height="15" fill="rgb(231,224,12)" fg:x="912" fg:w="54"/><text x="7.3159%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.42%)</title><rect x="7.4388%" y="149" width="0.4158%" height="15" fill="rgb(235,100,49)" fg:x="966" fg:w="54"/><text x="7.7317%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.53%)</title><rect x="7.8546%" y="149" width="0.5313%" height="15" fill="rgb(219,98,49)" fg:x="1020" fg:w="69"/><text x="8.1476%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.50%)</title><rect x="8.3860%" y="149" width="0.5005%" height="15" fill="rgb(238,187,31)" fg:x="1089" fg:w="65"/><text x="8.6789%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="8.8865%" y="133" width="0.0308%" height="15" fill="rgb(224,123,30)" fg:x="1154" fg:w="4"/><text x="9.1795%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 3.13%)</title><rect x="8.8865%" y="149" width="3.1264%" height="15" fill="rgb(253,213,32)" fg:x="1154" fg:w="406"/><text x="9.1795%" y="159.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="12.0129%" y="149" width="0.1232%" height="15" fill="rgb(248,111,41)" fg:x="1560" fg:w="16"/><text x="12.3059%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="12.1361%" y="133" width="0.5852%" height="15" fill="rgb(239,103,14)" fg:x="1576" fg:w="76"/><text x="12.4291%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.46%)</title><rect x="12.7214%" y="101" width="0.4620%" height="15" fill="rgb(206,191,6)" fg:x="1652" fg:w="60"/><text x="13.0144%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.65%)</title><rect x="12.7214%" y="117" width="0.6546%" height="15" fill="rgb(210,192,10)" fg:x="1652" fg:w="85"/><text x="13.0144%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="13.3759%" y="69" width="0.0693%" height="15" fill="rgb(250,229,30)" fg:x="1737" fg:w="9"/><text x="13.6689%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.23%)</title><rect x="13.4452%" y="53" width="0.2310%" height="15" fill="rgb(247,136,21)" fg:x="1746" fg:w="30"/><text x="13.7382%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.42%)</title><rect x="13.4452%" y="69" width="0.4235%" height="15" fill="rgb(215,201,34)" fg:x="1746" fg:w="55"/><text x="13.7382%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.91%)</title><rect x="13.3759%" y="85" width="0.9087%" height="15" fill="rgb(245,164,36)" fg:x="1737" fg:w="118"/><text x="13.6689%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.32%)</title><rect x="13.3759%" y="101" width="1.3168%" height="15" fill="rgb(241,105,39)" fg:x="1737" fg:w="171"/><text x="13.6689%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.36%)</title><rect x="13.3759%" y="117" width="1.3553%" height="15" fill="rgb(226,84,6)" fg:x="1737" fg:w="176"/><text x="13.6689%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.86%)</title><rect x="12.7214%" y="133" width="2.8646%" height="15" fill="rgb(243,174,33)" fg:x="1652" fg:w="372"/><text x="13.0144%" y="143.50">co..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 4.54%)</title><rect x="12.1361%" y="149" width="4.5357%" height="15" fill="rgb(253,26,20)" fg:x="1576" fg:w="589"/><text x="12.4291%" y="159.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.63%)</title><rect x="16.6718%" y="149" width="0.6314%" height="15" fill="rgb(253,155,40)" fg:x="2165" fg:w="82"/><text x="16.9648%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="17.3032%" y="149" width="0.4235%" height="15" fill="rgb(224,218,17)" fg:x="2247" fg:w="55"/><text x="17.5962%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.49%)</title><rect x="17.7268%" y="149" width="0.4851%" height="15" fill="rgb(248,223,22)" fg:x="2302" fg:w="63"/><text x="18.0198%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.50%)</title><rect x="18.2119%" y="149" width="0.5005%" height="15" fill="rgb(240,35,3)" fg:x="2365" fg:w="65"/><text x="18.5049%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="18.7125%" y="117" width="0.0308%" height="15" fill="rgb(248,59,32)" fg:x="2430" fg:w="4"/><text x="19.0054%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 3.13%)</title><rect x="18.7125%" y="133" width="3.1264%" height="15" fill="rgb(224,73,41)" fg:x="2430" fg:w="406"/><text x="19.0054%" y="143.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="21.8389%" y="133" width="0.1232%" height="15" fill="rgb(229,200,39)" fg:x="2836" fg:w="16"/><text x="22.1319%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="21.9621%" y="117" width="0.5852%" height="15" fill="rgb(207,105,38)" fg:x="2852" fg:w="76"/><text x="22.2551%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.46%)</title><rect x="22.5474%" y="85" width="0.4620%" height="15" fill="rgb(219,0,32)" fg:x="2928" fg:w="60"/><text x="22.8403%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.65%)</title><rect x="22.5474%" y="101" width="0.6546%" height="15" fill="rgb(237,13,0)" fg:x="2928" fg:w="85"/><text x="22.8403%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="23.2019%" y="53" width="0.0693%" height="15" fill="rgb(237,0,26)" fg:x="3013" fg:w="9"/><text x="23.4949%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.23%)</title><rect x="23.2712%" y="37" width="0.2310%" height="15" fill="rgb(207,212,29)" fg:x="3022" fg:w="30"/><text x="23.5642%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.42%)</title><rect x="23.2712%" y="53" width="0.4235%" height="15" fill="rgb(249,131,2)" fg:x="3022" fg:w="55"/><text x="23.5642%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.91%)</title><rect x="23.2019%" y="69" width="0.9087%" height="15" fill="rgb(219,210,5)" fg:x="3013" fg:w="118"/><text x="23.4949%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.32%)</title><rect x="23.2019%" y="85" width="1.3168%" height="15" fill="rgb(226,30,40)" fg:x="3013" fg:w="171"/><text x="23.4949%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.36%)</title><rect x="23.2019%" y="101" width="1.3553%" height="15" fill="rgb(253,166,32)" fg:x="3013" fg:w="176"/><text x="23.4949%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.86%)</title><rect x="22.5474%" y="117" width="2.8646%" height="15" fill="rgb(215,47,25)" fg:x="2928" fg:w="372"/><text x="22.8403%" y="127.50">co..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 4.54%)</title><rect x="21.9621%" y="133" width="4.5357%" height="15" fill="rgb(252,35,30)" fg:x="2852" fg:w="589"/><text x="22.2551%" y="143.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.63%)</title><rect x="26.4978%" y="133" width="0.6314%" height="15" fill="rgb(217,201,5)" fg:x="3441" fg:w="82"/><text x="26.7907%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="27.1292%" y="133" width="0.4235%" height="15" fill="rgb(225,74,6)" fg:x="3523" fg:w="55"/><text x="27.4222%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.53%)</title><rect x="27.5527%" y="117" width="0.5313%" height="15" fill="rgb(253,16,54)" fg:x="3578" fg:w="69"/><text x="27.8457%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.70%)</title><rect x="28.0841%" y="117" width="0.7008%" height="15" fill="rgb(237,195,8)" fg:x="3647" fg:w="91"/><text x="28.3771%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.49%)</title><rect x="28.7848%" y="117" width="0.4851%" height="15" fill="rgb(232,5,17)" fg:x="3738" fg:w="63"/><text x="29.0778%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 2.17%)</title><rect x="27.5527%" y="133" width="2.1716%" height="15" fill="rgb(208,51,34)" fg:x="3578" fg:w="282"/><text x="27.8457%" y="143.50">&lt;..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.60%)</title><rect x="29.7243%" y="133" width="0.6006%" height="15" fill="rgb(231,4,18)" fg:x="3860" fg:w="78"/><text x="30.0173%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 13.18%)</title><rect x="18.7125%" y="149" width="13.1757%" height="15" fill="rgb(252,163,14)" fg:x="2430" fg:w="1711"/><text x="19.0054%" y="159.50">binread::binread_..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.49%)</title><rect x="31.8882%" y="149" width="0.4851%" height="15" fill="rgb(238,125,7)" fg:x="4141" fg:w="63"/><text x="32.1812%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.10%)</title><rect x="32.3733%" y="149" width="0.1001%" height="15" fill="rgb(219,217,18)" fg:x="4204" fg:w="13"/><text x="32.6663%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.10%)</title><rect x="32.4734%" y="149" width="0.1001%" height="15" fill="rgb(254,41,14)" fg:x="4217" fg:w="13"/><text x="32.7664%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.05%)</title><rect x="32.5735%" y="149" width="0.0539%" height="15" fill="rgb(222,209,51)" fg:x="4230" fg:w="7"/><text x="32.8665%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.12%)</title><rect x="32.6274%" y="149" width="0.1155%" height="15" fill="rgb(252,95,50)" fg:x="4237" fg:w="15"/><text x="32.9204%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="32.7430%" y="133" width="0.5852%" height="15" fill="rgb(249,179,30)" fg:x="4252" fg:w="76"/><text x="33.0359%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 1.22%)</title><rect x="32.7430%" y="149" width="1.2244%" height="15" fill="rgb(214,157,10)" fg:x="4252" fg:w="159"/><text x="33.0359%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="33.9673%" y="117" width="0.5852%" height="15" fill="rgb(227,82,14)" fg:x="4411" fg:w="76"/><text x="34.2603%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.85%)</title><rect x="33.9673%" y="133" width="0.8471%" height="15" fill="rgb(223,42,26)" fg:x="4411" fg:w="110"/><text x="34.2603%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 1.37%)</title><rect x="33.9673%" y="149" width="1.3707%" height="15" fill="rgb(217,164,6)" fg:x="4411" fg:w="178"/><text x="34.2603%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="35.3381%" y="149" width="0.5852%" height="15" fill="rgb(231,142,10)" fg:x="4589" fg:w="76"/><text x="35.6310%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="35.9233%" y="149" width="0.6237%" height="15" fill="rgb(227,86,13)" fg:x="4665" fg:w="81"/><text x="36.2163%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="36.5471%" y="149" width="0.5852%" height="15" fill="rgb(248,1,38)" fg:x="4746" fg:w="76"/><text x="36.8400%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="37.1323%" y="149" width="0.5852%" height="15" fill="rgb(244,198,30)" fg:x="4822" fg:w="76"/><text x="37.4253%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.02%)</title><rect x="37.7175%" y="149" width="0.0154%" height="15" fill="rgb(249,92,7)" fg:x="4898" fg:w="2"/><text x="38.0105%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="37.7329%" y="149" width="0.6237%" height="15" fill="rgb(233,210,27)" fg:x="4900" fg:w="81"/><text x="38.0259%" y="159.50"></text></g><g><title>memcpy (399 instructions, 3.07%)</title><rect x="38.3567%" y="149" width="3.0725%" height="15" fill="rgb(221,103,16)" fg:x="4981" fg:w="399"/><text x="38.6497%" y="159.50">me..</text></g><g><title>memcpy (399 instructions, 3.07%)</title><rect x="41.4292%" y="149" width="3.0725%" height="15" fill="rgb(236,140,36)" fg:x="5380" fg:w="399"/><text x="41.7222%" y="159.50">me..</text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 49.74%)</title><rect x="1.9020%" y="165" width="49.7382%" height="15" fill="rgb(225,208,47)" fg:x="247" fg:w="6459"/><text x="2.1950%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 2.73%)</title><rect x="51.6402%" y="165" width="2.7260%" height="15" fill="rgb(234,80,6)" fg:x="6706" fg:w="354"/><text x="51.9332%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.04%)</title><rect x="54.3662%" y="149" width="0.0385%" height="15" fill="rgb(241,60,36)" fg:x="7060" fg:w="5"/><text x="54.6592%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.30%)</title><rect x="54.3662%" y="165" width="0.3003%" height="15" fill="rgb(218,55,50)" fg:x="7060" fg:w="39"/><text x="54.6592%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="54.6666%" y="149" width="0.4235%" height="15" fill="rgb(207,165,1)" fg:x="7099" fg:w="55"/><text x="54.9595%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (200 instructions, 1.54%)</title><rect x="54.6666%" y="165" width="1.5401%" height="15" fill="rgb(227,189,15)" fg:x="7099" fg:w="200"/><text x="54.9595%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.04%)</title><rect x="56.2067%" y="149" width="0.0385%" height="15" fill="rgb(206,179,40)" fg:x="7299" fg:w="5"/><text x="56.4997%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="56.2452%" y="133" width="0.4081%" height="15" fill="rgb(206,79,50)" fg:x="7304" fg:w="53"/><text x="56.5382%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.68%)</title><rect x="56.6533%" y="133" width="0.6777%" height="15" fill="rgb(242,146,17)" fg:x="7357" fg:w="88"/><text x="56.9463%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.25%)</title><rect x="57.3310%" y="133" width="1.2475%" height="15" fill="rgb(221,13,12)" fg:x="7445" fg:w="162"/><text x="57.6239%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 4.16%)</title><rect x="56.2452%" y="149" width="4.1583%" height="15" fill="rgb(250,157,53)" fg:x="7304" fg:w="540"/><text x="56.5382%" y="159.50">core..</text></g><g><title>candid::types::internal::env_add (749 instructions, 5.77%)</title><rect x="56.2067%" y="165" width="5.7677%" height="15" fill="rgb(232,141,15)" fg:x="7299" fg:w="749"/><text x="56.4997%" y="175.50">candid..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="61.9744%" y="165" width="0.5852%" height="15" fill="rgb(245,23,0)" fg:x="8048" fg:w="76"/><text x="62.2674%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.04%)</title><rect x="62.5597%" y="149" width="0.0385%" height="15" fill="rgb(232,118,23)" fg:x="8124" fg:w="5"/><text x="62.8526%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="62.5982%" y="133" width="0.4081%" height="15" fill="rgb(232,65,37)" fg:x="8129" fg:w="53"/><text x="62.8912%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.68%)</title><rect x="63.0063%" y="133" width="0.6777%" height="15" fill="rgb(244,31,11)" fg:x="8182" fg:w="88"/><text x="63.2993%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.25%)</title><rect x="63.6840%" y="133" width="1.2475%" height="15" fill="rgb(246,116,13)" fg:x="8270" fg:w="162"/><text x="63.9769%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 4.16%)</title><rect x="62.5982%" y="149" width="4.1583%" height="15" fill="rgb(242,50,43)" fg:x="8129" fg:w="540"/><text x="62.8912%" y="159.50">core..</text></g><g><title>memcmp (68 instructions, 0.52%)</title><rect x="66.7565%" y="149" width="0.5236%" height="15" fill="rgb(217,197,10)" fg:x="8669" fg:w="68"/><text x="67.0495%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="67.2801%" y="133" width="0.6237%" height="15" fill="rgb(233,120,31)" fg:x="8737" fg:w="81"/><text x="67.5731%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.83%)</title><rect x="67.2801%" y="149" width="0.8317%" height="15" fill="rgb(252,133,8)" fg:x="8737" fg:w="108"/><text x="67.5731%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 6.85%)</title><rect x="62.5597%" y="165" width="6.8535%" height="15" fill="rgb(217,181,33)" fg:x="8124" fg:w="890"/><text x="62.8526%" y="175.50">candid:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="69.4132%" y="117" width="0.4081%" height="15" fill="rgb(241,94,14)" fg:x="9014" fg:w="53"/><text x="69.7062%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.60%)</title><rect x="69.4132%" y="133" width="0.6006%" height="15" fill="rgb(234,86,45)" fg:x="9014" fg:w="78"/><text x="69.7062%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 2.26%)</title><rect x="69.4132%" y="149" width="2.2563%" height="15" fill="rgb(216,202,39)" fg:x="9014" fg:w="293"/><text x="69.7062%" y="159.50">c..</text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1323 (15 instructions, 0.12%)</title><rect x="71.6695%" y="149" width="0.1155%" height="15" fill="rgb(244,56,35)" fg:x="9307" fg:w="15"/><text x="71.9625%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="71.7850%" y="149" width="0.0847%" height="15" fill="rgb(217,214,23)" fg:x="9322" fg:w="11"/><text x="72.0780%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 3.68%)</title><rect x="69.4132%" y="165" width="3.6809%" height="15" fill="rgb(241,154,3)" fg:x="9014" fg:w="478"/><text x="69.7062%" y="175.50">can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.36%)</title><rect x="73.0941%" y="165" width="0.3619%" height="15" fill="rgb(208,137,19)" fg:x="9492" fg:w="47"/><text x="73.3871%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.92%)</title><rect x="73.4560%" y="149" width="0.9241%" height="15" fill="rgb(237,6,2)" fg:x="9539" fg:w="120"/><text x="73.7490%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.95%)</title><rect x="74.5880%" y="149" width="0.9472%" height="15" fill="rgb(241,103,39)" fg:x="9686" fg:w="123"/><text x="74.8810%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 2.29%)</title><rect x="73.4560%" y="165" width="2.2871%" height="15" fill="rgb(254,71,28)" fg:x="9539" fg:w="297"/><text x="73.7490%" y="175.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.22%)</title><rect x="75.7431%" y="149" width="0.2156%" height="15" fill="rgb(226,168,20)" fg:x="9836" fg:w="28"/><text x="76.0361%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2521 (15 instructions, 0.12%)</title><rect x="75.9587%" y="149" width="0.1155%" height="15" fill="rgb(240,216,35)" fg:x="9864" fg:w="15"/><text x="76.2517%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2521 (15 instructions, 0.12%)</title><rect x="76.0742%" y="149" width="0.1155%" height="15" fill="rgb(219,182,34)" fg:x="9879" fg:w="15"/><text x="76.3672%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 1.04%)</title><rect x="75.7431%" y="165" width="1.0396%" height="15" fill="rgb(218,67,14)" fg:x="9836" fg:w="135"/><text x="76.0361%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="76.7827%" y="165" width="0.0847%" height="15" fill="rgb(222,10,9)" fg:x="9971" fg:w="11"/><text x="77.0757%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="76.8674%" y="165" width="0.0847%" height="15" fill="rgb(240,56,47)" fg:x="9982" fg:w="11"/><text x="77.1604%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="76.9521%" y="165" width="0.0847%" height="15" fill="rgb(243,53,39)" fg:x="9993" fg:w="11"/><text x="77.2451%" y="175.50"></text></g><g><title>memcpy (410 instructions, 3.16%)</title><rect x="77.0368%" y="165" width="3.1572%" height="15" fill="rgb(207,11,52)" fg:x="10004" fg:w="410"/><text x="77.3298%" y="175.50">me..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.09%)</title><rect x="80.1941%" y="133" width="0.0924%" height="15" fill="rgb(237,199,9)" fg:x="10414" fg:w="12"/><text x="80.4870%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.29%)</title><rect x="80.2865%" y="133" width="1.2937%" height="15" fill="rgb(209,70,31)" fg:x="10426" fg:w="168"/><text x="80.5794%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.49%)</title><rect x="81.5802%" y="101" width="0.4851%" height="15" fill="rgb(247,143,33)" fg:x="10594" fg:w="63"/><text x="81.8731%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 1.26%)</title><rect x="81.5802%" y="117" width="1.2552%" height="15" fill="rgb(229,37,25)" fg:x="10594" fg:w="163"/><text x="81.8731%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 1.46%)</title><rect x="81.5802%" y="133" width="1.4631%" height="15" fill="rgb(213,14,9)" fg:x="10594" fg:w="190"/><text x="81.8731%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="83.0433%" y="133" width="0.0847%" height="15" fill="rgb(211,170,46)" fg:x="10784" fg:w="11"/><text x="83.3362%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (421 instructions, 3.24%)</title><rect x="80.1941%" y="149" width="3.2420%" height="15" fill="rgb(210,180,36)" fg:x="10414" fg:w="421"/><text x="80.4870%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (459 instructions, 3.53%)</title><rect x="80.1941%" y="165" width="3.5346%" height="15" fill="rgb(250,6,4)" fg:x="10414" fg:w="459"/><text x="80.4870%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="83.7286%" y="149" width="0.4235%" height="15" fill="rgb(246,55,1)" fg:x="10873" fg:w="55"/><text x="84.0216%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.49%)</title><rect x="84.1522%" y="149" width="0.4851%" height="15" fill="rgb(219,117,46)" fg:x="10928" fg:w="63"/><text x="84.4451%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 1.53%)</title><rect x="83.7286%" y="165" width="1.5324%" height="15" fill="rgb(224,135,12)" fg:x="10873" fg:w="199"/><text x="84.0216%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,294 instructions, 86.97%)</title><rect x="1.3168%" y="181" width="86.9706%" height="15" fill="rgb(215,73,23)" fg:x="171" fg:w="11294"/><text x="1.6098%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.04%)</title><rect x="88.2874%" y="149" width="0.0385%" height="15" fill="rgb(208,66,48)" fg:x="11465" fg:w="5"/><text x="88.5804%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.77%)</title><rect x="88.3259%" y="133" width="0.7701%" height="15" fill="rgb(253,22,22)" fg:x="11470" fg:w="100"/><text x="88.6189%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.98%)</title><rect x="88.3259%" y="149" width="0.9780%" height="15" fill="rgb(246,127,0)" fg:x="11470" fg:w="127"/><text x="88.6189%" y="159.50"></text></g><g><title>memset (136 instructions, 1.05%)</title><rect x="89.3039%" y="149" width="1.0473%" height="15" fill="rgb(254,31,26)" fg:x="11597" fg:w="136"/><text x="89.5968%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (428 instructions, 3.30%)</title><rect x="88.2874%" y="165" width="3.2959%" height="15" fill="rgb(214,194,36)" fg:x="11465" fg:w="428"/><text x="88.5804%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.25%)</title><rect x="91.5832%" y="149" width="0.2464%" height="15" fill="rgb(209,140,51)" fg:x="11893" fg:w="32"/><text x="91.8762%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.59%)</title><rect x="91.8297%" y="101" width="0.5852%" height="15" fill="rgb(234,97,37)" fg:x="11925" fg:w="76"/><text x="92.1226%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.85%)</title><rect x="91.8297%" y="117" width="0.8471%" height="15" fill="rgb(229,129,30)" fg:x="11925" fg:w="110"/><text x="92.1226%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 1.35%)</title><rect x="91.8297%" y="133" width="1.3476%" height="15" fill="rgb(240,93,23)" fg:x="11925" fg:w="175"/><text x="92.1226%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="93.1773%" y="133" width="0.0847%" height="15" fill="rgb(207,142,18)" fg:x="12100" fg:w="11"/><text x="93.4702%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="93.2620%" y="133" width="0.0847%" height="15" fill="rgb(212,104,17)" fg:x="12111" fg:w="11"/><text x="93.5549%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 2.76%)</title><rect x="91.8297%" y="149" width="2.7645%" height="15" fill="rgb(213,160,20)" fg:x="11925" fg:w="359"/><text x="92.1226%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (30 instructions, 0.23%)</title><rect x="94.5942%" y="149" width="0.2310%" height="15" fill="rgb(245,53,15)" fg:x="12284" fg:w="30"/><text x="94.8871%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.04%)</title><rect x="94.8252%" y="149" width="0.0385%" height="15" fill="rgb(216,50,35)" fg:x="12314" fg:w="5"/><text x="95.1182%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 3.80%)</title><rect x="91.5832%" y="165" width="3.8041%" height="15" fill="rgb(223,169,33)" fg:x="11893" fg:w="494"/><text x="91.8762%" y="175.50">can..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.04%)</title><rect x="95.3873%" y="165" width="0.0385%" height="15" fill="rgb(230,186,35)" fg:x="12387" fg:w="5"/><text x="95.6803%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="95.4258%" y="165" width="0.4235%" height="15" fill="rgb(242,155,11)" fg:x="12392" fg:w="55"/><text x="95.7188%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,056 instructions, 8.13%)</title><rect x="88.2874%" y="181" width="8.1318%" height="15" fill="rgb(243,209,3)" fg:x="11465" fg:w="1056"/><text x="88.5804%" y="191.50">ic_cdk::a..</text></g><g><title>vector::batch_get_5_::{{closure}} (12,380 instructions, 95.33%)</title><rect x="1.3168%" y="197" width="95.3334%" height="15" fill="rgb(223,35,26)" fg:x="171" fg:w="12380"/><text x="1.6098%" y="207.50">vector::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.09%)</title><rect x="96.6502%" y="197" width="0.0924%" height="15" fill="rgb(233,109,25)" fg:x="12551" fg:w="12"/><text x="96.9432%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="97.3664%" y="181" width="0.4235%" height="15" fill="rgb(224,156,21)" fg:x="12644" fg:w="55"/><text x="97.6594%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.49%)</title><rect x="97.7899%" y="181" width="0.4851%" height="15" fill="rgb(234,179,1)" fg:x="12699" fg:w="63"/><text x="98.0829%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 2.50%)</title><rect x="96.7426%" y="197" width="2.5027%" height="15" fill="rgb(241,163,37)" fg:x="12563" fg:w="325"/><text x="97.0356%" y="207.50">d..</text></g><g><title>all (12,986 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,228,43)" fg:x="0" fg:w="12986"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (12,986 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(239,109,3)" fg:x="0" fg:w="12986"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>