<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="13014"><g><title>ic_cdk::setup (19 instructions, 0.15%)</title><rect x="0.0000%" y="197" width="0.1460%" height="15" fill="rgb(245,136,53)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="0.1460%" y="197" width="0.5840%" height="15" fill="rgb(205,229,53)" fg:x="19" fg:w="76"/><text x="0.4390%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="0.7300%" y="197" width="0.5840%" height="15" fill="rgb(249,177,49)" fg:x="95" fg:w="76"/><text x="1.0230%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="1.3140%" y="165" width="0.5840%" height="15" fill="rgb(219,120,17)" fg:x="171" fg:w="76"/><text x="1.6069%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.55%)</title><rect x="1.8980%" y="149" width="0.5456%" height="15" fill="rgb(225,223,18)" fg:x="247" fg:w="71"/><text x="2.1909%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="2.4435%" y="133" width="0.0307%" height="15" fill="rgb(233,193,12)" fg:x="318" fg:w="4"/><text x="2.7365%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 3.09%)</title><rect x="2.4435%" y="149" width="3.0890%" height="15" fill="rgb(205,143,11)" fg:x="318" fg:w="402"/><text x="2.7365%" y="159.50">co..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.64%)</title><rect x="5.5325%" y="149" width="0.6378%" height="15" fill="rgb(220,58,27)" fg:x="720" fg:w="83"/><text x="5.8255%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.41%)</title><rect x="6.1703%" y="149" width="0.4149%" height="15" fill="rgb(212,176,44)" fg:x="803" fg:w="54"/><text x="6.4632%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.41%)</title><rect x="6.5852%" y="149" width="0.4149%" height="15" fill="rgb(221,35,27)" fg:x="857" fg:w="54"/><text x="6.8782%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.41%)</title><rect x="7.0002%" y="149" width="0.4149%" height="15" fill="rgb(223,14,14)" fg:x="911" fg:w="54"/><text x="7.2931%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.41%)</title><rect x="7.4151%" y="149" width="0.4149%" height="15" fill="rgb(218,82,13)" fg:x="965" fg:w="54"/><text x="7.7081%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.55%)</title><rect x="7.8300%" y="149" width="0.5456%" height="15" fill="rgb(253,81,39)" fg:x="1019" fg:w="71"/><text x="8.1230%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.50%)</title><rect x="8.3756%" y="149" width="0.4995%" height="15" fill="rgb(245,11,9)" fg:x="1090" fg:w="65"/><text x="8.6686%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="8.8751%" y="133" width="0.0307%" height="15" fill="rgb(251,146,28)" fg:x="1155" fg:w="4"/><text x="9.1680%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 3.09%)</title><rect x="8.8751%" y="149" width="3.0890%" height="15" fill="rgb(219,105,4)" fg:x="1155" fg:w="402"/><text x="9.1680%" y="159.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="11.9640%" y="149" width="0.1229%" height="15" fill="rgb(228,97,39)" fg:x="1557" fg:w="16"/><text x="12.2570%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="12.0870%" y="133" width="0.5840%" height="15" fill="rgb(239,5,20)" fg:x="1573" fg:w="76"/><text x="12.3800%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.46%)</title><rect x="12.6710%" y="101" width="0.4610%" height="15" fill="rgb(240,137,35)" fg:x="1649" fg:w="60"/><text x="12.9639%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.65%)</title><rect x="12.6710%" y="117" width="0.6531%" height="15" fill="rgb(248,113,8)" fg:x="1649" fg:w="85"/><text x="12.9639%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="13.3241%" y="69" width="0.0692%" height="15" fill="rgb(244,213,49)" fg:x="1734" fg:w="9"/><text x="13.6171%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.23%)</title><rect x="13.3933%" y="53" width="0.2305%" height="15" fill="rgb(209,155,18)" fg:x="1743" fg:w="30"/><text x="13.6862%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.42%)</title><rect x="13.3933%" y="69" width="0.4226%" height="15" fill="rgb(242,111,24)" fg:x="1743" fg:w="55"/><text x="13.6862%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.88%)</title><rect x="13.3241%" y="85" width="0.8760%" height="15" fill="rgb(229,154,12)" fg:x="1734" fg:w="114"/><text x="13.6171%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 1.28%)</title><rect x="13.3241%" y="101" width="1.2832%" height="15" fill="rgb(220,190,30)" fg:x="1734" fg:w="167"/><text x="13.6171%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.32%)</title><rect x="13.3241%" y="117" width="1.3217%" height="15" fill="rgb(237,195,16)" fg:x="1734" fg:w="172"/><text x="13.6171%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 2.83%)</title><rect x="12.6710%" y="133" width="2.8277%" height="15" fill="rgb(234,138,27)" fg:x="1649" fg:w="368"/><text x="12.9639%" y="143.50">co..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 4.34%)</title><rect x="12.0870%" y="149" width="4.3415%" height="15" fill="rgb(225,18,9)" fg:x="1573" fg:w="565"/><text x="12.3800%" y="159.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.64%)</title><rect x="16.4285%" y="149" width="0.6378%" height="15" fill="rgb(235,176,21)" fg:x="2138" fg:w="83"/><text x="16.7214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="17.0662%" y="149" width="0.4226%" height="15" fill="rgb(229,122,7)" fg:x="2221" fg:w="55"/><text x="17.3592%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.50%)</title><rect x="17.4889%" y="149" width="0.4995%" height="15" fill="rgb(235,224,36)" fg:x="2276" fg:w="65"/><text x="17.7818%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.50%)</title><rect x="17.9883%" y="149" width="0.4995%" height="15" fill="rgb(213,107,20)" fg:x="2341" fg:w="65"/><text x="18.2813%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="18.4878%" y="117" width="0.0307%" height="15" fill="rgb(230,36,25)" fg:x="2406" fg:w="4"/><text x="18.7808%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 3.09%)</title><rect x="18.4878%" y="133" width="3.0890%" height="15" fill="rgb(207,105,28)" fg:x="2406" fg:w="402"/><text x="18.7808%" y="143.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="21.5768%" y="133" width="0.1229%" height="15" fill="rgb(228,183,22)" fg:x="2808" fg:w="16"/><text x="21.8697%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="21.6997%" y="117" width="0.5840%" height="15" fill="rgb(230,166,34)" fg:x="2824" fg:w="76"/><text x="21.9927%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.46%)</title><rect x="22.2837%" y="85" width="0.4610%" height="15" fill="rgb(240,9,39)" fg:x="2900" fg:w="60"/><text x="22.5767%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.65%)</title><rect x="22.2837%" y="101" width="0.6531%" height="15" fill="rgb(251,205,52)" fg:x="2900" fg:w="85"/><text x="22.5767%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="22.9368%" y="53" width="0.0692%" height="15" fill="rgb(234,65,19)" fg:x="2985" fg:w="9"/><text x="23.2298%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.23%)</title><rect x="23.0060%" y="37" width="0.2305%" height="15" fill="rgb(244,216,54)" fg:x="2994" fg:w="30"/><text x="23.2990%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.42%)</title><rect x="23.0060%" y="53" width="0.4226%" height="15" fill="rgb(238,144,21)" fg:x="2994" fg:w="55"/><text x="23.2990%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.88%)</title><rect x="22.9368%" y="69" width="0.8760%" height="15" fill="rgb(209,52,46)" fg:x="2985" fg:w="114"/><text x="23.2298%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 1.28%)</title><rect x="22.9368%" y="85" width="1.2832%" height="15" fill="rgb(218,157,31)" fg:x="2985" fg:w="167"/><text x="23.2298%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.32%)</title><rect x="22.9368%" y="101" width="1.3217%" height="15" fill="rgb(210,114,18)" fg:x="2985" fg:w="172"/><text x="23.2298%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 2.83%)</title><rect x="22.2837%" y="117" width="2.8277%" height="15" fill="rgb(249,21,25)" fg:x="2900" fg:w="368"/><text x="22.5767%" y="127.50">co..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 4.34%)</title><rect x="21.6997%" y="133" width="4.3415%" height="15" fill="rgb(241,179,42)" fg:x="2824" fg:w="565"/><text x="21.9927%" y="143.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.64%)</title><rect x="26.0412%" y="133" width="0.6378%" height="15" fill="rgb(252,106,43)" fg:x="3389" fg:w="83"/><text x="26.3342%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="26.6790%" y="133" width="0.4226%" height="15" fill="rgb(233,176,30)" fg:x="3472" fg:w="55"/><text x="26.9719%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.55%)</title><rect x="27.1016%" y="117" width="0.5456%" height="15" fill="rgb(212,13,50)" fg:x="3527" fg:w="71"/><text x="27.3946%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.69%)</title><rect x="27.6471%" y="117" width="0.6916%" height="15" fill="rgb(219,205,30)" fg:x="3598" fg:w="90"/><text x="27.9401%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.50%)</title><rect x="28.3387%" y="117" width="0.4995%" height="15" fill="rgb(226,104,36)" fg:x="3688" fg:w="65"/><text x="28.6317%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 2.19%)</title><rect x="27.1016%" y="133" width="2.1899%" height="15" fill="rgb(207,173,26)" fg:x="3527" fg:w="285"/><text x="27.3946%" y="143.50">&lt;..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.60%)</title><rect x="29.2915%" y="133" width="0.5994%" height="15" fill="rgb(213,162,27)" fg:x="3812" fg:w="78"/><text x="29.5845%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 12.96%)</title><rect x="18.4878%" y="149" width="12.9630%" height="15" fill="rgb(213,5,19)" fg:x="2406" fg:w="1687"/><text x="18.7808%" y="159.50">binread::binread..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.50%)</title><rect x="31.4507%" y="149" width="0.4995%" height="15" fill="rgb(228,77,15)" fg:x="4093" fg:w="65"/><text x="31.7437%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.10%)</title><rect x="31.9502%" y="149" width="0.0999%" height="15" fill="rgb(208,221,45)" fg:x="4158" fg:w="13"/><text x="32.2432%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.10%)</title><rect x="32.0501%" y="149" width="0.0999%" height="15" fill="rgb(207,110,1)" fg:x="4171" fg:w="13"/><text x="32.3431%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.05%)</title><rect x="32.1500%" y="149" width="0.0538%" height="15" fill="rgb(230,73,10)" fg:x="4184" fg:w="7"/><text x="32.4430%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.12%)</title><rect x="32.2038%" y="149" width="0.1153%" height="15" fill="rgb(221,113,37)" fg:x="4191" fg:w="15"/><text x="32.4967%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="32.3190%" y="133" width="0.5840%" height="15" fill="rgb(249,196,14)" fg:x="4206" fg:w="76"/><text x="32.6120%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 1.22%)</title><rect x="32.3190%" y="149" width="1.2218%" height="15" fill="rgb(238,3,34)" fg:x="4206" fg:w="159"/><text x="32.6120%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="33.5408%" y="117" width="0.5840%" height="15" fill="rgb(250,45,25)" fg:x="4365" fg:w="76"/><text x="33.8338%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.85%)</title><rect x="33.5408%" y="133" width="0.8452%" height="15" fill="rgb(208,45,44)" fg:x="4365" fg:w="110"/><text x="33.8338%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 1.38%)</title><rect x="33.5408%" y="149" width="1.3831%" height="15" fill="rgb(248,74,18)" fg:x="4365" fg:w="180"/><text x="33.8338%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="34.9239%" y="149" width="0.5840%" height="15" fill="rgb(253,115,9)" fg:x="4545" fg:w="76"/><text x="35.2169%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="35.5079%" y="149" width="0.6224%" height="15" fill="rgb(242,6,3)" fg:x="4621" fg:w="81"/><text x="35.8009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="36.1303%" y="149" width="0.5840%" height="15" fill="rgb(232,159,20)" fg:x="4702" fg:w="76"/><text x="36.4233%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="36.7143%" y="149" width="0.5840%" height="15" fill="rgb(222,202,29)" fg:x="4778" fg:w="76"/><text x="37.0073%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.02%)</title><rect x="37.2983%" y="149" width="0.0154%" height="15" fill="rgb(223,14,16)" fg:x="4854" fg:w="2"/><text x="37.5913%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="37.3137%" y="149" width="0.6224%" height="15" fill="rgb(226,110,42)" fg:x="4856" fg:w="81"/><text x="37.6066%" y="159.50"></text></g><g><title>memcpy (399 instructions, 3.07%)</title><rect x="37.9361%" y="149" width="3.0659%" height="15" fill="rgb(221,28,14)" fg:x="4937" fg:w="399"/><text x="38.2290%" y="159.50">me..</text></g><g><title>memcpy (399 instructions, 3.07%)</title><rect x="41.0020%" y="149" width="3.0659%" height="15" fill="rgb(219,26,28)" fg:x="5336" fg:w="399"/><text x="41.2950%" y="159.50">me..</text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 49.55%)</title><rect x="1.8980%" y="165" width="49.5466%" height="15" fill="rgb(246,194,20)" fg:x="247" fg:w="6448"/><text x="2.1909%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 2.72%)</title><rect x="51.4446%" y="165" width="2.7201%" height="15" fill="rgb(254,62,48)" fg:x="6695" fg:w="354"/><text x="51.7376%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="54.1647%" y="149" width="0.0922%" height="15" fill="rgb(207,25,42)" fg:x="7049" fg:w="12"/><text x="54.4577%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.38%)</title><rect x="54.1647%" y="165" width="0.3842%" height="15" fill="rgb(232,222,43)" fg:x="7049" fg:w="50"/><text x="54.4577%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="54.5489%" y="149" width="0.4226%" height="15" fill="rgb(254,69,18)" fg:x="7099" fg:w="55"/><text x="54.8419%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (196 instructions, 1.51%)</title><rect x="54.5489%" y="165" width="1.5061%" height="15" fill="rgb(240,3,10)" fg:x="7099" fg:w="196"/><text x="54.8419%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="56.0550%" y="149" width="0.0922%" height="15" fill="rgb(248,27,49)" fg:x="7295" fg:w="12"/><text x="56.3480%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="56.1472%" y="133" width="0.4073%" height="15" fill="rgb(234,195,21)" fg:x="7307" fg:w="53"/><text x="56.4402%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.68%)</title><rect x="56.5545%" y="133" width="0.6762%" height="15" fill="rgb(224,124,50)" fg:x="7360" fg:w="88"/><text x="56.8474%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.24%)</title><rect x="57.2307%" y="133" width="1.2448%" height="15" fill="rgb(212,34,26)" fg:x="7448" fg:w="162"/><text x="57.5236%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 4.15%)</title><rect x="56.1472%" y="149" width="4.1494%" height="15" fill="rgb(251,88,4)" fg:x="7307" fg:w="540"/><text x="56.4402%" y="159.50">core..</text></g><g><title>candid::types::internal::env_add (760 instructions, 5.84%)</title><rect x="56.0550%" y="165" width="5.8399%" height="15" fill="rgb(223,3,52)" fg:x="7295" fg:w="760"/><text x="56.3480%" y="175.50">candid..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="61.8949%" y="165" width="0.5840%" height="15" fill="rgb(214,3,2)" fg:x="8055" fg:w="76"/><text x="62.1879%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="62.4789%" y="149" width="0.0922%" height="15" fill="rgb(221,24,45)" fg:x="8131" fg:w="12"/><text x="62.7718%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="62.5711%" y="133" width="0.4073%" height="15" fill="rgb(227,64,47)" fg:x="8143" fg:w="53"/><text x="62.8640%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.68%)</title><rect x="62.9783%" y="133" width="0.6762%" height="15" fill="rgb(248,38,27)" fg:x="8196" fg:w="88"/><text x="63.2713%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.24%)</title><rect x="63.6545%" y="133" width="1.2448%" height="15" fill="rgb(243,128,28)" fg:x="8284" fg:w="162"/><text x="63.9475%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 4.15%)</title><rect x="62.5711%" y="149" width="4.1494%" height="15" fill="rgb(224,168,47)" fg:x="8143" fg:w="540"/><text x="62.8640%" y="159.50">core..</text></g><g><title>memcmp (68 instructions, 0.52%)</title><rect x="66.7205%" y="149" width="0.5225%" height="15" fill="rgb(208,188,19)" fg:x="8683" fg:w="68"/><text x="67.0134%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.62%)</title><rect x="67.2430%" y="133" width="0.6224%" height="15" fill="rgb(221,173,5)" fg:x="8751" fg:w="81"/><text x="67.5359%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.83%)</title><rect x="67.2430%" y="149" width="0.8299%" height="15" fill="rgb(222,123,9)" fg:x="8751" fg:w="108"/><text x="67.5359%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 6.88%)</title><rect x="62.4789%" y="165" width="6.8772%" height="15" fill="rgb(247,135,25)" fg:x="8131" fg:w="895"/><text x="62.7718%" y="175.50">candid:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.41%)</title><rect x="69.3561%" y="117" width="0.4073%" height="15" fill="rgb(253,187,17)" fg:x="9026" fg:w="53"/><text x="69.6490%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.61%)</title><rect x="69.3561%" y="133" width="0.6070%" height="15" fill="rgb(219,27,33)" fg:x="9026" fg:w="79"/><text x="69.6490%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 2.26%)</title><rect x="69.3561%" y="149" width="2.2591%" height="15" fill="rgb(249,139,26)" fg:x="9026" fg:w="294"/><text x="69.6490%" y="159.50">c..</text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.564 (15 instructions, 0.12%)</title><rect x="71.6152%" y="149" width="0.1153%" height="15" fill="rgb(224,149,45)" fg:x="9320" fg:w="15"/><text x="71.9082%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="71.7304%" y="149" width="0.0845%" height="15" fill="rgb(250,25,7)" fg:x="9335" fg:w="11"/><text x="72.0234%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 3.83%)</title><rect x="69.3561%" y="165" width="3.8266%" height="15" fill="rgb(233,92,0)" fg:x="9026" fg:w="498"/><text x="69.6490%" y="175.50">can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.35%)</title><rect x="73.1827%" y="165" width="0.3458%" height="15" fill="rgb(229,183,34)" fg:x="9524" fg:w="45"/><text x="73.4757%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.92%)</title><rect x="73.5285%" y="149" width="0.9221%" height="15" fill="rgb(244,114,27)" fg:x="9569" fg:w="120"/><text x="73.8215%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.95%)</title><rect x="74.6581%" y="149" width="0.9451%" height="15" fill="rgb(233,116,6)" fg:x="9716" fg:w="123"/><text x="74.9510%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 2.28%)</title><rect x="73.5285%" y="165" width="2.2822%" height="15" fill="rgb(207,205,22)" fg:x="9569" fg:w="297"/><text x="73.8215%" y="175.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.22%)</title><rect x="75.8107%" y="149" width="0.2152%" height="15" fill="rgb(250,115,34)" fg:x="9866" fg:w="28"/><text x="76.1036%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2489 (15 instructions, 0.12%)</title><rect x="76.0258%" y="149" width="0.1153%" height="15" fill="rgb(224,132,36)" fg:x="9894" fg:w="15"/><text x="76.3188%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2489 (15 instructions, 0.12%)</title><rect x="76.1411%" y="149" width="0.1153%" height="15" fill="rgb(210,227,15)" fg:x="9909" fg:w="15"/><text x="76.4340%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 1.04%)</title><rect x="75.8107%" y="165" width="1.0373%" height="15" fill="rgb(252,144,49)" fg:x="9866" fg:w="135"/><text x="76.1036%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="76.8480%" y="165" width="0.0845%" height="15" fill="rgb(223,58,6)" fg:x="10001" fg:w="11"/><text x="77.1410%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="76.9325%" y="165" width="0.0845%" height="15" fill="rgb(211,222,20)" fg:x="10012" fg:w="11"/><text x="77.2255%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="77.0171%" y="165" width="0.0845%" height="15" fill="rgb(220,50,9)" fg:x="10023" fg:w="11"/><text x="77.3100%" y="175.50"></text></g><g><title>memcpy (410 instructions, 3.15%)</title><rect x="77.1016%" y="165" width="3.1505%" height="15" fill="rgb(243,6,33)" fg:x="10034" fg:w="410"/><text x="77.3946%" y="175.50">me..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.12%)</title><rect x="80.2520%" y="133" width="0.1153%" height="15" fill="rgb(233,122,14)" fg:x="10444" fg:w="15"/><text x="80.5450%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.29%)</title><rect x="80.3673%" y="133" width="1.2909%" height="15" fill="rgb(243,43,38)" fg:x="10459" fg:w="168"/><text x="80.6603%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.48%)</title><rect x="81.6582%" y="101" width="0.4841%" height="15" fill="rgb(247,6,52)" fg:x="10627" fg:w="63"/><text x="81.9512%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 1.25%)</title><rect x="81.6582%" y="117" width="1.2525%" height="15" fill="rgb(222,51,37)" fg:x="10627" fg:w="163"/><text x="81.9512%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 1.46%)</title><rect x="81.6582%" y="133" width="1.4600%" height="15" fill="rgb(214,117,19)" fg:x="10627" fg:w="190"/><text x="81.9512%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="83.1182%" y="133" width="0.0845%" height="15" fill="rgb(221,3,24)" fg:x="10817" fg:w="11"/><text x="83.4111%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 3.26%)</title><rect x="80.2520%" y="149" width="3.2580%" height="15" fill="rgb(238,74,36)" fg:x="10444" fg:w="424"/><text x="80.5450%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (461 instructions, 3.54%)</title><rect x="80.2520%" y="165" width="3.5423%" height="15" fill="rgb(205,11,11)" fg:x="10444" fg:w="461"/><text x="80.5450%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="83.7944%" y="149" width="0.4226%" height="15" fill="rgb(252,178,39)" fg:x="10905" fg:w="55"/><text x="84.0873%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.48%)</title><rect x="84.2170%" y="149" width="0.4841%" height="15" fill="rgb(235,189,0)" fg:x="10960" fg:w="63"/><text x="84.5100%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 1.53%)</title><rect x="83.7944%" y="165" width="1.5291%" height="15" fill="rgb(242,151,41)" fg:x="10905" fg:w="199"/><text x="84.0873%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,316 instructions, 86.95%)</title><rect x="1.3140%" y="181" width="86.9525%" height="15" fill="rgb(250,107,0)" fg:x="171" fg:w="11316"/><text x="1.6069%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="88.2665%" y="149" width="0.0922%" height="15" fill="rgb(236,80,19)" fg:x="11487" fg:w="12"/><text x="88.5595%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.77%)</title><rect x="88.3587%" y="133" width="0.7684%" height="15" fill="rgb(244,39,53)" fg:x="11499" fg:w="100"/><text x="88.6517%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.98%)</title><rect x="88.3587%" y="149" width="0.9759%" height="15" fill="rgb(217,86,38)" fg:x="11499" fg:w="127"/><text x="88.6517%" y="159.50"></text></g><g><title>memset (136 instructions, 1.05%)</title><rect x="89.3346%" y="149" width="1.0450%" height="15" fill="rgb(247,27,48)" fg:x="11626" fg:w="136"/><text x="89.6275%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (433 instructions, 3.33%)</title><rect x="88.2665%" y="165" width="3.3272%" height="15" fill="rgb(213,202,38)" fg:x="11487" fg:w="433"/><text x="88.5595%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.25%)</title><rect x="91.5937%" y="149" width="0.2459%" height="15" fill="rgb(253,69,2)" fg:x="11920" fg:w="32"/><text x="91.8866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.58%)</title><rect x="91.8396%" y="101" width="0.5840%" height="15" fill="rgb(210,132,46)" fg:x="11952" fg:w="76"/><text x="92.1325%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.85%)</title><rect x="91.8396%" y="117" width="0.8452%" height="15" fill="rgb(219,57,7)" fg:x="11952" fg:w="110"/><text x="92.1325%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 1.36%)</title><rect x="91.8396%" y="133" width="1.3601%" height="15" fill="rgb(235,202,21)" fg:x="11952" fg:w="177"/><text x="92.1325%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="93.1996%" y="133" width="0.0845%" height="15" fill="rgb(242,63,18)" fg:x="12129" fg:w="11"/><text x="93.4926%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="93.2842%" y="133" width="0.0845%" height="15" fill="rgb(214,155,20)" fg:x="12140" fg:w="11"/><text x="93.5771%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 2.77%)</title><rect x="91.8396%" y="149" width="2.7739%" height="15" fill="rgb(228,122,32)" fg:x="11952" fg:w="361"/><text x="92.1325%" y="159.50">ca..</text></g><g><title>std::io::Write::write_all (30 instructions, 0.23%)</title><rect x="94.6135%" y="149" width="0.2305%" height="15" fill="rgb(233,78,53)" fg:x="12313" fg:w="30"/><text x="94.9065%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.04%)</title><rect x="94.8440%" y="149" width="0.0384%" height="15" fill="rgb(236,61,4)" fg:x="12343" fg:w="5"/><text x="95.1370%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 3.81%)</title><rect x="91.5937%" y="165" width="3.8113%" height="15" fill="rgb(226,225,27)" fg:x="11920" fg:w="496"/><text x="91.8866%" y="175.50">can..</text></g><g><title>core::ptr::drop_in_place&lt;candid::types::type_env::TypeEnv&gt; (4 instructions, 0.03%)</title><rect x="95.4049%" y="165" width="0.0307%" height="15" fill="rgb(235,198,14)" fg:x="12416" fg:w="4"/><text x="95.6979%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.42%)</title><rect x="95.4357%" y="165" width="0.4226%" height="15" fill="rgb(246,137,17)" fg:x="12420" fg:w="55"/><text x="95.7287%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,062 instructions, 8.16%)</title><rect x="88.2665%" y="181" width="8.1604%" height="15" fill="rgb(215,116,33)" fg:x="11487" fg:w="1062"/><text x="88.5595%" y="191.50">ic_cdk::a..</text></g><g><title>vector::batch_get_5_::{{closure}} (12,408 instructions, 95.34%)</title><rect x="1.3140%" y="197" width="95.3435%" height="15" fill="rgb(210,98,22)" fg:x="171" fg:w="12408"/><text x="1.6069%" y="207.50">vector::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.09%)</title><rect x="96.6574%" y="197" width="0.0922%" height="15" fill="rgb(231,224,7)" fg:x="12579" fg:w="12"/><text x="96.9504%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.42%)</title><rect x="97.3721%" y="181" width="0.4226%" height="15" fill="rgb(244,112,39)" fg:x="12672" fg:w="55"/><text x="97.6650%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.48%)</title><rect x="97.7947%" y="181" width="0.4841%" height="15" fill="rgb(247,178,3)" fg:x="12727" fg:w="63"/><text x="98.0877%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 2.50%)</title><rect x="96.7497%" y="197" width="2.4973%" height="15" fill="rgb(240,0,46)" fg:x="12591" fg:w="325"/><text x="97.0426%" y="207.50">d..</text></g><g><title>all (13,014 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,18,21)" fg:x="0" fg:w="13014"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (13,014 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,215,38)" fg:x="0" fg:w="13014"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>