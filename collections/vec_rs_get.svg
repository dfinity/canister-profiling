<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17298"><g><title>ic_cdk::setup (24 instructions, 0.14%)</title><rect x="0.0000%" y="197" width="0.1387%" height="15" fill="rgb(222,131,1)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="0.1387%" y="197" width="0.4798%" height="15" fill="rgb(246,136,1)" fg:x="24" fg:w="83"/><text x="0.4317%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="0.6186%" y="197" width="0.4798%" height="15" fill="rgb(251,99,11)" fg:x="107" fg:w="83"/><text x="0.9115%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="1.0984%" y="165" width="0.4798%" height="15" fill="rgb(254,63,34)" fg:x="190" fg:w="83"/><text x="1.3914%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="1.5782%" y="149" width="0.4740%" height="15" fill="rgb(225,3,53)" fg:x="273" fg:w="82"/><text x="1.8712%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="2.0523%" y="133" width="0.0347%" height="15" fill="rgb(223,94,17)" fg:x="355" fg:w="6"/><text x="2.3452%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.54%)</title><rect x="2.0523%" y="149" width="2.5436%" height="15" fill="rgb(232,122,33)" fg:x="355" fg:w="440"/><text x="2.3452%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="4.5959%" y="149" width="0.5492%" height="15" fill="rgb(205,91,18)" fg:x="795" fg:w="95"/><text x="4.8889%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.1451%" y="149" width="0.3469%" height="15" fill="rgb(226,22,12)" fg:x="890" fg:w="60"/><text x="5.4381%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.4920%" y="149" width="0.3469%" height="15" fill="rgb(231,38,25)" fg:x="950" fg:w="60"/><text x="5.7849%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="5.8388%" y="149" width="0.3469%" height="15" fill="rgb(210,228,40)" fg:x="1010" fg:w="60"/><text x="6.1318%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.35%)</title><rect x="6.1857%" y="149" width="0.3469%" height="15" fill="rgb(210,40,33)" fg:x="1070" fg:w="60"/><text x="6.4787%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="6.5325%" y="149" width="0.4740%" height="15" fill="rgb(214,88,31)" fg:x="1130" fg:w="82"/><text x="6.8255%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.40%)</title><rect x="7.0066%" y="149" width="0.4047%" height="15" fill="rgb(209,181,7)" fg:x="1212" fg:w="70"/><text x="7.2996%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="7.4113%" y="133" width="0.0347%" height="15" fill="rgb(207,133,40)" fg:x="1282" fg:w="6"/><text x="7.7042%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.54%)</title><rect x="7.4113%" y="149" width="2.5436%" height="15" fill="rgb(236,137,49)" fg:x="1282" fg:w="440"/><text x="7.7042%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="9.9549%" y="149" width="0.1098%" height="15" fill="rgb(220,205,8)" fg:x="1722" fg:w="19"/><text x="10.2479%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="10.0647%" y="133" width="0.4798%" height="15" fill="rgb(234,199,51)" fg:x="1741" fg:w="83"/><text x="10.3577%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="10.5446%" y="101" width="0.3873%" height="15" fill="rgb(205,53,9)" fg:x="1824" fg:w="67"/><text x="10.8375%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.57%)</title><rect x="10.5446%" y="117" width="0.5665%" height="15" fill="rgb(237,20,45)" fg:x="1824" fg:w="98"/><text x="10.8375%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="11.1111%" y="69" width="0.0636%" height="15" fill="rgb(223,107,1)" fg:x="1922" fg:w="11"/><text x="11.4041%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="11.1747%" y="53" width="0.2023%" height="15" fill="rgb(219,31,13)" fg:x="1933" fg:w="35"/><text x="11.4677%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.38%)</title><rect x="11.1747%" y="69" width="0.3815%" height="15" fill="rgb(218,57,27)" fg:x="1933" fg:w="66"/><text x="11.4677%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.85%)</title><rect x="11.1111%" y="85" width="0.8498%" height="15" fill="rgb(246,43,25)" fg:x="1922" fg:w="147"/><text x="11.4041%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 1.23%)</title><rect x="11.1111%" y="101" width="1.2256%" height="15" fill="rgb(237,66,31)" fg:x="1922" fg:w="212"/><text x="11.4041%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 1.28%)</title><rect x="11.1111%" y="117" width="1.2834%" height="15" fill="rgb(233,164,9)" fg:x="1922" fg:w="222"/><text x="11.4041%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 2.67%)</title><rect x="10.5446%" y="133" width="2.6650%" height="15" fill="rgb(251,138,46)" fg:x="1824" fg:w="461"/><text x="10.8375%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 3.98%)</title><rect x="10.0647%" y="149" width="3.9831%" height="15" fill="rgb(253,181,7)" fg:x="1741" fg:w="689"/><text x="10.3577%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="14.0479%" y="149" width="0.5492%" height="15" fill="rgb(231,72,37)" fg:x="2430" fg:w="95"/><text x="14.3408%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="14.5971%" y="149" width="0.3469%" height="15" fill="rgb(240,157,24)" fg:x="2525" fg:w="60"/><text x="14.8900%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="14.9439%" y="149" width="0.4394%" height="15" fill="rgb(247,213,2)" fg:x="2585" fg:w="76"/><text x="15.2369%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.40%)</title><rect x="15.3833%" y="149" width="0.4047%" height="15" fill="rgb(210,174,15)" fg:x="2661" fg:w="70"/><text x="15.6763%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="15.7880%" y="117" width="0.0347%" height="15" fill="rgb(213,220,23)" fg:x="2731" fg:w="6"/><text x="16.0809%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.54%)</title><rect x="15.7880%" y="133" width="2.5436%" height="15" fill="rgb(218,135,11)" fg:x="2731" fg:w="440"/><text x="16.0809%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="18.3316%" y="133" width="0.1098%" height="15" fill="rgb(208,171,23)" fg:x="3171" fg:w="19"/><text x="18.6246%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="18.4414%" y="117" width="0.4798%" height="15" fill="rgb(248,107,51)" fg:x="3190" fg:w="83"/><text x="18.7344%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.39%)</title><rect x="18.9213%" y="85" width="0.3873%" height="15" fill="rgb(250,29,5)" fg:x="3273" fg:w="67"/><text x="19.2142%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.57%)</title><rect x="18.9213%" y="101" width="0.5665%" height="15" fill="rgb(244,105,45)" fg:x="3273" fg:w="98"/><text x="19.2142%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="19.4878%" y="53" width="0.0636%" height="15" fill="rgb(236,154,53)" fg:x="3371" fg:w="11"/><text x="19.7808%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="19.5514%" y="37" width="0.2023%" height="15" fill="rgb(250,95,12)" fg:x="3382" fg:w="35"/><text x="19.8444%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.38%)</title><rect x="19.5514%" y="53" width="0.3815%" height="15" fill="rgb(207,196,39)" fg:x="3382" fg:w="66"/><text x="19.8444%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.85%)</title><rect x="19.4878%" y="69" width="0.8498%" height="15" fill="rgb(242,136,46)" fg:x="3371" fg:w="147"/><text x="19.7808%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 1.23%)</title><rect x="19.4878%" y="85" width="1.2256%" height="15" fill="rgb(254,64,14)" fg:x="3371" fg:w="212"/><text x="19.7808%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 1.28%)</title><rect x="19.4878%" y="101" width="1.2834%" height="15" fill="rgb(251,95,12)" fg:x="3371" fg:w="222"/><text x="19.7808%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 2.67%)</title><rect x="18.9213%" y="117" width="2.6650%" height="15" fill="rgb(221,155,19)" fg:x="3273" fg:w="461"/><text x="19.2142%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 3.98%)</title><rect x="18.4414%" y="133" width="3.9831%" height="15" fill="rgb(247,49,39)" fg:x="3190" fg:w="689"/><text x="18.7344%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.55%)</title><rect x="22.4246%" y="133" width="0.5492%" height="15" fill="rgb(234,209,23)" fg:x="3879" fg:w="95"/><text x="22.7175%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="22.9738%" y="133" width="0.3469%" height="15" fill="rgb(222,107,36)" fg:x="3974" fg:w="60"/><text x="23.2667%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.47%)</title><rect x="23.3206%" y="117" width="0.4740%" height="15" fill="rgb(211,58,22)" fg:x="4034" fg:w="82"/><text x="23.6136%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.55%)</title><rect x="23.7947%" y="117" width="0.5492%" height="15" fill="rgb(213,214,39)" fg:x="4116" fg:w="95"/><text x="24.0876%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="24.3439%" y="117" width="0.4394%" height="15" fill="rgb(248,27,31)" fg:x="4211" fg:w="76"/><text x="24.6368%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.91%)</title><rect x="23.3206%" y="133" width="1.9077%" height="15" fill="rgb(219,100,32)" fg:x="4034" fg:w="330"/><text x="23.6136%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="25.2284%" y="133" width="0.4740%" height="15" fill="rgb(253,81,44)" fg:x="4364" fg:w="82"/><text x="25.5213%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 11.33%)</title><rect x="15.7880%" y="149" width="11.3308%" height="15" fill="rgb(242,125,39)" fg:x="2731" fg:w="1960"/><text x="16.0809%" y="159.50">binread::binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.44%)</title><rect x="27.1187%" y="149" width="0.4394%" height="15" fill="rgb(228,0,33)" fg:x="4691" fg:w="76"/><text x="27.4117%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.5581%" y="149" width="0.0867%" height="15" fill="rgb(251,175,21)" fg:x="4767" fg:w="15"/><text x="27.8511%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="27.6448%" y="149" width="0.0867%" height="15" fill="rgb(222,120,49)" fg:x="4782" fg:w="15"/><text x="27.9378%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.05%)</title><rect x="27.7315%" y="149" width="0.0520%" height="15" fill="rgb(253,7,12)" fg:x="4797" fg:w="9"/><text x="28.0245%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.10%)</title><rect x="27.7836%" y="149" width="0.1041%" height="15" fill="rgb(205,127,16)" fg:x="4806" fg:w="18"/><text x="28.0765%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="27.8876%" y="133" width="0.4798%" height="15" fill="rgb(224,129,26)" fg:x="4824" fg:w="83"/><text x="28.1806%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 1.03%)</title><rect x="27.8876%" y="149" width="1.0348%" height="15" fill="rgb(243,165,43)" fg:x="4824" fg:w="179"/><text x="28.1806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="28.9224%" y="117" width="0.4798%" height="15" fill="rgb(224,96,1)" fg:x="5003" fg:w="83"/><text x="29.2154%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.73%)</title><rect x="28.9224%" y="133" width="0.7284%" height="15" fill="rgb(209,149,5)" fg:x="5003" fg:w="126"/><text x="29.2154%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 1.20%)</title><rect x="28.9224%" y="149" width="1.2025%" height="15" fill="rgb(223,18,42)" fg:x="5003" fg:w="208"/><text x="29.2154%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="30.1249%" y="149" width="0.4798%" height="15" fill="rgb(246,50,53)" fg:x="5211" fg:w="83"/><text x="30.4178%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.50%)</title><rect x="30.6047%" y="149" width="0.4972%" height="15" fill="rgb(230,212,10)" fg:x="5294" fg:w="86"/><text x="30.8977%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="31.1019%" y="149" width="0.4798%" height="15" fill="rgb(233,61,49)" fg:x="5380" fg:w="83"/><text x="31.3948%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="31.5817%" y="149" width="0.4798%" height="15" fill="rgb(221,225,39)" fg:x="5463" fg:w="83"/><text x="31.8747%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="32.0615%" y="149" width="0.0231%" height="15" fill="rgb(226,105,15)" fg:x="5546" fg:w="4"/><text x="32.3545%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.50%)</title><rect x="32.0846%" y="149" width="0.4972%" height="15" fill="rgb(244,221,45)" fg:x="5550" fg:w="86"/><text x="32.3776%" y="159.50"></text></g><g><title>memcpy (428 instructions, 2.47%)</title><rect x="32.5818%" y="149" width="2.4743%" height="15" fill="rgb(217,154,11)" fg:x="5636" fg:w="428"/><text x="32.8748%" y="159.50">m..</text></g><g><title>memcpy (428 instructions, 2.47%)</title><rect x="35.0561%" y="149" width="2.4743%" height="15" fill="rgb(208,104,24)" fg:x="6064" fg:w="428"/><text x="35.3490%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (7,365 instructions, 42.58%)</title><rect x="1.5782%" y="165" width="42.5772%" height="15" fill="rgb(230,152,27)" fg:x="273" fg:w="7365"/><text x="1.8712%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 2.20%)</title><rect x="44.1554%" y="165" width="2.1968%" height="15" fill="rgb(253,49,45)" fg:x="7638" fg:w="380"/><text x="44.4484%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.08%)</title><rect x="46.3522%" y="149" width="0.0809%" height="15" fill="rgb(237,63,10)" fg:x="8018" fg:w="14"/><text x="46.6451%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.36%)</title><rect x="46.3522%" y="165" width="0.3642%" height="15" fill="rgb(244,1,9)" fg:x="8018" fg:w="63"/><text x="46.6451%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.36%)</title><rect x="46.7164%" y="149" width="0.3584%" height="15" fill="rgb(226,182,14)" fg:x="8081" fg:w="62"/><text x="47.0094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (220 instructions, 1.27%)</title><rect x="46.7164%" y="165" width="1.2718%" height="15" fill="rgb(220,192,20)" fg:x="8081" fg:w="220"/><text x="47.0094%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.08%)</title><rect x="47.9882%" y="149" width="0.0809%" height="15" fill="rgb(242,174,0)" fg:x="8301" fg:w="14"/><text x="48.2812%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="48.0691%" y="133" width="0.3411%" height="15" fill="rgb(223,24,12)" fg:x="8315" fg:w="59"/><text x="48.3621%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="48.4102%" y="133" width="0.5434%" height="15" fill="rgb(229,146,27)" fg:x="8374" fg:w="94"/><text x="48.7032%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="48.9536%" y="133" width="1.0001%" height="15" fill="rgb(207,29,38)" fg:x="8468" fg:w="173"/><text x="49.2466%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.35%)</title><rect x="48.0691%" y="149" width="3.3472%" height="15" fill="rgb(206,153,7)" fg:x="8315" fg:w="579"/><text x="48.3621%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (821 instructions, 4.75%)</title><rect x="47.9882%" y="165" width="4.7462%" height="15" fill="rgb(253,123,37)" fg:x="8301" fg:w="821"/><text x="48.2812%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="52.7344%" y="165" width="0.4798%" height="15" fill="rgb(223,76,1)" fg:x="9122" fg:w="83"/><text x="53.0274%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.08%)</title><rect x="53.2142%" y="149" width="0.0809%" height="15" fill="rgb(221,64,6)" fg:x="9205" fg:w="14"/><text x="53.5072%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="53.2952%" y="133" width="0.3411%" height="15" fill="rgb(220,148,21)" fg:x="9219" fg:w="59"/><text x="53.5881%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.54%)</title><rect x="53.6363%" y="133" width="0.5434%" height="15" fill="rgb(242,214,31)" fg:x="9278" fg:w="94"/><text x="53.9292%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 1.00%)</title><rect x="54.1797%" y="133" width="1.0001%" height="15" fill="rgb(206,197,54)" fg:x="9372" fg:w="173"/><text x="54.4726%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.35%)</title><rect x="53.2952%" y="149" width="3.3472%" height="15" fill="rgb(248,105,30)" fg:x="9219" fg:w="579"/><text x="53.5881%" y="159.50">co..</text></g><g><title>memcmp (77 instructions, 0.45%)</title><rect x="56.6424%" y="149" width="0.4451%" height="15" fill="rgb(254,75,3)" fg:x="9798" fg:w="77"/><text x="56.9354%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.50%)</title><rect x="57.0875%" y="133" width="0.4972%" height="15" fill="rgb(228,91,21)" fg:x="9875" fg:w="86"/><text x="57.3805%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.70%)</title><rect x="57.0875%" y="149" width="0.6995%" height="15" fill="rgb(210,92,49)" fg:x="9875" fg:w="121"/><text x="57.3805%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 5.70%)</title><rect x="53.2142%" y="165" width="5.7001%" height="15" fill="rgb(214,140,28)" fg:x="9205" fg:w="986"/><text x="53.5072%" y="175.50">candid..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.34%)</title><rect x="58.9143%" y="117" width="0.3411%" height="15" fill="rgb(229,95,1)" fg:x="10191" fg:w="59"/><text x="59.2073%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.54%)</title><rect x="58.9143%" y="133" width="0.5434%" height="15" fill="rgb(243,145,41)" fg:x="10191" fg:w="94"/><text x="59.2073%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 1.82%)</title><rect x="58.9143%" y="149" width="1.8210%" height="15" fill="rgb(243,24,41)" fg:x="10191" fg:w="315"/><text x="59.2073%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.330 (18 instructions, 0.10%)</title><rect x="60.7353%" y="149" width="0.1041%" height="15" fill="rgb(249,143,30)" fg:x="10506" fg:w="18"/><text x="61.0283%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="60.8394%" y="149" width="0.0752%" height="15" fill="rgb(243,170,10)" fg:x="10524" fg:w="13"/><text x="61.1324%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 3.19%)</title><rect x="58.9143%" y="165" width="3.1853%" height="15" fill="rgb(217,12,29)" fg:x="10191" fg:w="551"/><text x="59.2073%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.31%)</title><rect x="62.0997%" y="165" width="0.3064%" height="15" fill="rgb(207,52,25)" fg:x="10742" fg:w="53"/><text x="62.3926%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (130 instructions, 0.75%)</title><rect x="62.4061%" y="149" width="0.7515%" height="15" fill="rgb(254,25,28)" fg:x="10795" fg:w="130"/><text x="62.6990%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.76%)</title><rect x="63.3599%" y="149" width="0.7631%" height="15" fill="rgb(215,50,8)" fg:x="10960" fg:w="132"/><text x="63.6529%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (332 instructions, 1.92%)</title><rect x="62.4061%" y="165" width="1.9193%" height="15" fill="rgb(252,147,47)" fg:x="10795" fg:w="332"/><text x="62.6990%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.20%)</title><rect x="64.3254%" y="149" width="0.1966%" height="15" fill="rgb(211,199,32)" fg:x="11127" fg:w="34"/><text x="64.6183%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2094 (18 instructions, 0.10%)</title><rect x="64.5219%" y="149" width="0.1041%" height="15" fill="rgb(248,14,28)" fg:x="11161" fg:w="18"/><text x="64.8149%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2094 (18 instructions, 0.10%)</title><rect x="64.6260%" y="149" width="0.1041%" height="15" fill="rgb(208,216,47)" fg:x="11179" fg:w="18"/><text x="64.9189%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.98%)</title><rect x="64.3254%" y="165" width="0.9770%" height="15" fill="rgb(243,150,3)" fg:x="11127" fg:w="169"/><text x="64.6183%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.3023%" y="165" width="0.0752%" height="15" fill="rgb(224,109,44)" fg:x="11296" fg:w="13"/><text x="65.5953%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.3775%" y="165" width="0.0752%" height="15" fill="rgb(214,162,44)" fg:x="11309" fg:w="13"/><text x="65.6705%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.4527%" y="165" width="0.0752%" height="15" fill="rgb(247,152,23)" fg:x="11322" fg:w="13"/><text x="65.7456%" y="175.50"></text></g><g><title>memcpy (440 instructions, 2.54%)</title><rect x="65.5278%" y="165" width="2.5436%" height="15" fill="rgb(231,78,6)" fg:x="11335" fg:w="440"/><text x="65.8208%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.11%)</title><rect x="68.0715%" y="133" width="0.1098%" height="15" fill="rgb(223,50,6)" fg:x="11775" fg:w="19"/><text x="68.3644%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 1.05%)</title><rect x="68.1813%" y="133" width="1.0464%" height="15" fill="rgb(223,129,41)" fg:x="11794" fg:w="181"/><text x="68.4743%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.39%)</title><rect x="69.2277%" y="101" width="0.3873%" height="15" fill="rgb(231,196,41)" fg:x="11975" fg:w="67"/><text x="69.5206%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 1.05%)</title><rect x="69.2277%" y="117" width="1.0464%" height="15" fill="rgb(208,109,6)" fg:x="11975" fg:w="181"/><text x="69.5206%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 1.25%)</title><rect x="69.2277%" y="133" width="1.2487%" height="15" fill="rgb(238,148,30)" fg:x="11975" fg:w="216"/><text x="69.5206%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="70.4764%" y="133" width="0.0752%" height="15" fill="rgb(223,37,33)" fg:x="12191" fg:w="13"/><text x="70.7693%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (491 instructions, 2.84%)</title><rect x="68.0715%" y="149" width="2.8385%" height="15" fill="rgb(239,50,10)" fg:x="11775" fg:w="491"/><text x="68.3644%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (540 instructions, 3.12%)</title><rect x="68.0715%" y="165" width="3.1217%" height="15" fill="rgb(229,127,41)" fg:x="11775" fg:w="540"/><text x="68.3644%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.36%)</title><rect x="71.1932%" y="149" width="0.3584%" height="15" fill="rgb(235,129,50)" fg:x="12315" fg:w="62"/><text x="71.4862%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.39%)</title><rect x="71.5516%" y="149" width="0.3873%" height="15" fill="rgb(236,54,14)" fg:x="12377" fg:w="67"/><text x="71.8446%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 1.32%)</title><rect x="71.1932%" y="165" width="1.3181%" height="15" fill="rgb(221,107,22)" fg:x="12315" fg:w="228"/><text x="71.4862%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,823 instructions, 79.91%)</title><rect x="1.0984%" y="181" width="79.9110%" height="15" fill="rgb(216,110,34)" fg:x="190" fg:w="13823"/><text x="1.3914%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.08%)</title><rect x="81.0094%" y="149" width="0.0809%" height="15" fill="rgb(211,143,18)" fg:x="14013" fg:w="14"/><text x="81.3023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.63%)</title><rect x="81.0903%" y="133" width="0.6301%" height="15" fill="rgb(220,159,24)" fg:x="14027" fg:w="109"/><text x="81.3833%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 instructions, 0.83%)</title><rect x="81.0903%" y="149" width="0.8325%" height="15" fill="rgb(215,123,51)" fg:x="14027" fg:w="144"/><text x="81.3833%" y="159.50"></text></g><g><title>memset (152 instructions, 0.88%)</title><rect x="81.9228%" y="149" width="0.8787%" height="15" fill="rgb(237,200,16)" fg:x="14171" fg:w="152"/><text x="82.2157%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (490 instructions, 2.83%)</title><rect x="81.0094%" y="165" width="2.8327%" height="15" fill="rgb(249,43,9)" fg:x="14013" fg:w="490"/><text x="81.3023%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.99%)</title><rect x="83.8421%" y="149" width="2.9946%" height="15" fill="rgb(212,96,14)" fg:x="14503" fg:w="518"/><text x="84.1350%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.48%)</title><rect x="86.8366%" y="101" width="0.4798%" height="15" fill="rgb(246,54,11)" fg:x="15021" fg:w="83"/><text x="87.1296%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.73%)</title><rect x="86.8366%" y="117" width="0.7284%" height="15" fill="rgb(226,185,8)" fg:x="15021" fg:w="126"/><text x="87.1296%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 1.19%)</title><rect x="86.8366%" y="133" width="1.1851%" height="15" fill="rgb(232,207,4)" fg:x="15021" fg:w="205"/><text x="87.1296%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="88.0217%" y="133" width="0.0867%" height="15" fill="rgb(242,40,38)" fg:x="15226" fg:w="15"/><text x="88.3147%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="88.1085%" y="133" width="0.0867%" height="15" fill="rgb(223,98,2)" fg:x="15241" fg:w="15"/><text x="88.4014%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 2.45%)</title><rect x="86.8366%" y="149" width="2.4454%" height="15" fill="rgb(226,208,32)" fg:x="15021" fg:w="423"/><text x="87.1296%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.98%)</title><rect x="89.2820%" y="149" width="2.9830%" height="15" fill="rgb(248,228,35)" fg:x="15444" fg:w="516"/><text x="89.5750%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="92.2650%" y="149" width="0.0405%" height="15" fill="rgb(232,95,36)" fg:x="15960" fg:w="7"/><text x="92.5580%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 9.00%)</title><rect x="83.8421%" y="165" width="9.0010%" height="15" fill="rgb(248,50,46)" fg:x="14503" fg:w="1557"/><text x="84.1350%" y="175.50">candid::ser..</text></g><g><title>core::ptr::drop_in_place&lt;candid::types::type_env::TypeEnv&gt; (6 instructions, 0.03%)</title><rect x="92.8431%" y="165" width="0.0347%" height="15" fill="rgb(209,39,36)" fg:x="16060" fg:w="6"/><text x="93.1361%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.35%)</title><rect x="92.8778%" y="165" width="0.3469%" height="15" fill="rgb(223,27,53)" fg:x="16066" fg:w="60"/><text x="93.1708%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,719 instructions, 15.72%)</title><rect x="81.0094%" y="181" width="15.7186%" height="15" fill="rgb(244,147,51)" fg:x="14013" fg:w="2719"/><text x="81.3023%" y="191.50">ic_cdk::api::call::r..</text></g><g><title>vector::__canister_method_batch_get::{{closure}} (16,586 instructions, 95.88%)</title><rect x="1.0984%" y="197" width="95.8839%" height="15" fill="rgb(245,20,31)" fg:x="190" fg:w="16586"/><text x="1.3914%" y="207.50">vector::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.08%)</title><rect x="96.9823%" y="197" width="0.0809%" height="15" fill="rgb(240,89,33)" fg:x="16776" fg:w="14"/><text x="97.2753%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.36%)</title><rect x="97.5662%" y="181" width="0.3584%" height="15" fill="rgb(229,96,27)" fg:x="16877" fg:w="62"/><text x="97.8592%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.39%)</title><rect x="97.9246%" y="181" width="0.3873%" height="15" fill="rgb(243,97,28)" fg:x="16939" fg:w="67"/><text x="98.2176%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (363 instructions, 2.10%)</title><rect x="97.0690%" y="197" width="2.0985%" height="15" fill="rgb(213,191,36)" fg:x="16791" fg:w="363"/><text x="97.3620%" y="207.50">d..</text></g><g><title>all (17,298 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,49,24)" fg:x="0" fg:w="17298"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,298 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,30,52)" fg:x="0" fg:w="17298"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>