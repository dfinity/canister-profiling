<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="26650"><g><title>ic_cdk::setup (24 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0901%" height="15" fill="rgb(219,111,21)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="0.0901%" y="197" width="0.3077%" height="15" fill="rgb(236,164,20)" fg:x="24" fg:w="82"/><text x="0.3830%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="0.3977%" y="197" width="0.3077%" height="15" fill="rgb(220,92,13)" fg:x="106" fg:w="82"/><text x="0.6907%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="0.7054%" y="165" width="0.3077%" height="15" fill="rgb(231,2,47)" fg:x="188" fg:w="82"/><text x="0.9984%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="1.0131%" y="149" width="0.3077%" height="15" fill="rgb(228,92,53)" fg:x="270" fg:w="82"/><text x="1.3061%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.3208%" y="133" width="0.0225%" height="15" fill="rgb(232,23,3)" fg:x="352" fg:w="6"/><text x="1.6138%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="1.3208%" y="149" width="1.6623%" height="15" fill="rgb(213,228,39)" fg:x="352" fg:w="443"/><text x="1.6138%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="2.9831%" y="149" width="0.3565%" height="15" fill="rgb(227,65,38)" fg:x="795" fg:w="95"/><text x="3.2761%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.23%)</title><rect x="3.3396%" y="149" width="0.2251%" height="15" fill="rgb(219,146,22)" fg:x="890" fg:w="60"/><text x="3.6326%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.23%)</title><rect x="3.5647%" y="149" width="0.2251%" height="15" fill="rgb(226,157,32)" fg:x="950" fg:w="60"/><text x="3.8577%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.23%)</title><rect x="3.7899%" y="149" width="0.2251%" height="15" fill="rgb(246,65,5)" fg:x="1010" fg:w="60"/><text x="4.0828%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.23%)</title><rect x="4.0150%" y="149" width="0.2251%" height="15" fill="rgb(218,54,22)" fg:x="1070" fg:w="60"/><text x="4.3080%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="4.2402%" y="149" width="0.3077%" height="15" fill="rgb(247,29,31)" fg:x="1130" fg:w="82"/><text x="4.5331%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="4.5478%" y="149" width="0.2627%" height="15" fill="rgb(224,64,48)" fg:x="1212" fg:w="70"/><text x="4.8408%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="4.8105%" y="133" width="0.0225%" height="15" fill="rgb(248,48,46)" fg:x="1282" fg:w="6"/><text x="5.1035%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="4.8105%" y="149" width="1.6623%" height="15" fill="rgb(215,206,44)" fg:x="1282" fg:w="443"/><text x="5.1035%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="6.4728%" y="149" width="0.0713%" height="15" fill="rgb(223,24,30)" fg:x="1725" fg:w="19"/><text x="6.7658%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="6.5441%" y="133" width="0.3077%" height="15" fill="rgb(209,171,9)" fg:x="1744" fg:w="82"/><text x="6.8371%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="6.8518%" y="101" width="0.2514%" height="15" fill="rgb(237,195,13)" fg:x="1826" fg:w="67"/><text x="7.1448%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.36%)</title><rect x="6.8518%" y="117" width="0.3602%" height="15" fill="rgb(208,205,51)" fg:x="1826" fg:w="96"/><text x="7.1448%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="7.2120%" y="69" width="0.0413%" height="15" fill="rgb(251,93,27)" fg:x="1922" fg:w="11"/><text x="7.5050%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="7.2533%" y="53" width="0.1313%" height="15" fill="rgb(211,149,2)" fg:x="1933" fg:w="35"/><text x="7.5463%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.24%)</title><rect x="7.2533%" y="69" width="0.2402%" height="15" fill="rgb(224,94,49)" fg:x="1933" fg:w="64"/><text x="7.5463%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.54%)</title><rect x="7.2120%" y="85" width="0.5403%" height="15" fill="rgb(241,21,25)" fg:x="1922" fg:w="144"/><text x="7.5050%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.78%)</title><rect x="7.2120%" y="101" width="0.7842%" height="15" fill="rgb(254,209,34)" fg:x="1922" fg:w="209"/><text x="7.5050%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.82%)</title><rect x="7.2120%" y="117" width="0.8218%" height="15" fill="rgb(237,134,33)" fg:x="1922" fg:w="219"/><text x="7.5050%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.71%)</title><rect x="6.8518%" y="133" width="1.7148%" height="15" fill="rgb(236,169,42)" fg:x="1826" fg:w="457"/><text x="7.1448%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.54%)</title><rect x="6.5441%" y="149" width="2.5403%" height="15" fill="rgb(214,204,46)" fg:x="1744" fg:w="677"/><text x="6.8371%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="9.0844%" y="149" width="0.3565%" height="15" fill="rgb(245,95,47)" fg:x="2421" fg:w="95"/><text x="9.3774%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.23%)</title><rect x="9.4409%" y="149" width="0.2251%" height="15" fill="rgb(232,144,23)" fg:x="2516" fg:w="60"/><text x="9.7339%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.29%)</title><rect x="9.6660%" y="149" width="0.2852%" height="15" fill="rgb(219,165,35)" fg:x="2576" fg:w="76"/><text x="9.9590%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="9.9512%" y="149" width="0.2627%" height="15" fill="rgb(244,70,9)" fg:x="2652" fg:w="70"/><text x="10.2442%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.2139%" y="117" width="0.0225%" height="15" fill="rgb(209,74,12)" fg:x="2722" fg:w="6"/><text x="10.5069%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="10.2139%" y="133" width="1.6623%" height="15" fill="rgb(247,101,37)" fg:x="2722" fg:w="443"/><text x="10.5069%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="11.8762%" y="133" width="0.0713%" height="15" fill="rgb(254,54,17)" fg:x="3165" fg:w="19"/><text x="12.1691%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="11.9475%" y="117" width="0.3077%" height="15" fill="rgb(214,174,28)" fg:x="3184" fg:w="82"/><text x="12.2404%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="12.2552%" y="85" width="0.2514%" height="15" fill="rgb(253,132,49)" fg:x="3266" fg:w="67"/><text x="12.5481%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.36%)</title><rect x="12.2552%" y="101" width="0.3602%" height="15" fill="rgb(245,88,25)" fg:x="3266" fg:w="96"/><text x="12.5481%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="12.6154%" y="53" width="0.0413%" height="15" fill="rgb(219,30,35)" fg:x="3362" fg:w="11"/><text x="12.9084%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="12.6567%" y="37" width="0.1313%" height="15" fill="rgb(228,16,2)" fg:x="3373" fg:w="35"/><text x="12.9496%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.24%)</title><rect x="12.6567%" y="53" width="0.2402%" height="15" fill="rgb(236,2,51)" fg:x="3373" fg:w="64"/><text x="12.9496%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.54%)</title><rect x="12.6154%" y="69" width="0.5403%" height="15" fill="rgb(247,25,51)" fg:x="3362" fg:w="144"/><text x="12.9084%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.78%)</title><rect x="12.6154%" y="85" width="0.7842%" height="15" fill="rgb(218,206,45)" fg:x="3362" fg:w="209"/><text x="12.9084%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.82%)</title><rect x="12.6154%" y="101" width="0.8218%" height="15" fill="rgb(210,67,9)" fg:x="3362" fg:w="219"/><text x="12.9084%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.71%)</title><rect x="12.2552%" y="117" width="1.7148%" height="15" fill="rgb(233,65,47)" fg:x="3266" fg:w="457"/><text x="12.5481%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.54%)</title><rect x="11.9475%" y="133" width="2.5403%" height="15" fill="rgb(253,27,8)" fg:x="3184" fg:w="677"/><text x="12.2404%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="14.4878%" y="133" width="0.3565%" height="15" fill="rgb(251,130,23)" fg:x="3861" fg:w="95"/><text x="14.7808%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.23%)</title><rect x="14.8443%" y="133" width="0.2251%" height="15" fill="rgb(224,85,53)" fg:x="3956" fg:w="60"/><text x="15.1372%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="15.0694%" y="117" width="0.3077%" height="15" fill="rgb(232,149,16)" fg:x="4016" fg:w="82"/><text x="15.3624%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.36%)</title><rect x="15.3771%" y="117" width="0.3565%" height="15" fill="rgb(218,90,16)" fg:x="4098" fg:w="95"/><text x="15.6701%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.29%)</title><rect x="15.7336%" y="117" width="0.2852%" height="15" fill="rgb(244,21,53)" fg:x="4193" fg:w="76"/><text x="16.0266%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.24%)</title><rect x="15.0694%" y="133" width="1.2383%" height="15" fill="rgb(233,222,49)" fg:x="4016" fg:w="330"/><text x="15.3624%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="16.3077%" y="133" width="0.3077%" height="15" fill="rgb(212,112,10)" fg:x="4346" fg:w="82"/><text x="16.6007%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 7.30%)</title><rect x="10.2139%" y="149" width="7.3021%" height="15" fill="rgb(240,212,54)" fg:x="2722" fg:w="1946"/><text x="10.5069%" y="159.50">binread:..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.29%)</title><rect x="17.5159%" y="149" width="0.2852%" height="15" fill="rgb(218,67,17)" fg:x="4668" fg:w="76"/><text x="17.8089%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.8011%" y="149" width="0.0563%" height="15" fill="rgb(211,202,28)" fg:x="4744" fg:w="15"/><text x="18.0941%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.8574%" y="149" width="0.0563%" height="15" fill="rgb(248,96,33)" fg:x="4759" fg:w="15"/><text x="18.1504%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.9137%" y="149" width="0.0563%" height="15" fill="rgb(228,153,36)" fg:x="4774" fg:w="15"/><text x="18.2067%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="17.9700%" y="149" width="0.0263%" height="15" fill="rgb(239,65,40)" fg:x="4789" fg:w="7"/><text x="18.2629%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="17.9962%" y="133" width="0.3077%" height="15" fill="rgb(227,43,12)" fg:x="4796" fg:w="82"/><text x="18.2892%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.67%)</title><rect x="17.9962%" y="149" width="0.6679%" height="15" fill="rgb(232,98,37)" fg:x="4796" fg:w="178"/><text x="18.2892%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="18.6642%" y="117" width="0.3077%" height="15" fill="rgb(231,43,29)" fg:x="4974" fg:w="82"/><text x="18.9571%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.49%)</title><rect x="18.6642%" y="133" width="0.4878%" height="15" fill="rgb(218,34,44)" fg:x="4974" fg:w="130"/><text x="18.9571%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.81%)</title><rect x="18.6642%" y="149" width="0.8068%" height="15" fill="rgb(226,130,39)" fg:x="4974" fg:w="215"/><text x="18.9571%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="19.4709%" y="149" width="0.3077%" height="15" fill="rgb(241,207,20)" fg:x="5189" fg:w="82"/><text x="19.7639%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="19.7786%" y="149" width="0.3340%" height="15" fill="rgb(240,100,41)" fg:x="5271" fg:w="89"/><text x="20.0716%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="20.1126%" y="149" width="0.3077%" height="15" fill="rgb(212,56,9)" fg:x="5360" fg:w="82"/><text x="20.4055%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="20.4203%" y="149" width="0.3077%" height="15" fill="rgb(211,131,0)" fg:x="5442" fg:w="82"/><text x="20.7132%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="20.7280%" y="149" width="0.0150%" height="15" fill="rgb(227,138,53)" fg:x="5524" fg:w="4"/><text x="21.0209%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="20.7430%" y="149" width="0.3340%" height="15" fill="rgb(217,100,39)" fg:x="5528" fg:w="89"/><text x="21.0359%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.47%)</title><rect x="21.0769%" y="149" width="1.4709%" height="15" fill="rgb(207,165,36)" fg:x="5617" fg:w="392"/><text x="21.3699%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.47%)</title><rect x="22.5478%" y="149" width="1.4709%" height="15" fill="rgb(241,46,36)" fg:x="6009" fg:w="392"/><text x="22.8408%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.89%)</title><rect x="24.0188%" y="149" width="1.8912%" height="15" fill="rgb(227,174,17)" fg:x="6401" fg:w="504"/><text x="24.3117%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 29.43%)</title><rect x="1.0131%" y="165" width="29.4334%" height="15" fill="rgb(218,39,13)" fg:x="270" fg:w="7844"/><text x="1.3061%" y="175.50">candid::de::IDLDeserialize::new_with_con..</text></g><g><title>memcpy (344 instructions, 1.29%)</title><rect x="30.4465%" y="165" width="1.2908%" height="15" fill="rgb(207,64,46)" fg:x="8114" fg:w="344"/><text x="30.7395%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="31.7373%" y="149" width="0.0263%" height="15" fill="rgb(222,184,5)" fg:x="8458" fg:w="7"/><text x="32.0303%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.15%)</title><rect x="31.7373%" y="165" width="0.1463%" height="15" fill="rgb(236,52,18)" fg:x="8458" fg:w="39"/><text x="32.0303%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="31.8837%" y="165" width="0.3077%" height="15" fill="rgb(214,92,15)" fg:x="8497" fg:w="82"/><text x="32.1766%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="32.1914%" y="149" width="0.0263%" height="15" fill="rgb(212,222,15)" fg:x="8579" fg:w="7"/><text x="32.4843%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="32.2176%" y="133" width="0.2214%" height="15" fill="rgb(233,25,29)" fg:x="8586" fg:w="59"/><text x="32.5106%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="32.4390%" y="133" width="0.3527%" height="15" fill="rgb(219,78,0)" fg:x="8645" fg:w="94"/><text x="32.7320%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.65%)</title><rect x="32.7917%" y="133" width="0.6492%" height="15" fill="rgb(234,56,25)" fg:x="8739" fg:w="173"/><text x="33.0847%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.17%)</title><rect x="32.2176%" y="149" width="2.1726%" height="15" fill="rgb(223,73,11)" fg:x="8586" fg:w="579"/><text x="32.5106%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (797 instructions, 2.99%)</title><rect x="32.1914%" y="165" width="2.9906%" height="15" fill="rgb(210,147,44)" fg:x="8579" fg:w="797"/><text x="32.4843%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="35.1820%" y="165" width="0.3077%" height="15" fill="rgb(238,85,43)" fg:x="9376" fg:w="82"/><text x="35.4750%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="35.4897%" y="149" width="0.0263%" height="15" fill="rgb(228,74,29)" fg:x="9458" fg:w="7"/><text x="35.7826%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="35.5159%" y="133" width="0.2214%" height="15" fill="rgb(219,58,49)" fg:x="9465" fg:w="59"/><text x="35.8089%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="35.7373%" y="133" width="0.3527%" height="15" fill="rgb(233,188,44)" fg:x="9524" fg:w="94"/><text x="36.0303%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.65%)</title><rect x="36.0901%" y="133" width="0.6492%" height="15" fill="rgb(207,12,45)" fg:x="9618" fg:w="173"/><text x="36.3830%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.17%)</title><rect x="35.5159%" y="149" width="2.1726%" height="15" fill="rgb(210,216,49)" fg:x="9465" fg:w="579"/><text x="35.8089%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.29%)</title><rect x="37.6886%" y="149" width="0.2889%" height="15" fill="rgb(253,56,34)" fg:x="10044" fg:w="77"/><text x="37.9815%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="37.9775%" y="133" width="0.3340%" height="15" fill="rgb(249,96,28)" fg:x="10121" fg:w="89"/><text x="38.2705%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.50%)</title><rect x="37.9775%" y="149" width="0.4991%" height="15" fill="rgb(212,84,44)" fg:x="10121" fg:w="133"/><text x="38.2705%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 3.66%)</title><rect x="35.4897%" y="165" width="3.6585%" height="15" fill="rgb(238,204,35)" fg:x="9458" fg:w="975"/><text x="35.7826%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="39.1482%" y="117" width="0.2214%" height="15" fill="rgb(231,159,12)" fg:x="10433" fg:w="59"/><text x="39.4412%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.38%)</title><rect x="39.1482%" y="133" width="0.3827%" height="15" fill="rgb(206,191,28)" fg:x="10433" fg:w="102"/><text x="39.4412%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.21%)</title><rect x="39.1482%" y="149" width="1.2120%" height="15" fill="rgb(240,57,32)" fg:x="10433" fg:w="323"/><text x="39.4412%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.305 (34 instructions, 0.13%)</title><rect x="40.3602%" y="149" width="0.1276%" height="15" fill="rgb(252,219,26)" fg:x="10756" fg:w="34"/><text x="40.6532%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="40.4878%" y="149" width="0.0488%" height="15" fill="rgb(236,195,36)" fg:x="10790" fg:w="13"/><text x="40.7808%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 2.08%)</title><rect x="39.1482%" y="165" width="2.0826%" height="15" fill="rgb(237,211,28)" fg:x="10433" fg:w="555"/><text x="39.4412%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.18%)</title><rect x="41.2308%" y="165" width="0.1839%" height="15" fill="rgb(235,40,33)" fg:x="10988" fg:w="49"/><text x="41.5237%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.31%)</title><rect x="41.4146%" y="149" width="0.3114%" height="15" fill="rgb(213,173,48)" fg:x="11037" fg:w="83"/><text x="41.7076%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.09%)</title><rect x="41.8912%" y="133" width="0.0863%" height="15" fill="rgb(206,37,37)" fg:x="11164" fg:w="23"/><text x="42.1842%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.52%)</title><rect x="41.8912%" y="149" width="0.5178%" height="15" fill="rgb(226,100,39)" fg:x="11164" fg:w="138"/><text x="42.1842%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.16%)</title><rect x="41.4146%" y="165" width="1.1595%" height="15" fill="rgb(252,140,12)" fg:x="11037" fg:w="309"/><text x="41.7076%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.13%)</title><rect x="42.5741%" y="149" width="0.1313%" height="15" fill="rgb(221,210,13)" fg:x="11346" fg:w="35"/><text x="42.8671%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.13%)</title><rect x="42.7054%" y="149" width="0.1276%" height="15" fill="rgb(233,4,38)" fg:x="11381" fg:w="34"/><text x="42.9984%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.13%)</title><rect x="42.8330%" y="149" width="0.1276%" height="15" fill="rgb(250,54,54)" fg:x="11415" fg:w="34"/><text x="43.1260%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.12%)</title><rect x="42.9606%" y="149" width="0.1238%" height="15" fill="rgb(206,128,36)" fg:x="11449" fg:w="33"/><text x="43.2536%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.94%)</title><rect x="42.5741%" y="165" width="0.9381%" height="15" fill="rgb(238,221,41)" fg:x="11346" fg:w="250"/><text x="42.8671%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="43.5122%" y="165" width="0.0488%" height="15" fill="rgb(211,19,43)" fg:x="11596" fg:w="13"/><text x="43.8052%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="43.5610%" y="165" width="0.0488%" height="15" fill="rgb(243,20,19)" fg:x="11609" fg:w="13"/><text x="43.8539%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="43.6098%" y="165" width="0.0488%" height="15" fill="rgb(214,204,6)" fg:x="11622" fg:w="13"/><text x="43.9027%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.16%)</title><rect x="43.6585%" y="165" width="0.1614%" height="15" fill="rgb(215,165,6)" fg:x="11635" fg:w="43"/><text x="43.9515%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="43.8199%" y="149" width="0.0263%" height="15" fill="rgb(231,214,34)" fg:x="11678" fg:w="7"/><text x="44.1129%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="43.8462%" y="133" width="0.1013%" height="15" fill="rgb(217,67,3)" fg:x="11685" fg:w="27"/><text x="44.1391%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="43.9475%" y="133" width="0.1013%" height="15" fill="rgb(207,209,22)" fg:x="11712" fg:w="27"/><text x="44.2404%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.74%)</title><rect x="43.8462%" y="149" width="0.7392%" height="15" fill="rgb(231,215,17)" fg:x="11685" fg:w="197"/><text x="44.1391%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="44.5854%" y="117" width="0.1013%" height="15" fill="rgb(236,49,45)" fg:x="11882" fg:w="27"/><text x="44.8783%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.53%)</title><rect x="44.5854%" y="133" width="0.5328%" height="15" fill="rgb(207,77,13)" fg:x="11882" fg:w="142"/><text x="44.8783%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.70%)</title><rect x="44.5854%" y="149" width="0.6979%" height="15" fill="rgb(210,224,42)" fg:x="11882" fg:w="186"/><text x="44.8783%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="45.2833%" y="149" width="0.0488%" height="15" fill="rgb(241,170,40)" fg:x="12068" fg:w="13"/><text x="45.5763%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="45.3321%" y="149" width="0.0263%" height="15" fill="rgb(253,176,11)" fg:x="12081" fg:w="7"/><text x="45.6251%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 1.76%)</title><rect x="43.8199%" y="165" width="1.7636%" height="15" fill="rgb(240,113,45)" fg:x="11678" fg:w="470"/><text x="44.1129%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="45.5835%" y="149" width="0.1013%" height="15" fill="rgb(231,100,16)" fg:x="12148" fg:w="27"/><text x="45.8765%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.53%)</title><rect x="45.5835%" y="165" width="0.5328%" height="15" fill="rgb(243,150,53)" fg:x="12148" fg:w="142"/><text x="45.8765%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,671 instructions, 51.30%)</title><rect x="0.7054%" y="181" width="51.2983%" height="15" fill="rgb(243,204,49)" fg:x="188" fg:w="13671"/><text x="0.9984%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="52.0038%" y="181" width="0.5816%" height="15" fill="rgb(218,147,4)" fg:x="13859" fg:w="155"/><text x="52.2967%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="52.5854%" y="181" width="0.5816%" height="15" fill="rgb(231,209,0)" fg:x="14014" fg:w="155"/><text x="52.8783%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="53.1670%" y="181" width="0.5816%" height="15" fill="rgb(220,34,23)" fg:x="14169" fg:w="155"/><text x="53.4599%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="53.7486%" y="181" width="0.5816%" height="15" fill="rgb(214,96,46)" fg:x="14324" fg:w="155"/><text x="54.0416%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="54.3302%" y="181" width="0.5816%" height="15" fill="rgb(233,218,31)" fg:x="14479" fg:w="155"/><text x="54.6232%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="54.9118%" y="181" width="0.5816%" height="15" fill="rgb(237,137,28)" fg:x="14634" fg:w="155"/><text x="55.2048%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="55.4934%" y="181" width="0.5816%" height="15" fill="rgb(218,152,38)" fg:x="14789" fg:w="155"/><text x="55.7864%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="56.0750%" y="181" width="0.5816%" height="15" fill="rgb(239,190,7)" fg:x="14944" fg:w="155"/><text x="56.3680%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="56.6567%" y="181" width="0.5816%" height="15" fill="rgb(238,18,13)" fg:x="15099" fg:w="155"/><text x="56.9496%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="57.2383%" y="181" width="0.5816%" height="15" fill="rgb(238,7,37)" fg:x="15254" fg:w="155"/><text x="57.5312%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="57.8199%" y="181" width="0.5816%" height="15" fill="rgb(241,138,0)" fg:x="15409" fg:w="155"/><text x="58.1129%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="58.4015%" y="181" width="0.5816%" height="15" fill="rgb(251,13,15)" fg:x="15564" fg:w="155"/><text x="58.6945%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="58.9831%" y="181" width="0.5816%" height="15" fill="rgb(250,18,19)" fg:x="15719" fg:w="155"/><text x="59.2761%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (223 instructions, 0.84%)</title><rect x="59.5647%" y="181" width="0.8368%" height="15" fill="rgb(208,75,43)" fg:x="15874" fg:w="223"/><text x="59.8577%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="60.4015%" y="181" width="0.5816%" height="15" fill="rgb(248,173,8)" fg:x="16097" fg:w="155"/><text x="60.6945%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="60.9831%" y="181" width="0.5816%" height="15" fill="rgb(233,135,44)" fg:x="16252" fg:w="155"/><text x="61.2761%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="61.5647%" y="181" width="0.5816%" height="15" fill="rgb(237,114,24)" fg:x="16407" fg:w="155"/><text x="61.8577%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="62.1463%" y="181" width="0.5816%" height="15" fill="rgb(244,16,7)" fg:x="16562" fg:w="155"/><text x="62.4393%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="62.7280%" y="181" width="0.5816%" height="15" fill="rgb(230,190,30)" fg:x="16717" fg:w="155"/><text x="63.0209%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="63.3096%" y="181" width="0.5816%" height="15" fill="rgb(234,170,2)" fg:x="16872" fg:w="155"/><text x="63.6025%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="63.8912%" y="181" width="0.5816%" height="15" fill="rgb(215,111,48)" fg:x="17027" fg:w="155"/><text x="64.1842%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="64.4728%" y="181" width="0.5816%" height="15" fill="rgb(240,105,35)" fg:x="17182" fg:w="155"/><text x="64.7658%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="65.0544%" y="181" width="0.5816%" height="15" fill="rgb(239,28,38)" fg:x="17337" fg:w="155"/><text x="65.3474%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="65.6360%" y="181" width="0.5816%" height="15" fill="rgb(234,181,49)" fg:x="17492" fg:w="155"/><text x="65.9290%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (223 instructions, 0.84%)</title><rect x="66.2176%" y="181" width="0.8368%" height="15" fill="rgb(207,228,0)" fg:x="17647" fg:w="223"/><text x="66.5106%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="67.0544%" y="181" width="0.5816%" height="15" fill="rgb(250,16,23)" fg:x="17870" fg:w="155"/><text x="67.3474%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="67.6360%" y="181" width="0.5816%" height="15" fill="rgb(231,128,1)" fg:x="18025" fg:w="155"/><text x="67.9290%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="68.2176%" y="181" width="0.5816%" height="15" fill="rgb(238,84,42)" fg:x="18180" fg:w="155"/><text x="68.5106%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="68.7992%" y="181" width="0.5816%" height="15" fill="rgb(254,46,15)" fg:x="18335" fg:w="155"/><text x="69.0922%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="69.3809%" y="181" width="0.5816%" height="15" fill="rgb(214,176,22)" fg:x="18490" fg:w="155"/><text x="69.6738%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="69.9625%" y="181" width="0.5816%" height="15" fill="rgb(239,28,15)" fg:x="18645" fg:w="155"/><text x="70.2554%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="70.5441%" y="181" width="0.5816%" height="15" fill="rgb(234,123,18)" fg:x="18800" fg:w="155"/><text x="70.8371%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="71.1257%" y="181" width="0.5816%" height="15" fill="rgb(224,114,26)" fg:x="18955" fg:w="155"/><text x="71.4187%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="71.7073%" y="181" width="0.5816%" height="15" fill="rgb(239,65,51)" fg:x="19110" fg:w="155"/><text x="72.0003%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="72.2889%" y="181" width="0.5816%" height="15" fill="rgb(252,184,33)" fg:x="19265" fg:w="155"/><text x="72.5819%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="72.8705%" y="181" width="0.5816%" height="15" fill="rgb(252,161,42)" fg:x="19420" fg:w="155"/><text x="73.1635%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="73.4522%" y="181" width="0.5816%" height="15" fill="rgb(216,12,16)" fg:x="19575" fg:w="155"/><text x="73.7451%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="74.0338%" y="181" width="0.5816%" height="15" fill="rgb(240,140,51)" fg:x="19730" fg:w="155"/><text x="74.3267%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="74.6154%" y="181" width="0.5816%" height="15" fill="rgb(222,136,32)" fg:x="19885" fg:w="155"/><text x="74.9084%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="75.1970%" y="181" width="0.5816%" height="15" fill="rgb(252,108,44)" fg:x="20040" fg:w="155"/><text x="75.4900%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="75.7786%" y="181" width="0.5816%" height="15" fill="rgb(237,3,3)" fg:x="20195" fg:w="155"/><text x="76.0716%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="76.3602%" y="181" width="0.5816%" height="15" fill="rgb(216,159,20)" fg:x="20350" fg:w="155"/><text x="76.6532%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="76.9418%" y="181" width="0.5816%" height="15" fill="rgb(214,82,15)" fg:x="20505" fg:w="155"/><text x="77.2348%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="77.5235%" y="181" width="0.5816%" height="15" fill="rgb(224,7,23)" fg:x="20660" fg:w="155"/><text x="77.8164%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="78.1051%" y="181" width="0.5816%" height="15" fill="rgb(213,221,35)" fg:x="20815" fg:w="155"/><text x="78.3980%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="78.6867%" y="181" width="0.5816%" height="15" fill="rgb(247,45,53)" fg:x="20970" fg:w="155"/><text x="78.9796%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="79.2683%" y="181" width="0.5816%" height="15" fill="rgb(211,11,27)" fg:x="21125" fg:w="155"/><text x="79.5613%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (291 instructions, 1.09%)</title><rect x="79.8499%" y="181" width="1.0919%" height="15" fill="rgb(211,173,8)" fg:x="21280" fg:w="291"/><text x="80.1429%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="80.9418%" y="181" width="0.5816%" height="15" fill="rgb(206,214,48)" fg:x="21571" fg:w="155"/><text x="81.2348%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="81.5235%" y="181" width="0.5816%" height="15" fill="rgb(235,63,46)" fg:x="21726" fg:w="155"/><text x="81.8164%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="82.1051%" y="165" width="0.0263%" height="15" fill="rgb(219,134,26)" fg:x="21881" fg:w="7"/><text x="82.3980%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="82.1313%" y="133" width="0.1013%" height="15" fill="rgb(238,78,44)" fg:x="21888" fg:w="27"/><text x="82.4243%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.43%)</title><rect x="82.1313%" y="149" width="0.4315%" height="15" fill="rgb(250,207,43)" fg:x="21888" fg:w="115"/><text x="82.4243%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.60%)</title><rect x="82.1313%" y="165" width="0.5966%" height="15" fill="rgb(210,92,14)" fg:x="21888" fg:w="159"/><text x="82.4243%" y="175.50"></text></g><g><title>memset (152 instructions, 0.57%)</title><rect x="82.7280%" y="165" width="0.5704%" height="15" fill="rgb(250,189,44)" fg:x="22047" fg:w="152"/><text x="83.0209%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (492 instructions, 1.85%)</title><rect x="82.1051%" y="181" width="1.8462%" height="15" fill="rgb(239,182,26)" fg:x="21881" fg:w="492"/><text x="82.3980%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.94%)</title><rect x="83.9512%" y="165" width="1.9437%" height="15" fill="rgb(246,81,37)" fg:x="22373" fg:w="518"/><text x="84.2442%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.31%)</title><rect x="85.8949%" y="117" width="0.3077%" height="15" fill="rgb(211,187,35)" fg:x="22891" fg:w="82"/><text x="86.1879%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.49%)</title><rect x="85.8949%" y="133" width="0.4878%" height="15" fill="rgb(211,148,34)" fg:x="22891" fg:w="130"/><text x="86.1879%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.80%)</title><rect x="85.8949%" y="149" width="0.7955%" height="15" fill="rgb(213,60,24)" fg:x="22891" fg:w="212"/><text x="86.1879%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="86.6904%" y="149" width="0.0563%" height="15" fill="rgb(235,160,43)" fg:x="23103" fg:w="15"/><text x="86.9834%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="86.7467%" y="149" width="0.0563%" height="15" fill="rgb(232,80,41)" fg:x="23118" fg:w="15"/><text x="87.0397%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 1.61%)</title><rect x="85.8949%" y="165" width="1.6135%" height="15" fill="rgb(231,10,9)" fg:x="22891" fg:w="430"/><text x="86.1879%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.94%)</title><rect x="87.5084%" y="165" width="1.9362%" height="15" fill="rgb(208,46,17)" fg:x="23321" fg:w="516"/><text x="87.8014%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="89.4447%" y="165" width="0.0263%" height="15" fill="rgb(222,33,11)" fg:x="23837" fg:w="7"/><text x="89.7376%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 5.88%)</title><rect x="83.9512%" y="181" width="5.8837%" height="15" fill="rgb(248,142,41)" fg:x="22373" fg:w="1568"/><text x="84.2442%" y="191.50">candid..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="89.8349%" y="165" width="0.0263%" height="15" fill="rgb(232,140,32)" fg:x="23941" fg:w="7"/><text x="90.1279%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.23%)</title><rect x="89.8612%" y="165" width="0.2251%" height="15" fill="rgb(230,224,26)" fg:x="23948" fg:w="60"/><text x="90.1541%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.49%)</title><rect x="89.8349%" y="181" width="0.4916%" height="15" fill="rgb(247,136,11)" fg:x="23941" fg:w="131"/><text x="90.1279%" y="191.50"></text></g><g><title>hashmap::__canister_method_batch_put::{{closure}} (26,099 instructions, 97.93%)</title><rect x="0.7054%" y="197" width="97.9325%" height="15" fill="rgb(211,59,24)" fg:x="188" fg:w="26099"/><text x="0.9984%" y="207.50">hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.05%)</title><rect x="98.6379%" y="197" width="0.0525%" height="15" fill="rgb(232,57,2)" fg:x="26287" fg:w="14"/><text x="98.9309%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="99.0281%" y="181" width="0.1013%" height="15" fill="rgb(238,189,49)" fg:x="26391" fg:w="27"/><text x="99.3211%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.77%)</title><rect x="98.6942%" y="197" width="0.7655%" height="15" fill="rgb(246,96,41)" fg:x="26302" fg:w="204"/><text x="98.9872%" y="207.50"></text></g><g><title>all (26,650 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,166,24)" fg:x="0" fg:w="26650"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (26,650 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,152,51)" fg:x="0" fg:w="26650"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>