<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="26711"><g><title>ic_cdk::setup (24 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0899%" height="15" fill="rgb(242,40,14)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.0899%" y="197" width="0.3107%" height="15" fill="rgb(247,133,41)" fg:x="24" fg:w="83"/><text x="0.3828%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.4006%" y="197" width="0.3107%" height="15" fill="rgb(209,88,36)" fg:x="107" fg:w="83"/><text x="0.6936%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.7113%" y="165" width="0.3107%" height="15" fill="rgb(236,223,16)" fg:x="190" fg:w="83"/><text x="1.0043%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="1.0221%" y="149" width="0.3070%" height="15" fill="rgb(225,190,16)" fg:x="273" fg:w="82"/><text x="1.3150%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.3290%" y="133" width="0.0225%" height="15" fill="rgb(224,172,17)" fg:x="355" fg:w="6"/><text x="1.6220%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="1.3290%" y="149" width="1.6585%" height="15" fill="rgb(227,226,1)" fg:x="355" fg:w="443"/><text x="1.6220%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="2.9875%" y="149" width="0.3557%" height="15" fill="rgb(205,123,1)" fg:x="798" fg:w="95"/><text x="3.2805%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.3432%" y="149" width="0.2246%" height="15" fill="rgb(233,44,12)" fg:x="893" fg:w="60"/><text x="3.6362%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.5678%" y="149" width="0.2246%" height="15" fill="rgb(254,13,42)" fg:x="953" fg:w="60"/><text x="3.8608%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.7924%" y="149" width="0.2246%" height="15" fill="rgb(207,215,50)" fg:x="1013" fg:w="60"/><text x="4.0854%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="4.0171%" y="149" width="0.2246%" height="15" fill="rgb(253,57,47)" fg:x="1073" fg:w="60"/><text x="4.3100%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="4.2417%" y="149" width="0.3070%" height="15" fill="rgb(236,65,47)" fg:x="1133" fg:w="82"/><text x="4.5347%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="4.5487%" y="149" width="0.2621%" height="15" fill="rgb(233,204,25)" fg:x="1215" fg:w="70"/><text x="4.8417%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="4.8108%" y="133" width="0.0225%" height="15" fill="rgb(205,110,15)" fg:x="1285" fg:w="6"/><text x="5.1037%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="4.8108%" y="149" width="1.6585%" height="15" fill="rgb(252,72,17)" fg:x="1285" fg:w="443"/><text x="5.1037%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="6.4692%" y="149" width="0.0711%" height="15" fill="rgb(251,221,50)" fg:x="1728" fg:w="19"/><text x="6.7622%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="6.5404%" y="133" width="0.3107%" height="15" fill="rgb(212,175,46)" fg:x="1747" fg:w="83"/><text x="6.8333%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="6.8511%" y="101" width="0.2508%" height="15" fill="rgb(233,107,0)" fg:x="1830" fg:w="67"/><text x="7.1441%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.36%)</title><rect x="6.8511%" y="117" width="0.3594%" height="15" fill="rgb(254,0,41)" fg:x="1830" fg:w="96"/><text x="7.1441%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="7.2105%" y="69" width="0.0412%" height="15" fill="rgb(220,154,51)" fg:x="1926" fg:w="11"/><text x="7.5035%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="7.2517%" y="53" width="0.1310%" height="15" fill="rgb(246,27,18)" fg:x="1937" fg:w="35"/><text x="7.5447%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.24%)</title><rect x="7.2517%" y="69" width="0.2396%" height="15" fill="rgb(211,208,34)" fg:x="1937" fg:w="64"/><text x="7.5447%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.54%)</title><rect x="7.2105%" y="85" width="0.5391%" height="15" fill="rgb(221,80,40)" fg:x="1926" fg:w="144"/><text x="7.5035%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.78%)</title><rect x="7.2105%" y="101" width="0.7824%" height="15" fill="rgb(229,199,31)" fg:x="1926" fg:w="209"/><text x="7.5035%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.82%)</title><rect x="7.2105%" y="117" width="0.8199%" height="15" fill="rgb(239,17,26)" fg:x="1926" fg:w="219"/><text x="7.5035%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 1.70%)</title><rect x="6.8511%" y="133" width="1.6959%" height="15" fill="rgb(237,131,47)" fg:x="1830" fg:w="453"/><text x="7.1441%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 2.52%)</title><rect x="6.5404%" y="149" width="2.5233%" height="15" fill="rgb(235,22,52)" fg:x="1747" fg:w="674"/><text x="6.8333%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="9.0637%" y="149" width="0.3557%" height="15" fill="rgb(250,170,6)" fg:x="2421" fg:w="95"/><text x="9.3567%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="9.4193%" y="149" width="0.2246%" height="15" fill="rgb(233,25,50)" fg:x="2516" fg:w="60"/><text x="9.7123%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="9.6440%" y="149" width="0.2845%" height="15" fill="rgb(209,30,14)" fg:x="2576" fg:w="76"/><text x="9.9369%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="9.9285%" y="149" width="0.2621%" height="15" fill="rgb(206,81,39)" fg:x="2652" fg:w="70"/><text x="10.2215%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.1906%" y="117" width="0.0225%" height="15" fill="rgb(221,7,2)" fg:x="2722" fg:w="6"/><text x="10.4835%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.66%)</title><rect x="10.1906%" y="133" width="1.6585%" height="15" fill="rgb(251,82,1)" fg:x="2722" fg:w="443"/><text x="10.4835%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="11.8491%" y="133" width="0.0711%" height="15" fill="rgb(221,105,29)" fg:x="3165" fg:w="19"/><text x="12.1420%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="11.9202%" y="117" width="0.3107%" height="15" fill="rgb(221,163,38)" fg:x="3184" fg:w="83"/><text x="12.2132%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="12.2309%" y="85" width="0.2508%" height="15" fill="rgb(219,202,20)" fg:x="3267" fg:w="67"/><text x="12.5239%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.36%)</title><rect x="12.2309%" y="101" width="0.3594%" height="15" fill="rgb(224,66,45)" fg:x="3267" fg:w="96"/><text x="12.5239%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="12.5903%" y="53" width="0.0412%" height="15" fill="rgb(214,167,10)" fg:x="3363" fg:w="11"/><text x="12.8833%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="12.6315%" y="37" width="0.1310%" height="15" fill="rgb(217,150,37)" fg:x="3374" fg:w="35"/><text x="12.9245%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.24%)</title><rect x="12.6315%" y="53" width="0.2396%" height="15" fill="rgb(232,11,10)" fg:x="3374" fg:w="64"/><text x="12.9245%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.54%)</title><rect x="12.5903%" y="69" width="0.5391%" height="15" fill="rgb(207,13,8)" fg:x="3363" fg:w="144"/><text x="12.8833%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.78%)</title><rect x="12.5903%" y="85" width="0.7824%" height="15" fill="rgb(238,36,52)" fg:x="3363" fg:w="209"/><text x="12.8833%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.82%)</title><rect x="12.5903%" y="101" width="0.8199%" height="15" fill="rgb(230,74,12)" fg:x="3363" fg:w="219"/><text x="12.8833%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 1.70%)</title><rect x="12.2309%" y="117" width="1.6959%" height="15" fill="rgb(206,5,16)" fg:x="3267" fg:w="453"/><text x="12.5239%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 2.52%)</title><rect x="11.9202%" y="133" width="2.5233%" height="15" fill="rgb(236,115,0)" fg:x="3184" fg:w="674"/><text x="12.2132%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.36%)</title><rect x="14.4435%" y="133" width="0.3557%" height="15" fill="rgb(248,223,16)" fg:x="3858" fg:w="95"/><text x="14.7365%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="14.7991%" y="133" width="0.2246%" height="15" fill="rgb(216,115,30)" fg:x="3953" fg:w="60"/><text x="15.0921%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.31%)</title><rect x="15.0238%" y="117" width="0.3070%" height="15" fill="rgb(252,122,49)" fg:x="4013" fg:w="82"/><text x="15.3167%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.36%)</title><rect x="15.3308%" y="117" width="0.3557%" height="15" fill="rgb(208,15,53)" fg:x="4095" fg:w="95"/><text x="15.6237%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="15.6864%" y="117" width="0.2845%" height="15" fill="rgb(253,168,45)" fg:x="4190" fg:w="76"/><text x="15.9794%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.24%)</title><rect x="15.0238%" y="133" width="1.2354%" height="15" fill="rgb(239,79,43)" fg:x="4013" fg:w="330"/><text x="15.3167%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="16.2592%" y="133" width="0.3107%" height="15" fill="rgb(239,47,33)" fg:x="4343" fg:w="83"/><text x="16.5522%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 7.29%)</title><rect x="10.1906%" y="149" width="7.2891%" height="15" fill="rgb(219,151,4)" fg:x="2722" fg:w="1947"/><text x="10.4835%" y="159.50">binread:..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="17.4797%" y="149" width="0.2845%" height="15" fill="rgb(211,65,19)" fg:x="4669" fg:w="76"/><text x="17.7727%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.7642%" y="149" width="0.0562%" height="15" fill="rgb(211,95,29)" fg:x="4745" fg:w="15"/><text x="18.0572%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.8204%" y="149" width="0.0562%" height="15" fill="rgb(208,12,2)" fg:x="4760" fg:w="15"/><text x="18.1133%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.03%)</title><rect x="17.8765%" y="149" width="0.0337%" height="15" fill="rgb(234,118,18)" fg:x="4775" fg:w="9"/><text x="18.1695%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.06%)</title><rect x="17.9102%" y="149" width="0.0599%" height="15" fill="rgb(232,23,14)" fg:x="4784" fg:w="16"/><text x="18.2032%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="17.9701%" y="133" width="0.3107%" height="15" fill="rgb(226,120,26)" fg:x="4800" fg:w="83"/><text x="18.2631%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.67%)</title><rect x="17.9701%" y="149" width="0.6701%" height="15" fill="rgb(231,182,18)" fg:x="4800" fg:w="179"/><text x="18.2631%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="18.6403%" y="117" width="0.3107%" height="15" fill="rgb(206,18,10)" fg:x="4979" fg:w="83"/><text x="18.9332%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.47%)</title><rect x="18.6403%" y="133" width="0.4717%" height="15" fill="rgb(247,54,51)" fg:x="4979" fg:w="126"/><text x="18.9332%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.79%)</title><rect x="18.6403%" y="149" width="0.7899%" height="15" fill="rgb(249,2,49)" fg:x="4979" fg:w="211"/><text x="18.9332%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="19.4302%" y="149" width="0.3107%" height="15" fill="rgb(252,186,51)" fg:x="5190" fg:w="83"/><text x="19.7232%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="19.7409%" y="149" width="0.3332%" height="15" fill="rgb(250,14,51)" fg:x="5273" fg:w="89"/><text x="20.0339%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="20.0741%" y="149" width="0.3107%" height="15" fill="rgb(230,175,52)" fg:x="5362" fg:w="83"/><text x="20.3671%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="20.3849%" y="149" width="0.3107%" height="15" fill="rgb(210,181,38)" fg:x="5445" fg:w="83"/><text x="20.6778%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="20.6956%" y="149" width="0.0150%" height="15" fill="rgb(240,116,42)" fg:x="5528" fg:w="4"/><text x="20.9886%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="20.7106%" y="149" width="0.3332%" height="15" fill="rgb(246,90,32)" fg:x="5532" fg:w="89"/><text x="21.0035%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.60%)</title><rect x="21.0438%" y="149" width="1.6023%" height="15" fill="rgb(239,22,50)" fg:x="5621" fg:w="428"/><text x="21.3367%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.60%)</title><rect x="22.6461%" y="149" width="1.6023%" height="15" fill="rgb(233,34,48)" fg:x="6049" fg:w="428"/><text x="22.9391%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 27.68%)</title><rect x="1.0221%" y="165" width="27.6777%" height="15" fill="rgb(223,164,27)" fg:x="273" fg:w="7393"/><text x="1.3150%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 1.42%)</title><rect x="28.6998%" y="165" width="1.4226%" height="15" fill="rgb(252,26,45)" fg:x="7666" fg:w="380"/><text x="28.9928%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="30.1224%" y="149" width="0.0262%" height="15" fill="rgb(234,108,11)" fg:x="8046" fg:w="7"/><text x="30.4154%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.15%)</title><rect x="30.1224%" y="165" width="0.1460%" height="15" fill="rgb(242,156,31)" fg:x="8046" fg:w="39"/><text x="30.4154%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="30.2684%" y="165" width="0.3107%" height="15" fill="rgb(207,38,51)" fg:x="8085" fg:w="83"/><text x="30.5614%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="30.5792%" y="149" width="0.0262%" height="15" fill="rgb(233,193,38)" fg:x="8168" fg:w="7"/><text x="30.8721%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="30.6054%" y="133" width="0.2209%" height="15" fill="rgb(205,44,38)" fg:x="8175" fg:w="59"/><text x="30.8983%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="30.8263%" y="133" width="0.3519%" height="15" fill="rgb(231,121,10)" fg:x="8234" fg:w="94"/><text x="31.1192%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.65%)</title><rect x="31.1782%" y="133" width="0.6477%" height="15" fill="rgb(232,89,24)" fg:x="8328" fg:w="173"/><text x="31.4711%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.17%)</title><rect x="30.6054%" y="149" width="2.1676%" height="15" fill="rgb(231,120,18)" fg:x="8175" fg:w="579"/><text x="30.8983%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (798 instructions, 2.99%)</title><rect x="30.5792%" y="165" width="2.9875%" height="15" fill="rgb(236,109,52)" fg:x="8168" fg:w="798"/><text x="30.8721%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="33.5667%" y="165" width="0.3107%" height="15" fill="rgb(240,207,17)" fg:x="8966" fg:w="83"/><text x="33.8597%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="33.8774%" y="149" width="0.0262%" height="15" fill="rgb(216,127,40)" fg:x="9049" fg:w="7"/><text x="34.1704%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="33.9036%" y="133" width="0.2209%" height="15" fill="rgb(227,169,45)" fg:x="9056" fg:w="59"/><text x="34.1966%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="34.1245%" y="133" width="0.3519%" height="15" fill="rgb(211,72,2)" fg:x="9115" fg:w="94"/><text x="34.4175%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.65%)</title><rect x="34.4764%" y="133" width="0.6477%" height="15" fill="rgb(245,62,30)" fg:x="9209" fg:w="173"/><text x="34.7694%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.17%)</title><rect x="33.9036%" y="149" width="2.1676%" height="15" fill="rgb(231,118,4)" fg:x="9056" fg:w="579"/><text x="34.1966%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.29%)</title><rect x="36.0713%" y="149" width="0.2883%" height="15" fill="rgb(238,135,12)" fg:x="9635" fg:w="77"/><text x="36.3643%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.33%)</title><rect x="36.3596%" y="133" width="0.3332%" height="15" fill="rgb(246,110,29)" fg:x="9712" fg:w="89"/><text x="36.6525%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.46%)</title><rect x="36.3596%" y="149" width="0.4642%" height="15" fill="rgb(211,18,8)" fg:x="9712" fg:w="124"/><text x="36.6525%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 3.61%)</title><rect x="33.8774%" y="165" width="3.6127%" height="15" fill="rgb(234,155,37)" fg:x="9049" fg:w="965"/><text x="34.1704%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="37.4902%" y="117" width="0.2209%" height="15" fill="rgb(252,31,22)" fg:x="10014" fg:w="59"/><text x="37.7831%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.35%)</title><rect x="37.4902%" y="133" width="0.3482%" height="15" fill="rgb(235,199,37)" fg:x="10014" fg:w="93"/><text x="37.7831%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 1.18%)</title><rect x="37.4902%" y="149" width="1.1830%" height="15" fill="rgb(243,29,36)" fg:x="10014" fg:w="316"/><text x="37.7831%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.319 (18 instructions, 0.07%)</title><rect x="38.6732%" y="149" width="0.0674%" height="15" fill="rgb(231,61,47)" fg:x="10330" fg:w="18"/><text x="38.9662%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="38.7406%" y="149" width="0.0487%" height="15" fill="rgb(247,174,31)" fg:x="10348" fg:w="13"/><text x="39.0336%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 1.98%)</title><rect x="37.4902%" y="165" width="1.9805%" height="15" fill="rgb(246,213,35)" fg:x="10014" fg:w="529"/><text x="37.7831%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.20%)</title><rect x="39.4706%" y="165" width="0.1984%" height="15" fill="rgb(205,143,40)" fg:x="10543" fg:w="53"/><text x="39.7636%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="39.6691%" y="133" width="0.1011%" height="15" fill="rgb(213,35,38)" fg:x="10596" fg:w="27"/><text x="39.9620%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.53%)</title><rect x="39.6691%" y="149" width="0.5316%" height="15" fill="rgb(242,174,9)" fg:x="10596" fg:w="142"/><text x="39.9620%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="40.3317%" y="133" width="0.1011%" height="15" fill="rgb(207,112,28)" fg:x="10773" fg:w="27"/><text x="40.6247%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.53%)</title><rect x="40.3317%" y="149" width="0.5316%" height="15" fill="rgb(247,30,21)" fg:x="10773" fg:w="142"/><text x="40.6247%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 1.33%)</title><rect x="39.6691%" y="165" width="1.3253%" height="15" fill="rgb(251,34,7)" fg:x="10596" fg:w="354"/><text x="39.9620%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.13%)</title><rect x="40.9943%" y="149" width="0.1273%" height="15" fill="rgb(213,180,48)" fg:x="10950" fg:w="34"/><text x="41.2873%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1169 (18 instructions, 0.07%)</title><rect x="41.1216%" y="149" width="0.0674%" height="15" fill="rgb(220,222,40)" fg:x="10984" fg:w="18"/><text x="41.4146%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1169 (18 instructions, 0.07%)</title><rect x="41.1890%" y="149" width="0.0674%" height="15" fill="rgb(253,43,34)" fg:x="11002" fg:w="18"/><text x="41.4820%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.63%)</title><rect x="40.9943%" y="165" width="0.6252%" height="15" fill="rgb(213,101,38)" fg:x="10950" fg:w="167"/><text x="41.2873%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.6196%" y="165" width="0.0487%" height="15" fill="rgb(215,60,21)" fg:x="11117" fg:w="13"/><text x="41.9125%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.6682%" y="165" width="0.0487%" height="15" fill="rgb(223,16,12)" fg:x="11130" fg:w="13"/><text x="41.9612%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.7169%" y="165" width="0.0487%" height="15" fill="rgb(231,47,11)" fg:x="11143" fg:w="13"/><text x="42.0099%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.65%)</title><rect x="41.7656%" y="165" width="1.6473%" height="15" fill="rgb(235,21,45)" fg:x="11156" fg:w="440"/><text x="42.0585%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="43.4128%" y="133" width="0.0262%" height="15" fill="rgb(225,28,1)" fg:x="11596" fg:w="7"/><text x="43.7058%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="43.4390%" y="117" width="0.1011%" height="15" fill="rgb(221,69,19)" fg:x="11603" fg:w="27"/><text x="43.7320%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="43.5401%" y="117" width="0.1011%" height="15" fill="rgb(234,44,49)" fg:x="11630" fg:w="27"/><text x="43.8331%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.74%)</title><rect x="43.4390%" y="133" width="0.7375%" height="15" fill="rgb(219,146,30)" fg:x="11603" fg:w="197"/><text x="43.7320%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="44.1766%" y="101" width="0.1011%" height="15" fill="rgb(253,155,20)" fg:x="11800" fg:w="27"/><text x="44.4695%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.37%)</title><rect x="44.2776%" y="101" width="0.3706%" height="15" fill="rgb(247,221,23)" fg:x="11827" fg:w="99"/><text x="44.5706%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (220 instructions, 0.82%)</title><rect x="44.1766%" y="117" width="0.8236%" height="15" fill="rgb(232,224,2)" fg:x="11800" fg:w="220"/><text x="44.4695%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 instructions, 0.95%)</title><rect x="44.1766%" y="133" width="0.9547%" height="15" fill="rgb(242,183,54)" fg:x="11800" fg:w="255"/><text x="44.4695%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="45.1312%" y="133" width="0.0487%" height="15" fill="rgb(230,165,28)" fg:x="12055" fg:w="13"/><text x="45.4242%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (534 instructions, 2.00%)</title><rect x="43.4128%" y="149" width="1.9992%" height="15" fill="rgb(207,167,20)" fg:x="11596" fg:w="534"/><text x="43.7058%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (583 instructions, 2.18%)</title><rect x="43.4128%" y="165" width="2.1826%" height="15" fill="rgb(205,77,30)" fg:x="11596" fg:w="583"/><text x="43.7058%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.25%)</title><rect x="45.5954%" y="149" width="0.2508%" height="15" fill="rgb(219,212,23)" fg:x="12179" fg:w="67"/><text x="45.8884%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.37%)</title><rect x="45.8463%" y="149" width="0.3706%" height="15" fill="rgb(244,209,1)" fg:x="12246" fg:w="99"/><text x="46.1392%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (260 instructions, 0.97%)</title><rect x="45.5954%" y="165" width="0.9734%" height="15" fill="rgb(208,200,50)" fg:x="12179" fg:w="260"/><text x="45.8884%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,720 instructions, 51.36%)</title><rect x="0.7113%" y="181" width="51.3646%" height="15" fill="rgb(212,228,47)" fg:x="190" fg:w="13720"/><text x="1.0043%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="52.0759%" y="181" width="0.5803%" height="15" fill="rgb(214,110,17)" fg:x="13910" fg:w="155"/><text x="52.3689%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="52.6562%" y="181" width="0.5803%" height="15" fill="rgb(237,127,0)" fg:x="14065" fg:w="155"/><text x="52.9492%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="53.2365%" y="181" width="0.5803%" height="15" fill="rgb(218,154,22)" fg:x="14220" fg:w="155"/><text x="53.5295%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="53.8168%" y="181" width="0.5803%" height="15" fill="rgb(219,220,54)" fg:x="14375" fg:w="155"/><text x="54.1097%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="54.3971%" y="181" width="0.5803%" height="15" fill="rgb(206,26,14)" fg:x="14530" fg:w="155"/><text x="54.6900%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="54.9774%" y="181" width="0.5803%" height="15" fill="rgb(246,134,21)" fg:x="14685" fg:w="155"/><text x="55.2703%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="55.5576%" y="181" width="0.5803%" height="15" fill="rgb(206,135,25)" fg:x="14840" fg:w="155"/><text x="55.8506%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="56.1379%" y="181" width="0.5803%" height="15" fill="rgb(241,55,17)" fg:x="14995" fg:w="155"/><text x="56.4309%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="56.7182%" y="181" width="0.5803%" height="15" fill="rgb(213,118,35)" fg:x="15150" fg:w="155"/><text x="57.0112%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="57.2985%" y="181" width="0.5803%" height="15" fill="rgb(233,120,42)" fg:x="15305" fg:w="155"/><text x="57.5915%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="57.8788%" y="181" width="0.5803%" height="15" fill="rgb(231,50,18)" fg:x="15460" fg:w="155"/><text x="58.1717%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="58.4591%" y="181" width="0.5803%" height="15" fill="rgb(229,199,46)" fg:x="15615" fg:w="155"/><text x="58.7520%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="59.0393%" y="181" width="0.5803%" height="15" fill="rgb(251,200,11)" fg:x="15770" fg:w="155"/><text x="59.3323%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (223 instructions, 0.83%)</title><rect x="59.6196%" y="181" width="0.8349%" height="15" fill="rgb(248,78,41)" fg:x="15925" fg:w="223"/><text x="59.9126%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="60.4545%" y="181" width="0.5803%" height="15" fill="rgb(251,228,1)" fg:x="16148" fg:w="155"/><text x="60.7475%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="61.0348%" y="181" width="0.5803%" height="15" fill="rgb(215,186,15)" fg:x="16303" fg:w="155"/><text x="61.3277%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="61.6151%" y="181" width="0.5803%" height="15" fill="rgb(217,121,48)" fg:x="16458" fg:w="155"/><text x="61.9080%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="62.1954%" y="181" width="0.5803%" height="15" fill="rgb(224,141,11)" fg:x="16613" fg:w="155"/><text x="62.4883%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="62.7756%" y="181" width="0.5803%" height="15" fill="rgb(247,39,20)" fg:x="16768" fg:w="155"/><text x="63.0686%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="63.3559%" y="181" width="0.5803%" height="15" fill="rgb(246,37,16)" fg:x="16923" fg:w="155"/><text x="63.6489%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="63.9362%" y="181" width="0.5803%" height="15" fill="rgb(228,189,32)" fg:x="17078" fg:w="155"/><text x="64.2292%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="64.5165%" y="181" width="0.5803%" height="15" fill="rgb(218,206,32)" fg:x="17233" fg:w="155"/><text x="64.8095%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="65.0968%" y="181" width="0.5803%" height="15" fill="rgb(246,140,50)" fg:x="17388" fg:w="155"/><text x="65.3897%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="65.6771%" y="181" width="0.5803%" height="15" fill="rgb(241,61,27)" fg:x="17543" fg:w="155"/><text x="65.9700%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (223 instructions, 0.83%)</title><rect x="66.2573%" y="181" width="0.8349%" height="15" fill="rgb(251,62,14)" fg:x="17698" fg:w="223"/><text x="66.5503%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="67.0922%" y="181" width="0.5803%" height="15" fill="rgb(217,223,21)" fg:x="17921" fg:w="155"/><text x="67.3852%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="67.6725%" y="181" width="0.5803%" height="15" fill="rgb(241,86,45)" fg:x="18076" fg:w="155"/><text x="67.9655%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="68.2528%" y="181" width="0.5803%" height="15" fill="rgb(220,197,9)" fg:x="18231" fg:w="155"/><text x="68.5457%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="68.8331%" y="181" width="0.5803%" height="15" fill="rgb(239,228,37)" fg:x="18386" fg:w="155"/><text x="69.1260%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="69.4134%" y="181" width="0.5803%" height="15" fill="rgb(211,23,31)" fg:x="18541" fg:w="155"/><text x="69.7063%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="69.9936%" y="181" width="0.5803%" height="15" fill="rgb(216,117,29)" fg:x="18696" fg:w="155"/><text x="70.2866%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="70.5739%" y="181" width="0.5803%" height="15" fill="rgb(217,227,54)" fg:x="18851" fg:w="155"/><text x="70.8669%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="71.1542%" y="181" width="0.5803%" height="15" fill="rgb(222,156,36)" fg:x="19006" fg:w="155"/><text x="71.4472%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="71.7345%" y="181" width="0.5803%" height="15" fill="rgb(207,40,35)" fg:x="19161" fg:w="155"/><text x="72.0275%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="72.3148%" y="181" width="0.5803%" height="15" fill="rgb(206,88,19)" fg:x="19316" fg:w="155"/><text x="72.6077%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="72.8951%" y="181" width="0.5803%" height="15" fill="rgb(215,64,6)" fg:x="19471" fg:w="155"/><text x="73.1880%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="73.4753%" y="181" width="0.5803%" height="15" fill="rgb(223,146,50)" fg:x="19626" fg:w="155"/><text x="73.7683%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="74.0556%" y="181" width="0.5803%" height="15" fill="rgb(218,165,12)" fg:x="19781" fg:w="155"/><text x="74.3486%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="74.6359%" y="181" width="0.5803%" height="15" fill="rgb(221,87,43)" fg:x="19936" fg:w="155"/><text x="74.9289%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="75.2162%" y="181" width="0.5803%" height="15" fill="rgb(249,157,42)" fg:x="20091" fg:w="155"/><text x="75.5092%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="75.7965%" y="181" width="0.5803%" height="15" fill="rgb(225,61,42)" fg:x="20246" fg:w="155"/><text x="76.0895%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="76.3768%" y="181" width="0.5803%" height="15" fill="rgb(228,79,0)" fg:x="20401" fg:w="155"/><text x="76.6697%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="76.9571%" y="181" width="0.5803%" height="15" fill="rgb(252,159,13)" fg:x="20556" fg:w="155"/><text x="77.2500%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="77.5373%" y="181" width="0.5803%" height="15" fill="rgb(225,113,23)" fg:x="20711" fg:w="155"/><text x="77.8303%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="78.1176%" y="181" width="0.5803%" height="15" fill="rgb(250,121,16)" fg:x="20866" fg:w="155"/><text x="78.4106%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="78.6979%" y="181" width="0.5803%" height="15" fill="rgb(241,67,43)" fg:x="21021" fg:w="155"/><text x="78.9909%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="79.2782%" y="181" width="0.5803%" height="15" fill="rgb(207,147,18)" fg:x="21176" fg:w="155"/><text x="79.5712%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (291 instructions, 1.09%)</title><rect x="79.8585%" y="181" width="1.0894%" height="15" fill="rgb(218,69,31)" fg:x="21331" fg:w="291"/><text x="80.1515%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="80.9479%" y="181" width="0.5803%" height="15" fill="rgb(239,75,46)" fg:x="21622" fg:w="155"/><text x="81.2409%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 instructions, 0.58%)</title><rect x="81.5282%" y="181" width="0.5803%" height="15" fill="rgb(225,17,41)" fg:x="21777" fg:w="155"/><text x="81.8212%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="82.1085%" y="149" width="0.0262%" height="15" fill="rgb(207,22,20)" fg:x="21932" fg:w="7"/><text x="82.4015%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.25%)</title><rect x="82.1347%" y="117" width="0.2508%" height="15" fill="rgb(229,43,32)" fg:x="21939" fg:w="67"/><text x="82.4277%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (155 instructions, 0.58%)</title><rect x="82.1347%" y="133" width="0.5803%" height="15" fill="rgb(228,127,50)" fg:x="21939" fg:w="155"/><text x="82.4277%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.71%)</title><rect x="82.1347%" y="149" width="0.7113%" height="15" fill="rgb(246,104,51)" fg:x="21939" fg:w="190"/><text x="82.4277%" y="159.50"></text></g><g><title>memset (152 instructions, 0.57%)</title><rect x="82.8460%" y="149" width="0.5691%" height="15" fill="rgb(210,98,41)" fg:x="22129" fg:w="152"/><text x="83.1390%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (520 instructions, 1.95%)</title><rect x="82.1085%" y="165" width="1.9468%" height="15" fill="rgb(211,129,6)" fg:x="21932" fg:w="520"/><text x="82.4015%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.94%)</title><rect x="84.0553%" y="149" width="1.9393%" height="15" fill="rgb(248,182,20)" fg:x="22452" fg:w="518"/><text x="84.3482%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="85.9945%" y="101" width="0.3107%" height="15" fill="rgb(243,157,27)" fg:x="22970" fg:w="83"/><text x="86.2875%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.47%)</title><rect x="85.9945%" y="117" width="0.4717%" height="15" fill="rgb(250,149,1)" fg:x="22970" fg:w="126"/><text x="86.2875%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.78%)</title><rect x="85.9945%" y="133" width="0.7787%" height="15" fill="rgb(205,57,28)" fg:x="22970" fg:w="208"/><text x="86.2875%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="86.7732%" y="133" width="0.0562%" height="15" fill="rgb(251,76,53)" fg:x="23178" fg:w="15"/><text x="87.0662%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="86.8294%" y="133" width="0.0562%" height="15" fill="rgb(225,190,54)" fg:x="23193" fg:w="15"/><text x="87.1224%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 1.59%)</title><rect x="85.9945%" y="149" width="1.5948%" height="15" fill="rgb(239,19,45)" fg:x="22970" fg:w="426"/><text x="86.2875%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.93%)</title><rect x="87.5894%" y="149" width="1.9318%" height="15" fill="rgb(206,44,42)" fg:x="23396" fg:w="516"/><text x="87.8824%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="89.5212%" y="149" width="0.0262%" height="15" fill="rgb(239,200,45)" fg:x="23912" fg:w="7"/><text x="89.8141%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 5.84%)</title><rect x="84.0553%" y="165" width="5.8403%" height="15" fill="rgb(230,102,17)" fg:x="22452" fg:w="1560"/><text x="84.3482%" y="175.50">candid..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="89.8955%" y="165" width="0.0262%" height="15" fill="rgb(252,36,36)" fg:x="24012" fg:w="7"/><text x="90.1885%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="89.9218%" y="165" width="0.2246%" height="15" fill="rgb(205,169,52)" fg:x="24019" fg:w="60"/><text x="90.2147%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,753 instructions, 10.31%)</title><rect x="82.1085%" y="181" width="10.3066%" height="15" fill="rgb(228,198,23)" fg:x="21932" fg:w="2753"/><text x="82.4015%" y="191.50">ic_cdk::api:..</text></g><g><title>hashmap::__canister_method_batch_put::{{closure}} (26,158 instructions, 97.93%)</title><rect x="0.7113%" y="197" width="97.9297%" height="15" fill="rgb(207,172,51)" fg:x="190" fg:w="26158"/><text x="1.0043%" y="207.50">hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.05%)</title><rect x="98.6410%" y="197" width="0.0524%" height="15" fill="rgb(221,184,49)" fg:x="26348" fg:w="14"/><text x="98.9340%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.10%)</title><rect x="99.0304%" y="181" width="0.1011%" height="15" fill="rgb(239,38,3)" fg:x="26452" fg:w="27"/><text x="99.3233%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.76%)</title><rect x="98.6972%" y="197" width="0.7637%" height="15" fill="rgb(224,108,1)" fg:x="26363" fg:w="204"/><text x="98.9901%" y="207.50"></text></g><g><title>all (26,711 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(239,210,44)" fg:x="0" fg:w="26711"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (26,711 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,197,37)" fg:x="0" fg:w="26711"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>