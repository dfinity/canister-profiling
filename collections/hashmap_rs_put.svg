<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="26958"><g><title>ic_cdk::setup (24 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0890%" height="15" fill="rgb(254,19,40)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.0890%" y="197" width="0.3079%" height="15" fill="rgb(242,43,22)" fg:x="24" fg:w="83"/><text x="0.3820%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.3969%" y="197" width="0.3079%" height="15" fill="rgb(217,163,34)" fg:x="107" fg:w="83"/><text x="0.6899%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="0.7048%" y="165" width="0.3079%" height="15" fill="rgb(211,40,30)" fg:x="190" fg:w="83"/><text x="0.9978%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.30%)</title><rect x="1.0127%" y="149" width="0.3042%" height="15" fill="rgb(227,123,44)" fg:x="273" fg:w="82"/><text x="1.3057%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.3169%" y="133" width="0.0223%" height="15" fill="rgb(216,109,33)" fg:x="355" fg:w="6"/><text x="1.6098%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.63%)</title><rect x="1.3169%" y="149" width="1.6322%" height="15" fill="rgb(246,219,14)" fg:x="355" fg:w="440"/><text x="1.6098%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.35%)</title><rect x="2.9490%" y="149" width="0.3524%" height="15" fill="rgb(252,99,37)" fg:x="795" fg:w="95"/><text x="3.2420%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.3014%" y="149" width="0.2226%" height="15" fill="rgb(234,174,25)" fg:x="890" fg:w="60"/><text x="3.5944%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.5240%" y="149" width="0.2226%" height="15" fill="rgb(206,23,11)" fg:x="950" fg:w="60"/><text x="3.8170%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.7466%" y="149" width="0.2226%" height="15" fill="rgb(211,4,54)" fg:x="1010" fg:w="60"/><text x="4.0395%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.22%)</title><rect x="3.9691%" y="149" width="0.2226%" height="15" fill="rgb(253,178,22)" fg:x="1070" fg:w="60"/><text x="4.2621%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.30%)</title><rect x="4.1917%" y="149" width="0.3042%" height="15" fill="rgb(228,164,35)" fg:x="1130" fg:w="82"/><text x="4.4847%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="4.4959%" y="149" width="0.2597%" height="15" fill="rgb(245,44,23)" fg:x="1212" fg:w="70"/><text x="4.7889%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="4.7555%" y="133" width="0.0223%" height="15" fill="rgb(253,53,29)" fg:x="1282" fg:w="6"/><text x="5.0485%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.63%)</title><rect x="4.7555%" y="149" width="1.6322%" height="15" fill="rgb(232,129,53)" fg:x="1282" fg:w="440"/><text x="5.0485%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="6.3877%" y="149" width="0.0705%" height="15" fill="rgb(252,97,31)" fg:x="1722" fg:w="19"/><text x="6.6807%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="6.4582%" y="133" width="0.3079%" height="15" fill="rgb(212,53,1)" fg:x="1741" fg:w="83"/><text x="6.7512%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="6.7661%" y="101" width="0.2485%" height="15" fill="rgb(209,24,41)" fg:x="1824" fg:w="67"/><text x="7.0590%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.36%)</title><rect x="6.7661%" y="117" width="0.3635%" height="15" fill="rgb(238,163,18)" fg:x="1824" fg:w="98"/><text x="7.0590%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="7.1296%" y="69" width="0.0408%" height="15" fill="rgb(251,161,42)" fg:x="1922" fg:w="11"/><text x="7.4226%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="7.1704%" y="53" width="0.1298%" height="15" fill="rgb(247,135,26)" fg:x="1933" fg:w="35"/><text x="7.4634%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.24%)</title><rect x="7.1704%" y="69" width="0.2448%" height="15" fill="rgb(225,209,22)" fg:x="1933" fg:w="66"/><text x="7.4634%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.55%)</title><rect x="7.1296%" y="85" width="0.5453%" height="15" fill="rgb(243,150,44)" fg:x="1922" fg:w="147"/><text x="7.4226%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.79%)</title><rect x="7.1296%" y="101" width="0.7864%" height="15" fill="rgb(212,35,16)" fg:x="1922" fg:w="212"/><text x="7.4226%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.82%)</title><rect x="7.1296%" y="117" width="0.8235%" height="15" fill="rgb(239,50,34)" fg:x="1922" fg:w="222"/><text x="7.4226%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 1.71%)</title><rect x="6.7661%" y="133" width="1.7101%" height="15" fill="rgb(252,203,27)" fg:x="1824" fg:w="461"/><text x="7.0590%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 2.56%)</title><rect x="6.4582%" y="149" width="2.5558%" height="15" fill="rgb(219,91,2)" fg:x="1741" fg:w="689"/><text x="6.7512%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.35%)</title><rect x="9.0140%" y="149" width="0.3524%" height="15" fill="rgb(244,12,51)" fg:x="2430" fg:w="95"/><text x="9.3070%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="9.3664%" y="149" width="0.2226%" height="15" fill="rgb(244,4,50)" fg:x="2525" fg:w="60"/><text x="9.6594%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="9.5890%" y="149" width="0.2819%" height="15" fill="rgb(226,91,7)" fg:x="2585" fg:w="76"/><text x="9.8820%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.26%)</title><rect x="9.8709%" y="149" width="0.2597%" height="15" fill="rgb(244,49,44)" fg:x="2661" fg:w="70"/><text x="10.1639%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.1306%" y="117" width="0.0223%" height="15" fill="rgb(221,215,15)" fg:x="2731" fg:w="6"/><text x="10.4235%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.63%)</title><rect x="10.1306%" y="133" width="1.6322%" height="15" fill="rgb(213,70,51)" fg:x="2731" fg:w="440"/><text x="10.4235%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="11.7627%" y="133" width="0.0705%" height="15" fill="rgb(233,174,41)" fg:x="3171" fg:w="19"/><text x="12.0557%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="11.8332%" y="117" width="0.3079%" height="15" fill="rgb(209,167,41)" fg:x="3190" fg:w="83"/><text x="12.1262%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.25%)</title><rect x="12.1411%" y="85" width="0.2485%" height="15" fill="rgb(206,49,18)" fg:x="3273" fg:w="67"/><text x="12.4341%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.36%)</title><rect x="12.1411%" y="101" width="0.3635%" height="15" fill="rgb(253,80,26)" fg:x="3273" fg:w="98"/><text x="12.4341%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="12.5046%" y="53" width="0.0408%" height="15" fill="rgb(210,74,50)" fg:x="3371" fg:w="11"/><text x="12.7976%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.13%)</title><rect x="12.5454%" y="37" width="0.1298%" height="15" fill="rgb(212,147,44)" fg:x="3382" fg:w="35"/><text x="12.8384%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.24%)</title><rect x="12.5454%" y="53" width="0.2448%" height="15" fill="rgb(249,219,18)" fg:x="3382" fg:w="66"/><text x="12.8384%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.55%)</title><rect x="12.5046%" y="69" width="0.5453%" height="15" fill="rgb(249,53,36)" fg:x="3371" fg:w="147"/><text x="12.7976%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.79%)</title><rect x="12.5046%" y="85" width="0.7864%" height="15" fill="rgb(247,13,35)" fg:x="3371" fg:w="212"/><text x="12.7976%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.82%)</title><rect x="12.5046%" y="101" width="0.8235%" height="15" fill="rgb(210,204,18)" fg:x="3371" fg:w="222"/><text x="12.7976%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 1.71%)</title><rect x="12.1411%" y="117" width="1.7101%" height="15" fill="rgb(231,6,33)" fg:x="3273" fg:w="461"/><text x="12.4341%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 2.56%)</title><rect x="11.8332%" y="133" width="2.5558%" height="15" fill="rgb(254,147,1)" fg:x="3190" fg:w="689"/><text x="12.1262%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.35%)</title><rect x="14.3890%" y="133" width="0.3524%" height="15" fill="rgb(239,147,37)" fg:x="3879" fg:w="95"/><text x="14.6820%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="14.7414%" y="133" width="0.2226%" height="15" fill="rgb(221,175,14)" fg:x="3974" fg:w="60"/><text x="15.0344%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.30%)</title><rect x="14.9640%" y="117" width="0.3042%" height="15" fill="rgb(227,35,40)" fg:x="4034" fg:w="82"/><text x="15.2570%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.35%)</title><rect x="15.2682%" y="117" width="0.3524%" height="15" fill="rgb(216,132,12)" fg:x="4116" fg:w="95"/><text x="15.5612%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="15.6206%" y="117" width="0.2819%" height="15" fill="rgb(232,183,20)" fg:x="4211" fg:w="76"/><text x="15.9136%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.22%)</title><rect x="14.9640%" y="133" width="1.2241%" height="15" fill="rgb(249,155,37)" fg:x="4034" fg:w="330"/><text x="15.2570%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.30%)</title><rect x="16.1881%" y="133" width="0.3042%" height="15" fill="rgb(221,144,30)" fg:x="4364" fg:w="82"/><text x="16.4811%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 7.27%)</title><rect x="10.1306%" y="149" width="7.2706%" height="15" fill="rgb(214,53,8)" fg:x="2731" fg:w="1960"/><text x="10.4235%" y="159.50">binread:..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.28%)</title><rect x="17.4011%" y="149" width="0.2819%" height="15" fill="rgb(235,19,5)" fg:x="4691" fg:w="76"/><text x="17.6941%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.6831%" y="149" width="0.0556%" height="15" fill="rgb(232,17,4)" fg:x="4767" fg:w="15"/><text x="17.9760%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="17.7387%" y="149" width="0.0556%" height="15" fill="rgb(222,197,34)" fg:x="4782" fg:w="15"/><text x="18.0317%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.03%)</title><rect x="17.7943%" y="149" width="0.0334%" height="15" fill="rgb(221,159,24)" fg:x="4797" fg:w="9"/><text x="18.0873%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.07%)</title><rect x="17.8277%" y="149" width="0.0668%" height="15" fill="rgb(231,63,46)" fg:x="4806" fg:w="18"/><text x="18.1207%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="17.8945%" y="133" width="0.3079%" height="15" fill="rgb(252,93,41)" fg:x="4824" fg:w="83"/><text x="18.1875%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.66%)</title><rect x="17.8945%" y="149" width="0.6640%" height="15" fill="rgb(205,173,13)" fg:x="4824" fg:w="179"/><text x="18.1875%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="18.5585%" y="117" width="0.3079%" height="15" fill="rgb(236,108,21)" fg:x="5003" fg:w="83"/><text x="18.8515%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.47%)</title><rect x="18.5585%" y="133" width="0.4674%" height="15" fill="rgb(223,135,45)" fg:x="5003" fg:w="126"/><text x="18.8515%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.77%)</title><rect x="18.5585%" y="149" width="0.7716%" height="15" fill="rgb(233,219,48)" fg:x="5003" fg:w="208"/><text x="18.8515%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="19.3301%" y="149" width="0.3079%" height="15" fill="rgb(227,155,28)" fg:x="5211" fg:w="83"/><text x="19.6230%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.32%)</title><rect x="19.6380%" y="149" width="0.3190%" height="15" fill="rgb(219,145,43)" fg:x="5294" fg:w="86"/><text x="19.9309%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="19.9570%" y="149" width="0.3079%" height="15" fill="rgb(221,212,6)" fg:x="5380" fg:w="83"/><text x="20.2499%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="20.2649%" y="149" width="0.3079%" height="15" fill="rgb(252,84,28)" fg:x="5463" fg:w="83"/><text x="20.5578%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="20.5727%" y="149" width="0.0148%" height="15" fill="rgb(218,217,48)" fg:x="5546" fg:w="4"/><text x="20.8657%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.32%)</title><rect x="20.5876%" y="149" width="0.3190%" height="15" fill="rgb(251,224,43)" fg:x="5550" fg:w="86"/><text x="20.8805%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.59%)</title><rect x="20.9066%" y="149" width="1.5877%" height="15" fill="rgb(243,196,32)" fg:x="5636" fg:w="428"/><text x="21.1996%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.59%)</title><rect x="22.4943%" y="149" width="1.5877%" height="15" fill="rgb(236,209,34)" fg:x="6064" fg:w="428"/><text x="22.7872%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,366 instructions, 27.32%)</title><rect x="1.0127%" y="165" width="27.3240%" height="15" fill="rgb(232,102,5)" fg:x="273" fg:w="7366"/><text x="1.3057%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 1.41%)</title><rect x="28.3367%" y="165" width="1.4096%" height="15" fill="rgb(254,113,39)" fg:x="7639" fg:w="380"/><text x="28.6296%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.05%)</title><rect x="29.7463%" y="149" width="0.0519%" height="15" fill="rgb(231,174,37)" fg:x="8019" fg:w="14"/><text x="30.0392%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.23%)</title><rect x="29.7463%" y="165" width="0.2337%" height="15" fill="rgb(220,147,49)" fg:x="8019" fg:w="63"/><text x="30.0392%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="29.9800%" y="165" width="0.3079%" height="15" fill="rgb(230,181,13)" fg:x="8082" fg:w="83"/><text x="30.2729%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.05%)</title><rect x="30.2879%" y="149" width="0.0519%" height="15" fill="rgb(224,138,13)" fg:x="8165" fg:w="14"/><text x="30.5808%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="30.3398%" y="133" width="0.2189%" height="15" fill="rgb(222,46,43)" fg:x="8179" fg:w="59"/><text x="30.6328%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="30.5586%" y="133" width="0.3487%" height="15" fill="rgb(241,0,25)" fg:x="8238" fg:w="94"/><text x="30.8516%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.64%)</title><rect x="30.9073%" y="133" width="0.6417%" height="15" fill="rgb(239,29,11)" fg:x="8332" fg:w="173"/><text x="31.2003%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.15%)</title><rect x="30.3398%" y="149" width="2.1478%" height="15" fill="rgb(238,40,24)" fg:x="8179" fg:w="579"/><text x="30.6328%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (821 instructions, 3.05%)</title><rect x="30.2879%" y="165" width="3.0455%" height="15" fill="rgb(213,19,20)" fg:x="8165" fg:w="821"/><text x="30.5808%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="33.3333%" y="165" width="0.3079%" height="15" fill="rgb(212,1,43)" fg:x="8986" fg:w="83"/><text x="33.6263%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.05%)</title><rect x="33.6412%" y="149" width="0.0519%" height="15" fill="rgb(253,165,40)" fg:x="9069" fg:w="14"/><text x="33.9342%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="33.6932%" y="133" width="0.2189%" height="15" fill="rgb(247,56,18)" fg:x="9083" fg:w="59"/><text x="33.9861%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.35%)</title><rect x="33.9120%" y="133" width="0.3487%" height="15" fill="rgb(241,187,2)" fg:x="9142" fg:w="94"/><text x="34.2050%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.64%)</title><rect x="34.2607%" y="133" width="0.6417%" height="15" fill="rgb(207,82,45)" fg:x="9236" fg:w="173"/><text x="34.5537%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.15%)</title><rect x="33.6932%" y="149" width="2.1478%" height="15" fill="rgb(205,21,38)" fg:x="9083" fg:w="579"/><text x="33.9861%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.29%)</title><rect x="35.8409%" y="149" width="0.2856%" height="15" fill="rgb(219,29,17)" fg:x="9662" fg:w="77"/><text x="36.1339%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.32%)</title><rect x="36.1266%" y="133" width="0.3190%" height="15" fill="rgb(215,86,40)" fg:x="9739" fg:w="86"/><text x="36.4195%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.45%)</title><rect x="36.1266%" y="149" width="0.4488%" height="15" fill="rgb(217,90,30)" fg:x="9739" fg:w="121"/><text x="36.4195%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 3.66%)</title><rect x="33.6412%" y="165" width="3.6575%" height="15" fill="rgb(232,209,28)" fg:x="9069" fg:w="986"/><text x="33.9342%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.22%)</title><rect x="37.2988%" y="117" width="0.2189%" height="15" fill="rgb(247,118,23)" fg:x="10055" fg:w="59"/><text x="37.5917%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.35%)</title><rect x="37.2988%" y="133" width="0.3487%" height="15" fill="rgb(225,126,28)" fg:x="10055" fg:w="94"/><text x="37.5917%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 1.17%)</title><rect x="37.2988%" y="149" width="1.1685%" height="15" fill="rgb(251,6,50)" fg:x="10055" fg:w="315"/><text x="37.5917%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.848 (18 instructions, 0.07%)</title><rect x="38.4672%" y="149" width="0.0668%" height="15" fill="rgb(234,93,44)" fg:x="10370" fg:w="18"/><text x="38.7602%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="38.5340%" y="149" width="0.0482%" height="15" fill="rgb(245,52,45)" fg:x="10388" fg:w="13"/><text x="38.8270%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 2.04%)</title><rect x="37.2988%" y="165" width="2.0439%" height="15" fill="rgb(251,196,33)" fg:x="10055" fg:w="551"/><text x="37.5917%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.20%)</title><rect x="39.3427%" y="165" width="0.1966%" height="15" fill="rgb(252,127,16)" fg:x="10606" fg:w="53"/><text x="39.6356%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.49%)</title><rect x="39.5393%" y="149" width="0.4897%" height="15" fill="rgb(241,218,34)" fg:x="10659" fg:w="132"/><text x="39.8323%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.49%)</title><rect x="40.1588%" y="149" width="0.4897%" height="15" fill="rgb(229,142,54)" fg:x="10826" fg:w="132"/><text x="40.4517%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 1.24%)</title><rect x="39.5393%" y="165" width="1.2390%" height="15" fill="rgb(243,21,29)" fg:x="10659" fg:w="334"/><text x="39.8323%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.13%)</title><rect x="40.7782%" y="149" width="0.1261%" height="15" fill="rgb(245,62,54)" fg:x="10993" fg:w="34"/><text x="41.0712%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.07%)</title><rect x="40.9044%" y="149" width="0.0668%" height="15" fill="rgb(231,66,12)" fg:x="11027" fg:w="18"/><text x="41.1973%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.07%)</title><rect x="40.9711%" y="149" width="0.0668%" height="15" fill="rgb(226,207,30)" fg:x="11045" fg:w="18"/><text x="41.2641%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.63%)</title><rect x="40.7782%" y="165" width="0.6269%" height="15" fill="rgb(254,180,31)" fg:x="10993" fg:w="169"/><text x="41.0712%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.4051%" y="165" width="0.0482%" height="15" fill="rgb(205,78,40)" fg:x="11162" fg:w="13"/><text x="41.6981%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.4534%" y="165" width="0.0482%" height="15" fill="rgb(206,132,44)" fg:x="11175" fg:w="13"/><text x="41.7463%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.5016%" y="165" width="0.0482%" height="15" fill="rgb(245,24,4)" fg:x="11188" fg:w="13"/><text x="41.7946%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.63%)</title><rect x="41.5498%" y="165" width="1.6322%" height="15" fill="rgb(215,135,28)" fg:x="11201" fg:w="440"/><text x="41.8428%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.07%)</title><rect x="43.1820%" y="133" width="0.0705%" height="15" fill="rgb(238,206,12)" fg:x="11641" fg:w="19"/><text x="43.4750%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.67%)</title><rect x="43.2525%" y="133" width="0.6714%" height="15" fill="rgb(218,203,3)" fg:x="11660" fg:w="181"/><text x="43.5454%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.37%)</title><rect x="43.9239%" y="101" width="0.3709%" height="15" fill="rgb(245,38,1)" fg:x="11841" fg:w="100"/><text x="44.2169%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (214 instructions, 0.79%)</title><rect x="43.9239%" y="117" width="0.7938%" height="15" fill="rgb(248,37,2)" fg:x="11841" fg:w="214"/><text x="44.2169%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 instructions, 0.92%)</title><rect x="43.9239%" y="133" width="0.9237%" height="15" fill="rgb(223,72,48)" fg:x="11841" fg:w="249"/><text x="44.2169%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="44.8475%" y="133" width="0.0482%" height="15" fill="rgb(246,98,40)" fg:x="12090" fg:w="13"/><text x="45.1405%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (524 instructions, 1.94%)</title><rect x="43.1820%" y="149" width="1.9438%" height="15" fill="rgb(238,22,49)" fg:x="11641" fg:w="524"/><text x="43.4750%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (573 instructions, 2.13%)</title><rect x="43.1820%" y="165" width="2.1255%" height="15" fill="rgb(248,96,9)" fg:x="11641" fg:w="573"/><text x="43.4750%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.23%)</title><rect x="45.3075%" y="149" width="0.2300%" height="15" fill="rgb(207,69,26)" fg:x="12214" fg:w="62"/><text x="45.6005%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.37%)</title><rect x="45.5375%" y="149" width="0.3709%" height="15" fill="rgb(214,200,19)" fg:x="12276" fg:w="100"/><text x="45.8305%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (261 instructions, 0.97%)</title><rect x="45.3075%" y="165" width="0.9682%" height="15" fill="rgb(219,24,14)" fg:x="12214" fg:w="261"/><text x="45.6005%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,753 instructions, 51.02%)</title><rect x="0.7048%" y="181" width="51.0164%" height="15" fill="rgb(209,56,12)" fg:x="190" fg:w="13753"/><text x="0.9978%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="51.7212%" y="181" width="0.5713%" height="15" fill="rgb(212,180,46)" fg:x="13943" fg:w="154"/><text x="52.0142%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="52.2925%" y="181" width="0.5713%" height="15" fill="rgb(233,106,13)" fg:x="14097" fg:w="154"/><text x="52.5854%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="52.8637%" y="181" width="0.5713%" height="15" fill="rgb(236,155,14)" fg:x="14251" fg:w="154"/><text x="53.1567%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="53.4350%" y="181" width="0.5713%" height="15" fill="rgb(226,189,53)" fg:x="14405" fg:w="154"/><text x="53.7279%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="54.0062%" y="181" width="0.5713%" height="15" fill="rgb(214,191,22)" fg:x="14559" fg:w="154"/><text x="54.2992%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="54.5775%" y="181" width="0.5713%" height="15" fill="rgb(212,132,20)" fg:x="14713" fg:w="154"/><text x="54.8705%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="55.1487%" y="181" width="0.5713%" height="15" fill="rgb(208,87,12)" fg:x="14867" fg:w="154"/><text x="55.4417%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="55.7200%" y="181" width="0.5713%" height="15" fill="rgb(216,9,4)" fg:x="15021" fg:w="154"/><text x="56.0130%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="56.2913%" y="181" width="0.5713%" height="15" fill="rgb(205,215,0)" fg:x="15175" fg:w="154"/><text x="56.5842%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="56.8625%" y="181" width="0.5713%" height="15" fill="rgb(250,78,41)" fg:x="15329" fg:w="154"/><text x="57.1555%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="57.4338%" y="181" width="0.5713%" height="15" fill="rgb(219,195,31)" fg:x="15483" fg:w="154"/><text x="57.7268%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="58.0050%" y="181" width="0.5713%" height="15" fill="rgb(215,151,10)" fg:x="15637" fg:w="154"/><text x="58.2980%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="58.5763%" y="181" width="0.5713%" height="15" fill="rgb(226,78,38)" fg:x="15791" fg:w="154"/><text x="58.8693%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (221 instructions, 0.82%)</title><rect x="59.1476%" y="181" width="0.8198%" height="15" fill="rgb(217,95,2)" fg:x="15945" fg:w="221"/><text x="59.4405%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="59.9674%" y="181" width="0.5713%" height="15" fill="rgb(221,174,15)" fg:x="16166" fg:w="154"/><text x="60.2603%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="60.5386%" y="181" width="0.5713%" height="15" fill="rgb(252,136,34)" fg:x="16320" fg:w="154"/><text x="60.8316%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="61.1099%" y="181" width="0.5713%" height="15" fill="rgb(234,77,45)" fg:x="16474" fg:w="154"/><text x="61.4028%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="61.6811%" y="181" width="0.5713%" height="15" fill="rgb(232,128,10)" fg:x="16628" fg:w="154"/><text x="61.9741%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="62.2524%" y="181" width="0.5713%" height="15" fill="rgb(211,85,28)" fg:x="16782" fg:w="154"/><text x="62.5454%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="62.8237%" y="181" width="0.5713%" height="15" fill="rgb(237,157,37)" fg:x="16936" fg:w="154"/><text x="63.1166%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="63.3949%" y="181" width="0.5713%" height="15" fill="rgb(230,204,27)" fg:x="17090" fg:w="154"/><text x="63.6879%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="63.9662%" y="181" width="0.5713%" height="15" fill="rgb(247,128,13)" fg:x="17244" fg:w="154"/><text x="64.2591%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="64.5374%" y="181" width="0.5713%" height="15" fill="rgb(212,138,51)" fg:x="17398" fg:w="154"/><text x="64.8304%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="65.1087%" y="181" width="0.5713%" height="15" fill="rgb(246,67,21)" fg:x="17552" fg:w="154"/><text x="65.4017%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (221 instructions, 0.82%)</title><rect x="65.6799%" y="181" width="0.8198%" height="15" fill="rgb(222,208,1)" fg:x="17706" fg:w="221"/><text x="65.9729%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="66.4997%" y="181" width="0.5713%" height="15" fill="rgb(246,17,33)" fg:x="17927" fg:w="154"/><text x="66.7927%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="67.0710%" y="181" width="0.5713%" height="15" fill="rgb(217,105,32)" fg:x="18081" fg:w="154"/><text x="67.3640%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="67.6423%" y="181" width="0.5713%" height="15" fill="rgb(229,208,35)" fg:x="18235" fg:w="154"/><text x="67.9352%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="68.2135%" y="181" width="0.5713%" height="15" fill="rgb(253,181,19)" fg:x="18389" fg:w="154"/><text x="68.5065%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="68.7848%" y="181" width="0.5713%" height="15" fill="rgb(230,112,9)" fg:x="18543" fg:w="154"/><text x="69.0777%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="69.3560%" y="181" width="0.5713%" height="15" fill="rgb(209,119,30)" fg:x="18697" fg:w="154"/><text x="69.6490%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="69.9273%" y="181" width="0.5713%" height="15" fill="rgb(241,112,12)" fg:x="18851" fg:w="154"/><text x="70.2203%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="70.4986%" y="181" width="0.5713%" height="15" fill="rgb(229,62,7)" fg:x="19005" fg:w="154"/><text x="70.7915%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="71.0698%" y="181" width="0.5713%" height="15" fill="rgb(224,93,9)" fg:x="19159" fg:w="154"/><text x="71.3628%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="71.6411%" y="181" width="0.5713%" height="15" fill="rgb(225,94,52)" fg:x="19313" fg:w="154"/><text x="71.9340%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="72.2123%" y="181" width="0.5713%" height="15" fill="rgb(223,170,1)" fg:x="19467" fg:w="154"/><text x="72.5053%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="72.7836%" y="181" width="0.5713%" height="15" fill="rgb(206,169,3)" fg:x="19621" fg:w="154"/><text x="73.0766%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="73.3548%" y="181" width="0.5713%" height="15" fill="rgb(248,11,7)" fg:x="19775" fg:w="154"/><text x="73.6478%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="73.9261%" y="181" width="0.5713%" height="15" fill="rgb(233,227,47)" fg:x="19929" fg:w="154"/><text x="74.2191%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="74.4974%" y="181" width="0.5713%" height="15" fill="rgb(219,212,39)" fg:x="20083" fg:w="154"/><text x="74.7903%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="75.0686%" y="181" width="0.5713%" height="15" fill="rgb(241,212,38)" fg:x="20237" fg:w="154"/><text x="75.3616%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="75.6399%" y="181" width="0.5713%" height="15" fill="rgb(216,77,9)" fg:x="20391" fg:w="154"/><text x="75.9329%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="76.2111%" y="181" width="0.5713%" height="15" fill="rgb(207,172,45)" fg:x="20545" fg:w="154"/><text x="76.5041%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="76.7824%" y="181" width="0.5713%" height="15" fill="rgb(241,27,16)" fg:x="20699" fg:w="154"/><text x="77.0754%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="77.3537%" y="181" width="0.5713%" height="15" fill="rgb(227,107,40)" fg:x="20853" fg:w="154"/><text x="77.6466%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="77.9249%" y="181" width="0.5713%" height="15" fill="rgb(221,157,12)" fg:x="21007" fg:w="154"/><text x="78.2179%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="78.4962%" y="181" width="0.5713%" height="15" fill="rgb(253,182,41)" fg:x="21161" fg:w="154"/><text x="78.7891%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (288 instructions, 1.07%)</title><rect x="79.0674%" y="181" width="1.0683%" height="15" fill="rgb(235,163,4)" fg:x="21315" fg:w="288"/><text x="79.3604%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="80.1358%" y="181" width="0.5713%" height="15" fill="rgb(209,96,23)" fg:x="21603" fg:w="154"/><text x="80.4287%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.57%)</title><rect x="80.7070%" y="181" width="0.5713%" height="15" fill="rgb(227,205,11)" fg:x="21757" fg:w="154"/><text x="81.0000%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.05%)</title><rect x="81.2783%" y="149" width="0.0519%" height="15" fill="rgb(216,50,12)" fg:x="21911" fg:w="14"/><text x="81.5713%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.23%)</title><rect x="81.3302%" y="117" width="0.2300%" height="15" fill="rgb(211,51,11)" fg:x="21925" fg:w="62"/><text x="81.6232%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (156 instructions, 0.58%)</title><rect x="81.3302%" y="133" width="0.5787%" height="15" fill="rgb(214,113,1)" fg:x="21925" fg:w="156"/><text x="81.6232%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 0.71%)</title><rect x="81.3302%" y="149" width="0.7085%" height="15" fill="rgb(225,206,9)" fg:x="21925" fg:w="191"/><text x="81.6232%" y="159.50"></text></g><g><title>memset (152 instructions, 0.56%)</title><rect x="82.0387%" y="149" width="0.5638%" height="15" fill="rgb(244,33,31)" fg:x="22116" fg:w="152"/><text x="82.3317%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (537 instructions, 1.99%)</title><rect x="81.2783%" y="165" width="1.9920%" height="15" fill="rgb(217,109,38)" fg:x="21911" fg:w="537"/><text x="81.5713%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.92%)</title><rect x="83.2703%" y="149" width="1.9215%" height="15" fill="rgb(252,103,36)" fg:x="22448" fg:w="518"/><text x="83.5632%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.31%)</title><rect x="85.1918%" y="101" width="0.3079%" height="15" fill="rgb(215,86,19)" fg:x="22966" fg:w="83"/><text x="85.4847%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.47%)</title><rect x="85.1918%" y="117" width="0.4674%" height="15" fill="rgb(247,64,51)" fg:x="22966" fg:w="126"/><text x="85.4847%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.76%)</title><rect x="85.1918%" y="133" width="0.7604%" height="15" fill="rgb(206,34,34)" fg:x="22966" fg:w="205"/><text x="85.4847%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="85.9522%" y="133" width="0.0556%" height="15" fill="rgb(215,63,44)" fg:x="23171" fg:w="15"/><text x="86.2452%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="86.0079%" y="133" width="0.0556%" height="15" fill="rgb(242,172,43)" fg:x="23186" fg:w="15"/><text x="86.3008%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 1.57%)</title><rect x="85.1918%" y="149" width="1.5691%" height="15" fill="rgb(225,8,28)" fg:x="22966" fg:w="423"/><text x="85.4847%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.91%)</title><rect x="86.7609%" y="149" width="1.9141%" height="15" fill="rgb(225,25,12)" fg:x="23389" fg:w="516"/><text x="87.0539%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="88.6750%" y="149" width="0.0260%" height="15" fill="rgb(248,150,37)" fg:x="23905" fg:w="7"/><text x="88.9679%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 5.78%)</title><rect x="83.2703%" y="165" width="5.7757%" height="15" fill="rgb(212,36,8)" fg:x="22448" fg:w="1557"/><text x="83.5632%" y="175.50">candid..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.02%)</title><rect x="89.0459%" y="165" width="0.0223%" height="15" fill="rgb(243,117,50)" fg:x="24005" fg:w="6"/><text x="89.3389%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.22%)</title><rect x="89.0682%" y="165" width="0.2226%" height="15" fill="rgb(212,215,50)" fg:x="24011" fg:w="60"/><text x="89.3611%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,766 instructions, 10.26%)</title><rect x="81.2783%" y="181" width="10.2604%" height="15" fill="rgb(235,200,26)" fg:x="21911" fg:w="2766"/><text x="81.5713%" y="191.50">ic_cdk::api:..</text></g><g><title>hashmap::batch_put_6_::{{closure}} (26,414 instructions, 97.98%)</title><rect x="0.7048%" y="197" width="97.9820%" height="15" fill="rgb(211,187,50)" fg:x="190" fg:w="26414"/><text x="0.9978%" y="207.50">hashmap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.05%)</title><rect x="98.6868%" y="197" width="0.0519%" height="15" fill="rgb(223,43,49)" fg:x="26604" fg:w="14"/><text x="98.9798%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.32%)</title><rect x="98.7425%" y="197" width="0.3190%" height="15" fill="rgb(232,223,11)" fg:x="26619" fg:w="86"/><text x="99.0355%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.40%)</title><rect x="99.0615%" y="197" width="0.4043%" height="15" fill="rgb(246,151,25)" fg:x="26705" fg:w="109"/><text x="99.3545%" y="207.50"></text></g><g><title>all (26,958 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(214,71,43)" fg:x="0" fg:w="26958"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (26,958 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,24,22)" fg:x="0" fg:w="26958"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>