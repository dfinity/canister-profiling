<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21539"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0882%" height="15" fill="rgb(251,196,42)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.0882%" y="197" width="0.3528%" height="15" fill="rgb(235,67,17)" fg:x="19" fg:w="76"/><text x="0.3812%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.4411%" y="197" width="0.3528%" height="15" fill="rgb(212,28,0)" fg:x="95" fg:w="76"/><text x="0.7340%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.7939%" y="165" width="0.3528%" height="15" fill="rgb(254,71,35)" fg:x="171" fg:w="76"/><text x="1.0869%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="1.1468%" y="149" width="0.3203%" height="15" fill="rgb(212,110,13)" fg:x="247" fg:w="69"/><text x="1.4397%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.4671%" y="133" width="0.0186%" height="15" fill="rgb(247,31,30)" fg:x="316" fg:w="4"/><text x="1.7601%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="1.4671%" y="149" width="1.8850%" height="15" fill="rgb(241,183,33)" fg:x="316" fg:w="406"/><text x="1.7601%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="3.3521%" y="149" width="0.3807%" height="15" fill="rgb(208,217,36)" fg:x="722" fg:w="82"/><text x="3.6450%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.7328%" y="149" width="0.2507%" height="15" fill="rgb(219,119,5)" fg:x="804" fg:w="54"/><text x="4.0257%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.9835%" y="149" width="0.2507%" height="15" fill="rgb(227,36,12)" fg:x="858" fg:w="54"/><text x="4.2764%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.2342%" y="149" width="0.2507%" height="15" fill="rgb(236,35,23)" fg:x="912" fg:w="54"/><text x="4.5271%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.4849%" y="149" width="0.2507%" height="15" fill="rgb(232,37,16)" fg:x="966" fg:w="54"/><text x="4.7779%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="4.7356%" y="149" width="0.3203%" height="15" fill="rgb(227,147,50)" fg:x="1020" fg:w="69"/><text x="5.0286%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="5.0559%" y="149" width="0.3018%" height="15" fill="rgb(235,173,6)" fg:x="1089" fg:w="65"/><text x="5.3489%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.3577%" y="133" width="0.0186%" height="15" fill="rgb(252,49,33)" fg:x="1154" fg:w="4"/><text x="5.6507%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="5.3577%" y="149" width="1.8850%" height="15" fill="rgb(212,118,0)" fg:x="1154" fg:w="406"/><text x="5.6507%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="7.2427%" y="149" width="0.0743%" height="15" fill="rgb(228,13,36)" fg:x="1560" fg:w="16"/><text x="7.5356%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="7.3170%" y="133" width="0.3528%" height="15" fill="rgb(233,63,43)" fg:x="1576" fg:w="76"/><text x="7.6099%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="7.6698%" y="101" width="0.2786%" height="15" fill="rgb(206,228,0)" fg:x="1652" fg:w="60"/><text x="7.9628%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="7.6698%" y="117" width="0.3946%" height="15" fill="rgb(219,94,8)" fg:x="1652" fg:w="85"/><text x="7.9628%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="8.0644%" y="69" width="0.0418%" height="15" fill="rgb(208,62,50)" fg:x="1737" fg:w="9"/><text x="8.3574%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="8.1062%" y="53" width="0.1393%" height="15" fill="rgb(216,145,13)" fg:x="1746" fg:w="30"/><text x="8.3992%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.26%)</title><rect x="8.1062%" y="69" width="0.2554%" height="15" fill="rgb(230,129,34)" fg:x="1746" fg:w="55"/><text x="8.3992%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="8.0644%" y="85" width="0.5478%" height="15" fill="rgb(246,102,40)" fg:x="1737" fg:w="118"/><text x="8.3574%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="8.0644%" y="101" width="0.7939%" height="15" fill="rgb(249,161,3)" fg:x="1737" fg:w="171"/><text x="8.3574%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.82%)</title><rect x="8.0644%" y="117" width="0.8171%" height="15" fill="rgb(217,197,18)" fg:x="1737" fg:w="176"/><text x="8.3574%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.73%)</title><rect x="7.6698%" y="133" width="1.7271%" height="15" fill="rgb(243,152,43)" fg:x="1652" fg:w="372"/><text x="7.9628%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.73%)</title><rect x="7.3170%" y="149" width="2.7346%" height="15" fill="rgb(212,70,13)" fg:x="1576" fg:w="589"/><text x="7.6099%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="10.0515%" y="149" width="0.3807%" height="15" fill="rgb(218,199,1)" fg:x="2165" fg:w="82"/><text x="10.3445%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="10.4322%" y="149" width="0.2554%" height="15" fill="rgb(254,113,52)" fg:x="2247" fg:w="55"/><text x="10.7252%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="10.6876%" y="149" width="0.2925%" height="15" fill="rgb(241,103,6)" fg:x="2302" fg:w="63"/><text x="10.9806%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="10.9801%" y="149" width="0.3018%" height="15" fill="rgb(242,13,28)" fg:x="2365" fg:w="65"/><text x="11.2731%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.2819%" y="117" width="0.0186%" height="15" fill="rgb(232,224,50)" fg:x="2430" fg:w="4"/><text x="11.5748%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="11.2819%" y="133" width="1.8850%" height="15" fill="rgb(208,42,39)" fg:x="2430" fg:w="406"/><text x="11.5748%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="13.1668%" y="133" width="0.0743%" height="15" fill="rgb(240,45,51)" fg:x="2836" fg:w="16"/><text x="13.4598%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="13.2411%" y="117" width="0.3528%" height="15" fill="rgb(254,211,34)" fg:x="2852" fg:w="76"/><text x="13.5341%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="13.5939%" y="85" width="0.2786%" height="15" fill="rgb(209,90,53)" fg:x="2928" fg:w="60"/><text x="13.8869%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="13.5939%" y="101" width="0.3946%" height="15" fill="rgb(229,228,45)" fg:x="2928" fg:w="85"/><text x="13.8869%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="13.9886%" y="53" width="0.0418%" height="15" fill="rgb(234,174,39)" fg:x="3013" fg:w="9"/><text x="14.2815%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="14.0304%" y="37" width="0.1393%" height="15" fill="rgb(208,65,47)" fg:x="3022" fg:w="30"/><text x="14.3233%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.26%)</title><rect x="14.0304%" y="53" width="0.2554%" height="15" fill="rgb(231,129,13)" fg:x="3022" fg:w="55"/><text x="14.3233%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="13.9886%" y="69" width="0.5478%" height="15" fill="rgb(230,47,19)" fg:x="3013" fg:w="118"/><text x="14.2815%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="13.9886%" y="85" width="0.7939%" height="15" fill="rgb(233,61,14)" fg:x="3013" fg:w="171"/><text x="14.2815%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.82%)</title><rect x="13.9886%" y="101" width="0.8171%" height="15" fill="rgb(249,106,28)" fg:x="3013" fg:w="176"/><text x="14.2815%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.73%)</title><rect x="13.5939%" y="117" width="1.7271%" height="15" fill="rgb(244,146,48)" fg:x="2928" fg:w="372"/><text x="13.8869%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.73%)</title><rect x="13.2411%" y="133" width="2.7346%" height="15" fill="rgb(233,192,1)" fg:x="2852" fg:w="589"/><text x="13.5341%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="15.9757%" y="133" width="0.3807%" height="15" fill="rgb(241,50,7)" fg:x="3441" fg:w="82"/><text x="16.2686%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="16.3564%" y="133" width="0.2554%" height="15" fill="rgb(240,10,13)" fg:x="3523" fg:w="55"/><text x="16.6493%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="16.6117%" y="117" width="0.3203%" height="15" fill="rgb(213,197,21)" fg:x="3578" fg:w="69"/><text x="16.9047%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.42%)</title><rect x="16.9321%" y="117" width="0.4225%" height="15" fill="rgb(250,51,22)" fg:x="3647" fg:w="91"/><text x="17.2250%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="17.3546%" y="117" width="0.2925%" height="15" fill="rgb(244,76,32)" fg:x="3738" fg:w="63"/><text x="17.6475%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.31%)</title><rect x="16.6117%" y="133" width="1.3093%" height="15" fill="rgb(233,89,23)" fg:x="3578" fg:w="282"/><text x="16.9047%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="17.9210%" y="133" width="0.3528%" height="15" fill="rgb(231,75,18)" fg:x="3860" fg:w="76"/><text x="18.2139%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 7.93%)</title><rect x="11.2819%" y="149" width="7.9344%" height="15" fill="rgb(220,85,22)" fg:x="2430" fg:w="1709"/><text x="11.5748%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="19.2163%" y="149" width="0.2925%" height="15" fill="rgb(216,129,39)" fg:x="4139" fg:w="63"/><text x="19.5093%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.5088%" y="149" width="0.0604%" height="15" fill="rgb(227,211,7)" fg:x="4202" fg:w="13"/><text x="19.8018%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.5692%" y="149" width="0.0604%" height="15" fill="rgb(246,59,28)" fg:x="4215" fg:w="13"/><text x="19.8621%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="19.6295%" y="149" width="0.0325%" height="15" fill="rgb(245,137,14)" fg:x="4228" fg:w="7"/><text x="19.9225%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="19.6620%" y="149" width="0.0696%" height="15" fill="rgb(245,96,18)" fg:x="4235" fg:w="15"/><text x="19.9550%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="19.7316%" y="133" width="0.3528%" height="15" fill="rgb(244,174,17)" fg:x="4250" fg:w="76"/><text x="20.0246%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.74%)</title><rect x="19.7316%" y="149" width="0.7382%" height="15" fill="rgb(230,144,12)" fg:x="4250" fg:w="159"/><text x="20.0246%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="20.4698%" y="117" width="0.3528%" height="15" fill="rgb(212,161,20)" fg:x="4409" fg:w="76"/><text x="20.7628%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="20.4698%" y="133" width="0.5107%" height="15" fill="rgb(246,82,1)" fg:x="4409" fg:w="110"/><text x="20.7628%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.83%)</title><rect x="20.4698%" y="149" width="0.8264%" height="15" fill="rgb(237,178,30)" fg:x="4409" fg:w="178"/><text x="20.7628%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.2963%" y="149" width="0.3528%" height="15" fill="rgb(216,88,46)" fg:x="4587" fg:w="76"/><text x="21.5892%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="21.6491%" y="149" width="0.3761%" height="15" fill="rgb(253,151,51)" fg:x="4663" fg:w="81"/><text x="21.9421%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="22.0252%" y="149" width="0.3528%" height="15" fill="rgb(210,199,43)" fg:x="4744" fg:w="76"/><text x="22.3181%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="22.3780%" y="149" width="0.3528%" height="15" fill="rgb(244,44,16)" fg:x="4820" fg:w="76"/><text x="22.6710%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="22.7401%" y="149" width="0.3761%" height="15" fill="rgb(225,2,24)" fg:x="4898" fg:w="81"/><text x="23.0331%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.76%)</title><rect x="23.1162%" y="149" width="1.7642%" height="15" fill="rgb(254,30,19)" fg:x="4979" fg:w="380"/><text x="23.4092%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.76%)</title><rect x="24.8804%" y="149" width="1.7642%" height="15" fill="rgb(213,44,37)" fg:x="5359" fg:w="380"/><text x="25.1734%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,436 instructions, 29.88%)</title><rect x="1.1468%" y="165" width="29.8807%" height="15" fill="rgb(205,79,28)" fg:x="247" fg:w="6436"/><text x="1.4397%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (335 instructions, 1.56%)</title><rect x="31.0274%" y="165" width="1.5553%" height="15" fill="rgb(243,136,48)" fg:x="6683" fg:w="335"/><text x="31.3204%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="32.5828%" y="149" width="0.0232%" height="15" fill="rgb(253,3,7)" fg:x="7018" fg:w="5"/><text x="32.8757%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.18%)</title><rect x="32.5828%" y="165" width="0.1811%" height="15" fill="rgb(250,189,19)" fg:x="7018" fg:w="39"/><text x="32.8757%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="32.7638%" y="165" width="0.3528%" height="15" fill="rgb(218,86,45)" fg:x="7057" fg:w="76"/><text x="33.0568%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="33.1167%" y="149" width="0.0232%" height="15" fill="rgb(215,18,10)" fg:x="7133" fg:w="5"/><text x="33.4096%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="33.1399%" y="133" width="0.2461%" height="15" fill="rgb(238,112,25)" fg:x="7138" fg:w="53"/><text x="33.4329%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="33.3860%" y="133" width="0.4086%" height="15" fill="rgb(238,27,26)" fg:x="7191" fg:w="88"/><text x="33.6789%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="33.7945%" y="133" width="0.7521%" height="15" fill="rgb(237,20,54)" fg:x="7279" fg:w="162"/><text x="34.0875%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.51%)</title><rect x="33.1399%" y="149" width="2.5071%" height="15" fill="rgb(245,45,1)" fg:x="7138" fg:w="540"/><text x="33.4329%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (749 instructions, 3.48%)</title><rect x="33.1167%" y="165" width="3.4774%" height="15" fill="rgb(222,205,30)" fg:x="7133" fg:w="749"/><text x="33.4096%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="36.5941%" y="165" width="0.3528%" height="15" fill="rgb(233,204,44)" fg:x="7882" fg:w="76"/><text x="36.8871%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="36.9469%" y="149" width="0.0232%" height="15" fill="rgb(217,19,12)" fg:x="7958" fg:w="5"/><text x="37.2399%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="36.9701%" y="133" width="0.2461%" height="15" fill="rgb(236,121,39)" fg:x="7963" fg:w="53"/><text x="37.2631%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="37.2162%" y="133" width="0.4086%" height="15" fill="rgb(212,164,53)" fg:x="8016" fg:w="88"/><text x="37.5092%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="37.6248%" y="133" width="0.7521%" height="15" fill="rgb(234,47,10)" fg:x="8104" fg:w="162"/><text x="37.9177%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.51%)</title><rect x="36.9701%" y="149" width="2.5071%" height="15" fill="rgb(237,68,48)" fg:x="7963" fg:w="540"/><text x="37.2631%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.32%)</title><rect x="39.4772%" y="149" width="0.3157%" height="15" fill="rgb(209,168,10)" fg:x="8503" fg:w="68"/><text x="39.7702%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="39.7929%" y="133" width="0.3761%" height="15" fill="rgb(253,87,3)" fg:x="8571" fg:w="81"/><text x="40.0859%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.50%)</title><rect x="39.7929%" y="149" width="0.5014%" height="15" fill="rgb(236,107,33)" fg:x="8571" fg:w="108"/><text x="40.0859%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 4.13%)</title><rect x="36.9469%" y="165" width="4.1320%" height="15" fill="rgb(245,45,32)" fg:x="7958" fg:w="890"/><text x="37.2399%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="41.0790%" y="117" width="0.2461%" height="15" fill="rgb(247,80,42)" fg:x="8848" fg:w="53"/><text x="41.3719%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.36%)</title><rect x="41.0790%" y="133" width="0.3621%" height="15" fill="rgb(225,132,22)" fg:x="8848" fg:w="78"/><text x="41.3719%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.36%)</title><rect x="41.0790%" y="149" width="1.3603%" height="15" fill="rgb(211,228,35)" fg:x="8848" fg:w="293"/><text x="41.3719%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1287 (15 instructions, 0.07%)</title><rect x="42.4393%" y="149" width="0.0696%" height="15" fill="rgb(223,108,28)" fg:x="9141" fg:w="15"/><text x="42.7323%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="42.5089%" y="149" width="0.0511%" height="15" fill="rgb(230,164,21)" fg:x="9156" fg:w="11"/><text x="42.8019%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.22%)</title><rect x="41.0790%" y="165" width="2.2192%" height="15" fill="rgb(226,139,32)" fg:x="8848" fg:w="478"/><text x="41.3719%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.22%)</title><rect x="43.2982%" y="165" width="0.2182%" height="15" fill="rgb(252,57,49)" fg:x="9326" fg:w="47"/><text x="43.5912%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="43.5164%" y="149" width="0.5711%" height="15" fill="rgb(206,32,32)" fg:x="9373" fg:w="123"/><text x="43.8094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="44.2128%" y="149" width="0.5711%" height="15" fill="rgb(217,34,49)" fg:x="9523" fg:w="123"/><text x="44.5058%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.39%)</title><rect x="43.5164%" y="165" width="1.3928%" height="15" fill="rgb(216,24,14)" fg:x="9373" fg:w="300"/><text x="43.8094%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.13%)</title><rect x="44.9092%" y="149" width="0.1300%" height="15" fill="rgb(227,207,2)" fg:x="9673" fg:w="28"/><text x="45.2022%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.45%)</title><rect x="44.9092%" y="165" width="0.4503%" height="15" fill="rgb(219,18,4)" fg:x="9673" fg:w="97"/><text x="45.2022%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.3596%" y="165" width="0.0511%" height="15" fill="rgb(229,159,39)" fg:x="9770" fg:w="11"/><text x="45.6525%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.4107%" y="165" width="0.0511%" height="15" fill="rgb(233,200,12)" fg:x="9781" fg:w="11"/><text x="45.7036%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.4617%" y="165" width="0.0511%" height="15" fill="rgb(246,220,44)" fg:x="9792" fg:w="11"/><text x="45.7547%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.90%)</title><rect x="45.5128%" y="165" width="1.9035%" height="15" fill="rgb(212,207,17)" fg:x="9803" fg:w="410"/><text x="45.8058%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="47.4163%" y="133" width="0.0557%" height="15" fill="rgb(232,102,9)" fg:x="10213" fg:w="12"/><text x="47.7093%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.78%)</title><rect x="47.4720%" y="133" width="0.7800%" height="15" fill="rgb(218,91,43)" fg:x="10225" fg:w="168"/><text x="47.7650%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="48.2520%" y="101" width="0.4411%" height="15" fill="rgb(221,129,16)" fg:x="10393" fg:w="95"/><text x="48.5450%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 1.11%)</title><rect x="48.2520%" y="117" width="1.1143%" height="15" fill="rgb(250,166,23)" fg:x="10393" fg:w="240"/><text x="48.5450%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 instructions, 1.24%)</title><rect x="48.2520%" y="133" width="1.2396%" height="15" fill="rgb(208,81,46)" fg:x="10393" fg:w="267"/><text x="48.5450%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="49.4916%" y="133" width="0.0511%" height="15" fill="rgb(246,219,22)" fg:x="10660" fg:w="11"/><text x="49.7846%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (500 instructions, 2.32%)</title><rect x="47.4163%" y="149" width="2.3214%" height="15" fill="rgb(253,116,47)" fg:x="10213" fg:w="500"/><text x="47.7093%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 2.48%)</title><rect x="47.4163%" y="165" width="2.4839%" height="15" fill="rgb(210,170,19)" fg:x="10213" fg:w="535"/><text x="47.7093%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="49.9002%" y="149" width="0.2507%" height="15" fill="rgb(214,57,15)" fg:x="10748" fg:w="54"/><text x="50.1931%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="50.1509%" y="149" width="0.4411%" height="15" fill="rgb(229,79,23)" fg:x="10802" fg:w="95"/><text x="50.4439%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.07%)</title><rect x="49.9002%" y="165" width="1.0678%" height="15" fill="rgb(222,120,27)" fg:x="10748" fg:w="230"/><text x="50.1931%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,198 instructions, 51.99%)</title><rect x="0.7939%" y="181" width="51.9894%" height="15" fill="rgb(209,157,33)" fg:x="171" fg:w="11198"/><text x="1.0869%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="52.7833%" y="181" width="0.6918%" height="15" fill="rgb(229,84,51)" fg:x="11369" fg:w="149"/><text x="53.0763%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="53.4751%" y="181" width="0.6918%" height="15" fill="rgb(213,68,18)" fg:x="11518" fg:w="149"/><text x="53.7681%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.1669%" y="181" width="0.6918%" height="15" fill="rgb(247,88,33)" fg:x="11667" fg:w="149"/><text x="54.4598%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.8586%" y="181" width="0.6918%" height="15" fill="rgb(207,107,22)" fg:x="11816" fg:w="149"/><text x="55.1516%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="55.5504%" y="181" width="0.6918%" height="15" fill="rgb(222,20,41)" fg:x="11965" fg:w="149"/><text x="55.8434%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.2422%" y="181" width="0.6918%" height="15" fill="rgb(208,101,4)" fg:x="12114" fg:w="149"/><text x="56.5351%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.9339%" y="181" width="0.6918%" height="15" fill="rgb(227,134,33)" fg:x="12263" fg:w="149"/><text x="57.2269%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="57.6257%" y="181" width="0.6918%" height="15" fill="rgb(215,40,17)" fg:x="12412" fg:w="149"/><text x="57.9187%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.3175%" y="181" width="0.6918%" height="15" fill="rgb(242,59,54)" fg:x="12561" fg:w="149"/><text x="58.6104%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.0092%" y="181" width="0.6918%" height="15" fill="rgb(219,137,23)" fg:x="12710" fg:w="149"/><text x="59.3022%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.7010%" y="181" width="0.6918%" height="15" fill="rgb(220,16,10)" fg:x="12859" fg:w="149"/><text x="59.9940%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.3928%" y="181" width="0.6918%" height="15" fill="rgb(247,1,42)" fg:x="13008" fg:w="149"/><text x="60.6857%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="61.0845%" y="181" width="0.6918%" height="15" fill="rgb(225,127,46)" fg:x="13157" fg:w="149"/><text x="61.3775%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="61.7763%" y="181" width="0.9843%" height="15" fill="rgb(206,40,30)" fg:x="13306" fg:w="212"/><text x="62.0693%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="62.7606%" y="181" width="0.6918%" height="15" fill="rgb(230,196,34)" fg:x="13518" fg:w="149"/><text x="63.0535%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="63.4523%" y="181" width="0.6918%" height="15" fill="rgb(224,142,15)" fg:x="13667" fg:w="149"/><text x="63.7453%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.1441%" y="181" width="0.6918%" height="15" fill="rgb(219,122,40)" fg:x="13816" fg:w="149"/><text x="64.4371%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.8359%" y="181" width="0.6918%" height="15" fill="rgb(247,20,45)" fg:x="13965" fg:w="149"/><text x="65.1288%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="65.5276%" y="181" width="0.6918%" height="15" fill="rgb(248,193,28)" fg:x="14114" fg:w="149"/><text x="65.8206%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.2194%" y="181" width="0.6918%" height="15" fill="rgb(205,161,29)" fg:x="14263" fg:w="149"/><text x="66.5124%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.9112%" y="181" width="0.6918%" height="15" fill="rgb(209,158,43)" fg:x="14412" fg:w="149"/><text x="67.2042%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="67.6030%" y="181" width="0.6918%" height="15" fill="rgb(241,183,35)" fg:x="14561" fg:w="149"/><text x="67.8959%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.2947%" y="181" width="0.6918%" height="15" fill="rgb(237,100,28)" fg:x="14710" fg:w="149"/><text x="68.5877%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.9865%" y="181" width="0.6918%" height="15" fill="rgb(217,63,12)" fg:x="14859" fg:w="149"/><text x="69.2795%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="69.6783%" y="181" width="0.9843%" height="15" fill="rgb(205,215,45)" fg:x="15008" fg:w="212"/><text x="69.9712%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="70.6625%" y="181" width="0.6918%" height="15" fill="rgb(210,34,28)" fg:x="15220" fg:w="149"/><text x="70.9555%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.3543%" y="181" width="0.6918%" height="15" fill="rgb(232,200,10)" fg:x="15369" fg:w="149"/><text x="71.6473%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.0461%" y="181" width="0.6918%" height="15" fill="rgb(217,95,3)" fg:x="15518" fg:w="149"/><text x="72.3390%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.7378%" y="181" width="0.6918%" height="15" fill="rgb(218,4,41)" fg:x="15667" fg:w="149"/><text x="73.0308%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.4296%" y="181" width="0.6918%" height="15" fill="rgb(253,93,19)" fg:x="15816" fg:w="149"/><text x="73.7226%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.1214%" y="181" width="0.6918%" height="15" fill="rgb(223,186,38)" fg:x="15965" fg:w="149"/><text x="74.4143%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.8131%" y="181" width="0.6918%" height="15" fill="rgb(208,206,43)" fg:x="16114" fg:w="149"/><text x="75.1061%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.5049%" y="181" width="0.6918%" height="15" fill="rgb(240,202,35)" fg:x="16263" fg:w="149"/><text x="75.7979%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.1967%" y="181" width="0.6918%" height="15" fill="rgb(209,34,7)" fg:x="16412" fg:w="149"/><text x="76.4896%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.8884%" y="181" width="0.6918%" height="15" fill="rgb(228,144,31)" fg:x="16561" fg:w="149"/><text x="77.1814%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="77.5802%" y="181" width="0.6918%" height="15" fill="rgb(221,143,45)" fg:x="16710" fg:w="149"/><text x="77.8732%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.2720%" y="181" width="0.6918%" height="15" fill="rgb(207,220,7)" fg:x="16859" fg:w="149"/><text x="78.5649%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.9637%" y="181" width="0.6918%" height="15" fill="rgb(215,165,27)" fg:x="17008" fg:w="149"/><text x="79.2567%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="79.6555%" y="181" width="0.6918%" height="15" fill="rgb(232,181,48)" fg:x="17157" fg:w="149"/><text x="79.9485%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.3473%" y="181" width="0.6918%" height="15" fill="rgb(238,21,24)" fg:x="17306" fg:w="149"/><text x="80.6402%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.0390%" y="181" width="0.6918%" height="15" fill="rgb(206,194,32)" fg:x="17455" fg:w="149"/><text x="81.3320%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.7308%" y="181" width="0.6918%" height="15" fill="rgb(219,88,11)" fg:x="17604" fg:w="149"/><text x="82.0238%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.4226%" y="181" width="0.6918%" height="15" fill="rgb(213,80,41)" fg:x="17753" fg:w="149"/><text x="82.7156%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.1144%" y="181" width="0.6918%" height="15" fill="rgb(226,107,24)" fg:x="17902" fg:w="149"/><text x="83.4073%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.8061%" y="181" width="0.6918%" height="15" fill="rgb(243,187,12)" fg:x="18051" fg:w="149"/><text x="84.0991%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.4979%" y="181" width="0.6918%" height="15" fill="rgb(247,98,52)" fg:x="18200" fg:w="149"/><text x="84.7909%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="85.1897%" y="181" width="0.6918%" height="15" fill="rgb(247,61,25)" fg:x="18349" fg:w="149"/><text x="85.4826%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 instructions, 1.28%)</title><rect x="85.8814%" y="181" width="1.2768%" height="15" fill="rgb(235,102,52)" fg:x="18498" fg:w="275"/><text x="86.1744%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.1582%" y="181" width="0.6918%" height="15" fill="rgb(247,86,10)" fg:x="18773" fg:w="149"/><text x="87.4511%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.8499%" y="181" width="0.6918%" height="15" fill="rgb(208,222,44)" fg:x="18922" fg:w="149"/><text x="88.1429%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="88.5417%" y="149" width="0.0232%" height="15" fill="rgb(229,38,47)" fg:x="19071" fg:w="5"/><text x="88.8347%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="88.5649%" y="117" width="0.2507%" height="15" fill="rgb(232,77,26)" fg:x="19076" fg:w="54"/><text x="88.8579%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.63%)</title><rect x="88.5649%" y="133" width="0.6268%" height="15" fill="rgb(247,109,41)" fg:x="19076" fg:w="135"/><text x="88.8579%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.75%)</title><rect x="88.5649%" y="149" width="0.7521%" height="15" fill="rgb(212,17,33)" fg:x="19076" fg:w="162"/><text x="88.8579%" y="159.50"></text></g><g><title>memset (136 instructions, 0.63%)</title><rect x="89.3171%" y="149" width="0.6314%" height="15" fill="rgb(247,36,0)" fg:x="19238" fg:w="136"/><text x="89.6100%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.15%)</title><rect x="88.5417%" y="165" width="2.1496%" height="15" fill="rgb(247,203,44)" fg:x="19071" fg:w="463"/><text x="88.8347%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.15%)</title><rect x="90.6913%" y="149" width="0.1486%" height="15" fill="rgb(222,81,28)" fg:x="19534" fg:w="32"/><text x="90.9843%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="90.8399%" y="117" width="0.3528%" height="15" fill="rgb(212,89,38)" fg:x="19566" fg:w="76"/><text x="91.1328%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="90.8399%" y="133" width="0.5107%" height="15" fill="rgb(227,201,8)" fg:x="19566" fg:w="110"/><text x="91.1328%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.81%)</title><rect x="90.8399%" y="149" width="0.8125%" height="15" fill="rgb(241,131,0)" fg:x="19566" fg:w="175"/><text x="91.1328%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.6524%" y="149" width="0.0511%" height="15" fill="rgb(252,19,34)" fg:x="19741" fg:w="11"/><text x="91.9453%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.7034%" y="149" width="0.0511%" height="15" fill="rgb(205,139,35)" fg:x="19752" fg:w="11"/><text x="91.9964%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.14%)</title><rect x="91.7545%" y="149" width="0.1393%" height="15" fill="rgb(234,33,29)" fg:x="19763" fg:w="30"/><text x="92.0475%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="91.8938%" y="149" width="0.0232%" height="15" fill="rgb(254,175,18)" fg:x="19793" fg:w="5"/><text x="92.1867%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 2.18%)</title><rect x="90.6913%" y="165" width="2.1821%" height="15" fill="rgb(243,143,9)" fg:x="19534" fg:w="470"/><text x="90.9843%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="92.8734%" y="165" width="0.0232%" height="15" fill="rgb(217,68,27)" fg:x="20004" fg:w="5"/><text x="93.1664%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="92.8966%" y="165" width="0.2554%" height="15" fill="rgb(244,86,40)" fg:x="20009" fg:w="55"/><text x="93.1896%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,067 instructions, 4.95%)</title><rect x="88.5417%" y="181" width="4.9538%" height="15" fill="rgb(237,52,44)" fg:x="19071" fg:w="1067"/><text x="88.8347%" y="191.50">ic_cd..</text></g><g><title>hashmap::batch_put_3_::{{closure}} (21,077 instructions, 97.86%)</title><rect x="0.7939%" y="197" width="97.8551%" height="15" fill="rgb(205,44,10)" fg:x="171" fg:w="21077"/><text x="1.0869%" y="207.50">hashmap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.6490%" y="197" width="0.0557%" height="15" fill="rgb(226,117,39)" fg:x="21248" fg:w="12"/><text x="98.9419%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="98.7047%" y="197" width="0.3761%" height="15" fill="rgb(213,108,34)" fg:x="21260" fg:w="81"/><text x="98.9976%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.46%)</title><rect x="99.0807%" y="197" width="0.4643%" height="15" fill="rgb(217,139,14)" fg:x="21341" fg:w="100"/><text x="99.3737%" y="207.50"></text></g><g><title>all (21,539 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,207,12)" fg:x="0" fg:w="21539"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (21,539 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,41,33)" fg:x="0" fg:w="21539"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>