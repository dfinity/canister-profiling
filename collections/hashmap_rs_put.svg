<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21601"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0880%" height="15" fill="rgb(243,35,33)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.0880%" y="197" width="0.3518%" height="15" fill="rgb(236,120,38)" fg:x="19" fg:w="76"/><text x="0.3809%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.4398%" y="197" width="0.3518%" height="15" fill="rgb(222,191,12)" fg:x="95" fg:w="76"/><text x="0.7328%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.7916%" y="165" width="0.3518%" height="15" fill="rgb(223,158,52)" fg:x="171" fg:w="76"/><text x="1.0846%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="1.1435%" y="149" width="0.3194%" height="15" fill="rgb(248,179,48)" fg:x="247" fg:w="69"/><text x="1.4364%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.4629%" y="133" width="0.0185%" height="15" fill="rgb(253,55,37)" fg:x="316" fg:w="4"/><text x="1.7559%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="1.4629%" y="149" width="1.8795%" height="15" fill="rgb(222,134,14)" fg:x="316" fg:w="406"/><text x="1.7559%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="3.3424%" y="149" width="0.3796%" height="15" fill="rgb(213,155,10)" fg:x="722" fg:w="82"/><text x="3.6354%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.7220%" y="149" width="0.2500%" height="15" fill="rgb(226,98,1)" fg:x="804" fg:w="54"/><text x="4.0150%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.9720%" y="149" width="0.2500%" height="15" fill="rgb(248,188,3)" fg:x="858" fg:w="54"/><text x="4.2650%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.2220%" y="149" width="0.2500%" height="15" fill="rgb(209,178,33)" fg:x="912" fg:w="54"/><text x="4.5150%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.4720%" y="149" width="0.2500%" height="15" fill="rgb(234,74,2)" fg:x="966" fg:w="54"/><text x="4.7650%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="4.7220%" y="149" width="0.3194%" height="15" fill="rgb(229,155,12)" fg:x="1020" fg:w="69"/><text x="5.0150%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="5.0414%" y="149" width="0.3009%" height="15" fill="rgb(254,193,54)" fg:x="1089" fg:w="65"/><text x="5.3344%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.3423%" y="133" width="0.0185%" height="15" fill="rgb(215,115,49)" fg:x="1154" fg:w="4"/><text x="5.6353%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="5.3423%" y="149" width="1.8795%" height="15" fill="rgb(220,159,46)" fg:x="1154" fg:w="406"/><text x="5.6353%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="7.2219%" y="149" width="0.0741%" height="15" fill="rgb(214,148,25)" fg:x="1560" fg:w="16"/><text x="7.5149%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="7.2960%" y="133" width="0.3518%" height="15" fill="rgb(226,40,8)" fg:x="1576" fg:w="76"/><text x="7.5889%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="7.6478%" y="101" width="0.2778%" height="15" fill="rgb(236,149,10)" fg:x="1652" fg:w="60"/><text x="7.9408%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="7.6478%" y="117" width="0.3935%" height="15" fill="rgb(227,170,40)" fg:x="1652" fg:w="85"/><text x="7.9408%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="8.0413%" y="69" width="0.0417%" height="15" fill="rgb(247,119,35)" fg:x="1737" fg:w="9"/><text x="8.3343%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="8.0830%" y="53" width="0.1389%" height="15" fill="rgb(205,4,24)" fg:x="1746" fg:w="30"/><text x="8.3759%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="8.0830%" y="69" width="0.2546%" height="15" fill="rgb(251,46,12)" fg:x="1746" fg:w="55"/><text x="8.3759%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="8.0413%" y="85" width="0.5463%" height="15" fill="rgb(209,49,19)" fg:x="1737" fg:w="118"/><text x="8.3343%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="8.0413%" y="101" width="0.7916%" height="15" fill="rgb(230,145,41)" fg:x="1737" fg:w="171"/><text x="8.3343%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.81%)</title><rect x="8.0413%" y="117" width="0.8148%" height="15" fill="rgb(246,178,46)" fg:x="1737" fg:w="176"/><text x="8.3343%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.72%)</title><rect x="7.6478%" y="133" width="1.7221%" height="15" fill="rgb(208,31,21)" fg:x="1652" fg:w="372"/><text x="7.9408%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.73%)</title><rect x="7.2960%" y="149" width="2.7267%" height="15" fill="rgb(231,113,44)" fg:x="1576" fg:w="589"/><text x="7.5889%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="10.0227%" y="149" width="0.3796%" height="15" fill="rgb(247,63,22)" fg:x="2165" fg:w="82"/><text x="10.3157%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="10.4023%" y="149" width="0.2546%" height="15" fill="rgb(243,138,7)" fg:x="2247" fg:w="55"/><text x="10.6953%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="10.6569%" y="149" width="0.2917%" height="15" fill="rgb(236,71,52)" fg:x="2302" fg:w="63"/><text x="10.9499%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="10.9486%" y="149" width="0.3009%" height="15" fill="rgb(245,164,1)" fg:x="2365" fg:w="65"/><text x="11.2415%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.2495%" y="117" width="0.0185%" height="15" fill="rgb(242,143,54)" fg:x="2430" fg:w="4"/><text x="11.5424%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="11.2495%" y="133" width="1.8795%" height="15" fill="rgb(209,102,39)" fg:x="2430" fg:w="406"/><text x="11.5424%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="13.1290%" y="133" width="0.0741%" height="15" fill="rgb(232,31,52)" fg:x="2836" fg:w="16"/><text x="13.4220%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="13.2031%" y="117" width="0.3518%" height="15" fill="rgb(206,179,11)" fg:x="2852" fg:w="76"/><text x="13.4961%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="13.5549%" y="85" width="0.2778%" height="15" fill="rgb(249,153,28)" fg:x="2928" fg:w="60"/><text x="13.8479%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="13.5549%" y="101" width="0.3935%" height="15" fill="rgb(233,109,9)" fg:x="2928" fg:w="85"/><text x="13.8479%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="13.9484%" y="53" width="0.0417%" height="15" fill="rgb(238,31,7)" fg:x="3013" fg:w="9"/><text x="14.2414%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="13.9901%" y="37" width="0.1389%" height="15" fill="rgb(222,177,39)" fg:x="3022" fg:w="30"/><text x="14.2831%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="13.9901%" y="53" width="0.2546%" height="15" fill="rgb(217,175,11)" fg:x="3022" fg:w="55"/><text x="14.2831%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="13.9484%" y="69" width="0.5463%" height="15" fill="rgb(236,15,22)" fg:x="3013" fg:w="118"/><text x="14.2414%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="13.9484%" y="85" width="0.7916%" height="15" fill="rgb(233,99,37)" fg:x="3013" fg:w="171"/><text x="14.2414%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.81%)</title><rect x="13.9484%" y="101" width="0.8148%" height="15" fill="rgb(236,63,34)" fg:x="3013" fg:w="176"/><text x="14.2414%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.72%)</title><rect x="13.5549%" y="117" width="1.7221%" height="15" fill="rgb(205,44,28)" fg:x="2928" fg:w="372"/><text x="13.8479%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.73%)</title><rect x="13.2031%" y="133" width="2.7267%" height="15" fill="rgb(254,208,40)" fg:x="2852" fg:w="589"/><text x="13.4961%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="15.9298%" y="133" width="0.3796%" height="15" fill="rgb(225,178,49)" fg:x="3441" fg:w="82"/><text x="16.2228%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="16.3094%" y="133" width="0.2546%" height="15" fill="rgb(237,229,30)" fg:x="3523" fg:w="55"/><text x="16.6024%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="16.5640%" y="117" width="0.3194%" height="15" fill="rgb(222,202,27)" fg:x="3578" fg:w="69"/><text x="16.8570%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.42%)</title><rect x="16.8835%" y="117" width="0.4213%" height="15" fill="rgb(219,32,5)" fg:x="3647" fg:w="91"/><text x="17.1764%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="17.3048%" y="117" width="0.2917%" height="15" fill="rgb(214,120,27)" fg:x="3738" fg:w="63"/><text x="17.5977%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.31%)</title><rect x="16.5640%" y="133" width="1.3055%" height="15" fill="rgb(247,87,47)" fg:x="3578" fg:w="282"/><text x="16.8570%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="17.8695%" y="133" width="0.3518%" height="15" fill="rgb(247,152,37)" fg:x="3860" fg:w="76"/><text x="18.1625%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 7.91%)</title><rect x="11.2495%" y="149" width="7.9117%" height="15" fill="rgb(234,202,5)" fg:x="2430" fg:w="1709"/><text x="11.5424%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="19.1611%" y="149" width="0.2917%" height="15" fill="rgb(234,38,7)" fg:x="4139" fg:w="63"/><text x="19.4541%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.4528%" y="149" width="0.0602%" height="15" fill="rgb(206,103,12)" fg:x="4202" fg:w="13"/><text x="19.7458%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.5130%" y="149" width="0.0602%" height="15" fill="rgb(239,6,54)" fg:x="4215" fg:w="13"/><text x="19.8060%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="19.5732%" y="149" width="0.0324%" height="15" fill="rgb(232,128,20)" fg:x="4228" fg:w="7"/><text x="19.8661%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="19.6056%" y="149" width="0.0694%" height="15" fill="rgb(254,3,7)" fg:x="4235" fg:w="15"/><text x="19.8985%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="19.6750%" y="133" width="0.3518%" height="15" fill="rgb(211,143,52)" fg:x="4250" fg:w="76"/><text x="19.9680%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.74%)</title><rect x="19.6750%" y="149" width="0.7361%" height="15" fill="rgb(222,77,27)" fg:x="4250" fg:w="159"/><text x="19.9680%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="20.4111%" y="117" width="0.3518%" height="15" fill="rgb(237,118,35)" fg:x="4409" fg:w="76"/><text x="20.7041%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="20.4111%" y="133" width="0.5092%" height="15" fill="rgb(237,142,39)" fg:x="4409" fg:w="110"/><text x="20.7041%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.82%)</title><rect x="20.4111%" y="149" width="0.8240%" height="15" fill="rgb(243,133,54)" fg:x="4409" fg:w="178"/><text x="20.7041%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.2351%" y="149" width="0.3518%" height="15" fill="rgb(244,178,24)" fg:x="4587" fg:w="76"/><text x="21.5281%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="21.5870%" y="149" width="0.3750%" height="15" fill="rgb(221,83,51)" fg:x="4663" fg:w="81"/><text x="21.8799%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.9619%" y="149" width="0.3518%" height="15" fill="rgb(244,167,17)" fg:x="4744" fg:w="76"/><text x="22.2549%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="22.3138%" y="149" width="0.3518%" height="15" fill="rgb(213,196,7)" fg:x="4820" fg:w="76"/><text x="22.6068%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="22.6749%" y="149" width="0.3750%" height="15" fill="rgb(236,24,6)" fg:x="4898" fg:w="81"/><text x="22.9678%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.76%)</title><rect x="23.0499%" y="149" width="1.7592%" height="15" fill="rgb(249,123,2)" fg:x="4979" fg:w="380"/><text x="23.3428%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.76%)</title><rect x="24.8090%" y="149" width="1.7592%" height="15" fill="rgb(243,31,21)" fg:x="5359" fg:w="380"/><text x="25.1020%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,407 instructions, 29.66%)</title><rect x="1.1435%" y="165" width="29.6607%" height="15" fill="rgb(206,140,50)" fg:x="247" fg:w="6407"/><text x="1.4364%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (335 instructions, 1.55%)</title><rect x="30.8041%" y="165" width="1.5509%" height="15" fill="rgb(225,81,5)" fg:x="6654" fg:w="335"/><text x="31.0971%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="32.3550%" y="149" width="0.0556%" height="15" fill="rgb(242,188,21)" fg:x="6989" fg:w="12"/><text x="32.6480%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.23%)</title><rect x="32.3550%" y="165" width="0.2315%" height="15" fill="rgb(247,1,40)" fg:x="6989" fg:w="50"/><text x="32.6480%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="32.5865%" y="165" width="0.3518%" height="15" fill="rgb(254,98,43)" fg:x="7039" fg:w="76"/><text x="32.8794%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="32.9383%" y="149" width="0.0556%" height="15" fill="rgb(237,17,4)" fg:x="7115" fg:w="12"/><text x="33.2313%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="32.9938%" y="133" width="0.2454%" height="15" fill="rgb(214,76,38)" fg:x="7127" fg:w="53"/><text x="33.2868%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="33.2392%" y="133" width="0.4074%" height="15" fill="rgb(220,42,46)" fg:x="7180" fg:w="88"/><text x="33.5322%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="33.6466%" y="133" width="0.7500%" height="15" fill="rgb(241,204,29)" fg:x="7268" fg:w="162"/><text x="33.9396%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.50%)</title><rect x="32.9938%" y="149" width="2.4999%" height="15" fill="rgb(245,157,45)" fg:x="7127" fg:w="540"/><text x="33.2868%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (772 instructions, 3.57%)</title><rect x="32.9383%" y="165" width="3.5739%" height="15" fill="rgb(211,214,30)" fg:x="7115" fg:w="772"/><text x="33.2313%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="36.5122%" y="165" width="0.3518%" height="15" fill="rgb(246,159,24)" fg:x="7887" fg:w="76"/><text x="36.8052%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="36.8640%" y="149" width="0.0556%" height="15" fill="rgb(233,151,38)" fg:x="7963" fg:w="12"/><text x="37.1570%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="36.9196%" y="133" width="0.2454%" height="15" fill="rgb(235,36,18)" fg:x="7975" fg:w="53"/><text x="37.2126%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="37.1649%" y="133" width="0.4074%" height="15" fill="rgb(237,182,18)" fg:x="8028" fg:w="88"/><text x="37.4579%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="37.5723%" y="133" width="0.7500%" height="15" fill="rgb(241,170,6)" fg:x="8116" fg:w="162"/><text x="37.8653%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.50%)</title><rect x="36.9196%" y="149" width="2.4999%" height="15" fill="rgb(212,5,18)" fg:x="7975" fg:w="540"/><text x="37.2126%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.31%)</title><rect x="39.4195%" y="149" width="0.3148%" height="15" fill="rgb(226,83,29)" fg:x="8515" fg:w="68"/><text x="39.7124%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="39.7343%" y="133" width="0.3750%" height="15" fill="rgb(221,18,45)" fg:x="8583" fg:w="81"/><text x="40.0272%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.50%)</title><rect x="39.7343%" y="149" width="0.5000%" height="15" fill="rgb(222,150,33)" fg:x="8583" fg:w="108"/><text x="40.0272%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 4.22%)</title><rect x="36.8640%" y="165" width="4.2220%" height="15" fill="rgb(206,11,44)" fg:x="7963" fg:w="912"/><text x="37.1570%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="41.0861%" y="117" width="0.2454%" height="15" fill="rgb(254,223,27)" fg:x="8875" fg:w="53"/><text x="41.3790%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.37%)</title><rect x="41.0861%" y="133" width="0.3657%" height="15" fill="rgb(212,37,2)" fg:x="8875" fg:w="79"/><text x="41.3790%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.35%)</title><rect x="41.0861%" y="149" width="1.3518%" height="15" fill="rgb(231,59,27)" fg:x="8875" fg:w="292"/><text x="41.3790%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1089 (15 instructions, 0.07%)</title><rect x="42.4379%" y="149" width="0.0694%" height="15" fill="rgb(219,197,49)" fg:x="9167" fg:w="15"/><text x="42.7308%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="42.5073%" y="149" width="0.0509%" height="15" fill="rgb(236,180,18)" fg:x="9182" fg:w="11"/><text x="42.8003%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 2.42%)</title><rect x="41.0861%" y="165" width="2.4166%" height="15" fill="rgb(214,177,30)" fg:x="8875" fg:w="522"/><text x="41.3790%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.16%)</title><rect x="43.5026%" y="165" width="0.1574%" height="15" fill="rgb(233,32,3)" fg:x="9397" fg:w="34"/><text x="43.7956%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="43.6600%" y="149" width="0.5694%" height="15" fill="rgb(233,180,33)" fg:x="9431" fg:w="123"/><text x="43.9530%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="44.3544%" y="149" width="0.5694%" height="15" fill="rgb(249,144,35)" fg:x="9581" fg:w="123"/><text x="44.6474%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.39%)</title><rect x="43.6600%" y="165" width="1.3888%" height="15" fill="rgb(234,67,15)" fg:x="9431" fg:w="300"/><text x="43.9530%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.13%)</title><rect x="45.0488%" y="149" width="0.1296%" height="15" fill="rgb(239,42,25)" fg:x="9731" fg:w="28"/><text x="45.3418%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.45%)</title><rect x="45.0488%" y="165" width="0.4491%" height="15" fill="rgb(215,8,24)" fg:x="9731" fg:w="97"/><text x="45.3418%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.4979%" y="165" width="0.0509%" height="15" fill="rgb(220,224,42)" fg:x="9828" fg:w="11"/><text x="45.7909%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.5488%" y="165" width="0.0509%" height="15" fill="rgb(219,88,2)" fg:x="9839" fg:w="11"/><text x="45.8418%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.5997%" y="165" width="0.0509%" height="15" fill="rgb(230,39,6)" fg:x="9850" fg:w="11"/><text x="45.8927%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.90%)</title><rect x="45.6507%" y="165" width="1.8981%" height="15" fill="rgb(253,120,30)" fg:x="9861" fg:w="410"/><text x="45.9436%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="47.5487%" y="133" width="0.0556%" height="15" fill="rgb(243,122,15)" fg:x="10271" fg:w="12"/><text x="47.8417%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.78%)</title><rect x="47.6043%" y="133" width="0.7777%" height="15" fill="rgb(214,177,45)" fg:x="10283" fg:w="168"/><text x="47.8972%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="48.3820%" y="101" width="0.4398%" height="15" fill="rgb(217,89,40)" fg:x="10451" fg:w="95"/><text x="48.6750%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 1.11%)</title><rect x="48.3820%" y="117" width="1.1111%" height="15" fill="rgb(238,161,17)" fg:x="10451" fg:w="240"/><text x="48.6750%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 instructions, 1.24%)</title><rect x="48.3820%" y="133" width="1.2361%" height="15" fill="rgb(225,199,3)" fg:x="10451" fg:w="267"/><text x="48.6750%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="49.6181%" y="133" width="0.0509%" height="15" fill="rgb(235,215,12)" fg:x="10718" fg:w="11"/><text x="49.9110%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (500 instructions, 2.31%)</title><rect x="47.5487%" y="149" width="2.3147%" height="15" fill="rgb(231,190,19)" fg:x="10271" fg:w="500"/><text x="47.8417%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (534 instructions, 2.47%)</title><rect x="47.5487%" y="165" width="2.4721%" height="15" fill="rgb(224,197,0)" fg:x="10271" fg:w="534"/><text x="47.8417%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="50.0208%" y="149" width="0.2500%" height="15" fill="rgb(221,158,42)" fg:x="10805" fg:w="54"/><text x="50.3138%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="50.2708%" y="149" width="0.4398%" height="15" fill="rgb(249,83,22)" fg:x="10859" fg:w="95"/><text x="50.5638%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.06%)</title><rect x="50.0208%" y="165" width="1.0648%" height="15" fill="rgb(226,112,40)" fg:x="10805" fg:w="230"/><text x="50.3138%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,255 instructions, 52.10%)</title><rect x="0.7916%" y="181" width="52.1041%" height="15" fill="rgb(239,125,51)" fg:x="171" fg:w="11255"/><text x="1.0846%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="52.8957%" y="181" width="0.6898%" height="15" fill="rgb(242,92,17)" fg:x="11426" fg:w="149"/><text x="53.1887%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="53.5855%" y="181" width="0.6898%" height="15" fill="rgb(244,184,31)" fg:x="11575" fg:w="149"/><text x="53.8785%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.2753%" y="181" width="0.6898%" height="15" fill="rgb(238,129,38)" fg:x="11724" fg:w="149"/><text x="54.5682%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.9650%" y="181" width="0.6898%" height="15" fill="rgb(207,182,50)" fg:x="11873" fg:w="149"/><text x="55.2580%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="55.6548%" y="181" width="0.6898%" height="15" fill="rgb(252,133,34)" fg:x="12022" fg:w="149"/><text x="55.9478%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.3446%" y="181" width="0.6898%" height="15" fill="rgb(207,119,46)" fg:x="12171" fg:w="149"/><text x="56.6376%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="57.0344%" y="181" width="0.6898%" height="15" fill="rgb(246,91,0)" fg:x="12320" fg:w="149"/><text x="57.3274%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="57.7242%" y="181" width="0.6898%" height="15" fill="rgb(254,62,33)" fg:x="12469" fg:w="149"/><text x="58.0171%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.4140%" y="181" width="0.6898%" height="15" fill="rgb(216,14,4)" fg:x="12618" fg:w="149"/><text x="58.7069%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.1037%" y="181" width="0.6898%" height="15" fill="rgb(235,66,4)" fg:x="12767" fg:w="149"/><text x="59.3967%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.7935%" y="181" width="0.6898%" height="15" fill="rgb(232,140,12)" fg:x="12916" fg:w="149"/><text x="60.0865%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.4833%" y="181" width="0.6898%" height="15" fill="rgb(249,90,46)" fg:x="13065" fg:w="149"/><text x="60.7763%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="61.1731%" y="181" width="0.6898%" height="15" fill="rgb(209,100,36)" fg:x="13214" fg:w="149"/><text x="61.4661%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="61.8629%" y="181" width="0.9814%" height="15" fill="rgb(246,158,54)" fg:x="13363" fg:w="212"/><text x="62.1558%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="62.8443%" y="181" width="0.6898%" height="15" fill="rgb(212,170,45)" fg:x="13575" fg:w="149"/><text x="63.1373%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="63.5341%" y="181" width="0.6898%" height="15" fill="rgb(208,7,6)" fg:x="13724" fg:w="149"/><text x="63.8271%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.2239%" y="181" width="0.6898%" height="15" fill="rgb(219,31,52)" fg:x="13873" fg:w="149"/><text x="64.5168%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.9137%" y="181" width="0.6898%" height="15" fill="rgb(232,125,48)" fg:x="14022" fg:w="149"/><text x="65.2066%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="65.6034%" y="181" width="0.6898%" height="15" fill="rgb(235,41,12)" fg:x="14171" fg:w="149"/><text x="65.8964%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.2932%" y="181" width="0.6898%" height="15" fill="rgb(221,80,30)" fg:x="14320" fg:w="149"/><text x="66.5862%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.9830%" y="181" width="0.6898%" height="15" fill="rgb(254,220,12)" fg:x="14469" fg:w="149"/><text x="67.2760%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="67.6728%" y="181" width="0.6898%" height="15" fill="rgb(226,93,0)" fg:x="14618" fg:w="149"/><text x="67.9658%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.3626%" y="181" width="0.6898%" height="15" fill="rgb(231,88,46)" fg:x="14767" fg:w="149"/><text x="68.6555%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="69.0524%" y="181" width="0.6898%" height="15" fill="rgb(212,187,10)" fg:x="14916" fg:w="149"/><text x="69.3453%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="69.7421%" y="181" width="0.9814%" height="15" fill="rgb(251,68,24)" fg:x="15065" fg:w="212"/><text x="70.0351%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="70.7236%" y="181" width="0.6898%" height="15" fill="rgb(218,117,13)" fg:x="15277" fg:w="149"/><text x="71.0165%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.4134%" y="181" width="0.6898%" height="15" fill="rgb(240,133,13)" fg:x="15426" fg:w="149"/><text x="71.7063%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.1031%" y="181" width="0.6898%" height="15" fill="rgb(206,128,1)" fg:x="15575" fg:w="149"/><text x="72.3961%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.7929%" y="181" width="0.6898%" height="15" fill="rgb(244,98,26)" fg:x="15724" fg:w="149"/><text x="73.0859%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.4827%" y="181" width="0.6898%" height="15" fill="rgb(235,105,28)" fg:x="15873" fg:w="149"/><text x="73.7757%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.1725%" y="181" width="0.6898%" height="15" fill="rgb(253,10,22)" fg:x="16022" fg:w="149"/><text x="74.4655%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.8623%" y="181" width="0.6898%" height="15" fill="rgb(238,68,13)" fg:x="16171" fg:w="149"/><text x="75.1552%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.5521%" y="181" width="0.6898%" height="15" fill="rgb(212,39,50)" fg:x="16320" fg:w="149"/><text x="75.8450%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.2418%" y="181" width="0.6898%" height="15" fill="rgb(230,104,12)" fg:x="16469" fg:w="149"/><text x="76.5348%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.9316%" y="181" width="0.6898%" height="15" fill="rgb(251,123,46)" fg:x="16618" fg:w="149"/><text x="77.2246%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="77.6214%" y="181" width="0.6898%" height="15" fill="rgb(222,28,30)" fg:x="16767" fg:w="149"/><text x="77.9144%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.3112%" y="181" width="0.6898%" height="15" fill="rgb(218,47,37)" fg:x="16916" fg:w="149"/><text x="78.6042%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="79.0010%" y="181" width="0.6898%" height="15" fill="rgb(210,63,29)" fg:x="17065" fg:w="149"/><text x="79.2939%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="79.6908%" y="181" width="0.6898%" height="15" fill="rgb(244,41,40)" fg:x="17214" fg:w="149"/><text x="79.9837%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.3805%" y="181" width="0.6898%" height="15" fill="rgb(248,25,0)" fg:x="17363" fg:w="149"/><text x="80.6735%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.0703%" y="181" width="0.6898%" height="15" fill="rgb(210,31,26)" fg:x="17512" fg:w="149"/><text x="81.3633%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.7601%" y="181" width="0.6898%" height="15" fill="rgb(214,199,2)" fg:x="17661" fg:w="149"/><text x="82.0531%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.4499%" y="181" width="0.6898%" height="15" fill="rgb(223,212,42)" fg:x="17810" fg:w="149"/><text x="82.7429%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.1397%" y="181" width="0.6898%" height="15" fill="rgb(226,140,32)" fg:x="17959" fg:w="149"/><text x="83.4326%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.8295%" y="181" width="0.6898%" height="15" fill="rgb(210,208,18)" fg:x="18108" fg:w="149"/><text x="84.1224%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.5192%" y="181" width="0.6898%" height="15" fill="rgb(246,150,13)" fg:x="18257" fg:w="149"/><text x="84.8122%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="85.2090%" y="181" width="0.6898%" height="15" fill="rgb(237,41,51)" fg:x="18406" fg:w="149"/><text x="85.5020%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 instructions, 1.27%)</title><rect x="85.8988%" y="181" width="1.2731%" height="15" fill="rgb(205,108,53)" fg:x="18555" fg:w="275"/><text x="86.1918%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.1719%" y="181" width="0.6898%" height="15" fill="rgb(229,220,15)" fg:x="18830" fg:w="149"/><text x="87.4649%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.8617%" y="181" width="0.6898%" height="15" fill="rgb(248,44,4)" fg:x="18979" fg:w="149"/><text x="88.1546%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="88.5515%" y="149" width="0.0556%" height="15" fill="rgb(229,59,23)" fg:x="19128" fg:w="12"/><text x="88.8444%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="88.6070%" y="117" width="0.2500%" height="15" fill="rgb(206,60,51)" fg:x="19140" fg:w="54"/><text x="88.9000%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.62%)</title><rect x="88.6070%" y="133" width="0.6250%" height="15" fill="rgb(217,108,43)" fg:x="19140" fg:w="135"/><text x="88.9000%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.75%)</title><rect x="88.6070%" y="149" width="0.7500%" height="15" fill="rgb(231,88,51)" fg:x="19140" fg:w="162"/><text x="88.9000%" y="159.50"></text></g><g><title>memset (136 instructions, 0.63%)</title><rect x="89.3570%" y="149" width="0.6296%" height="15" fill="rgb(222,225,0)" fg:x="19302" fg:w="136"/><text x="89.6499%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 2.17%)</title><rect x="88.5515%" y="165" width="2.1666%" height="15" fill="rgb(232,151,6)" fg:x="19128" fg:w="468"/><text x="88.8444%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.15%)</title><rect x="90.7180%" y="149" width="0.1481%" height="15" fill="rgb(225,98,41)" fg:x="19596" fg:w="32"/><text x="91.0110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="90.8662%" y="117" width="0.3518%" height="15" fill="rgb(211,39,16)" fg:x="19628" fg:w="76"/><text x="91.1591%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="90.8662%" y="133" width="0.5092%" height="15" fill="rgb(211,204,31)" fg:x="19628" fg:w="110"/><text x="91.1591%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.81%)</title><rect x="90.8662%" y="149" width="0.8101%" height="15" fill="rgb(217,9,45)" fg:x="19628" fg:w="175"/><text x="91.1591%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.6763%" y="149" width="0.0509%" height="15" fill="rgb(240,215,48)" fg:x="19803" fg:w="11"/><text x="91.9693%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.7272%" y="149" width="0.0509%" height="15" fill="rgb(245,99,51)" fg:x="19814" fg:w="11"/><text x="92.0202%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.14%)</title><rect x="91.7782%" y="149" width="0.1389%" height="15" fill="rgb(236,179,43)" fg:x="19825" fg:w="30"/><text x="92.0711%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="91.9170%" y="149" width="0.0231%" height="15" fill="rgb(212,197,3)" fg:x="19855" fg:w="5"/><text x="92.2100%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 2.18%)</title><rect x="90.7180%" y="165" width="2.1758%" height="15" fill="rgb(250,222,10)" fg:x="19596" fg:w="470"/><text x="91.0110%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="92.8938%" y="165" width="0.0231%" height="15" fill="rgb(211,226,46)" fg:x="20066" fg:w="5"/><text x="93.1868%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="92.9170%" y="165" width="0.2546%" height="15" fill="rgb(218,43,28)" fg:x="20071" fg:w="55"/><text x="93.2100%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,072 instructions, 4.96%)</title><rect x="88.5515%" y="181" width="4.9627%" height="15" fill="rgb(209,31,4)" fg:x="19128" fg:w="1072"/><text x="88.8444%" y="191.50">ic_cd..</text></g><g><title>hashmap::batch_put_3_::{{closure}} (21,139 instructions, 97.86%)</title><rect x="0.7916%" y="197" width="97.8612%" height="15" fill="rgb(244,158,20)" fg:x="171" fg:w="21139"/><text x="1.0846%" y="207.50">hashmap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.6528%" y="197" width="0.0556%" height="15" fill="rgb(211,155,44)" fg:x="21310" fg:w="12"/><text x="98.9458%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="98.7084%" y="197" width="0.3750%" height="15" fill="rgb(228,111,32)" fg:x="21322" fg:w="81"/><text x="99.0014%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.46%)</title><rect x="99.0834%" y="197" width="0.4629%" height="15" fill="rgb(210,1,34)" fg:x="21403" fg:w="100"/><text x="99.3763%" y="207.50"></text></g><g><title>all (21,601 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,154,1)" fg:x="0" fg:w="21601"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (21,601 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,175,16)" fg:x="0" fg:w="21601"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>