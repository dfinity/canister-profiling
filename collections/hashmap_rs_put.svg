<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="25678"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="0.0000%" y="229" width="0.3193%" height="15" fill="rgb(230,64,33)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="0.3193%" y="229" width="0.3193%" height="15" fill="rgb(230,229,34)" fg:x="82" fg:w="82"/><text x="0.6123%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="0.6387%" y="181" width="0.3193%" height="15" fill="rgb(228,153,17)" fg:x="164" fg:w="82"/><text x="0.9316%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 4.44%)</title><rect x="0.6387%" y="197" width="4.4357%" height="15" fill="rgb(237,117,35)" fg:x="164" fg:w="1139"/><text x="0.9316%" y="207.50">ic_c..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.20%)</title><rect x="5.0744%" y="165" width="0.1986%" height="15" fill="rgb(205,98,33)" fg:x="1303" fg:w="51"/><text x="5.3674%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="5.2730%" y="149" width="0.0234%" height="15" fill="rgb(237,38,28)" fg:x="1354" fg:w="6"/><text x="5.5660%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.70%)</title><rect x="5.2730%" y="165" width="1.7018%" height="15" fill="rgb(230,135,34)" fg:x="1354" fg:w="437"/><text x="5.5660%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.25%)</title><rect x="6.9748%" y="165" width="0.2492%" height="15" fill="rgb(248,154,44)" fg:x="1791" fg:w="64"/><text x="7.2678%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.30%)</title><rect x="7.2241%" y="165" width="0.2960%" height="15" fill="rgb(243,129,14)" fg:x="1855" fg:w="76"/><text x="7.5171%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.30%)</title><rect x="7.5201%" y="165" width="0.2960%" height="15" fill="rgb(211,163,20)" fg:x="1931" fg:w="76"/><text x="7.8130%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.30%)</title><rect x="7.8160%" y="165" width="0.2960%" height="15" fill="rgb(230,177,28)" fg:x="2007" fg:w="76"/><text x="8.1090%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.30%)</title><rect x="8.1120%" y="165" width="0.2960%" height="15" fill="rgb(241,207,21)" fg:x="2083" fg:w="76"/><text x="8.4050%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.20%)</title><rect x="8.4080%" y="165" width="0.1986%" height="15" fill="rgb(247,217,10)" fg:x="2159" fg:w="51"/><text x="8.7009%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.37%)</title><rect x="8.6066%" y="165" width="0.3700%" height="15" fill="rgb(216,24,52)" fg:x="2210" fg:w="95"/><text x="8.8996%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="8.9766%" y="149" width="0.0234%" height="15" fill="rgb(212,115,46)" fg:x="2305" fg:w="6"/><text x="9.2695%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.70%)</title><rect x="8.9766%" y="165" width="1.7018%" height="15" fill="rgb(239,37,17)" fg:x="2305" fg:w="437"/><text x="9.2695%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="10.6784%" y="165" width="0.0740%" height="15" fill="rgb(229,152,31)" fg:x="2742" fg:w="19"/><text x="10.9714%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="10.7524%" y="133" width="0.3193%" height="15" fill="rgb(213,181,16)" fg:x="2761" fg:w="82"/><text x="11.0454%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.26%)</title><rect x="11.0717%" y="101" width="0.2609%" height="15" fill="rgb(206,123,30)" fg:x="2843" fg:w="67"/><text x="11.3647%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.37%)</title><rect x="11.0717%" y="117" width="0.3739%" height="15" fill="rgb(218,77,23)" fg:x="2843" fg:w="96"/><text x="11.3647%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="11.4456%" y="69" width="0.0428%" height="15" fill="rgb(243,228,17)" fg:x="2939" fg:w="11"/><text x="11.7386%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="11.4884%" y="53" width="0.1363%" height="15" fill="rgb(240,17,39)" fg:x="2950" fg:w="35"/><text x="11.7814%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.25%)</title><rect x="11.4884%" y="69" width="0.2492%" height="15" fill="rgb(205,49,16)" fg:x="2950" fg:w="64"/><text x="11.7814%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.56%)</title><rect x="11.4456%" y="85" width="0.5608%" height="15" fill="rgb(217,63,17)" fg:x="2939" fg:w="144"/><text x="11.7386%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.82%)</title><rect x="11.4456%" y="101" width="0.8178%" height="15" fill="rgb(206,30,39)" fg:x="2939" fg:w="210"/><text x="11.7386%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.86%)</title><rect x="11.4456%" y="117" width="0.8568%" height="15" fill="rgb(218,182,21)" fg:x="2939" fg:w="220"/><text x="11.7386%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 1.75%)</title><rect x="11.0717%" y="133" width="1.7486%" height="15" fill="rgb(214,104,34)" fg:x="2843" fg:w="449"/><text x="11.3647%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 2.60%)</title><rect x="10.7524%" y="149" width="2.5976%" height="15" fill="rgb(207,33,24)" fg:x="2761" fg:w="667"/><text x="11.0454%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.25%)</title><rect x="13.3499%" y="149" width="0.2492%" height="15" fill="rgb(250,116,8)" fg:x="3428" fg:w="64"/><text x="13.6429%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.24%)</title><rect x="13.5992%" y="149" width="0.2376%" height="15" fill="rgb(209,213,31)" fg:x="3492" fg:w="61"/><text x="13.8922%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 3.52%)</title><rect x="10.7524%" y="165" width="3.5166%" height="15" fill="rgb(254,81,38)" fg:x="2761" fg:w="903"/><text x="11.0454%" y="175.50">bin..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.11%)</title><rect x="14.2690%" y="165" width="0.1051%" height="15" fill="rgb(241,215,37)" fg:x="3664" fg:w="27"/><text x="14.5620%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.18%)</title><rect x="14.3742%" y="165" width="0.1791%" height="15" fill="rgb(239,113,42)" fg:x="3691" fg:w="46"/><text x="14.6671%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.37%)</title><rect x="14.5533%" y="165" width="0.3700%" height="15" fill="rgb(209,131,11)" fg:x="3737" fg:w="95"/><text x="14.8463%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="14.9233%" y="133" width="0.0234%" height="15" fill="rgb(253,151,40)" fg:x="3832" fg:w="6"/><text x="15.2162%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.70%)</title><rect x="14.9233%" y="149" width="1.7018%" height="15" fill="rgb(217,86,47)" fg:x="3832" fg:w="437"/><text x="15.2162%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.07%)</title><rect x="16.6251%" y="149" width="0.0740%" height="15" fill="rgb(216,181,17)" fg:x="4269" fg:w="19"/><text x="16.9181%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="16.6991%" y="117" width="0.3193%" height="15" fill="rgb(221,123,12)" fg:x="4288" fg:w="82"/><text x="16.9921%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.26%)</title><rect x="17.0185%" y="85" width="0.2609%" height="15" fill="rgb(236,47,33)" fg:x="4370" fg:w="67"/><text x="17.3114%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.37%)</title><rect x="17.0185%" y="101" width="0.3739%" height="15" fill="rgb(218,61,3)" fg:x="4370" fg:w="96"/><text x="17.3114%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="17.3923%" y="53" width="0.0428%" height="15" fill="rgb(249,102,46)" fg:x="4466" fg:w="11"/><text x="17.6853%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="17.4352%" y="37" width="0.1363%" height="15" fill="rgb(218,32,49)" fg:x="4477" fg:w="35"/><text x="17.7281%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.25%)</title><rect x="17.4352%" y="53" width="0.2492%" height="15" fill="rgb(220,159,51)" fg:x="4477" fg:w="64"/><text x="17.7281%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.56%)</title><rect x="17.3923%" y="69" width="0.5608%" height="15" fill="rgb(207,150,13)" fg:x="4466" fg:w="144"/><text x="17.6853%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.82%)</title><rect x="17.3923%" y="85" width="0.8178%" height="15" fill="rgb(249,101,31)" fg:x="4466" fg:w="210"/><text x="17.6853%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.86%)</title><rect x="17.3923%" y="101" width="0.8568%" height="15" fill="rgb(217,97,0)" fg:x="4466" fg:w="220"/><text x="17.6853%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.75%)</title><rect x="17.0185%" y="117" width="1.7486%" height="15" fill="rgb(216,198,49)" fg:x="4370" fg:w="449"/><text x="17.3114%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 2.60%)</title><rect x="16.6991%" y="133" width="2.5976%" height="15" fill="rgb(254,136,27)" fg:x="4288" fg:w="667"/><text x="16.9921%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.25%)</title><rect x="19.2967%" y="133" width="0.2492%" height="15" fill="rgb(244,35,45)" fg:x="4955" fg:w="64"/><text x="19.5896%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.24%)</title><rect x="19.5459%" y="133" width="0.2376%" height="15" fill="rgb(212,45,5)" fg:x="5019" fg:w="61"/><text x="19.8389%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 3.52%)</title><rect x="16.6991%" y="149" width="3.5166%" height="15" fill="rgb(238,175,21)" fg:x="4288" fg:w="903"/><text x="16.9921%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.20%)</title><rect x="20.2157%" y="133" width="0.1986%" height="15" fill="rgb(248,77,31)" fg:x="5191" fg:w="51"/><text x="20.5087%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.46%)</title><rect x="20.4144%" y="133" width="0.4595%" height="15" fill="rgb(230,20,28)" fg:x="5242" fg:w="118"/><text x="20.7073%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.18%)</title><rect x="20.8739%" y="133" width="0.1791%" height="15" fill="rgb(246,183,3)" fg:x="5360" fg:w="46"/><text x="21.1669%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.10%)</title><rect x="20.2157%" y="149" width="1.1021%" height="15" fill="rgb(225,3,5)" fg:x="5191" fg:w="283"/><text x="20.5087%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="21.3179%" y="149" width="0.3193%" height="15" fill="rgb(228,1,34)" fg:x="5474" fg:w="82"/><text x="21.6108%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 7.44%)</title><rect x="14.9233%" y="165" width="7.4383%" height="15" fill="rgb(238,23,15)" fg:x="3832" fg:w="1910"/><text x="15.2162%" y="175.50">binread:..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.18%)</title><rect x="22.3616%" y="165" width="0.1791%" height="15" fill="rgb(233,217,12)" fg:x="5742" fg:w="46"/><text x="22.6545%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="22.5407%" y="165" width="0.0584%" height="15" fill="rgb(231,11,45)" fg:x="5788" fg:w="15"/><text x="22.8337%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="22.5991%" y="165" width="0.0312%" height="15" fill="rgb(210,66,2)" fg:x="5803" fg:w="8"/><text x="22.8921%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="22.6303%" y="149" width="0.3193%" height="15" fill="rgb(235,2,31)" fg:x="5811" fg:w="82"/><text x="22.9232%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.69%)</title><rect x="22.6303%" y="165" width="0.6932%" height="15" fill="rgb(243,102,11)" fg:x="5811" fg:w="178"/><text x="22.9232%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="23.3235%" y="133" width="0.3193%" height="15" fill="rgb(208,227,36)" fg:x="5989" fg:w="82"/><text x="23.6164%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.48%)</title><rect x="23.3235%" y="149" width="0.4790%" height="15" fill="rgb(229,40,32)" fg:x="5989" fg:w="123"/><text x="23.6164%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.82%)</title><rect x="23.3235%" y="165" width="0.8178%" height="15" fill="rgb(236,179,53)" fg:x="5989" fg:w="210"/><text x="23.6164%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="24.1413%" y="165" width="0.3193%" height="15" fill="rgb(244,124,24)" fg:x="6199" fg:w="82"/><text x="24.4343%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.35%)</title><rect x="24.4606%" y="165" width="0.3466%" height="15" fill="rgb(244,100,27)" fg:x="6281" fg:w="89"/><text x="24.7536%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="24.8072%" y="165" width="0.3193%" height="15" fill="rgb(242,91,13)" fg:x="6370" fg:w="82"/><text x="25.1002%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="25.1266%" y="165" width="0.3193%" height="15" fill="rgb(219,157,11)" fg:x="6452" fg:w="82"/><text x="25.4195%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="25.4459%" y="165" width="0.0195%" height="15" fill="rgb(242,180,35)" fg:x="6534" fg:w="5"/><text x="25.7389%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.35%)</title><rect x="25.4654%" y="165" width="0.3466%" height="15" fill="rgb(215,34,15)" fg:x="6539" fg:w="89"/><text x="25.7583%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.53%)</title><rect x="25.8120%" y="165" width="1.5266%" height="15" fill="rgb(216,90,52)" fg:x="6628" fg:w="392"/><text x="26.1049%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.53%)</title><rect x="27.3386%" y="165" width="1.5266%" height="15" fill="rgb(229,58,34)" fg:x="7020" fg:w="392"/><text x="27.6315%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.96%)</title><rect x="28.8652%" y="165" width="1.9628%" height="15" fill="rgb(210,133,43)" fg:x="7412" fg:w="504"/><text x="29.1581%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 30.60%)</title><rect x="5.0744%" y="181" width="30.5982%" height="15" fill="rgb(251,208,20)" fg:x="1303" fg:w="7857"/><text x="5.3674%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 1.59%)</title><rect x="35.6726%" y="181" width="1.5889%" height="15" fill="rgb(238,55,32)" fg:x="9160" fg:w="408"/><text x="35.9655%" y="191.50"></text></g><g><title>memcpy (408 instructions, 1.59%)</title><rect x="37.2615%" y="181" width="1.5889%" height="15" fill="rgb(229,180,35)" fg:x="9568" fg:w="408"/><text x="37.5544%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.09%)</title><rect x="38.8504%" y="181" width="0.0935%" height="15" fill="rgb(213,23,48)" fg:x="9976" fg:w="24"/><text x="39.1433%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="38.9438%" y="181" width="0.3193%" height="15" fill="rgb(230,103,23)" fg:x="10000" fg:w="82"/><text x="39.2368%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="39.2632%" y="165" width="0.3193%" height="15" fill="rgb(219,88,47)" fg:x="10082" fg:w="82"/><text x="39.5562%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.65%)</title><rect x="39.2632%" y="181" width="0.6465%" height="15" fill="rgb(252,196,39)" fg:x="10082" fg:w="166"/><text x="39.5562%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="39.9097%" y="181" width="0.3193%" height="15" fill="rgb(235,205,30)" fg:x="10248" fg:w="82"/><text x="40.2026%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.30%)</title><rect x="40.2290%" y="165" width="0.2999%" height="15" fill="rgb(244,35,13)" fg:x="10330" fg:w="77"/><text x="40.5220%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.35%)</title><rect x="40.5289%" y="149" width="0.3466%" height="15" fill="rgb(214,229,54)" fg:x="10407" fg:w="89"/><text x="40.8218%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.62%)</title><rect x="40.5289%" y="165" width="0.6231%" height="15" fill="rgb(214,213,18)" fg:x="10407" fg:w="160"/><text x="40.8218%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 1.62%)</title><rect x="40.2290%" y="181" width="1.6201%" height="15" fill="rgb(237,25,18)" fg:x="10330" fg:w="416"/><text x="40.5220%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.19%)</title><rect x="41.8491%" y="165" width="0.1908%" height="15" fill="rgb(252,200,40)" fg:x="10746" fg:w="49"/><text x="42.1420%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.05%)</title><rect x="42.0399%" y="165" width="0.0545%" height="15" fill="rgb(247,75,28)" fg:x="10795" fg:w="14"/><text x="42.3328%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.78%)</title><rect x="41.8491%" y="181" width="0.7789%" height="15" fill="rgb(221,154,44)" fg:x="10746" fg:w="200"/><text x="42.1420%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.19%)</title><rect x="42.6279%" y="181" width="0.1908%" height="15" fill="rgb(246,213,44)" fg:x="10946" fg:w="49"/><text x="42.9209%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.32%)</title><rect x="42.8188%" y="165" width="0.3232%" height="15" fill="rgb(252,224,1)" fg:x="10995" fg:w="83"/><text x="43.1117%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.09%)</title><rect x="43.4185%" y="149" width="0.0896%" height="15" fill="rgb(207,222,17)" fg:x="11149" fg:w="23"/><text x="43.7115%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.54%)</title><rect x="43.4185%" y="165" width="0.5374%" height="15" fill="rgb(231,151,14)" fg:x="11149" fg:w="138"/><text x="43.7115%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 1.41%)</title><rect x="42.8188%" y="181" width="1.4137%" height="15" fill="rgb(208,106,50)" fg:x="10995" fg:w="363"/><text x="43.1117%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.14%)</title><rect x="44.2324%" y="165" width="0.1441%" height="15" fill="rgb(238,225,46)" fg:x="11358" fg:w="37"/><text x="44.5254%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1179 (34 instructions, 0.13%)</title><rect x="44.3765%" y="165" width="0.1324%" height="15" fill="rgb(248,217,20)" fg:x="11395" fg:w="34"/><text x="44.6695%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1179 (34 instructions, 0.13%)</title><rect x="44.5089%" y="165" width="0.1324%" height="15" fill="rgb(244,27,2)" fg:x="11429" fg:w="34"/><text x="44.8019%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.12%)</title><rect x="44.6413%" y="165" width="0.1207%" height="15" fill="rgb(248,204,0)" fg:x="11463" fg:w="31"/><text x="44.9343%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.02%)</title><rect x="44.2324%" y="181" width="1.0164%" height="15" fill="rgb(229,229,16)" fg:x="11358" fg:w="261"/><text x="44.5254%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.05%)</title><rect x="45.2489%" y="181" width="0.0545%" height="15" fill="rgb(212,119,50)" fg:x="11619" fg:w="14"/><text x="45.5418%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.05%)</title><rect x="45.3034%" y="181" width="0.0545%" height="15" fill="rgb(210,229,30)" fg:x="11633" fg:w="14"/><text x="45.5963%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.05%)</title><rect x="45.3579%" y="181" width="0.0545%" height="15" fill="rgb(245,185,17)" fg:x="11647" fg:w="14"/><text x="45.6509%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.14%)</title><rect x="45.4124%" y="181" width="0.1441%" height="15" fill="rgb(213,33,6)" fg:x="11661" fg:w="37"/><text x="45.7054%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="45.5565%" y="165" width="0.0312%" height="15" fill="rgb(224,35,46)" fg:x="11698" fg:w="8"/><text x="45.8495%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="45.5877%" y="149" width="0.1051%" height="15" fill="rgb(205,113,22)" fg:x="11706" fg:w="27"/><text x="45.8806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="45.6928%" y="149" width="0.1051%" height="15" fill="rgb(242,113,28)" fg:x="11733" fg:w="27"/><text x="45.9858%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.77%)</title><rect x="45.5877%" y="165" width="0.7672%" height="15" fill="rgb(226,17,3)" fg:x="11706" fg:w="197"/><text x="45.8806%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="46.3549%" y="133" width="0.1051%" height="15" fill="rgb(242,185,31)" fg:x="11903" fg:w="27"/><text x="46.6478%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.55%)</title><rect x="46.3549%" y="149" width="0.5530%" height="15" fill="rgb(251,161,16)" fg:x="11903" fg:w="142"/><text x="46.6478%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.83%)</title><rect x="46.3549%" y="165" width="0.8295%" height="15" fill="rgb(251,160,12)" fg:x="11903" fg:w="213"/><text x="46.6478%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.05%)</title><rect x="47.1844%" y="165" width="0.0545%" height="15" fill="rgb(221,206,23)" fg:x="12116" fg:w="14"/><text x="47.4773%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="47.2389%" y="165" width="0.0312%" height="15" fill="rgb(229,131,30)" fg:x="12130" fg:w="8"/><text x="47.5319%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (530 instructions, 2.06%)</title><rect x="45.5565%" y="181" width="2.0640%" height="15" fill="rgb(243,35,37)" fg:x="11698" fg:w="530"/><text x="45.8495%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,357 instructions, 44.23%)</title><rect x="5.0744%" y="197" width="44.2285%" height="15" fill="rgb(251,43,2)" fg:x="1303" fg:w="11357"/><text x="5.3674%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="49.3029%" y="181" width="0.1051%" height="15" fill="rgb(232,99,38)" fg:x="12660" fg:w="27"/><text x="49.5959%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.55%)</title><rect x="49.3029%" y="197" width="0.5530%" height="15" fill="rgb(213,123,34)" fg:x="12660" fg:w="142"/><text x="49.5959%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,745 instructions, 49.63%)</title><rect x="0.6387%" y="213" width="49.6339%" height="15" fill="rgb(242,203,39)" fg:x="164" fg:w="12745"/><text x="0.9316%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="50.2726%" y="213" width="0.5997%" height="15" fill="rgb(223,137,10)" fg:x="12909" fg:w="154"/><text x="50.5656%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="50.8723%" y="213" width="0.5997%" height="15" fill="rgb(214,211,34)" fg:x="13063" fg:w="154"/><text x="51.1653%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="51.4721%" y="213" width="0.5997%" height="15" fill="rgb(230,131,36)" fg:x="13217" fg:w="154"/><text x="51.7650%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="52.0718%" y="213" width="0.5997%" height="15" fill="rgb(254,115,49)" fg:x="13371" fg:w="154"/><text x="52.3648%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="52.6715%" y="213" width="0.5997%" height="15" fill="rgb(226,58,8)" fg:x="13525" fg:w="154"/><text x="52.9645%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="53.2713%" y="213" width="0.5997%" height="15" fill="rgb(220,193,5)" fg:x="13679" fg:w="154"/><text x="53.5643%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="53.8710%" y="213" width="0.5997%" height="15" fill="rgb(247,55,37)" fg:x="13833" fg:w="154"/><text x="54.1640%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="54.4708%" y="213" width="0.5997%" height="15" fill="rgb(246,12,26)" fg:x="13987" fg:w="154"/><text x="54.7637%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="55.0705%" y="213" width="0.5997%" height="15" fill="rgb(235,1,33)" fg:x="14141" fg:w="154"/><text x="55.3635%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="55.6702%" y="213" width="0.5997%" height="15" fill="rgb(214,145,43)" fg:x="14295" fg:w="154"/><text x="55.9632%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="56.2700%" y="213" width="0.5997%" height="15" fill="rgb(211,209,50)" fg:x="14449" fg:w="154"/><text x="56.5629%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="56.8697%" y="213" width="0.5997%" height="15" fill="rgb(212,38,37)" fg:x="14603" fg:w="154"/><text x="57.1627%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="57.4694%" y="213" width="0.5997%" height="15" fill="rgb(225,3,11)" fg:x="14757" fg:w="154"/><text x="57.7624%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (221 instructions, 0.86%)</title><rect x="58.0692%" y="213" width="0.8607%" height="15" fill="rgb(248,156,42)" fg:x="14911" fg:w="221"/><text x="58.3621%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="58.9298%" y="213" width="0.5997%" height="15" fill="rgb(212,175,4)" fg:x="15132" fg:w="154"/><text x="59.2228%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="59.5296%" y="213" width="0.5997%" height="15" fill="rgb(232,15,23)" fg:x="15286" fg:w="154"/><text x="59.8225%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="60.1293%" y="213" width="0.5997%" height="15" fill="rgb(239,186,37)" fg:x="15440" fg:w="154"/><text x="60.4223%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="60.7290%" y="213" width="0.5997%" height="15" fill="rgb(207,89,13)" fg:x="15594" fg:w="154"/><text x="61.0220%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="61.3288%" y="213" width="0.5997%" height="15" fill="rgb(247,216,46)" fg:x="15748" fg:w="154"/><text x="61.6217%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="61.9285%" y="213" width="0.5997%" height="15" fill="rgb(209,112,9)" fg:x="15902" fg:w="154"/><text x="62.2215%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="62.5282%" y="213" width="0.5997%" height="15" fill="rgb(229,122,39)" fg:x="16056" fg:w="154"/><text x="62.8212%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="63.1280%" y="213" width="0.5997%" height="15" fill="rgb(247,133,50)" fg:x="16210" fg:w="154"/><text x="63.4209%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="63.7277%" y="213" width="0.5997%" height="15" fill="rgb(219,148,46)" fg:x="16364" fg:w="154"/><text x="64.0207%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="64.3274%" y="213" width="0.5997%" height="15" fill="rgb(228,135,9)" fg:x="16518" fg:w="154"/><text x="64.6204%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (221 instructions, 0.86%)</title><rect x="64.9272%" y="213" width="0.8607%" height="15" fill="rgb(246,223,28)" fg:x="16672" fg:w="221"/><text x="65.2201%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="65.7878%" y="213" width="0.5997%" height="15" fill="rgb(219,22,24)" fg:x="16893" fg:w="154"/><text x="66.0808%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="66.3876%" y="213" width="0.5997%" height="15" fill="rgb(244,70,29)" fg:x="17047" fg:w="154"/><text x="66.6805%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="66.9873%" y="213" width="0.5997%" height="15" fill="rgb(214,141,11)" fg:x="17201" fg:w="154"/><text x="67.2803%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="67.5870%" y="213" width="0.5997%" height="15" fill="rgb(210,144,37)" fg:x="17355" fg:w="154"/><text x="67.8800%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="68.1868%" y="213" width="0.5997%" height="15" fill="rgb(235,190,20)" fg:x="17509" fg:w="154"/><text x="68.4797%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="68.7865%" y="213" width="0.5997%" height="15" fill="rgb(213,212,47)" fg:x="17663" fg:w="154"/><text x="69.0795%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="69.3862%" y="213" width="0.5997%" height="15" fill="rgb(211,212,49)" fg:x="17817" fg:w="154"/><text x="69.6792%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="69.9860%" y="213" width="0.5997%" height="15" fill="rgb(241,68,27)" fg:x="17971" fg:w="154"/><text x="70.2789%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="70.5857%" y="213" width="0.5997%" height="15" fill="rgb(244,113,6)" fg:x="18125" fg:w="154"/><text x="70.8787%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="71.1855%" y="213" width="0.5997%" height="15" fill="rgb(249,80,10)" fg:x="18279" fg:w="154"/><text x="71.4784%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="71.7852%" y="213" width="0.5997%" height="15" fill="rgb(229,119,27)" fg:x="18433" fg:w="154"/><text x="72.0782%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="72.3849%" y="213" width="0.5997%" height="15" fill="rgb(217,115,18)" fg:x="18587" fg:w="154"/><text x="72.6779%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="72.9847%" y="213" width="0.5997%" height="15" fill="rgb(215,70,46)" fg:x="18741" fg:w="154"/><text x="73.2776%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="73.5844%" y="213" width="0.5997%" height="15" fill="rgb(207,110,38)" fg:x="18895" fg:w="154"/><text x="73.8774%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="74.1841%" y="213" width="0.5997%" height="15" fill="rgb(237,141,31)" fg:x="19049" fg:w="154"/><text x="74.4771%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="74.7839%" y="213" width="0.5997%" height="15" fill="rgb(246,214,19)" fg:x="19203" fg:w="154"/><text x="75.0768%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="75.3836%" y="213" width="0.5997%" height="15" fill="rgb(217,91,39)" fg:x="19357" fg:w="154"/><text x="75.6766%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="75.9833%" y="213" width="0.5997%" height="15" fill="rgb(241,101,11)" fg:x="19511" fg:w="154"/><text x="76.2763%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="76.5831%" y="213" width="0.5997%" height="15" fill="rgb(211,187,4)" fg:x="19665" fg:w="154"/><text x="76.8760%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="77.1828%" y="213" width="0.5997%" height="15" fill="rgb(243,104,22)" fg:x="19819" fg:w="154"/><text x="77.4758%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="77.7825%" y="213" width="0.5997%" height="15" fill="rgb(244,196,31)" fg:x="19973" fg:w="154"/><text x="78.0755%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="78.3823%" y="213" width="0.5997%" height="15" fill="rgb(246,71,17)" fg:x="20127" fg:w="154"/><text x="78.6752%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (288 instructions, 1.12%)</title><rect x="78.9820%" y="213" width="1.1216%" height="15" fill="rgb(228,157,52)" fg:x="20281" fg:w="288"/><text x="79.2750%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="80.1036%" y="213" width="0.5997%" height="15" fill="rgb(228,189,1)" fg:x="20569" fg:w="154"/><text x="80.3966%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 instructions, 0.60%)</title><rect x="80.7033%" y="213" width="0.5997%" height="15" fill="rgb(225,109,39)" fg:x="20723" fg:w="154"/><text x="80.9963%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.24%)</title><rect x="81.3031%" y="165" width="0.2376%" height="15" fill="rgb(214,218,34)" fg:x="20877" fg:w="61"/><text x="81.5960%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.51%)</title><rect x="81.3031%" y="181" width="0.5141%" height="15" fill="rgb(211,74,28)" fg:x="20877" fg:w="132"/><text x="81.5960%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="81.8171%" y="165" width="0.1051%" height="15" fill="rgb(219,222,29)" fg:x="21009" fg:w="27"/><text x="82.1101%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.45%)</title><rect x="81.8171%" y="181" width="0.4517%" height="15" fill="rgb(245,152,49)" fg:x="21009" fg:w="116"/><text x="82.1101%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 1.65%)</title><rect x="81.3031%" y="197" width="1.6512%" height="15" fill="rgb(232,94,37)" fg:x="20877" fg:w="424"/><text x="81.5960%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.02%)</title><rect x="82.9543%" y="181" width="2.0173%" height="15" fill="rgb(237,111,49)" fg:x="21301" fg:w="518"/><text x="83.2472%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.32%)</title><rect x="84.9716%" y="133" width="0.3193%" height="15" fill="rgb(246,224,42)" fg:x="21819" fg:w="82"/><text x="85.2645%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.48%)</title><rect x="84.9716%" y="149" width="0.4790%" height="15" fill="rgb(249,89,13)" fg:x="21819" fg:w="123"/><text x="85.2645%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.80%)</title><rect x="84.9716%" y="165" width="0.8022%" height="15" fill="rgb(238,215,28)" fg:x="21819" fg:w="206"/><text x="85.2645%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="85.7738%" y="165" width="0.0584%" height="15" fill="rgb(227,151,17)" fg:x="22025" fg:w="15"/><text x="86.0668%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="85.8322%" y="165" width="0.0584%" height="15" fill="rgb(209,154,6)" fg:x="22040" fg:w="15"/><text x="86.1252%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.67%)</title><rect x="84.9716%" y="181" width="1.6668%" height="15" fill="rgb(243,122,44)" fg:x="21819" fg:w="428"/><text x="85.2645%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.01%)</title><rect x="86.6384%" y="181" width="2.0095%" height="15" fill="rgb(223,211,47)" fg:x="22247" fg:w="516"/><text x="86.9313%" y="191.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="88.6479%" y="181" width="0.0273%" height="15" fill="rgb(225,114,4)" fg:x="22763" fg:w="7"/><text x="88.9408%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 6.02%)</title><rect x="82.9543%" y="197" width="6.0207%" height="15" fill="rgb(254,212,1)" fg:x="21301" fg:w="1546"/><text x="83.2472%" y="207.50">candid..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="88.9750%" y="197" width="0.0312%" height="15" fill="rgb(213,166,24)" fg:x="22847" fg:w="8"/><text x="89.2680%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="89.0062%" y="197" width="0.0312%" height="15" fill="rgb(254,75,47)" fg:x="22855" fg:w="8"/><text x="89.2991%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.24%)</title><rect x="89.0373%" y="197" width="0.2376%" height="15" fill="rgb(216,41,25)" fg:x="22863" fg:w="61"/><text x="89.3303%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 10.44%)</title><rect x="81.3031%" y="213" width="10.4369%" height="15" fill="rgb(214,116,21)" fg:x="20877" fg:w="2680"/><text x="81.5960%" y="223.50">ic_cdk::api::..</text></g><g><title>hashmap::__canister_method_batch_put::{{closure}} (25,080 instructions, 97.67%)</title><rect x="0.6387%" y="229" width="97.6712%" height="15" fill="rgb(214,188,7)" fg:x="164" fg:w="25080"/><text x="0.9316%" y="239.50">hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.06%)</title><rect x="98.3098%" y="229" width="0.0584%" height="15" fill="rgb(230,132,47)" fg:x="25244" fg:w="15"/><text x="98.6028%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="98.7187%" y="197" width="0.1051%" height="15" fill="rgb(220,57,1)" fg:x="25349" fg:w="27"/><text x="99.0117%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.80%)</title><rect x="98.3721%" y="213" width="0.7983%" height="15" fill="rgb(215,35,41)" fg:x="25260" fg:w="205"/><text x="98.6651%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 1.26%)</title><rect x="98.3683%" y="229" width="1.2579%" height="15" fill="rgb(236,199,29)" fg:x="25259" fg:w="323"/><text x="98.6612%" y="239.50"></text></g><g><title>all (25,678 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(208,115,43)" fg:x="0" fg:w="25678"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_put (25,678 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(232,209,21)" fg:x="0" fg:w="25678"/><text x="0.2930%" y="255.50">canister_update batch_put</text></g></svg></svg>