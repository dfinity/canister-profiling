<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21647"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0878%" height="15" fill="rgb(244,109,51)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.0878%" y="197" width="0.3511%" height="15" fill="rgb(220,12,54)" fg:x="19" fg:w="76"/><text x="0.3807%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.4389%" y="197" width="0.3511%" height="15" fill="rgb(252,46,5)" fg:x="95" fg:w="76"/><text x="0.7318%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.7899%" y="165" width="0.3511%" height="15" fill="rgb(237,213,8)" fg:x="171" fg:w="76"/><text x="1.0829%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="1.1410%" y="149" width="0.3188%" height="15" fill="rgb(229,86,43)" fg:x="247" fg:w="69"/><text x="1.4340%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.4598%" y="133" width="0.0185%" height="15" fill="rgb(244,126,24)" fg:x="316" fg:w="4"/><text x="1.7528%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="1.4598%" y="149" width="1.8755%" height="15" fill="rgb(226,91,41)" fg:x="316" fg:w="406"/><text x="1.7528%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="3.3353%" y="149" width="0.3788%" height="15" fill="rgb(211,26,18)" fg:x="722" fg:w="82"/><text x="3.6283%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.7141%" y="149" width="0.2495%" height="15" fill="rgb(231,137,4)" fg:x="804" fg:w="54"/><text x="4.0071%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.9636%" y="149" width="0.2495%" height="15" fill="rgb(247,127,41)" fg:x="858" fg:w="54"/><text x="4.2566%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.2131%" y="149" width="0.2495%" height="15" fill="rgb(232,87,45)" fg:x="912" fg:w="54"/><text x="4.5060%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.4625%" y="149" width="0.2495%" height="15" fill="rgb(245,199,23)" fg:x="966" fg:w="54"/><text x="4.7555%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="4.7120%" y="149" width="0.3188%" height="15" fill="rgb(224,7,6)" fg:x="1020" fg:w="69"/><text x="5.0049%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="5.0307%" y="149" width="0.3003%" height="15" fill="rgb(241,189,49)" fg:x="1089" fg:w="65"/><text x="5.3237%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.3310%" y="133" width="0.0185%" height="15" fill="rgb(226,185,29)" fg:x="1154" fg:w="4"/><text x="5.6240%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="5.3310%" y="149" width="1.8755%" height="15" fill="rgb(248,73,39)" fg:x="1154" fg:w="406"/><text x="5.6240%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="7.2065%" y="149" width="0.0739%" height="15" fill="rgb(225,104,25)" fg:x="1560" fg:w="16"/><text x="7.4995%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="7.2805%" y="133" width="0.3511%" height="15" fill="rgb(226,162,1)" fg:x="1576" fg:w="76"/><text x="7.5734%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="7.6315%" y="101" width="0.2772%" height="15" fill="rgb(211,103,37)" fg:x="1652" fg:w="60"/><text x="7.9245%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="7.6315%" y="117" width="0.3927%" height="15" fill="rgb(216,3,12)" fg:x="1652" fg:w="85"/><text x="7.9245%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="8.0242%" y="69" width="0.0416%" height="15" fill="rgb(229,211,4)" fg:x="1737" fg:w="9"/><text x="8.3172%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="8.0658%" y="53" width="0.1386%" height="15" fill="rgb(222,138,34)" fg:x="1746" fg:w="30"/><text x="8.3588%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="8.0658%" y="69" width="0.2541%" height="15" fill="rgb(232,149,0)" fg:x="1746" fg:w="55"/><text x="8.3588%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="8.0242%" y="85" width="0.5451%" height="15" fill="rgb(238,209,12)" fg:x="1737" fg:w="118"/><text x="8.3172%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="8.0242%" y="101" width="0.7899%" height="15" fill="rgb(218,87,24)" fg:x="1737" fg:w="171"/><text x="8.3172%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.81%)</title><rect x="8.0242%" y="117" width="0.8130%" height="15" fill="rgb(229,220,36)" fg:x="1737" fg:w="176"/><text x="8.3172%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.72%)</title><rect x="7.6315%" y="133" width="1.7185%" height="15" fill="rgb(227,179,54)" fg:x="1652" fg:w="372"/><text x="7.9245%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.72%)</title><rect x="7.2805%" y="149" width="2.7209%" height="15" fill="rgb(226,192,47)" fg:x="1576" fg:w="589"/><text x="7.5734%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="10.0014%" y="149" width="0.3788%" height="15" fill="rgb(233,133,28)" fg:x="2165" fg:w="82"/><text x="10.2944%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="10.3802%" y="149" width="0.2541%" height="15" fill="rgb(251,80,29)" fg:x="2247" fg:w="55"/><text x="10.6732%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="10.6343%" y="149" width="0.2910%" height="15" fill="rgb(237,100,12)" fg:x="2302" fg:w="63"/><text x="10.9272%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="10.9253%" y="149" width="0.3003%" height="15" fill="rgb(232,225,5)" fg:x="2365" fg:w="65"/><text x="11.2183%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.2256%" y="117" width="0.0185%" height="15" fill="rgb(206,209,45)" fg:x="2430" fg:w="4"/><text x="11.5185%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.88%)</title><rect x="11.2256%" y="133" width="1.8755%" height="15" fill="rgb(210,205,39)" fg:x="2430" fg:w="406"/><text x="11.5185%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="13.1011%" y="133" width="0.0739%" height="15" fill="rgb(206,149,35)" fg:x="2836" fg:w="16"/><text x="13.3941%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="13.1750%" y="117" width="0.3511%" height="15" fill="rgb(232,180,0)" fg:x="2852" fg:w="76"/><text x="13.4680%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="13.5261%" y="85" width="0.2772%" height="15" fill="rgb(211,41,17)" fg:x="2928" fg:w="60"/><text x="13.8191%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="13.5261%" y="101" width="0.3927%" height="15" fill="rgb(219,6,10)" fg:x="2928" fg:w="85"/><text x="13.8191%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="13.9188%" y="53" width="0.0416%" height="15" fill="rgb(231,77,53)" fg:x="3013" fg:w="9"/><text x="14.2118%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="13.9604%" y="37" width="0.1386%" height="15" fill="rgb(239,86,19)" fg:x="3022" fg:w="30"/><text x="14.2533%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="13.9604%" y="53" width="0.2541%" height="15" fill="rgb(214,227,54)" fg:x="3022" fg:w="55"/><text x="14.2533%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.55%)</title><rect x="13.9188%" y="69" width="0.5451%" height="15" fill="rgb(236,6,42)" fg:x="3013" fg:w="118"/><text x="14.2118%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.79%)</title><rect x="13.9188%" y="85" width="0.7899%" height="15" fill="rgb(226,72,35)" fg:x="3013" fg:w="171"/><text x="14.2118%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.81%)</title><rect x="13.9188%" y="101" width="0.8130%" height="15" fill="rgb(253,222,41)" fg:x="3013" fg:w="176"/><text x="14.2118%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.72%)</title><rect x="13.5261%" y="117" width="1.7185%" height="15" fill="rgb(238,52,52)" fg:x="2928" fg:w="372"/><text x="13.8191%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.72%)</title><rect x="13.1750%" y="133" width="2.7209%" height="15" fill="rgb(230,203,31)" fg:x="2852" fg:w="589"/><text x="13.4680%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.38%)</title><rect x="15.8960%" y="133" width="0.3788%" height="15" fill="rgb(254,166,13)" fg:x="3441" fg:w="82"/><text x="16.1889%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="16.2748%" y="133" width="0.2541%" height="15" fill="rgb(225,174,40)" fg:x="3523" fg:w="55"/><text x="16.5677%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.32%)</title><rect x="16.5288%" y="117" width="0.3188%" height="15" fill="rgb(224,171,53)" fg:x="3578" fg:w="69"/><text x="16.8218%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.42%)</title><rect x="16.8476%" y="117" width="0.4204%" height="15" fill="rgb(224,42,25)" fg:x="3647" fg:w="91"/><text x="17.1406%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="17.2680%" y="117" width="0.2910%" height="15" fill="rgb(244,100,30)" fg:x="3738" fg:w="63"/><text x="17.5610%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.30%)</title><rect x="16.5288%" y="133" width="1.3027%" height="15" fill="rgb(247,219,16)" fg:x="3578" fg:w="282"/><text x="16.8218%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.36%)</title><rect x="17.8316%" y="133" width="0.3603%" height="15" fill="rgb(250,28,11)" fg:x="3860" fg:w="78"/><text x="18.1245%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 7.90%)</title><rect x="11.2256%" y="149" width="7.9041%" height="15" fill="rgb(226,90,34)" fg:x="2430" fg:w="1711"/><text x="11.5185%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.29%)</title><rect x="19.1297%" y="149" width="0.2910%" height="15" fill="rgb(224,0,36)" fg:x="4141" fg:w="63"/><text x="19.4226%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.4207%" y="149" width="0.0601%" height="15" fill="rgb(250,79,25)" fg:x="4204" fg:w="13"/><text x="19.7137%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.4808%" y="149" width="0.0601%" height="15" fill="rgb(206,196,28)" fg:x="4217" fg:w="13"/><text x="19.7737%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="19.5408%" y="149" width="0.0323%" height="15" fill="rgb(222,21,13)" fg:x="4230" fg:w="7"/><text x="19.8338%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="19.5732%" y="149" width="0.0693%" height="15" fill="rgb(211,57,20)" fg:x="4237" fg:w="15"/><text x="19.8661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="19.6424%" y="133" width="0.3511%" height="15" fill="rgb(252,30,31)" fg:x="4252" fg:w="76"/><text x="19.9354%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.73%)</title><rect x="19.6424%" y="149" width="0.7345%" height="15" fill="rgb(236,219,45)" fg:x="4252" fg:w="159"/><text x="19.9354%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="20.3770%" y="117" width="0.3511%" height="15" fill="rgb(213,54,37)" fg:x="4411" fg:w="76"/><text x="20.6699%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="20.3770%" y="133" width="0.5082%" height="15" fill="rgb(242,132,28)" fg:x="4411" fg:w="110"/><text x="20.6699%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.82%)</title><rect x="20.3770%" y="149" width="0.8223%" height="15" fill="rgb(235,53,16)" fg:x="4411" fg:w="178"/><text x="20.6699%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.1992%" y="149" width="0.3511%" height="15" fill="rgb(249,39,12)" fg:x="4589" fg:w="76"/><text x="21.4922%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="21.5503%" y="149" width="0.3742%" height="15" fill="rgb(244,178,51)" fg:x="4665" fg:w="81"/><text x="21.8433%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.9245%" y="149" width="0.3511%" height="15" fill="rgb(229,54,7)" fg:x="4746" fg:w="76"/><text x="22.2175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="22.2756%" y="149" width="0.3511%" height="15" fill="rgb(245,229,51)" fg:x="4822" fg:w="76"/><text x="22.5686%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="22.6359%" y="149" width="0.3742%" height="15" fill="rgb(241,15,45)" fg:x="4900" fg:w="81"/><text x="22.9289%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.84%)</title><rect x="23.0101%" y="149" width="1.8432%" height="15" fill="rgb(253,168,21)" fg:x="4981" fg:w="399"/><text x="23.3031%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.84%)</title><rect x="24.8533%" y="149" width="1.8432%" height="15" fill="rgb(221,107,16)" fg:x="5380" fg:w="399"/><text x="25.1463%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 29.84%)</title><rect x="1.1410%" y="165" width="29.8379%" height="15" fill="rgb(231,157,2)" fg:x="247" fg:w="6459"/><text x="1.4340%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 1.64%)</title><rect x="30.9789%" y="165" width="1.6353%" height="15" fill="rgb(225,222,4)" fg:x="6706" fg:w="354"/><text x="31.2719%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="32.6142%" y="149" width="0.0231%" height="15" fill="rgb(229,42,53)" fg:x="7060" fg:w="5"/><text x="32.9072%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.18%)</title><rect x="32.6142%" y="165" width="0.1802%" height="15" fill="rgb(206,139,43)" fg:x="7060" fg:w="39"/><text x="32.9072%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="32.7944%" y="165" width="0.3511%" height="15" fill="rgb(238,167,49)" fg:x="7099" fg:w="76"/><text x="33.0874%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="33.1455%" y="149" width="0.0231%" height="15" fill="rgb(210,103,2)" fg:x="7175" fg:w="5"/><text x="33.4384%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="33.1686%" y="133" width="0.2448%" height="15" fill="rgb(246,153,44)" fg:x="7180" fg:w="53"/><text x="33.4615%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="33.4134%" y="133" width="0.4065%" height="15" fill="rgb(240,228,33)" fg:x="7233" fg:w="88"/><text x="33.7064%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="33.8199%" y="133" width="0.7484%" height="15" fill="rgb(212,193,44)" fg:x="7321" fg:w="162"/><text x="34.1129%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.49%)</title><rect x="33.1686%" y="149" width="2.4946%" height="15" fill="rgb(205,46,9)" fg:x="7180" fg:w="540"/><text x="33.4615%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (749 instructions, 3.46%)</title><rect x="33.1455%" y="165" width="3.4601%" height="15" fill="rgb(237,206,7)" fg:x="7175" fg:w="749"/><text x="33.4384%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="36.6055%" y="165" width="0.3511%" height="15" fill="rgb(253,164,2)" fg:x="7924" fg:w="76"/><text x="36.8985%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="36.9566%" y="149" width="0.0231%" height="15" fill="rgb(219,174,54)" fg:x="8000" fg:w="5"/><text x="37.2496%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="36.9797%" y="133" width="0.2448%" height="15" fill="rgb(225,223,44)" fg:x="8005" fg:w="53"/><text x="37.2727%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="37.2246%" y="133" width="0.4065%" height="15" fill="rgb(230,180,48)" fg:x="8058" fg:w="88"/><text x="37.5175%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="37.6311%" y="133" width="0.7484%" height="15" fill="rgb(249,173,54)" fg:x="8146" fg:w="162"/><text x="37.9240%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.49%)</title><rect x="36.9797%" y="149" width="2.4946%" height="15" fill="rgb(221,128,8)" fg:x="8005" fg:w="540"/><text x="37.2727%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.31%)</title><rect x="39.4743%" y="149" width="0.3141%" height="15" fill="rgb(228,147,32)" fg:x="8545" fg:w="68"/><text x="39.7673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="39.7884%" y="133" width="0.3742%" height="15" fill="rgb(223,132,8)" fg:x="8613" fg:w="81"/><text x="40.0814%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.50%)</title><rect x="39.7884%" y="149" width="0.4989%" height="15" fill="rgb(239,162,5)" fg:x="8613" fg:w="108"/><text x="40.0814%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 4.11%)</title><rect x="36.9566%" y="165" width="4.1114%" height="15" fill="rgb(249,98,13)" fg:x="8000" fg:w="890"/><text x="37.2496%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="41.0680%" y="117" width="0.2448%" height="15" fill="rgb(254,224,45)" fg:x="8890" fg:w="53"/><text x="41.3610%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.36%)</title><rect x="41.0680%" y="133" width="0.3603%" height="15" fill="rgb(213,167,47)" fg:x="8890" fg:w="78"/><text x="41.3610%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.35%)</title><rect x="41.0680%" y="149" width="1.3535%" height="15" fill="rgb(226,126,43)" fg:x="8890" fg:w="293"/><text x="41.3610%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1319 (15 instructions, 0.07%)</title><rect x="42.4216%" y="149" width="0.0693%" height="15" fill="rgb(207,206,1)" fg:x="9183" fg:w="15"/><text x="42.7146%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="42.4909%" y="149" width="0.0508%" height="15" fill="rgb(206,6,12)" fg:x="9198" fg:w="11"/><text x="42.7838%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.21%)</title><rect x="41.0680%" y="165" width="2.2082%" height="15" fill="rgb(238,212,6)" fg:x="8890" fg:w="478"/><text x="41.3610%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.22%)</title><rect x="43.2762%" y="165" width="0.2171%" height="15" fill="rgb(251,117,47)" fg:x="9368" fg:w="47"/><text x="43.5692%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="43.4933%" y="149" width="0.5682%" height="15" fill="rgb(209,58,31)" fg:x="9415" fg:w="123"/><text x="43.7863%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="44.1863%" y="149" width="0.5682%" height="15" fill="rgb(232,20,36)" fg:x="9565" fg:w="123"/><text x="44.4792%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.39%)</title><rect x="43.4933%" y="165" width="1.3859%" height="15" fill="rgb(206,92,16)" fg:x="9415" fg:w="300"/><text x="43.7863%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.13%)</title><rect x="44.8792%" y="149" width="0.1293%" height="15" fill="rgb(248,30,38)" fg:x="9715" fg:w="28"/><text x="45.1722%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1739 (15 instructions, 0.07%)</title><rect x="45.0085%" y="149" width="0.0693%" height="15" fill="rgb(217,60,7)" fg:x="9743" fg:w="15"/><text x="45.3015%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1739 (15 instructions, 0.07%)</title><rect x="45.0778%" y="149" width="0.0693%" height="15" fill="rgb(208,10,9)" fg:x="9758" fg:w="15"/><text x="45.3708%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.62%)</title><rect x="44.8792%" y="165" width="0.6236%" height="15" fill="rgb(223,73,38)" fg:x="9715" fg:w="135"/><text x="45.1722%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.5028%" y="165" width="0.0508%" height="15" fill="rgb(225,48,45)" fg:x="9850" fg:w="11"/><text x="45.7958%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.5537%" y="165" width="0.0508%" height="15" fill="rgb(222,36,25)" fg:x="9861" fg:w="11"/><text x="45.8466%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.6045%" y="165" width="0.0508%" height="15" fill="rgb(212,143,53)" fg:x="9872" fg:w="11"/><text x="45.8974%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.89%)</title><rect x="45.6553%" y="165" width="1.8940%" height="15" fill="rgb(218,161,7)" fg:x="9883" fg:w="410"/><text x="45.9483%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="47.5493%" y="133" width="0.0554%" height="15" fill="rgb(215,149,40)" fg:x="10293" fg:w="12"/><text x="47.8423%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.78%)</title><rect x="47.6047%" y="133" width="0.7761%" height="15" fill="rgb(238,23,17)" fg:x="10305" fg:w="168"/><text x="47.8977%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="48.3808%" y="101" width="0.4389%" height="15" fill="rgb(210,13,10)" fg:x="10473" fg:w="95"/><text x="48.6738%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.90%)</title><rect x="48.3808%" y="117" width="0.9008%" height="15" fill="rgb(222,0,26)" fg:x="10473" fg:w="195"/><text x="48.6738%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 1.03%)</title><rect x="48.3808%" y="133" width="1.0255%" height="15" fill="rgb(214,188,19)" fg:x="10473" fg:w="222"/><text x="48.6738%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="49.4064%" y="133" width="0.0508%" height="15" fill="rgb(226,93,19)" fg:x="10695" fg:w="11"/><text x="49.6994%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (453 instructions, 2.09%)</title><rect x="47.5493%" y="149" width="2.0927%" height="15" fill="rgb(233,226,44)" fg:x="10293" fg:w="453"/><text x="47.8423%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (491 instructions, 2.27%)</title><rect x="47.5493%" y="165" width="2.2682%" height="15" fill="rgb(213,171,40)" fg:x="10293" fg:w="491"/><text x="47.8423%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="49.8175%" y="149" width="0.2495%" height="15" fill="rgb(209,167,43)" fg:x="10784" fg:w="54"/><text x="50.1105%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="50.0670%" y="149" width="0.4389%" height="15" fill="rgb(229,29,24)" fg:x="10838" fg:w="95"/><text x="50.3600%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.06%)</title><rect x="49.8175%" y="165" width="1.0625%" height="15" fill="rgb(205,22,48)" fg:x="10784" fg:w="230"/><text x="50.1105%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,236 instructions, 51.91%)</title><rect x="0.7899%" y="181" width="51.9056%" height="15" fill="rgb(212,103,22)" fg:x="171" fg:w="11236"/><text x="1.0829%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="52.6955%" y="181" width="0.6883%" height="15" fill="rgb(245,40,50)" fg:x="11407" fg:w="149"/><text x="52.9885%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="53.3838%" y="181" width="0.6883%" height="15" fill="rgb(235,162,49)" fg:x="11556" fg:w="149"/><text x="53.6768%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.0722%" y="181" width="0.6883%" height="15" fill="rgb(245,158,11)" fg:x="11705" fg:w="149"/><text x="54.3651%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.7605%" y="181" width="0.6883%" height="15" fill="rgb(233,70,46)" fg:x="11854" fg:w="149"/><text x="55.0534%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="55.4488%" y="181" width="0.6883%" height="15" fill="rgb(248,136,16)" fg:x="12003" fg:w="149"/><text x="55.7418%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.1371%" y="181" width="0.6883%" height="15" fill="rgb(250,205,51)" fg:x="12152" fg:w="149"/><text x="56.4301%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.8254%" y="181" width="0.6883%" height="15" fill="rgb(236,192,8)" fg:x="12301" fg:w="149"/><text x="57.1184%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="57.5137%" y="181" width="0.6883%" height="15" fill="rgb(250,20,10)" fg:x="12450" fg:w="149"/><text x="57.8067%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.2021%" y="181" width="0.6883%" height="15" fill="rgb(237,121,27)" fg:x="12599" fg:w="149"/><text x="58.4950%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.8904%" y="181" width="0.6883%" height="15" fill="rgb(234,128,17)" fg:x="12748" fg:w="149"/><text x="59.1833%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.5787%" y="181" width="0.6883%" height="15" fill="rgb(230,65,12)" fg:x="12897" fg:w="149"/><text x="59.8717%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.2670%" y="181" width="0.6883%" height="15" fill="rgb(212,186,2)" fg:x="13046" fg:w="149"/><text x="60.5600%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.9553%" y="181" width="0.6883%" height="15" fill="rgb(213,163,43)" fg:x="13195" fg:w="149"/><text x="61.2483%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="61.6436%" y="181" width="0.9794%" height="15" fill="rgb(242,204,10)" fg:x="13344" fg:w="212"/><text x="61.9366%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="62.6230%" y="181" width="0.6883%" height="15" fill="rgb(236,74,13)" fg:x="13556" fg:w="149"/><text x="62.9160%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="63.3113%" y="181" width="0.6883%" height="15" fill="rgb(249,46,29)" fg:x="13705" fg:w="149"/><text x="63.6043%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="63.9996%" y="181" width="0.6883%" height="15" fill="rgb(237,114,38)" fg:x="13854" fg:w="149"/><text x="64.2926%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.6879%" y="181" width="0.6883%" height="15" fill="rgb(210,162,31)" fg:x="14003" fg:w="149"/><text x="64.9809%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="65.3763%" y="181" width="0.6883%" height="15" fill="rgb(250,74,0)" fg:x="14152" fg:w="149"/><text x="65.6692%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.0646%" y="181" width="0.6883%" height="15" fill="rgb(215,148,45)" fg:x="14301" fg:w="149"/><text x="66.3576%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.7529%" y="181" width="0.6883%" height="15" fill="rgb(235,148,34)" fg:x="14450" fg:w="149"/><text x="67.0459%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="67.4412%" y="181" width="0.6883%" height="15" fill="rgb(224,204,39)" fg:x="14599" fg:w="149"/><text x="67.7342%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.1295%" y="181" width="0.6883%" height="15" fill="rgb(205,220,47)" fg:x="14748" fg:w="149"/><text x="68.4225%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.8179%" y="181" width="0.6883%" height="15" fill="rgb(247,24,0)" fg:x="14897" fg:w="149"/><text x="69.1108%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="69.5062%" y="181" width="0.9794%" height="15" fill="rgb(232,68,16)" fg:x="15046" fg:w="212"/><text x="69.7991%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="70.4855%" y="181" width="0.6883%" height="15" fill="rgb(211,130,51)" fg:x="15258" fg:w="149"/><text x="70.7785%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.1738%" y="181" width="0.6883%" height="15" fill="rgb(213,112,15)" fg:x="15407" fg:w="149"/><text x="71.4668%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.8622%" y="181" width="0.6883%" height="15" fill="rgb(224,204,42)" fg:x="15556" fg:w="149"/><text x="72.1551%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.5505%" y="181" width="0.6883%" height="15" fill="rgb(252,154,20)" fg:x="15705" fg:w="149"/><text x="72.8434%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.2388%" y="181" width="0.6883%" height="15" fill="rgb(251,26,41)" fg:x="15854" fg:w="149"/><text x="73.5318%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.9271%" y="181" width="0.6883%" height="15" fill="rgb(240,114,18)" fg:x="16003" fg:w="149"/><text x="74.2201%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.6154%" y="181" width="0.6883%" height="15" fill="rgb(241,11,3)" fg:x="16152" fg:w="149"/><text x="74.9084%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.3037%" y="181" width="0.6883%" height="15" fill="rgb(210,68,52)" fg:x="16301" fg:w="149"/><text x="75.5967%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.9921%" y="181" width="0.6883%" height="15" fill="rgb(235,186,54)" fg:x="16450" fg:w="149"/><text x="76.2850%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.6804%" y="181" width="0.6883%" height="15" fill="rgb(231,68,14)" fg:x="16599" fg:w="149"/><text x="76.9733%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="77.3687%" y="181" width="0.6883%" height="15" fill="rgb(228,54,13)" fg:x="16748" fg:w="149"/><text x="77.6617%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.0570%" y="181" width="0.6883%" height="15" fill="rgb(251,184,50)" fg:x="16897" fg:w="149"/><text x="78.3500%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.7453%" y="181" width="0.6883%" height="15" fill="rgb(249,228,29)" fg:x="17046" fg:w="149"/><text x="79.0383%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="79.4336%" y="181" width="0.6883%" height="15" fill="rgb(236,192,46)" fg:x="17195" fg:w="149"/><text x="79.7266%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.1220%" y="181" width="0.6883%" height="15" fill="rgb(237,71,19)" fg:x="17344" fg:w="149"/><text x="80.4149%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.8103%" y="181" width="0.6883%" height="15" fill="rgb(208,133,42)" fg:x="17493" fg:w="149"/><text x="81.1032%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.4986%" y="181" width="0.6883%" height="15" fill="rgb(243,170,52)" fg:x="17642" fg:w="149"/><text x="81.7916%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.1869%" y="181" width="0.6883%" height="15" fill="rgb(226,15,16)" fg:x="17791" fg:w="149"/><text x="82.4799%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.8752%" y="181" width="0.6883%" height="15" fill="rgb(232,5,53)" fg:x="17940" fg:w="149"/><text x="83.1682%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.5635%" y="181" width="0.6883%" height="15" fill="rgb(210,39,12)" fg:x="18089" fg:w="149"/><text x="83.8565%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.2519%" y="181" width="0.6883%" height="15" fill="rgb(245,162,40)" fg:x="18238" fg:w="149"/><text x="84.5448%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.9402%" y="181" width="0.6883%" height="15" fill="rgb(241,2,2)" fg:x="18387" fg:w="149"/><text x="85.2331%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 instructions, 1.27%)</title><rect x="85.6285%" y="181" width="1.2704%" height="15" fill="rgb(214,18,25)" fg:x="18536" fg:w="275"/><text x="85.9215%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="86.8989%" y="181" width="0.6883%" height="15" fill="rgb(210,51,37)" fg:x="18811" fg:w="149"/><text x="87.1918%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.5872%" y="181" width="0.6883%" height="15" fill="rgb(233,206,23)" fg:x="18960" fg:w="149"/><text x="87.8802%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="88.2755%" y="149" width="0.0231%" height="15" fill="rgb(223,55,24)" fg:x="19109" fg:w="5"/><text x="88.5685%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="88.2986%" y="117" width="0.2495%" height="15" fill="rgb(238,76,17)" fg:x="19114" fg:w="54"/><text x="88.5916%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.62%)</title><rect x="88.2986%" y="133" width="0.6236%" height="15" fill="rgb(247,122,31)" fg:x="19114" fg:w="135"/><text x="88.5916%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.75%)</title><rect x="88.2986%" y="149" width="0.7484%" height="15" fill="rgb(240,65,26)" fg:x="19114" fg:w="162"/><text x="88.5916%" y="159.50"></text></g><g><title>memset (136 instructions, 0.63%)</title><rect x="89.0470%" y="149" width="0.6283%" height="15" fill="rgb(206,182,34)" fg:x="19276" fg:w="136"/><text x="89.3399%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.14%)</title><rect x="88.2755%" y="165" width="2.1389%" height="15" fill="rgb(251,186,46)" fg:x="19109" fg:w="463"/><text x="88.5685%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.15%)</title><rect x="90.4144%" y="149" width="0.1478%" height="15" fill="rgb(240,163,26)" fg:x="19572" fg:w="32"/><text x="90.7073%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="90.5622%" y="101" width="0.3511%" height="15" fill="rgb(237,123,24)" fg:x="19604" fg:w="76"/><text x="90.8552%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="90.5622%" y="117" width="0.5082%" height="15" fill="rgb(248,94,23)" fg:x="19604" fg:w="110"/><text x="90.8552%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.81%)</title><rect x="90.5622%" y="133" width="0.8084%" height="15" fill="rgb(212,177,44)" fg:x="19604" fg:w="175"/><text x="90.8552%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.3706%" y="133" width="0.0508%" height="15" fill="rgb(243,30,27)" fg:x="19779" fg:w="11"/><text x="91.6636%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.4214%" y="133" width="0.0508%" height="15" fill="rgb(230,87,13)" fg:x="19790" fg:w="11"/><text x="91.7144%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 1.66%)</title><rect x="90.5622%" y="149" width="1.6584%" height="15" fill="rgb(227,142,45)" fg:x="19604" fg:w="359"/><text x="90.8552%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.14%)</title><rect x="92.2206%" y="149" width="0.1386%" height="15" fill="rgb(230,12,36)" fg:x="19963" fg:w="30"/><text x="92.5136%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="92.3592%" y="149" width="0.0231%" height="15" fill="rgb(221,193,5)" fg:x="19993" fg:w="5"/><text x="92.6522%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 2.28%)</title><rect x="90.4144%" y="165" width="2.2821%" height="15" fill="rgb(225,228,52)" fg:x="19572" fg:w="494"/><text x="90.7073%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="92.6964%" y="165" width="0.0231%" height="15" fill="rgb(210,92,54)" fg:x="20066" fg:w="5"/><text x="92.9894%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="92.7195%" y="165" width="0.2541%" height="15" fill="rgb(232,64,19)" fg:x="20071" fg:w="55"/><text x="93.0125%" y="175.50"></text></g><g><title>candid::utils::write_args (1,081 instructions, 4.99%)</title><rect x="88.2755%" y="181" width="4.9938%" height="15" fill="rgb(248,64,52)" fg:x="19109" fg:w="1081"/><text x="88.5685%" y="191.50">candi..</text></g><g><title>hashmap::batch_put_6_::{{closure}} (21,185 instructions, 97.87%)</title><rect x="0.7899%" y="197" width="97.8658%" height="15" fill="rgb(246,54,41)" fg:x="171" fg:w="21185"/><text x="1.0829%" y="207.50">hashmap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.6557%" y="197" width="0.0554%" height="15" fill="rgb(228,199,47)" fg:x="21356" fg:w="12"/><text x="98.9487%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="98.7111%" y="197" width="0.3742%" height="15" fill="rgb(249,71,12)" fg:x="21368" fg:w="81"/><text x="99.0041%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.46%)</title><rect x="99.0853%" y="197" width="0.4620%" height="15" fill="rgb(217,149,43)" fg:x="21449" fg:w="100"/><text x="99.3783%" y="207.50"></text></g><g><title>all (21,647 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,74,29)" fg:x="0" fg:w="21647"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (21,647 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,129,8)" fg:x="0" fg:w="21647"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>