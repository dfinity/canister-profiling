<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21680"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0876%" height="15" fill="rgb(211,97,37)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.0876%" y="197" width="0.3506%" height="15" fill="rgb(219,5,51)" fg:x="19" fg:w="76"/><text x="0.3806%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.4382%" y="197" width="0.3506%" height="15" fill="rgb(253,226,35)" fg:x="95" fg:w="76"/><text x="0.7312%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="0.7887%" y="165" width="0.3506%" height="15" fill="rgb(211,130,34)" fg:x="171" fg:w="76"/><text x="1.0817%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.33%)</title><rect x="1.1393%" y="149" width="0.3275%" height="15" fill="rgb(232,196,43)" fg:x="247" fg:w="71"/><text x="1.4323%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.4668%" y="133" width="0.0185%" height="15" fill="rgb(247,63,36)" fg:x="318" fg:w="4"/><text x="1.7598%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.85%)</title><rect x="1.4668%" y="149" width="1.8542%" height="15" fill="rgb(251,30,13)" fg:x="318" fg:w="402"/><text x="1.7598%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.38%)</title><rect x="3.3210%" y="149" width="0.3828%" height="15" fill="rgb(251,46,31)" fg:x="720" fg:w="83"/><text x="3.6140%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.7039%" y="149" width="0.2491%" height="15" fill="rgb(253,167,6)" fg:x="803" fg:w="54"/><text x="3.9968%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.9530%" y="149" width="0.2491%" height="15" fill="rgb(254,111,22)" fg:x="857" fg:w="54"/><text x="4.2459%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.2020%" y="149" width="0.2491%" height="15" fill="rgb(214,188,2)" fg:x="911" fg:w="54"/><text x="4.4950%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.4511%" y="149" width="0.2491%" height="15" fill="rgb(215,229,1)" fg:x="965" fg:w="54"/><text x="4.7441%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.33%)</title><rect x="4.7002%" y="149" width="0.3275%" height="15" fill="rgb(230,197,7)" fg:x="1019" fg:w="71"/><text x="4.9932%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="5.0277%" y="149" width="0.2998%" height="15" fill="rgb(206,181,44)" fg:x="1090" fg:w="65"/><text x="5.3206%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.3275%" y="133" width="0.0185%" height="15" fill="rgb(219,125,47)" fg:x="1155" fg:w="4"/><text x="5.6205%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.85%)</title><rect x="5.3275%" y="149" width="1.8542%" height="15" fill="rgb(232,93,32)" fg:x="1155" fg:w="402"/><text x="5.6205%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="7.1817%" y="149" width="0.0738%" height="15" fill="rgb(208,191,50)" fg:x="1557" fg:w="16"/><text x="7.4747%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="7.2555%" y="133" width="0.3506%" height="15" fill="rgb(254,60,3)" fg:x="1573" fg:w="76"/><text x="7.5485%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="7.6061%" y="101" width="0.2768%" height="15" fill="rgb(240,154,23)" fg:x="1649" fg:w="60"/><text x="7.8991%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="7.6061%" y="117" width="0.3921%" height="15" fill="rgb(212,189,44)" fg:x="1649" fg:w="85"/><text x="7.8991%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="7.9982%" y="69" width="0.0415%" height="15" fill="rgb(228,155,46)" fg:x="1734" fg:w="9"/><text x="8.2911%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="8.0397%" y="53" width="0.1384%" height="15" fill="rgb(213,52,33)" fg:x="1743" fg:w="30"/><text x="8.3326%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="8.0397%" y="69" width="0.2537%" height="15" fill="rgb(236,214,15)" fg:x="1743" fg:w="55"/><text x="8.3326%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.53%)</title><rect x="7.9982%" y="85" width="0.5258%" height="15" fill="rgb(244,108,11)" fg:x="1734" fg:w="114"/><text x="8.2911%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.77%)</title><rect x="7.9982%" y="101" width="0.7703%" height="15" fill="rgb(205,95,33)" fg:x="1734" fg:w="167"/><text x="8.2911%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.79%)</title><rect x="7.9982%" y="117" width="0.7934%" height="15" fill="rgb(247,171,25)" fg:x="1734" fg:w="172"/><text x="8.2911%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 1.70%)</title><rect x="7.6061%" y="133" width="1.6974%" height="15" fill="rgb(232,94,29)" fg:x="1649" fg:w="368"/><text x="7.8991%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 2.61%)</title><rect x="7.2555%" y="149" width="2.6061%" height="15" fill="rgb(219,220,53)" fg:x="1573" fg:w="565"/><text x="7.5485%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.38%)</title><rect x="9.8616%" y="149" width="0.3828%" height="15" fill="rgb(229,15,10)" fg:x="2138" fg:w="83"/><text x="10.1546%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="10.2445%" y="149" width="0.2537%" height="15" fill="rgb(227,117,16)" fg:x="2221" fg:w="55"/><text x="10.5374%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.30%)</title><rect x="10.4982%" y="149" width="0.2998%" height="15" fill="rgb(252,54,38)" fg:x="2276" fg:w="65"/><text x="10.7911%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.30%)</title><rect x="10.7980%" y="149" width="0.2998%" height="15" fill="rgb(246,46,2)" fg:x="2341" fg:w="65"/><text x="11.0909%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.0978%" y="117" width="0.0185%" height="15" fill="rgb(239,219,6)" fg:x="2406" fg:w="4"/><text x="11.3908%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.85%)</title><rect x="11.0978%" y="133" width="1.8542%" height="15" fill="rgb(251,104,47)" fg:x="2406" fg:w="402"/><text x="11.3908%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.07%)</title><rect x="12.9520%" y="133" width="0.0738%" height="15" fill="rgb(228,78,26)" fg:x="2808" fg:w="16"/><text x="13.2450%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="13.0258%" y="117" width="0.3506%" height="15" fill="rgb(221,103,13)" fg:x="2824" fg:w="76"/><text x="13.3188%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="13.3764%" y="85" width="0.2768%" height="15" fill="rgb(232,114,25)" fg:x="2900" fg:w="60"/><text x="13.6694%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.39%)</title><rect x="13.3764%" y="101" width="0.3921%" height="15" fill="rgb(247,117,13)" fg:x="2900" fg:w="85"/><text x="13.6694%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="13.7685%" y="53" width="0.0415%" height="15" fill="rgb(239,8,29)" fg:x="2985" fg:w="9"/><text x="14.0614%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="13.8100%" y="37" width="0.1384%" height="15" fill="rgb(248,110,19)" fg:x="2994" fg:w="30"/><text x="14.1029%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.25%)</title><rect x="13.8100%" y="53" width="0.2537%" height="15" fill="rgb(226,2,6)" fg:x="2994" fg:w="55"/><text x="14.1029%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.53%)</title><rect x="13.7685%" y="69" width="0.5258%" height="15" fill="rgb(223,69,42)" fg:x="2985" fg:w="114"/><text x="14.0614%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.77%)</title><rect x="13.7685%" y="85" width="0.7703%" height="15" fill="rgb(217,182,27)" fg:x="2985" fg:w="167"/><text x="14.0614%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.79%)</title><rect x="13.7685%" y="101" width="0.7934%" height="15" fill="rgb(245,89,31)" fg:x="2985" fg:w="172"/><text x="14.0614%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 1.70%)</title><rect x="13.3764%" y="117" width="1.6974%" height="15" fill="rgb(241,47,3)" fg:x="2900" fg:w="368"/><text x="13.6694%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 2.61%)</title><rect x="13.0258%" y="133" width="2.6061%" height="15" fill="rgb(227,217,1)" fg:x="2824" fg:w="565"/><text x="13.3188%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.38%)</title><rect x="15.6319%" y="133" width="0.3828%" height="15" fill="rgb(206,126,5)" fg:x="3389" fg:w="83"/><text x="15.9249%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="16.0148%" y="133" width="0.2537%" height="15" fill="rgb(216,157,18)" fg:x="3472" fg:w="55"/><text x="16.3077%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.33%)</title><rect x="16.2685%" y="117" width="0.3275%" height="15" fill="rgb(254,12,4)" fg:x="3527" fg:w="71"/><text x="16.5614%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.42%)</title><rect x="16.5959%" y="117" width="0.4151%" height="15" fill="rgb(250,113,28)" fg:x="3598" fg:w="90"/><text x="16.8889%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.30%)</title><rect x="17.0111%" y="117" width="0.2998%" height="15" fill="rgb(252,47,28)" fg:x="3688" fg:w="65"/><text x="17.3040%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 1.31%)</title><rect x="16.2685%" y="133" width="1.3146%" height="15" fill="rgb(242,133,11)" fg:x="3527" fg:w="285"/><text x="16.5614%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.36%)</title><rect x="17.5830%" y="133" width="0.3598%" height="15" fill="rgb(228,63,40)" fg:x="3812" fg:w="78"/><text x="17.8760%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 7.78%)</title><rect x="11.0978%" y="149" width="7.7814%" height="15" fill="rgb(248,215,43)" fg:x="2406" fg:w="1687"/><text x="11.3908%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.30%)</title><rect x="18.8792%" y="149" width="0.2998%" height="15" fill="rgb(229,95,9)" fg:x="4093" fg:w="65"/><text x="19.1721%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.1790%" y="149" width="0.0600%" height="15" fill="rgb(213,85,51)" fg:x="4158" fg:w="13"/><text x="19.4719%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.2389%" y="149" width="0.0600%" height="15" fill="rgb(249,19,14)" fg:x="4171" fg:w="13"/><text x="19.5319%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="19.2989%" y="149" width="0.0323%" height="15" fill="rgb(239,213,38)" fg:x="4184" fg:w="7"/><text x="19.5919%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="19.3312%" y="149" width="0.0692%" height="15" fill="rgb(206,99,52)" fg:x="4191" fg:w="15"/><text x="19.6241%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="19.4004%" y="133" width="0.3506%" height="15" fill="rgb(242,114,3)" fg:x="4206" fg:w="76"/><text x="19.6933%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.73%)</title><rect x="19.4004%" y="149" width="0.7334%" height="15" fill="rgb(217,134,23)" fg:x="4206" fg:w="159"/><text x="19.6933%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="20.1338%" y="117" width="0.3506%" height="15" fill="rgb(222,137,0)" fg:x="4365" fg:w="76"/><text x="20.4267%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="20.1338%" y="133" width="0.5074%" height="15" fill="rgb(232,67,40)" fg:x="4365" fg:w="110"/><text x="20.4267%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.83%)</title><rect x="20.1338%" y="149" width="0.8303%" height="15" fill="rgb(241,220,4)" fg:x="4365" fg:w="180"/><text x="20.4267%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="20.9640%" y="149" width="0.3506%" height="15" fill="rgb(235,190,49)" fg:x="4545" fg:w="76"/><text x="21.2570%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="21.3146%" y="149" width="0.3736%" height="15" fill="rgb(234,36,6)" fg:x="4621" fg:w="81"/><text x="21.6075%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="21.6882%" y="149" width="0.3506%" height="15" fill="rgb(236,19,43)" fg:x="4702" fg:w="76"/><text x="21.9812%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="22.0387%" y="149" width="0.3506%" height="15" fill="rgb(241,62,45)" fg:x="4778" fg:w="76"/><text x="22.3317%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="22.3985%" y="149" width="0.3736%" height="15" fill="rgb(211,149,30)" fg:x="4856" fg:w="81"/><text x="22.6915%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.84%)</title><rect x="22.7721%" y="149" width="1.8404%" height="15" fill="rgb(230,214,22)" fg:x="4937" fg:w="399"/><text x="23.0651%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.84%)</title><rect x="24.6125%" y="149" width="1.8404%" height="15" fill="rgb(211,205,11)" fg:x="5336" fg:w="399"/><text x="24.9055%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 29.74%)</title><rect x="1.1393%" y="165" width="29.7417%" height="15" fill="rgb(252,188,37)" fg:x="247" fg:w="6448"/><text x="1.4323%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 1.63%)</title><rect x="30.8810%" y="165" width="1.6328%" height="15" fill="rgb(238,97,11)" fg:x="6695" fg:w="354"/><text x="31.1740%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="32.5138%" y="149" width="0.0554%" height="15" fill="rgb(234,114,17)" fg:x="7049" fg:w="12"/><text x="32.8068%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.23%)</title><rect x="32.5138%" y="165" width="0.2306%" height="15" fill="rgb(236,206,2)" fg:x="7049" fg:w="50"/><text x="32.8068%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="32.7445%" y="165" width="0.3506%" height="15" fill="rgb(240,202,0)" fg:x="7099" fg:w="76"/><text x="33.0374%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="33.0950%" y="149" width="0.0554%" height="15" fill="rgb(219,48,25)" fg:x="7175" fg:w="12"/><text x="33.3880%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="33.1504%" y="133" width="0.2445%" height="15" fill="rgb(238,218,13)" fg:x="7187" fg:w="53"/><text x="33.4433%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="33.3948%" y="133" width="0.4059%" height="15" fill="rgb(252,184,45)" fg:x="7240" fg:w="88"/><text x="33.6878%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="33.8007%" y="133" width="0.7472%" height="15" fill="rgb(236,153,30)" fg:x="7328" fg:w="162"/><text x="34.0937%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.49%)</title><rect x="33.1504%" y="149" width="2.4908%" height="15" fill="rgb(217,185,2)" fg:x="7187" fg:w="540"/><text x="33.4433%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (760 instructions, 3.51%)</title><rect x="33.0950%" y="165" width="3.5055%" height="15" fill="rgb(209,157,50)" fg:x="7175" fg:w="760"/><text x="33.3880%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="36.6006%" y="165" width="0.3506%" height="15" fill="rgb(223,126,33)" fg:x="7935" fg:w="76"/><text x="36.8935%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="36.9511%" y="149" width="0.0554%" height="15" fill="rgb(225,206,51)" fg:x="8011" fg:w="12"/><text x="37.2441%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="37.0065%" y="133" width="0.2445%" height="15" fill="rgb(253,86,45)" fg:x="8023" fg:w="53"/><text x="37.2994%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="37.2509%" y="133" width="0.4059%" height="15" fill="rgb(233,176,20)" fg:x="8076" fg:w="88"/><text x="37.5439%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.75%)</title><rect x="37.6568%" y="133" width="0.7472%" height="15" fill="rgb(232,128,28)" fg:x="8164" fg:w="162"/><text x="37.9498%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.49%)</title><rect x="37.0065%" y="149" width="2.4908%" height="15" fill="rgb(217,198,32)" fg:x="8023" fg:w="540"/><text x="37.2994%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.31%)</title><rect x="39.4972%" y="149" width="0.3137%" height="15" fill="rgb(209,159,15)" fg:x="8563" fg:w="68"/><text x="39.7902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="39.8109%" y="133" width="0.3736%" height="15" fill="rgb(251,43,15)" fg:x="8631" fg:w="81"/><text x="40.1039%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.50%)</title><rect x="39.8109%" y="149" width="0.4982%" height="15" fill="rgb(250,19,13)" fg:x="8631" fg:w="108"/><text x="40.1039%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 4.13%)</title><rect x="36.9511%" y="165" width="4.1282%" height="15" fill="rgb(246,48,46)" fg:x="8011" fg:w="895"/><text x="37.2441%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.24%)</title><rect x="41.0793%" y="117" width="0.2445%" height="15" fill="rgb(217,16,25)" fg:x="8906" fg:w="53"/><text x="41.3723%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.36%)</title><rect x="41.0793%" y="133" width="0.3644%" height="15" fill="rgb(226,17,15)" fg:x="8906" fg:w="79"/><text x="41.3723%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.35%)</title><rect x="41.0793%" y="149" width="1.3469%" height="15" fill="rgb(240,98,32)" fg:x="8906" fg:w="292"/><text x="41.3723%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.848 (15 instructions, 0.07%)</title><rect x="42.4262%" y="149" width="0.0692%" height="15" fill="rgb(206,79,26)" fg:x="9198" fg:w="15"/><text x="42.7192%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="42.4954%" y="149" width="0.0507%" height="15" fill="rgb(243,108,14)" fg:x="9213" fg:w="11"/><text x="42.7884%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 2.30%)</title><rect x="41.0793%" y="165" width="2.2970%" height="15" fill="rgb(253,41,54)" fg:x="8906" fg:w="498"/><text x="41.3723%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.21%)</title><rect x="43.3764%" y="165" width="0.2076%" height="15" fill="rgb(209,171,44)" fg:x="9404" fg:w="45"/><text x="43.6694%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="43.5839%" y="149" width="0.5673%" height="15" fill="rgb(246,2,33)" fg:x="9449" fg:w="123"/><text x="43.8769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.57%)</title><rect x="44.2758%" y="149" width="0.5673%" height="15" fill="rgb(206,42,12)" fg:x="9599" fg:w="123"/><text x="44.5688%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.38%)</title><rect x="43.5839%" y="165" width="1.3838%" height="15" fill="rgb(236,80,38)" fg:x="9449" fg:w="300"/><text x="43.8769%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.13%)</title><rect x="44.9677%" y="149" width="0.1292%" height="15" fill="rgb(211,20,23)" fg:x="9749" fg:w="28"/><text x="45.2607%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (15 instructions, 0.07%)</title><rect x="45.0969%" y="149" width="0.0692%" height="15" fill="rgb(215,126,22)" fg:x="9777" fg:w="15"/><text x="45.3898%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (15 instructions, 0.07%)</title><rect x="45.1661%" y="149" width="0.0692%" height="15" fill="rgb(252,18,50)" fg:x="9792" fg:w="15"/><text x="45.4590%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.62%)</title><rect x="44.9677%" y="165" width="0.6227%" height="15" fill="rgb(234,29,13)" fg:x="9749" fg:w="135"/><text x="45.2607%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.5904%" y="165" width="0.0507%" height="15" fill="rgb(230,116,36)" fg:x="9884" fg:w="11"/><text x="45.8834%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.6411%" y="165" width="0.0507%" height="15" fill="rgb(243,216,15)" fg:x="9895" fg:w="11"/><text x="45.9341%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.6919%" y="165" width="0.0507%" height="15" fill="rgb(239,180,5)" fg:x="9906" fg:w="11"/><text x="45.9849%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.89%)</title><rect x="45.7426%" y="165" width="1.8911%" height="15" fill="rgb(244,137,25)" fg:x="9917" fg:w="410"/><text x="46.0356%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.07%)</title><rect x="47.6338%" y="133" width="0.0692%" height="15" fill="rgb(243,107,21)" fg:x="10327" fg:w="15"/><text x="47.9267%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.77%)</title><rect x="47.7030%" y="133" width="0.7749%" height="15" fill="rgb(224,64,1)" fg:x="10342" fg:w="168"/><text x="47.9959%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="48.4779%" y="101" width="0.4382%" height="15" fill="rgb(254,68,54)" fg:x="10510" fg:w="95"/><text x="48.7708%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.90%)</title><rect x="48.4779%" y="117" width="0.8994%" height="15" fill="rgb(250,71,0)" fg:x="10510" fg:w="195"/><text x="48.7708%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 1.02%)</title><rect x="48.4779%" y="133" width="1.0240%" height="15" fill="rgb(212,213,14)" fg:x="10510" fg:w="222"/><text x="48.7708%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="49.5018%" y="133" width="0.0507%" height="15" fill="rgb(234,164,44)" fg:x="10732" fg:w="11"/><text x="49.7948%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (456 instructions, 2.10%)</title><rect x="47.6338%" y="149" width="2.1033%" height="15" fill="rgb(241,171,39)" fg:x="10327" fg:w="456"/><text x="47.9267%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (493 instructions, 2.27%)</title><rect x="47.6338%" y="165" width="2.2740%" height="15" fill="rgb(240,17,52)" fg:x="10327" fg:w="493"/><text x="47.9267%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="49.9077%" y="149" width="0.2491%" height="15" fill="rgb(217,46,16)" fg:x="10820" fg:w="54"/><text x="50.2007%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.44%)</title><rect x="50.1568%" y="149" width="0.4382%" height="15" fill="rgb(245,34,29)" fg:x="10874" fg:w="95"/><text x="50.4498%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.06%)</title><rect x="49.9077%" y="165" width="1.0609%" height="15" fill="rgb(208,227,13)" fg:x="10820" fg:w="230"/><text x="50.2007%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,261 instructions, 51.94%)</title><rect x="0.7887%" y="181" width="51.9419%" height="15" fill="rgb(237,42,3)" fg:x="171" fg:w="11261"/><text x="1.0817%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="52.7306%" y="181" width="0.6873%" height="15" fill="rgb(205,200,30)" fg:x="11432" fg:w="149"/><text x="53.0236%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="53.4179%" y="181" width="0.6873%" height="15" fill="rgb(241,140,18)" fg:x="11581" fg:w="149"/><text x="53.7109%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.1052%" y="181" width="0.6873%" height="15" fill="rgb(207,141,39)" fg:x="11730" fg:w="149"/><text x="54.3981%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="54.7924%" y="181" width="0.6873%" height="15" fill="rgb(247,66,49)" fg:x="11879" fg:w="149"/><text x="55.0854%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="55.4797%" y="181" width="0.6873%" height="15" fill="rgb(238,193,30)" fg:x="12028" fg:w="149"/><text x="55.7727%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.1670%" y="181" width="0.6873%" height="15" fill="rgb(236,167,37)" fg:x="12177" fg:w="149"/><text x="56.4599%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="56.8542%" y="181" width="0.6873%" height="15" fill="rgb(246,3,2)" fg:x="12326" fg:w="149"/><text x="57.1472%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="57.5415%" y="181" width="0.6873%" height="15" fill="rgb(229,203,24)" fg:x="12475" fg:w="149"/><text x="57.8345%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.2288%" y="181" width="0.6873%" height="15" fill="rgb(236,17,40)" fg:x="12624" fg:w="149"/><text x="58.5218%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="58.9161%" y="181" width="0.6873%" height="15" fill="rgb(239,182,47)" fg:x="12773" fg:w="149"/><text x="59.2090%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="59.6033%" y="181" width="0.6873%" height="15" fill="rgb(226,91,41)" fg:x="12922" fg:w="149"/><text x="59.8963%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.2906%" y="181" width="0.6873%" height="15" fill="rgb(211,115,42)" fg:x="13071" fg:w="149"/><text x="60.5836%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="60.9779%" y="181" width="0.6873%" height="15" fill="rgb(240,199,2)" fg:x="13220" fg:w="149"/><text x="61.2708%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="61.6651%" y="181" width="0.9779%" height="15" fill="rgb(215,207,36)" fg:x="13369" fg:w="212"/><text x="61.9581%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="62.6430%" y="181" width="0.6873%" height="15" fill="rgb(212,76,14)" fg:x="13581" fg:w="149"/><text x="62.9360%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="63.3303%" y="181" width="0.6873%" height="15" fill="rgb(211,56,51)" fg:x="13730" fg:w="149"/><text x="63.6232%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.0175%" y="181" width="0.6873%" height="15" fill="rgb(220,156,34)" fg:x="13879" fg:w="149"/><text x="64.3105%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="64.7048%" y="181" width="0.6873%" height="15" fill="rgb(215,148,33)" fg:x="14028" fg:w="149"/><text x="64.9978%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="65.3921%" y="181" width="0.6873%" height="15" fill="rgb(214,114,19)" fg:x="14177" fg:w="149"/><text x="65.6850%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.0793%" y="181" width="0.6873%" height="15" fill="rgb(250,197,5)" fg:x="14326" fg:w="149"/><text x="66.3723%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="66.7666%" y="181" width="0.6873%" height="15" fill="rgb(252,182,16)" fg:x="14475" fg:w="149"/><text x="67.0596%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="67.4539%" y="181" width="0.6873%" height="15" fill="rgb(253,184,43)" fg:x="14624" fg:w="149"/><text x="67.7468%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.1411%" y="181" width="0.6873%" height="15" fill="rgb(235,106,8)" fg:x="14773" fg:w="149"/><text x="68.4341%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="68.8284%" y="181" width="0.6873%" height="15" fill="rgb(217,10,8)" fg:x="14922" fg:w="149"/><text x="69.1214%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (212 instructions, 0.98%)</title><rect x="69.5157%" y="181" width="0.9779%" height="15" fill="rgb(212,176,13)" fg:x="15071" fg:w="212"/><text x="69.8087%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="70.4935%" y="181" width="0.6873%" height="15" fill="rgb(214,162,24)" fg:x="15283" fg:w="149"/><text x="70.7865%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.1808%" y="181" width="0.6873%" height="15" fill="rgb(248,11,51)" fg:x="15432" fg:w="149"/><text x="71.4738%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="71.8681%" y="181" width="0.6873%" height="15" fill="rgb(228,52,38)" fg:x="15581" fg:w="149"/><text x="72.1610%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="72.5554%" y="181" width="0.6873%" height="15" fill="rgb(205,23,33)" fg:x="15730" fg:w="149"/><text x="72.8483%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.2426%" y="181" width="0.6873%" height="15" fill="rgb(221,47,4)" fg:x="15879" fg:w="149"/><text x="73.5356%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="73.9299%" y="181" width="0.6873%" height="15" fill="rgb(206,160,11)" fg:x="16028" fg:w="149"/><text x="74.2229%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="74.6172%" y="181" width="0.6873%" height="15" fill="rgb(218,184,26)" fg:x="16177" fg:w="149"/><text x="74.9101%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.3044%" y="181" width="0.6873%" height="15" fill="rgb(225,39,11)" fg:x="16326" fg:w="149"/><text x="75.5974%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="75.9917%" y="181" width="0.6873%" height="15" fill="rgb(254,43,9)" fg:x="16475" fg:w="149"/><text x="76.2847%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="76.6790%" y="181" width="0.6873%" height="15" fill="rgb(233,172,40)" fg:x="16624" fg:w="149"/><text x="76.9719%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="77.3662%" y="181" width="0.6873%" height="15" fill="rgb(246,185,32)" fg:x="16773" fg:w="149"/><text x="77.6592%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.0535%" y="181" width="0.6873%" height="15" fill="rgb(228,71,31)" fg:x="16922" fg:w="149"/><text x="78.3465%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="78.7408%" y="181" width="0.6873%" height="15" fill="rgb(226,96,40)" fg:x="17071" fg:w="149"/><text x="79.0337%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="79.4280%" y="181" width="0.6873%" height="15" fill="rgb(231,152,2)" fg:x="17220" fg:w="149"/><text x="79.7210%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.1153%" y="181" width="0.6873%" height="15" fill="rgb(247,123,41)" fg:x="17369" fg:w="149"/><text x="80.4083%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="80.8026%" y="181" width="0.6873%" height="15" fill="rgb(215,28,12)" fg:x="17518" fg:w="149"/><text x="81.0956%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="81.4899%" y="181" width="0.6873%" height="15" fill="rgb(249,17,1)" fg:x="17667" fg:w="149"/><text x="81.7828%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.1771%" y="181" width="0.6873%" height="15" fill="rgb(219,86,10)" fg:x="17816" fg:w="149"/><text x="82.4701%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="82.8644%" y="181" width="0.6873%" height="15" fill="rgb(237,98,39)" fg:x="17965" fg:w="149"/><text x="83.1574%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="83.5517%" y="181" width="0.6873%" height="15" fill="rgb(251,88,32)" fg:x="18114" fg:w="149"/><text x="83.8446%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.2389%" y="181" width="0.6873%" height="15" fill="rgb(246,80,37)" fg:x="18263" fg:w="149"/><text x="84.5319%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="84.9262%" y="181" width="0.6873%" height="15" fill="rgb(241,108,46)" fg:x="18412" fg:w="149"/><text x="85.2192%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 instructions, 1.27%)</title><rect x="85.6135%" y="181" width="1.2685%" height="15" fill="rgb(249,204,53)" fg:x="18561" fg:w="275"/><text x="85.9064%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="86.8819%" y="181" width="0.6873%" height="15" fill="rgb(224,200,32)" fg:x="18836" fg:w="149"/><text x="87.1749%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (149 instructions, 0.69%)</title><rect x="87.5692%" y="181" width="0.6873%" height="15" fill="rgb(237,208,7)" fg:x="18985" fg:w="149"/><text x="87.8622%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="88.2565%" y="149" width="0.0554%" height="15" fill="rgb(226,102,35)" fg:x="19134" fg:w="12"/><text x="88.5494%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="88.3118%" y="117" width="0.2491%" height="15" fill="rgb(254,52,8)" fg:x="19146" fg:w="54"/><text x="88.6048%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.62%)</title><rect x="88.3118%" y="133" width="0.6227%" height="15" fill="rgb(225,224,14)" fg:x="19146" fg:w="135"/><text x="88.6048%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.75%)</title><rect x="88.3118%" y="149" width="0.7472%" height="15" fill="rgb(241,126,20)" fg:x="19146" fg:w="162"/><text x="88.6048%" y="159.50"></text></g><g><title>memset (136 instructions, 0.63%)</title><rect x="89.0590%" y="149" width="0.6273%" height="15" fill="rgb(238,50,17)" fg:x="19308" fg:w="136"/><text x="89.3520%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 2.16%)</title><rect x="88.2565%" y="165" width="2.1587%" height="15" fill="rgb(217,130,9)" fg:x="19134" fg:w="468"/><text x="88.5494%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.15%)</title><rect x="90.4151%" y="149" width="0.1476%" height="15" fill="rgb(214,36,35)" fg:x="19602" fg:w="32"/><text x="90.7081%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.35%)</title><rect x="90.5627%" y="101" width="0.3506%" height="15" fill="rgb(218,183,38)" fg:x="19634" fg:w="76"/><text x="90.8557%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.51%)</title><rect x="90.5627%" y="117" width="0.5074%" height="15" fill="rgb(215,94,28)" fg:x="19634" fg:w="110"/><text x="90.8557%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 0.82%)</title><rect x="90.5627%" y="133" width="0.8164%" height="15" fill="rgb(205,72,47)" fg:x="19634" fg:w="177"/><text x="90.8557%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.3792%" y="133" width="0.0507%" height="15" fill="rgb(205,213,8)" fg:x="19811" fg:w="11"/><text x="91.6721%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="91.4299%" y="133" width="0.0507%" height="15" fill="rgb(238,75,9)" fg:x="19822" fg:w="11"/><text x="91.7229%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 1.67%)</title><rect x="90.5627%" y="149" width="1.6651%" height="15" fill="rgb(210,93,6)" fg:x="19634" fg:w="361"/><text x="90.8557%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.14%)</title><rect x="92.2279%" y="149" width="0.1384%" height="15" fill="rgb(214,13,34)" fg:x="19995" fg:w="30"/><text x="92.5208%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="92.3662%" y="149" width="0.0231%" height="15" fill="rgb(248,204,22)" fg:x="20025" fg:w="5"/><text x="92.6592%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 2.29%)</title><rect x="90.4151%" y="165" width="2.2878%" height="15" fill="rgb(247,14,31)" fg:x="19602" fg:w="496"/><text x="90.7081%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="92.7030%" y="165" width="0.0185%" height="15" fill="rgb(229,108,34)" fg:x="20098" fg:w="4"/><text x="92.9959%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.25%)</title><rect x="92.7214%" y="165" width="0.2537%" height="15" fill="rgb(254,42,13)" fg:x="20102" fg:w="55"/><text x="93.0144%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,097 instructions, 5.06%)</title><rect x="88.2565%" y="181" width="5.0600%" height="15" fill="rgb(253,165,23)" fg:x="19134" fg:w="1097"/><text x="88.5494%" y="191.50">ic_cd..</text></g><g><title>hashmap::batch_put_6_::{{closure}} (21,218 instructions, 97.87%)</title><rect x="0.7887%" y="197" width="97.8690%" height="15" fill="rgb(220,182,38)" fg:x="171" fg:w="21218"/><text x="1.0817%" y="207.50">hashmap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.6577%" y="197" width="0.0554%" height="15" fill="rgb(236,75,27)" fg:x="21389" fg:w="12"/><text x="98.9507%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.37%)</title><rect x="98.7131%" y="197" width="0.3736%" height="15" fill="rgb(242,189,25)" fg:x="21401" fg:w="81"/><text x="99.0061%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.46%)</title><rect x="99.0867%" y="197" width="0.4613%" height="15" fill="rgb(248,126,50)" fg:x="21482" fg:w="100"/><text x="99.3797%" y="207.50"></text></g><g><title>all (21,680 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,24,43)" fg:x="0" fg:w="21680"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (21,680 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,52,49)" fg:x="0" fg:w="21680"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>