<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="194927"><g><title>ic_cdk::setup (24 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0123%" height="15" fill="rgb(241,70,44)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="0.0123%" y="197" width="0.0421%" height="15" fill="rgb(224,163,54)" fg:x="24" fg:w="82"/><text x="0.3053%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="0.0544%" y="197" width="0.0421%" height="15" fill="rgb(205,68,1)" fg:x="106" fg:w="82"/><text x="0.3473%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="0.0964%" y="165" width="0.0421%" height="15" fill="rgb(239,67,1)" fg:x="188" fg:w="82"/><text x="0.3894%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.04%)</title><rect x="0.1385%" y="149" width="0.0421%" height="15" fill="rgb(234,196,9)" fg:x="270" fg:w="82"/><text x="0.4315%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.23%)</title><rect x="0.1806%" y="149" width="0.2273%" height="15" fill="rgb(246,131,12)" fg:x="352" fg:w="443"/><text x="0.4735%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="0.4078%" y="149" width="0.0487%" height="15" fill="rgb(214,2,41)" fg:x="795" fg:w="95"/><text x="0.7008%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.4566%" y="149" width="0.0308%" height="15" fill="rgb(253,70,18)" fg:x="890" fg:w="60"/><text x="0.7495%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.4874%" y="149" width="0.0308%" height="15" fill="rgb(250,4,25)" fg:x="950" fg:w="60"/><text x="0.7803%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5181%" y="149" width="0.0308%" height="15" fill="rgb(215,91,21)" fg:x="1010" fg:w="60"/><text x="0.8111%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5489%" y="149" width="0.0308%" height="15" fill="rgb(212,94,45)" fg:x="1070" fg:w="60"/><text x="0.8419%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.04%)</title><rect x="0.5797%" y="149" width="0.0421%" height="15" fill="rgb(223,91,39)" fg:x="1130" fg:w="82"/><text x="0.8727%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="0.6218%" y="149" width="0.0359%" height="15" fill="rgb(234,11,16)" fg:x="1212" fg:w="70"/><text x="0.9147%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.23%)</title><rect x="0.6577%" y="149" width="0.2273%" height="15" fill="rgb(251,131,12)" fg:x="1282" fg:w="443"/><text x="0.9507%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="0.8947%" y="133" width="0.0421%" height="15" fill="rgb(205,4,51)" fg:x="1744" fg:w="82"/><text x="1.1877%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.03%)</title><rect x="0.9368%" y="101" width="0.0344%" height="15" fill="rgb(235,56,54)" fg:x="1826" fg:w="67"/><text x="1.2297%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="0.9368%" y="117" width="0.0492%" height="15" fill="rgb(205,146,46)" fg:x="1826" fg:w="96"/><text x="1.2297%" y="127.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="0.9917%" y="53" width="0.0180%" height="15" fill="rgb(237,87,12)" fg:x="1933" fg:w="35"/><text x="1.2846%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.03%)</title><rect x="0.9917%" y="69" width="0.0328%" height="15" fill="rgb(246,48,40)" fg:x="1933" fg:w="64"/><text x="1.2846%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.07%)</title><rect x="0.9860%" y="85" width="0.0739%" height="15" fill="rgb(250,215,10)" fg:x="1922" fg:w="144"/><text x="1.2790%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.11%)</title><rect x="0.9860%" y="101" width="0.1072%" height="15" fill="rgb(228,75,19)" fg:x="1922" fg:w="209"/><text x="1.2790%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.11%)</title><rect x="0.9860%" y="117" width="0.1123%" height="15" fill="rgb(246,201,23)" fg:x="1922" fg:w="219"/><text x="1.2790%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.23%)</title><rect x="0.9368%" y="133" width="0.2344%" height="15" fill="rgb(210,9,52)" fg:x="1826" fg:w="457"/><text x="1.2297%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.35%)</title><rect x="0.8947%" y="149" width="0.3473%" height="15" fill="rgb(242,102,30)" fg:x="1744" fg:w="677"/><text x="1.1877%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.2420%" y="149" width="0.0487%" height="15" fill="rgb(230,66,29)" fg:x="2421" fg:w="95"/><text x="1.5350%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="1.2907%" y="149" width="0.0308%" height="15" fill="rgb(243,23,28)" fg:x="2516" fg:w="60"/><text x="1.5837%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="1.3215%" y="149" width="0.0390%" height="15" fill="rgb(212,219,35)" fg:x="2576" fg:w="76"/><text x="1.6145%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="1.3605%" y="149" width="0.0359%" height="15" fill="rgb(252,70,54)" fg:x="2652" fg:w="70"/><text x="1.6535%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.23%)</title><rect x="1.3964%" y="133" width="0.2273%" height="15" fill="rgb(205,197,47)" fg:x="2722" fg:w="443"/><text x="1.6894%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="1.6334%" y="117" width="0.0421%" height="15" fill="rgb(235,31,13)" fg:x="3184" fg:w="82"/><text x="1.9264%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.03%)</title><rect x="1.6755%" y="85" width="0.0344%" height="15" fill="rgb(214,138,2)" fg:x="3266" fg:w="67"/><text x="1.9685%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="1.6755%" y="101" width="0.0492%" height="15" fill="rgb(226,178,31)" fg:x="3266" fg:w="96"/><text x="1.9685%" y="111.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.7304%" y="37" width="0.0180%" height="15" fill="rgb(215,67,11)" fg:x="3373" fg:w="35"/><text x="2.0234%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.03%)</title><rect x="1.7304%" y="53" width="0.0328%" height="15" fill="rgb(248,37,30)" fg:x="3373" fg:w="64"/><text x="2.0234%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.07%)</title><rect x="1.7247%" y="69" width="0.0739%" height="15" fill="rgb(226,61,16)" fg:x="3362" fg:w="144"/><text x="2.0177%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.11%)</title><rect x="1.7247%" y="85" width="0.1072%" height="15" fill="rgb(245,72,51)" fg:x="3362" fg:w="209"/><text x="2.0177%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.11%)</title><rect x="1.7247%" y="101" width="0.1123%" height="15" fill="rgb(228,162,21)" fg:x="3362" fg:w="219"/><text x="2.0177%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.23%)</title><rect x="1.6755%" y="117" width="0.2344%" height="15" fill="rgb(253,14,11)" fg:x="3266" fg:w="457"/><text x="1.9685%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.35%)</title><rect x="1.6334%" y="133" width="0.3473%" height="15" fill="rgb(249,127,36)" fg:x="3184" fg:w="677"/><text x="1.9264%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.9807%" y="133" width="0.0487%" height="15" fill="rgb(212,182,20)" fg:x="3861" fg:w="95"/><text x="2.2737%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="2.0295%" y="133" width="0.0308%" height="15" fill="rgb(251,1,9)" fg:x="3956" fg:w="60"/><text x="2.3224%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.04%)</title><rect x="2.0603%" y="117" width="0.0421%" height="15" fill="rgb(219,160,51)" fg:x="4016" fg:w="82"/><text x="2.3532%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.05%)</title><rect x="2.1023%" y="117" width="0.0487%" height="15" fill="rgb(253,107,23)" fg:x="4098" fg:w="95"/><text x="2.3953%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.1511%" y="117" width="0.0390%" height="15" fill="rgb(232,160,4)" fg:x="4193" fg:w="76"/><text x="2.4440%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.17%)</title><rect x="2.0603%" y="133" width="0.1693%" height="15" fill="rgb(253,168,41)" fg:x="4016" fg:w="330"/><text x="2.3532%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="2.2296%" y="133" width="0.0421%" height="15" fill="rgb(214,36,44)" fg:x="4346" fg:w="82"/><text x="2.5225%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 1.00%)</title><rect x="1.3964%" y="149" width="1.0014%" height="15" fill="rgb(224,228,50)" fg:x="2722" fg:w="1952"/><text x="1.6894%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.3978%" y="149" width="0.0390%" height="15" fill="rgb(242,127,10)" fg:x="4674" fg:w="76"/><text x="2.6908%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="2.4630%" y="133" width="0.0421%" height="15" fill="rgb(223,21,51)" fg:x="4801" fg:w="82"/><text x="2.7559%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.09%)</title><rect x="2.4630%" y="149" width="0.0913%" height="15" fill="rgb(208,47,36)" fg:x="4801" fg:w="178"/><text x="2.7559%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="2.5543%" y="117" width="0.0421%" height="15" fill="rgb(205,129,8)" fg:x="4979" fg:w="82"/><text x="2.8473%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.07%)</title><rect x="2.5543%" y="133" width="0.0667%" height="15" fill="rgb(217,120,31)" fg:x="4979" fg:w="130"/><text x="2.8473%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.11%)</title><rect x="2.5543%" y="149" width="0.1103%" height="15" fill="rgb(240,188,51)" fg:x="4979" fg:w="215"/><text x="2.8473%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="2.6646%" y="149" width="0.0421%" height="15" fill="rgb(240,4,53)" fg:x="5194" fg:w="82"/><text x="2.9576%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="2.7067%" y="149" width="0.0457%" height="15" fill="rgb(232,19,44)" fg:x="5276" fg:w="89"/><text x="2.9996%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7523%" y="149" width="0.0467%" height="15" fill="rgb(253,68,15)" fg:x="5365" fg:w="91"/><text x="3.0453%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7990%" y="149" width="0.0467%" height="15" fill="rgb(254,141,41)" fg:x="5456" fg:w="91"/><text x="3.0920%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="2.8477%" y="149" width="0.0457%" height="15" fill="rgb(211,88,19)" fg:x="5551" fg:w="89"/><text x="3.1407%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.20%)</title><rect x="2.8934%" y="149" width="0.2011%" height="15" fill="rgb(228,151,17)" fg:x="5640" fg:w="392"/><text x="3.1864%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.20%)</title><rect x="3.0945%" y="149" width="0.2011%" height="15" fill="rgb(217,61,52)" fg:x="6032" fg:w="392"/><text x="3.3875%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.26%)</title><rect x="3.2956%" y="149" width="0.2586%" height="15" fill="rgb(239,126,16)" fg:x="6424" fg:w="504"/><text x="3.5886%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,872 instructions, 4.04%)</title><rect x="0.1385%" y="165" width="4.0384%" height="15" fill="rgb(253,206,43)" fg:x="270" fg:w="7872"/><text x="0.4315%" y="175.50">can..</text></g><g><title>memcpy (344 instructions, 0.18%)</title><rect x="4.1769%" y="165" width="0.1765%" height="15" fill="rgb(212,227,51)" fg:x="8142" fg:w="344"/><text x="4.4699%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.01%)</title><rect x="4.3534%" y="165" width="0.0118%" height="15" fill="rgb(230,187,45)" fg:x="8486" fg:w="23"/><text x="4.6464%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="4.3652%" y="165" width="0.0421%" height="15" fill="rgb(235,179,22)" fg:x="8509" fg:w="82"/><text x="4.6582%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.4073%" y="149" width="0.0467%" height="15" fill="rgb(240,127,38)" fg:x="8591" fg:w="91"/><text x="4.7003%" y="159.50"></text></g><g><title>candid::types::internal::env_add (174 instructions, 0.09%)</title><rect x="4.4073%" y="165" width="0.0893%" height="15" fill="rgb(254,81,5)" fg:x="8591" fg:w="174"/><text x="4.7003%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.4966%" y="165" width="0.0467%" height="15" fill="rgb(241,182,9)" fg:x="8765" fg:w="91"/><text x="4.7895%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.04%)</title><rect x="4.5432%" y="149" width="0.0395%" height="15" fill="rgb(226,88,24)" fg:x="8856" fg:w="77"/><text x="4.8362%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="4.5827%" y="133" width="0.0457%" height="15" fill="rgb(223,97,7)" fg:x="8933" fg:w="89"/><text x="4.8757%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.07%)</title><rect x="4.5827%" y="149" width="0.0682%" height="15" fill="rgb(247,147,15)" fg:x="8933" fg:w="133"/><text x="4.8757%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 0.20%)</title><rect x="4.5432%" y="165" width="0.1960%" height="15" fill="rgb(222,91,2)" fg:x="8856" fg:w="382"/><text x="4.8362%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.03%)</title><rect x="4.7392%" y="149" width="0.0262%" height="15" fill="rgb(254,131,8)" fg:x="9238" fg:w="51"/><text x="5.0322%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.10%)</title><rect x="4.7392%" y="165" width="0.1016%" height="15" fill="rgb(217,2,28)" fg:x="9238" fg:w="198"/><text x="5.0322%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.03%)</title><rect x="4.8408%" y="165" width="0.0251%" height="15" fill="rgb(249,159,25)" fg:x="9436" fg:w="49"/><text x="5.1338%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.04%)</title><rect x="4.8659%" y="149" width="0.0426%" height="15" fill="rgb(245,193,0)" fg:x="9485" fg:w="83"/><text x="5.1589%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.01%)</title><rect x="4.9311%" y="133" width="0.0118%" height="15" fill="rgb(206,51,38)" fg:x="9612" fg:w="23"/><text x="5.2240%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.07%)</title><rect x="4.9311%" y="149" width="0.0708%" height="15" fill="rgb(220,97,51)" fg:x="9612" fg:w="138"/><text x="5.2240%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.16%)</title><rect x="4.8659%" y="165" width="0.1585%" height="15" fill="rgb(224,15,11)" fg:x="9485" fg:w="309"/><text x="5.1589%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.02%)</title><rect x="5.0244%" y="149" width="0.0180%" height="15" fill="rgb(210,195,12)" fg:x="9794" fg:w="35"/><text x="5.3174%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1330 (34 instructions, 0.02%)</title><rect x="5.0424%" y="149" width="0.0174%" height="15" fill="rgb(244,48,14)" fg:x="9829" fg:w="34"/><text x="5.3354%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1330 (34 instructions, 0.02%)</title><rect x="5.0598%" y="149" width="0.0174%" height="15" fill="rgb(209,138,49)" fg:x="9863" fg:w="34"/><text x="5.3528%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.02%)</title><rect x="5.0773%" y="149" width="0.0169%" height="15" fill="rgb(253,159,49)" fg:x="9897" fg:w="33"/><text x="5.3703%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.13%)</title><rect x="5.0244%" y="165" width="0.1283%" height="15" fill="rgb(224,109,26)" fg:x="9794" fg:w="250"/><text x="5.3174%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.02%)</title><rect x="5.1727%" y="165" width="0.0221%" height="15" fill="rgb(244,228,5)" fg:x="10083" fg:w="43"/><text x="5.4657%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.01%)</title><rect x="5.1984%" y="133" width="0.0139%" height="15" fill="rgb(246,43,6)" fg:x="10133" fg:w="27"/><text x="5.4913%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.06%)</title><rect x="5.1984%" y="149" width="0.0590%" height="15" fill="rgb(252,29,11)" fg:x="10133" fg:w="115"/><text x="5.4913%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="5.2574%" y="133" width="0.0308%" height="15" fill="rgb(243,76,40)" fg:x="10248" fg:w="60"/><text x="5.5503%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.05%)</title><rect x="5.2574%" y="149" width="0.0534%" height="15" fill="rgb(211,37,13)" fg:x="10248" fg:w="104"/><text x="5.5503%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (306 instructions, 0.16%)</title><rect x="5.1948%" y="165" width="0.1570%" height="15" fill="rgb(215,167,19)" fg:x="10126" fg:w="306"/><text x="5.4877%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="5.3517%" y="165" width="0.0308%" height="15" fill="rgb(241,57,15)" fg:x="10432" fg:w="60"/><text x="5.6447%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,873 instructions, 6.09%)</title><rect x="0.0964%" y="181" width="6.0910%" height="15" fill="rgb(251,123,3)" fg:x="188" fg:w="11873"/><text x="0.3894%" y="191.50">ic_cdk..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="6.1972%" y="165" width="0.1006%" height="15" fill="rgb(245,152,20)" fg:x="12080" fg:w="196"/><text x="6.4902%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="6.2977%" y="133" width="1.6211%" height="15" fill="rgb(220,124,40)" fg:x="12276" fg:w="3160"/><text x="6.5907%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="6.2977%" y="149" width="1.6719%" height="15" fill="rgb(238,94,5)" fg:x="12276" fg:w="3259"/><text x="6.5907%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="7.9697%" y="149" width="0.0359%" height="15" fill="rgb(242,120,23)" fg:x="15535" fg:w="70"/><text x="8.2626%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="8.0056%" y="149" width="1.6211%" height="15" fill="rgb(224,107,43)" fg:x="15605" fg:w="3160"/><text x="8.2985%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="6.2977%" y="165" width="3.5064%" height="15" fill="rgb(211,158,44)" fg:x="12276" fg:w="6835"/><text x="6.5907%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="9.8421%" y="165" width="0.1006%" height="15" fill="rgb(234,69,43)" fg:x="19185" fg:w="196"/><text x="10.1351%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="9.9427%" y="117" width="1.6211%" height="15" fill="rgb(227,195,25)" fg:x="19381" fg:w="3160"/><text x="10.2357%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="9.9427%" y="133" width="1.6719%" height="15" fill="rgb(245,170,26)" fg:x="19381" fg:w="3259"/><text x="10.2357%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="11.6146%" y="133" width="0.0359%" height="15" fill="rgb(208,10,54)" fg:x="22640" fg:w="70"/><text x="11.9076%" y="143.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="11.6505%" y="133" width="1.6211%" height="15" fill="rgb(236,144,53)" fg:x="22710" fg:w="3160"/><text x="11.9435%" y="143.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="13.2716%" y="133" width="1.6211%" height="15" fill="rgb(235,73,15)" fg:x="25870" fg:w="3160"/><text x="13.5646%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (9,758 instructions, 5.01%)</title><rect x="9.9427%" y="149" width="5.0060%" height="15" fill="rgb(242,63,54)" fg:x="19381" fg:w="9758"/><text x="10.2357%" y="159.50">im_rc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="14.9487%" y="149" width="0.0359%" height="15" fill="rgb(221,108,53)" fg:x="29139" fg:w="70"/><text x="15.2416%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="14.9846%" y="149" width="1.6211%" height="15" fill="rgb(252,189,42)" fg:x="29209" fg:w="3160"/><text x="15.2776%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (13,334 instructions, 6.84%)</title><rect x="9.9427%" y="165" width="6.8405%" height="15" fill="rgb(240,155,35)" fg:x="19381" fg:w="13334"/><text x="10.2357%" y="175.50">im_rc::..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="16.8212%" y="165" width="0.1006%" height="15" fill="rgb(219,197,15)" fg:x="32789" fg:w="196"/><text x="17.1141%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="16.9217%" y="133" width="1.6211%" height="15" fill="rgb(236,162,12)" fg:x="32985" fg:w="3160"/><text x="17.2147%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="16.9217%" y="149" width="1.6719%" height="15" fill="rgb(233,147,8)" fg:x="32985" fg:w="3259"/><text x="17.2147%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="18.5936%" y="149" width="0.0359%" height="15" fill="rgb(214,116,23)" fg:x="36244" fg:w="70"/><text x="18.8866%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="18.6295%" y="149" width="1.6211%" height="15" fill="rgb(213,195,25)" fg:x="36314" fg:w="3160"/><text x="18.9225%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="16.9217%" y="165" width="3.5064%" height="15" fill="rgb(246,103,4)" fg:x="32985" fg:w="6835"/><text x="17.2147%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="20.4661%" y="165" width="0.1006%" height="15" fill="rgb(249,102,40)" fg:x="39894" fg:w="196"/><text x="20.7591%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="20.5667%" y="133" width="1.6211%" height="15" fill="rgb(239,203,18)" fg:x="40090" fg:w="3160"/><text x="20.8596%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="20.5667%" y="149" width="1.6719%" height="15" fill="rgb(251,55,13)" fg:x="40090" fg:w="3259"/><text x="20.8596%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="22.2386%" y="149" width="0.0359%" height="15" fill="rgb(218,36,11)" fg:x="43349" fg:w="70"/><text x="22.5316%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="22.2745%" y="149" width="1.6211%" height="15" fill="rgb(230,201,47)" fg:x="43419" fg:w="3160"/><text x="22.5675%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="20.5667%" y="165" width="3.5064%" height="15" fill="rgb(213,63,40)" fg:x="40090" fg:w="6835"/><text x="20.8596%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="24.1111%" y="165" width="0.1006%" height="15" fill="rgb(237,176,4)" fg:x="46999" fg:w="196"/><text x="24.4040%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="24.2116%" y="165" width="0.1626%" height="15" fill="rgb(245,218,36)" fg:x="47195" fg:w="317"/><text x="24.5046%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="24.4122%" y="165" width="0.1006%" height="15" fill="rgb(244,120,8)" fg:x="47586" fg:w="196"/><text x="24.7052%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="24.5128%" y="165" width="0.1293%" height="15" fill="rgb(231,202,12)" fg:x="47782" fg:w="252"/><text x="24.8057%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="24.6800%" y="165" width="0.1006%" height="15" fill="rgb(253,63,52)" fg:x="48108" fg:w="196"/><text x="24.9730%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="24.7806%" y="133" width="1.6211%" height="15" fill="rgb(233,136,42)" fg:x="48304" fg:w="3160"/><text x="25.0735%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="24.7806%" y="149" width="1.6719%" height="15" fill="rgb(237,90,1)" fg:x="48304" fg:w="3259"/><text x="25.0735%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="26.4525%" y="149" width="0.0359%" height="15" fill="rgb(223,209,49)" fg:x="51563" fg:w="70"/><text x="26.7454%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="26.4884%" y="149" width="1.6211%" height="15" fill="rgb(230,182,45)" fg:x="51633" fg:w="3160"/><text x="26.7813%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="24.7806%" y="165" width="3.5064%" height="15" fill="rgb(235,186,43)" fg:x="48304" fg:w="6835"/><text x="25.0735%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="28.3250%" y="165" width="0.1006%" height="15" fill="rgb(243,128,53)" fg:x="55213" fg:w="196"/><text x="28.6179%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="28.4255%" y="133" width="1.6211%" height="15" fill="rgb(223,206,51)" fg:x="55409" fg:w="3160"/><text x="28.7185%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="28.4255%" y="149" width="1.6719%" height="15" fill="rgb(247,55,27)" fg:x="55409" fg:w="3259"/><text x="28.7185%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="30.0974%" y="149" width="0.0359%" height="15" fill="rgb(238,29,26)" fg:x="58668" fg:w="70"/><text x="30.3904%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="30.1333%" y="149" width="1.6211%" height="15" fill="rgb(232,64,14)" fg:x="58738" fg:w="3160"/><text x="30.4263%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="28.4255%" y="165" width="3.5064%" height="15" fill="rgb(222,164,13)" fg:x="55409" fg:w="6835"/><text x="28.7185%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="31.9699%" y="165" width="0.1006%" height="15" fill="rgb(254,93,11)" fg:x="62318" fg:w="196"/><text x="32.2629%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="32.0705%" y="165" width="0.1293%" height="15" fill="rgb(249,51,53)" fg:x="62514" fg:w="252"/><text x="32.3634%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="32.2377%" y="165" width="0.1006%" height="15" fill="rgb(242,0,22)" fg:x="62840" fg:w="196"/><text x="32.5307%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="32.3383%" y="133" width="1.6211%" height="15" fill="rgb(247,221,33)" fg:x="63036" fg:w="3160"/><text x="32.6312%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="32.3383%" y="149" width="1.6719%" height="15" fill="rgb(239,229,35)" fg:x="63036" fg:w="3259"/><text x="32.6312%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="34.0102%" y="149" width="0.0359%" height="15" fill="rgb(229,54,21)" fg:x="66295" fg:w="70"/><text x="34.3031%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="34.0461%" y="149" width="1.6211%" height="15" fill="rgb(232,180,51)" fg:x="66365" fg:w="3160"/><text x="34.3390%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="32.3383%" y="165" width="3.5064%" height="15" fill="rgb(233,90,54)" fg:x="63036" fg:w="6835"/><text x="32.6312%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="35.8827%" y="165" width="0.1006%" height="15" fill="rgb(228,118,49)" fg:x="69945" fg:w="196"/><text x="36.1756%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="35.9832%" y="165" width="0.1293%" height="15" fill="rgb(230,209,32)" fg:x="70141" fg:w="252"/><text x="36.2762%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="36.1505%" y="165" width="0.1006%" height="15" fill="rgb(224,106,14)" fg:x="70467" fg:w="196"/><text x="36.4434%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="36.2510%" y="133" width="1.6211%" height="15" fill="rgb(242,213,37)" fg:x="70663" fg:w="3160"/><text x="36.5440%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="36.2510%" y="149" width="1.6719%" height="15" fill="rgb(253,213,48)" fg:x="70663" fg:w="3259"/><text x="36.5440%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="37.9229%" y="149" width="0.0359%" height="15" fill="rgb(221,11,3)" fg:x="73922" fg:w="70"/><text x="38.2159%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="37.9588%" y="149" width="1.6211%" height="15" fill="rgb(249,84,42)" fg:x="73992" fg:w="3160"/><text x="38.2518%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="36.2510%" y="165" width="3.5064%" height="15" fill="rgb(229,203,43)" fg:x="70663" fg:w="6835"/><text x="36.5440%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="39.7954%" y="165" width="0.1006%" height="15" fill="rgb(234,216,2)" fg:x="77572" fg:w="196"/><text x="40.0884%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="39.8960%" y="165" width="0.1293%" height="15" fill="rgb(249,204,28)" fg:x="77768" fg:w="252"/><text x="40.1889%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="40.0632%" y="165" width="0.1006%" height="15" fill="rgb(235,143,7)" fg:x="78094" fg:w="196"/><text x="40.3562%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="40.1638%" y="133" width="1.6211%" height="15" fill="rgb(212,102,47)" fg:x="78290" fg:w="3160"/><text x="40.4567%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="40.1638%" y="149" width="1.6719%" height="15" fill="rgb(220,41,48)" fg:x="78290" fg:w="3259"/><text x="40.4567%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="41.8357%" y="149" width="0.0359%" height="15" fill="rgb(233,65,18)" fg:x="81549" fg:w="70"/><text x="42.1286%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="41.8716%" y="149" width="1.6211%" height="15" fill="rgb(229,141,11)" fg:x="81619" fg:w="3160"/><text x="42.1645%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="40.1638%" y="165" width="3.5064%" height="15" fill="rgb(223,10,5)" fg:x="78290" fg:w="6835"/><text x="40.4567%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="43.7082%" y="165" width="0.1006%" height="15" fill="rgb(234,152,42)" fg:x="85199" fg:w="196"/><text x="44.0011%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="43.8087%" y="165" width="0.1626%" height="15" fill="rgb(249,104,35)" fg:x="85395" fg:w="317"/><text x="44.1017%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="44.0093%" y="165" width="0.1006%" height="15" fill="rgb(246,91,32)" fg:x="85786" fg:w="196"/><text x="44.3023%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="44.1098%" y="165" width="0.1293%" height="15" fill="rgb(229,177,42)" fg:x="85982" fg:w="252"/><text x="44.4028%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="44.2771%" y="165" width="0.1006%" height="15" fill="rgb(235,162,14)" fg:x="86308" fg:w="196"/><text x="44.5701%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="44.3776%" y="165" width="0.1293%" height="15" fill="rgb(216,213,20)" fg:x="86504" fg:w="252"/><text x="44.6706%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="44.5449%" y="165" width="0.1006%" height="15" fill="rgb(214,97,10)" fg:x="86830" fg:w="196"/><text x="44.8378%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="44.6454%" y="133" width="1.6211%" height="15" fill="rgb(244,169,10)" fg:x="87026" fg:w="3160"/><text x="44.9384%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="44.6454%" y="149" width="1.6719%" height="15" fill="rgb(216,145,50)" fg:x="87026" fg:w="3259"/><text x="44.9384%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="46.3173%" y="149" width="0.0359%" height="15" fill="rgb(233,160,49)" fg:x="90285" fg:w="70"/><text x="46.6103%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="46.3533%" y="149" width="1.6211%" height="15" fill="rgb(235,220,49)" fg:x="90355" fg:w="3160"/><text x="46.6462%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="44.6454%" y="165" width="3.5064%" height="15" fill="rgb(246,52,12)" fg:x="87026" fg:w="6835"/><text x="44.9384%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="48.1898%" y="165" width="0.1006%" height="15" fill="rgb(240,69,49)" fg:x="93935" fg:w="196"/><text x="48.4828%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="48.2904%" y="165" width="0.1293%" height="15" fill="rgb(234,148,1)" fg:x="94131" fg:w="252"/><text x="48.5834%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="48.4576%" y="165" width="0.1006%" height="15" fill="rgb(208,113,25)" fg:x="94457" fg:w="196"/><text x="48.7506%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="48.5582%" y="165" width="0.1626%" height="15" fill="rgb(241,51,37)" fg:x="94653" fg:w="317"/><text x="48.8511%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="48.7588%" y="165" width="0.1006%" height="15" fill="rgb(243,19,52)" fg:x="95044" fg:w="196"/><text x="49.0517%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="48.8593%" y="133" width="1.6211%" height="15" fill="rgb(241,229,39)" fg:x="95240" fg:w="3160"/><text x="49.1523%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="48.8593%" y="149" width="1.6719%" height="15" fill="rgb(232,44,18)" fg:x="95240" fg:w="3259"/><text x="49.1523%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="50.5312%" y="149" width="0.0359%" height="15" fill="rgb(238,77,53)" fg:x="98499" fg:w="70"/><text x="50.8242%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="50.5671%" y="149" width="1.6211%" height="15" fill="rgb(225,74,3)" fg:x="98569" fg:w="3160"/><text x="50.8601%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="48.8593%" y="165" width="3.5064%" height="15" fill="rgb(229,101,20)" fg:x="95240" fg:w="6835"/><text x="49.1523%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="52.4037%" y="165" width="0.1006%" height="15" fill="rgb(224,50,29)" fg:x="102149" fg:w="196"/><text x="52.6967%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="52.5043%" y="133" width="1.6211%" height="15" fill="rgb(225,129,7)" fg:x="102345" fg:w="3160"/><text x="52.7972%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="52.5043%" y="149" width="1.6719%" height="15" fill="rgb(229,225,1)" fg:x="102345" fg:w="3259"/><text x="52.7972%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="54.1762%" y="149" width="0.0359%" height="15" fill="rgb(215,163,39)" fg:x="105604" fg:w="70"/><text x="54.4691%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="54.2121%" y="149" width="1.6211%" height="15" fill="rgb(209,169,31)" fg:x="105674" fg:w="3160"/><text x="54.5051%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="52.5043%" y="165" width="3.5064%" height="15" fill="rgb(237,83,10)" fg:x="102345" fg:w="6835"/><text x="52.7972%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="56.0487%" y="165" width="0.1006%" height="15" fill="rgb(252,171,1)" fg:x="109254" fg:w="196"/><text x="56.3416%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="56.1492%" y="165" width="0.1626%" height="15" fill="rgb(242,119,6)" fg:x="109450" fg:w="317"/><text x="56.4422%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="56.3498%" y="165" width="0.1006%" height="15" fill="rgb(205,14,27)" fg:x="109841" fg:w="196"/><text x="56.6428%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="56.4504%" y="165" width="0.1626%" height="15" fill="rgb(205,180,43)" fg:x="110037" fg:w="317"/><text x="56.7433%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="56.6510%" y="165" width="0.1006%" height="15" fill="rgb(216,8,39)" fg:x="110428" fg:w="196"/><text x="56.9439%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="56.7515%" y="133" width="1.6211%" height="15" fill="rgb(239,77,46)" fg:x="110624" fg:w="3160"/><text x="57.0445%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="56.7515%" y="149" width="1.6719%" height="15" fill="rgb(217,111,20)" fg:x="110624" fg:w="3259"/><text x="57.0445%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="58.4234%" y="149" width="0.0359%" height="15" fill="rgb(232,86,30)" fg:x="113883" fg:w="70"/><text x="58.7164%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="58.4593%" y="149" width="1.6211%" height="15" fill="rgb(221,130,12)" fg:x="113953" fg:w="3160"/><text x="58.7523%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="56.7515%" y="165" width="3.5064%" height="15" fill="rgb(221,217,0)" fg:x="110624" fg:w="6835"/><text x="57.0445%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="60.2959%" y="165" width="0.1006%" height="15" fill="rgb(241,208,30)" fg:x="117533" fg:w="196"/><text x="60.5889%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="60.3965%" y="165" width="0.1626%" height="15" fill="rgb(217,5,45)" fg:x="117729" fg:w="317"/><text x="60.6894%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="60.5970%" y="165" width="0.1006%" height="15" fill="rgb(226,8,37)" fg:x="118120" fg:w="196"/><text x="60.8900%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="60.6976%" y="133" width="1.6211%" height="15" fill="rgb(247,23,45)" fg:x="118316" fg:w="3160"/><text x="60.9906%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="60.6976%" y="149" width="1.6719%" height="15" fill="rgb(208,172,24)" fg:x="118316" fg:w="3259"/><text x="60.9906%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="62.3695%" y="149" width="0.0359%" height="15" fill="rgb(235,76,50)" fg:x="121575" fg:w="70"/><text x="62.6625%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="62.4054%" y="149" width="1.6211%" height="15" fill="rgb(233,176,45)" fg:x="121645" fg:w="3160"/><text x="62.6984%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="60.6976%" y="165" width="3.5064%" height="15" fill="rgb(217,23,26)" fg:x="118316" fg:w="6835"/><text x="60.9906%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="64.2420%" y="165" width="0.1006%" height="15" fill="rgb(238,104,30)" fg:x="125225" fg:w="196"/><text x="64.5350%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="64.3425%" y="133" width="1.6211%" height="15" fill="rgb(212,156,54)" fg:x="125421" fg:w="3160"/><text x="64.6355%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="64.3425%" y="149" width="1.6719%" height="15" fill="rgb(205,188,19)" fg:x="125421" fg:w="3259"/><text x="64.6355%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="66.0145%" y="149" width="0.0359%" height="15" fill="rgb(247,181,41)" fg:x="128680" fg:w="70"/><text x="66.3074%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="66.0504%" y="149" width="1.6211%" height="15" fill="rgb(236,184,20)" fg:x="128750" fg:w="3160"/><text x="66.3433%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="64.3425%" y="165" width="3.5064%" height="15" fill="rgb(216,130,0)" fg:x="125421" fg:w="6835"/><text x="64.6355%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="67.8870%" y="165" width="0.1006%" height="15" fill="rgb(218,51,31)" fg:x="132330" fg:w="196"/><text x="68.1799%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="67.9875%" y="165" width="0.1293%" height="15" fill="rgb(228,67,52)" fg:x="132526" fg:w="252"/><text x="68.2805%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="68.1547%" y="165" width="0.1006%" height="15" fill="rgb(233,80,28)" fg:x="132852" fg:w="196"/><text x="68.4477%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="68.2553%" y="165" width="0.1626%" height="15" fill="rgb(247,34,34)" fg:x="133048" fg:w="317"/><text x="68.5483%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="68.4559%" y="165" width="0.1006%" height="15" fill="rgb(220,170,1)" fg:x="133439" fg:w="196"/><text x="68.7489%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="68.5564%" y="165" width="0.1293%" height="15" fill="rgb(208,4,12)" fg:x="133635" fg:w="252"/><text x="68.8494%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="68.7237%" y="165" width="0.1006%" height="15" fill="rgb(216,60,32)" fg:x="133961" fg:w="196"/><text x="69.0166%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="68.8242%" y="117" width="1.6211%" height="15" fill="rgb(219,57,15)" fg:x="134157" fg:w="3160"/><text x="69.1172%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="68.8242%" y="133" width="1.6719%" height="15" fill="rgb(217,187,42)" fg:x="134157" fg:w="3259"/><text x="69.1172%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="70.4961%" y="133" width="0.0359%" height="15" fill="rgb(253,129,18)" fg:x="137416" fg:w="70"/><text x="70.7891%" y="143.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="70.5320%" y="133" width="1.6211%" height="15" fill="rgb(213,9,34)" fg:x="137486" fg:w="3160"/><text x="70.8250%" y="143.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="72.1532%" y="133" width="1.6211%" height="15" fill="rgb(208,116,6)" fg:x="140646" fg:w="3160"/><text x="72.4461%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (9,758 instructions, 5.01%)</title><rect x="68.8242%" y="149" width="5.0060%" height="15" fill="rgb(213,137,37)" fg:x="134157" fg:w="9758"/><text x="69.1172%" y="159.50">im_rc..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="73.8302%" y="149" width="0.0359%" height="15" fill="rgb(208,40,5)" fg:x="143915" fg:w="70"/><text x="74.1232%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="73.8661%" y="149" width="1.6211%" height="15" fill="rgb(221,10,52)" fg:x="143985" fg:w="3160"/><text x="74.1591%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (13,334 instructions, 6.84%)</title><rect x="68.8242%" y="165" width="6.8405%" height="15" fill="rgb(215,72,45)" fg:x="134157" fg:w="13334"/><text x="69.1172%" y="175.50">im_rc::..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="75.7027%" y="165" width="0.1006%" height="15" fill="rgb(221,74,10)" fg:x="147565" fg:w="196"/><text x="75.9957%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="75.8032%" y="165" width="0.1293%" height="15" fill="rgb(225,133,37)" fg:x="147761" fg:w="252"/><text x="76.0962%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="75.9705%" y="165" width="0.1006%" height="15" fill="rgb(221,207,51)" fg:x="148087" fg:w="196"/><text x="76.2635%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="76.0710%" y="133" width="1.6211%" height="15" fill="rgb(237,176,6)" fg:x="148283" fg:w="3160"/><text x="76.3640%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="76.0710%" y="149" width="1.6719%" height="15" fill="rgb(229,41,28)" fg:x="148283" fg:w="3259"/><text x="76.3640%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="77.7429%" y="149" width="0.0359%" height="15" fill="rgb(243,158,42)" fg:x="151542" fg:w="70"/><text x="78.0359%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="77.7789%" y="149" width="1.6211%" height="15" fill="rgb(221,76,52)" fg:x="151612" fg:w="3160"/><text x="78.0718%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="76.0710%" y="165" width="3.5064%" height="15" fill="rgb(217,127,35)" fg:x="148283" fg:w="6835"/><text x="76.3640%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="79.6154%" y="165" width="0.1006%" height="15" fill="rgb(248,163,26)" fg:x="155192" fg:w="196"/><text x="79.9084%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="79.7160%" y="133" width="1.6211%" height="15" fill="rgb(209,187,24)" fg:x="155388" fg:w="3160"/><text x="80.0090%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="79.7160%" y="149" width="1.6719%" height="15" fill="rgb(238,96,3)" fg:x="155388" fg:w="3259"/><text x="80.0090%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="81.3879%" y="149" width="0.0359%" height="15" fill="rgb(209,116,12)" fg:x="158647" fg:w="70"/><text x="81.6809%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="81.4238%" y="149" width="1.6211%" height="15" fill="rgb(243,57,6)" fg:x="158717" fg:w="3160"/><text x="81.7168%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="79.7160%" y="165" width="3.5064%" height="15" fill="rgb(212,34,4)" fg:x="155388" fg:w="6835"/><text x="80.0090%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="83.2604%" y="165" width="0.1006%" height="15" fill="rgb(226,98,30)" fg:x="162297" fg:w="196"/><text x="83.5534%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="83.3610%" y="165" width="0.1293%" height="15" fill="rgb(227,37,29)" fg:x="162493" fg:w="252"/><text x="83.6539%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="83.5282%" y="165" width="0.1006%" height="15" fill="rgb(214,10,27)" fg:x="162819" fg:w="196"/><text x="83.8212%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="83.6287%" y="133" width="1.6211%" height="15" fill="rgb(233,53,50)" fg:x="163015" fg:w="3160"/><text x="83.9217%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="83.6287%" y="149" width="1.6719%" height="15" fill="rgb(254,226,11)" fg:x="163015" fg:w="3259"/><text x="83.9217%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="85.3007%" y="149" width="0.0359%" height="15" fill="rgb(251,226,36)" fg:x="166274" fg:w="70"/><text x="85.5936%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="85.3366%" y="149" width="1.6211%" height="15" fill="rgb(225,38,39)" fg:x="166344" fg:w="3160"/><text x="85.6295%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,900 instructions, 3.54%)</title><rect x="83.6287%" y="165" width="3.5398%" height="15" fill="rgb(235,167,7)" fg:x="163015" fg:w="6900"/><text x="83.9217%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="87.2065%" y="165" width="0.1006%" height="15" fill="rgb(231,202,54)" fg:x="169989" fg:w="196"/><text x="87.4995%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="87.3070%" y="165" width="0.1293%" height="15" fill="rgb(225,203,16)" fg:x="170185" fg:w="252"/><text x="87.6000%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="87.4743%" y="165" width="0.1006%" height="15" fill="rgb(227,94,30)" fg:x="170511" fg:w="196"/><text x="87.7673%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="87.5748%" y="165" width="0.1626%" height="15" fill="rgb(245,136,49)" fg:x="170707" fg:w="317"/><text x="87.8678%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="87.7754%" y="165" width="0.1006%" height="15" fill="rgb(229,153,20)" fg:x="171098" fg:w="196"/><text x="88.0684%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="87.8760%" y="165" width="0.1293%" height="15" fill="rgb(238,177,22)" fg:x="171294" fg:w="252"/><text x="88.1689%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="88.0432%" y="165" width="0.1006%" height="15" fill="rgb(221,17,34)" fg:x="171620" fg:w="196"/><text x="88.3362%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="88.1438%" y="133" width="1.6211%" height="15" fill="rgb(223,202,7)" fg:x="171816" fg:w="3160"/><text x="88.4367%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="88.1438%" y="149" width="1.6719%" height="15" fill="rgb(247,99,7)" fg:x="171816" fg:w="3259"/><text x="88.4367%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="89.8157%" y="149" width="0.0359%" height="15" fill="rgb(209,75,24)" fg:x="175075" fg:w="70"/><text x="90.1086%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="89.8516%" y="149" width="1.6211%" height="15" fill="rgb(225,62,11)" fg:x="175145" fg:w="3160"/><text x="90.1446%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="88.1438%" y="165" width="3.5064%" height="15" fill="rgb(209,132,14)" fg:x="171816" fg:w="6835"/><text x="88.4367%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="91.6882%" y="165" width="0.1006%" height="15" fill="rgb(205,189,31)" fg:x="178725" fg:w="196"/><text x="91.9811%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="91.7887%" y="165" width="0.1293%" height="15" fill="rgb(235,85,47)" fg:x="178921" fg:w="252"/><text x="92.0817%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="91.9560%" y="165" width="0.1006%" height="15" fill="rgb(244,22,15)" fg:x="179247" fg:w="196"/><text x="92.2489%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="92.0565%" y="165" width="0.1293%" height="15" fill="rgb(237,30,52)" fg:x="179443" fg:w="252"/><text x="92.3495%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="92.2238%" y="165" width="0.1006%" height="15" fill="rgb(245,220,12)" fg:x="179769" fg:w="196"/><text x="92.5167%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="92.3243%" y="165" width="0.1293%" height="15" fill="rgb(219,25,53)" fg:x="179965" fg:w="252"/><text x="92.6173%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="92.4915%" y="165" width="0.1006%" height="15" fill="rgb(253,207,34)" fg:x="180291" fg:w="196"/><text x="92.7845%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="92.5921%" y="165" width="0.1293%" height="15" fill="rgb(228,159,13)" fg:x="180487" fg:w="252"/><text x="92.8851%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="92.7593%" y="165" width="0.1006%" height="15" fill="rgb(210,58,27)" fg:x="180813" fg:w="196"/><text x="93.0523%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="92.8599%" y="133" width="1.6211%" height="15" fill="rgb(218,161,37)" fg:x="181009" fg:w="3160"/><text x="93.1529%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.67%)</title><rect x="92.8599%" y="149" width="1.6719%" height="15" fill="rgb(249,102,10)" fg:x="181009" fg:w="3259"/><text x="93.1529%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (70 instructions, 0.04%)</title><rect x="94.5318%" y="149" width="0.0359%" height="15" fill="rgb(222,112,43)" fg:x="184268" fg:w="70"/><text x="94.8248%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.62%)</title><rect x="94.5677%" y="149" width="1.6211%" height="15" fill="rgb(232,154,19)" fg:x="184338" fg:w="3160"/><text x="94.8607%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,835 instructions, 3.51%)</title><rect x="92.8599%" y="165" width="3.5064%" height="15" fill="rgb(222,78,7)" fg:x="181009" fg:w="6835"/><text x="93.1529%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="96.4043%" y="165" width="0.1006%" height="15" fill="rgb(223,121,42)" fg:x="187918" fg:w="196"/><text x="96.6973%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="96.5048%" y="165" width="0.1626%" height="15" fill="rgb(223,209,4)" fg:x="188114" fg:w="317"/><text x="96.7978%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="96.7054%" y="165" width="0.1006%" height="15" fill="rgb(229,175,11)" fg:x="188505" fg:w="196"/><text x="96.9984%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.16%)</title><rect x="96.8060%" y="165" width="0.1626%" height="15" fill="rgb(251,151,48)" fg:x="188701" fg:w="317"/><text x="97.0990%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="97.0066%" y="165" width="0.1006%" height="15" fill="rgb(239,13,42)" fg:x="189092" fg:w="196"/><text x="97.2995%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="97.1071%" y="165" width="0.1293%" height="15" fill="rgb(241,188,9)" fg:x="189288" fg:w="252"/><text x="97.4001%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.10%)</title><rect x="97.2744%" y="165" width="0.1006%" height="15" fill="rgb(254,3,22)" fg:x="189614" fg:w="196"/><text x="97.5673%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.13%)</title><rect x="97.3749%" y="165" width="0.1293%" height="15" fill="rgb(223,91,15)" fg:x="189810" fg:w="252"/><text x="97.6679%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (178,056 instructions, 91.34%)</title><rect x="6.1972%" y="181" width="91.3450%" height="15" fill="rgb(228,164,44)" fg:x="12080" fg:w="178056"/><text x="6.4902%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.04%)</title><rect x="97.5422%" y="133" width="0.0426%" height="15" fill="rgb(228,70,38)" fg:x="190136" fg:w="83"/><text x="97.8351%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.07%)</title><rect x="97.5422%" y="149" width="0.0652%" height="15" fill="rgb(241,125,36)" fg:x="190136" fg:w="127"/><text x="97.8351%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.01%)</title><rect x="97.6073%" y="133" width="0.0139%" height="15" fill="rgb(205,17,45)" fg:x="190263" fg:w="27"/><text x="97.9003%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.01%)</title><rect x="97.6212%" y="133" width="0.0118%" height="15" fill="rgb(246,2,54)" fg:x="190290" fg:w="23"/><text x="97.9141%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.03%)</title><rect x="97.6330%" y="133" width="0.0349%" height="15" fill="rgb(227,224,27)" fg:x="190313" fg:w="68"/><text x="97.9259%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 0.12%)</title><rect x="97.6073%" y="149" width="0.1231%" height="15" fill="rgb(249,71,16)" fg:x="190263" fg:w="240"/><text x="97.9003%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (491 instructions, 0.25%)</title><rect x="97.5422%" y="165" width="0.2519%" height="15" fill="rgb(232,130,50)" fg:x="190136" fg:w="491"/><text x="97.8351%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.27%)</title><rect x="97.7940%" y="149" width="0.2657%" height="15" fill="rgb(215,130,25)" fg:x="190627" fg:w="518"/><text x="98.0870%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.04%)</title><rect x="98.0598%" y="101" width="0.0421%" height="15" fill="rgb(254,166,13)" fg:x="191145" fg:w="82"/><text x="98.3528%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.07%)</title><rect x="98.0598%" y="117" width="0.0667%" height="15" fill="rgb(253,183,5)" fg:x="191145" fg:w="130"/><text x="98.3528%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.11%)</title><rect x="98.0598%" y="133" width="0.1088%" height="15" fill="rgb(226,174,5)" fg:x="191145" fg:w="212"/><text x="98.3528%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.22%)</title><rect x="98.0598%" y="149" width="0.2196%" height="15" fill="rgb(231,109,9)" fg:x="191145" fg:w="428"/><text x="98.3528%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.26%)</title><rect x="98.2794%" y="149" width="0.2647%" height="15" fill="rgb(222,144,40)" fg:x="191573" fg:w="516"/><text x="98.5723%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 0.80%)</title><rect x="97.7940%" y="165" width="0.8034%" height="15" fill="rgb(246,38,26)" fg:x="190627" fg:w="1566"/><text x="98.0870%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="98.6046%" y="165" width="0.0308%" height="15" fill="rgb(213,201,40)" fg:x="192207" fg:w="60"/><text x="98.8976%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,735 instructions, 1.40%)</title><rect x="97.5422%" y="181" width="1.4031%" height="15" fill="rgb(246,67,33)" fg:x="190136" fg:w="2735"/><text x="97.8351%" y="191.50"></text></g><g><title>imrc_hashmap::__canister_method_batch_put::{{closure}} (194,376 instructions, 99.72%)</title><rect x="0.0964%" y="197" width="99.7173%" height="15" fill="rgb(225,2,50)" fg:x="188" fg:w="194376"/><text x="0.3894%" y="207.50">imrc_hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.01%)</title><rect x="99.8671%" y="181" width="0.0139%" height="15" fill="rgb(214,116,45)" fg:x="194668" fg:w="27"/><text x="100.1601%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.10%)</title><rect x="99.8215%" y="197" width="0.1047%" height="15" fill="rgb(211,217,30)" fg:x="194579" fg:w="204"/><text x="100.1144%" y="207.50"></text></g><g><title>all (194,927 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,160,51)" fg:x="0" fg:w="194927"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (194,927 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,148,41)" fg:x="0" fg:w="194927"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>