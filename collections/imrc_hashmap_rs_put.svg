<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="162822"><g><title>ic_cdk::setup (19 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0117%" height="15" fill="rgb(230,61,40)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.07%)</title><rect x="0.0117%" y="197" width="0.0725%" height="15" fill="rgb(223,3,7)" fg:x="19" fg:w="118"/><text x="0.3046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.04%)</title><rect x="0.0841%" y="197" width="0.0436%" height="15" fill="rgb(220,38,25)" fg:x="137" fg:w="71"/><text x="0.3771%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.1277%" y="165" width="0.0504%" height="15" fill="rgb(228,183,41)" fg:x="208" fg:w="82"/><text x="0.4207%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.1781%" y="149" width="0.0424%" height="15" fill="rgb(214,221,33)" fg:x="290" fg:w="69"/><text x="0.4711%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.2205%" y="149" width="0.2494%" height="15" fill="rgb(215,44,25)" fg:x="359" fg:w="406"/><text x="0.5135%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="0.4698%" y="149" width="0.0504%" height="15" fill="rgb(252,79,15)" fg:x="765" fg:w="82"/><text x="0.7628%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5202%" y="149" width="0.0332%" height="15" fill="rgb(206,157,21)" fg:x="847" fg:w="54"/><text x="0.8132%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5534%" y="149" width="0.0332%" height="15" fill="rgb(223,83,29)" fg:x="901" fg:w="54"/><text x="0.8463%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5865%" y="149" width="0.0332%" height="15" fill="rgb(213,194,38)" fg:x="955" fg:w="54"/><text x="0.8795%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.6197%" y="149" width="0.0332%" height="15" fill="rgb(221,64,9)" fg:x="1009" fg:w="54"/><text x="0.9127%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.6529%" y="149" width="0.0424%" height="15" fill="rgb(252,79,11)" fg:x="1063" fg:w="69"/><text x="0.9458%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="0.6952%" y="149" width="0.0399%" height="15" fill="rgb(238,81,46)" fg:x="1132" fg:w="65"/><text x="0.9882%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.7352%" y="149" width="0.2494%" height="15" fill="rgb(213,168,12)" fg:x="1197" fg:w="406"/><text x="1.0281%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.9943%" y="133" width="0.0504%" height="15" fill="rgb(235,226,53)" fg:x="1619" fg:w="82"/><text x="1.2873%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.0447%" y="101" width="0.0369%" height="15" fill="rgb(224,138,26)" fg:x="1701" fg:w="60"/><text x="1.3377%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.0447%" y="117" width="0.0522%" height="15" fill="rgb(223,155,12)" fg:x="1701" fg:w="85"/><text x="1.3377%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.1024%" y="53" width="0.0184%" height="15" fill="rgb(253,132,28)" fg:x="1795" fg:w="30"/><text x="1.3954%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.1024%" y="69" width="0.0338%" height="15" fill="rgb(244,112,25)" fg:x="1795" fg:w="55"/><text x="1.3954%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.0969%" y="85" width="0.0725%" height="15" fill="rgb(239,75,22)" fg:x="1786" fg:w="118"/><text x="1.3899%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.11%)</title><rect x="1.0969%" y="101" width="0.1050%" height="15" fill="rgb(211,172,54)" fg:x="1786" fg:w="171"/><text x="1.3899%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.0969%" y="117" width="0.1081%" height="15" fill="rgb(215,156,8)" fg:x="1786" fg:w="176"/><text x="1.3899%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.0447%" y="133" width="0.2285%" height="15" fill="rgb(210,175,21)" fg:x="1701" fg:w="372"/><text x="1.3377%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.37%)</title><rect x="0.9943%" y="149" width="0.3654%" height="15" fill="rgb(222,36,42)" fg:x="1619" fg:w="595"/><text x="1.2873%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="1.3598%" y="149" width="0.0504%" height="15" fill="rgb(220,108,38)" fg:x="2214" fg:w="82"/><text x="1.6527%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="1.4101%" y="149" width="0.0344%" height="15" fill="rgb(253,172,18)" fg:x="2296" fg:w="56"/><text x="1.7031%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="1.4445%" y="149" width="0.0387%" height="15" fill="rgb(213,63,6)" fg:x="2352" fg:w="63"/><text x="1.7375%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="1.4832%" y="149" width="0.0399%" height="15" fill="rgb(209,33,35)" fg:x="2415" fg:w="65"/><text x="1.7762%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="1.5231%" y="133" width="0.2494%" height="15" fill="rgb(218,229,47)" fg:x="2480" fg:w="406"/><text x="1.8161%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="1.7823%" y="117" width="0.0504%" height="15" fill="rgb(247,48,0)" fg:x="2902" fg:w="82"/><text x="2.0753%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.8327%" y="85" width="0.0369%" height="15" fill="rgb(209,165,21)" fg:x="2984" fg:w="60"/><text x="2.1256%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.8327%" y="101" width="0.0522%" height="15" fill="rgb(217,11,14)" fg:x="2984" fg:w="85"/><text x="2.1256%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.8904%" y="37" width="0.0184%" height="15" fill="rgb(244,216,30)" fg:x="3078" fg:w="30"/><text x="2.1834%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.8904%" y="53" width="0.0338%" height="15" fill="rgb(243,135,5)" fg:x="3078" fg:w="55"/><text x="2.1834%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.8849%" y="69" width="0.0725%" height="15" fill="rgb(232,64,47)" fg:x="3069" fg:w="118"/><text x="2.1778%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.11%)</title><rect x="1.8849%" y="85" width="0.1050%" height="15" fill="rgb(236,60,27)" fg:x="3069" fg:w="171"/><text x="2.1778%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.8849%" y="101" width="0.1081%" height="15" fill="rgb(246,2,21)" fg:x="3069" fg:w="176"/><text x="2.1778%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.8327%" y="117" width="0.2285%" height="15" fill="rgb(240,57,45)" fg:x="2984" fg:w="372"/><text x="2.1256%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.37%)</title><rect x="1.7823%" y="133" width="0.3654%" height="15" fill="rgb(242,62,32)" fg:x="2902" fg:w="595"/><text x="2.0753%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="2.1477%" y="133" width="0.0504%" height="15" fill="rgb(237,72,25)" fg:x="3497" fg:w="82"/><text x="2.4407%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="2.1981%" y="133" width="0.0344%" height="15" fill="rgb(240,41,51)" fg:x="3579" fg:w="56"/><text x="2.4911%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="2.2325%" y="117" width="0.0424%" height="15" fill="rgb(228,10,23)" fg:x="3635" fg:w="69"/><text x="2.5255%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.06%)</title><rect x="2.2749%" y="117" width="0.0559%" height="15" fill="rgb(222,17,39)" fg:x="3704" fg:w="91"/><text x="2.5678%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.3308%" y="117" width="0.0387%" height="15" fill="rgb(217,10,40)" fg:x="3795" fg:w="63"/><text x="2.6237%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.17%)</title><rect x="2.2325%" y="133" width="0.1732%" height="15" fill="rgb(213,147,21)" fg:x="3635" fg:w="282"/><text x="2.5255%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.4057%" y="133" width="0.0504%" height="15" fill="rgb(234,33,8)" fg:x="3917" fg:w="82"/><text x="2.6987%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 1.06%)</title><rect x="1.5231%" y="149" width="1.0576%" height="15" fill="rgb(228,201,21)" fg:x="2480" fg:w="1722"/><text x="1.8161%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.5807%" y="149" width="0.0387%" height="15" fill="rgb(221,95,40)" fg:x="4202" fg:w="63"/><text x="2.8737%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.6489%" y="133" width="0.0504%" height="15" fill="rgb(248,72,48)" fg:x="4313" fg:w="82"/><text x="2.9419%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.10%)</title><rect x="2.6489%" y="149" width="0.1013%" height="15" fill="rgb(211,22,0)" fg:x="4313" fg:w="165"/><text x="2.9419%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.7502%" y="117" width="0.0504%" height="15" fill="rgb(253,215,28)" fg:x="4478" fg:w="82"/><text x="3.0432%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.07%)</title><rect x="2.7502%" y="133" width="0.0712%" height="15" fill="rgb(248,179,7)" fg:x="4478" fg:w="116"/><text x="3.0432%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.11%)</title><rect x="2.7502%" y="149" width="0.1130%" height="15" fill="rgb(243,115,15)" fg:x="4478" fg:w="184"/><text x="3.0432%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.8632%" y="149" width="0.0504%" height="15" fill="rgb(240,160,52)" fg:x="4662" fg:w="82"/><text x="3.1562%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="2.9136%" y="149" width="0.0497%" height="15" fill="rgb(215,49,4)" fg:x="4744" fg:w="81"/><text x="3.2066%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9634%" y="149" width="0.0504%" height="15" fill="rgb(205,111,7)" fg:x="4825" fg:w="82"/><text x="3.2563%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="3.0137%" y="149" width="0.0504%" height="15" fill="rgb(240,197,30)" fg:x="4907" fg:w="82"/><text x="3.3067%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="3.0653%" y="149" width="0.0497%" height="15" fill="rgb(214,119,18)" fg:x="4991" fg:w="81"/><text x="3.3583%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.23%)</title><rect x="3.1151%" y="149" width="0.2334%" height="15" fill="rgb(232,50,22)" fg:x="5072" fg:w="380"/><text x="3.4080%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.23%)</title><rect x="3.3484%" y="149" width="0.2334%" height="15" fill="rgb(210,83,10)" fg:x="5452" fg:w="380"/><text x="3.6414%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,457 instructions, 3.97%)</title><rect x="0.1781%" y="165" width="3.9657%" height="15" fill="rgb(230,194,22)" fg:x="290" fg:w="6457"/><text x="0.4711%" y="175.50">can..</text></g><g><title>memcpy (335 instructions, 0.21%)</title><rect x="4.1438%" y="165" width="0.2057%" height="15" fill="rgb(222,142,35)" fg:x="6747" fg:w="335"/><text x="4.4368%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.03%)</title><rect x="4.3495%" y="165" width="0.0307%" height="15" fill="rgb(209,84,34)" fg:x="7082" fg:w="50"/><text x="4.6425%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.3802%" y="165" width="0.0504%" height="15" fill="rgb(225,77,28)" fg:x="7132" fg:w="82"/><text x="4.6732%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.4380%" y="133" width="0.0326%" height="15" fill="rgb(220,97,0)" fg:x="7226" fg:w="53"/><text x="4.7309%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.4705%" y="133" width="0.0540%" height="15" fill="rgb(229,162,27)" fg:x="7279" fg:w="88"/><text x="4.7635%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="4.5246%" y="133" width="0.0995%" height="15" fill="rgb(227,28,52)" fg:x="7367" fg:w="162"/><text x="4.8175%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.4380%" y="149" width="0.3317%" height="15" fill="rgb(208,108,31)" fg:x="7226" fg:w="540"/><text x="4.7309%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 0.47%)</title><rect x="4.4306%" y="165" width="0.4741%" height="15" fill="rgb(224,3,27)" fg:x="7214" fg:w="772"/><text x="4.7236%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.9047%" y="165" width="0.0504%" height="15" fill="rgb(226,177,26)" fg:x="7986" fg:w="82"/><text x="5.1977%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.9625%" y="133" width="0.0326%" height="15" fill="rgb(223,137,30)" fg:x="8080" fg:w="53"/><text x="5.2554%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.9950%" y="133" width="0.0540%" height="15" fill="rgb(239,43,33)" fg:x="8133" fg:w="88"/><text x="5.2880%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="5.0491%" y="133" width="0.0995%" height="15" fill="rgb(212,104,50)" fg:x="8221" fg:w="162"/><text x="5.3420%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.9625%" y="149" width="0.3317%" height="15" fill="rgb(251,76,28)" fg:x="8080" fg:w="540"/><text x="5.2554%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.04%)</title><rect x="5.2941%" y="149" width="0.0418%" height="15" fill="rgb(220,113,8)" fg:x="8620" fg:w="68"/><text x="5.5871%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="5.3359%" y="133" width="0.0497%" height="15" fill="rgb(236,67,25)" fg:x="8688" fg:w="81"/><text x="5.6289%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.07%)</title><rect x="5.3359%" y="149" width="0.0663%" height="15" fill="rgb(250,21,11)" fg:x="8688" fg:w="108"/><text x="5.6289%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 0.56%)</title><rect x="4.9551%" y="165" width="0.5601%" height="15" fill="rgb(229,149,43)" fg:x="8068" fg:w="912"/><text x="5.2481%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="5.5152%" y="117" width="0.0326%" height="15" fill="rgb(239,14,2)" fg:x="8980" fg:w="53"/><text x="5.8082%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.05%)</title><rect x="5.5152%" y="133" width="0.0485%" height="15" fill="rgb(222,207,6)" fg:x="8980" fg:w="79"/><text x="5.8082%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.18%)</title><rect x="5.5152%" y="149" width="0.1793%" height="15" fill="rgb(221,20,47)" fg:x="8980" fg:w="292"/><text x="5.8082%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 0.32%)</title><rect x="5.5152%" y="165" width="0.3206%" height="15" fill="rgb(250,218,36)" fg:x="8980" fg:w="522"/><text x="5.8082%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.02%)</title><rect x="5.8358%" y="165" width="0.0209%" height="15" fill="rgb(212,179,44)" fg:x="9502" fg:w="34"/><text x="6.1288%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.8567%" y="149" width="0.0755%" height="15" fill="rgb(207,81,25)" fg:x="9536" fg:w="123"/><text x="6.1497%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.9488%" y="149" width="0.0755%" height="15" fill="rgb(246,7,33)" fg:x="9686" fg:w="123"/><text x="6.2418%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.18%)</title><rect x="5.8567%" y="165" width="0.1843%" height="15" fill="rgb(212,71,2)" fg:x="9536" fg:w="300"/><text x="6.1497%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="6.0410%" y="149" width="0.0172%" height="15" fill="rgb(217,96,13)" fg:x="9836" fg:w="28"/><text x="6.3339%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.06%)</title><rect x="6.0410%" y="165" width="0.0596%" height="15" fill="rgb(231,34,12)" fg:x="9836" fg:w="97"/><text x="6.3339%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.25%)</title><rect x="6.1208%" y="165" width="0.2518%" height="15" fill="rgb(247,123,5)" fg:x="9966" fg:w="410"/><text x="6.4138%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.10%)</title><rect x="6.3800%" y="133" width="0.1032%" height="15" fill="rgb(219,84,15)" fg:x="10388" fg:w="168"/><text x="6.6729%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.4832%" y="101" width="0.0387%" height="15" fill="rgb(219,178,3)" fg:x="10556" fg:w="63"/><text x="6.7761%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.13%)</title><rect x="6.4832%" y="117" width="0.1277%" height="15" fill="rgb(210,147,6)" fg:x="10556" fg:w="208"/><text x="6.7761%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.14%)</title><rect x="6.4832%" y="133" width="0.1443%" height="15" fill="rgb(250,122,7)" fg:x="10556" fg:w="235"/><text x="6.7761%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 0.29%)</title><rect x="6.3726%" y="149" width="0.2874%" height="15" fill="rgb(218,182,7)" fg:x="10376" fg:w="468"/><text x="6.6656%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (502 instructions, 0.31%)</title><rect x="6.3726%" y="165" width="0.3083%" height="15" fill="rgb(232,27,49)" fg:x="10376" fg:w="502"/><text x="6.6656%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="6.6809%" y="149" width="0.0338%" height="15" fill="rgb(249,12,34)" fg:x="10878" fg:w="55"/><text x="6.9739%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.7147%" y="149" width="0.0387%" height="15" fill="rgb(234,46,44)" fg:x="10933" fg:w="63"/><text x="7.0077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.12%)</title><rect x="6.6809%" y="165" width="0.1222%" height="15" fill="rgb(248,78,37)" fg:x="10878" fg:w="199"/><text x="6.9739%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,260 instructions, 6.92%)</title><rect x="0.1277%" y="181" width="6.9155%" height="15" fill="rgb(225,193,28)" fg:x="208" fg:w="11260"/><text x="0.4207%" y="191.50">ic_cdk::..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="7.0519%" y="165" width="0.1228%" height="15" fill="rgb(236,211,19)" fg:x="11482" fg:w="200"/><text x="7.3448%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="7.1747%" y="149" width="1.8179%" height="15" fill="rgb(252,109,14)" fg:x="11682" fg:w="2960"/><text x="7.4677%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="7.1747%" y="165" width="1.8714%" height="15" fill="rgb(235,216,26)" fg:x="11682" fg:w="3047"/><text x="7.4677%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="9.0461%" y="165" width="0.0792%" height="15" fill="rgb(232,51,26)" fg:x="14729" fg:w="129"/><text x="9.3390%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="9.1253%" y="165" width="1.8179%" height="15" fill="rgb(222,161,22)" fg:x="14858" fg:w="2960"/><text x="9.4183%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="11.1594%" y="165" width="0.1228%" height="15" fill="rgb(213,23,19)" fg:x="18170" fg:w="200"/><text x="11.4524%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="11.2823%" y="149" width="1.8179%" height="15" fill="rgb(254,48,9)" fg:x="18370" fg:w="2960"/><text x="11.5752%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="11.2823%" y="165" width="1.8714%" height="15" fill="rgb(237,11,51)" fg:x="18370" fg:w="3047"/><text x="11.5752%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="13.1536%" y="165" width="0.0792%" height="15" fill="rgb(240,102,25)" fg:x="21417" fg:w="129"/><text x="13.4466%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="13.2329%" y="165" width="1.8179%" height="15" fill="rgb(253,165,12)" fg:x="21546" fg:w="2960"/><text x="13.5258%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.2670%" y="165" width="0.1228%" height="15" fill="rgb(228,15,23)" fg:x="24858" fg:w="200"/><text x="15.5599%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.5581%" y="165" width="0.1228%" height="15" fill="rgb(231,146,8)" fg:x="25332" fg:w="200"/><text x="15.8511%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="15.6809%" y="149" width="1.8179%" height="15" fill="rgb(246,179,50)" fg:x="25532" fg:w="2960"/><text x="15.9739%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="15.6809%" y="165" width="1.8714%" height="15" fill="rgb(211,15,10)" fg:x="25532" fg:w="3047"/><text x="15.9739%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="17.5523%" y="165" width="0.0792%" height="15" fill="rgb(244,158,45)" fg:x="28579" fg:w="129"/><text x="17.8453%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="17.6315%" y="165" width="1.8179%" height="15" fill="rgb(208,209,29)" fg:x="28708" fg:w="2960"/><text x="17.9245%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="19.6656%" y="165" width="0.1228%" height="15" fill="rgb(217,111,17)" fg:x="32020" fg:w="200"/><text x="19.9586%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="19.7885%" y="149" width="1.8179%" height="15" fill="rgb(238,204,19)" fg:x="32220" fg:w="2960"/><text x="20.0814%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="19.7885%" y="165" width="1.8714%" height="15" fill="rgb(235,173,2)" fg:x="32220" fg:w="3047"/><text x="20.0814%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="21.6598%" y="165" width="0.0792%" height="15" fill="rgb(210,5,45)" fg:x="35267" fg:w="129"/><text x="21.9528%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="21.7391%" y="165" width="1.8179%" height="15" fill="rgb(226,91,3)" fg:x="35396" fg:w="2960"/><text x="22.0320%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="23.7732%" y="165" width="0.1228%" height="15" fill="rgb(222,169,41)" fg:x="38708" fg:w="200"/><text x="24.0662%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.1018%" y="165" width="0.1228%" height="15" fill="rgb(217,162,51)" fg:x="39243" fg:w="200"/><text x="24.3947%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.3929%" y="165" width="0.1228%" height="15" fill="rgb(235,126,2)" fg:x="39717" fg:w="200"/><text x="24.6859%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="24.5157%" y="149" width="1.8179%" height="15" fill="rgb(215,151,2)" fg:x="39917" fg:w="2960"/><text x="24.8087%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="24.5157%" y="165" width="1.8714%" height="15" fill="rgb(224,98,50)" fg:x="39917" fg:w="3047"/><text x="24.8087%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="26.3871%" y="165" width="0.0792%" height="15" fill="rgb(223,207,47)" fg:x="42964" fg:w="129"/><text x="26.6801%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="26.4663%" y="165" width="1.8179%" height="15" fill="rgb(242,125,30)" fg:x="43093" fg:w="2960"/><text x="26.7593%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="28.5004%" y="165" width="0.1228%" height="15" fill="rgb(205,119,35)" fg:x="46405" fg:w="200"/><text x="28.7934%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="28.6233%" y="149" width="1.8179%" height="15" fill="rgb(239,164,34)" fg:x="46605" fg:w="2960"/><text x="28.9163%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="28.6233%" y="165" width="1.8714%" height="15" fill="rgb(254,223,2)" fg:x="46605" fg:w="3047"/><text x="28.9163%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="30.4947%" y="165" width="0.0792%" height="15" fill="rgb(245,118,18)" fg:x="49652" fg:w="129"/><text x="30.7876%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="30.5739%" y="165" width="1.8179%" height="15" fill="rgb(251,96,42)" fg:x="49781" fg:w="2960"/><text x="30.8668%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="32.6080%" y="165" width="0.1228%" height="15" fill="rgb(223,30,39)" fg:x="53093" fg:w="200"/><text x="32.9010%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="32.7308%" y="149" width="1.8179%" height="15" fill="rgb(234,147,26)" fg:x="53293" fg:w="2960"/><text x="33.0238%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="32.7308%" y="165" width="1.8714%" height="15" fill="rgb(214,90,44)" fg:x="53293" fg:w="3047"/><text x="33.0238%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="34.6022%" y="165" width="0.0792%" height="15" fill="rgb(241,35,41)" fg:x="56340" fg:w="129"/><text x="34.8952%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="34.6814%" y="165" width="1.8179%" height="15" fill="rgb(241,77,17)" fg:x="56469" fg:w="2960"/><text x="34.9744%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="36.7156%" y="165" width="0.1228%" height="15" fill="rgb(225,102,51)" fg:x="59781" fg:w="200"/><text x="37.0085%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.0067%" y="165" width="0.1228%" height="15" fill="rgb(220,58,23)" fg:x="60255" fg:w="200"/><text x="37.2996%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.2978%" y="165" width="0.1228%" height="15" fill="rgb(238,29,20)" fg:x="60729" fg:w="200"/><text x="37.5908%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.5889%" y="165" width="0.1228%" height="15" fill="rgb(249,24,7)" fg:x="61203" fg:w="200"/><text x="37.8819%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="37.7117%" y="149" width="1.8179%" height="15" fill="rgb(213,180,11)" fg:x="61403" fg:w="2960"/><text x="38.0047%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="37.7117%" y="165" width="1.8714%" height="15" fill="rgb(253,122,29)" fg:x="61403" fg:w="3047"/><text x="38.0047%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="39.5831%" y="165" width="0.0792%" height="15" fill="rgb(213,81,20)" fg:x="64450" fg:w="129"/><text x="39.8761%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="39.6623%" y="165" width="1.8179%" height="15" fill="rgb(223,25,44)" fg:x="64579" fg:w="2960"/><text x="39.9553%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.6965%" y="165" width="0.1228%" height="15" fill="rgb(226,163,25)" fg:x="67891" fg:w="200"/><text x="41.9894%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.9876%" y="165" width="0.1228%" height="15" fill="rgb(216,211,2)" fg:x="68365" fg:w="200"/><text x="42.2805%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.2787%" y="165" width="0.1228%" height="15" fill="rgb(235,55,24)" fg:x="68839" fg:w="200"/><text x="42.5717%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.5698%" y="165" width="0.1228%" height="15" fill="rgb(230,14,31)" fg:x="69313" fg:w="200"/><text x="42.8628%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.8609%" y="165" width="0.1228%" height="15" fill="rgb(247,49,49)" fg:x="69787" fg:w="200"/><text x="43.1539%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="43.1895%" y="165" width="0.1228%" height="15" fill="rgb(241,76,24)" fg:x="70322" fg:w="200"/><text x="43.4825%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="43.3123%" y="149" width="1.8179%" height="15" fill="rgb(243,134,0)" fg:x="70522" fg:w="2960"/><text x="43.6053%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="43.3123%" y="165" width="1.8714%" height="15" fill="rgb(243,181,16)" fg:x="70522" fg:w="3047"/><text x="43.6053%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="45.1837%" y="165" width="0.0792%" height="15" fill="rgb(234,212,13)" fg:x="73569" fg:w="129"/><text x="45.4767%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="45.2629%" y="165" width="1.8179%" height="15" fill="rgb(228,31,22)" fg:x="73698" fg:w="2960"/><text x="45.5559%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="47.2970%" y="165" width="0.1228%" height="15" fill="rgb(216,97,41)" fg:x="77010" fg:w="200"/><text x="47.5900%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="47.4199%" y="149" width="1.8179%" height="15" fill="rgb(232,215,24)" fg:x="77210" fg:w="2960"/><text x="47.7129%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="47.4199%" y="165" width="1.8714%" height="15" fill="rgb(232,146,38)" fg:x="77210" fg:w="3047"/><text x="47.7129%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="49.2913%" y="165" width="0.0792%" height="15" fill="rgb(216,23,49)" fg:x="80257" fg:w="129"/><text x="49.5842%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="49.3705%" y="165" width="1.8179%" height="15" fill="rgb(232,92,9)" fg:x="80386" fg:w="2960"/><text x="49.6634%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.4046%" y="165" width="0.1228%" height="15" fill="rgb(246,152,34)" fg:x="83698" fg:w="200"/><text x="51.6976%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.7332%" y="165" width="0.1228%" height="15" fill="rgb(213,174,44)" fg:x="84233" fg:w="200"/><text x="52.0261%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.0618%" y="165" width="0.1228%" height="15" fill="rgb(237,169,25)" fg:x="84768" fg:w="200"/><text x="52.3547%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.3529%" y="165" width="0.1228%" height="15" fill="rgb(229,219,4)" fg:x="85242" fg:w="200"/><text x="52.6458%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.6440%" y="165" width="0.1228%" height="15" fill="rgb(233,216,9)" fg:x="85716" fg:w="200"/><text x="52.9370%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.9726%" y="165" width="0.1228%" height="15" fill="rgb(208,128,21)" fg:x="86251" fg:w="200"/><text x="53.2655%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.2637%" y="165" width="0.1228%" height="15" fill="rgb(242,212,7)" fg:x="86725" fg:w="200"/><text x="53.5567%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.5548%" y="165" width="0.1228%" height="15" fill="rgb(225,225,26)" fg:x="87199" fg:w="200"/><text x="53.8478%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="53.6776%" y="149" width="1.8179%" height="15" fill="rgb(237,34,25)" fg:x="87399" fg:w="2960"/><text x="53.9706%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="53.6776%" y="165" width="1.8714%" height="15" fill="rgb(251,32,34)" fg:x="87399" fg:w="3047"/><text x="53.9706%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="55.5490%" y="165" width="0.0792%" height="15" fill="rgb(238,61,6)" fg:x="90446" fg:w="129"/><text x="55.8420%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="55.6282%" y="165" width="1.8179%" height="15" fill="rgb(208,227,30)" fg:x="90575" fg:w="2960"/><text x="55.9212%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.6624%" y="165" width="0.1228%" height="15" fill="rgb(227,54,27)" fg:x="93887" fg:w="200"/><text x="57.9553%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.9535%" y="165" width="0.1228%" height="15" fill="rgb(216,72,14)" fg:x="94361" fg:w="200"/><text x="58.2464%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.2821%" y="165" width="0.1228%" height="15" fill="rgb(209,179,21)" fg:x="94896" fg:w="200"/><text x="58.5750%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.5732%" y="165" width="0.1228%" height="15" fill="rgb(237,83,2)" fg:x="95370" fg:w="200"/><text x="58.8661%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="58.6960%" y="149" width="1.8179%" height="15" fill="rgb(224,101,3)" fg:x="95570" fg:w="2960"/><text x="58.9890%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="58.6960%" y="165" width="1.8714%" height="15" fill="rgb(247,53,40)" fg:x="95570" fg:w="3047"/><text x="58.9890%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="60.5674%" y="165" width="0.0792%" height="15" fill="rgb(216,123,28)" fg:x="98617" fg:w="129"/><text x="60.8603%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="60.6466%" y="165" width="1.8179%" height="15" fill="rgb(223,133,34)" fg:x="98746" fg:w="2960"/><text x="60.9396%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="62.6807%" y="165" width="0.1228%" height="15" fill="rgb(213,17,44)" fg:x="102058" fg:w="200"/><text x="62.9737%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="62.8036%" y="149" width="1.8179%" height="15" fill="rgb(207,217,33)" fg:x="102258" fg:w="2960"/><text x="63.0965%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="62.8036%" y="165" width="1.8714%" height="15" fill="rgb(215,10,39)" fg:x="102258" fg:w="3047"/><text x="63.0965%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="64.6749%" y="165" width="0.0792%" height="15" fill="rgb(249,32,11)" fg:x="105305" fg:w="129"/><text x="64.9679%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="64.7541%" y="165" width="1.8179%" height="15" fill="rgb(241,24,18)" fg:x="105434" fg:w="2960"/><text x="65.0471%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="66.7883%" y="165" width="0.1228%" height="15" fill="rgb(209,78,7)" fg:x="108746" fg:w="200"/><text x="67.0812%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.0794%" y="165" width="0.1228%" height="15" fill="rgb(212,204,27)" fg:x="109220" fg:w="200"/><text x="67.3724%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.4080%" y="165" width="0.1228%" height="15" fill="rgb(231,181,17)" fg:x="109755" fg:w="200"/><text x="67.7009%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="67.5308%" y="149" width="1.8179%" height="15" fill="rgb(227,224,17)" fg:x="109955" fg:w="2960"/><text x="67.8238%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="67.5308%" y="165" width="1.8714%" height="15" fill="rgb(213,108,35)" fg:x="109955" fg:w="3047"/><text x="67.8238%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="69.4022%" y="165" width="0.0792%" height="15" fill="rgb(207,7,12)" fg:x="113002" fg:w="129"/><text x="69.6951%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="69.4814%" y="165" width="1.8179%" height="15" fill="rgb(205,226,2)" fg:x="113131" fg:w="2960"/><text x="69.7744%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="71.5530%" y="165" width="0.1228%" height="15" fill="rgb(223,63,15)" fg:x="116504" fg:w="200"/><text x="71.8460%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="71.6758%" y="149" width="1.8179%" height="15" fill="rgb(239,53,23)" fg:x="116704" fg:w="2960"/><text x="71.9688%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="71.6758%" y="165" width="1.8714%" height="15" fill="rgb(230,222,9)" fg:x="116704" fg:w="3047"/><text x="71.9688%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="73.5472%" y="165" width="0.0792%" height="15" fill="rgb(244,117,26)" fg:x="119751" fg:w="129"/><text x="73.8402%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="73.6264%" y="165" width="1.8179%" height="15" fill="rgb(252,18,54)" fg:x="119880" fg:w="2960"/><text x="73.9194%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.6605%" y="165" width="0.1228%" height="15" fill="rgb(253,171,14)" fg:x="123192" fg:w="200"/><text x="75.9535%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.9517%" y="165" width="0.1228%" height="15" fill="rgb(235,129,24)" fg:x="123666" fg:w="200"/><text x="76.2446%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="76.2802%" y="165" width="0.1228%" height="15" fill="rgb(239,157,20)" fg:x="124201" fg:w="200"/><text x="76.5732%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="76.4031%" y="149" width="1.8179%" height="15" fill="rgb(252,134,8)" fg:x="124401" fg:w="2960"/><text x="76.6960%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="76.4031%" y="165" width="1.8714%" height="15" fill="rgb(249,201,53)" fg:x="124401" fg:w="3047"/><text x="76.6960%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="78.2744%" y="165" width="0.0792%" height="15" fill="rgb(224,173,41)" fg:x="127448" fg:w="129"/><text x="78.5674%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="78.3537%" y="165" width="1.8179%" height="15" fill="rgb(237,127,15)" fg:x="127577" fg:w="2960"/><text x="78.6466%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="80.3878%" y="165" width="0.1228%" height="15" fill="rgb(218,103,46)" fg:x="130889" fg:w="200"/><text x="80.6808%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="80.5106%" y="149" width="1.8179%" height="15" fill="rgb(239,123,31)" fg:x="131089" fg:w="2960"/><text x="80.8036%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="80.5106%" y="165" width="1.8714%" height="15" fill="rgb(235,122,19)" fg:x="131089" fg:w="3047"/><text x="80.8036%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="82.3820%" y="165" width="0.0792%" height="15" fill="rgb(241,149,43)" fg:x="134136" fg:w="129"/><text x="82.6750%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="82.4612%" y="165" width="1.8179%" height="15" fill="rgb(250,37,37)" fg:x="134265" fg:w="2960"/><text x="82.7542%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.4953%" y="165" width="0.1228%" height="15" fill="rgb(207,200,17)" fg:x="137577" fg:w="200"/><text x="84.7883%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.8239%" y="165" width="0.1228%" height="15" fill="rgb(240,68,13)" fg:x="138112" fg:w="200"/><text x="85.1169%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="85.1150%" y="165" width="0.1228%" height="15" fill="rgb(216,18,14)" fg:x="138586" fg:w="200"/><text x="85.4080%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="85.2379%" y="149" width="1.8179%" height="15" fill="rgb(223,113,41)" fg:x="138786" fg:w="2960"/><text x="85.5308%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="85.2379%" y="165" width="1.8714%" height="15" fill="rgb(225,126,12)" fg:x="138786" fg:w="3047"/><text x="85.5308%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="87.1092%" y="165" width="0.0792%" height="15" fill="rgb(225,172,8)" fg:x="141833" fg:w="129"/><text x="87.4022%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="87.1885%" y="165" width="1.8179%" height="15" fill="rgb(229,35,2)" fg:x="141962" fg:w="2960"/><text x="87.4814%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.2226%" y="165" width="0.1228%" height="15" fill="rgb(252,18,17)" fg:x="145274" fg:w="200"/><text x="89.5156%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.5512%" y="165" width="0.1228%" height="15" fill="rgb(254,49,24)" fg:x="145809" fg:w="200"/><text x="89.8441%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="89.6740%" y="149" width="1.8179%" height="15" fill="rgb(221,3,39)" fg:x="146009" fg:w="2960"/><text x="89.9670%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="89.6740%" y="165" width="1.8714%" height="15" fill="rgb(237,23,14)" fg:x="146009" fg:w="3047"/><text x="89.9670%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="91.5454%" y="165" width="0.0792%" height="15" fill="rgb(245,118,50)" fg:x="149056" fg:w="129"/><text x="91.8383%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="91.6246%" y="165" width="1.8179%" height="15" fill="rgb(250,203,44)" fg:x="149185" fg:w="2960"/><text x="91.9176%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.6587%" y="165" width="0.1228%" height="15" fill="rgb(228,108,22)" fg:x="152497" fg:w="200"/><text x="93.9517%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.9498%" y="165" width="0.1228%" height="15" fill="rgb(231,18,43)" fg:x="152971" fg:w="200"/><text x="94.2428%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="94.2410%" y="165" width="0.1228%" height="15" fill="rgb(222,137,2)" fg:x="153445" fg:w="200"/><text x="94.5339%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="94.3638%" y="149" width="1.8179%" height="15" fill="rgb(205,149,29)" fg:x="153645" fg:w="2960"/><text x="94.6568%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="94.3638%" y="165" width="1.8714%" height="15" fill="rgb(230,94,44)" fg:x="153645" fg:w="3047"/><text x="94.6568%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="96.2352%" y="165" width="0.0792%" height="15" fill="rgb(207,203,12)" fg:x="156692" fg:w="129"/><text x="96.5281%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="96.3144%" y="165" width="1.8179%" height="15" fill="rgb(227,152,36)" fg:x="156821" fg:w="2960"/><text x="96.6073%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (148,651 instructions, 91.30%)</title><rect x="7.0519%" y="181" width="91.2966%" height="15" fill="rgb(249,12,3)" fg:x="11482" fg:w="148651"/><text x="7.3448%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.3559%" y="117" width="0.0338%" height="15" fill="rgb(207,4,48)" fg:x="160145" fg:w="55"/><text x="98.6488%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="98.3897%" y="117" width="0.0387%" height="15" fill="rgb(245,116,24)" fg:x="160200" fg:w="63"/><text x="98.6826%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (202 instructions, 0.12%)</title><rect x="98.3559%" y="133" width="0.1241%" height="15" fill="rgb(229,149,27)" fg:x="160145" fg:w="202"/><text x="98.6488%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (229 instructions, 0.14%)</title><rect x="98.3559%" y="149" width="0.1406%" height="15" fill="rgb(244,109,51)" fg:x="160145" fg:w="229"/><text x="98.6488%" y="159.50"></text></g><g><title>memset (136 instructions, 0.08%)</title><rect x="98.4965%" y="149" width="0.0835%" height="15" fill="rgb(234,156,0)" fg:x="160374" fg:w="136"/><text x="98.7895%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (535 instructions, 0.33%)</title><rect x="98.3485%" y="165" width="0.3286%" height="15" fill="rgb(251,187,17)" fg:x="160133" fg:w="535"/><text x="98.6415%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.6771%" y="101" width="0.0338%" height="15" fill="rgb(210,78,2)" fg:x="160668" fg:w="55"/><text x="98.9701%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.10%)</title><rect x="98.6771%" y="117" width="0.1001%" height="15" fill="rgb(254,229,36)" fg:x="160668" fg:w="163"/><text x="98.9701%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (197 instructions, 0.12%)</title><rect x="98.6771%" y="133" width="0.1210%" height="15" fill="rgb(213,212,23)" fg:x="160668" fg:w="197"/><text x="98.9701%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (262 instructions, 0.16%)</title><rect x="98.6771%" y="149" width="0.1609%" height="15" fill="rgb(250,17,0)" fg:x="160668" fg:w="262"/><text x="98.9701%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.02%)</title><rect x="98.8515%" y="149" width="0.0184%" height="15" fill="rgb(235,183,7)" fg:x="160952" fg:w="30"/><text x="99.1445%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (540 instructions, 0.33%)</title><rect x="98.6771%" y="165" width="0.3317%" height="15" fill="rgb(228,6,30)" fg:x="160668" fg:w="540"/><text x="98.9701%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.03%)</title><rect x="99.0118%" y="165" width="0.0338%" height="15" fill="rgb(231,13,31)" fg:x="161213" fg:w="55"/><text x="99.3048%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,211 instructions, 0.74%)</title><rect x="98.3485%" y="181" width="0.7438%" height="15" fill="rgb(245,178,22)" fg:x="160133" fg:w="1211"/><text x="98.6415%" y="191.50"></text></g><g><title>imrc_hashmap::batch_put_3_::{{closure}} (162,297 instructions, 99.68%)</title><rect x="0.1277%" y="197" width="99.6776%" height="15" fill="rgb(234,212,30)" fg:x="208" fg:w="162297"/><text x="0.4207%" y="207.50">imrc_hashmap::batch_put_3_::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="99.8127%" y="197" width="0.0497%" height="15" fill="rgb(246,185,44)" fg:x="162517" fg:w="81"/><text x="100.1056%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.08%)</title><rect x="99.8624%" y="197" width="0.0774%" height="15" fill="rgb(210,156,40)" fg:x="162598" fg:w="126"/><text x="100.1554%" y="207.50"></text></g><g><title>all (162,822 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,139,16)" fg:x="0" fg:w="162822"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (162,822 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,215,36)" fg:x="0" fg:w="162822"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>