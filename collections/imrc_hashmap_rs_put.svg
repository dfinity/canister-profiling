<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="179288"><g><title>ic_cdk::setup (24 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0134%" height="15" fill="rgb(226,201,43)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.07%)</title><rect x="0.0134%" y="197" width="0.0675%" height="15" fill="rgb(214,126,46)" fg:x="24" fg:w="121"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.04%)</title><rect x="0.0809%" y="197" width="0.0429%" height="15" fill="rgb(221,8,34)" fg:x="145" fg:w="77"/><text x="0.3738%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.1238%" y="165" width="0.0508%" height="15" fill="rgb(206,104,51)" fg:x="222" fg:w="91"/><text x="0.4168%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.1746%" y="149" width="0.0457%" height="15" fill="rgb(208,133,5)" fg:x="313" fg:w="82"/><text x="0.4675%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="0.2203%" y="149" width="0.2454%" height="15" fill="rgb(233,119,39)" fg:x="395" fg:w="440"/><text x="0.5133%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="0.4657%" y="149" width="0.0530%" height="15" fill="rgb(227,92,37)" fg:x="835" fg:w="95"/><text x="0.7587%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5187%" y="149" width="0.0335%" height="15" fill="rgb(254,198,12)" fg:x="930" fg:w="60"/><text x="0.8117%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5522%" y="149" width="0.0335%" height="15" fill="rgb(237,194,48)" fg:x="990" fg:w="60"/><text x="0.8452%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5856%" y="149" width="0.0335%" height="15" fill="rgb(250,116,31)" fg:x="1050" fg:w="60"/><text x="0.8786%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.6191%" y="149" width="0.0335%" height="15" fill="rgb(232,193,37)" fg:x="1110" fg:w="60"/><text x="0.9121%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.6526%" y="149" width="0.0457%" height="15" fill="rgb(246,28,3)" fg:x="1170" fg:w="82"/><text x="0.9456%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="0.6983%" y="149" width="0.0390%" height="15" fill="rgb(205,200,3)" fg:x="1252" fg:w="70"/><text x="0.9913%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="0.7374%" y="149" width="0.2454%" height="15" fill="rgb(239,103,34)" fg:x="1322" fg:w="440"/><text x="1.0303%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="0.9828%" y="149" width="0.0106%" height="15" fill="rgb(214,17,52)" fg:x="1762" fg:w="19"/><text x="1.2757%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.9934%" y="133" width="0.0508%" height="15" fill="rgb(221,8,38)" fg:x="1781" fg:w="91"/><text x="1.2863%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.0441%" y="101" width="0.0374%" height="15" fill="rgb(221,60,37)" fg:x="1872" fg:w="67"/><text x="1.3371%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.05%)</title><rect x="1.0441%" y="117" width="0.0547%" height="15" fill="rgb(235,55,6)" fg:x="1872" fg:w="98"/><text x="1.3371%" y="127.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.1049%" y="53" width="0.0195%" height="15" fill="rgb(226,60,2)" fg:x="1981" fg:w="35"/><text x="1.3979%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.04%)</title><rect x="1.1049%" y="69" width="0.0368%" height="15" fill="rgb(252,78,36)" fg:x="1981" fg:w="66"/><text x="1.3979%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.08%)</title><rect x="1.0988%" y="85" width="0.0820%" height="15" fill="rgb(223,106,13)" fg:x="1970" fg:w="147"/><text x="1.3918%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.12%)</title><rect x="1.0988%" y="101" width="0.1182%" height="15" fill="rgb(246,38,49)" fg:x="1970" fg:w="212"/><text x="1.3918%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.12%)</title><rect x="1.0988%" y="117" width="0.1238%" height="15" fill="rgb(229,173,48)" fg:x="1970" fg:w="222"/><text x="1.3918%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.26%)</title><rect x="1.0441%" y="133" width="0.2571%" height="15" fill="rgb(236,40,51)" fg:x="1872" fg:w="461"/><text x="1.3371%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 0.39%)</title><rect x="0.9934%" y="149" width="0.3888%" height="15" fill="rgb(207,88,54)" fg:x="1781" fg:w="697"/><text x="1.2863%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.3821%" y="149" width="0.0530%" height="15" fill="rgb(205,1,31)" fg:x="2478" fg:w="95"/><text x="1.6751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="1.4351%" y="149" width="0.0351%" height="15" fill="rgb(222,116,39)" fg:x="2573" fg:w="63"/><text x="1.7281%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="1.4703%" y="149" width="0.0424%" height="15" fill="rgb(225,93,11)" fg:x="2636" fg:w="76"/><text x="1.7632%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="1.5127%" y="149" width="0.0390%" height="15" fill="rgb(250,31,49)" fg:x="2712" fg:w="70"/><text x="1.8056%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="1.5517%" y="133" width="0.2454%" height="15" fill="rgb(231,123,17)" fg:x="2782" fg:w="440"/><text x="1.8447%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="1.7971%" y="133" width="0.0106%" height="15" fill="rgb(245,121,9)" fg:x="3222" fg:w="19"/><text x="2.0901%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="1.8077%" y="117" width="0.0508%" height="15" fill="rgb(228,198,53)" fg:x="3241" fg:w="91"/><text x="2.1007%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.8585%" y="85" width="0.0374%" height="15" fill="rgb(253,25,3)" fg:x="3332" fg:w="67"/><text x="2.1514%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.05%)</title><rect x="1.8585%" y="101" width="0.0547%" height="15" fill="rgb(205,56,3)" fg:x="3332" fg:w="98"/><text x="2.1514%" y="111.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.9193%" y="37" width="0.0195%" height="15" fill="rgb(242,98,31)" fg:x="3441" fg:w="35"/><text x="2.2122%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.04%)</title><rect x="1.9193%" y="53" width="0.0368%" height="15" fill="rgb(206,95,19)" fg:x="3441" fg:w="66"/><text x="2.2122%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.08%)</title><rect x="1.9131%" y="69" width="0.0820%" height="15" fill="rgb(241,203,37)" fg:x="3430" fg:w="147"/><text x="2.2061%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.12%)</title><rect x="1.9131%" y="85" width="0.1182%" height="15" fill="rgb(221,113,31)" fg:x="3430" fg:w="212"/><text x="2.2061%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.12%)</title><rect x="1.9131%" y="101" width="0.1238%" height="15" fill="rgb(223,8,3)" fg:x="3430" fg:w="222"/><text x="2.2061%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.26%)</title><rect x="1.8585%" y="117" width="0.2571%" height="15" fill="rgb(220,38,1)" fg:x="3332" fg:w="461"/><text x="2.1514%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 0.39%)</title><rect x="1.8077%" y="133" width="0.3888%" height="15" fill="rgb(222,140,38)" fg:x="3241" fg:w="697"/><text x="2.1007%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="2.1965%" y="133" width="0.0530%" height="15" fill="rgb(229,123,23)" fg:x="3938" fg:w="95"/><text x="2.4894%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="2.2495%" y="133" width="0.0351%" height="15" fill="rgb(215,202,9)" fg:x="4033" fg:w="63"/><text x="2.5424%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="2.2846%" y="117" width="0.0457%" height="15" fill="rgb(206,73,16)" fg:x="4096" fg:w="82"/><text x="2.5776%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.05%)</title><rect x="2.3303%" y="117" width="0.0530%" height="15" fill="rgb(236,227,28)" fg:x="4178" fg:w="95"/><text x="2.6233%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.3833%" y="117" width="0.0424%" height="15" fill="rgb(234,116,9)" fg:x="4273" fg:w="76"/><text x="2.6763%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.18%)</title><rect x="2.2846%" y="133" width="0.1841%" height="15" fill="rgb(221,169,45)" fg:x="4096" fg:w="330"/><text x="2.5776%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.4687%" y="133" width="0.0508%" height="15" fill="rgb(234,187,51)" fg:x="4426" fg:w="91"/><text x="2.7616%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,980 instructions, 1.10%)</title><rect x="1.5517%" y="149" width="1.1044%" height="15" fill="rgb(206,8,23)" fg:x="2782" fg:w="1980"/><text x="1.8447%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.6561%" y="149" width="0.0424%" height="15" fill="rgb(246,180,9)" fg:x="4762" fg:w="76"/><text x="2.9490%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.01%)</title><rect x="2.7202%" y="149" width="0.0100%" height="15" fill="rgb(236,198,30)" fg:x="4877" fg:w="18"/><text x="3.0132%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7302%" y="133" width="0.0508%" height="15" fill="rgb(208,18,12)" fg:x="4895" fg:w="91"/><text x="3.0232%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.10%)</title><rect x="2.7302%" y="149" width="0.1043%" height="15" fill="rgb(235,145,50)" fg:x="4895" fg:w="187"/><text x="3.0232%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.8345%" y="101" width="0.0508%" height="15" fill="rgb(226,181,37)" fg:x="5082" fg:w="91"/><text x="3.1275%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.06%)</title><rect x="2.8345%" y="117" width="0.0591%" height="15" fill="rgb(250,208,54)" fg:x="5082" fg:w="106"/><text x="3.1275%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.08%)</title><rect x="2.8345%" y="133" width="0.0837%" height="15" fill="rgb(253,138,32)" fg:x="5082" fg:w="150"/><text x="3.1275%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (232 instructions, 0.13%)</title><rect x="2.8345%" y="149" width="0.1294%" height="15" fill="rgb(248,65,13)" fg:x="5082" fg:w="232"/><text x="3.1275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.9639%" y="149" width="0.0508%" height="15" fill="rgb(215,87,15)" fg:x="5314" fg:w="91"/><text x="3.2569%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="3.0147%" y="149" width="0.0480%" height="15" fill="rgb(240,81,48)" fg:x="5405" fg:w="86"/><text x="3.3077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0627%" y="149" width="0.0508%" height="15" fill="rgb(239,55,28)" fg:x="5491" fg:w="91"/><text x="3.3556%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.1134%" y="149" width="0.0508%" height="15" fill="rgb(208,173,49)" fg:x="5582" fg:w="91"/><text x="3.4064%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="3.1664%" y="149" width="0.0480%" height="15" fill="rgb(231,194,47)" fg:x="5677" fg:w="86"/><text x="3.4594%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.2144%" y="149" width="0.2387%" height="15" fill="rgb(236,77,22)" fg:x="5763" fg:w="428"/><text x="3.5074%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.4531%" y="149" width="0.2387%" height="15" fill="rgb(220,5,12)" fg:x="6191" fg:w="428"/><text x="3.7461%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,453 instructions, 4.16%)</title><rect x="0.1746%" y="165" width="4.1570%" height="15" fill="rgb(238,197,28)" fg:x="313" fg:w="7453"/><text x="0.4675%" y="175.50">cand..</text></g><g><title>memcpy (380 instructions, 0.21%)</title><rect x="4.3316%" y="165" width="0.2119%" height="15" fill="rgb(241,57,26)" fg:x="7766" fg:w="380"/><text x="4.6245%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.04%)</title><rect x="4.5435%" y="165" width="0.0351%" height="15" fill="rgb(211,44,38)" fg:x="8146" fg:w="63"/><text x="4.8365%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.5787%" y="165" width="0.0508%" height="15" fill="rgb(228,50,20)" fg:x="8209" fg:w="91"/><text x="4.8716%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="4.6372%" y="133" width="0.0329%" height="15" fill="rgb(226,224,47)" fg:x="8314" fg:w="59"/><text x="4.9302%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="4.6701%" y="133" width="0.0524%" height="15" fill="rgb(246,227,20)" fg:x="8373" fg:w="94"/><text x="4.9631%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="4.7226%" y="133" width="0.0965%" height="15" fill="rgb(218,81,50)" fg:x="8467" fg:w="173"/><text x="5.0155%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="4.6372%" y="149" width="0.3229%" height="15" fill="rgb(230,162,41)" fg:x="8314" fg:w="579"/><text x="4.9302%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.46%)</title><rect x="4.6294%" y="165" width="0.4579%" height="15" fill="rgb(215,31,5)" fg:x="8300" fg:w="821"/><text x="4.9224%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="5.0873%" y="165" width="0.0508%" height="15" fill="rgb(218,211,53)" fg:x="9121" fg:w="91"/><text x="5.3803%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.1459%" y="133" width="0.0329%" height="15" fill="rgb(226,49,13)" fg:x="9226" fg:w="59"/><text x="5.4389%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="5.1788%" y="133" width="0.0524%" height="15" fill="rgb(253,136,31)" fg:x="9285" fg:w="94"/><text x="5.4718%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="5.2312%" y="133" width="0.0965%" height="15" fill="rgb(250,25,24)" fg:x="9379" fg:w="173"/><text x="5.5242%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="5.1459%" y="149" width="0.3229%" height="15" fill="rgb(215,183,18)" fg:x="9226" fg:w="579"/><text x="5.4389%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.04%)</title><rect x="5.4689%" y="149" width="0.0429%" height="15" fill="rgb(243,150,4)" fg:x="9805" fg:w="77"/><text x="5.7618%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="5.5118%" y="133" width="0.0480%" height="15" fill="rgb(235,89,8)" fg:x="9882" fg:w="86"/><text x="5.8048%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.07%)</title><rect x="5.5118%" y="149" width="0.0675%" height="15" fill="rgb(250,210,51)" fg:x="9882" fg:w="121"/><text x="5.8048%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 0.55%)</title><rect x="5.1381%" y="165" width="0.5500%" height="15" fill="rgb(238,196,29)" fg:x="9212" fg:w="986"/><text x="5.4311%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.6881%" y="117" width="0.0329%" height="15" fill="rgb(243,217,54)" fg:x="10198" fg:w="59"/><text x="5.9810%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.05%)</title><rect x="5.6881%" y="133" width="0.0524%" height="15" fill="rgb(247,215,18)" fg:x="10198" fg:w="94"/><text x="5.9810%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.18%)</title><rect x="5.6881%" y="149" width="0.1757%" height="15" fill="rgb(229,75,50)" fg:x="10198" fg:w="315"/><text x="5.9810%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.896 (18 instructions, 0.01%)</title><rect x="5.8637%" y="149" width="0.0100%" height="15" fill="rgb(208,14,50)" fg:x="10513" fg:w="18"/><text x="6.1567%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.31%)</title><rect x="5.6881%" y="165" width="0.3073%" height="15" fill="rgb(216,12,15)" fg:x="10198" fg:w="551"/><text x="5.9810%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.03%)</title><rect x="5.9954%" y="165" width="0.0296%" height="15" fill="rgb(244,63,28)" fg:x="10749" fg:w="53"/><text x="6.2884%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.07%)</title><rect x="6.0249%" y="149" width="0.0736%" height="15" fill="rgb(215,14,44)" fg:x="10802" fg:w="132"/><text x="6.3179%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.07%)</title><rect x="6.1181%" y="149" width="0.0736%" height="15" fill="rgb(249,123,14)" fg:x="10969" fg:w="132"/><text x="6.4111%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.19%)</title><rect x="6.0249%" y="165" width="0.1863%" height="15" fill="rgb(231,105,44)" fg:x="10802" fg:w="334"/><text x="6.3179%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.02%)</title><rect x="6.2112%" y="149" width="0.0190%" height="15" fill="rgb(207,143,49)" fg:x="11136" fg:w="34"/><text x="6.5042%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (18 instructions, 0.01%)</title><rect x="6.2302%" y="149" width="0.0100%" height="15" fill="rgb(219,92,41)" fg:x="11170" fg:w="18"/><text x="6.5232%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (18 instructions, 0.01%)</title><rect x="6.2402%" y="149" width="0.0100%" height="15" fill="rgb(227,26,30)" fg:x="11188" fg:w="18"/><text x="6.5332%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.09%)</title><rect x="6.2112%" y="165" width="0.0943%" height="15" fill="rgb(230,132,27)" fg:x="11136" fg:w="169"/><text x="6.5042%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.25%)</title><rect x="6.3273%" y="165" width="0.2454%" height="15" fill="rgb(228,70,15)" fg:x="11344" fg:w="440"/><text x="6.6202%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.01%)</title><rect x="6.5727%" y="133" width="0.0106%" height="15" fill="rgb(245,16,48)" fg:x="11784" fg:w="19"/><text x="6.8656%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.10%)</title><rect x="6.5833%" y="133" width="0.1010%" height="15" fill="rgb(208,32,37)" fg:x="11803" fg:w="181"/><text x="6.8762%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="6.6842%" y="101" width="0.0374%" height="15" fill="rgb(235,229,16)" fg:x="11984" fg:w="67"/><text x="6.9772%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.13%)</title><rect x="6.6842%" y="117" width="0.1283%" height="15" fill="rgb(243,104,54)" fg:x="11984" fg:w="230"/><text x="6.9772%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265 instructions, 0.15%)</title><rect x="6.6842%" y="133" width="0.1478%" height="15" fill="rgb(230,98,8)" fg:x="11984" fg:w="265"/><text x="6.9772%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (540 instructions, 0.30%)</title><rect x="6.5727%" y="149" width="0.3012%" height="15" fill="rgb(214,197,36)" fg:x="11784" fg:w="540"/><text x="6.8656%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (589 instructions, 0.33%)</title><rect x="6.5727%" y="165" width="0.3285%" height="15" fill="rgb(243,93,41)" fg:x="11784" fg:w="589"/><text x="6.8656%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="6.9012%" y="149" width="0.0346%" height="15" fill="rgb(208,98,54)" fg:x="12373" fg:w="62"/><text x="7.1942%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="6.9358%" y="149" width="0.0374%" height="15" fill="rgb(231,162,41)" fg:x="12435" fg:w="67"/><text x="7.2287%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.13%)</title><rect x="6.9012%" y="165" width="0.1272%" height="15" fill="rgb(213,39,23)" fg:x="12373" fg:w="228"/><text x="7.1942%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,847 instructions, 7.72%)</title><rect x="0.1238%" y="181" width="7.7233%" height="15" fill="rgb(216,86,6)" fg:x="222" fg:w="13847"/><text x="0.4168%" y="191.50">ic_cdk::a..</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (25 instructions, 0.01%)</title><rect x="7.8472%" y="181" width="0.0139%" height="15" fill="rgb(233,59,20)" fg:x="14069" fg:w="25"/><text x="8.1401%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="7.8611%" y="165" width="0.1093%" height="15" fill="rgb(215,210,23)" fg:x="14094" fg:w="196"/><text x="8.1541%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="7.9704%" y="133" width="1.7625%" height="15" fill="rgb(225,38,5)" fg:x="14290" fg:w="3160"/><text x="8.2634%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="7.9704%" y="149" width="1.8177%" height="15" fill="rgb(212,200,33)" fg:x="14290" fg:w="3259"/><text x="8.2634%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="9.7882%" y="149" width="0.0786%" height="15" fill="rgb(234,216,43)" fg:x="17549" fg:w="141"/><text x="10.0811%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="9.8668%" y="149" width="1.7625%" height="15" fill="rgb(214,169,49)" fg:x="17690" fg:w="3160"/><text x="10.1598%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="7.9704%" y="165" width="3.8541%" height="15" fill="rgb(236,55,46)" fg:x="14290" fg:w="6910"/><text x="8.2634%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="11.8658%" y="165" width="0.1093%" height="15" fill="rgb(233,145,52)" fg:x="21274" fg:w="196"/><text x="12.1588%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="11.9751%" y="133" width="1.7625%" height="15" fill="rgb(232,91,9)" fg:x="21470" fg:w="3160"/><text x="12.2681%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="11.9751%" y="149" width="1.8177%" height="15" fill="rgb(221,137,9)" fg:x="21470" fg:w="3259"/><text x="12.2681%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="13.7929%" y="149" width="0.0786%" height="15" fill="rgb(253,71,52)" fg:x="24729" fg:w="141"/><text x="14.0859%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="13.8715%" y="149" width="1.7625%" height="15" fill="rgb(233,91,17)" fg:x="24870" fg:w="3160"/><text x="14.1645%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="11.9751%" y="165" width="3.8541%" height="15" fill="rgb(230,113,15)" fg:x="21470" fg:w="6910"/><text x="12.2681%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="15.8706%" y="165" width="0.1093%" height="15" fill="rgb(242,119,25)" fg:x="28454" fg:w="196"/><text x="16.1635%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="15.9799%" y="165" width="0.1406%" height="15" fill="rgb(241,171,24)" fg:x="28650" fg:w="252"/><text x="16.2728%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="16.1617%" y="165" width="0.1093%" height="15" fill="rgb(236,5,48)" fg:x="28976" fg:w="196"/><text x="16.4547%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="16.2710%" y="133" width="1.7625%" height="15" fill="rgb(244,139,25)" fg:x="29172" fg:w="3160"/><text x="16.5640%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="16.2710%" y="149" width="1.8177%" height="15" fill="rgb(230,177,46)" fg:x="29172" fg:w="3259"/><text x="16.5640%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="18.0888%" y="149" width="0.0786%" height="15" fill="rgb(231,149,19)" fg:x="32431" fg:w="141"/><text x="18.3817%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="18.1674%" y="149" width="1.7625%" height="15" fill="rgb(234,154,20)" fg:x="32572" fg:w="3160"/><text x="18.4604%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="16.2710%" y="165" width="3.8541%" height="15" fill="rgb(254,199,42)" fg:x="29172" fg:w="6910"/><text x="16.5640%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="20.1664%" y="165" width="0.1093%" height="15" fill="rgb(213,136,11)" fg:x="36156" fg:w="196"/><text x="20.4594%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="20.2758%" y="133" width="1.7625%" height="15" fill="rgb(208,170,47)" fg:x="36352" fg:w="3160"/><text x="20.5687%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="20.2758%" y="149" width="1.8177%" height="15" fill="rgb(249,99,4)" fg:x="36352" fg:w="3259"/><text x="20.5687%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="22.0935%" y="149" width="0.0786%" height="15" fill="rgb(211,23,9)" fg:x="39611" fg:w="141"/><text x="22.3865%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="22.1721%" y="149" width="1.7625%" height="15" fill="rgb(251,141,23)" fg:x="39752" fg:w="3160"/><text x="22.4651%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="20.2758%" y="165" width="3.8541%" height="15" fill="rgb(222,119,29)" fg:x="36352" fg:w="6910"/><text x="20.5687%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.1712%" y="165" width="0.1093%" height="15" fill="rgb(223,161,42)" fg:x="43336" fg:w="196"/><text x="24.4641%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="24.2805%" y="165" width="0.1768%" height="15" fill="rgb(213,203,13)" fg:x="43532" fg:w="317"/><text x="24.5735%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.4986%" y="165" width="0.1093%" height="15" fill="rgb(240,4,33)" fg:x="43923" fg:w="196"/><text x="24.7915%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="24.6079%" y="165" width="0.1406%" height="15" fill="rgb(211,37,28)" fg:x="44119" fg:w="252"/><text x="24.9009%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.7897%" y="165" width="0.1093%" height="15" fill="rgb(218,6,6)" fg:x="44445" fg:w="196"/><text x="25.0827%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="24.8990%" y="133" width="1.7625%" height="15" fill="rgb(231,131,13)" fg:x="44641" fg:w="3160"/><text x="25.1920%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="24.8990%" y="149" width="1.8177%" height="15" fill="rgb(240,170,45)" fg:x="44641" fg:w="3259"/><text x="25.1920%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="26.7168%" y="149" width="0.0786%" height="15" fill="rgb(238,214,12)" fg:x="47900" fg:w="141"/><text x="27.0098%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="26.7954%" y="149" width="1.7625%" height="15" fill="rgb(231,88,16)" fg:x="48041" fg:w="3160"/><text x="27.0884%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="24.8990%" y="165" width="3.8541%" height="15" fill="rgb(243,164,40)" fg:x="44641" fg:w="6910"/><text x="25.1920%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="28.7945%" y="165" width="0.1093%" height="15" fill="rgb(213,44,45)" fg:x="51625" fg:w="196"/><text x="29.0874%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="28.9038%" y="133" width="1.7625%" height="15" fill="rgb(243,95,24)" fg:x="51821" fg:w="3160"/><text x="29.1967%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="28.9038%" y="149" width="1.8177%" height="15" fill="rgb(206,137,8)" fg:x="51821" fg:w="3259"/><text x="29.1967%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="30.7215%" y="149" width="0.0786%" height="15" fill="rgb(250,38,33)" fg:x="55080" fg:w="141"/><text x="31.0145%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="30.8002%" y="149" width="1.7625%" height="15" fill="rgb(205,103,1)" fg:x="55221" fg:w="3160"/><text x="31.0931%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="28.9038%" y="165" width="3.8541%" height="15" fill="rgb(249,29,26)" fg:x="51821" fg:w="6910"/><text x="29.1967%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="32.7992%" y="165" width="0.1093%" height="15" fill="rgb(209,187,53)" fg:x="58805" fg:w="196"/><text x="33.0922%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="32.9085%" y="133" width="1.7625%" height="15" fill="rgb(225,29,18)" fg:x="59001" fg:w="3160"/><text x="33.2015%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="32.9085%" y="149" width="1.8177%" height="15" fill="rgb(208,63,8)" fg:x="59001" fg:w="3259"/><text x="33.2015%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="34.7263%" y="149" width="0.0786%" height="15" fill="rgb(213,215,46)" fg:x="62260" fg:w="141"/><text x="35.0192%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="34.8049%" y="149" width="1.7625%" height="15" fill="rgb(238,19,30)" fg:x="62401" fg:w="3160"/><text x="35.0979%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="32.9085%" y="165" width="3.8541%" height="15" fill="rgb(234,221,46)" fg:x="59001" fg:w="6910"/><text x="33.2015%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="36.8039%" y="165" width="0.1093%" height="15" fill="rgb(219,50,44)" fg:x="65985" fg:w="196"/><text x="37.0969%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="36.9132%" y="165" width="0.1406%" height="15" fill="rgb(239,32,21)" fg:x="66181" fg:w="252"/><text x="37.2062%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.0951%" y="165" width="0.1093%" height="15" fill="rgb(250,209,23)" fg:x="66507" fg:w="196"/><text x="37.3880%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.2044%" y="165" width="0.1406%" height="15" fill="rgb(222,218,45)" fg:x="66703" fg:w="252"/><text x="37.4974%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.3862%" y="165" width="0.1093%" height="15" fill="rgb(252,125,7)" fg:x="67029" fg:w="196"/><text x="37.6792%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.4955%" y="165" width="0.1406%" height="15" fill="rgb(239,64,26)" fg:x="67225" fg:w="252"/><text x="37.7885%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.6774%" y="165" width="0.1093%" height="15" fill="rgb(220,195,48)" fg:x="67551" fg:w="196"/><text x="37.9703%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="37.7867%" y="133" width="1.7625%" height="15" fill="rgb(239,39,43)" fg:x="67747" fg:w="3160"/><text x="38.0797%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="37.7867%" y="149" width="1.8177%" height="15" fill="rgb(217,52,15)" fg:x="67747" fg:w="3259"/><text x="38.0797%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="39.6044%" y="149" width="0.0786%" height="15" fill="rgb(225,44,24)" fg:x="71006" fg:w="141"/><text x="39.8974%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="39.6831%" y="149" width="1.7625%" height="15" fill="rgb(236,228,49)" fg:x="71147" fg:w="3160"/><text x="39.9760%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="37.7867%" y="165" width="3.8541%" height="15" fill="rgb(242,203,24)" fg:x="67747" fg:w="6910"/><text x="38.0797%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.6821%" y="165" width="0.1093%" height="15" fill="rgb(219,144,48)" fg:x="74731" fg:w="196"/><text x="41.9751%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="41.7914%" y="165" width="0.1406%" height="15" fill="rgb(243,16,5)" fg:x="74927" fg:w="252"/><text x="42.0844%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.9732%" y="165" width="0.1093%" height="15" fill="rgb(245,221,28)" fg:x="75253" fg:w="196"/><text x="42.2662%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.0826%" y="165" width="0.1406%" height="15" fill="rgb(254,207,2)" fg:x="75449" fg:w="252"/><text x="42.3755%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.2644%" y="165" width="0.1093%" height="15" fill="rgb(221,104,30)" fg:x="75775" fg:w="196"/><text x="42.5574%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.3737%" y="165" width="0.1406%" height="15" fill="rgb(248,185,12)" fg:x="75971" fg:w="252"/><text x="42.6667%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.5556%" y="165" width="0.1093%" height="15" fill="rgb(207,182,17)" fg:x="76297" fg:w="196"/><text x="42.8485%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.6649%" y="165" width="0.1406%" height="15" fill="rgb(242,135,45)" fg:x="76493" fg:w="252"/><text x="42.9578%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.8467%" y="165" width="0.1093%" height="15" fill="rgb(235,106,54)" fg:x="76819" fg:w="196"/><text x="43.1397%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="42.9560%" y="165" width="0.1768%" height="15" fill="rgb(230,150,46)" fg:x="77015" fg:w="317"/><text x="43.2490%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="43.1741%" y="165" width="0.1093%" height="15" fill="rgb(242,222,32)" fg:x="77406" fg:w="196"/><text x="43.4671%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="43.2834%" y="133" width="1.7625%" height="15" fill="rgb(212,140,53)" fg:x="77602" fg:w="3160"/><text x="43.5764%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="43.2834%" y="149" width="1.8177%" height="15" fill="rgb(223,29,48)" fg:x="77602" fg:w="3259"/><text x="43.5764%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="45.1012%" y="149" width="0.0786%" height="15" fill="rgb(226,220,47)" fg:x="80861" fg:w="141"/><text x="45.3941%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="45.1798%" y="149" width="1.7625%" height="15" fill="rgb(229,19,19)" fg:x="81002" fg:w="3160"/><text x="45.4728%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="43.2834%" y="165" width="3.8541%" height="15" fill="rgb(238,168,14)" fg:x="77602" fg:w="6910"/><text x="43.5764%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="47.1788%" y="165" width="0.1093%" height="15" fill="rgb(239,29,0)" fg:x="84586" fg:w="196"/><text x="47.4718%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="47.2882%" y="133" width="1.7625%" height="15" fill="rgb(244,134,18)" fg:x="84782" fg:w="3160"/><text x="47.5811%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="47.2882%" y="149" width="1.8177%" height="15" fill="rgb(234,65,24)" fg:x="84782" fg:w="3259"/><text x="47.5811%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="49.1059%" y="149" width="0.0786%" height="15" fill="rgb(210,100,0)" fg:x="88041" fg:w="141"/><text x="49.3989%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="49.1846%" y="149" width="1.7625%" height="15" fill="rgb(249,6,11)" fg:x="88182" fg:w="3160"/><text x="49.4775%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="47.2882%" y="165" width="3.8541%" height="15" fill="rgb(244,198,13)" fg:x="84782" fg:w="6910"/><text x="47.5811%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.1836%" y="165" width="0.1093%" height="15" fill="rgb(246,98,14)" fg:x="91766" fg:w="196"/><text x="51.4765%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.2929%" y="165" width="0.1768%" height="15" fill="rgb(205,112,2)" fg:x="91962" fg:w="317"/><text x="51.5859%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.5110%" y="165" width="0.1093%" height="15" fill="rgb(246,221,10)" fg:x="92353" fg:w="196"/><text x="51.8039%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.6203%" y="165" width="0.1768%" height="15" fill="rgb(215,47,36)" fg:x="92549" fg:w="317"/><text x="51.9133%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.8384%" y="165" width="0.1093%" height="15" fill="rgb(230,38,49)" fg:x="92940" fg:w="196"/><text x="52.1314%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="51.9477%" y="165" width="0.1406%" height="15" fill="rgb(254,218,3)" fg:x="93136" fg:w="252"/><text x="52.2407%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.1295%" y="165" width="0.1093%" height="15" fill="rgb(229,36,23)" fg:x="93462" fg:w="196"/><text x="52.4225%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.2389%" y="165" width="0.1406%" height="15" fill="rgb(229,115,43)" fg:x="93658" fg:w="252"/><text x="52.5318%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.4207%" y="165" width="0.1093%" height="15" fill="rgb(237,52,19)" fg:x="93984" fg:w="196"/><text x="52.7137%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="52.5300%" y="165" width="0.1768%" height="15" fill="rgb(214,144,40)" fg:x="94180" fg:w="317"/><text x="52.8230%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.7481%" y="165" width="0.1093%" height="15" fill="rgb(242,63,19)" fg:x="94571" fg:w="196"/><text x="53.0411%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.8574%" y="165" width="0.1406%" height="15" fill="rgb(206,94,30)" fg:x="94767" fg:w="252"/><text x="53.1504%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.0392%" y="165" width="0.1093%" height="15" fill="rgb(208,218,53)" fg:x="95093" fg:w="196"/><text x="53.3322%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="53.1486%" y="165" width="0.1406%" height="15" fill="rgb(226,142,24)" fg:x="95289" fg:w="252"/><text x="53.4415%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.3304%" y="165" width="0.1093%" height="15" fill="rgb(213,226,17)" fg:x="95615" fg:w="196"/><text x="53.6234%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="53.4397%" y="133" width="1.7625%" height="15" fill="rgb(210,196,35)" fg:x="95811" fg:w="3160"/><text x="53.7327%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="53.4397%" y="149" width="1.8177%" height="15" fill="rgb(243,180,23)" fg:x="95811" fg:w="3259"/><text x="53.7327%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="55.2575%" y="149" width="0.0786%" height="15" fill="rgb(224,81,36)" fg:x="99070" fg:w="141"/><text x="55.5504%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="55.3361%" y="149" width="1.7625%" height="15" fill="rgb(230,88,30)" fg:x="99211" fg:w="3160"/><text x="55.6291%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="53.4397%" y="165" width="3.8541%" height="15" fill="rgb(247,225,2)" fg:x="95811" fg:w="6910"/><text x="53.7327%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.3351%" y="165" width="0.1093%" height="15" fill="rgb(211,209,10)" fg:x="102795" fg:w="196"/><text x="57.6281%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="57.4444%" y="165" width="0.1406%" height="15" fill="rgb(208,32,41)" fg:x="102991" fg:w="252"/><text x="57.7374%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.6263%" y="165" width="0.1093%" height="15" fill="rgb(221,198,6)" fg:x="103317" fg:w="196"/><text x="57.9192%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="57.7356%" y="165" width="0.1768%" height="15" fill="rgb(251,221,45)" fg:x="103513" fg:w="317"/><text x="58.0286%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.9537%" y="165" width="0.1093%" height="15" fill="rgb(245,228,53)" fg:x="103904" fg:w="196"/><text x="58.2467%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="58.0630%" y="165" width="0.1406%" height="15" fill="rgb(254,125,48)" fg:x="104100" fg:w="252"/><text x="58.3560%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.2448%" y="165" width="0.1093%" height="15" fill="rgb(253,55,3)" fg:x="104426" fg:w="196"/><text x="58.5378%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="58.3542%" y="133" width="1.7625%" height="15" fill="rgb(244,68,2)" fg:x="104622" fg:w="3160"/><text x="58.6471%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="58.3542%" y="149" width="1.8177%" height="15" fill="rgb(224,197,50)" fg:x="104622" fg:w="3259"/><text x="58.6471%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="60.1719%" y="149" width="0.0786%" height="15" fill="rgb(236,206,6)" fg:x="107881" fg:w="141"/><text x="60.4649%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="60.2505%" y="149" width="1.7625%" height="15" fill="rgb(252,67,16)" fg:x="108022" fg:w="3160"/><text x="60.5435%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="58.3542%" y="165" width="3.8541%" height="15" fill="rgb(229,119,39)" fg:x="104622" fg:w="6910"/><text x="58.6471%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="62.2496%" y="165" width="0.1093%" height="15" fill="rgb(209,189,47)" fg:x="111606" fg:w="196"/><text x="62.5425%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="62.3589%" y="133" width="1.7625%" height="15" fill="rgb(236,22,42)" fg:x="111802" fg:w="3160"/><text x="62.6519%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="62.3589%" y="149" width="1.8177%" height="15" fill="rgb(241,45,4)" fg:x="111802" fg:w="3259"/><text x="62.6519%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="64.1766%" y="149" width="0.0786%" height="15" fill="rgb(210,169,14)" fg:x="115061" fg:w="141"/><text x="64.4696%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="64.2553%" y="149" width="1.7625%" height="15" fill="rgb(222,189,6)" fg:x="115202" fg:w="3160"/><text x="64.5482%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="62.3589%" y="165" width="3.8541%" height="15" fill="rgb(248,171,14)" fg:x="111802" fg:w="6910"/><text x="62.6519%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.2543%" y="165" width="0.1093%" height="15" fill="rgb(213,50,41)" fg:x="118786" fg:w="196"/><text x="66.5473%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="66.3636%" y="165" width="0.1406%" height="15" fill="rgb(249,31,8)" fg:x="118982" fg:w="252"/><text x="66.6566%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.5454%" y="165" width="0.1093%" height="15" fill="rgb(218,133,35)" fg:x="119308" fg:w="196"/><text x="66.8384%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="66.6548%" y="165" width="0.1768%" height="15" fill="rgb(230,129,21)" fg:x="119504" fg:w="317"/><text x="66.9477%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.8729%" y="165" width="0.1093%" height="15" fill="rgb(249,205,35)" fg:x="119895" fg:w="196"/><text x="67.1658%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="66.9822%" y="133" width="1.7625%" height="15" fill="rgb(250,111,33)" fg:x="120091" fg:w="3160"/><text x="67.2751%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="66.9822%" y="149" width="1.8177%" height="15" fill="rgb(207,125,33)" fg:x="120091" fg:w="3259"/><text x="67.2751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="68.7999%" y="149" width="0.0786%" height="15" fill="rgb(205,158,49)" fg:x="123350" fg:w="141"/><text x="69.0929%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="68.8786%" y="149" width="1.7625%" height="15" fill="rgb(211,37,9)" fg:x="123491" fg:w="3160"/><text x="69.1715%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,975 instructions, 3.89%)</title><rect x="66.9822%" y="165" width="3.8904%" height="15" fill="rgb(244,190,38)" fg:x="120091" fg:w="6975"/><text x="67.2751%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="70.9138%" y="165" width="0.1093%" height="15" fill="rgb(247,66,54)" fg:x="127140" fg:w="196"/><text x="71.2068%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="71.0232%" y="133" width="1.7625%" height="15" fill="rgb(214,61,14)" fg:x="127336" fg:w="3160"/><text x="71.3161%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="71.0232%" y="149" width="1.8177%" height="15" fill="rgb(230,184,34)" fg:x="127336" fg:w="3259"/><text x="71.3161%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="72.8409%" y="149" width="0.0786%" height="15" fill="rgb(245,95,5)" fg:x="130595" fg:w="141"/><text x="73.1339%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="72.9195%" y="149" width="1.7625%" height="15" fill="rgb(210,180,42)" fg:x="130736" fg:w="3160"/><text x="73.2125%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="71.0232%" y="165" width="3.8541%" height="15" fill="rgb(253,100,26)" fg:x="127336" fg:w="6910"/><text x="71.3161%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="74.9186%" y="165" width="0.1093%" height="15" fill="rgb(230,65,34)" fg:x="134320" fg:w="196"/><text x="75.2115%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="75.0279%" y="165" width="0.1406%" height="15" fill="rgb(242,63,50)" fg:x="134516" fg:w="252"/><text x="75.3209%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.2097%" y="165" width="0.1093%" height="15" fill="rgb(218,140,21)" fg:x="134842" fg:w="196"/><text x="75.5027%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="75.3190%" y="165" width="0.1768%" height="15" fill="rgb(235,137,39)" fg:x="135038" fg:w="317"/><text x="75.6120%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.5371%" y="165" width="0.1093%" height="15" fill="rgb(237,193,10)" fg:x="135429" fg:w="196"/><text x="75.8301%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="75.6464%" y="133" width="1.7625%" height="15" fill="rgb(229,23,16)" fg:x="135625" fg:w="3160"/><text x="75.9394%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="75.6464%" y="149" width="1.8177%" height="15" fill="rgb(253,89,41)" fg:x="135625" fg:w="3259"/><text x="75.9394%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="77.4642%" y="149" width="0.0786%" height="15" fill="rgb(227,64,35)" fg:x="138884" fg:w="141"/><text x="77.7572%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="77.5428%" y="149" width="1.7625%" height="15" fill="rgb(223,175,45)" fg:x="139025" fg:w="3160"/><text x="77.8358%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="75.6464%" y="165" width="3.8541%" height="15" fill="rgb(229,156,35)" fg:x="135625" fg:w="6910"/><text x="75.9394%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="79.5419%" y="165" width="0.1093%" height="15" fill="rgb(211,145,17)" fg:x="142609" fg:w="196"/><text x="79.8348%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="79.6512%" y="133" width="1.7625%" height="15" fill="rgb(249,73,13)" fg:x="142805" fg:w="3160"/><text x="79.9441%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="79.6512%" y="149" width="1.8177%" height="15" fill="rgb(219,49,36)" fg:x="142805" fg:w="3259"/><text x="79.9441%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="81.4689%" y="149" width="0.0786%" height="15" fill="rgb(254,203,34)" fg:x="146064" fg:w="141"/><text x="81.7619%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="81.5476%" y="149" width="1.7625%" height="15" fill="rgb(218,113,39)" fg:x="146205" fg:w="3160"/><text x="81.8405%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="79.6512%" y="165" width="3.8541%" height="15" fill="rgb(249,142,5)" fg:x="142805" fg:w="6910"/><text x="79.9441%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.5466%" y="165" width="0.1093%" height="15" fill="rgb(239,224,23)" fg:x="149789" fg:w="196"/><text x="83.8396%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="83.6559%" y="165" width="0.1768%" height="15" fill="rgb(222,13,43)" fg:x="149985" fg:w="317"/><text x="83.9489%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.8740%" y="165" width="0.1093%" height="15" fill="rgb(216,139,49)" fg:x="150376" fg:w="196"/><text x="84.1670%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="83.9833%" y="165" width="0.1406%" height="15" fill="rgb(248,90,43)" fg:x="150572" fg:w="252"/><text x="84.2763%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="84.1651%" y="165" width="0.1093%" height="15" fill="rgb(227,177,23)" fg:x="150898" fg:w="196"/><text x="84.4581%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="84.2745%" y="133" width="1.7625%" height="15" fill="rgb(237,229,48)" fg:x="151094" fg:w="3160"/><text x="84.5674%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="84.2745%" y="149" width="1.8177%" height="15" fill="rgb(217,73,7)" fg:x="151094" fg:w="3259"/><text x="84.5674%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="86.0922%" y="149" width="0.0786%" height="15" fill="rgb(247,220,24)" fg:x="154353" fg:w="141"/><text x="86.3852%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="86.1709%" y="149" width="1.7625%" height="15" fill="rgb(238,48,18)" fg:x="154494" fg:w="3160"/><text x="86.4638%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="84.2745%" y="165" width="3.8541%" height="15" fill="rgb(248,12,26)" fg:x="151094" fg:w="6910"/><text x="84.5674%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.1699%" y="165" width="0.1093%" height="15" fill="rgb(251,141,17)" fg:x="158078" fg:w="196"/><text x="88.4628%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="88.2792%" y="165" width="0.1768%" height="15" fill="rgb(243,193,48)" fg:x="158274" fg:w="317"/><text x="88.5722%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.4973%" y="165" width="0.1093%" height="15" fill="rgb(239,176,0)" fg:x="158665" fg:w="196"/><text x="88.7902%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="88.6066%" y="133" width="1.7625%" height="15" fill="rgb(234,118,44)" fg:x="158861" fg:w="3160"/><text x="88.8996%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="88.6066%" y="149" width="1.8177%" height="15" fill="rgb(252,40,11)" fg:x="158861" fg:w="3259"/><text x="88.8996%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="90.4243%" y="149" width="0.0786%" height="15" fill="rgb(212,117,39)" fg:x="162120" fg:w="141"/><text x="90.7173%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="90.5030%" y="149" width="1.7625%" height="15" fill="rgb(251,5,48)" fg:x="162261" fg:w="3160"/><text x="90.7960%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="88.6066%" y="165" width="3.8541%" height="15" fill="rgb(252,146,1)" fg:x="158861" fg:w="6910"/><text x="88.8996%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.5020%" y="165" width="0.1093%" height="15" fill="rgb(205,1,8)" fg:x="165845" fg:w="196"/><text x="92.7950%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.6113%" y="165" width="0.1406%" height="15" fill="rgb(213,88,28)" fg:x="166041" fg:w="252"/><text x="92.9043%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.7932%" y="165" width="0.1093%" height="15" fill="rgb(234,40,49)" fg:x="166367" fg:w="196"/><text x="93.0861%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.9025%" y="165" width="0.1406%" height="15" fill="rgb(207,186,16)" fg:x="166563" fg:w="252"/><text x="93.1954%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="93.0843%" y="165" width="0.1093%" height="15" fill="rgb(239,72,6)" fg:x="166889" fg:w="196"/><text x="93.3773%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="93.1936%" y="133" width="1.7625%" height="15" fill="rgb(243,225,8)" fg:x="167085" fg:w="3160"/><text x="93.4866%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="93.1936%" y="149" width="1.8177%" height="15" fill="rgb(241,137,7)" fg:x="167085" fg:w="3259"/><text x="93.4866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="95.0114%" y="149" width="0.0786%" height="15" fill="rgb(218,178,29)" fg:x="170344" fg:w="141"/><text x="95.3043%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="95.0900%" y="149" width="1.7625%" height="15" fill="rgb(232,78,26)" fg:x="170485" fg:w="3160"/><text x="95.3830%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="93.1936%" y="165" width="3.8541%" height="15" fill="rgb(225,59,30)" fg:x="167085" fg:w="6910"/><text x="93.4866%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (159,975 instructions, 89.23%)</title><rect x="7.8611%" y="181" width="89.2279%" height="15" fill="rgb(247,11,44)" fg:x="14094" fg:w="159975"/><text x="8.1541%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="97.0968%" y="117" width="0.0346%" height="15" fill="rgb(253,209,43)" fg:x="174083" fg:w="62"/><text x="97.3898%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="97.1314%" y="117" width="0.0374%" height="15" fill="rgb(228,9,33)" fg:x="174145" fg:w="67"/><text x="97.4244%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.13%)</title><rect x="97.0968%" y="133" width="0.1288%" height="15" fill="rgb(236,86,38)" fg:x="174083" fg:w="231"/><text x="97.3898%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (266 instructions, 0.15%)</title><rect x="97.0968%" y="149" width="0.1484%" height="15" fill="rgb(246,100,26)" fg:x="174083" fg:w="266"/><text x="97.3898%" y="159.50"></text></g><g><title>memset (152 instructions, 0.08%)</title><rect x="97.2452%" y="149" width="0.0848%" height="15" fill="rgb(239,118,20)" fg:x="174349" fg:w="152"/><text x="97.5382%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (612 instructions, 0.34%)</title><rect x="97.0890%" y="165" width="0.3414%" height="15" fill="rgb(242,8,43)" fg:x="174069" fg:w="612"/><text x="97.3820%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.29%)</title><rect x="97.4304%" y="149" width="0.2889%" height="15" fill="rgb(205,76,3)" fg:x="174681" fg:w="518"/><text x="97.7234%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="97.7193%" y="69" width="0.0346%" height="15" fill="rgb(242,167,15)" fg:x="175199" fg:w="62"/><text x="98.0123%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (182 instructions, 0.10%)</title><rect x="97.7193%" y="85" width="0.1015%" height="15" fill="rgb(249,164,21)" fg:x="175199" fg:w="182"/><text x="98.0123%" y="95.50"></text></g><g><title>__rust_alloc (197 instructions, 0.11%)</title><rect x="97.7193%" y="101" width="0.1099%" height="15" fill="rgb(215,199,19)" fg:x="175199" fg:w="197"/><text x="98.0123%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (241 instructions, 0.13%)</title><rect x="97.7193%" y="117" width="0.1344%" height="15" fill="rgb(253,191,32)" fg:x="175199" fg:w="241"/><text x="98.0123%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (320 instructions, 0.18%)</title><rect x="97.7193%" y="133" width="0.1785%" height="15" fill="rgb(246,213,51)" fg:x="175199" fg:w="320"/><text x="98.0123%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (538 instructions, 0.30%)</title><rect x="97.7193%" y="149" width="0.3001%" height="15" fill="rgb(206,135,33)" fg:x="175199" fg:w="538"/><text x="98.0123%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.29%)</title><rect x="98.0194%" y="149" width="0.2878%" height="15" fill="rgb(213,204,44)" fg:x="175737" fg:w="516"/><text x="98.3124%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,672 instructions, 0.93%)</title><rect x="97.4304%" y="165" width="0.9326%" height="15" fill="rgb(242,177,53)" fg:x="174681" fg:w="1672"/><text x="97.7234%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="98.3663%" y="165" width="0.0335%" height="15" fill="rgb(227,165,12)" fg:x="176359" fg:w="60"/><text x="98.6593%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,956 instructions, 1.65%)</title><rect x="97.0890%" y="181" width="1.6487%" height="15" fill="rgb(232,133,17)" fg:x="174069" fg:w="2956"/><text x="97.3820%" y="191.50"></text></g><g><title>imrc_hashmap::batch_put_6_::{{closure}} (178,686 instructions, 99.66%)</title><rect x="0.1238%" y="197" width="99.6642%" height="15" fill="rgb(235,24,47)" fg:x="222" fg:w="178686"/><text x="0.4168%" y="207.50">imrc_hashmap::batch_put_6_::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="99.7964%" y="197" width="0.0480%" height="15" fill="rgb(216,180,13)" fg:x="178923" fg:w="86"/><text x="100.0894%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.08%)</title><rect x="99.8444%" y="197" width="0.0753%" height="15" fill="rgb(237,93,47)" fg:x="179009" fg:w="135"/><text x="100.1374%" y="207.50"></text></g><g><title>all (179,288 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,50,26)" fg:x="0" fg:w="179288"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (179,288 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,24,53)" fg:x="0" fg:w="179288"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>