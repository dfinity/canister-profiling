<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="179265"><g><title>ic_cdk::setup (24 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0134%" height="15" fill="rgb(231,185,18)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.07%)</title><rect x="0.0134%" y="197" width="0.0675%" height="15" fill="rgb(243,183,3)" fg:x="24" fg:w="121"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.04%)</title><rect x="0.0809%" y="197" width="0.0430%" height="15" fill="rgb(248,22,54)" fg:x="145" fg:w="77"/><text x="0.3739%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.1238%" y="165" width="0.0508%" height="15" fill="rgb(211,27,22)" fg:x="222" fg:w="91"/><text x="0.4168%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.1746%" y="149" width="0.0457%" height="15" fill="rgb(219,21,25)" fg:x="313" fg:w="82"/><text x="0.4676%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="0.2203%" y="149" width="0.2454%" height="15" fill="rgb(218,96,19)" fg:x="395" fg:w="440"/><text x="0.5133%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="0.4658%" y="149" width="0.0530%" height="15" fill="rgb(253,78,51)" fg:x="835" fg:w="95"/><text x="0.7588%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5188%" y="149" width="0.0335%" height="15" fill="rgb(213,90,50)" fg:x="930" fg:w="60"/><text x="0.8118%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5523%" y="149" width="0.0335%" height="15" fill="rgb(224,22,44)" fg:x="990" fg:w="60"/><text x="0.8452%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5857%" y="149" width="0.0335%" height="15" fill="rgb(232,71,38)" fg:x="1050" fg:w="60"/><text x="0.8787%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.6192%" y="149" width="0.0335%" height="15" fill="rgb(216,41,1)" fg:x="1110" fg:w="60"/><text x="0.9122%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.6527%" y="149" width="0.0457%" height="15" fill="rgb(235,166,38)" fg:x="1170" fg:w="82"/><text x="0.9456%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="0.6984%" y="149" width="0.0390%" height="15" fill="rgb(249,3,4)" fg:x="1252" fg:w="70"/><text x="0.9914%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="0.7375%" y="149" width="0.2454%" height="15" fill="rgb(244,38,41)" fg:x="1322" fg:w="440"/><text x="1.0304%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="0.9829%" y="149" width="0.0106%" height="15" fill="rgb(233,211,6)" fg:x="1762" fg:w="19"/><text x="1.2759%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.9935%" y="133" width="0.0508%" height="15" fill="rgb(245,164,5)" fg:x="1781" fg:w="91"/><text x="1.2865%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.0443%" y="101" width="0.0374%" height="15" fill="rgb(218,122,42)" fg:x="1872" fg:w="67"/><text x="1.3372%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.05%)</title><rect x="1.0443%" y="117" width="0.0547%" height="15" fill="rgb(236,8,10)" fg:x="1872" fg:w="98"/><text x="1.3372%" y="127.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.1051%" y="53" width="0.0195%" height="15" fill="rgb(236,78,24)" fg:x="1981" fg:w="35"/><text x="1.3980%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.04%)</title><rect x="1.1051%" y="69" width="0.0368%" height="15" fill="rgb(234,150,25)" fg:x="1981" fg:w="66"/><text x="1.3980%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.08%)</title><rect x="1.0989%" y="85" width="0.0820%" height="15" fill="rgb(235,169,24)" fg:x="1970" fg:w="147"/><text x="1.3919%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.12%)</title><rect x="1.0989%" y="101" width="0.1183%" height="15" fill="rgb(234,196,14)" fg:x="1970" fg:w="212"/><text x="1.3919%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.12%)</title><rect x="1.0989%" y="117" width="0.1238%" height="15" fill="rgb(225,157,20)" fg:x="1970" fg:w="222"/><text x="1.3919%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.26%)</title><rect x="1.0443%" y="133" width="0.2572%" height="15" fill="rgb(225,1,52)" fg:x="1872" fg:w="461"/><text x="1.3372%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 0.39%)</title><rect x="0.9935%" y="149" width="0.3888%" height="15" fill="rgb(247,66,21)" fg:x="1781" fg:w="697"/><text x="1.2865%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.3823%" y="149" width="0.0530%" height="15" fill="rgb(229,217,39)" fg:x="2478" fg:w="95"/><text x="1.6753%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="1.4353%" y="149" width="0.0351%" height="15" fill="rgb(220,38,19)" fg:x="2573" fg:w="63"/><text x="1.7283%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="1.4704%" y="149" width="0.0424%" height="15" fill="rgb(208,61,35)" fg:x="2636" fg:w="76"/><text x="1.7634%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="1.5128%" y="149" width="0.0390%" height="15" fill="rgb(244,203,9)" fg:x="2712" fg:w="70"/><text x="1.8058%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.25%)</title><rect x="1.5519%" y="133" width="0.2454%" height="15" fill="rgb(220,75,2)" fg:x="2782" fg:w="440"/><text x="1.8449%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="1.7973%" y="133" width="0.0106%" height="15" fill="rgb(212,149,10)" fg:x="3222" fg:w="19"/><text x="2.0903%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="1.8079%" y="117" width="0.0508%" height="15" fill="rgb(253,3,13)" fg:x="3241" fg:w="91"/><text x="2.1009%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.8587%" y="85" width="0.0374%" height="15" fill="rgb(248,54,46)" fg:x="3332" fg:w="67"/><text x="2.1517%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.05%)</title><rect x="1.8587%" y="101" width="0.0547%" height="15" fill="rgb(233,156,8)" fg:x="3332" fg:w="98"/><text x="2.1517%" y="111.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.9195%" y="37" width="0.0195%" height="15" fill="rgb(248,224,12)" fg:x="3441" fg:w="35"/><text x="2.2125%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.04%)</title><rect x="1.9195%" y="53" width="0.0368%" height="15" fill="rgb(242,6,14)" fg:x="3441" fg:w="66"/><text x="2.2125%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.08%)</title><rect x="1.9134%" y="69" width="0.0820%" height="15" fill="rgb(250,143,0)" fg:x="3430" fg:w="147"/><text x="2.2063%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.12%)</title><rect x="1.9134%" y="85" width="0.1183%" height="15" fill="rgb(253,168,13)" fg:x="3430" fg:w="212"/><text x="2.2063%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.12%)</title><rect x="1.9134%" y="101" width="0.1238%" height="15" fill="rgb(215,95,25)" fg:x="3430" fg:w="222"/><text x="2.2063%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.26%)</title><rect x="1.8587%" y="117" width="0.2572%" height="15" fill="rgb(219,76,4)" fg:x="3332" fg:w="461"/><text x="2.1517%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 0.39%)</title><rect x="1.8079%" y="133" width="0.3888%" height="15" fill="rgb(227,10,21)" fg:x="3241" fg:w="697"/><text x="2.1009%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="2.1967%" y="133" width="0.0530%" height="15" fill="rgb(254,118,37)" fg:x="3938" fg:w="95"/><text x="2.4897%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="2.2497%" y="133" width="0.0351%" height="15" fill="rgb(228,41,8)" fg:x="4033" fg:w="63"/><text x="2.5427%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="2.2849%" y="117" width="0.0457%" height="15" fill="rgb(242,165,47)" fg:x="4096" fg:w="82"/><text x="2.5779%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.05%)</title><rect x="2.3306%" y="117" width="0.0530%" height="15" fill="rgb(251,194,46)" fg:x="4178" fg:w="95"/><text x="2.6236%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.3836%" y="117" width="0.0424%" height="15" fill="rgb(206,36,40)" fg:x="4273" fg:w="76"/><text x="2.6766%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.18%)</title><rect x="2.2849%" y="133" width="0.1841%" height="15" fill="rgb(245,81,24)" fg:x="4096" fg:w="330"/><text x="2.5779%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.4690%" y="133" width="0.0508%" height="15" fill="rgb(247,150,27)" fg:x="4426" fg:w="91"/><text x="2.7619%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,980 instructions, 1.10%)</title><rect x="1.5519%" y="149" width="1.1045%" height="15" fill="rgb(254,170,14)" fg:x="2782" fg:w="1980"/><text x="1.8449%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.6564%" y="149" width="0.0424%" height="15" fill="rgb(220,12,27)" fg:x="4762" fg:w="76"/><text x="2.9494%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.01%)</title><rect x="2.7206%" y="149" width="0.0100%" height="15" fill="rgb(217,14,38)" fg:x="4877" fg:w="18"/><text x="3.0135%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7306%" y="133" width="0.0508%" height="15" fill="rgb(252,43,25)" fg:x="4895" fg:w="91"/><text x="3.0236%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.10%)</title><rect x="2.7306%" y="149" width="0.1043%" height="15" fill="rgb(239,29,10)" fg:x="4895" fg:w="187"/><text x="3.0236%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.8349%" y="101" width="0.0508%" height="15" fill="rgb(244,192,9)" fg:x="5082" fg:w="91"/><text x="3.1279%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.06%)</title><rect x="2.8349%" y="117" width="0.0591%" height="15" fill="rgb(211,95,9)" fg:x="5082" fg:w="106"/><text x="3.1279%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.08%)</title><rect x="2.8349%" y="133" width="0.0837%" height="15" fill="rgb(214,192,51)" fg:x="5082" fg:w="150"/><text x="3.1279%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (232 instructions, 0.13%)</title><rect x="2.8349%" y="149" width="0.1294%" height="15" fill="rgb(218,34,7)" fg:x="5082" fg:w="232"/><text x="3.1279%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.9643%" y="149" width="0.0508%" height="15" fill="rgb(225,69,23)" fg:x="5314" fg:w="91"/><text x="3.2573%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="3.0151%" y="149" width="0.0480%" height="15" fill="rgb(211,171,28)" fg:x="5405" fg:w="86"/><text x="3.3081%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0631%" y="149" width="0.0508%" height="15" fill="rgb(253,130,49)" fg:x="5491" fg:w="91"/><text x="3.3560%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.1138%" y="149" width="0.0508%" height="15" fill="rgb(244,194,0)" fg:x="5582" fg:w="91"/><text x="3.4068%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="3.1668%" y="149" width="0.0480%" height="15" fill="rgb(209,141,22)" fg:x="5677" fg:w="86"/><text x="3.4598%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.2148%" y="149" width="0.2388%" height="15" fill="rgb(215,161,48)" fg:x="5763" fg:w="428"/><text x="3.5078%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.4535%" y="149" width="0.2388%" height="15" fill="rgb(214,193,33)" fg:x="6191" fg:w="428"/><text x="3.7465%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,452 instructions, 4.16%)</title><rect x="0.1746%" y="165" width="4.1570%" height="15" fill="rgb(234,47,14)" fg:x="313" fg:w="7452"/><text x="0.4676%" y="175.50">cand..</text></g><g><title>memcpy (380 instructions, 0.21%)</title><rect x="4.3316%" y="165" width="0.2120%" height="15" fill="rgb(250,117,46)" fg:x="7765" fg:w="380"/><text x="4.6245%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.04%)</title><rect x="4.5436%" y="165" width="0.0351%" height="15" fill="rgb(233,178,46)" fg:x="8145" fg:w="63"/><text x="4.8365%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.5787%" y="165" width="0.0508%" height="15" fill="rgb(227,174,37)" fg:x="8208" fg:w="91"/><text x="4.8717%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="4.6373%" y="133" width="0.0329%" height="15" fill="rgb(211,188,26)" fg:x="8313" fg:w="59"/><text x="4.9302%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="4.6702%" y="133" width="0.0524%" height="15" fill="rgb(243,83,42)" fg:x="8372" fg:w="94"/><text x="4.9631%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="4.7226%" y="133" width="0.0965%" height="15" fill="rgb(223,104,8)" fg:x="8466" fg:w="173"/><text x="5.0156%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="4.6373%" y="149" width="0.3230%" height="15" fill="rgb(252,86,25)" fg:x="8313" fg:w="579"/><text x="4.9302%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.46%)</title><rect x="4.6295%" y="165" width="0.4580%" height="15" fill="rgb(252,215,51)" fg:x="8299" fg:w="821"/><text x="4.9224%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="5.0874%" y="165" width="0.0508%" height="15" fill="rgb(247,152,50)" fg:x="9120" fg:w="91"/><text x="5.3804%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.1460%" y="133" width="0.0329%" height="15" fill="rgb(212,89,50)" fg:x="9225" fg:w="59"/><text x="5.4390%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="5.1789%" y="133" width="0.0524%" height="15" fill="rgb(244,123,42)" fg:x="9284" fg:w="94"/><text x="5.4719%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="5.2314%" y="133" width="0.0965%" height="15" fill="rgb(231,12,46)" fg:x="9378" fg:w="173"/><text x="5.5243%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="5.1460%" y="149" width="0.3230%" height="15" fill="rgb(217,54,54)" fg:x="9225" fg:w="579"/><text x="5.4390%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.04%)</title><rect x="5.4690%" y="149" width="0.0430%" height="15" fill="rgb(209,136,12)" fg:x="9804" fg:w="77"/><text x="5.7620%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="5.5120%" y="133" width="0.0480%" height="15" fill="rgb(215,90,51)" fg:x="9881" fg:w="86"/><text x="5.8049%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.07%)</title><rect x="5.5120%" y="149" width="0.0675%" height="15" fill="rgb(252,175,12)" fg:x="9881" fg:w="121"/><text x="5.8049%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 0.55%)</title><rect x="5.1382%" y="165" width="0.5500%" height="15" fill="rgb(244,46,16)" fg:x="9211" fg:w="986"/><text x="5.4312%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.6882%" y="117" width="0.0329%" height="15" fill="rgb(206,9,54)" fg:x="10197" fg:w="59"/><text x="5.9812%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.05%)</title><rect x="5.6882%" y="133" width="0.0524%" height="15" fill="rgb(231,126,49)" fg:x="10197" fg:w="94"/><text x="5.9812%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.18%)</title><rect x="5.6882%" y="149" width="0.1757%" height="15" fill="rgb(247,216,4)" fg:x="10197" fg:w="315"/><text x="5.9812%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.359 (18 instructions, 0.01%)</title><rect x="5.8639%" y="149" width="0.0100%" height="15" fill="rgb(228,161,21)" fg:x="10512" fg:w="18"/><text x="6.1569%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.31%)</title><rect x="5.6882%" y="165" width="0.3074%" height="15" fill="rgb(238,30,10)" fg:x="10197" fg:w="551"/><text x="5.9812%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.03%)</title><rect x="5.9956%" y="165" width="0.0296%" height="15" fill="rgb(244,83,13)" fg:x="10748" fg:w="53"/><text x="6.2886%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.07%)</title><rect x="6.0252%" y="149" width="0.0736%" height="15" fill="rgb(252,18,31)" fg:x="10801" fg:w="132"/><text x="6.3181%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.07%)</title><rect x="6.1183%" y="149" width="0.0736%" height="15" fill="rgb(249,176,11)" fg:x="10968" fg:w="132"/><text x="6.4113%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.19%)</title><rect x="6.0252%" y="165" width="0.1863%" height="15" fill="rgb(251,210,33)" fg:x="10801" fg:w="334"/><text x="6.3181%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.02%)</title><rect x="6.2115%" y="149" width="0.0190%" height="15" fill="rgb(220,176,9)" fg:x="11135" fg:w="34"/><text x="6.5044%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1747 (18 instructions, 0.01%)</title><rect x="6.2304%" y="149" width="0.0100%" height="15" fill="rgb(214,172,28)" fg:x="11169" fg:w="18"/><text x="6.5234%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1747 (18 instructions, 0.01%)</title><rect x="6.2405%" y="149" width="0.0100%" height="15" fill="rgb(223,97,39)" fg:x="11187" fg:w="18"/><text x="6.5335%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.09%)</title><rect x="6.2115%" y="165" width="0.0943%" height="15" fill="rgb(241,136,8)" fg:x="11135" fg:w="169"/><text x="6.5044%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.25%)</title><rect x="6.3275%" y="165" width="0.2454%" height="15" fill="rgb(242,130,27)" fg:x="11343" fg:w="440"/><text x="6.6205%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.01%)</title><rect x="6.5730%" y="133" width="0.0106%" height="15" fill="rgb(250,180,19)" fg:x="11783" fg:w="19"/><text x="6.8659%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.10%)</title><rect x="6.5835%" y="133" width="0.1010%" height="15" fill="rgb(238,6,52)" fg:x="11802" fg:w="181"/><text x="6.8765%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="6.6845%" y="101" width="0.0374%" height="15" fill="rgb(250,113,4)" fg:x="11983" fg:w="67"/><text x="6.9775%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.13%)</title><rect x="6.6845%" y="117" width="0.1283%" height="15" fill="rgb(237,113,9)" fg:x="11983" fg:w="230"/><text x="6.9775%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265 instructions, 0.15%)</title><rect x="6.6845%" y="133" width="0.1478%" height="15" fill="rgb(230,136,34)" fg:x="11983" fg:w="265"/><text x="6.9775%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (540 instructions, 0.30%)</title><rect x="6.5730%" y="149" width="0.3012%" height="15" fill="rgb(224,167,30)" fg:x="11783" fg:w="540"/><text x="6.8659%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (589 instructions, 0.33%)</title><rect x="6.5730%" y="165" width="0.3286%" height="15" fill="rgb(238,14,33)" fg:x="11783" fg:w="589"/><text x="6.8659%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="6.9015%" y="149" width="0.0346%" height="15" fill="rgb(237,51,38)" fg:x="12372" fg:w="62"/><text x="7.1945%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="6.9361%" y="149" width="0.0374%" height="15" fill="rgb(229,11,5)" fg:x="12434" fg:w="67"/><text x="7.2291%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.13%)</title><rect x="6.9015%" y="165" width="0.1272%" height="15" fill="rgb(215,190,14)" fg:x="12372" fg:w="228"/><text x="7.1945%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,846 instructions, 7.72%)</title><rect x="0.1238%" y="181" width="7.7238%" height="15" fill="rgb(214,203,52)" fg:x="222" fg:w="13846"/><text x="0.4168%" y="191.50">ic_cdk::a..</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (25 instructions, 0.01%)</title><rect x="7.8476%" y="181" width="0.0139%" height="15" fill="rgb(219,65,51)" fg:x="14068" fg:w="25"/><text x="8.1406%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="7.8615%" y="165" width="0.1093%" height="15" fill="rgb(221,165,22)" fg:x="14093" fg:w="196"/><text x="8.1545%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="7.9709%" y="133" width="1.7628%" height="15" fill="rgb(229,47,0)" fg:x="14289" fg:w="3160"/><text x="8.2638%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="7.9709%" y="149" width="1.8180%" height="15" fill="rgb(245,113,30)" fg:x="14289" fg:w="3259"/><text x="8.2638%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="9.7889%" y="149" width="0.0787%" height="15" fill="rgb(214,67,13)" fg:x="17548" fg:w="141"/><text x="10.0818%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="9.8675%" y="149" width="1.7628%" height="15" fill="rgb(250,90,29)" fg:x="17689" fg:w="3160"/><text x="10.1605%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="7.9709%" y="165" width="3.8546%" height="15" fill="rgb(237,226,37)" fg:x="14289" fg:w="6910"/><text x="8.2638%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="11.8668%" y="165" width="0.1093%" height="15" fill="rgb(226,43,28)" fg:x="21273" fg:w="196"/><text x="12.1598%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="11.9761%" y="133" width="1.7628%" height="15" fill="rgb(212,99,43)" fg:x="21469" fg:w="3160"/><text x="12.2691%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="11.9761%" y="149" width="1.8180%" height="15" fill="rgb(220,14,12)" fg:x="21469" fg:w="3259"/><text x="12.2691%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="13.7941%" y="149" width="0.0787%" height="15" fill="rgb(236,17,0)" fg:x="24728" fg:w="141"/><text x="14.0871%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="13.8728%" y="149" width="1.7628%" height="15" fill="rgb(233,66,43)" fg:x="24869" fg:w="3160"/><text x="14.1657%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="11.9761%" y="165" width="3.8546%" height="15" fill="rgb(214,55,41)" fg:x="21469" fg:w="6910"/><text x="12.2691%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="15.8720%" y="165" width="0.1093%" height="15" fill="rgb(233,61,47)" fg:x="28453" fg:w="196"/><text x="16.1650%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="15.9814%" y="165" width="0.1406%" height="15" fill="rgb(213,140,47)" fg:x="28649" fg:w="252"/><text x="16.2743%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="16.1632%" y="165" width="0.1093%" height="15" fill="rgb(238,114,1)" fg:x="28975" fg:w="196"/><text x="16.4562%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="16.2726%" y="133" width="1.7628%" height="15" fill="rgb(221,48,26)" fg:x="29171" fg:w="3160"/><text x="16.5655%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="16.2726%" y="149" width="1.8180%" height="15" fill="rgb(248,23,38)" fg:x="29171" fg:w="3259"/><text x="16.5655%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="18.0905%" y="149" width="0.0787%" height="15" fill="rgb(242,67,54)" fg:x="32430" fg:w="141"/><text x="18.3835%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="18.1692%" y="149" width="1.7628%" height="15" fill="rgb(219,203,31)" fg:x="32571" fg:w="3160"/><text x="18.4622%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="16.2726%" y="165" width="3.8546%" height="15" fill="rgb(219,24,1)" fg:x="29171" fg:w="6910"/><text x="16.5655%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="20.1685%" y="165" width="0.1093%" height="15" fill="rgb(225,49,36)" fg:x="36155" fg:w="196"/><text x="20.4614%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="20.2778%" y="133" width="1.7628%" height="15" fill="rgb(226,54,50)" fg:x="36351" fg:w="3160"/><text x="20.5708%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="20.2778%" y="149" width="1.8180%" height="15" fill="rgb(235,125,47)" fg:x="36351" fg:w="3259"/><text x="20.5708%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="22.0958%" y="149" width="0.0787%" height="15" fill="rgb(237,130,51)" fg:x="39610" fg:w="141"/><text x="22.3887%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="22.1744%" y="149" width="1.7628%" height="15" fill="rgb(211,157,20)" fg:x="39751" fg:w="3160"/><text x="22.4674%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="20.2778%" y="165" width="3.8546%" height="15" fill="rgb(219,214,42)" fg:x="36351" fg:w="6910"/><text x="20.5708%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.1737%" y="165" width="0.1093%" height="15" fill="rgb(238,40,50)" fg:x="43335" fg:w="196"/><text x="24.4667%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="24.2830%" y="165" width="0.1768%" height="15" fill="rgb(210,182,31)" fg:x="43531" fg:w="317"/><text x="24.5760%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.5012%" y="165" width="0.1093%" height="15" fill="rgb(238,24,51)" fg:x="43922" fg:w="196"/><text x="24.7941%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="24.6105%" y="165" width="0.1406%" height="15" fill="rgb(210,16,44)" fg:x="44118" fg:w="252"/><text x="24.9035%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.7923%" y="165" width="0.1093%" height="15" fill="rgb(217,54,21)" fg:x="44444" fg:w="196"/><text x="25.0853%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="24.9017%" y="133" width="1.7628%" height="15" fill="rgb(208,206,17)" fg:x="44640" fg:w="3160"/><text x="25.1947%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="24.9017%" y="149" width="1.8180%" height="15" fill="rgb(250,151,0)" fg:x="44640" fg:w="3259"/><text x="25.1947%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="26.7197%" y="149" width="0.0787%" height="15" fill="rgb(226,223,11)" fg:x="47899" fg:w="141"/><text x="27.0126%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="26.7983%" y="149" width="1.7628%" height="15" fill="rgb(239,133,51)" fg:x="48040" fg:w="3160"/><text x="27.0913%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="24.9017%" y="165" width="3.8546%" height="15" fill="rgb(233,90,23)" fg:x="44640" fg:w="6910"/><text x="25.1947%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="28.7976%" y="165" width="0.1093%" height="15" fill="rgb(207,69,5)" fg:x="51624" fg:w="196"/><text x="29.0906%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="28.9069%" y="133" width="1.7628%" height="15" fill="rgb(254,152,4)" fg:x="51820" fg:w="3160"/><text x="29.1999%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="28.9069%" y="149" width="1.8180%" height="15" fill="rgb(215,136,4)" fg:x="51820" fg:w="3259"/><text x="29.1999%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="30.7249%" y="149" width="0.0787%" height="15" fill="rgb(216,53,40)" fg:x="55079" fg:w="141"/><text x="31.0179%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="30.8036%" y="149" width="1.7628%" height="15" fill="rgb(206,80,47)" fg:x="55220" fg:w="3160"/><text x="31.0965%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="28.9069%" y="165" width="3.8546%" height="15" fill="rgb(249,219,5)" fg:x="51820" fg:w="6910"/><text x="29.1999%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="32.8028%" y="165" width="0.1093%" height="15" fill="rgb(222,23,43)" fg:x="58804" fg:w="196"/><text x="33.0958%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="32.9122%" y="133" width="1.7628%" height="15" fill="rgb(244,100,11)" fg:x="59000" fg:w="3160"/><text x="33.2051%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="32.9122%" y="149" width="1.8180%" height="15" fill="rgb(210,69,15)" fg:x="59000" fg:w="3259"/><text x="33.2051%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="34.7301%" y="149" width="0.0787%" height="15" fill="rgb(227,120,31)" fg:x="62259" fg:w="141"/><text x="35.0231%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="34.8088%" y="149" width="1.7628%" height="15" fill="rgb(216,210,32)" fg:x="62400" fg:w="3160"/><text x="35.1018%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="32.9122%" y="165" width="3.8546%" height="15" fill="rgb(228,111,42)" fg:x="59000" fg:w="6910"/><text x="33.2051%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="36.8081%" y="165" width="0.1093%" height="15" fill="rgb(220,132,51)" fg:x="65984" fg:w="196"/><text x="37.1010%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="36.9174%" y="165" width="0.1406%" height="15" fill="rgb(241,80,53)" fg:x="66180" fg:w="252"/><text x="37.2104%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.0993%" y="165" width="0.1093%" height="15" fill="rgb(242,45,51)" fg:x="66506" fg:w="196"/><text x="37.3922%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.2086%" y="165" width="0.1406%" height="15" fill="rgb(208,84,10)" fg:x="66702" fg:w="252"/><text x="37.5016%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.3905%" y="165" width="0.1093%" height="15" fill="rgb(229,32,7)" fg:x="67028" fg:w="196"/><text x="37.6834%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.4998%" y="165" width="0.1406%" height="15" fill="rgb(217,124,30)" fg:x="67224" fg:w="252"/><text x="37.7928%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.6816%" y="165" width="0.1093%" height="15" fill="rgb(234,219,28)" fg:x="67550" fg:w="196"/><text x="37.9746%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="37.7910%" y="133" width="1.7628%" height="15" fill="rgb(224,212,7)" fg:x="67746" fg:w="3160"/><text x="38.0839%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="37.7910%" y="149" width="1.8180%" height="15" fill="rgb(254,55,49)" fg:x="67746" fg:w="3259"/><text x="38.0839%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="39.6090%" y="149" width="0.0787%" height="15" fill="rgb(205,121,15)" fg:x="71005" fg:w="141"/><text x="39.9019%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="39.6876%" y="149" width="1.7628%" height="15" fill="rgb(206,176,1)" fg:x="71146" fg:w="3160"/><text x="39.9806%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="37.7910%" y="165" width="3.8546%" height="15" fill="rgb(245,54,47)" fg:x="67746" fg:w="6910"/><text x="38.0839%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.6869%" y="165" width="0.1093%" height="15" fill="rgb(241,169,5)" fg:x="74730" fg:w="196"/><text x="41.9799%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="41.7962%" y="165" width="0.1406%" height="15" fill="rgb(253,88,40)" fg:x="74926" fg:w="252"/><text x="42.0892%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.9781%" y="165" width="0.1093%" height="15" fill="rgb(248,212,1)" fg:x="75252" fg:w="196"/><text x="42.2710%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.0874%" y="165" width="0.1406%" height="15" fill="rgb(207,195,4)" fg:x="75448" fg:w="252"/><text x="42.3804%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.2693%" y="165" width="0.1093%" height="15" fill="rgb(253,185,33)" fg:x="75774" fg:w="196"/><text x="42.5622%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.3786%" y="165" width="0.1406%" height="15" fill="rgb(223,171,4)" fg:x="75970" fg:w="252"/><text x="42.6716%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.5605%" y="165" width="0.1093%" height="15" fill="rgb(244,100,14)" fg:x="76296" fg:w="196"/><text x="42.8534%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.6698%" y="165" width="0.1406%" height="15" fill="rgb(230,214,4)" fg:x="76492" fg:w="252"/><text x="42.9628%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.8516%" y="165" width="0.1093%" height="15" fill="rgb(208,58,53)" fg:x="76818" fg:w="196"/><text x="43.1446%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="42.9610%" y="165" width="0.1768%" height="15" fill="rgb(219,152,30)" fg:x="77014" fg:w="317"/><text x="43.2539%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="43.1791%" y="165" width="0.1093%" height="15" fill="rgb(218,119,7)" fg:x="77405" fg:w="196"/><text x="43.4721%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="43.2884%" y="133" width="1.7628%" height="15" fill="rgb(209,220,45)" fg:x="77601" fg:w="3160"/><text x="43.5814%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="43.2884%" y="149" width="1.8180%" height="15" fill="rgb(245,34,32)" fg:x="77601" fg:w="3259"/><text x="43.5814%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="45.1064%" y="149" width="0.0787%" height="15" fill="rgb(235,1,24)" fg:x="80860" fg:w="141"/><text x="45.3994%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="45.1851%" y="149" width="1.7628%" height="15" fill="rgb(250,38,13)" fg:x="81001" fg:w="3160"/><text x="45.4780%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="43.2884%" y="165" width="3.8546%" height="15" fill="rgb(242,82,41)" fg:x="77601" fg:w="6910"/><text x="43.5814%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="47.1843%" y="165" width="0.1093%" height="15" fill="rgb(226,101,44)" fg:x="84585" fg:w="196"/><text x="47.4773%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="47.2937%" y="133" width="1.7628%" height="15" fill="rgb(237,198,9)" fg:x="84781" fg:w="3160"/><text x="47.5866%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="47.2937%" y="149" width="1.8180%" height="15" fill="rgb(230,23,0)" fg:x="84781" fg:w="3259"/><text x="47.5866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="49.1117%" y="149" width="0.0787%" height="15" fill="rgb(212,51,39)" fg:x="88040" fg:w="141"/><text x="49.4046%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="49.1903%" y="149" width="1.7628%" height="15" fill="rgb(238,141,21)" fg:x="88181" fg:w="3160"/><text x="49.4833%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="47.2937%" y="165" width="3.8546%" height="15" fill="rgb(221,59,13)" fg:x="84781" fg:w="6910"/><text x="47.5866%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.1896%" y="165" width="0.1093%" height="15" fill="rgb(227,200,30)" fg:x="91765" fg:w="196"/><text x="51.4825%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.2989%" y="165" width="0.1768%" height="15" fill="rgb(228,101,29)" fg:x="91961" fg:w="317"/><text x="51.5919%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.5170%" y="165" width="0.1093%" height="15" fill="rgb(234,119,20)" fg:x="92352" fg:w="196"/><text x="51.8100%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.6264%" y="165" width="0.1768%" height="15" fill="rgb(223,66,10)" fg:x="92548" fg:w="317"/><text x="51.9193%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.8445%" y="165" width="0.1093%" height="15" fill="rgb(211,87,24)" fg:x="92939" fg:w="196"/><text x="52.1374%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="51.9538%" y="165" width="0.1406%" height="15" fill="rgb(226,57,13)" fg:x="93135" fg:w="252"/><text x="52.2468%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.1357%" y="165" width="0.1093%" height="15" fill="rgb(218,218,26)" fg:x="93461" fg:w="196"/><text x="52.4286%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.2450%" y="165" width="0.1406%" height="15" fill="rgb(240,228,43)" fg:x="93657" fg:w="252"/><text x="52.5380%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.4269%" y="165" width="0.1093%" height="15" fill="rgb(251,77,31)" fg:x="93983" fg:w="196"/><text x="52.7198%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="52.5362%" y="165" width="0.1768%" height="15" fill="rgb(249,104,35)" fg:x="94179" fg:w="317"/><text x="52.8292%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.7543%" y="165" width="0.1093%" height="15" fill="rgb(209,191,47)" fg:x="94570" fg:w="196"/><text x="53.0473%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.8636%" y="165" width="0.1406%" height="15" fill="rgb(224,63,35)" fg:x="94766" fg:w="252"/><text x="53.1566%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.0455%" y="165" width="0.1093%" height="15" fill="rgb(230,78,18)" fg:x="95092" fg:w="196"/><text x="53.3385%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="53.1548%" y="165" width="0.1406%" height="15" fill="rgb(243,189,47)" fg:x="95288" fg:w="252"/><text x="53.4478%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.3367%" y="165" width="0.1093%" height="15" fill="rgb(228,73,47)" fg:x="95614" fg:w="196"/><text x="53.6296%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="53.4460%" y="133" width="1.7628%" height="15" fill="rgb(222,179,0)" fg:x="95810" fg:w="3160"/><text x="53.7390%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="53.4460%" y="149" width="1.8180%" height="15" fill="rgb(211,162,35)" fg:x="95810" fg:w="3259"/><text x="53.7390%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="55.2640%" y="149" width="0.0787%" height="15" fill="rgb(242,205,27)" fg:x="99069" fg:w="141"/><text x="55.5570%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="55.3426%" y="149" width="1.7628%" height="15" fill="rgb(248,189,32)" fg:x="99210" fg:w="3160"/><text x="55.6356%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="53.4460%" y="165" width="3.8546%" height="15" fill="rgb(237,170,53)" fg:x="95810" fg:w="6910"/><text x="53.7390%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.3419%" y="165" width="0.1093%" height="15" fill="rgb(239,132,52)" fg:x="102794" fg:w="196"/><text x="57.6349%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="57.4513%" y="165" width="0.1406%" height="15" fill="rgb(221,0,17)" fg:x="102990" fg:w="252"/><text x="57.7442%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.6331%" y="165" width="0.1093%" height="15" fill="rgb(252,76,51)" fg:x="103316" fg:w="196"/><text x="57.9261%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="57.7424%" y="165" width="0.1768%" height="15" fill="rgb(214,107,30)" fg:x="103512" fg:w="317"/><text x="58.0354%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.9606%" y="165" width="0.1093%" height="15" fill="rgb(205,87,53)" fg:x="103903" fg:w="196"/><text x="58.2535%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="58.0699%" y="165" width="0.1406%" height="15" fill="rgb(207,57,50)" fg:x="104099" fg:w="252"/><text x="58.3629%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.2518%" y="165" width="0.1093%" height="15" fill="rgb(211,154,17)" fg:x="104425" fg:w="196"/><text x="58.5447%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="58.3611%" y="133" width="1.7628%" height="15" fill="rgb(234,113,3)" fg:x="104621" fg:w="3160"/><text x="58.6541%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="58.3611%" y="149" width="1.8180%" height="15" fill="rgb(205,162,37)" fg:x="104621" fg:w="3259"/><text x="58.6541%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="60.1791%" y="149" width="0.0787%" height="15" fill="rgb(251,136,32)" fg:x="107880" fg:w="141"/><text x="60.4720%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="60.2577%" y="149" width="1.7628%" height="15" fill="rgb(215,25,16)" fg:x="108021" fg:w="3160"/><text x="60.5507%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="58.3611%" y="165" width="3.8546%" height="15" fill="rgb(240,94,51)" fg:x="104621" fg:w="6910"/><text x="58.6541%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="62.2570%" y="165" width="0.1093%" height="15" fill="rgb(206,105,49)" fg:x="111605" fg:w="196"/><text x="62.5500%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="62.3663%" y="133" width="1.7628%" height="15" fill="rgb(215,120,5)" fg:x="111801" fg:w="3160"/><text x="62.6593%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="62.3663%" y="149" width="1.8180%" height="15" fill="rgb(246,159,36)" fg:x="111801" fg:w="3259"/><text x="62.6593%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="64.1843%" y="149" width="0.0787%" height="15" fill="rgb(217,102,28)" fg:x="115060" fg:w="141"/><text x="64.4773%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="64.2630%" y="149" width="1.7628%" height="15" fill="rgb(217,139,13)" fg:x="115201" fg:w="3160"/><text x="64.5559%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="62.3663%" y="165" width="3.8546%" height="15" fill="rgb(232,209,23)" fg:x="111801" fg:w="6910"/><text x="62.6593%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.2622%" y="165" width="0.1093%" height="15" fill="rgb(228,10,9)" fg:x="118785" fg:w="196"/><text x="66.5552%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="66.3716%" y="165" width="0.1406%" height="15" fill="rgb(226,205,11)" fg:x="118981" fg:w="252"/><text x="66.6645%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.5534%" y="165" width="0.1093%" height="15" fill="rgb(226,96,9)" fg:x="119307" fg:w="196"/><text x="66.8464%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="66.6628%" y="165" width="0.1768%" height="15" fill="rgb(216,64,45)" fg:x="119503" fg:w="317"/><text x="66.9557%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.8809%" y="165" width="0.1093%" height="15" fill="rgb(214,17,38)" fg:x="119894" fg:w="196"/><text x="67.1738%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="66.9902%" y="133" width="1.7628%" height="15" fill="rgb(240,211,4)" fg:x="120090" fg:w="3160"/><text x="67.2832%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="66.9902%" y="149" width="1.8180%" height="15" fill="rgb(215,63,10)" fg:x="120090" fg:w="3259"/><text x="67.2832%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="68.8082%" y="149" width="0.0787%" height="15" fill="rgb(206,97,39)" fg:x="123349" fg:w="141"/><text x="69.1012%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="68.8868%" y="149" width="1.7628%" height="15" fill="rgb(229,137,39)" fg:x="123490" fg:w="3160"/><text x="69.1798%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,975 instructions, 3.89%)</title><rect x="66.9902%" y="165" width="3.8909%" height="15" fill="rgb(226,108,36)" fg:x="120090" fg:w="6975"/><text x="67.2832%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="70.9224%" y="165" width="0.1093%" height="15" fill="rgb(242,78,24)" fg:x="127139" fg:w="196"/><text x="71.2153%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="71.0317%" y="133" width="1.7628%" height="15" fill="rgb(228,225,49)" fg:x="127335" fg:w="3160"/><text x="71.3247%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="71.0317%" y="149" width="1.8180%" height="15" fill="rgb(212,208,24)" fg:x="127335" fg:w="3259"/><text x="71.3247%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="72.8497%" y="149" width="0.0787%" height="15" fill="rgb(231,104,6)" fg:x="130594" fg:w="141"/><text x="73.1427%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="72.9283%" y="149" width="1.7628%" height="15" fill="rgb(215,90,2)" fg:x="130735" fg:w="3160"/><text x="73.2213%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="71.0317%" y="165" width="3.8546%" height="15" fill="rgb(236,73,21)" fg:x="127335" fg:w="6910"/><text x="71.3247%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="74.9276%" y="165" width="0.1093%" height="15" fill="rgb(237,84,14)" fg:x="134319" fg:w="196"/><text x="75.2206%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="75.0370%" y="165" width="0.1406%" height="15" fill="rgb(243,144,42)" fg:x="134515" fg:w="252"/><text x="75.3299%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.2188%" y="165" width="0.1093%" height="15" fill="rgb(224,142,24)" fg:x="134841" fg:w="196"/><text x="75.5118%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="75.3281%" y="165" width="0.1768%" height="15" fill="rgb(246,137,47)" fg:x="135037" fg:w="317"/><text x="75.6211%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.5463%" y="165" width="0.1093%" height="15" fill="rgb(251,162,3)" fg:x="135428" fg:w="196"/><text x="75.8392%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="75.6556%" y="133" width="1.7628%" height="15" fill="rgb(214,194,29)" fg:x="135624" fg:w="3160"/><text x="75.9486%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="75.6556%" y="149" width="1.8180%" height="15" fill="rgb(233,205,3)" fg:x="135624" fg:w="3259"/><text x="75.9486%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="77.4736%" y="149" width="0.0787%" height="15" fill="rgb(252,136,12)" fg:x="138883" fg:w="141"/><text x="77.7665%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="77.5522%" y="149" width="1.7628%" height="15" fill="rgb(225,21,32)" fg:x="139024" fg:w="3160"/><text x="77.8452%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="75.6556%" y="165" width="3.8546%" height="15" fill="rgb(210,131,16)" fg:x="135624" fg:w="6910"/><text x="75.9486%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="79.5515%" y="165" width="0.1093%" height="15" fill="rgb(212,20,40)" fg:x="142608" fg:w="196"/><text x="79.8445%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="79.6608%" y="133" width="1.7628%" height="15" fill="rgb(210,79,27)" fg:x="142804" fg:w="3160"/><text x="79.9538%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="79.6608%" y="149" width="1.8180%" height="15" fill="rgb(239,190,11)" fg:x="142804" fg:w="3259"/><text x="79.9538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="81.4788%" y="149" width="0.0787%" height="15" fill="rgb(221,165,8)" fg:x="146063" fg:w="141"/><text x="81.7718%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="81.5575%" y="149" width="1.7628%" height="15" fill="rgb(205,6,48)" fg:x="146204" fg:w="3160"/><text x="81.8504%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="79.6608%" y="165" width="3.8546%" height="15" fill="rgb(235,27,42)" fg:x="142804" fg:w="6910"/><text x="79.9538%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.5567%" y="165" width="0.1093%" height="15" fill="rgb(232,91,16)" fg:x="149788" fg:w="196"/><text x="83.8497%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="83.6661%" y="165" width="0.1768%" height="15" fill="rgb(229,32,30)" fg:x="149984" fg:w="317"/><text x="83.9590%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.8842%" y="165" width="0.1093%" height="15" fill="rgb(221,63,5)" fg:x="150375" fg:w="196"/><text x="84.1772%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="83.9935%" y="165" width="0.1406%" height="15" fill="rgb(245,123,40)" fg:x="150571" fg:w="252"/><text x="84.2865%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="84.1754%" y="165" width="0.1093%" height="15" fill="rgb(246,40,52)" fg:x="150897" fg:w="196"/><text x="84.4684%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="84.2847%" y="133" width="1.7628%" height="15" fill="rgb(251,9,36)" fg:x="151093" fg:w="3160"/><text x="84.5777%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="84.2847%" y="149" width="1.8180%" height="15" fill="rgb(251,125,36)" fg:x="151093" fg:w="3259"/><text x="84.5777%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="86.1027%" y="149" width="0.0787%" height="15" fill="rgb(213,207,27)" fg:x="154352" fg:w="141"/><text x="86.3957%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="86.1814%" y="149" width="1.7628%" height="15" fill="rgb(249,213,18)" fg:x="154493" fg:w="3160"/><text x="86.4743%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="84.2847%" y="165" width="3.8546%" height="15" fill="rgb(230,10,47)" fg:x="151093" fg:w="6910"/><text x="84.5777%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.1806%" y="165" width="0.1093%" height="15" fill="rgb(206,53,3)" fg:x="158077" fg:w="196"/><text x="88.4736%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="88.2900%" y="165" width="0.1768%" height="15" fill="rgb(208,197,33)" fg:x="158273" fg:w="317"/><text x="88.5829%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.5081%" y="165" width="0.1093%" height="15" fill="rgb(253,146,39)" fg:x="158664" fg:w="196"/><text x="88.8010%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="88.6174%" y="133" width="1.7628%" height="15" fill="rgb(244,170,0)" fg:x="158860" fg:w="3160"/><text x="88.9104%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="88.6174%" y="149" width="1.8180%" height="15" fill="rgb(233,196,10)" fg:x="158860" fg:w="3259"/><text x="88.9104%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="90.4354%" y="149" width="0.0787%" height="15" fill="rgb(233,28,0)" fg:x="162119" fg:w="141"/><text x="90.7284%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="90.5140%" y="149" width="1.7628%" height="15" fill="rgb(206,89,51)" fg:x="162260" fg:w="3160"/><text x="90.8070%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="88.6174%" y="165" width="3.8546%" height="15" fill="rgb(230,160,33)" fg:x="158860" fg:w="6910"/><text x="88.9104%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.5133%" y="165" width="0.1093%" height="15" fill="rgb(220,185,11)" fg:x="165844" fg:w="196"/><text x="92.8063%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.6227%" y="165" width="0.1406%" height="15" fill="rgb(252,3,2)" fg:x="166040" fg:w="252"/><text x="92.9156%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.8045%" y="165" width="0.1093%" height="15" fill="rgb(247,171,49)" fg:x="166366" fg:w="196"/><text x="93.0975%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.9138%" y="165" width="0.1406%" height="15" fill="rgb(224,168,35)" fg:x="166562" fg:w="252"/><text x="93.2068%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="93.0957%" y="165" width="0.1093%" height="15" fill="rgb(206,53,22)" fg:x="166888" fg:w="196"/><text x="93.3887%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="93.2050%" y="133" width="1.7628%" height="15" fill="rgb(220,113,41)" fg:x="167084" fg:w="3160"/><text x="93.4980%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="93.2050%" y="149" width="1.8180%" height="15" fill="rgb(225,204,46)" fg:x="167084" fg:w="3259"/><text x="93.4980%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="95.0230%" y="149" width="0.0787%" height="15" fill="rgb(212,107,9)" fg:x="170343" fg:w="141"/><text x="95.3160%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="95.1017%" y="149" width="1.7628%" height="15" fill="rgb(222,175,33)" fg:x="170484" fg:w="3160"/><text x="95.3946%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,910 instructions, 3.85%)</title><rect x="93.2050%" y="165" width="3.8546%" height="15" fill="rgb(223,119,39)" fg:x="167084" fg:w="6910"/><text x="93.4980%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (159,975 instructions, 89.24%)</title><rect x="7.8615%" y="181" width="89.2394%" height="15" fill="rgb(208,223,52)" fg:x="14093" fg:w="159975"/><text x="8.1545%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="97.1087%" y="117" width="0.0346%" height="15" fill="rgb(232,12,50)" fg:x="174082" fg:w="62"/><text x="97.4017%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.04%)</title><rect x="97.1433%" y="117" width="0.0374%" height="15" fill="rgb(240,195,24)" fg:x="174144" fg:w="67"/><text x="97.4363%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.13%)</title><rect x="97.1087%" y="133" width="0.1289%" height="15" fill="rgb(217,145,10)" fg:x="174082" fg:w="231"/><text x="97.4017%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (266 instructions, 0.15%)</title><rect x="97.1087%" y="149" width="0.1484%" height="15" fill="rgb(216,67,22)" fg:x="174082" fg:w="266"/><text x="97.4017%" y="159.50"></text></g><g><title>memset (152 instructions, 0.08%)</title><rect x="97.2571%" y="149" width="0.0848%" height="15" fill="rgb(242,24,27)" fg:x="174348" fg:w="152"/><text x="97.5501%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (612 instructions, 0.34%)</title><rect x="97.1009%" y="165" width="0.3414%" height="15" fill="rgb(236,110,43)" fg:x="174068" fg:w="612"/><text x="97.3939%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.03%)</title><rect x="97.4423%" y="69" width="0.0346%" height="15" fill="rgb(239,80,39)" fg:x="174680" fg:w="62"/><text x="97.7353%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (182 instructions, 0.10%)</title><rect x="97.4423%" y="85" width="0.1015%" height="15" fill="rgb(226,85,15)" fg:x="174680" fg:w="182"/><text x="97.7353%" y="95.50"></text></g><g><title>__rust_alloc (197 instructions, 0.11%)</title><rect x="97.4423%" y="101" width="0.1099%" height="15" fill="rgb(250,161,43)" fg:x="174680" fg:w="197"/><text x="97.7353%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (241 instructions, 0.13%)</title><rect x="97.4423%" y="117" width="0.1344%" height="15" fill="rgb(220,186,21)" fg:x="174680" fg:w="241"/><text x="97.7353%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (320 instructions, 0.18%)</title><rect x="97.4423%" y="133" width="0.1785%" height="15" fill="rgb(249,178,36)" fg:x="174680" fg:w="320"/><text x="97.7353%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (538 instructions, 0.30%)</title><rect x="97.4423%" y="149" width="0.3001%" height="15" fill="rgb(235,219,19)" fg:x="174680" fg:w="538"/><text x="97.7353%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.29%)</title><rect x="97.7424%" y="149" width="0.2878%" height="15" fill="rgb(228,199,29)" fg:x="175218" fg:w="516"/><text x="98.0354%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,648 instructions, 0.92%)</title><rect x="97.4423%" y="165" width="0.9193%" height="15" fill="rgb(225,183,34)" fg:x="174680" fg:w="1648"/><text x="97.7353%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="98.3650%" y="165" width="0.0335%" height="15" fill="rgb(254,130,22)" fg:x="176334" fg:w="60"/><text x="98.6580%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,934 instructions, 1.64%)</title><rect x="97.1009%" y="181" width="1.6367%" height="15" fill="rgb(213,170,10)" fg:x="174068" fg:w="2934"/><text x="97.3939%" y="191.50"></text></g><g><title>imrc_hashmap::__canister_method_batch_put::{{closure}} (178,663 instructions, 99.66%)</title><rect x="0.1238%" y="197" width="99.6642%" height="15" fill="rgb(207,5,35)" fg:x="222" fg:w="178663"/><text x="0.4168%" y="207.50">imrc_hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.05%)</title><rect x="99.7964%" y="197" width="0.0480%" height="15" fill="rgb(224,215,45)" fg:x="178900" fg:w="86"/><text x="100.0894%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.08%)</title><rect x="99.8444%" y="197" width="0.0753%" height="15" fill="rgb(244,193,16)" fg:x="178986" fg:w="135"/><text x="100.1373%" y="207.50"></text></g><g><title>all (179,265 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,0)" fg:x="0" fg:w="179265"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (179,265 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,95,41)" fg:x="0" fg:w="179265"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>