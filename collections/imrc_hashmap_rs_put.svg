<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="163913"><g><title>ic_cdk::setup (19 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0116%" height="15" fill="rgb(237,140,41)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.07%)</title><rect x="0.0116%" y="197" width="0.0720%" height="15" fill="rgb(220,2,6)" fg:x="19" fg:w="118"/><text x="0.3046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.04%)</title><rect x="0.0836%" y="197" width="0.0433%" height="15" fill="rgb(234,165,53)" fg:x="137" fg:w="71"/><text x="0.3765%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.1269%" y="165" width="0.0500%" height="15" fill="rgb(221,105,2)" fg:x="208" fg:w="82"/><text x="0.4199%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.1769%" y="149" width="0.0421%" height="15" fill="rgb(237,182,9)" fg:x="290" fg:w="69"/><text x="0.4699%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.2190%" y="149" width="0.2477%" height="15" fill="rgb(244,198,4)" fg:x="359" fg:w="406"/><text x="0.5120%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="0.4667%" y="149" width="0.0500%" height="15" fill="rgb(226,40,1)" fg:x="765" fg:w="82"/><text x="0.7597%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5167%" y="149" width="0.0329%" height="15" fill="rgb(251,112,31)" fg:x="847" fg:w="54"/><text x="0.8097%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5497%" y="149" width="0.0329%" height="15" fill="rgb(214,3,47)" fg:x="901" fg:w="54"/><text x="0.8427%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5826%" y="149" width="0.0329%" height="15" fill="rgb(248,91,32)" fg:x="955" fg:w="54"/><text x="0.8756%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.6156%" y="149" width="0.0329%" height="15" fill="rgb(235,141,41)" fg:x="1009" fg:w="54"/><text x="0.9085%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.6485%" y="149" width="0.0421%" height="15" fill="rgb(229,19,10)" fg:x="1063" fg:w="69"/><text x="0.9415%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="0.6906%" y="149" width="0.0397%" height="15" fill="rgb(205,17,42)" fg:x="1132" fg:w="65"/><text x="0.9836%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.7303%" y="149" width="0.2477%" height="15" fill="rgb(222,178,41)" fg:x="1197" fg:w="406"/><text x="1.0232%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.9877%" y="133" width="0.0500%" height="15" fill="rgb(244,223,34)" fg:x="1619" fg:w="82"/><text x="1.2807%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.0377%" y="101" width="0.0366%" height="15" fill="rgb(205,160,31)" fg:x="1701" fg:w="60"/><text x="1.3307%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.0377%" y="117" width="0.0519%" height="15" fill="rgb(218,156,36)" fg:x="1701" fg:w="85"/><text x="1.3307%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.0951%" y="53" width="0.0183%" height="15" fill="rgb(251,150,11)" fg:x="1795" fg:w="30"/><text x="1.3881%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.0951%" y="69" width="0.0336%" height="15" fill="rgb(220,132,20)" fg:x="1795" fg:w="55"/><text x="1.3881%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.0896%" y="85" width="0.0720%" height="15" fill="rgb(217,123,0)" fg:x="1786" fg:w="118"/><text x="1.3826%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.10%)</title><rect x="1.0896%" y="101" width="0.1043%" height="15" fill="rgb(240,124,17)" fg:x="1786" fg:w="171"/><text x="1.3826%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.0896%" y="117" width="0.1074%" height="15" fill="rgb(218,16,0)" fg:x="1786" fg:w="176"/><text x="1.3826%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.0377%" y="133" width="0.2269%" height="15" fill="rgb(210,1,40)" fg:x="1701" fg:w="372"/><text x="1.3307%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.36%)</title><rect x="0.9877%" y="149" width="0.3630%" height="15" fill="rgb(213,109,54)" fg:x="1619" fg:w="595"/><text x="1.2807%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="1.3507%" y="149" width="0.0500%" height="15" fill="rgb(228,192,52)" fg:x="2214" fg:w="82"/><text x="1.6437%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="1.4007%" y="149" width="0.0342%" height="15" fill="rgb(224,116,38)" fg:x="2296" fg:w="56"/><text x="1.6937%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="1.4349%" y="149" width="0.0384%" height="15" fill="rgb(251,77,53)" fg:x="2352" fg:w="63"/><text x="1.7279%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="1.4733%" y="149" width="0.0397%" height="15" fill="rgb(234,17,54)" fg:x="2415" fg:w="65"/><text x="1.7663%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="1.5130%" y="133" width="0.2477%" height="15" fill="rgb(243,164,46)" fg:x="2480" fg:w="406"/><text x="1.8060%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="1.7705%" y="117" width="0.0500%" height="15" fill="rgb(239,23,46)" fg:x="2902" fg:w="82"/><text x="2.0634%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.8205%" y="85" width="0.0366%" height="15" fill="rgb(215,193,52)" fg:x="2984" fg:w="60"/><text x="2.1134%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.8205%" y="101" width="0.0519%" height="15" fill="rgb(247,208,29)" fg:x="2984" fg:w="85"/><text x="2.1134%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.8778%" y="37" width="0.0183%" height="15" fill="rgb(211,220,54)" fg:x="3078" fg:w="30"/><text x="2.1708%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.8778%" y="53" width="0.0336%" height="15" fill="rgb(238,196,23)" fg:x="3078" fg:w="55"/><text x="2.1708%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.8723%" y="69" width="0.0720%" height="15" fill="rgb(246,220,53)" fg:x="3069" fg:w="118"/><text x="2.1653%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.10%)</title><rect x="1.8723%" y="85" width="0.1043%" height="15" fill="rgb(234,200,19)" fg:x="3069" fg:w="171"/><text x="2.1653%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.8723%" y="101" width="0.1074%" height="15" fill="rgb(245,211,47)" fg:x="3069" fg:w="176"/><text x="2.1653%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.8205%" y="117" width="0.2269%" height="15" fill="rgb(219,28,9)" fg:x="2984" fg:w="372"/><text x="2.1134%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.36%)</title><rect x="1.7705%" y="133" width="0.3630%" height="15" fill="rgb(227,52,9)" fg:x="2902" fg:w="595"/><text x="2.0634%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="2.1334%" y="133" width="0.0500%" height="15" fill="rgb(241,151,38)" fg:x="3497" fg:w="82"/><text x="2.4264%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="2.1835%" y="133" width="0.0342%" height="15" fill="rgb(223,5,6)" fg:x="3579" fg:w="56"/><text x="2.4764%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="2.2176%" y="117" width="0.0421%" height="15" fill="rgb(211,13,6)" fg:x="3635" fg:w="69"/><text x="2.5106%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.06%)</title><rect x="2.2597%" y="117" width="0.0555%" height="15" fill="rgb(232,5,47)" fg:x="3704" fg:w="91"/><text x="2.5527%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.3153%" y="117" width="0.0384%" height="15" fill="rgb(242,181,4)" fg:x="3795" fg:w="63"/><text x="2.6082%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.17%)</title><rect x="2.2176%" y="133" width="0.1720%" height="15" fill="rgb(224,213,54)" fg:x="3635" fg:w="282"/><text x="2.5106%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.3897%" y="133" width="0.0500%" height="15" fill="rgb(225,8,31)" fg:x="3917" fg:w="82"/><text x="2.6827%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 1.05%)</title><rect x="1.5130%" y="149" width="1.0506%" height="15" fill="rgb(232,134,54)" fg:x="2480" fg:w="1722"/><text x="1.8060%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.5636%" y="149" width="0.0384%" height="15" fill="rgb(252,139,26)" fg:x="4202" fg:w="63"/><text x="2.8565%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.6313%" y="133" width="0.0500%" height="15" fill="rgb(252,60,2)" fg:x="4313" fg:w="82"/><text x="2.9242%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.10%)</title><rect x="2.6313%" y="149" width="0.1007%" height="15" fill="rgb(247,62,16)" fg:x="4313" fg:w="165"/><text x="2.9242%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.7319%" y="117" width="0.0500%" height="15" fill="rgb(216,189,52)" fg:x="4478" fg:w="82"/><text x="3.0249%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.07%)</title><rect x="2.7319%" y="133" width="0.0708%" height="15" fill="rgb(216,144,24)" fg:x="4478" fg:w="116"/><text x="3.0249%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.11%)</title><rect x="2.7319%" y="149" width="0.1123%" height="15" fill="rgb(244,80,24)" fg:x="4478" fg:w="184"/><text x="3.0249%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.8442%" y="149" width="0.0500%" height="15" fill="rgb(207,91,46)" fg:x="4662" fg:w="82"/><text x="3.1372%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="2.8942%" y="149" width="0.0494%" height="15" fill="rgb(247,125,35)" fg:x="4744" fg:w="81"/><text x="3.1872%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9436%" y="149" width="0.0500%" height="15" fill="rgb(236,154,43)" fg:x="4825" fg:w="82"/><text x="3.2366%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9937%" y="149" width="0.0500%" height="15" fill="rgb(218,149,20)" fg:x="4907" fg:w="82"/><text x="3.2866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="3.0449%" y="149" width="0.0494%" height="15" fill="rgb(211,75,21)" fg:x="4991" fg:w="81"/><text x="3.3379%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.24%)</title><rect x="3.0943%" y="149" width="0.2434%" height="15" fill="rgb(219,122,25)" fg:x="5072" fg:w="399"/><text x="3.3873%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.24%)</title><rect x="3.3377%" y="149" width="0.2434%" height="15" fill="rgb(253,73,3)" fg:x="5471" fg:w="399"/><text x="3.6307%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,506 instructions, 3.97%)</title><rect x="0.1769%" y="165" width="3.9692%" height="15" fill="rgb(234,172,34)" fg:x="290" fg:w="6506"/><text x="0.4699%" y="175.50">can..</text></g><g><title>memcpy (354 instructions, 0.22%)</title><rect x="4.1461%" y="165" width="0.2160%" height="15" fill="rgb(215,215,6)" fg:x="6796" fg:w="354"/><text x="4.4391%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.02%)</title><rect x="4.3621%" y="165" width="0.0238%" height="15" fill="rgb(238,102,9)" fg:x="7150" fg:w="39"/><text x="4.6550%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.3859%" y="165" width="0.0500%" height="15" fill="rgb(248,153,40)" fg:x="7189" fg:w="82"/><text x="4.6788%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.4389%" y="133" width="0.0323%" height="15" fill="rgb(219,9,54)" fg:x="7276" fg:w="53"/><text x="4.7319%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.4713%" y="133" width="0.0537%" height="15" fill="rgb(230,33,18)" fg:x="7329" fg:w="88"/><text x="4.7642%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="4.5250%" y="133" width="0.0988%" height="15" fill="rgb(239,180,40)" fg:x="7417" fg:w="162"/><text x="4.8179%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.4389%" y="149" width="0.3294%" height="15" fill="rgb(237,41,38)" fg:x="7276" fg:w="540"/><text x="4.7319%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.46%)</title><rect x="4.4359%" y="165" width="0.4569%" height="15" fill="rgb(210,218,29)" fg:x="7271" fg:w="749"/><text x="4.7289%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.8928%" y="165" width="0.0500%" height="15" fill="rgb(214,228,42)" fg:x="8020" fg:w="82"/><text x="5.1858%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.9459%" y="133" width="0.0323%" height="15" fill="rgb(239,88,5)" fg:x="8107" fg:w="53"/><text x="5.2389%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.9783%" y="133" width="0.0537%" height="15" fill="rgb(232,125,30)" fg:x="8160" fg:w="88"/><text x="5.2712%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="5.0319%" y="133" width="0.0988%" height="15" fill="rgb(213,141,27)" fg:x="8248" fg:w="162"/><text x="5.3249%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.9459%" y="149" width="0.3294%" height="15" fill="rgb(219,148,44)" fg:x="8107" fg:w="540"/><text x="5.2389%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.04%)</title><rect x="5.2754%" y="149" width="0.0415%" height="15" fill="rgb(228,215,50)" fg:x="8647" fg:w="68"/><text x="5.5683%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="5.3168%" y="133" width="0.0494%" height="15" fill="rgb(222,78,27)" fg:x="8715" fg:w="81"/><text x="5.6098%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.07%)</title><rect x="5.3168%" y="149" width="0.0659%" height="15" fill="rgb(242,81,28)" fg:x="8715" fg:w="108"/><text x="5.6098%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 0.54%)</title><rect x="4.9429%" y="165" width="0.5430%" height="15" fill="rgb(249,84,54)" fg:x="8102" fg:w="890"/><text x="5.2358%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="5.4858%" y="117" width="0.0323%" height="15" fill="rgb(215,153,0)" fg:x="8992" fg:w="53"/><text x="5.7788%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.05%)</title><rect x="5.4858%" y="133" width="0.0476%" height="15" fill="rgb(242,47,18)" fg:x="8992" fg:w="78"/><text x="5.7788%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.18%)</title><rect x="5.4858%" y="149" width="0.1788%" height="15" fill="rgb(229,119,32)" fg:x="8992" fg:w="293"/><text x="5.7788%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.29%)</title><rect x="5.4858%" y="165" width="0.2916%" height="15" fill="rgb(218,71,27)" fg:x="8992" fg:w="478"/><text x="5.7788%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.03%)</title><rect x="5.7775%" y="165" width="0.0287%" height="15" fill="rgb(228,170,17)" fg:x="9470" fg:w="47"/><text x="6.0704%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.8061%" y="149" width="0.0750%" height="15" fill="rgb(226,198,26)" fg:x="9517" fg:w="123"/><text x="6.0991%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.8976%" y="149" width="0.0750%" height="15" fill="rgb(222,97,53)" fg:x="9667" fg:w="123"/><text x="6.1906%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.18%)</title><rect x="5.8061%" y="165" width="0.1830%" height="15" fill="rgb(234,9,11)" fg:x="9517" fg:w="300"/><text x="6.0991%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="5.9892%" y="149" width="0.0171%" height="15" fill="rgb(250,162,30)" fg:x="9817" fg:w="28"/><text x="6.2821%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.08%)</title><rect x="5.9892%" y="165" width="0.0824%" height="15" fill="rgb(235,1,6)" fg:x="9817" fg:w="135"/><text x="6.2821%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.25%)</title><rect x="6.0916%" y="165" width="0.2501%" height="15" fill="rgb(206,156,31)" fg:x="9985" fg:w="410"/><text x="6.3846%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.10%)</title><rect x="6.3491%" y="133" width="0.1025%" height="15" fill="rgb(219,80,25)" fg:x="10407" fg:w="168"/><text x="6.6421%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.4516%" y="101" width="0.0384%" height="15" fill="rgb(229,224,32)" fg:x="10575" fg:w="63"/><text x="6.7446%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.13%)</title><rect x="6.4516%" y="117" width="0.1269%" height="15" fill="rgb(231,140,38)" fg:x="10575" fg:w="208"/><text x="6.7446%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.14%)</title><rect x="6.4516%" y="133" width="0.1434%" height="15" fill="rgb(232,60,35)" fg:x="10575" fg:w="235"/><text x="6.7446%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (466 instructions, 0.28%)</title><rect x="6.3418%" y="149" width="0.2843%" height="15" fill="rgb(249,14,32)" fg:x="10395" fg:w="466"/><text x="6.6347%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (504 instructions, 0.31%)</title><rect x="6.3418%" y="165" width="0.3075%" height="15" fill="rgb(211,224,51)" fg:x="10395" fg:w="504"/><text x="6.6347%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="6.6493%" y="149" width="0.0336%" height="15" fill="rgb(247,136,12)" fg:x="10899" fg:w="55"/><text x="6.9422%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.6828%" y="149" width="0.0384%" height="15" fill="rgb(214,130,27)" fg:x="10954" fg:w="63"/><text x="6.9758%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.12%)</title><rect x="6.6493%" y="165" width="0.1214%" height="15" fill="rgb(243,149,15)" fg:x="10899" fg:w="199"/><text x="6.9422%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,283 instructions, 6.88%)</title><rect x="0.1269%" y="181" width="6.8835%" height="15" fill="rgb(218,46,31)" fg:x="208" fg:w="11283"/><text x="0.4199%" y="191.50">ic_cdk:..</text></g><g><title>imrc_hashmap::MAP::__getit (20 instructions, 0.01%)</title><rect x="7.0104%" y="181" width="0.0122%" height="15" fill="rgb(235,96,14)" fg:x="11491" fg:w="20"/><text x="7.3034%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="7.0226%" y="165" width="0.1220%" height="15" fill="rgb(214,183,24)" fg:x="11511" fg:w="200"/><text x="7.3156%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="7.1446%" y="133" width="1.8058%" height="15" fill="rgb(230,16,10)" fg:x="11711" fg:w="2960"/><text x="7.4376%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="7.1446%" y="149" width="1.8589%" height="15" fill="rgb(211,96,39)" fg:x="11711" fg:w="3047"/><text x="7.4376%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="9.0036%" y="149" width="0.0787%" height="15" fill="rgb(205,120,7)" fg:x="14758" fg:w="129"/><text x="9.2965%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="9.0823%" y="149" width="1.8058%" height="15" fill="rgb(216,189,52)" fg:x="14887" fg:w="2960"/><text x="9.3752%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="7.1446%" y="165" width="3.9356%" height="15" fill="rgb(228,132,33)" fg:x="11711" fg:w="6451"/><text x="7.4376%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="11.1157%" y="165" width="0.1220%" height="15" fill="rgb(223,24,19)" fg:x="18220" fg:w="200"/><text x="11.4086%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="11.2377%" y="133" width="1.8058%" height="15" fill="rgb(218,123,19)" fg:x="18420" fg:w="2960"/><text x="11.5306%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="11.2377%" y="149" width="1.8589%" height="15" fill="rgb(229,167,54)" fg:x="18420" fg:w="3047"/><text x="11.5306%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="13.0966%" y="149" width="0.0787%" height="15" fill="rgb(252,74,31)" fg:x="21467" fg:w="129"/><text x="13.3896%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="13.1753%" y="149" width="1.8058%" height="15" fill="rgb(233,5,35)" fg:x="21596" fg:w="2960"/><text x="13.4683%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="11.2377%" y="165" width="3.9356%" height="15" fill="rgb(207,23,12)" fg:x="18420" fg:w="6451"/><text x="11.5306%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.2087%" y="165" width="0.1220%" height="15" fill="rgb(254,166,40)" fg:x="24929" fg:w="200"/><text x="15.5016%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="15.3307%" y="165" width="0.1452%" height="15" fill="rgb(244,186,17)" fg:x="25129" fg:w="238"/><text x="15.6237%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.5113%" y="165" width="0.1220%" height="15" fill="rgb(249,35,15)" fg:x="25425" fg:w="200"/><text x="15.8042%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="15.6333%" y="133" width="1.8058%" height="15" fill="rgb(243,222,19)" fg:x="25625" fg:w="2960"/><text x="15.9263%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="15.6333%" y="149" width="1.8589%" height="15" fill="rgb(211,66,52)" fg:x="25625" fg:w="3047"/><text x="15.9263%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="17.4922%" y="149" width="0.0787%" height="15" fill="rgb(217,12,22)" fg:x="28672" fg:w="129"/><text x="17.7852%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="17.5709%" y="149" width="1.8058%" height="15" fill="rgb(251,96,50)" fg:x="28801" fg:w="2960"/><text x="17.8639%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="15.6333%" y="165" width="3.9356%" height="15" fill="rgb(224,143,21)" fg:x="25625" fg:w="6451"/><text x="15.9263%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="19.6043%" y="165" width="0.1220%" height="15" fill="rgb(208,229,43)" fg:x="32134" fg:w="200"/><text x="19.8973%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="19.7263%" y="133" width="1.8058%" height="15" fill="rgb(226,79,35)" fg:x="32334" fg:w="2960"/><text x="20.0193%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="19.7263%" y="149" width="1.8589%" height="15" fill="rgb(222,152,7)" fg:x="32334" fg:w="3047"/><text x="20.0193%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="21.5852%" y="149" width="0.0787%" height="15" fill="rgb(234,44,29)" fg:x="35381" fg:w="129"/><text x="21.8782%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="21.6639%" y="149" width="1.8058%" height="15" fill="rgb(232,15,51)" fg:x="35510" fg:w="2960"/><text x="21.9569%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="19.7263%" y="165" width="3.9356%" height="15" fill="rgb(232,175,44)" fg:x="32334" fg:w="6451"/><text x="20.0193%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="23.6973%" y="165" width="0.1220%" height="15" fill="rgb(218,42,2)" fg:x="38843" fg:w="200"/><text x="23.9903%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="23.8193%" y="165" width="0.1824%" height="15" fill="rgb(226,89,32)" fg:x="39043" fg:w="299"/><text x="24.1123%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.0371%" y="165" width="0.1220%" height="15" fill="rgb(212,222,31)" fg:x="39400" fg:w="200"/><text x="24.3301%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="24.1592%" y="165" width="0.1452%" height="15" fill="rgb(241,132,23)" fg:x="39600" fg:w="238"/><text x="24.4521%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.3397%" y="165" width="0.1220%" height="15" fill="rgb(238,45,54)" fg:x="39896" fg:w="200"/><text x="24.6327%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="24.4618%" y="133" width="1.8058%" height="15" fill="rgb(213,195,43)" fg:x="40096" fg:w="2960"/><text x="24.7547%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="24.4618%" y="149" width="1.8589%" height="15" fill="rgb(247,127,52)" fg:x="40096" fg:w="3047"/><text x="24.7547%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="26.3207%" y="149" width="0.0787%" height="15" fill="rgb(223,21,44)" fg:x="43143" fg:w="129"/><text x="26.6136%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="26.3994%" y="149" width="1.8058%" height="15" fill="rgb(209,189,33)" fg:x="43272" fg:w="2960"/><text x="26.6923%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="24.4618%" y="165" width="3.9356%" height="15" fill="rgb(208,109,29)" fg:x="40096" fg:w="6451"/><text x="24.7547%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="28.4328%" y="165" width="0.1220%" height="15" fill="rgb(216,219,1)" fg:x="46605" fg:w="200"/><text x="28.7257%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="28.5548%" y="133" width="1.8058%" height="15" fill="rgb(234,149,17)" fg:x="46805" fg:w="2960"/><text x="28.8478%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="28.5548%" y="149" width="1.8589%" height="15" fill="rgb(209,132,35)" fg:x="46805" fg:w="3047"/><text x="28.8478%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="30.4137%" y="149" width="0.0787%" height="15" fill="rgb(225,78,7)" fg:x="49852" fg:w="129"/><text x="30.7067%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="30.4924%" y="149" width="1.8058%" height="15" fill="rgb(246,160,29)" fg:x="49981" fg:w="2960"/><text x="30.7854%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="28.5548%" y="165" width="3.9356%" height="15" fill="rgb(235,64,31)" fg:x="46805" fg:w="6451"/><text x="28.8478%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="32.5258%" y="165" width="0.1220%" height="15" fill="rgb(239,110,27)" fg:x="53314" fg:w="200"/><text x="32.8188%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="32.6478%" y="133" width="1.8058%" height="15" fill="rgb(227,71,28)" fg:x="53514" fg:w="2960"/><text x="32.9408%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="32.6478%" y="149" width="1.8589%" height="15" fill="rgb(211,206,15)" fg:x="53514" fg:w="3047"/><text x="32.9408%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="34.5067%" y="149" width="0.0787%" height="15" fill="rgb(216,48,14)" fg:x="56561" fg:w="129"/><text x="34.7997%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="34.5854%" y="149" width="1.8058%" height="15" fill="rgb(253,166,26)" fg:x="56690" fg:w="2960"/><text x="34.8784%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="32.6478%" y="165" width="3.9356%" height="15" fill="rgb(227,10,25)" fg:x="53514" fg:w="6451"/><text x="32.9408%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="36.6188%" y="165" width="0.1220%" height="15" fill="rgb(215,106,24)" fg:x="60023" fg:w="200"/><text x="36.9118%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="36.7408%" y="165" width="0.1452%" height="15" fill="rgb(231,26,34)" fg:x="60223" fg:w="238"/><text x="37.0338%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="36.9214%" y="165" width="0.1220%" height="15" fill="rgb(205,92,17)" fg:x="60519" fg:w="200"/><text x="37.2144%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="37.0434%" y="165" width="0.1452%" height="15" fill="rgb(248,27,7)" fg:x="60719" fg:w="238"/><text x="37.3364%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.2240%" y="165" width="0.1220%" height="15" fill="rgb(250,143,40)" fg:x="61015" fg:w="200"/><text x="37.5170%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="37.3460%" y="165" width="0.1452%" height="15" fill="rgb(246,39,5)" fg:x="61215" fg:w="238"/><text x="37.6390%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.5266%" y="165" width="0.1220%" height="15" fill="rgb(219,78,49)" fg:x="61511" fg:w="200"/><text x="37.8196%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="37.6486%" y="133" width="1.8058%" height="15" fill="rgb(241,157,21)" fg:x="61711" fg:w="2960"/><text x="37.9416%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="37.6486%" y="149" width="1.8589%" height="15" fill="rgb(249,92,4)" fg:x="61711" fg:w="3047"/><text x="37.9416%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="39.5075%" y="149" width="0.0787%" height="15" fill="rgb(225,93,50)" fg:x="64758" fg:w="129"/><text x="39.8005%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="39.5862%" y="149" width="1.8058%" height="15" fill="rgb(210,157,44)" fg:x="64887" fg:w="2960"/><text x="39.8792%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="37.6486%" y="165" width="3.9356%" height="15" fill="rgb(249,43,36)" fg:x="61711" fg:w="6451"/><text x="37.9416%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.6196%" y="165" width="0.1220%" height="15" fill="rgb(253,222,19)" fg:x="68220" fg:w="200"/><text x="41.9126%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="41.7417%" y="165" width="0.1452%" height="15" fill="rgb(237,177,12)" fg:x="68420" fg:w="238"/><text x="42.0346%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.9222%" y="165" width="0.1220%" height="15" fill="rgb(205,131,11)" fg:x="68716" fg:w="200"/><text x="42.2152%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="42.0443%" y="165" width="0.1452%" height="15" fill="rgb(205,186,12)" fg:x="68916" fg:w="238"/><text x="42.3372%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.2248%" y="165" width="0.1220%" height="15" fill="rgb(226,42,33)" fg:x="69212" fg:w="200"/><text x="42.5178%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="42.3469%" y="165" width="0.1452%" height="15" fill="rgb(232,105,19)" fg:x="69412" fg:w="238"/><text x="42.6398%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.5274%" y="165" width="0.1220%" height="15" fill="rgb(206,68,23)" fg:x="69708" fg:w="200"/><text x="42.8204%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="42.6495%" y="165" width="0.1452%" height="15" fill="rgb(249,179,22)" fg:x="69908" fg:w="238"/><text x="42.9424%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.8300%" y="165" width="0.1220%" height="15" fill="rgb(232,27,43)" fg:x="70204" fg:w="200"/><text x="43.1230%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="42.9521%" y="165" width="0.1824%" height="15" fill="rgb(234,85,41)" fg:x="70404" fg:w="299"/><text x="43.2450%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="43.1699%" y="165" width="0.1220%" height="15" fill="rgb(233,141,41)" fg:x="70761" fg:w="200"/><text x="43.4628%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="43.2919%" y="133" width="1.8058%" height="15" fill="rgb(224,159,30)" fg:x="70961" fg:w="2960"/><text x="43.5848%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="43.2919%" y="149" width="1.8589%" height="15" fill="rgb(223,123,24)" fg:x="70961" fg:w="3047"/><text x="43.5848%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="45.1508%" y="149" width="0.0787%" height="15" fill="rgb(210,203,1)" fg:x="74008" fg:w="129"/><text x="45.4437%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="45.2295%" y="149" width="1.8058%" height="15" fill="rgb(217,25,47)" fg:x="74137" fg:w="2960"/><text x="45.5225%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="43.2919%" y="165" width="3.9356%" height="15" fill="rgb(239,201,22)" fg:x="70961" fg:w="6451"/><text x="43.5848%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="47.2629%" y="165" width="0.1220%" height="15" fill="rgb(235,226,51)" fg:x="77470" fg:w="200"/><text x="47.5558%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="47.3849%" y="133" width="1.8058%" height="15" fill="rgb(252,188,44)" fg:x="77670" fg:w="2960"/><text x="47.6779%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="47.3849%" y="149" width="1.8589%" height="15" fill="rgb(231,46,49)" fg:x="77670" fg:w="3047"/><text x="47.6779%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="49.2438%" y="149" width="0.0787%" height="15" fill="rgb(230,147,38)" fg:x="80717" fg:w="129"/><text x="49.5368%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="49.3225%" y="149" width="1.8058%" height="15" fill="rgb(234,188,26)" fg:x="80846" fg:w="2960"/><text x="49.6155%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="47.3849%" y="165" width="3.9356%" height="15" fill="rgb(234,110,23)" fg:x="77670" fg:w="6451"/><text x="47.6779%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.3559%" y="165" width="0.1220%" height="15" fill="rgb(246,71,6)" fg:x="84179" fg:w="200"/><text x="51.6489%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="51.4779%" y="165" width="0.1824%" height="15" fill="rgb(218,173,28)" fg:x="84379" fg:w="299"/><text x="51.7709%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.6957%" y="165" width="0.1220%" height="15" fill="rgb(236,71,39)" fg:x="84736" fg:w="200"/><text x="51.9887%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="51.8177%" y="165" width="0.1824%" height="15" fill="rgb(231,183,10)" fg:x="84936" fg:w="299"/><text x="52.1107%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.0355%" y="165" width="0.1220%" height="15" fill="rgb(237,50,19)" fg:x="85293" fg:w="200"/><text x="52.3285%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="52.1575%" y="165" width="0.1452%" height="15" fill="rgb(254,216,4)" fg:x="85493" fg:w="238"/><text x="52.4505%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.3381%" y="165" width="0.1220%" height="15" fill="rgb(235,80,21)" fg:x="85789" fg:w="200"/><text x="52.6311%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="52.4601%" y="165" width="0.1452%" height="15" fill="rgb(241,105,17)" fg:x="85989" fg:w="238"/><text x="52.7531%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.6407%" y="165" width="0.1220%" height="15" fill="rgb(206,194,41)" fg:x="86285" fg:w="200"/><text x="52.9337%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="52.7627%" y="165" width="0.1824%" height="15" fill="rgb(213,165,26)" fg:x="86485" fg:w="299"/><text x="53.0557%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.9805%" y="165" width="0.1220%" height="15" fill="rgb(211,156,11)" fg:x="86842" fg:w="200"/><text x="53.2735%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="53.1026%" y="165" width="0.1452%" height="15" fill="rgb(237,172,32)" fg:x="87042" fg:w="238"/><text x="53.3955%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.2831%" y="165" width="0.1220%" height="15" fill="rgb(231,143,18)" fg:x="87338" fg:w="200"/><text x="53.5761%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="53.4052%" y="165" width="0.1452%" height="15" fill="rgb(224,108,24)" fg:x="87538" fg:w="238"/><text x="53.6981%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.5857%" y="165" width="0.1220%" height="15" fill="rgb(247,105,15)" fg:x="87834" fg:w="200"/><text x="53.8787%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="53.7078%" y="133" width="1.8058%" height="15" fill="rgb(251,20,11)" fg:x="88034" fg:w="2960"/><text x="54.0007%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="53.7078%" y="149" width="1.8589%" height="15" fill="rgb(212,88,54)" fg:x="88034" fg:w="3047"/><text x="54.0007%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="55.5667%" y="149" width="0.0787%" height="15" fill="rgb(210,73,24)" fg:x="91081" fg:w="129"/><text x="55.8596%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="55.6454%" y="149" width="1.8058%" height="15" fill="rgb(239,81,1)" fg:x="91210" fg:w="2960"/><text x="55.9383%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="53.7078%" y="165" width="3.9356%" height="15" fill="rgb(236,48,13)" fg:x="88034" fg:w="6451"/><text x="54.0007%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.6788%" y="165" width="0.1220%" height="15" fill="rgb(238,33,9)" fg:x="94543" fg:w="200"/><text x="57.9717%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="57.8008%" y="165" width="0.1452%" height="15" fill="rgb(235,104,4)" fg:x="94743" fg:w="238"/><text x="58.0938%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.9814%" y="165" width="0.1220%" height="15" fill="rgb(219,72,45)" fg:x="95039" fg:w="200"/><text x="58.2743%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="58.1034%" y="165" width="0.1824%" height="15" fill="rgb(243,8,22)" fg:x="95239" fg:w="299"/><text x="58.3964%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.3212%" y="165" width="0.1220%" height="15" fill="rgb(239,187,53)" fg:x="95596" fg:w="200"/><text x="58.6142%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="58.4432%" y="165" width="0.1452%" height="15" fill="rgb(223,42,45)" fg:x="95796" fg:w="238"/><text x="58.7362%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.6238%" y="165" width="0.1220%" height="15" fill="rgb(210,11,52)" fg:x="96092" fg:w="200"/><text x="58.9168%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="58.7458%" y="133" width="1.8058%" height="15" fill="rgb(234,60,30)" fg:x="96292" fg:w="2960"/><text x="59.0388%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="58.7458%" y="149" width="1.8589%" height="15" fill="rgb(241,129,33)" fg:x="96292" fg:w="3047"/><text x="59.0388%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="60.6047%" y="149" width="0.0787%" height="15" fill="rgb(246,87,3)" fg:x="99339" fg:w="129"/><text x="60.8977%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="60.6834%" y="149" width="1.8058%" height="15" fill="rgb(218,155,23)" fg:x="99468" fg:w="2960"/><text x="60.9764%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="58.7458%" y="165" width="3.9356%" height="15" fill="rgb(248,228,8)" fg:x="96292" fg:w="6451"/><text x="59.0388%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="62.7168%" y="165" width="0.1220%" height="15" fill="rgb(210,14,14)" fg:x="102801" fg:w="200"/><text x="63.0098%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="62.8388%" y="133" width="1.8058%" height="15" fill="rgb(207,205,5)" fg:x="103001" fg:w="2960"/><text x="63.1318%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="62.8388%" y="149" width="1.8589%" height="15" fill="rgb(205,191,11)" fg:x="103001" fg:w="3047"/><text x="63.1318%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="64.6977%" y="149" width="0.0787%" height="15" fill="rgb(216,156,6)" fg:x="106048" fg:w="129"/><text x="64.9907%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="64.7764%" y="149" width="1.8058%" height="15" fill="rgb(236,85,54)" fg:x="106177" fg:w="2960"/><text x="65.0694%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="62.8388%" y="165" width="3.9356%" height="15" fill="rgb(251,208,6)" fg:x="103001" fg:w="6451"/><text x="63.1318%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="66.8098%" y="165" width="0.1220%" height="15" fill="rgb(227,75,6)" fg:x="109510" fg:w="200"/><text x="67.1028%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="66.9318%" y="165" width="0.1452%" height="15" fill="rgb(236,151,9)" fg:x="109710" fg:w="238"/><text x="67.2248%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.1124%" y="165" width="0.1220%" height="15" fill="rgb(210,37,32)" fg:x="110006" fg:w="200"/><text x="67.4054%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="67.2344%" y="165" width="0.1824%" height="15" fill="rgb(221,173,15)" fg:x="110206" fg:w="299"/><text x="67.5274%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.4522%" y="165" width="0.1220%" height="15" fill="rgb(235,12,0)" fg:x="110563" fg:w="200"/><text x="67.7452%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="67.5743%" y="133" width="1.8058%" height="15" fill="rgb(245,85,41)" fg:x="110763" fg:w="2960"/><text x="67.8672%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="67.5743%" y="149" width="1.8589%" height="15" fill="rgb(222,198,46)" fg:x="110763" fg:w="3047"/><text x="67.8672%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="69.4332%" y="149" width="0.0787%" height="15" fill="rgb(242,153,43)" fg:x="113810" fg:w="129"/><text x="69.7261%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="69.5119%" y="149" width="1.8058%" height="15" fill="rgb(249,61,51)" fg:x="113939" fg:w="2960"/><text x="69.8048%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,512 instructions, 3.97%)</title><rect x="67.5743%" y="165" width="3.9728%" height="15" fill="rgb(242,183,25)" fg:x="110763" fg:w="6512"/><text x="67.8672%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="71.5825%" y="165" width="0.1220%" height="15" fill="rgb(241,199,21)" fg:x="117333" fg:w="200"/><text x="71.8755%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="71.7045%" y="133" width="1.8058%" height="15" fill="rgb(212,73,1)" fg:x="117533" fg:w="2960"/><text x="71.9975%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="71.7045%" y="149" width="1.8589%" height="15" fill="rgb(228,28,43)" fg:x="117533" fg:w="3047"/><text x="71.9975%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="73.5634%" y="149" width="0.0787%" height="15" fill="rgb(250,199,49)" fg:x="120580" fg:w="129"/><text x="73.8564%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="73.6421%" y="149" width="1.8058%" height="15" fill="rgb(249,26,10)" fg:x="120709" fg:w="2960"/><text x="73.9351%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="71.7045%" y="165" width="3.9356%" height="15" fill="rgb(219,219,16)" fg:x="117533" fg:w="6451"/><text x="71.9975%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.6755%" y="165" width="0.1220%" height="15" fill="rgb(230,45,47)" fg:x="124042" fg:w="200"/><text x="75.9685%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="75.7975%" y="165" width="0.1452%" height="15" fill="rgb(207,86,0)" fg:x="124242" fg:w="238"/><text x="76.0905%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.9781%" y="165" width="0.1220%" height="15" fill="rgb(234,171,48)" fg:x="124538" fg:w="200"/><text x="76.2711%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="76.1001%" y="165" width="0.1824%" height="15" fill="rgb(244,133,35)" fg:x="124738" fg:w="299"/><text x="76.3931%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="76.3179%" y="165" width="0.1220%" height="15" fill="rgb(218,176,16)" fg:x="125095" fg:w="200"/><text x="76.6109%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="76.4399%" y="133" width="1.8058%" height="15" fill="rgb(244,64,27)" fg:x="125295" fg:w="2960"/><text x="76.7329%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="76.4399%" y="149" width="1.8589%" height="15" fill="rgb(221,0,25)" fg:x="125295" fg:w="3047"/><text x="76.7329%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="78.2989%" y="149" width="0.0787%" height="15" fill="rgb(249,190,39)" fg:x="128342" fg:w="129"/><text x="78.5918%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="78.3776%" y="149" width="1.8058%" height="15" fill="rgb(251,83,22)" fg:x="128471" fg:w="2960"/><text x="78.6705%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="76.4399%" y="165" width="3.9356%" height="15" fill="rgb(214,85,29)" fg:x="125295" fg:w="6451"/><text x="76.7329%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="80.4109%" y="165" width="0.1220%" height="15" fill="rgb(229,138,36)" fg:x="131804" fg:w="200"/><text x="80.7039%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="80.5330%" y="133" width="1.8058%" height="15" fill="rgb(205,124,19)" fg:x="132004" fg:w="2960"/><text x="80.8259%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="80.5330%" y="149" width="1.8589%" height="15" fill="rgb(234,27,39)" fg:x="132004" fg:w="3047"/><text x="80.8259%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="82.3919%" y="149" width="0.0787%" height="15" fill="rgb(231,127,19)" fg:x="135051" fg:w="129"/><text x="82.6848%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="82.4706%" y="149" width="1.8058%" height="15" fill="rgb(218,99,54)" fg:x="135180" fg:w="2960"/><text x="82.7635%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="80.5330%" y="165" width="3.9356%" height="15" fill="rgb(230,215,10)" fg:x="132004" fg:w="6451"/><text x="80.8259%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.5040%" y="165" width="0.1220%" height="15" fill="rgb(211,36,3)" fg:x="138513" fg:w="200"/><text x="84.7969%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="84.6260%" y="165" width="0.1824%" height="15" fill="rgb(212,120,19)" fg:x="138713" fg:w="299"/><text x="84.9190%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.8438%" y="165" width="0.1220%" height="15" fill="rgb(248,70,43)" fg:x="139070" fg:w="200"/><text x="85.1368%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="84.9658%" y="165" width="0.1452%" height="15" fill="rgb(228,24,9)" fg:x="139270" fg:w="238"/><text x="85.2588%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="85.1464%" y="165" width="0.1220%" height="15" fill="rgb(206,41,1)" fg:x="139566" fg:w="200"/><text x="85.4394%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="85.2684%" y="133" width="1.8058%" height="15" fill="rgb(206,28,49)" fg:x="139766" fg:w="2960"/><text x="85.5614%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="85.2684%" y="149" width="1.8589%" height="15" fill="rgb(206,26,23)" fg:x="139766" fg:w="3047"/><text x="85.5614%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="87.1273%" y="149" width="0.0787%" height="15" fill="rgb(242,89,2)" fg:x="142813" fg:w="129"/><text x="87.4203%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="87.2060%" y="149" width="1.8058%" height="15" fill="rgb(241,224,47)" fg:x="142942" fg:w="2960"/><text x="87.4990%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="85.2684%" y="165" width="3.9356%" height="15" fill="rgb(225,223,16)" fg:x="139766" fg:w="6451"/><text x="85.5614%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.2394%" y="165" width="0.1220%" height="15" fill="rgb(243,171,22)" fg:x="146275" fg:w="200"/><text x="89.5324%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (299 instructions, 0.18%)</title><rect x="89.3614%" y="165" width="0.1824%" height="15" fill="rgb(239,20,25)" fg:x="146475" fg:w="299"/><text x="89.6544%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.5792%" y="165" width="0.1220%" height="15" fill="rgb(211,126,11)" fg:x="146832" fg:w="200"/><text x="89.8722%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="89.7012%" y="133" width="1.8058%" height="15" fill="rgb(238,54,15)" fg:x="147032" fg:w="2960"/><text x="89.9942%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="89.7012%" y="149" width="1.8589%" height="15" fill="rgb(212,37,46)" fg:x="147032" fg:w="3047"/><text x="89.9942%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="91.5602%" y="149" width="0.0787%" height="15" fill="rgb(247,192,34)" fg:x="150079" fg:w="129"/><text x="91.8531%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="91.6389%" y="149" width="1.8058%" height="15" fill="rgb(236,119,52)" fg:x="150208" fg:w="2960"/><text x="91.9318%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="89.7012%" y="165" width="3.9356%" height="15" fill="rgb(249,196,51)" fg:x="147032" fg:w="6451"/><text x="89.9942%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.6723%" y="165" width="0.1220%" height="15" fill="rgb(224,92,6)" fg:x="153541" fg:w="200"/><text x="93.9652%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="93.7943%" y="165" width="0.1452%" height="15" fill="rgb(244,67,21)" fg:x="153741" fg:w="238"/><text x="94.0872%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.9749%" y="165" width="0.1220%" height="15" fill="rgb(237,195,22)" fg:x="154037" fg:w="200"/><text x="94.2678%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (238 instructions, 0.15%)</title><rect x="94.0969%" y="165" width="0.1452%" height="15" fill="rgb(244,120,9)" fg:x="154237" fg:w="238"/><text x="94.3898%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="94.2775%" y="165" width="0.1220%" height="15" fill="rgb(235,216,4)" fg:x="154533" fg:w="200"/><text x="94.5704%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="94.3995%" y="133" width="1.8058%" height="15" fill="rgb(248,178,11)" fg:x="154733" fg:w="2960"/><text x="94.6924%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.86%)</title><rect x="94.3995%" y="149" width="1.8589%" height="15" fill="rgb(228,198,10)" fg:x="154733" fg:w="3047"/><text x="94.6924%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="96.2584%" y="149" width="0.0787%" height="15" fill="rgb(217,174,18)" fg:x="157780" fg:w="129"/><text x="96.5513%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="96.3371%" y="149" width="1.8058%" height="15" fill="rgb(240,208,22)" fg:x="157909" fg:w="2960"/><text x="96.6301%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,451 instructions, 3.94%)</title><rect x="94.3995%" y="165" width="3.9356%" height="15" fill="rgb(250,229,17)" fg:x="154733" fg:w="6451"/><text x="94.6924%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (149,731 instructions, 91.35%)</title><rect x="7.0226%" y="181" width="91.3478%" height="15" fill="rgb(253,11,4)" fg:x="11511" fg:w="149731"/><text x="7.3156%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.3735%" y="117" width="0.0336%" height="15" fill="rgb(243,184,38)" fg:x="161247" fg:w="55"/><text x="98.6665%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="98.4071%" y="117" width="0.0384%" height="15" fill="rgb(207,60,37)" fg:x="161302" fg:w="63"/><text x="98.7001%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (202 instructions, 0.12%)</title><rect x="98.3735%" y="133" width="0.1232%" height="15" fill="rgb(226,145,0)" fg:x="161247" fg:w="202"/><text x="98.6665%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (229 instructions, 0.14%)</title><rect x="98.3735%" y="149" width="0.1397%" height="15" fill="rgb(253,173,21)" fg:x="161247" fg:w="229"/><text x="98.6665%" y="159.50"></text></g><g><title>memset (136 instructions, 0.08%)</title><rect x="98.5132%" y="149" width="0.0830%" height="15" fill="rgb(227,85,10)" fg:x="161476" fg:w="136"/><text x="98.8062%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (529 instructions, 0.32%)</title><rect x="98.3705%" y="165" width="0.3227%" height="15" fill="rgb(237,198,17)" fg:x="161242" fg:w="529"/><text x="98.6634%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.02%)</title><rect x="98.6932%" y="149" width="0.0195%" height="15" fill="rgb(228,137,40)" fg:x="161771" fg:w="32"/><text x="98.9862%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.7127%" y="85" width="0.0336%" height="15" fill="rgb(215,201,52)" fg:x="161803" fg:w="55"/><text x="99.0057%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.10%)</title><rect x="98.7127%" y="101" width="0.0994%" height="15" fill="rgb(229,18,52)" fg:x="161803" fg:w="163"/><text x="99.0057%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (197 instructions, 0.12%)</title><rect x="98.7127%" y="117" width="0.1202%" height="15" fill="rgb(223,196,12)" fg:x="161803" fg:w="197"/><text x="99.0057%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (262 instructions, 0.16%)</title><rect x="98.7127%" y="133" width="0.1598%" height="15" fill="rgb(215,64,5)" fg:x="161803" fg:w="262"/><text x="99.0057%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (446 instructions, 0.27%)</title><rect x="98.7127%" y="149" width="0.2721%" height="15" fill="rgb(210,67,8)" fg:x="161803" fg:w="446"/><text x="99.0057%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.02%)</title><rect x="98.9848%" y="149" width="0.0183%" height="15" fill="rgb(209,37,49)" fg:x="162249" fg:w="30"/><text x="99.2778%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (581 instructions, 0.35%)</title><rect x="98.6932%" y="165" width="0.3545%" height="15" fill="rgb(232,175,28)" fg:x="161771" fg:w="581"/><text x="98.9862%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.03%)</title><rect x="99.0507%" y="165" width="0.0336%" height="15" fill="rgb(234,160,31)" fg:x="162357" fg:w="55"/><text x="99.3437%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,244 instructions, 0.76%)</title><rect x="98.3705%" y="181" width="0.7589%" height="15" fill="rgb(242,190,5)" fg:x="161242" fg:w="1244"/><text x="98.6634%" y="191.50"></text></g><g><title>imrc_hashmap::batch_put_6_::{{closure}} (163,388 instructions, 99.68%)</title><rect x="0.1269%" y="197" width="99.6797%" height="15" fill="rgb(225,30,16)" fg:x="208" fg:w="163388"/><text x="0.4199%" y="207.50">imrc_hashmap::batch_put_6_::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="99.8139%" y="197" width="0.0494%" height="15" fill="rgb(225,3,47)" fg:x="163608" fg:w="81"/><text x="100.1069%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.08%)</title><rect x="99.8633%" y="197" width="0.0769%" height="15" fill="rgb(205,132,6)" fg:x="163689" fg:w="126"/><text x="100.1563%" y="207.50"></text></g><g><title>all (163,913 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,150,0)" fg:x="0" fg:w="163913"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (163,913 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,135,11)" fg:x="0" fg:w="163913"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>