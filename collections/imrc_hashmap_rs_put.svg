<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="178926"><g><title>ic_cdk::setup (24 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0134%" height="15" fill="rgb(218,96,19)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (115 instructions, 0.06%)</title><rect x="0.0134%" y="197" width="0.0643%" height="15" fill="rgb(253,78,51)" fg:x="24" fg:w="115"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.04%)</title><rect x="0.0777%" y="197" width="0.0447%" height="15" fill="rgb(213,90,50)" fg:x="139" fg:w="80"/><text x="0.3707%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.1224%" y="165" width="0.0509%" height="15" fill="rgb(224,22,44)" fg:x="219" fg:w="91"/><text x="0.4154%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.1733%" y="149" width="0.0458%" height="15" fill="rgb(232,71,38)" fg:x="310" fg:w="82"/><text x="0.4662%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="0.2191%" y="149" width="0.2476%" height="15" fill="rgb(216,41,1)" fg:x="392" fg:w="443"/><text x="0.5121%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="0.4667%" y="149" width="0.0531%" height="15" fill="rgb(235,166,38)" fg:x="835" fg:w="95"/><text x="0.7596%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5198%" y="149" width="0.0335%" height="15" fill="rgb(249,3,4)" fg:x="930" fg:w="60"/><text x="0.8127%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5533%" y="149" width="0.0335%" height="15" fill="rgb(244,38,41)" fg:x="990" fg:w="60"/><text x="0.8463%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5868%" y="149" width="0.0335%" height="15" fill="rgb(233,211,6)" fg:x="1050" fg:w="60"/><text x="0.8798%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.6204%" y="149" width="0.0335%" height="15" fill="rgb(245,164,5)" fg:x="1110" fg:w="60"/><text x="0.9133%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.6539%" y="149" width="0.0458%" height="15" fill="rgb(218,122,42)" fg:x="1170" fg:w="82"/><text x="0.9469%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="0.6997%" y="149" width="0.0391%" height="15" fill="rgb(236,8,10)" fg:x="1252" fg:w="70"/><text x="0.9927%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="0.7389%" y="149" width="0.2476%" height="15" fill="rgb(236,78,24)" fg:x="1322" fg:w="443"/><text x="1.0318%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="0.9864%" y="149" width="0.0106%" height="15" fill="rgb(234,150,25)" fg:x="1765" fg:w="19"/><text x="1.2794%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.9971%" y="133" width="0.0509%" height="15" fill="rgb(235,169,24)" fg:x="1784" fg:w="91"/><text x="1.2900%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.0479%" y="101" width="0.0374%" height="15" fill="rgb(234,196,14)" fg:x="1875" fg:w="67"/><text x="1.3409%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="1.0479%" y="117" width="0.0537%" height="15" fill="rgb(225,157,20)" fg:x="1875" fg:w="96"/><text x="1.3409%" y="127.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.1077%" y="53" width="0.0196%" height="15" fill="rgb(225,1,52)" fg:x="1982" fg:w="35"/><text x="1.4007%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.04%)</title><rect x="1.1077%" y="69" width="0.0358%" height="15" fill="rgb(247,66,21)" fg:x="1982" fg:w="64"/><text x="1.4007%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.08%)</title><rect x="1.1016%" y="85" width="0.0805%" height="15" fill="rgb(229,217,39)" fg:x="1971" fg:w="144"/><text x="1.3945%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.12%)</title><rect x="1.1016%" y="101" width="0.1168%" height="15" fill="rgb(220,38,19)" fg:x="1971" fg:w="209"/><text x="1.3945%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.12%)</title><rect x="1.1016%" y="117" width="0.1224%" height="15" fill="rgb(208,61,35)" fg:x="1971" fg:w="219"/><text x="1.3945%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.25%)</title><rect x="1.0479%" y="133" width="0.2532%" height="15" fill="rgb(244,203,9)" fg:x="1875" fg:w="453"/><text x="1.3409%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (682 instructions, 0.38%)</title><rect x="0.9971%" y="149" width="0.3812%" height="15" fill="rgb(220,75,2)" fg:x="1784" fg:w="682"/><text x="1.2900%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.3782%" y="149" width="0.0531%" height="15" fill="rgb(212,149,10)" fg:x="2466" fg:w="95"/><text x="1.6712%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="1.4313%" y="149" width="0.0352%" height="15" fill="rgb(253,3,13)" fg:x="2561" fg:w="63"/><text x="1.7243%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="1.4665%" y="149" width="0.0425%" height="15" fill="rgb(248,54,46)" fg:x="2624" fg:w="76"/><text x="1.7595%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="1.5090%" y="149" width="0.0391%" height="15" fill="rgb(233,156,8)" fg:x="2700" fg:w="70"/><text x="1.8020%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="1.5481%" y="133" width="0.2476%" height="15" fill="rgb(248,224,12)" fg:x="2770" fg:w="443"/><text x="1.8411%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="1.7957%" y="133" width="0.0106%" height="15" fill="rgb(242,6,14)" fg:x="3213" fg:w="19"/><text x="2.0887%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="1.8063%" y="117" width="0.0509%" height="15" fill="rgb(250,143,0)" fg:x="3232" fg:w="91"/><text x="2.0993%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.8572%" y="85" width="0.0374%" height="15" fill="rgb(253,168,13)" fg:x="3323" fg:w="67"/><text x="2.1502%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="1.8572%" y="101" width="0.0537%" height="15" fill="rgb(215,95,25)" fg:x="3323" fg:w="96"/><text x="2.1502%" y="111.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.9170%" y="37" width="0.0196%" height="15" fill="rgb(219,76,4)" fg:x="3430" fg:w="35"/><text x="2.2100%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.04%)</title><rect x="1.9170%" y="53" width="0.0358%" height="15" fill="rgb(227,10,21)" fg:x="3430" fg:w="64"/><text x="2.2100%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.08%)</title><rect x="1.9108%" y="69" width="0.0805%" height="15" fill="rgb(254,118,37)" fg:x="3419" fg:w="144"/><text x="2.2038%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.12%)</title><rect x="1.9108%" y="85" width="0.1168%" height="15" fill="rgb(228,41,8)" fg:x="3419" fg:w="209"/><text x="2.2038%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.12%)</title><rect x="1.9108%" y="101" width="0.1224%" height="15" fill="rgb(242,165,47)" fg:x="3419" fg:w="219"/><text x="2.2038%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.25%)</title><rect x="1.8572%" y="117" width="0.2532%" height="15" fill="rgb(251,194,46)" fg:x="3323" fg:w="453"/><text x="2.1502%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (682 instructions, 0.38%)</title><rect x="1.8063%" y="133" width="0.3812%" height="15" fill="rgb(206,36,40)" fg:x="3232" fg:w="682"/><text x="2.0993%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="2.1875%" y="133" width="0.0531%" height="15" fill="rgb(245,81,24)" fg:x="3914" fg:w="95"/><text x="2.4805%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="2.2406%" y="133" width="0.0352%" height="15" fill="rgb(247,150,27)" fg:x="4009" fg:w="63"/><text x="2.5336%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="2.2758%" y="117" width="0.0458%" height="15" fill="rgb(254,170,14)" fg:x="4072" fg:w="82"/><text x="2.5688%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.05%)</title><rect x="2.3216%" y="117" width="0.0531%" height="15" fill="rgb(220,12,27)" fg:x="4154" fg:w="95"/><text x="2.6146%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.3747%" y="117" width="0.0425%" height="15" fill="rgb(217,14,38)" fg:x="4249" fg:w="76"/><text x="2.6677%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.18%)</title><rect x="2.2758%" y="133" width="0.1844%" height="15" fill="rgb(252,43,25)" fg:x="4072" fg:w="330"/><text x="2.5688%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.4602%" y="133" width="0.0509%" height="15" fill="rgb(239,29,10)" fg:x="4402" fg:w="91"/><text x="2.7532%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,966 instructions, 1.10%)</title><rect x="1.5481%" y="149" width="1.0988%" height="15" fill="rgb(244,192,9)" fg:x="2770" fg:w="1966"/><text x="1.8411%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.6469%" y="149" width="0.0425%" height="15" fill="rgb(211,95,9)" fg:x="4736" fg:w="76"/><text x="2.9399%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7201%" y="133" width="0.0509%" height="15" fill="rgb(214,192,51)" fg:x="4867" fg:w="91"/><text x="3.0131%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.10%)</title><rect x="2.7201%" y="149" width="0.1045%" height="15" fill="rgb(218,34,7)" fg:x="4867" fg:w="187"/><text x="3.0131%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.8246%" y="117" width="0.0509%" height="15" fill="rgb(225,69,23)" fg:x="5054" fg:w="91"/><text x="3.1176%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.07%)</title><rect x="2.8246%" y="133" width="0.0749%" height="15" fill="rgb(211,171,28)" fg:x="5054" fg:w="134"/><text x="3.1176%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (219 instructions, 0.12%)</title><rect x="2.8246%" y="149" width="0.1224%" height="15" fill="rgb(253,130,49)" fg:x="5054" fg:w="219"/><text x="3.1176%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.9470%" y="149" width="0.0509%" height="15" fill="rgb(244,194,0)" fg:x="5273" fg:w="91"/><text x="3.2400%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="2.9979%" y="149" width="0.0497%" height="15" fill="rgb(209,141,22)" fg:x="5364" fg:w="89"/><text x="3.2909%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0476%" y="149" width="0.0509%" height="15" fill="rgb(215,161,48)" fg:x="5453" fg:w="91"/><text x="3.3406%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0985%" y="149" width="0.0509%" height="15" fill="rgb(214,193,33)" fg:x="5544" fg:w="91"/><text x="3.3915%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="3.1516%" y="149" width="0.0497%" height="15" fill="rgb(234,47,14)" fg:x="5639" fg:w="89"/><text x="3.4446%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.2013%" y="149" width="0.2392%" height="15" fill="rgb(250,117,46)" fg:x="5728" fg:w="428"/><text x="3.4943%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.24%)</title><rect x="3.4405%" y="149" width="0.2392%" height="15" fill="rgb(233,178,46)" fg:x="6156" fg:w="428"/><text x="3.7335%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,463 instructions, 4.17%)</title><rect x="0.1733%" y="165" width="4.1710%" height="15" fill="rgb(227,174,37)" fg:x="310" fg:w="7463"/><text x="0.4662%" y="175.50">cand..</text></g><g><title>memcpy (380 instructions, 0.21%)</title><rect x="4.3443%" y="165" width="0.2124%" height="15" fill="rgb(211,188,26)" fg:x="7773" fg:w="380"/><text x="4.6372%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.02%)</title><rect x="4.5566%" y="165" width="0.0218%" height="15" fill="rgb(243,83,42)" fg:x="8153" fg:w="39"/><text x="4.8496%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.5784%" y="165" width="0.0509%" height="15" fill="rgb(223,104,8)" fg:x="8192" fg:w="91"/><text x="4.8714%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="4.6332%" y="133" width="0.0330%" height="15" fill="rgb(252,86,25)" fg:x="8290" fg:w="59"/><text x="4.9262%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="4.6662%" y="133" width="0.0525%" height="15" fill="rgb(252,215,51)" fg:x="8349" fg:w="94"/><text x="4.9591%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="4.7187%" y="133" width="0.0967%" height="15" fill="rgb(247,152,50)" fg:x="8443" fg:w="173"/><text x="5.0117%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="4.6332%" y="149" width="0.3236%" height="15" fill="rgb(212,89,50)" fg:x="8290" fg:w="579"/><text x="4.9262%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 0.45%)</title><rect x="4.6293%" y="165" width="0.4460%" height="15" fill="rgb(244,123,42)" fg:x="8283" fg:w="798"/><text x="4.9223%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="5.0753%" y="165" width="0.0509%" height="15" fill="rgb(231,12,46)" fg:x="9081" fg:w="91"/><text x="5.3683%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.1301%" y="133" width="0.0330%" height="15" fill="rgb(217,54,54)" fg:x="9179" fg:w="59"/><text x="5.4230%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="5.1630%" y="133" width="0.0525%" height="15" fill="rgb(209,136,12)" fg:x="9238" fg:w="94"/><text x="5.4560%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="5.2156%" y="133" width="0.0967%" height="15" fill="rgb(215,90,51)" fg:x="9332" fg:w="173"/><text x="5.5085%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="5.1301%" y="149" width="0.3236%" height="15" fill="rgb(252,175,12)" fg:x="9179" fg:w="579"/><text x="5.4230%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.04%)</title><rect x="5.4537%" y="149" width="0.0430%" height="15" fill="rgb(244,46,16)" fg:x="9758" fg:w="77"/><text x="5.7466%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="5.4967%" y="133" width="0.0497%" height="15" fill="rgb(206,9,54)" fg:x="9835" fg:w="89"/><text x="5.7897%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.07%)</title><rect x="5.4967%" y="149" width="0.0693%" height="15" fill="rgb(231,126,49)" fg:x="9835" fg:w="124"/><text x="5.7897%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 0.54%)</title><rect x="5.1261%" y="165" width="0.5393%" height="15" fill="rgb(247,216,4)" fg:x="9172" fg:w="965"/><text x="5.4191%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.6655%" y="117" width="0.0330%" height="15" fill="rgb(228,161,21)" fg:x="10137" fg:w="59"/><text x="5.9584%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.05%)</title><rect x="5.6655%" y="133" width="0.0520%" height="15" fill="rgb(238,30,10)" fg:x="10137" fg:w="93"/><text x="5.9584%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.18%)</title><rect x="5.6655%" y="149" width="0.1766%" height="15" fill="rgb(244,83,13)" fg:x="10137" fg:w="316"/><text x="5.9584%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.331 (18 instructions, 0.01%)</title><rect x="5.8421%" y="149" width="0.0101%" height="15" fill="rgb(252,18,31)" fg:x="10453" fg:w="18"/><text x="6.1350%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 0.30%)</title><rect x="5.6655%" y="165" width="0.2957%" height="15" fill="rgb(249,176,11)" fg:x="10137" fg:w="529"/><text x="5.9584%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.03%)</title><rect x="5.9611%" y="165" width="0.0296%" height="15" fill="rgb(251,210,33)" fg:x="10666" fg:w="53"/><text x="6.2541%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="5.9907%" y="133" width="0.0151%" height="15" fill="rgb(220,176,9)" fg:x="10719" fg:w="27"/><text x="6.2837%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.08%)</title><rect x="5.9907%" y="149" width="0.0794%" height="15" fill="rgb(214,172,28)" fg:x="10719" fg:w="142"/><text x="6.2837%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.0897%" y="133" width="0.0151%" height="15" fill="rgb(223,97,39)" fg:x="10896" fg:w="27"/><text x="6.3826%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.08%)</title><rect x="6.0897%" y="149" width="0.0794%" height="15" fill="rgb(241,136,8)" fg:x="10896" fg:w="142"/><text x="6.3826%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 0.20%)</title><rect x="5.9907%" y="165" width="0.1978%" height="15" fill="rgb(242,130,27)" fg:x="10719" fg:w="354"/><text x="6.2837%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.02%)</title><rect x="6.1886%" y="149" width="0.0190%" height="15" fill="rgb(250,180,19)" fg:x="11073" fg:w="34"/><text x="6.4816%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1310 (18 instructions, 0.01%)</title><rect x="6.2076%" y="149" width="0.0101%" height="15" fill="rgb(238,6,52)" fg:x="11107" fg:w="18"/><text x="6.5006%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1310 (18 instructions, 0.01%)</title><rect x="6.2177%" y="149" width="0.0101%" height="15" fill="rgb(250,113,4)" fg:x="11125" fg:w="18"/><text x="6.5106%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.09%)</title><rect x="6.1886%" y="165" width="0.0933%" height="15" fill="rgb(237,113,9)" fg:x="11073" fg:w="167"/><text x="6.4816%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.25%)</title><rect x="6.3037%" y="165" width="0.2459%" height="15" fill="rgb(230,136,34)" fg:x="11279" fg:w="440"/><text x="6.5967%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.5535%" y="117" width="0.0151%" height="15" fill="rgb(224,167,30)" fg:x="11726" fg:w="27"/><text x="6.8465%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.5686%" y="117" width="0.0151%" height="15" fill="rgb(238,14,33)" fg:x="11753" fg:w="27"/><text x="6.8616%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.11%)</title><rect x="6.5535%" y="133" width="0.1101%" height="15" fill="rgb(237,51,38)" fg:x="11726" fg:w="197"/><text x="6.8465%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.6636%" y="101" width="0.0151%" height="15" fill="rgb(229,11,5)" fg:x="11923" fg:w="27"/><text x="6.9566%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.6787%" y="101" width="0.0151%" height="15" fill="rgb(215,190,14)" fg:x="11950" fg:w="27"/><text x="6.9717%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="6.6938%" y="101" width="0.0380%" height="15" fill="rgb(214,203,52)" fg:x="11977" fg:w="68"/><text x="6.9868%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.14%)</title><rect x="6.6636%" y="117" width="0.1364%" height="15" fill="rgb(219,65,51)" fg:x="11923" fg:w="244"/><text x="6.9566%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (279 instructions, 0.16%)</title><rect x="6.6636%" y="133" width="0.1559%" height="15" fill="rgb(221,165,22)" fg:x="11923" fg:w="279"/><text x="6.9566%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (558 instructions, 0.31%)</title><rect x="6.5496%" y="149" width="0.3119%" height="15" fill="rgb(229,47,0)" fg:x="11719" fg:w="558"/><text x="6.8426%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (607 instructions, 0.34%)</title><rect x="6.5496%" y="165" width="0.3392%" height="15" fill="rgb(245,113,30)" fg:x="11719" fg:w="607"/><text x="6.8426%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.04%)</title><rect x="6.8889%" y="149" width="0.0386%" height="15" fill="rgb(214,67,13)" fg:x="12326" fg:w="69"/><text x="7.1819%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="6.9274%" y="149" width="0.0380%" height="15" fill="rgb(250,90,29)" fg:x="12395" fg:w="68"/><text x="7.2204%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.13%)</title><rect x="6.8889%" y="165" width="0.1291%" height="15" fill="rgb(237,226,37)" fg:x="12326" fg:w="231"/><text x="7.1819%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,808 instructions, 7.72%)</title><rect x="0.1224%" y="181" width="7.7172%" height="15" fill="rgb(226,43,28)" fg:x="219" fg:w="13808"/><text x="0.4154%" y="191.50">ic_cdk::a..</text></g><g><title>imrc_hashmap::MAP::__getit (19 instructions, 0.01%)</title><rect x="7.8396%" y="181" width="0.0106%" height="15" fill="rgb(212,99,43)" fg:x="14027" fg:w="19"/><text x="8.1325%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="7.8502%" y="165" width="0.1095%" height="15" fill="rgb(220,14,12)" fg:x="14046" fg:w="196"/><text x="8.1431%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="7.9597%" y="133" width="1.7661%" height="15" fill="rgb(236,17,0)" fg:x="14242" fg:w="3160"/><text x="8.2527%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="7.9597%" y="149" width="1.8214%" height="15" fill="rgb(233,66,43)" fg:x="14242" fg:w="3259"/><text x="8.2527%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="9.7811%" y="149" width="0.0788%" height="15" fill="rgb(214,55,41)" fg:x="17501" fg:w="141"/><text x="10.0741%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="9.8599%" y="149" width="1.7661%" height="15" fill="rgb(233,61,47)" fg:x="17642" fg:w="3160"/><text x="10.1529%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="7.9597%" y="165" width="3.8597%" height="15" fill="rgb(213,140,47)" fg:x="14242" fg:w="6906"/><text x="8.2527%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="11.8608%" y="165" width="0.1095%" height="15" fill="rgb(238,114,1)" fg:x="21222" fg:w="196"/><text x="12.1537%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="11.9703%" y="133" width="1.7661%" height="15" fill="rgb(221,48,26)" fg:x="21418" fg:w="3160"/><text x="12.2633%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="11.9703%" y="149" width="1.8214%" height="15" fill="rgb(248,23,38)" fg:x="21418" fg:w="3259"/><text x="12.2633%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="13.7917%" y="149" width="0.0788%" height="15" fill="rgb(242,67,54)" fg:x="24677" fg:w="141"/><text x="14.0847%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="13.8705%" y="149" width="1.7661%" height="15" fill="rgb(219,203,31)" fg:x="24818" fg:w="3160"/><text x="14.1635%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="11.9703%" y="165" width="3.8597%" height="15" fill="rgb(219,24,1)" fg:x="21418" fg:w="6906"/><text x="12.2633%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="15.8714%" y="165" width="0.1095%" height="15" fill="rgb(225,49,36)" fg:x="28398" fg:w="196"/><text x="16.1643%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="15.9809%" y="165" width="0.1408%" height="15" fill="rgb(226,54,50)" fg:x="28594" fg:w="252"/><text x="16.2739%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="16.1631%" y="165" width="0.1095%" height="15" fill="rgb(235,125,47)" fg:x="28920" fg:w="196"/><text x="16.4561%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="16.2726%" y="133" width="1.7661%" height="15" fill="rgb(237,130,51)" fg:x="29116" fg:w="3160"/><text x="16.5656%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="16.2726%" y="149" width="1.8214%" height="15" fill="rgb(211,157,20)" fg:x="29116" fg:w="3259"/><text x="16.5656%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="18.0941%" y="149" width="0.0788%" height="15" fill="rgb(219,214,42)" fg:x="32375" fg:w="141"/><text x="18.3870%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="18.1729%" y="149" width="1.7661%" height="15" fill="rgb(238,40,50)" fg:x="32516" fg:w="3160"/><text x="18.4658%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="16.2726%" y="165" width="3.8597%" height="15" fill="rgb(210,182,31)" fg:x="29116" fg:w="6906"/><text x="16.5656%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="20.1737%" y="165" width="0.1095%" height="15" fill="rgb(238,24,51)" fg:x="36096" fg:w="196"/><text x="20.4667%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="20.2832%" y="133" width="1.7661%" height="15" fill="rgb(210,16,44)" fg:x="36292" fg:w="3160"/><text x="20.5762%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="20.2832%" y="149" width="1.8214%" height="15" fill="rgb(217,54,21)" fg:x="36292" fg:w="3259"/><text x="20.5762%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="22.1047%" y="149" width="0.0788%" height="15" fill="rgb(208,206,17)" fg:x="39551" fg:w="141"/><text x="22.3976%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="22.1835%" y="149" width="1.7661%" height="15" fill="rgb(250,151,0)" fg:x="39692" fg:w="3160"/><text x="22.4764%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="20.2832%" y="165" width="3.8597%" height="15" fill="rgb(226,223,11)" fg:x="36292" fg:w="6906"/><text x="20.5762%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.1843%" y="165" width="0.1095%" height="15" fill="rgb(239,133,51)" fg:x="43272" fg:w="196"/><text x="24.4773%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="24.2938%" y="165" width="0.1772%" height="15" fill="rgb(233,90,23)" fg:x="43468" fg:w="317"/><text x="24.5868%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.5124%" y="165" width="0.1095%" height="15" fill="rgb(207,69,5)" fg:x="43859" fg:w="196"/><text x="24.8053%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="24.6219%" y="165" width="0.1408%" height="15" fill="rgb(254,152,4)" fg:x="44055" fg:w="252"/><text x="24.9149%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.8041%" y="165" width="0.1095%" height="15" fill="rgb(215,136,4)" fg:x="44381" fg:w="196"/><text x="25.0971%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="24.9137%" y="133" width="1.7661%" height="15" fill="rgb(216,53,40)" fg:x="44577" fg:w="3160"/><text x="25.2066%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="24.9137%" y="149" width="1.8214%" height="15" fill="rgb(206,80,47)" fg:x="44577" fg:w="3259"/><text x="25.2066%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="26.7351%" y="149" width="0.0788%" height="15" fill="rgb(249,219,5)" fg:x="47836" fg:w="141"/><text x="27.0280%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="26.8139%" y="149" width="1.7661%" height="15" fill="rgb(222,23,43)" fg:x="47977" fg:w="3160"/><text x="27.1068%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="24.9137%" y="165" width="3.8597%" height="15" fill="rgb(244,100,11)" fg:x="44577" fg:w="6906"/><text x="25.2066%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="28.8147%" y="165" width="0.1095%" height="15" fill="rgb(210,69,15)" fg:x="51557" fg:w="196"/><text x="29.1077%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="28.9242%" y="133" width="1.7661%" height="15" fill="rgb(227,120,31)" fg:x="51753" fg:w="3160"/><text x="29.2172%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="28.9242%" y="149" width="1.8214%" height="15" fill="rgb(216,210,32)" fg:x="51753" fg:w="3259"/><text x="29.2172%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="30.7457%" y="149" width="0.0788%" height="15" fill="rgb(228,111,42)" fg:x="55012" fg:w="141"/><text x="31.0386%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="30.8245%" y="149" width="1.7661%" height="15" fill="rgb(220,132,51)" fg:x="55153" fg:w="3160"/><text x="31.1174%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="28.9242%" y="165" width="3.8597%" height="15" fill="rgb(241,80,53)" fg:x="51753" fg:w="6906"/><text x="29.2172%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="32.8253%" y="165" width="0.1095%" height="15" fill="rgb(242,45,51)" fg:x="58733" fg:w="196"/><text x="33.1183%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="32.9348%" y="133" width="1.7661%" height="15" fill="rgb(208,84,10)" fg:x="58929" fg:w="3160"/><text x="33.2278%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="32.9348%" y="149" width="1.8214%" height="15" fill="rgb(229,32,7)" fg:x="58929" fg:w="3259"/><text x="33.2278%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="34.7563%" y="149" width="0.0788%" height="15" fill="rgb(217,124,30)" fg:x="62188" fg:w="141"/><text x="35.0492%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="34.8351%" y="149" width="1.7661%" height="15" fill="rgb(234,219,28)" fg:x="62329" fg:w="3160"/><text x="35.1280%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="32.9348%" y="165" width="3.8597%" height="15" fill="rgb(224,212,7)" fg:x="58929" fg:w="6906"/><text x="33.2278%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="36.8359%" y="165" width="0.1095%" height="15" fill="rgb(254,55,49)" fg:x="65909" fg:w="196"/><text x="37.1289%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="36.9454%" y="165" width="0.1408%" height="15" fill="rgb(205,121,15)" fg:x="66105" fg:w="252"/><text x="37.2384%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.1276%" y="165" width="0.1095%" height="15" fill="rgb(206,176,1)" fg:x="66431" fg:w="196"/><text x="37.4206%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.2372%" y="165" width="0.1408%" height="15" fill="rgb(245,54,47)" fg:x="66627" fg:w="252"/><text x="37.5302%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.4194%" y="165" width="0.1095%" height="15" fill="rgb(241,169,5)" fg:x="66953" fg:w="196"/><text x="37.7123%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.5289%" y="165" width="0.1408%" height="15" fill="rgb(253,88,40)" fg:x="67149" fg:w="252"/><text x="37.8219%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.7111%" y="165" width="0.1095%" height="15" fill="rgb(248,212,1)" fg:x="67475" fg:w="196"/><text x="38.0041%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="37.8207%" y="133" width="1.7661%" height="15" fill="rgb(207,195,4)" fg:x="67671" fg:w="3160"/><text x="38.1136%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="37.8207%" y="149" width="1.8214%" height="15" fill="rgb(253,185,33)" fg:x="67671" fg:w="3259"/><text x="38.1136%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="39.6421%" y="149" width="0.0788%" height="15" fill="rgb(223,171,4)" fg:x="70930" fg:w="141"/><text x="39.9351%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="39.7209%" y="149" width="1.7661%" height="15" fill="rgb(244,100,14)" fg:x="71071" fg:w="3160"/><text x="40.0139%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="37.8207%" y="165" width="3.8597%" height="15" fill="rgb(230,214,4)" fg:x="67671" fg:w="6906"/><text x="38.1136%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.7217%" y="165" width="0.1095%" height="15" fill="rgb(208,58,53)" fg:x="74651" fg:w="196"/><text x="42.0147%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="41.8313%" y="165" width="0.1408%" height="15" fill="rgb(219,152,30)" fg:x="74847" fg:w="252"/><text x="42.1242%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.0135%" y="165" width="0.1095%" height="15" fill="rgb(218,119,7)" fg:x="75173" fg:w="196"/><text x="42.3064%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.1230%" y="165" width="0.1408%" height="15" fill="rgb(209,220,45)" fg:x="75369" fg:w="252"/><text x="42.4160%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.3052%" y="165" width="0.1095%" height="15" fill="rgb(245,34,32)" fg:x="75695" fg:w="196"/><text x="42.5982%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.4147%" y="165" width="0.1408%" height="15" fill="rgb(235,1,24)" fg:x="75891" fg:w="252"/><text x="42.7077%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.5969%" y="165" width="0.1095%" height="15" fill="rgb(250,38,13)" fg:x="76217" fg:w="196"/><text x="42.8899%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.7065%" y="165" width="0.1408%" height="15" fill="rgb(242,82,41)" fg:x="76413" fg:w="252"/><text x="42.9995%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.8887%" y="165" width="0.1095%" height="15" fill="rgb(226,101,44)" fg:x="76739" fg:w="196"/><text x="43.1816%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="42.9982%" y="165" width="0.1772%" height="15" fill="rgb(237,198,9)" fg:x="76935" fg:w="317"/><text x="43.2912%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="43.2167%" y="165" width="0.1095%" height="15" fill="rgb(230,23,0)" fg:x="77326" fg:w="196"/><text x="43.5097%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="43.3263%" y="133" width="1.7661%" height="15" fill="rgb(212,51,39)" fg:x="77522" fg:w="3160"/><text x="43.6193%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="43.3263%" y="149" width="1.8214%" height="15" fill="rgb(238,141,21)" fg:x="77522" fg:w="3259"/><text x="43.6193%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="45.1477%" y="149" width="0.0788%" height="15" fill="rgb(221,59,13)" fg:x="80781" fg:w="141"/><text x="45.4407%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="45.2265%" y="149" width="1.7661%" height="15" fill="rgb(227,200,30)" fg:x="80922" fg:w="3160"/><text x="45.5195%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="43.3263%" y="165" width="3.8597%" height="15" fill="rgb(228,101,29)" fg:x="77522" fg:w="6906"/><text x="43.6193%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="47.2273%" y="165" width="0.1095%" height="15" fill="rgb(234,119,20)" fg:x="84502" fg:w="196"/><text x="47.5203%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="47.3369%" y="133" width="1.7661%" height="15" fill="rgb(223,66,10)" fg:x="84698" fg:w="3160"/><text x="47.6299%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="47.3369%" y="149" width="1.8214%" height="15" fill="rgb(211,87,24)" fg:x="84698" fg:w="3259"/><text x="47.6299%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="49.1583%" y="149" width="0.0788%" height="15" fill="rgb(226,57,13)" fg:x="87957" fg:w="141"/><text x="49.4513%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="49.2371%" y="149" width="1.7661%" height="15" fill="rgb(218,218,26)" fg:x="88098" fg:w="3160"/><text x="49.5301%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="47.3369%" y="165" width="3.8597%" height="15" fill="rgb(240,228,43)" fg:x="84698" fg:w="6906"/><text x="47.6299%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.2379%" y="165" width="0.1095%" height="15" fill="rgb(251,77,31)" fg:x="91678" fg:w="196"/><text x="51.5309%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.3475%" y="165" width="0.1772%" height="15" fill="rgb(249,104,35)" fg:x="91874" fg:w="317"/><text x="51.6405%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.5660%" y="165" width="0.1095%" height="15" fill="rgb(209,191,47)" fg:x="92265" fg:w="196"/><text x="51.8590%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.6756%" y="165" width="0.1772%" height="15" fill="rgb(224,63,35)" fg:x="92461" fg:w="317"/><text x="51.9685%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.8941%" y="165" width="0.1095%" height="15" fill="rgb(230,78,18)" fg:x="92852" fg:w="196"/><text x="52.1870%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.0036%" y="165" width="0.1408%" height="15" fill="rgb(243,189,47)" fg:x="93048" fg:w="252"/><text x="52.2966%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.1858%" y="165" width="0.1095%" height="15" fill="rgb(228,73,47)" fg:x="93374" fg:w="196"/><text x="52.4788%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.2954%" y="165" width="0.1408%" height="15" fill="rgb(222,179,0)" fg:x="93570" fg:w="252"/><text x="52.5883%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.4776%" y="165" width="0.1095%" height="15" fill="rgb(211,162,35)" fg:x="93896" fg:w="196"/><text x="52.7705%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="52.5871%" y="165" width="0.1772%" height="15" fill="rgb(242,205,27)" fg:x="94092" fg:w="317"/><text x="52.8801%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.8056%" y="165" width="0.1095%" height="15" fill="rgb(248,189,32)" fg:x="94483" fg:w="196"/><text x="53.0986%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.9152%" y="165" width="0.1408%" height="15" fill="rgb(237,170,53)" fg:x="94679" fg:w="252"/><text x="53.2081%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.0974%" y="165" width="0.1095%" height="15" fill="rgb(239,132,52)" fg:x="95005" fg:w="196"/><text x="53.3903%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="53.2069%" y="165" width="0.1408%" height="15" fill="rgb(221,0,17)" fg:x="95201" fg:w="252"/><text x="53.4999%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.3891%" y="165" width="0.1095%" height="15" fill="rgb(252,76,51)" fg:x="95527" fg:w="196"/><text x="53.6821%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="53.4987%" y="133" width="1.7661%" height="15" fill="rgb(214,107,30)" fg:x="95723" fg:w="3160"/><text x="53.7916%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="53.4987%" y="149" width="1.8214%" height="15" fill="rgb(205,87,53)" fg:x="95723" fg:w="3259"/><text x="53.7916%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="55.3201%" y="149" width="0.0788%" height="15" fill="rgb(207,57,50)" fg:x="98982" fg:w="141"/><text x="55.6130%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="55.3989%" y="149" width="1.7661%" height="15" fill="rgb(211,154,17)" fg:x="99123" fg:w="3160"/><text x="55.6918%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="53.4987%" y="165" width="3.8597%" height="15" fill="rgb(234,113,3)" fg:x="95723" fg:w="6906"/><text x="53.7916%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.3997%" y="165" width="0.1095%" height="15" fill="rgb(205,162,37)" fg:x="102703" fg:w="196"/><text x="57.6927%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="57.5092%" y="165" width="0.1408%" height="15" fill="rgb(251,136,32)" fg:x="102899" fg:w="252"/><text x="57.8022%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.6914%" y="165" width="0.1095%" height="15" fill="rgb(215,25,16)" fg:x="103225" fg:w="196"/><text x="57.9844%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="57.8010%" y="165" width="0.1772%" height="15" fill="rgb(240,94,51)" fg:x="103421" fg:w="317"/><text x="58.0940%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.0195%" y="165" width="0.1095%" height="15" fill="rgb(206,105,49)" fg:x="103812" fg:w="196"/><text x="58.3125%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="58.1291%" y="165" width="0.1408%" height="15" fill="rgb(215,120,5)" fg:x="104008" fg:w="252"/><text x="58.4220%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.3113%" y="165" width="0.1095%" height="15" fill="rgb(246,159,36)" fg:x="104334" fg:w="196"/><text x="58.6042%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="58.4208%" y="133" width="1.7661%" height="15" fill="rgb(217,102,28)" fg:x="104530" fg:w="3160"/><text x="58.7138%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="58.4208%" y="149" width="1.8214%" height="15" fill="rgb(217,139,13)" fg:x="104530" fg:w="3259"/><text x="58.7138%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="60.2422%" y="149" width="0.0788%" height="15" fill="rgb(232,209,23)" fg:x="107789" fg:w="141"/><text x="60.5352%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="60.3210%" y="149" width="1.7661%" height="15" fill="rgb(228,10,9)" fg:x="107930" fg:w="3160"/><text x="60.6140%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="58.4208%" y="165" width="3.8597%" height="15" fill="rgb(226,205,11)" fg:x="104530" fg:w="6906"/><text x="58.7138%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="62.3219%" y="165" width="0.1095%" height="15" fill="rgb(226,96,9)" fg:x="111510" fg:w="196"/><text x="62.6148%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="62.4314%" y="133" width="1.7661%" height="15" fill="rgb(216,64,45)" fg:x="111706" fg:w="3160"/><text x="62.7244%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="62.4314%" y="149" width="1.8214%" height="15" fill="rgb(214,17,38)" fg:x="111706" fg:w="3259"/><text x="62.7244%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="64.2528%" y="149" width="0.0788%" height="15" fill="rgb(240,211,4)" fg:x="114965" fg:w="141"/><text x="64.5458%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="64.3316%" y="149" width="1.7661%" height="15" fill="rgb(215,63,10)" fg:x="115106" fg:w="3160"/><text x="64.6246%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="62.4314%" y="165" width="3.8597%" height="15" fill="rgb(206,97,39)" fg:x="111706" fg:w="6906"/><text x="62.7244%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.3325%" y="165" width="0.1095%" height="15" fill="rgb(229,137,39)" fg:x="118686" fg:w="196"/><text x="66.6254%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="66.4420%" y="165" width="0.1408%" height="15" fill="rgb(226,108,36)" fg:x="118882" fg:w="252"/><text x="66.7350%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.6242%" y="165" width="0.1095%" height="15" fill="rgb(242,78,24)" fg:x="119208" fg:w="196"/><text x="66.9172%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="66.7337%" y="165" width="0.1772%" height="15" fill="rgb(228,225,49)" fg:x="119404" fg:w="317"/><text x="67.0267%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.9523%" y="165" width="0.1095%" height="15" fill="rgb(212,208,24)" fg:x="119795" fg:w="196"/><text x="67.2452%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="67.0618%" y="133" width="1.7661%" height="15" fill="rgb(231,104,6)" fg:x="119991" fg:w="3160"/><text x="67.3548%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="67.0618%" y="149" width="1.8214%" height="15" fill="rgb(215,90,2)" fg:x="119991" fg:w="3259"/><text x="67.3548%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="68.8832%" y="149" width="0.0788%" height="15" fill="rgb(236,73,21)" fg:x="123250" fg:w="141"/><text x="69.1762%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="68.9620%" y="149" width="1.7661%" height="15" fill="rgb(237,84,14)" fg:x="123391" fg:w="3160"/><text x="69.2550%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,971 instructions, 3.90%)</title><rect x="67.0618%" y="165" width="3.8960%" height="15" fill="rgb(243,144,42)" fg:x="119991" fg:w="6971"/><text x="67.3548%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="70.9992%" y="165" width="0.1095%" height="15" fill="rgb(224,142,24)" fg:x="127036" fg:w="196"/><text x="71.2922%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="71.1087%" y="133" width="1.7661%" height="15" fill="rgb(246,137,47)" fg:x="127232" fg:w="3160"/><text x="71.4017%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="71.1087%" y="149" width="1.8214%" height="15" fill="rgb(251,162,3)" fg:x="127232" fg:w="3259"/><text x="71.4017%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="72.9301%" y="149" width="0.0788%" height="15" fill="rgb(214,194,29)" fg:x="130491" fg:w="141"/><text x="73.2231%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="73.0090%" y="149" width="1.7661%" height="15" fill="rgb(233,205,3)" fg:x="130632" fg:w="3160"/><text x="73.3019%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="71.1087%" y="165" width="3.8597%" height="15" fill="rgb(252,136,12)" fg:x="127232" fg:w="6906"/><text x="71.4017%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.0098%" y="165" width="0.1095%" height="15" fill="rgb(225,21,32)" fg:x="134212" fg:w="196"/><text x="75.3027%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="75.1193%" y="165" width="0.1408%" height="15" fill="rgb(210,131,16)" fg:x="134408" fg:w="252"/><text x="75.4123%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.3015%" y="165" width="0.1095%" height="15" fill="rgb(212,20,40)" fg:x="134734" fg:w="196"/><text x="75.5945%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="75.4111%" y="165" width="0.1772%" height="15" fill="rgb(210,79,27)" fg:x="134930" fg:w="317"/><text x="75.7040%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.6296%" y="165" width="0.1095%" height="15" fill="rgb(239,190,11)" fg:x="135321" fg:w="196"/><text x="75.9226%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="75.7391%" y="133" width="1.7661%" height="15" fill="rgb(221,165,8)" fg:x="135517" fg:w="3160"/><text x="76.0321%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="75.7391%" y="149" width="1.8214%" height="15" fill="rgb(205,6,48)" fg:x="135517" fg:w="3259"/><text x="76.0321%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="77.5606%" y="149" width="0.0788%" height="15" fill="rgb(235,27,42)" fg:x="138776" fg:w="141"/><text x="77.8535%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="77.6394%" y="149" width="1.7661%" height="15" fill="rgb(232,91,16)" fg:x="138917" fg:w="3160"/><text x="77.9323%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="75.7391%" y="165" width="3.8597%" height="15" fill="rgb(229,32,30)" fg:x="135517" fg:w="6906"/><text x="76.0321%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="79.6402%" y="165" width="0.1095%" height="15" fill="rgb(221,63,5)" fg:x="142497" fg:w="196"/><text x="79.9332%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="79.7497%" y="133" width="1.7661%" height="15" fill="rgb(245,123,40)" fg:x="142693" fg:w="3160"/><text x="80.0427%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="79.7497%" y="149" width="1.8214%" height="15" fill="rgb(246,40,52)" fg:x="142693" fg:w="3259"/><text x="80.0427%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="81.5712%" y="149" width="0.0788%" height="15" fill="rgb(251,9,36)" fg:x="145952" fg:w="141"/><text x="81.8641%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="81.6500%" y="149" width="1.7661%" height="15" fill="rgb(251,125,36)" fg:x="146093" fg:w="3160"/><text x="81.9429%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="79.7497%" y="165" width="3.8597%" height="15" fill="rgb(213,207,27)" fg:x="142693" fg:w="6906"/><text x="80.0427%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.6508%" y="165" width="0.1095%" height="15" fill="rgb(249,213,18)" fg:x="149673" fg:w="196"/><text x="83.9438%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="83.7603%" y="165" width="0.1772%" height="15" fill="rgb(230,10,47)" fg:x="149869" fg:w="317"/><text x="84.0533%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.9789%" y="165" width="0.1095%" height="15" fill="rgb(206,53,3)" fg:x="150260" fg:w="196"/><text x="84.2718%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="84.0884%" y="165" width="0.1408%" height="15" fill="rgb(208,197,33)" fg:x="150456" fg:w="252"/><text x="84.3814%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="84.2706%" y="165" width="0.1095%" height="15" fill="rgb(253,146,39)" fg:x="150782" fg:w="196"/><text x="84.5636%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="84.3801%" y="133" width="1.7661%" height="15" fill="rgb(244,170,0)" fg:x="150978" fg:w="3160"/><text x="84.6731%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="84.3801%" y="149" width="1.8214%" height="15" fill="rgb(233,196,10)" fg:x="150978" fg:w="3259"/><text x="84.6731%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="86.2016%" y="149" width="0.0788%" height="15" fill="rgb(233,28,0)" fg:x="154237" fg:w="141"/><text x="86.4945%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="86.2804%" y="149" width="1.7661%" height="15" fill="rgb(206,89,51)" fg:x="154378" fg:w="3160"/><text x="86.5733%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="84.3801%" y="165" width="3.8597%" height="15" fill="rgb(230,160,33)" fg:x="150978" fg:w="6906"/><text x="84.6731%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.2812%" y="165" width="0.1095%" height="15" fill="rgb(220,185,11)" fg:x="157958" fg:w="196"/><text x="88.5742%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="88.3907%" y="165" width="0.1772%" height="15" fill="rgb(252,3,2)" fg:x="158154" fg:w="317"/><text x="88.6837%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.6093%" y="165" width="0.1095%" height="15" fill="rgb(247,171,49)" fg:x="158545" fg:w="196"/><text x="88.9022%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="88.7188%" y="133" width="1.7661%" height="15" fill="rgb(224,168,35)" fg:x="158741" fg:w="3160"/><text x="89.0118%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="88.7188%" y="149" width="1.8214%" height="15" fill="rgb(206,53,22)" fg:x="158741" fg:w="3259"/><text x="89.0118%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="90.5402%" y="149" width="0.0788%" height="15" fill="rgb(220,113,41)" fg:x="162000" fg:w="141"/><text x="90.8332%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="90.6190%" y="149" width="1.7661%" height="15" fill="rgb(225,204,46)" fg:x="162141" fg:w="3160"/><text x="90.9120%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="88.7188%" y="165" width="3.8597%" height="15" fill="rgb(212,107,9)" fg:x="158741" fg:w="6906"/><text x="89.0118%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.6199%" y="165" width="0.1095%" height="15" fill="rgb(222,175,33)" fg:x="165721" fg:w="196"/><text x="92.9128%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.7294%" y="165" width="0.1408%" height="15" fill="rgb(223,119,39)" fg:x="165917" fg:w="252"/><text x="93.0224%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.9116%" y="165" width="0.1095%" height="15" fill="rgb(208,223,52)" fg:x="166243" fg:w="196"/><text x="93.2046%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="93.0211%" y="165" width="0.1408%" height="15" fill="rgb(232,12,50)" fg:x="166439" fg:w="252"/><text x="93.3141%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="93.2033%" y="165" width="0.1095%" height="15" fill="rgb(240,195,24)" fg:x="166765" fg:w="196"/><text x="93.4963%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="93.3129%" y="133" width="1.7661%" height="15" fill="rgb(217,145,10)" fg:x="166961" fg:w="3160"/><text x="93.6058%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="93.3129%" y="149" width="1.8214%" height="15" fill="rgb(216,67,22)" fg:x="166961" fg:w="3259"/><text x="93.6058%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="95.1343%" y="149" width="0.0788%" height="15" fill="rgb(242,24,27)" fg:x="170220" fg:w="141"/><text x="95.4273%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.77%)</title><rect x="95.2131%" y="149" width="1.7661%" height="15" fill="rgb(236,110,43)" fg:x="170361" fg:w="3160"/><text x="95.5061%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.86%)</title><rect x="93.3129%" y="165" width="3.8597%" height="15" fill="rgb(239,80,39)" fg:x="166961" fg:w="6906"/><text x="93.6058%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (159,895 instructions, 89.36%)</title><rect x="7.8502%" y="181" width="89.3638%" height="15" fill="rgb(226,85,15)" fg:x="14046" fg:w="159895"/><text x="8.1431%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.04%)</title><rect x="97.2178%" y="117" width="0.0386%" height="15" fill="rgb(250,161,43)" fg:x="173948" fg:w="69"/><text x="97.5108%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="97.2564%" y="117" width="0.0380%" height="15" fill="rgb(220,186,21)" fg:x="174017" fg:w="68"/><text x="97.5494%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.13%)</title><rect x="97.2178%" y="133" width="0.1302%" height="15" fill="rgb(249,178,36)" fg:x="173948" fg:w="233"/><text x="97.5108%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (268 instructions, 0.15%)</title><rect x="97.2178%" y="149" width="0.1498%" height="15" fill="rgb(235,219,19)" fg:x="173948" fg:w="268"/><text x="97.5108%" y="159.50"></text></g><g><title>memset (152 instructions, 0.08%)</title><rect x="97.3676%" y="149" width="0.0850%" height="15" fill="rgb(228,199,29)" fg:x="174216" fg:w="152"/><text x="97.6606%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (598 instructions, 0.33%)</title><rect x="97.2139%" y="165" width="0.3342%" height="15" fill="rgb(225,183,34)" fg:x="173941" fg:w="598"/><text x="97.5069%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.29%)</title><rect x="97.5481%" y="149" width="0.2895%" height="15" fill="rgb(254,130,22)" fg:x="174539" fg:w="518"/><text x="97.8411%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (174 instructions, 0.10%)</title><rect x="97.8377%" y="101" width="0.0972%" height="15" fill="rgb(213,170,10)" fg:x="175057" fg:w="174"/><text x="98.1306%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (217 instructions, 0.12%)</title><rect x="97.8377%" y="117" width="0.1213%" height="15" fill="rgb(207,5,35)" fg:x="175057" fg:w="217"/><text x="98.1306%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (299 instructions, 0.17%)</title><rect x="97.8377%" y="133" width="0.1671%" height="15" fill="rgb(224,215,45)" fg:x="175057" fg:w="299"/><text x="98.1306%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (517 instructions, 0.29%)</title><rect x="97.8377%" y="149" width="0.2889%" height="15" fill="rgb(244,193,16)" fg:x="175057" fg:w="517"/><text x="98.1306%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.29%)</title><rect x="98.1266%" y="149" width="0.2884%" height="15" fill="rgb(215,41,0)" fg:x="175574" fg:w="516"/><text x="98.4196%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,651 instructions, 0.92%)</title><rect x="97.5481%" y="165" width="0.9227%" height="15" fill="rgb(251,95,41)" fg:x="174539" fg:w="1651"/><text x="97.8411%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="98.4748%" y="165" width="0.0335%" height="15" fill="rgb(229,78,34)" fg:x="176197" fg:w="60"/><text x="98.7678%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,924 instructions, 1.63%)</title><rect x="97.2139%" y="181" width="1.6342%" height="15" fill="rgb(238,11,24)" fg:x="173941" fg:w="2924"/><text x="97.5069%" y="191.50"></text></g><g><title>imrc_hashmap::__canister_method_batch_put::{{closure}} (178,315 instructions, 99.66%)</title><rect x="0.1224%" y="197" width="99.6585%" height="15" fill="rgb(221,114,2)" fg:x="219" fg:w="178315"/><text x="0.4154%" y="207.50">imrc_hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="99.8390%" y="181" width="0.0151%" height="15" fill="rgb(231,88,16)" fg:x="178638" fg:w="27"/><text x="100.1320%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.13%)</title><rect x="99.7893%" y="197" width="0.1302%" height="15" fill="rgb(227,127,37)" fg:x="178549" fg:w="233"/><text x="100.0823%" y="207.50"></text></g><g><title>all (178,926 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,133,17)" fg:x="0" fg:w="178926"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (178,926 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,98,32)" fg:x="0" fg:w="178926"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>