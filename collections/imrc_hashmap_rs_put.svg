<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="162760"><g><title>ic_cdk::setup (19 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0117%" height="15" fill="rgb(235,46,19)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.07%)</title><rect x="0.0117%" y="197" width="0.0725%" height="15" fill="rgb(243,15,47)" fg:x="19" fg:w="118"/><text x="0.3046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.04%)</title><rect x="0.0842%" y="197" width="0.0436%" height="15" fill="rgb(236,82,52)" fg:x="137" fg:w="71"/><text x="0.3771%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.1278%" y="165" width="0.0504%" height="15" fill="rgb(211,41,47)" fg:x="208" fg:w="82"/><text x="0.4208%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.1782%" y="149" width="0.0424%" height="15" fill="rgb(220,35,32)" fg:x="290" fg:w="69"/><text x="0.4711%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.2206%" y="149" width="0.2494%" height="15" fill="rgb(222,196,9)" fg:x="359" fg:w="406"/><text x="0.5135%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="0.4700%" y="149" width="0.0504%" height="15" fill="rgb(210,216,9)" fg:x="765" fg:w="82"/><text x="0.7630%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5204%" y="149" width="0.0332%" height="15" fill="rgb(230,58,49)" fg:x="847" fg:w="54"/><text x="0.8134%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5536%" y="149" width="0.0332%" height="15" fill="rgb(230,163,41)" fg:x="901" fg:w="54"/><text x="0.8465%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5868%" y="149" width="0.0332%" height="15" fill="rgb(205,135,42)" fg:x="955" fg:w="54"/><text x="0.8797%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.6199%" y="149" width="0.0332%" height="15" fill="rgb(246,227,0)" fg:x="1009" fg:w="54"/><text x="0.9129%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="0.6531%" y="149" width="0.0424%" height="15" fill="rgb(208,186,10)" fg:x="1063" fg:w="69"/><text x="0.9461%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="0.6955%" y="149" width="0.0399%" height="15" fill="rgb(218,215,25)" fg:x="1132" fg:w="65"/><text x="0.9885%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="0.7354%" y="149" width="0.2494%" height="15" fill="rgb(241,215,5)" fg:x="1197" fg:w="406"/><text x="1.0284%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.9947%" y="133" width="0.0504%" height="15" fill="rgb(247,14,27)" fg:x="1619" fg:w="82"/><text x="1.2877%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.0451%" y="101" width="0.0369%" height="15" fill="rgb(215,157,6)" fg:x="1701" fg:w="60"/><text x="1.3381%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.0451%" y="117" width="0.0522%" height="15" fill="rgb(234,157,38)" fg:x="1701" fg:w="85"/><text x="1.3381%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.1029%" y="53" width="0.0184%" height="15" fill="rgb(228,40,26)" fg:x="1795" fg:w="30"/><text x="1.3958%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.1029%" y="69" width="0.0338%" height="15" fill="rgb(214,149,27)" fg:x="1795" fg:w="55"/><text x="1.3958%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.0973%" y="85" width="0.0725%" height="15" fill="rgb(239,158,50)" fg:x="1786" fg:w="118"/><text x="1.3903%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.11%)</title><rect x="1.0973%" y="101" width="0.1051%" height="15" fill="rgb(248,194,53)" fg:x="1786" fg:w="171"/><text x="1.3903%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.0973%" y="117" width="0.1081%" height="15" fill="rgb(231,187,49)" fg:x="1786" fg:w="176"/><text x="1.3903%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.0451%" y="133" width="0.2286%" height="15" fill="rgb(220,125,11)" fg:x="1701" fg:w="372"/><text x="1.3381%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.37%)</title><rect x="0.9947%" y="149" width="0.3656%" height="15" fill="rgb(253,203,5)" fg:x="1619" fg:w="595"/><text x="1.2877%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="1.3603%" y="149" width="0.0504%" height="15" fill="rgb(222,154,45)" fg:x="2214" fg:w="82"/><text x="1.6533%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="1.4107%" y="149" width="0.0344%" height="15" fill="rgb(211,130,6)" fg:x="2296" fg:w="56"/><text x="1.7036%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="1.4451%" y="149" width="0.0387%" height="15" fill="rgb(219,136,18)" fg:x="2352" fg:w="63"/><text x="1.7380%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="1.4838%" y="149" width="0.0399%" height="15" fill="rgb(235,180,30)" fg:x="2415" fg:w="65"/><text x="1.7767%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.25%)</title><rect x="1.5237%" y="133" width="0.2494%" height="15" fill="rgb(209,122,14)" fg:x="2480" fg:w="406"/><text x="1.8167%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="1.7830%" y="117" width="0.0504%" height="15" fill="rgb(240,10,0)" fg:x="2902" fg:w="82"/><text x="2.0760%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.8334%" y="85" width="0.0369%" height="15" fill="rgb(209,167,28)" fg:x="2984" fg:w="60"/><text x="2.1263%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.8334%" y="101" width="0.0522%" height="15" fill="rgb(244,114,11)" fg:x="2984" fg:w="85"/><text x="2.1263%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.8911%" y="37" width="0.0184%" height="15" fill="rgb(239,0,4)" fg:x="3078" fg:w="30"/><text x="2.1841%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.8911%" y="53" width="0.0338%" height="15" fill="rgb(221,109,47)" fg:x="3078" fg:w="55"/><text x="2.1841%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.07%)</title><rect x="1.8856%" y="69" width="0.0725%" height="15" fill="rgb(205,195,7)" fg:x="3069" fg:w="118"/><text x="2.1786%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.11%)</title><rect x="1.8856%" y="85" width="0.1051%" height="15" fill="rgb(226,220,13)" fg:x="3069" fg:w="171"/><text x="2.1786%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.11%)</title><rect x="1.8856%" y="101" width="0.1081%" height="15" fill="rgb(252,34,4)" fg:x="3069" fg:w="176"/><text x="2.1786%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.23%)</title><rect x="1.8334%" y="117" width="0.2286%" height="15" fill="rgb(247,158,39)" fg:x="2984" fg:w="372"/><text x="2.1263%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 0.37%)</title><rect x="1.7830%" y="133" width="0.3656%" height="15" fill="rgb(228,37,52)" fg:x="2902" fg:w="595"/><text x="2.0760%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.05%)</title><rect x="2.1486%" y="133" width="0.0504%" height="15" fill="rgb(219,45,42)" fg:x="3497" fg:w="82"/><text x="2.4415%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="2.1989%" y="133" width="0.0344%" height="15" fill="rgb(219,68,42)" fg:x="3579" fg:w="56"/><text x="2.4919%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.04%)</title><rect x="2.2333%" y="117" width="0.0424%" height="15" fill="rgb(241,229,51)" fg:x="3635" fg:w="69"/><text x="2.5263%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.06%)</title><rect x="2.2757%" y="117" width="0.0559%" height="15" fill="rgb(221,166,19)" fg:x="3704" fg:w="91"/><text x="2.5687%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.3317%" y="117" width="0.0387%" height="15" fill="rgb(219,187,21)" fg:x="3795" fg:w="63"/><text x="2.6246%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.17%)</title><rect x="2.2333%" y="133" width="0.1733%" height="15" fill="rgb(226,197,11)" fg:x="3635" fg:w="282"/><text x="2.5263%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.4066%" y="133" width="0.0504%" height="15" fill="rgb(240,46,49)" fg:x="3917" fg:w="82"/><text x="2.6996%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 1.06%)</title><rect x="1.5237%" y="149" width="1.0580%" height="15" fill="rgb(240,229,26)" fg:x="2480" fg:w="1722"/><text x="1.8167%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.04%)</title><rect x="2.5817%" y="149" width="0.0387%" height="15" fill="rgb(213,25,43)" fg:x="4202" fg:w="63"/><text x="2.8747%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.6499%" y="133" width="0.0504%" height="15" fill="rgb(238,98,45)" fg:x="4313" fg:w="82"/><text x="2.9429%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.10%)</title><rect x="2.6499%" y="149" width="0.1014%" height="15" fill="rgb(229,58,16)" fg:x="4313" fg:w="165"/><text x="2.9429%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.7513%" y="117" width="0.0504%" height="15" fill="rgb(217,86,13)" fg:x="4478" fg:w="82"/><text x="3.0443%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.07%)</title><rect x="2.7513%" y="133" width="0.0713%" height="15" fill="rgb(246,36,46)" fg:x="4478" fg:w="116"/><text x="3.0443%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.11%)</title><rect x="2.7513%" y="149" width="0.1130%" height="15" fill="rgb(248,64,45)" fg:x="4478" fg:w="184"/><text x="3.0443%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.8643%" y="149" width="0.0504%" height="15" fill="rgb(245,126,49)" fg:x="4662" fg:w="82"/><text x="3.1573%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="2.9147%" y="149" width="0.0498%" height="15" fill="rgb(212,64,50)" fg:x="4744" fg:w="81"/><text x="3.2077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9645%" y="149" width="0.0504%" height="15" fill="rgb(244,8,45)" fg:x="4825" fg:w="82"/><text x="3.2575%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="3.0149%" y="149" width="0.0504%" height="15" fill="rgb(252,55,28)" fg:x="4907" fg:w="82"/><text x="3.3078%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="3.0665%" y="149" width="0.0498%" height="15" fill="rgb(218,67,29)" fg:x="4991" fg:w="81"/><text x="3.3594%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.23%)</title><rect x="3.1162%" y="149" width="0.2335%" height="15" fill="rgb(243,92,45)" fg:x="5072" fg:w="380"/><text x="3.4092%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.23%)</title><rect x="3.3497%" y="149" width="0.2335%" height="15" fill="rgb(243,165,19)" fg:x="5452" fg:w="380"/><text x="3.6427%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,486 instructions, 3.99%)</title><rect x="0.1782%" y="165" width="3.9850%" height="15" fill="rgb(219,140,45)" fg:x="290" fg:w="6486"/><text x="0.4711%" y="175.50">can..</text></g><g><title>memcpy (335 instructions, 0.21%)</title><rect x="4.1632%" y="165" width="0.2058%" height="15" fill="rgb(219,153,17)" fg:x="6776" fg:w="335"/><text x="4.4562%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.02%)</title><rect x="4.3690%" y="165" width="0.0240%" height="15" fill="rgb(211,177,40)" fg:x="7111" fg:w="39"/><text x="4.6620%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.3930%" y="165" width="0.0504%" height="15" fill="rgb(214,105,22)" fg:x="7150" fg:w="82"/><text x="4.6859%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.4464%" y="133" width="0.0326%" height="15" fill="rgb(208,14,44)" fg:x="7237" fg:w="53"/><text x="4.7394%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.4790%" y="133" width="0.0541%" height="15" fill="rgb(232,164,7)" fg:x="7290" fg:w="88"/><text x="4.7720%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="4.5331%" y="133" width="0.0995%" height="15" fill="rgb(233,57,15)" fg:x="7378" fg:w="162"/><text x="4.8260%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.4464%" y="149" width="0.3318%" height="15" fill="rgb(238,88,15)" fg:x="7237" fg:w="540"/><text x="4.7394%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.46%)</title><rect x="4.4434%" y="165" width="0.4602%" height="15" fill="rgb(230,137,54)" fg:x="7232" fg:w="749"/><text x="4.7363%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.9035%" y="165" width="0.0504%" height="15" fill="rgb(241,228,31)" fg:x="7981" fg:w="82"/><text x="5.1965%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.9570%" y="133" width="0.0326%" height="15" fill="rgb(221,25,3)" fg:x="8068" fg:w="53"/><text x="5.2500%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.9896%" y="133" width="0.0541%" height="15" fill="rgb(240,166,10)" fg:x="8121" fg:w="88"/><text x="5.2825%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="5.0436%" y="133" width="0.0995%" height="15" fill="rgb(207,173,52)" fg:x="8209" fg:w="162"/><text x="5.3366%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.9570%" y="149" width="0.3318%" height="15" fill="rgb(229,117,46)" fg:x="8068" fg:w="540"/><text x="5.2500%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.04%)</title><rect x="5.2888%" y="149" width="0.0418%" height="15" fill="rgb(235,200,21)" fg:x="8608" fg:w="68"/><text x="5.5817%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="5.3305%" y="133" width="0.0498%" height="15" fill="rgb(232,47,9)" fg:x="8676" fg:w="81"/><text x="5.6235%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.07%)</title><rect x="5.3305%" y="149" width="0.0664%" height="15" fill="rgb(210,219,50)" fg:x="8676" fg:w="108"/><text x="5.6235%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 0.55%)</title><rect x="4.9539%" y="165" width="0.5468%" height="15" fill="rgb(239,209,14)" fg:x="8063" fg:w="890"/><text x="5.2469%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="5.5007%" y="117" width="0.0326%" height="15" fill="rgb(226,198,48)" fg:x="8953" fg:w="53"/><text x="5.7937%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.05%)</title><rect x="5.5007%" y="133" width="0.0479%" height="15" fill="rgb(228,163,7)" fg:x="8953" fg:w="78"/><text x="5.7937%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.18%)</title><rect x="5.5007%" y="149" width="0.1800%" height="15" fill="rgb(221,123,27)" fg:x="8953" fg:w="293"/><text x="5.7937%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.29%)</title><rect x="5.5007%" y="165" width="0.2937%" height="15" fill="rgb(211,114,34)" fg:x="8953" fg:w="478"/><text x="5.7937%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.03%)</title><rect x="5.7944%" y="165" width="0.0289%" height="15" fill="rgb(226,95,0)" fg:x="9431" fg:w="47"/><text x="6.0874%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.8233%" y="149" width="0.0756%" height="15" fill="rgb(231,103,47)" fg:x="9478" fg:w="123"/><text x="6.1163%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.9155%" y="149" width="0.0756%" height="15" fill="rgb(233,229,35)" fg:x="9628" fg:w="123"/><text x="6.2084%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.18%)</title><rect x="5.8233%" y="165" width="0.1843%" height="15" fill="rgb(242,13,0)" fg:x="9478" fg:w="300"/><text x="6.1163%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="6.0076%" y="149" width="0.0172%" height="15" fill="rgb(219,48,24)" fg:x="9778" fg:w="28"/><text x="6.3006%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.06%)</title><rect x="6.0076%" y="165" width="0.0596%" height="15" fill="rgb(214,127,19)" fg:x="9778" fg:w="97"/><text x="6.3006%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.25%)</title><rect x="6.0875%" y="165" width="0.2519%" height="15" fill="rgb(206,6,46)" fg:x="9908" fg:w="410"/><text x="6.3805%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.10%)</title><rect x="6.3468%" y="133" width="0.1032%" height="15" fill="rgb(229,101,51)" fg:x="10330" fg:w="168"/><text x="6.6397%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.4500%" y="101" width="0.0387%" height="15" fill="rgb(241,224,23)" fg:x="10498" fg:w="63"/><text x="6.7430%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.13%)</title><rect x="6.4500%" y="117" width="0.1278%" height="15" fill="rgb(211,35,53)" fg:x="10498" fg:w="208"/><text x="6.7430%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.14%)</title><rect x="6.4500%" y="133" width="0.1444%" height="15" fill="rgb(247,10,53)" fg:x="10498" fg:w="235"/><text x="6.7430%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 0.29%)</title><rect x="6.3394%" y="149" width="0.2875%" height="15" fill="rgb(254,67,7)" fg:x="10318" fg:w="468"/><text x="6.6324%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 0.31%)</title><rect x="6.3394%" y="165" width="0.3090%" height="15" fill="rgb(216,105,40)" fg:x="10318" fg:w="503"/><text x="6.6324%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="6.6484%" y="149" width="0.0338%" height="15" fill="rgb(205,196,3)" fg:x="10821" fg:w="55"/><text x="6.9414%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.6822%" y="149" width="0.0387%" height="15" fill="rgb(252,112,4)" fg:x="10876" fg:w="63"/><text x="6.9752%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.12%)</title><rect x="6.6484%" y="165" width="0.1223%" height="15" fill="rgb(217,143,41)" fg:x="10821" fg:w="199"/><text x="6.9414%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,203 instructions, 6.88%)</title><rect x="0.1278%" y="181" width="6.8831%" height="15" fill="rgb(220,28,16)" fg:x="208" fg:w="11203"/><text x="0.4208%" y="191.50">ic_cdk:..</text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="7.0195%" y="165" width="0.1229%" height="15" fill="rgb(243,121,26)" fg:x="11425" fg:w="200"/><text x="7.3125%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="7.1424%" y="149" width="1.8186%" height="15" fill="rgb(231,70,21)" fg:x="11625" fg:w="2960"/><text x="7.4354%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="7.1424%" y="165" width="1.8721%" height="15" fill="rgb(209,37,20)" fg:x="11625" fg:w="3047"/><text x="7.4354%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="9.0145%" y="165" width="0.0793%" height="15" fill="rgb(251,184,22)" fg:x="14672" fg:w="129"/><text x="9.3075%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="9.0938%" y="165" width="1.8186%" height="15" fill="rgb(218,211,31)" fg:x="14801" fg:w="2960"/><text x="9.3867%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="11.1287%" y="165" width="0.1229%" height="15" fill="rgb(212,4,20)" fg:x="18113" fg:w="200"/><text x="11.4216%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="11.2515%" y="149" width="1.8186%" height="15" fill="rgb(215,113,5)" fg:x="18313" fg:w="2960"/><text x="11.5445%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="11.2515%" y="165" width="1.8721%" height="15" fill="rgb(205,59,4)" fg:x="18313" fg:w="3047"/><text x="11.5445%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="13.1236%" y="165" width="0.0793%" height="15" fill="rgb(226,30,8)" fg:x="21360" fg:w="129"/><text x="13.4166%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="13.2029%" y="165" width="1.8186%" height="15" fill="rgb(239,102,20)" fg:x="21489" fg:w="2960"/><text x="13.4958%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.2378%" y="165" width="0.1229%" height="15" fill="rgb(221,224,32)" fg:x="24801" fg:w="200"/><text x="15.5307%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="15.5290%" y="165" width="0.1229%" height="15" fill="rgb(244,2,17)" fg:x="25275" fg:w="200"/><text x="15.8220%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="15.6519%" y="149" width="1.8186%" height="15" fill="rgb(214,208,53)" fg:x="25475" fg:w="2960"/><text x="15.9448%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="15.6519%" y="165" width="1.8721%" height="15" fill="rgb(228,107,19)" fg:x="25475" fg:w="3047"/><text x="15.9448%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="17.5240%" y="165" width="0.0793%" height="15" fill="rgb(249,110,8)" fg:x="28522" fg:w="129"/><text x="17.8169%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="17.6032%" y="165" width="1.8186%" height="15" fill="rgb(236,165,39)" fg:x="28651" fg:w="2960"/><text x="17.8962%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="19.6381%" y="165" width="0.1229%" height="15" fill="rgb(250,81,28)" fg:x="31963" fg:w="200"/><text x="19.9311%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="19.7610%" y="149" width="1.8186%" height="15" fill="rgb(222,188,44)" fg:x="32163" fg:w="2960"/><text x="20.0540%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="19.7610%" y="165" width="1.8721%" height="15" fill="rgb(240,22,31)" fg:x="32163" fg:w="3047"/><text x="20.0540%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="21.6331%" y="165" width="0.0793%" height="15" fill="rgb(224,15,12)" fg:x="35210" fg:w="129"/><text x="21.9260%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="21.7123%" y="165" width="1.8186%" height="15" fill="rgb(240,20,2)" fg:x="35339" fg:w="2960"/><text x="22.0053%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="23.7472%" y="165" width="0.1229%" height="15" fill="rgb(207,13,26)" fg:x="38651" fg:w="200"/><text x="24.0402%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.0759%" y="165" width="0.1229%" height="15" fill="rgb(239,182,18)" fg:x="39186" fg:w="200"/><text x="24.3689%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="24.3672%" y="165" width="0.1229%" height="15" fill="rgb(218,73,4)" fg:x="39660" fg:w="200"/><text x="24.6601%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="24.4900%" y="149" width="1.8186%" height="15" fill="rgb(218,17,48)" fg:x="39860" fg:w="2960"/><text x="24.7830%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="24.4900%" y="165" width="1.8721%" height="15" fill="rgb(207,107,30)" fg:x="39860" fg:w="3047"/><text x="24.7830%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="26.3621%" y="165" width="0.0793%" height="15" fill="rgb(247,38,21)" fg:x="42907" fg:w="129"/><text x="26.6551%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="26.4414%" y="165" width="1.8186%" height="15" fill="rgb(222,33,52)" fg:x="43036" fg:w="2960"/><text x="26.7344%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="28.4763%" y="165" width="0.1229%" height="15" fill="rgb(218,163,50)" fg:x="46348" fg:w="200"/><text x="28.7693%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="28.5992%" y="149" width="1.8186%" height="15" fill="rgb(217,61,4)" fg:x="46548" fg:w="2960"/><text x="28.8921%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="28.5992%" y="165" width="1.8721%" height="15" fill="rgb(241,8,16)" fg:x="46548" fg:w="3047"/><text x="28.8921%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="30.4712%" y="165" width="0.0793%" height="15" fill="rgb(244,128,52)" fg:x="49595" fg:w="129"/><text x="30.7642%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="30.5505%" y="165" width="1.8186%" height="15" fill="rgb(209,137,30)" fg:x="49724" fg:w="2960"/><text x="30.8435%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="32.5854%" y="165" width="0.1229%" height="15" fill="rgb(247,36,26)" fg:x="53036" fg:w="200"/><text x="32.8784%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="32.7083%" y="149" width="1.8186%" height="15" fill="rgb(210,85,27)" fg:x="53236" fg:w="2960"/><text x="33.0013%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="32.7083%" y="165" width="1.8721%" height="15" fill="rgb(213,152,2)" fg:x="53236" fg:w="3047"/><text x="33.0013%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="34.5804%" y="165" width="0.0793%" height="15" fill="rgb(210,3,39)" fg:x="56283" fg:w="129"/><text x="34.8733%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="34.6596%" y="165" width="1.8186%" height="15" fill="rgb(248,166,45)" fg:x="56412" fg:w="2960"/><text x="34.9526%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="36.6945%" y="165" width="0.1229%" height="15" fill="rgb(250,31,48)" fg:x="59724" fg:w="200"/><text x="36.9875%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="36.9857%" y="165" width="0.1229%" height="15" fill="rgb(220,92,20)" fg:x="60198" fg:w="200"/><text x="37.2787%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.2770%" y="165" width="0.1229%" height="15" fill="rgb(219,46,45)" fg:x="60672" fg:w="200"/><text x="37.5699%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="37.5682%" y="165" width="0.1229%" height="15" fill="rgb(242,224,50)" fg:x="61146" fg:w="200"/><text x="37.8612%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="37.6911%" y="149" width="1.8186%" height="15" fill="rgb(229,53,23)" fg:x="61346" fg:w="2960"/><text x="37.9840%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="37.6911%" y="165" width="1.8721%" height="15" fill="rgb(214,156,36)" fg:x="61346" fg:w="3047"/><text x="37.9840%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="39.5632%" y="165" width="0.0793%" height="15" fill="rgb(251,164,4)" fg:x="64393" fg:w="129"/><text x="39.8561%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="39.6424%" y="165" width="1.8186%" height="15" fill="rgb(223,49,8)" fg:x="64522" fg:w="2960"/><text x="39.9354%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.6773%" y="165" width="0.1229%" height="15" fill="rgb(205,169,17)" fg:x="67834" fg:w="200"/><text x="41.9703%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="41.9685%" y="165" width="0.1229%" height="15" fill="rgb(205,58,20)" fg:x="68308" fg:w="200"/><text x="42.2615%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.2598%" y="165" width="0.1229%" height="15" fill="rgb(236,227,14)" fg:x="68782" fg:w="200"/><text x="42.5527%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.5510%" y="165" width="0.1229%" height="15" fill="rgb(233,198,53)" fg:x="69256" fg:w="200"/><text x="42.8440%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="42.8422%" y="165" width="0.1229%" height="15" fill="rgb(212,161,42)" fg:x="69730" fg:w="200"/><text x="43.1352%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="43.1709%" y="165" width="0.1229%" height="15" fill="rgb(248,177,35)" fg:x="70265" fg:w="200"/><text x="43.4639%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="43.2938%" y="149" width="1.8186%" height="15" fill="rgb(242,73,36)" fg:x="70465" fg:w="2960"/><text x="43.5868%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="43.2938%" y="165" width="1.8721%" height="15" fill="rgb(245,107,31)" fg:x="70465" fg:w="3047"/><text x="43.5868%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="45.1659%" y="165" width="0.0793%" height="15" fill="rgb(220,120,0)" fg:x="73512" fg:w="129"/><text x="45.4589%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="45.2451%" y="165" width="1.8186%" height="15" fill="rgb(212,41,7)" fg:x="73641" fg:w="2960"/><text x="45.5381%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="47.2800%" y="165" width="0.1229%" height="15" fill="rgb(232,70,4)" fg:x="76953" fg:w="200"/><text x="47.5730%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="47.4029%" y="149" width="1.8186%" height="15" fill="rgb(215,142,44)" fg:x="77153" fg:w="2960"/><text x="47.6959%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="47.4029%" y="165" width="1.8721%" height="15" fill="rgb(215,84,33)" fg:x="77153" fg:w="3047"/><text x="47.6959%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="49.2750%" y="165" width="0.0793%" height="15" fill="rgb(207,229,26)" fg:x="80200" fg:w="129"/><text x="49.5680%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="49.3543%" y="165" width="1.8186%" height="15" fill="rgb(252,106,39)" fg:x="80329" fg:w="2960"/><text x="49.6472%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.3892%" y="165" width="0.1229%" height="15" fill="rgb(234,125,38)" fg:x="83641" fg:w="200"/><text x="51.6821%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="51.7179%" y="165" width="0.1229%" height="15" fill="rgb(252,3,2)" fg:x="84176" fg:w="200"/><text x="52.0108%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.0466%" y="165" width="0.1229%" height="15" fill="rgb(236,1,28)" fg:x="84711" fg:w="200"/><text x="52.3395%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.3378%" y="165" width="0.1229%" height="15" fill="rgb(230,157,39)" fg:x="85185" fg:w="200"/><text x="52.6308%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.6290%" y="165" width="0.1229%" height="15" fill="rgb(243,199,42)" fg:x="85659" fg:w="200"/><text x="52.9220%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="52.9577%" y="165" width="0.1229%" height="15" fill="rgb(215,46,49)" fg:x="86194" fg:w="200"/><text x="53.2507%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.2490%" y="165" width="0.1229%" height="15" fill="rgb(220,180,9)" fg:x="86668" fg:w="200"/><text x="53.5419%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="53.5402%" y="165" width="0.1229%" height="15" fill="rgb(219,185,36)" fg:x="87142" fg:w="200"/><text x="53.8332%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="53.6631%" y="149" width="1.8186%" height="15" fill="rgb(228,117,53)" fg:x="87342" fg:w="2960"/><text x="53.9560%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="53.6631%" y="165" width="1.8721%" height="15" fill="rgb(221,106,12)" fg:x="87342" fg:w="3047"/><text x="53.9560%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="55.5351%" y="165" width="0.0793%" height="15" fill="rgb(215,108,17)" fg:x="90389" fg:w="129"/><text x="55.8281%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="55.6144%" y="165" width="1.8186%" height="15" fill="rgb(245,26,18)" fg:x="90518" fg:w="2960"/><text x="55.9074%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.6493%" y="165" width="0.1229%" height="15" fill="rgb(237,27,36)" fg:x="93830" fg:w="200"/><text x="57.9423%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="57.9405%" y="165" width="0.1229%" height="15" fill="rgb(247,5,1)" fg:x="94304" fg:w="200"/><text x="58.2335%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.2692%" y="165" width="0.1229%" height="15" fill="rgb(215,108,11)" fg:x="94839" fg:w="200"/><text x="58.5622%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="58.5605%" y="165" width="0.1229%" height="15" fill="rgb(252,83,12)" fg:x="95313" fg:w="200"/><text x="58.8534%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="58.6833%" y="149" width="1.8186%" height="15" fill="rgb(224,206,18)" fg:x="95513" fg:w="2960"/><text x="58.9763%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="58.6833%" y="165" width="1.8721%" height="15" fill="rgb(248,203,50)" fg:x="95513" fg:w="3047"/><text x="58.9763%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="60.5554%" y="165" width="0.0793%" height="15" fill="rgb(252,31,12)" fg:x="98560" fg:w="129"/><text x="60.8484%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="60.6347%" y="165" width="1.8186%" height="15" fill="rgb(232,228,4)" fg:x="98689" fg:w="2960"/><text x="60.9276%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="62.6696%" y="165" width="0.1229%" height="15" fill="rgb(245,220,34)" fg:x="102001" fg:w="200"/><text x="62.9625%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="62.7925%" y="149" width="1.8186%" height="15" fill="rgb(239,102,53)" fg:x="102201" fg:w="2960"/><text x="63.0854%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="62.7925%" y="165" width="1.8721%" height="15" fill="rgb(239,63,17)" fg:x="102201" fg:w="3047"/><text x="63.0854%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="64.6645%" y="165" width="0.0793%" height="15" fill="rgb(211,89,0)" fg:x="105248" fg:w="129"/><text x="64.9575%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="64.7438%" y="165" width="1.8186%" height="15" fill="rgb(228,127,4)" fg:x="105377" fg:w="2960"/><text x="65.0368%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="66.7787%" y="165" width="0.1229%" height="15" fill="rgb(248,184,36)" fg:x="108689" fg:w="200"/><text x="67.0717%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.0699%" y="165" width="0.1229%" height="15" fill="rgb(234,210,44)" fg:x="109163" fg:w="200"/><text x="67.3629%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="67.3986%" y="165" width="0.1229%" height="15" fill="rgb(211,192,41)" fg:x="109698" fg:w="200"/><text x="67.6916%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="67.5215%" y="149" width="1.8186%" height="15" fill="rgb(234,98,45)" fg:x="109898" fg:w="2960"/><text x="67.8145%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="67.5215%" y="165" width="1.8721%" height="15" fill="rgb(226,184,27)" fg:x="109898" fg:w="3047"/><text x="67.8145%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="69.3936%" y="165" width="0.0793%" height="15" fill="rgb(248,47,9)" fg:x="112945" fg:w="129"/><text x="69.6866%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="69.4728%" y="165" width="1.8186%" height="15" fill="rgb(234,135,15)" fg:x="113074" fg:w="2960"/><text x="69.7658%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="71.5452%" y="165" width="0.1229%" height="15" fill="rgb(218,229,45)" fg:x="116447" fg:w="200"/><text x="71.8382%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="71.6681%" y="149" width="1.8186%" height="15" fill="rgb(233,105,40)" fg:x="116647" fg:w="2960"/><text x="71.9611%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="71.6681%" y="165" width="1.8721%" height="15" fill="rgb(228,166,10)" fg:x="116647" fg:w="3047"/><text x="71.9611%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="73.5402%" y="165" width="0.0793%" height="15" fill="rgb(243,66,27)" fg:x="119694" fg:w="129"/><text x="73.8332%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="73.6194%" y="165" width="1.8186%" height="15" fill="rgb(231,46,38)" fg:x="119823" fg:w="2960"/><text x="73.9124%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.6543%" y="165" width="0.1229%" height="15" fill="rgb(248,117,18)" fg:x="123135" fg:w="200"/><text x="75.9473%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="75.9456%" y="165" width="0.1229%" height="15" fill="rgb(210,189,6)" fg:x="123609" fg:w="200"/><text x="76.2385%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="76.2743%" y="165" width="0.1229%" height="15" fill="rgb(221,40,47)" fg:x="124144" fg:w="200"/><text x="76.5672%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="76.3971%" y="149" width="1.8186%" height="15" fill="rgb(208,18,49)" fg:x="124344" fg:w="2960"/><text x="76.6901%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="76.3971%" y="165" width="1.8721%" height="15" fill="rgb(233,67,46)" fg:x="124344" fg:w="3047"/><text x="76.6901%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="78.2692%" y="165" width="0.0793%" height="15" fill="rgb(250,128,28)" fg:x="127391" fg:w="129"/><text x="78.5622%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="78.3485%" y="165" width="1.8186%" height="15" fill="rgb(223,170,18)" fg:x="127520" fg:w="2960"/><text x="78.6415%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="80.3834%" y="165" width="0.1229%" height="15" fill="rgb(209,211,26)" fg:x="130832" fg:w="200"/><text x="80.6764%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="80.5063%" y="149" width="1.8186%" height="15" fill="rgb(217,227,11)" fg:x="131032" fg:w="2960"/><text x="80.7992%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="80.5063%" y="165" width="1.8721%" height="15" fill="rgb(211,85,42)" fg:x="131032" fg:w="3047"/><text x="80.7992%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="82.3783%" y="165" width="0.0793%" height="15" fill="rgb(216,171,2)" fg:x="134079" fg:w="129"/><text x="82.6713%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="82.4576%" y="165" width="1.8186%" height="15" fill="rgb(250,124,51)" fg:x="134208" fg:w="2960"/><text x="82.7506%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.4925%" y="165" width="0.1229%" height="15" fill="rgb(249,28,37)" fg:x="137520" fg:w="200"/><text x="84.7855%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="84.8212%" y="165" width="0.1229%" height="15" fill="rgb(218,102,20)" fg:x="138055" fg:w="200"/><text x="85.1142%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="85.1124%" y="165" width="0.1229%" height="15" fill="rgb(254,102,2)" fg:x="138529" fg:w="200"/><text x="85.4054%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="85.2353%" y="149" width="1.8186%" height="15" fill="rgb(241,42,0)" fg:x="138729" fg:w="2960"/><text x="85.5283%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="85.2353%" y="165" width="1.8721%" height="15" fill="rgb(215,39,30)" fg:x="138729" fg:w="3047"/><text x="85.5283%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="87.1074%" y="165" width="0.0793%" height="15" fill="rgb(205,72,52)" fg:x="141776" fg:w="129"/><text x="87.4004%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="87.1867%" y="165" width="1.8186%" height="15" fill="rgb(248,113,13)" fg:x="141905" fg:w="2960"/><text x="87.4796%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.2216%" y="165" width="0.1229%" height="15" fill="rgb(212,120,42)" fg:x="145217" fg:w="200"/><text x="89.5145%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="89.5503%" y="165" width="0.1229%" height="15" fill="rgb(236,88,35)" fg:x="145752" fg:w="200"/><text x="89.8432%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="89.6731%" y="149" width="1.8186%" height="15" fill="rgb(248,224,14)" fg:x="145952" fg:w="2960"/><text x="89.9661%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="89.6731%" y="165" width="1.8721%" height="15" fill="rgb(227,174,17)" fg:x="145952" fg:w="3047"/><text x="89.9661%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="91.5452%" y="165" width="0.0793%" height="15" fill="rgb(225,119,6)" fg:x="148999" fg:w="129"/><text x="91.8382%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="91.6245%" y="165" width="1.8186%" height="15" fill="rgb(211,178,6)" fg:x="149128" fg:w="2960"/><text x="91.9174%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.6594%" y="165" width="0.1229%" height="15" fill="rgb(234,207,25)" fg:x="152440" fg:w="200"/><text x="93.9523%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="93.9506%" y="165" width="0.1229%" height="15" fill="rgb(250,43,8)" fg:x="152914" fg:w="200"/><text x="94.2436%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.12%)</title><rect x="94.2418%" y="165" width="0.1229%" height="15" fill="rgb(208,20,18)" fg:x="153388" fg:w="200"/><text x="94.5348%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="94.3647%" y="149" width="1.8186%" height="15" fill="rgb(227,74,4)" fg:x="153588" fg:w="2960"/><text x="94.6577%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="94.3647%" y="165" width="1.8721%" height="15" fill="rgb(254,167,9)" fg:x="153588" fg:w="3047"/><text x="94.6577%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="96.2368%" y="165" width="0.0793%" height="15" fill="rgb(233,18,12)" fg:x="156635" fg:w="129"/><text x="96.5298%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.82%)</title><rect x="96.3160%" y="165" width="1.8186%" height="15" fill="rgb(237,18,54)" fg:x="156764" fg:w="2960"/><text x="96.6090%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (148,651 instructions, 91.33%)</title><rect x="7.0195%" y="181" width="91.3314%" height="15" fill="rgb(215,135,26)" fg:x="11425" fg:w="148651"/><text x="7.3125%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.3540%" y="117" width="0.0338%" height="15" fill="rgb(234,52,47)" fg:x="160081" fg:w="55"/><text x="98.6470%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="98.3878%" y="117" width="0.0387%" height="15" fill="rgb(207,7,9)" fg:x="160136" fg:w="63"/><text x="98.6808%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (202 instructions, 0.12%)</title><rect x="98.3540%" y="133" width="0.1241%" height="15" fill="rgb(218,149,23)" fg:x="160081" fg:w="202"/><text x="98.6470%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (229 instructions, 0.14%)</title><rect x="98.3540%" y="149" width="0.1407%" height="15" fill="rgb(238,125,25)" fg:x="160081" fg:w="229"/><text x="98.6470%" y="159.50"></text></g><g><title>memset (136 instructions, 0.08%)</title><rect x="98.4947%" y="149" width="0.0836%" height="15" fill="rgb(244,36,8)" fg:x="160310" fg:w="136"/><text x="98.7877%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (530 instructions, 0.33%)</title><rect x="98.3509%" y="165" width="0.3256%" height="15" fill="rgb(229,62,10)" fg:x="160076" fg:w="530"/><text x="98.6439%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.6766%" y="101" width="0.0338%" height="15" fill="rgb(242,183,37)" fg:x="160606" fg:w="55"/><text x="98.9695%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.10%)</title><rect x="98.6766%" y="117" width="0.1001%" height="15" fill="rgb(222,136,53)" fg:x="160606" fg:w="163"/><text x="98.9695%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (197 instructions, 0.12%)</title><rect x="98.6766%" y="133" width="0.1210%" height="15" fill="rgb(208,66,38)" fg:x="160606" fg:w="197"/><text x="98.9695%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (262 instructions, 0.16%)</title><rect x="98.6766%" y="149" width="0.1610%" height="15" fill="rgb(220,71,20)" fg:x="160606" fg:w="262"/><text x="98.9695%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.02%)</title><rect x="98.8511%" y="149" width="0.0184%" height="15" fill="rgb(220,168,3)" fg:x="160890" fg:w="30"/><text x="99.1440%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (540 instructions, 0.33%)</title><rect x="98.6766%" y="165" width="0.3318%" height="15" fill="rgb(248,9,40)" fg:x="160606" fg:w="540"/><text x="98.9695%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.03%)</title><rect x="99.0114%" y="165" width="0.0338%" height="15" fill="rgb(251,29,41)" fg:x="161151" fg:w="55"/><text x="99.3044%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,206 instructions, 0.74%)</title><rect x="98.3509%" y="181" width="0.7410%" height="15" fill="rgb(209,97,45)" fg:x="160076" fg:w="1206"/><text x="98.6439%" y="191.50"></text></g><g><title>imrc_hashmap::batch_put_3_::{{closure}} (162,235 instructions, 99.68%)</title><rect x="0.1278%" y="197" width="99.6774%" height="15" fill="rgb(245,63,32)" fg:x="208" fg:w="162235"/><text x="0.4208%" y="207.50">imrc_hashmap::batch_put_3_::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="99.8126%" y="197" width="0.0498%" height="15" fill="rgb(210,7,50)" fg:x="162455" fg:w="81"/><text x="100.1056%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.08%)</title><rect x="99.8624%" y="197" width="0.0774%" height="15" fill="rgb(229,181,10)" fg:x="162536" fg:w="126"/><text x="100.1553%" y="207.50"></text></g><g><title>all (162,760 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,175,46)" fg:x="0" fg:w="162760"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (162,760 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,213,15)" fg:x="0" fg:w="162760"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>