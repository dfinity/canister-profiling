<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="163245"><g><title>ic_cdk::setup (19 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0116%" height="15" fill="rgb(215,21,9)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.07%)</title><rect x="0.0116%" y="197" width="0.0692%" height="15" fill="rgb(220,145,18)" fg:x="19" fg:w="113"/><text x="0.3046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.04%)</title><rect x="0.0809%" y="197" width="0.0435%" height="15" fill="rgb(216,212,37)" fg:x="132" fg:w="71"/><text x="0.3738%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.1244%" y="165" width="0.0502%" height="15" fill="rgb(225,184,16)" fg:x="203" fg:w="82"/><text x="0.4173%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.04%)</title><rect x="0.1746%" y="149" width="0.0435%" height="15" fill="rgb(207,44,9)" fg:x="285" fg:w="71"/><text x="0.4676%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.25%)</title><rect x="0.2181%" y="149" width="0.2463%" height="15" fill="rgb(225,8,41)" fg:x="356" fg:w="402"/><text x="0.5110%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.05%)</title><rect x="0.4643%" y="149" width="0.0508%" height="15" fill="rgb(235,197,26)" fg:x="758" fg:w="83"/><text x="0.7573%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5152%" y="149" width="0.0331%" height="15" fill="rgb(253,76,5)" fg:x="841" fg:w="54"/><text x="0.8081%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5483%" y="149" width="0.0331%" height="15" fill="rgb(239,101,26)" fg:x="895" fg:w="54"/><text x="0.8412%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.5813%" y="149" width="0.0331%" height="15" fill="rgb(219,113,44)" fg:x="949" fg:w="54"/><text x="0.8743%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.03%)</title><rect x="0.6144%" y="149" width="0.0331%" height="15" fill="rgb(208,34,40)" fg:x="1003" fg:w="54"/><text x="0.9074%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.04%)</title><rect x="0.6475%" y="149" width="0.0435%" height="15" fill="rgb(244,93,10)" fg:x="1057" fg:w="71"/><text x="0.9405%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="0.6910%" y="149" width="0.0398%" height="15" fill="rgb(245,211,19)" fg:x="1128" fg:w="65"/><text x="0.9840%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.25%)</title><rect x="0.7308%" y="149" width="0.2463%" height="15" fill="rgb(217,97,40)" fg:x="1193" fg:w="402"/><text x="1.0238%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="0.9869%" y="133" width="0.0502%" height="15" fill="rgb(209,32,32)" fg:x="1611" fg:w="82"/><text x="1.2798%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.0371%" y="101" width="0.0368%" height="15" fill="rgb(209,24,52)" fg:x="1693" fg:w="60"/><text x="1.3301%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.0371%" y="117" width="0.0521%" height="15" fill="rgb(227,196,47)" fg:x="1693" fg:w="85"/><text x="1.3301%" y="127.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.0947%" y="53" width="0.0184%" height="15" fill="rgb(206,16,41)" fg:x="1787" fg:w="30"/><text x="1.3876%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.0947%" y="69" width="0.0337%" height="15" fill="rgb(248,88,21)" fg:x="1787" fg:w="55"/><text x="1.3876%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.07%)</title><rect x="1.0892%" y="85" width="0.0698%" height="15" fill="rgb(250,29,29)" fg:x="1778" fg:w="114"/><text x="1.3821%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.10%)</title><rect x="1.0892%" y="101" width="0.1023%" height="15" fill="rgb(247,46,14)" fg:x="1778" fg:w="167"/><text x="1.3821%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.11%)</title><rect x="1.0892%" y="117" width="0.1054%" height="15" fill="rgb(238,36,41)" fg:x="1778" fg:w="172"/><text x="1.3821%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.23%)</title><rect x="1.0371%" y="133" width="0.2254%" height="15" fill="rgb(221,138,26)" fg:x="1693" fg:w="368"/><text x="1.3301%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (571 instructions, 0.35%)</title><rect x="0.9869%" y="149" width="0.3498%" height="15" fill="rgb(231,42,23)" fg:x="1611" fg:w="571"/><text x="1.2798%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.05%)</title><rect x="1.3366%" y="149" width="0.0508%" height="15" fill="rgb(246,167,20)" fg:x="2182" fg:w="83"/><text x="1.6296%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="1.3875%" y="149" width="0.0343%" height="15" fill="rgb(244,193,4)" fg:x="2265" fg:w="56"/><text x="1.6805%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.04%)</title><rect x="1.4218%" y="149" width="0.0398%" height="15" fill="rgb(228,104,39)" fg:x="2321" fg:w="65"/><text x="1.7148%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.04%)</title><rect x="1.4616%" y="149" width="0.0398%" height="15" fill="rgb(232,193,15)" fg:x="2386" fg:w="65"/><text x="1.7546%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.25%)</title><rect x="1.5014%" y="133" width="0.2463%" height="15" fill="rgb(218,24,11)" fg:x="2451" fg:w="402"/><text x="1.7944%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="1.7575%" y="117" width="0.0502%" height="15" fill="rgb(216,41,50)" fg:x="2869" fg:w="82"/><text x="2.0504%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.04%)</title><rect x="1.8077%" y="85" width="0.0368%" height="15" fill="rgb(216,198,46)" fg:x="2951" fg:w="60"/><text x="2.1007%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.05%)</title><rect x="1.8077%" y="101" width="0.0521%" height="15" fill="rgb(229,200,21)" fg:x="2951" fg:w="85"/><text x="2.1007%" y="111.50"></text></g><g><title>memcpy (30 instructions, 0.02%)</title><rect x="1.8653%" y="37" width="0.0184%" height="15" fill="rgb(246,68,19)" fg:x="3045" fg:w="30"/><text x="2.1583%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.03%)</title><rect x="1.8653%" y="53" width="0.0337%" height="15" fill="rgb(244,88,52)" fg:x="3045" fg:w="55"/><text x="2.1583%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.07%)</title><rect x="1.8598%" y="69" width="0.0698%" height="15" fill="rgb(208,9,3)" fg:x="3036" fg:w="114"/><text x="2.1528%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.10%)</title><rect x="1.8598%" y="85" width="0.1023%" height="15" fill="rgb(248,81,7)" fg:x="3036" fg:w="167"/><text x="2.1528%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.11%)</title><rect x="1.8598%" y="101" width="0.1054%" height="15" fill="rgb(229,121,17)" fg:x="3036" fg:w="172"/><text x="2.1528%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.23%)</title><rect x="1.8077%" y="117" width="0.2254%" height="15" fill="rgb(220,92,37)" fg:x="2951" fg:w="368"/><text x="2.1007%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (571 instructions, 0.35%)</title><rect x="1.7575%" y="133" width="0.3498%" height="15" fill="rgb(210,228,32)" fg:x="2869" fg:w="571"/><text x="2.0504%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.05%)</title><rect x="2.1073%" y="133" width="0.0508%" height="15" fill="rgb(223,144,16)" fg:x="3440" fg:w="83"/><text x="2.4002%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.03%)</title><rect x="2.1581%" y="133" width="0.0343%" height="15" fill="rgb(230,73,23)" fg:x="3523" fg:w="56"/><text x="2.4511%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.04%)</title><rect x="2.1924%" y="117" width="0.0435%" height="15" fill="rgb(230,201,29)" fg:x="3579" fg:w="71"/><text x="2.4854%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.06%)</title><rect x="2.2359%" y="117" width="0.0551%" height="15" fill="rgb(216,104,23)" fg:x="3650" fg:w="90"/><text x="2.5289%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.04%)</title><rect x="2.2910%" y="117" width="0.0398%" height="15" fill="rgb(237,114,7)" fg:x="3740" fg:w="65"/><text x="2.5840%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.17%)</title><rect x="2.1924%" y="133" width="0.1746%" height="15" fill="rgb(213,184,19)" fg:x="3579" fg:w="285"/><text x="2.4854%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.3670%" y="133" width="0.0502%" height="15" fill="rgb(210,184,42)" fg:x="3864" fg:w="82"/><text x="2.6600%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,698 instructions, 1.04%)</title><rect x="1.5014%" y="149" width="1.0402%" height="15" fill="rgb(234,74,31)" fg:x="2451" fg:w="1698"/><text x="1.7944%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.04%)</title><rect x="2.5416%" y="149" width="0.0398%" height="15" fill="rgb(210,51,34)" fg:x="4149" fg:w="65"/><text x="2.8345%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.6108%" y="133" width="0.0502%" height="15" fill="rgb(248,164,0)" fg:x="4262" fg:w="82"/><text x="2.9038%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.10%)</title><rect x="2.6108%" y="149" width="0.1011%" height="15" fill="rgb(229,63,51)" fg:x="4262" fg:w="165"/><text x="2.9038%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.7119%" y="101" width="0.0502%" height="15" fill="rgb(239,193,25)" fg:x="4427" fg:w="82"/><text x="3.0048%" y="111.50"></text></g><g><title>__rust_alloc (91 instructions, 0.06%)</title><rect x="2.7119%" y="117" width="0.0557%" height="15" fill="rgb(223,185,7)" fg:x="4427" fg:w="91"/><text x="3.0048%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.08%)</title><rect x="2.7119%" y="133" width="0.0772%" height="15" fill="rgb(253,142,10)" fg:x="4427" fg:w="126"/><text x="3.0048%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (196 instructions, 0.12%)</title><rect x="2.7119%" y="149" width="0.1201%" height="15" fill="rgb(213,66,13)" fg:x="4427" fg:w="196"/><text x="3.0048%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.8319%" y="149" width="0.0502%" height="15" fill="rgb(209,122,52)" fg:x="4623" fg:w="82"/><text x="3.1249%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="2.8822%" y="149" width="0.0496%" height="15" fill="rgb(214,95,54)" fg:x="4705" fg:w="81"/><text x="3.1751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9318%" y="149" width="0.0502%" height="15" fill="rgb(253,62,23)" fg:x="4786" fg:w="82"/><text x="3.2248%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="2.9820%" y="149" width="0.0502%" height="15" fill="rgb(210,188,8)" fg:x="4868" fg:w="82"/><text x="3.2750%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="3.0335%" y="149" width="0.0496%" height="15" fill="rgb(232,228,49)" fg:x="4952" fg:w="81"/><text x="3.3264%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.24%)</title><rect x="3.0831%" y="149" width="0.2444%" height="15" fill="rgb(206,76,48)" fg:x="5033" fg:w="399"/><text x="3.3761%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.24%)</title><rect x="3.3275%" y="149" width="0.2444%" height="15" fill="rgb(207,37,13)" fg:x="5432" fg:w="399"/><text x="3.6205%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,506 instructions, 3.99%)</title><rect x="0.1746%" y="165" width="3.9854%" height="15" fill="rgb(215,27,10)" fg:x="285" fg:w="6506"/><text x="0.4676%" y="175.50">can..</text></g><g><title>memcpy (354 instructions, 0.22%)</title><rect x="4.1600%" y="165" width="0.2169%" height="15" fill="rgb(234,222,12)" fg:x="6791" fg:w="354"/><text x="4.4530%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.03%)</title><rect x="4.3769%" y="165" width="0.0306%" height="15" fill="rgb(239,224,27)" fg:x="7145" fg:w="50"/><text x="4.6698%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.4075%" y="165" width="0.0502%" height="15" fill="rgb(252,135,51)" fg:x="7195" fg:w="82"/><text x="4.7005%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.4651%" y="133" width="0.0325%" height="15" fill="rgb(215,26,19)" fg:x="7289" fg:w="53"/><text x="4.7580%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="4.4975%" y="133" width="0.0539%" height="15" fill="rgb(214,7,6)" fg:x="7342" fg:w="88"/><text x="4.7905%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="4.5514%" y="133" width="0.0992%" height="15" fill="rgb(243,31,20)" fg:x="7430" fg:w="162"/><text x="4.8444%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.4651%" y="149" width="0.3308%" height="15" fill="rgb(241,179,11)" fg:x="7289" fg:w="540"/><text x="4.7580%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 0.47%)</title><rect x="4.4577%" y="165" width="0.4656%" height="15" fill="rgb(253,38,48)" fg:x="7277" fg:w="760"/><text x="4.7507%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.05%)</title><rect x="4.9233%" y="165" width="0.0502%" height="15" fill="rgb(207,26,42)" fg:x="8037" fg:w="82"/><text x="5.2162%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="4.9809%" y="133" width="0.0325%" height="15" fill="rgb(210,177,36)" fg:x="8131" fg:w="53"/><text x="5.2738%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.05%)</title><rect x="5.0133%" y="133" width="0.0539%" height="15" fill="rgb(215,20,4)" fg:x="8184" fg:w="88"/><text x="5.3063%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.10%)</title><rect x="5.0672%" y="133" width="0.0992%" height="15" fill="rgb(220,17,1)" fg:x="8272" fg:w="162"/><text x="5.3602%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.33%)</title><rect x="4.9809%" y="149" width="0.3308%" height="15" fill="rgb(235,136,46)" fg:x="8131" fg:w="540"/><text x="5.2738%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.04%)</title><rect x="5.3116%" y="149" width="0.0417%" height="15" fill="rgb(245,35,39)" fg:x="8671" fg:w="68"/><text x="5.6046%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="5.3533%" y="133" width="0.0496%" height="15" fill="rgb(243,109,37)" fg:x="8739" fg:w="81"/><text x="5.6463%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.07%)</title><rect x="5.3533%" y="149" width="0.0662%" height="15" fill="rgb(224,195,0)" fg:x="8739" fg:w="108"/><text x="5.6463%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 0.55%)</title><rect x="4.9735%" y="165" width="0.5483%" height="15" fill="rgb(242,184,42)" fg:x="8119" fg:w="895"/><text x="5.2665%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.03%)</title><rect x="5.5218%" y="117" width="0.0325%" height="15" fill="rgb(235,32,5)" fg:x="9014" fg:w="53"/><text x="5.8147%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.05%)</title><rect x="5.5218%" y="133" width="0.0484%" height="15" fill="rgb(239,129,15)" fg:x="9014" fg:w="79"/><text x="5.8147%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 0.18%)</title><rect x="5.5218%" y="149" width="0.1801%" height="15" fill="rgb(252,84,19)" fg:x="9014" fg:w="294"/><text x="5.8147%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 0.31%)</title><rect x="5.5218%" y="165" width="0.3051%" height="15" fill="rgb(219,91,39)" fg:x="9014" fg:w="498"/><text x="5.8147%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.03%)</title><rect x="5.8268%" y="165" width="0.0276%" height="15" fill="rgb(224,192,39)" fg:x="9512" fg:w="45"/><text x="6.1198%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.8544%" y="149" width="0.0753%" height="15" fill="rgb(221,8,51)" fg:x="9557" fg:w="123"/><text x="6.1474%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.08%)</title><rect x="5.9463%" y="149" width="0.0753%" height="15" fill="rgb(242,22,0)" fg:x="9707" fg:w="123"/><text x="6.2392%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.18%)</title><rect x="5.8544%" y="165" width="0.1838%" height="15" fill="rgb(209,1,45)" fg:x="9557" fg:w="300"/><text x="6.1474%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.02%)</title><rect x="6.0382%" y="149" width="0.0172%" height="15" fill="rgb(240,100,6)" fg:x="9857" fg:w="28"/><text x="6.3311%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.08%)</title><rect x="6.0382%" y="165" width="0.0827%" height="15" fill="rgb(227,144,14)" fg:x="9857" fg:w="135"/><text x="6.3311%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.25%)</title><rect x="6.1411%" y="165" width="0.2512%" height="15" fill="rgb(213,166,6)" fg:x="10025" fg:w="410"/><text x="6.4340%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.10%)</title><rect x="6.4014%" y="133" width="0.1029%" height="15" fill="rgb(210,65,13)" fg:x="10450" fg:w="168"/><text x="6.6944%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.5043%" y="101" width="0.0386%" height="15" fill="rgb(236,64,29)" fg:x="10618" fg:w="63"/><text x="6.7973%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.13%)</title><rect x="6.5043%" y="117" width="0.1274%" height="15" fill="rgb(229,110,21)" fg:x="10618" fg:w="208"/><text x="6.7973%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.14%)</title><rect x="6.5043%" y="133" width="0.1440%" height="15" fill="rgb(217,148,31)" fg:x="10618" fg:w="235"/><text x="6.7973%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 0.29%)</title><rect x="6.3922%" y="149" width="0.2873%" height="15" fill="rgb(206,87,15)" fg:x="10435" fg:w="469"/><text x="6.6852%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (506 instructions, 0.31%)</title><rect x="6.3922%" y="165" width="0.3100%" height="15" fill="rgb(222,131,12)" fg:x="10435" fg:w="506"/><text x="6.6852%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="6.7022%" y="149" width="0.0337%" height="15" fill="rgb(224,194,20)" fg:x="10941" fg:w="55"/><text x="6.9952%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="6.7359%" y="149" width="0.0386%" height="15" fill="rgb(220,86,17)" fg:x="10996" fg:w="63"/><text x="7.0289%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.12%)</title><rect x="6.7022%" y="165" width="0.1219%" height="15" fill="rgb(249,122,25)" fg:x="10941" fg:w="199"/><text x="6.9952%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,319 instructions, 6.93%)</title><rect x="0.1244%" y="181" width="6.9337%" height="15" fill="rgb(223,195,21)" fg:x="203" fg:w="11319"/><text x="0.4173%" y="191.50">ic_cdk::..</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.01%)</title><rect x="7.0581%" y="181" width="0.0123%" height="15" fill="rgb(232,42,35)" fg:x="11522" fg:w="20"/><text x="7.3511%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="7.0704%" y="165" width="0.1195%" height="15" fill="rgb(214,194,53)" fg:x="11542" fg:w="195"/><text x="7.3633%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="7.1898%" y="133" width="1.8132%" height="15" fill="rgb(250,5,39)" fg:x="11737" fg:w="2960"/><text x="7.4828%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="7.1898%" y="149" width="1.8665%" height="15" fill="rgb(221,216,4)" fg:x="11737" fg:w="3047"/><text x="7.4828%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="9.0563%" y="149" width="0.0790%" height="15" fill="rgb(227,216,6)" fg:x="14784" fg:w="129"/><text x="9.3493%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="9.1353%" y="149" width="1.8132%" height="15" fill="rgb(226,105,16)" fg:x="14913" fg:w="2960"/><text x="9.4283%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="7.1898%" y="165" width="3.9474%" height="15" fill="rgb(213,65,1)" fg:x="11737" fg:w="6444"/><text x="7.4828%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="11.1728%" y="165" width="0.1195%" height="15" fill="rgb(251,122,9)" fg:x="18239" fg:w="195"/><text x="11.4657%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="11.2922%" y="133" width="1.8132%" height="15" fill="rgb(241,112,37)" fg:x="18434" fg:w="2960"/><text x="11.5852%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="11.2922%" y="149" width="1.8665%" height="15" fill="rgb(224,43,26)" fg:x="18434" fg:w="3047"/><text x="11.5852%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="13.1587%" y="149" width="0.0790%" height="15" fill="rgb(243,223,14)" fg:x="21481" fg:w="129"/><text x="13.4517%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="13.2378%" y="149" width="1.8132%" height="15" fill="rgb(206,72,13)" fg:x="21610" fg:w="2960"/><text x="13.5307%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="11.2922%" y="165" width="3.9474%" height="15" fill="rgb(223,57,6)" fg:x="18434" fg:w="6444"/><text x="11.5852%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="15.2752%" y="165" width="0.1195%" height="15" fill="rgb(218,105,29)" fg:x="24936" fg:w="195"/><text x="15.5682%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="15.3947%" y="165" width="0.1397%" height="15" fill="rgb(241,135,4)" fg:x="25131" fg:w="228"/><text x="15.6876%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="15.5698%" y="165" width="0.1195%" height="15" fill="rgb(232,57,46)" fg:x="25417" fg:w="195"/><text x="15.8628%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="15.6893%" y="133" width="1.8132%" height="15" fill="rgb(236,31,50)" fg:x="25612" fg:w="2960"/><text x="15.9823%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="15.6893%" y="149" width="1.8665%" height="15" fill="rgb(207,210,43)" fg:x="25612" fg:w="3047"/><text x="15.9823%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="17.5558%" y="149" width="0.0790%" height="15" fill="rgb(251,173,15)" fg:x="28659" fg:w="129"/><text x="17.8488%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="17.6348%" y="149" width="1.8132%" height="15" fill="rgb(243,220,20)" fg:x="28788" fg:w="2960"/><text x="17.9278%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="15.6893%" y="165" width="3.9474%" height="15" fill="rgb(239,33,37)" fg:x="25612" fg:w="6444"/><text x="15.9823%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="19.6723%" y="165" width="0.1195%" height="15" fill="rgb(235,222,0)" fg:x="32114" fg:w="195"/><text x="19.9652%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="19.7917%" y="133" width="1.8132%" height="15" fill="rgb(224,32,6)" fg:x="32309" fg:w="2960"/><text x="20.0847%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="19.7917%" y="149" width="1.8665%" height="15" fill="rgb(250,182,34)" fg:x="32309" fg:w="3047"/><text x="20.0847%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="21.6582%" y="149" width="0.0790%" height="15" fill="rgb(244,73,10)" fg:x="35356" fg:w="129"/><text x="21.9512%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="21.7373%" y="149" width="1.8132%" height="15" fill="rgb(208,223,25)" fg:x="35485" fg:w="2960"/><text x="22.0302%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="19.7917%" y="165" width="3.9474%" height="15" fill="rgb(246,176,20)" fg:x="32309" fg:w="6444"/><text x="20.0847%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="23.7747%" y="165" width="0.1195%" height="15" fill="rgb(230,79,46)" fg:x="38811" fg:w="195"/><text x="24.0677%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="23.8941%" y="165" width="0.1758%" height="15" fill="rgb(213,153,28)" fg:x="39006" fg:w="287"/><text x="24.1871%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="24.1055%" y="165" width="0.1195%" height="15" fill="rgb(232,113,28)" fg:x="39351" fg:w="195"/><text x="24.3985%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="24.2249%" y="165" width="0.1397%" height="15" fill="rgb(223,130,3)" fg:x="39546" fg:w="228"/><text x="24.5179%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="24.4001%" y="165" width="0.1195%" height="15" fill="rgb(243,108,0)" fg:x="39832" fg:w="195"/><text x="24.6931%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="24.5196%" y="133" width="1.8132%" height="15" fill="rgb(220,183,29)" fg:x="40027" fg:w="2960"/><text x="24.8126%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="24.5196%" y="149" width="1.8665%" height="15" fill="rgb(236,199,18)" fg:x="40027" fg:w="3047"/><text x="24.8126%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="26.3861%" y="149" width="0.0790%" height="15" fill="rgb(232,9,42)" fg:x="43074" fg:w="129"/><text x="26.6791%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="26.4651%" y="149" width="1.8132%" height="15" fill="rgb(240,6,41)" fg:x="43203" fg:w="2960"/><text x="26.7581%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="24.5196%" y="165" width="3.9474%" height="15" fill="rgb(219,184,43)" fg:x="40027" fg:w="6444"/><text x="24.8126%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="28.5026%" y="165" width="0.1195%" height="15" fill="rgb(233,109,30)" fg:x="46529" fg:w="195"/><text x="28.7955%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="28.6220%" y="133" width="1.8132%" height="15" fill="rgb(240,58,31)" fg:x="46724" fg:w="2960"/><text x="28.9150%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="28.6220%" y="149" width="1.8665%" height="15" fill="rgb(223,18,6)" fg:x="46724" fg:w="3047"/><text x="28.9150%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="30.4885%" y="149" width="0.0790%" height="15" fill="rgb(242,83,4)" fg:x="49771" fg:w="129"/><text x="30.7815%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="30.5676%" y="149" width="1.8132%" height="15" fill="rgb(232,128,20)" fg:x="49900" fg:w="2960"/><text x="30.8605%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="28.6220%" y="165" width="3.9474%" height="15" fill="rgb(245,150,24)" fg:x="46724" fg:w="6444"/><text x="28.9150%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="32.6050%" y="165" width="0.1195%" height="15" fill="rgb(211,147,35)" fg:x="53226" fg:w="195"/><text x="32.8979%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="32.7244%" y="133" width="1.8132%" height="15" fill="rgb(231,136,19)" fg:x="53421" fg:w="2960"/><text x="33.0174%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="32.7244%" y="149" width="1.8665%" height="15" fill="rgb(226,190,6)" fg:x="53421" fg:w="3047"/><text x="33.0174%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="34.5910%" y="149" width="0.0790%" height="15" fill="rgb(239,4,20)" fg:x="56468" fg:w="129"/><text x="34.8839%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="34.6700%" y="149" width="1.8132%" height="15" fill="rgb(208,51,7)" fg:x="56597" fg:w="2960"/><text x="34.9629%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="32.7244%" y="165" width="3.9474%" height="15" fill="rgb(250,120,54)" fg:x="53421" fg:w="6444"/><text x="33.0174%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="36.7074%" y="165" width="0.1195%" height="15" fill="rgb(209,52,26)" fg:x="59923" fg:w="195"/><text x="37.0004%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="36.8269%" y="165" width="0.1397%" height="15" fill="rgb(211,93,52)" fg:x="60118" fg:w="228"/><text x="37.1198%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="37.0021%" y="165" width="0.1195%" height="15" fill="rgb(234,139,5)" fg:x="60404" fg:w="195"/><text x="37.2950%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="37.1215%" y="165" width="0.1397%" height="15" fill="rgb(246,138,2)" fg:x="60599" fg:w="228"/><text x="37.4145%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="37.2967%" y="165" width="0.1195%" height="15" fill="rgb(245,226,50)" fg:x="60885" fg:w="195"/><text x="37.5897%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="37.4162%" y="165" width="0.1397%" height="15" fill="rgb(245,88,4)" fg:x="61080" fg:w="228"/><text x="37.7091%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="37.5914%" y="165" width="0.1195%" height="15" fill="rgb(217,194,0)" fg:x="61366" fg:w="195"/><text x="37.8843%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="37.7108%" y="133" width="1.8132%" height="15" fill="rgb(223,189,4)" fg:x="61561" fg:w="2960"/><text x="38.0038%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="37.7108%" y="149" width="1.8665%" height="15" fill="rgb(231,182,38)" fg:x="61561" fg:w="3047"/><text x="38.0038%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="39.5773%" y="149" width="0.0790%" height="15" fill="rgb(224,146,45)" fg:x="64608" fg:w="129"/><text x="39.8703%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="39.6563%" y="149" width="1.8132%" height="15" fill="rgb(212,177,13)" fg:x="64737" fg:w="2960"/><text x="39.9493%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="37.7108%" y="165" width="3.9474%" height="15" fill="rgb(214,50,2)" fg:x="61561" fg:w="6444"/><text x="38.0038%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="41.6938%" y="165" width="0.1195%" height="15" fill="rgb(215,224,54)" fg:x="68063" fg:w="195"/><text x="41.9867%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="41.8132%" y="165" width="0.1397%" height="15" fill="rgb(245,108,3)" fg:x="68258" fg:w="228"/><text x="42.1062%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="41.9884%" y="165" width="0.1195%" height="15" fill="rgb(206,67,42)" fg:x="68544" fg:w="195"/><text x="42.2814%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="42.1079%" y="165" width="0.1397%" height="15" fill="rgb(248,205,37)" fg:x="68739" fg:w="228"/><text x="42.4008%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="42.2831%" y="165" width="0.1195%" height="15" fill="rgb(225,175,39)" fg:x="69025" fg:w="195"/><text x="42.5760%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="42.4025%" y="165" width="0.1397%" height="15" fill="rgb(225,150,8)" fg:x="69220" fg:w="228"/><text x="42.6955%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="42.5777%" y="165" width="0.1195%" height="15" fill="rgb(219,184,16)" fg:x="69506" fg:w="195"/><text x="42.8707%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="42.6972%" y="165" width="0.1397%" height="15" fill="rgb(217,128,47)" fg:x="69701" fg:w="228"/><text x="42.9901%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="42.8724%" y="165" width="0.1195%" height="15" fill="rgb(217,53,1)" fg:x="69987" fg:w="195"/><text x="43.1653%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="42.9918%" y="165" width="0.1758%" height="15" fill="rgb(253,53,50)" fg:x="70182" fg:w="287"/><text x="43.2848%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="43.2032%" y="165" width="0.1195%" height="15" fill="rgb(222,109,26)" fg:x="70527" fg:w="195"/><text x="43.4961%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="43.3226%" y="133" width="1.8132%" height="15" fill="rgb(239,125,40)" fg:x="70722" fg:w="2960"/><text x="43.6156%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="43.3226%" y="149" width="1.8665%" height="15" fill="rgb(205,207,19)" fg:x="70722" fg:w="3047"/><text x="43.6156%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="45.1891%" y="149" width="0.0790%" height="15" fill="rgb(212,115,4)" fg:x="73769" fg:w="129"/><text x="45.4821%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="45.2682%" y="149" width="1.8132%" height="15" fill="rgb(237,149,26)" fg:x="73898" fg:w="2960"/><text x="45.5611%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="43.3226%" y="165" width="3.9474%" height="15" fill="rgb(210,209,15)" fg:x="70722" fg:w="6444"/><text x="43.6156%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="47.3056%" y="165" width="0.1195%" height="15" fill="rgb(245,20,53)" fg:x="77224" fg:w="195"/><text x="47.5986%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="47.4250%" y="133" width="1.8132%" height="15" fill="rgb(218,182,48)" fg:x="77419" fg:w="2960"/><text x="47.7180%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="47.4250%" y="149" width="1.8665%" height="15" fill="rgb(230,100,31)" fg:x="77419" fg:w="3047"/><text x="47.7180%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="49.2916%" y="149" width="0.0790%" height="15" fill="rgb(227,95,21)" fg:x="80466" fg:w="129"/><text x="49.5845%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="49.3706%" y="149" width="1.8132%" height="15" fill="rgb(246,166,10)" fg:x="80595" fg:w="2960"/><text x="49.6635%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="47.4250%" y="165" width="3.9474%" height="15" fill="rgb(211,70,26)" fg:x="77419" fg:w="6444"/><text x="47.7180%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="51.4080%" y="165" width="0.1195%" height="15" fill="rgb(229,171,4)" fg:x="83921" fg:w="195"/><text x="51.7010%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="51.5275%" y="165" width="0.1758%" height="15" fill="rgb(248,192,20)" fg:x="84116" fg:w="287"/><text x="51.8204%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="51.7388%" y="165" width="0.1195%" height="15" fill="rgb(228,186,47)" fg:x="84461" fg:w="195"/><text x="52.0318%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="51.8582%" y="165" width="0.1758%" height="15" fill="rgb(230,16,18)" fg:x="84656" fg:w="287"/><text x="52.1512%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="52.0696%" y="165" width="0.1195%" height="15" fill="rgb(205,201,27)" fg:x="85001" fg:w="195"/><text x="52.3626%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="52.1890%" y="165" width="0.1397%" height="15" fill="rgb(223,60,25)" fg:x="85196" fg:w="228"/><text x="52.4820%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="52.3642%" y="165" width="0.1195%" height="15" fill="rgb(237,154,28)" fg:x="85482" fg:w="195"/><text x="52.6572%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="52.4837%" y="165" width="0.1397%" height="15" fill="rgb(224,213,22)" fg:x="85677" fg:w="228"/><text x="52.7767%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="52.6589%" y="165" width="0.1195%" height="15" fill="rgb(250,16,13)" fg:x="85963" fg:w="195"/><text x="52.9519%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="52.7783%" y="165" width="0.1758%" height="15" fill="rgb(230,164,12)" fg:x="86158" fg:w="287"/><text x="53.0713%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="52.9897%" y="165" width="0.1195%" height="15" fill="rgb(239,109,29)" fg:x="86503" fg:w="195"/><text x="53.2826%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="53.1091%" y="165" width="0.1397%" height="15" fill="rgb(237,83,51)" fg:x="86698" fg:w="228"/><text x="53.4021%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="53.2843%" y="165" width="0.1195%" height="15" fill="rgb(245,85,9)" fg:x="86984" fg:w="195"/><text x="53.5773%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="53.4038%" y="165" width="0.1397%" height="15" fill="rgb(232,84,38)" fg:x="87179" fg:w="228"/><text x="53.6967%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="53.5790%" y="165" width="0.1195%" height="15" fill="rgb(245,134,14)" fg:x="87465" fg:w="195"/><text x="53.8719%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="53.6984%" y="133" width="1.8132%" height="15" fill="rgb(214,3,0)" fg:x="87660" fg:w="2960"/><text x="53.9914%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="53.6984%" y="149" width="1.8665%" height="15" fill="rgb(243,21,12)" fg:x="87660" fg:w="3047"/><text x="53.9914%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="55.5649%" y="149" width="0.0790%" height="15" fill="rgb(223,46,29)" fg:x="90707" fg:w="129"/><text x="55.8579%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="55.6440%" y="149" width="1.8132%" height="15" fill="rgb(248,206,44)" fg:x="90836" fg:w="2960"/><text x="55.9369%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="53.6984%" y="165" width="3.9474%" height="15" fill="rgb(244,132,39)" fg:x="87660" fg:w="6444"/><text x="53.9914%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="57.6814%" y="165" width="0.1195%" height="15" fill="rgb(223,136,38)" fg:x="94162" fg:w="195"/><text x="57.9744%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="57.8009%" y="165" width="0.1397%" height="15" fill="rgb(239,169,40)" fg:x="94357" fg:w="228"/><text x="58.0938%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="57.9760%" y="165" width="0.1195%" height="15" fill="rgb(251,3,13)" fg:x="94643" fg:w="195"/><text x="58.2690%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="58.0955%" y="165" width="0.1758%" height="15" fill="rgb(247,220,11)" fg:x="94838" fg:w="287"/><text x="58.3885%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="58.3068%" y="165" width="0.1195%" height="15" fill="rgb(242,211,41)" fg:x="95183" fg:w="195"/><text x="58.5998%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="58.4263%" y="165" width="0.1397%" height="15" fill="rgb(235,67,18)" fg:x="95378" fg:w="228"/><text x="58.7193%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="58.6015%" y="165" width="0.1195%" height="15" fill="rgb(238,123,21)" fg:x="95664" fg:w="195"/><text x="58.8945%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="58.7209%" y="133" width="1.8132%" height="15" fill="rgb(247,102,11)" fg:x="95859" fg:w="2960"/><text x="59.0139%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="58.7209%" y="149" width="1.8665%" height="15" fill="rgb(251,183,32)" fg:x="95859" fg:w="3047"/><text x="59.0139%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="60.5875%" y="149" width="0.0790%" height="15" fill="rgb(215,123,8)" fg:x="98906" fg:w="129"/><text x="60.8804%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="60.6665%" y="149" width="1.8132%" height="15" fill="rgb(253,190,54)" fg:x="99035" fg:w="2960"/><text x="60.9595%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="58.7209%" y="165" width="3.9474%" height="15" fill="rgb(241,214,41)" fg:x="95859" fg:w="6444"/><text x="59.0139%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="62.7039%" y="165" width="0.1195%" height="15" fill="rgb(205,105,49)" fg:x="102361" fg:w="195"/><text x="62.9969%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="62.8234%" y="133" width="1.8132%" height="15" fill="rgb(239,228,41)" fg:x="102556" fg:w="2960"/><text x="63.1163%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="62.8234%" y="149" width="1.8665%" height="15" fill="rgb(211,59,16)" fg:x="102556" fg:w="3047"/><text x="63.1163%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="64.6899%" y="149" width="0.0790%" height="15" fill="rgb(224,109,47)" fg:x="105603" fg:w="129"/><text x="64.9829%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="64.7689%" y="149" width="1.8132%" height="15" fill="rgb(250,99,12)" fg:x="105732" fg:w="2960"/><text x="65.0619%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="62.8234%" y="165" width="3.9474%" height="15" fill="rgb(249,226,19)" fg:x="102556" fg:w="6444"/><text x="63.1163%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="66.8063%" y="165" width="0.1195%" height="15" fill="rgb(233,11,12)" fg:x="109058" fg:w="195"/><text x="67.0993%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="66.9258%" y="165" width="0.1397%" height="15" fill="rgb(254,3,50)" fg:x="109253" fg:w="228"/><text x="67.2188%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="67.1010%" y="165" width="0.1195%" height="15" fill="rgb(247,112,34)" fg:x="109539" fg:w="195"/><text x="67.3940%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="67.2204%" y="165" width="0.1758%" height="15" fill="rgb(217,68,52)" fg:x="109734" fg:w="287"/><text x="67.5134%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="67.4318%" y="165" width="0.1195%" height="15" fill="rgb(208,0,45)" fg:x="110079" fg:w="195"/><text x="67.7247%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="67.5512%" y="133" width="1.8132%" height="15" fill="rgb(238,199,48)" fg:x="110274" fg:w="2960"/><text x="67.8442%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="67.5512%" y="149" width="1.8665%" height="15" fill="rgb(205,196,37)" fg:x="110274" fg:w="3047"/><text x="67.8442%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="69.4177%" y="149" width="0.0790%" height="15" fill="rgb(214,92,6)" fg:x="113321" fg:w="129"/><text x="69.7107%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="69.4968%" y="149" width="1.8132%" height="15" fill="rgb(212,171,6)" fg:x="113450" fg:w="2960"/><text x="69.7897%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,503 instructions, 3.98%)</title><rect x="67.5512%" y="165" width="3.9836%" height="15" fill="rgb(233,174,28)" fg:x="110274" fg:w="6503"/><text x="67.8442%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="71.5703%" y="165" width="0.1195%" height="15" fill="rgb(213,155,39)" fg:x="116835" fg:w="195"/><text x="71.8633%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="71.6898%" y="133" width="1.8132%" height="15" fill="rgb(228,186,7)" fg:x="117030" fg:w="2960"/><text x="71.9828%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="71.6898%" y="149" width="1.8665%" height="15" fill="rgb(245,119,47)" fg:x="117030" fg:w="3047"/><text x="71.9828%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="73.5563%" y="149" width="0.0790%" height="15" fill="rgb(239,192,43)" fg:x="120077" fg:w="129"/><text x="73.8493%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="73.6353%" y="149" width="1.8132%" height="15" fill="rgb(218,222,32)" fg:x="120206" fg:w="2960"/><text x="73.9283%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="71.6898%" y="165" width="3.9474%" height="15" fill="rgb(212,50,33)" fg:x="117030" fg:w="6444"/><text x="71.9828%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="75.6728%" y="165" width="0.1195%" height="15" fill="rgb(249,198,18)" fg:x="123532" fg:w="195"/><text x="75.9657%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="75.7922%" y="165" width="0.1397%" height="15" fill="rgb(211,100,29)" fg:x="123727" fg:w="228"/><text x="76.0852%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="75.9674%" y="165" width="0.1195%" height="15" fill="rgb(210,42,4)" fg:x="124013" fg:w="195"/><text x="76.2604%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="76.0869%" y="165" width="0.1758%" height="15" fill="rgb(239,136,10)" fg:x="124208" fg:w="287"/><text x="76.3798%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="76.2982%" y="165" width="0.1195%" height="15" fill="rgb(237,48,41)" fg:x="124553" fg:w="195"/><text x="76.5912%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="76.4177%" y="133" width="1.8132%" height="15" fill="rgb(243,167,1)" fg:x="124748" fg:w="2960"/><text x="76.7106%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="76.4177%" y="149" width="1.8665%" height="15" fill="rgb(232,76,13)" fg:x="124748" fg:w="3047"/><text x="76.7106%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="78.2842%" y="149" width="0.0790%" height="15" fill="rgb(225,123,39)" fg:x="127795" fg:w="129"/><text x="78.5771%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="78.3632%" y="149" width="1.8132%" height="15" fill="rgb(245,104,36)" fg:x="127924" fg:w="2960"/><text x="78.6562%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="76.4177%" y="165" width="3.9474%" height="15" fill="rgb(209,154,31)" fg:x="124748" fg:w="6444"/><text x="76.7106%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="80.4006%" y="165" width="0.1195%" height="15" fill="rgb(234,51,9)" fg:x="131250" fg:w="195"/><text x="80.6936%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="80.5201%" y="133" width="1.8132%" height="15" fill="rgb(217,2,18)" fg:x="131445" fg:w="2960"/><text x="80.8130%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="80.5201%" y="149" width="1.8665%" height="15" fill="rgb(216,189,42)" fg:x="131445" fg:w="3047"/><text x="80.8130%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="82.3866%" y="149" width="0.0790%" height="15" fill="rgb(236,206,21)" fg:x="134492" fg:w="129"/><text x="82.6796%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="82.4656%" y="149" width="1.8132%" height="15" fill="rgb(207,44,46)" fg:x="134621" fg:w="2960"/><text x="82.7586%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="80.5201%" y="165" width="3.9474%" height="15" fill="rgb(250,137,29)" fg:x="131445" fg:w="6444"/><text x="80.8130%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="84.5030%" y="165" width="0.1195%" height="15" fill="rgb(224,226,2)" fg:x="137947" fg:w="195"/><text x="84.7960%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="84.6225%" y="165" width="0.1758%" height="15" fill="rgb(234,75,42)" fg:x="138142" fg:w="287"/><text x="84.9155%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="84.8338%" y="165" width="0.1195%" height="15" fill="rgb(215,100,31)" fg:x="138487" fg:w="195"/><text x="85.1268%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="84.9533%" y="165" width="0.1397%" height="15" fill="rgb(206,9,41)" fg:x="138682" fg:w="228"/><text x="85.2463%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="85.1285%" y="165" width="0.1195%" height="15" fill="rgb(251,173,13)" fg:x="138968" fg:w="195"/><text x="85.4215%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="85.2479%" y="133" width="1.8132%" height="15" fill="rgb(246,102,48)" fg:x="139163" fg:w="2960"/><text x="85.5409%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="85.2479%" y="149" width="1.8665%" height="15" fill="rgb(241,128,18)" fg:x="139163" fg:w="3047"/><text x="85.5409%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="87.1145%" y="149" width="0.0790%" height="15" fill="rgb(224,182,39)" fg:x="142210" fg:w="129"/><text x="87.4074%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="87.1935%" y="149" width="1.8132%" height="15" fill="rgb(248,171,50)" fg:x="142339" fg:w="2960"/><text x="87.4865%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="85.2479%" y="165" width="3.9474%" height="15" fill="rgb(254,126,49)" fg:x="139163" fg:w="6444"/><text x="85.5409%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="89.2309%" y="165" width="0.1195%" height="15" fill="rgb(205,80,52)" fg:x="145665" fg:w="195"/><text x="89.5239%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (287 instructions, 0.18%)</title><rect x="89.3504%" y="165" width="0.1758%" height="15" fill="rgb(205,133,23)" fg:x="145860" fg:w="287"/><text x="89.6433%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="89.5617%" y="165" width="0.1195%" height="15" fill="rgb(212,46,26)" fg:x="146205" fg:w="195"/><text x="89.8547%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="89.6812%" y="133" width="1.8132%" height="15" fill="rgb(217,89,8)" fg:x="146400" fg:w="2960"/><text x="89.9741%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="89.6812%" y="149" width="1.8665%" height="15" fill="rgb(243,59,45)" fg:x="146400" fg:w="3047"/><text x="89.9741%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="91.5477%" y="149" width="0.0790%" height="15" fill="rgb(215,176,23)" fg:x="149447" fg:w="129"/><text x="91.8406%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="91.6267%" y="149" width="1.8132%" height="15" fill="rgb(251,120,32)" fg:x="149576" fg:w="2960"/><text x="91.9197%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="89.6812%" y="165" width="3.9474%" height="15" fill="rgb(238,130,51)" fg:x="146400" fg:w="6444"/><text x="89.9741%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="93.6641%" y="165" width="0.1195%" height="15" fill="rgb(254,141,16)" fg:x="152902" fg:w="195"/><text x="93.9571%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="93.7836%" y="165" width="0.1397%" height="15" fill="rgb(212,229,54)" fg:x="153097" fg:w="228"/><text x="94.0765%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="93.9588%" y="165" width="0.1195%" height="15" fill="rgb(239,149,0)" fg:x="153383" fg:w="195"/><text x="94.2517%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (228 instructions, 0.14%)</title><rect x="94.0782%" y="165" width="0.1397%" height="15" fill="rgb(213,44,1)" fg:x="153578" fg:w="228"/><text x="94.3712%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.12%)</title><rect x="94.2534%" y="165" width="0.1195%" height="15" fill="rgb(220,123,14)" fg:x="153864" fg:w="195"/><text x="94.5464%" y="175.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="94.3729%" y="133" width="1.8132%" height="15" fill="rgb(238,84,45)" fg:x="154059" fg:w="2960"/><text x="94.6658%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,047 instructions, 1.87%)</title><rect x="94.3729%" y="149" width="1.8665%" height="15" fill="rgb(231,204,20)" fg:x="154059" fg:w="3047"/><text x="94.6658%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (129 instructions, 0.08%)</title><rect x="96.2394%" y="149" width="0.0790%" height="15" fill="rgb(238,129,52)" fg:x="157106" fg:w="129"/><text x="96.5324%" y="159.50"></text></g><g><title>memcpy (2,960 instructions, 1.81%)</title><rect x="96.3184%" y="149" width="1.8132%" height="15" fill="rgb(208,141,31)" fg:x="157235" fg:w="2960"/><text x="96.6114%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,444 instructions, 3.95%)</title><rect x="94.3729%" y="165" width="3.9474%" height="15" fill="rgb(221,1,41)" fg:x="154059" fg:w="6444"/><text x="94.6658%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (149,019 instructions, 91.29%)</title><rect x="7.0704%" y="181" width="91.2855%" height="15" fill="rgb(251,195,28)" fg:x="11542" fg:w="149019"/><text x="7.3633%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.3632%" y="117" width="0.0337%" height="15" fill="rgb(252,178,46)" fg:x="160573" fg:w="55"/><text x="98.6562%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.04%)</title><rect x="98.3969%" y="117" width="0.0386%" height="15" fill="rgb(249,13,48)" fg:x="160628" fg:w="63"/><text x="98.6899%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (202 instructions, 0.12%)</title><rect x="98.3632%" y="133" width="0.1237%" height="15" fill="rgb(251,207,23)" fg:x="160573" fg:w="202"/><text x="98.6562%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (229 instructions, 0.14%)</title><rect x="98.3632%" y="149" width="0.1403%" height="15" fill="rgb(237,227,46)" fg:x="160573" fg:w="229"/><text x="98.6562%" y="159.50"></text></g><g><title>memset (136 instructions, 0.08%)</title><rect x="98.5035%" y="149" width="0.0833%" height="15" fill="rgb(253,44,43)" fg:x="160802" fg:w="136"/><text x="98.7964%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (535 instructions, 0.33%)</title><rect x="98.3558%" y="165" width="0.3277%" height="15" fill="rgb(208,70,5)" fg:x="160561" fg:w="535"/><text x="98.6488%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.02%)</title><rect x="98.6836%" y="149" width="0.0196%" height="15" fill="rgb(227,27,14)" fg:x="161096" fg:w="32"/><text x="98.9765%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.03%)</title><rect x="98.7032%" y="69" width="0.0337%" height="15" fill="rgb(241,22,54)" fg:x="161128" fg:w="55"/><text x="98.9961%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (159 instructions, 0.10%)</title><rect x="98.7032%" y="85" width="0.0974%" height="15" fill="rgb(232,16,32)" fg:x="161128" fg:w="159"/><text x="98.9961%" y="95.50"></text></g><g><title>__rust_alloc (168 instructions, 0.10%)</title><rect x="98.7032%" y="101" width="0.1029%" height="15" fill="rgb(219,91,15)" fg:x="161128" fg:w="168"/><text x="98.9961%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (203 instructions, 0.12%)</title><rect x="98.7032%" y="117" width="0.1244%" height="15" fill="rgb(208,170,20)" fg:x="161128" fg:w="203"/><text x="98.9961%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (270 instructions, 0.17%)</title><rect x="98.7032%" y="133" width="0.1654%" height="15" fill="rgb(226,89,41)" fg:x="161128" fg:w="270"/><text x="98.9961%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (454 instructions, 0.28%)</title><rect x="98.7032%" y="149" width="0.2781%" height="15" fill="rgb(223,67,21)" fg:x="161128" fg:w="454"/><text x="98.9961%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.02%)</title><rect x="98.9813%" y="149" width="0.0184%" height="15" fill="rgb(225,80,18)" fg:x="161582" fg:w="30"/><text x="99.2743%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (589 instructions, 0.36%)</title><rect x="98.6836%" y="165" width="0.3608%" height="15" fill="rgb(246,64,5)" fg:x="161096" fg:w="589"/><text x="98.9765%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.03%)</title><rect x="99.0468%" y="165" width="0.0337%" height="15" fill="rgb(225,187,10)" fg:x="161689" fg:w="55"/><text x="99.3398%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,257 instructions, 0.77%)</title><rect x="98.3558%" y="181" width="0.7700%" height="15" fill="rgb(247,39,52)" fg:x="160561" fg:w="1257"/><text x="98.6488%" y="191.50"></text></g><g><title>imrc_hashmap::batch_put_6_::{{closure}} (162,725 instructions, 99.68%)</title><rect x="0.1244%" y="197" width="99.6815%" height="15" fill="rgb(237,140,40)" fg:x="203" fg:w="162725"/><text x="0.4173%" y="207.50">imrc_hashmap::batch_put_6_::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.05%)</title><rect x="99.8132%" y="197" width="0.0496%" height="15" fill="rgb(208,159,24)" fg:x="162940" fg:w="81"/><text x="100.1061%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.08%)</title><rect x="99.8628%" y="197" width="0.0772%" height="15" fill="rgb(234,36,9)" fg:x="163021" fg:w="126"/><text x="100.1558%" y="207.50"></text></g><g><title>all (163,245 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(231,72,8)" fg:x="0" fg:w="163245"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (163,245 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(234,60,36)" fg:x="0" fg:w="163245"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>