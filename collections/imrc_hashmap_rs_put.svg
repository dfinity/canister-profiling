<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="179184"><g><title>ic_cdk::setup (24 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0134%" height="15" fill="rgb(254,141,41)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (115 instructions, 0.06%)</title><rect x="0.0134%" y="197" width="0.0642%" height="15" fill="rgb(211,88,19)" fg:x="24" fg:w="115"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.04%)</title><rect x="0.0776%" y="197" width="0.0446%" height="15" fill="rgb(228,151,17)" fg:x="139" fg:w="80"/><text x="0.3705%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.1222%" y="165" width="0.0508%" height="15" fill="rgb(217,61,52)" fg:x="219" fg:w="91"/><text x="0.4152%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.1730%" y="149" width="0.0458%" height="15" fill="rgb(239,126,16)" fg:x="310" fg:w="82"/><text x="0.4660%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="0.2188%" y="149" width="0.2472%" height="15" fill="rgb(253,206,43)" fg:x="392" fg:w="443"/><text x="0.5117%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="0.4660%" y="149" width="0.0530%" height="15" fill="rgb(212,227,51)" fg:x="835" fg:w="95"/><text x="0.7590%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5190%" y="149" width="0.0335%" height="15" fill="rgb(230,187,45)" fg:x="930" fg:w="60"/><text x="0.8120%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5525%" y="149" width="0.0335%" height="15" fill="rgb(235,179,22)" fg:x="990" fg:w="60"/><text x="0.8455%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.5860%" y="149" width="0.0335%" height="15" fill="rgb(240,127,38)" fg:x="1050" fg:w="60"/><text x="0.8790%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.03%)</title><rect x="0.6195%" y="149" width="0.0335%" height="15" fill="rgb(254,81,5)" fg:x="1110" fg:w="60"/><text x="0.9124%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="0.6530%" y="149" width="0.0458%" height="15" fill="rgb(241,182,9)" fg:x="1170" fg:w="82"/><text x="0.9459%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="0.6987%" y="149" width="0.0391%" height="15" fill="rgb(226,88,24)" fg:x="1252" fg:w="70"/><text x="0.9917%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="0.7378%" y="149" width="0.2472%" height="15" fill="rgb(223,97,7)" fg:x="1322" fg:w="443"/><text x="1.0308%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="0.9850%" y="149" width="0.0106%" height="15" fill="rgb(247,147,15)" fg:x="1765" fg:w="19"/><text x="1.2780%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="0.9956%" y="133" width="0.0508%" height="15" fill="rgb(222,91,2)" fg:x="1784" fg:w="91"/><text x="1.2886%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.0464%" y="101" width="0.0374%" height="15" fill="rgb(254,131,8)" fg:x="1875" fg:w="67"/><text x="1.3394%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="1.0464%" y="117" width="0.0536%" height="15" fill="rgb(217,2,28)" fg:x="1875" fg:w="96"/><text x="1.3394%" y="127.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.1061%" y="53" width="0.0195%" height="15" fill="rgb(249,159,25)" fg:x="1982" fg:w="35"/><text x="1.3991%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.04%)</title><rect x="1.1061%" y="69" width="0.0357%" height="15" fill="rgb(245,193,0)" fg:x="1982" fg:w="64"/><text x="1.3991%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.08%)</title><rect x="1.1000%" y="85" width="0.0804%" height="15" fill="rgb(206,51,38)" fg:x="1971" fg:w="144"/><text x="1.3930%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.12%)</title><rect x="1.1000%" y="101" width="0.1166%" height="15" fill="rgb(220,97,51)" fg:x="1971" fg:w="209"/><text x="1.3930%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.12%)</title><rect x="1.1000%" y="117" width="0.1222%" height="15" fill="rgb(224,15,11)" fg:x="1971" fg:w="219"/><text x="1.3930%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.26%)</title><rect x="1.0464%" y="133" width="0.2550%" height="15" fill="rgb(210,195,12)" fg:x="1875" fg:w="457"/><text x="1.3394%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (686 instructions, 0.38%)</title><rect x="0.9956%" y="149" width="0.3828%" height="15" fill="rgb(244,48,14)" fg:x="1784" fg:w="686"/><text x="1.2886%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="1.3785%" y="149" width="0.0530%" height="15" fill="rgb(209,138,49)" fg:x="2470" fg:w="95"/><text x="1.6714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="1.4315%" y="149" width="0.0352%" height="15" fill="rgb(253,159,49)" fg:x="2565" fg:w="63"/><text x="1.7245%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="1.4666%" y="149" width="0.0424%" height="15" fill="rgb(224,109,26)" fg:x="2628" fg:w="76"/><text x="1.7596%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.04%)</title><rect x="1.5091%" y="149" width="0.0391%" height="15" fill="rgb(244,228,5)" fg:x="2704" fg:w="70"/><text x="1.8020%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.25%)</title><rect x="1.5481%" y="133" width="0.2472%" height="15" fill="rgb(246,43,6)" fg:x="2774" fg:w="443"/><text x="1.8411%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.01%)</title><rect x="1.7954%" y="133" width="0.0106%" height="15" fill="rgb(252,29,11)" fg:x="3217" fg:w="19"/><text x="2.0883%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="1.8060%" y="117" width="0.0508%" height="15" fill="rgb(243,76,40)" fg:x="3236" fg:w="91"/><text x="2.0989%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.04%)</title><rect x="1.8568%" y="85" width="0.0374%" height="15" fill="rgb(211,37,13)" fg:x="3327" fg:w="67"/><text x="2.1497%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.05%)</title><rect x="1.8568%" y="101" width="0.0536%" height="15" fill="rgb(215,167,19)" fg:x="3327" fg:w="96"/><text x="2.1497%" y="111.50"></text></g><g><title>memcpy (35 instructions, 0.02%)</title><rect x="1.9165%" y="37" width="0.0195%" height="15" fill="rgb(241,57,15)" fg:x="3434" fg:w="35"/><text x="2.2094%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.04%)</title><rect x="1.9165%" y="53" width="0.0357%" height="15" fill="rgb(251,123,3)" fg:x="3434" fg:w="64"/><text x="2.2094%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.08%)</title><rect x="1.9103%" y="69" width="0.0804%" height="15" fill="rgb(245,152,20)" fg:x="3423" fg:w="144"/><text x="2.2033%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.12%)</title><rect x="1.9103%" y="85" width="0.1166%" height="15" fill="rgb(220,124,40)" fg:x="3423" fg:w="209"/><text x="2.2033%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.12%)</title><rect x="1.9103%" y="101" width="0.1222%" height="15" fill="rgb(238,94,5)" fg:x="3423" fg:w="219"/><text x="2.2033%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.26%)</title><rect x="1.8568%" y="117" width="0.2550%" height="15" fill="rgb(242,120,23)" fg:x="3327" fg:w="457"/><text x="2.1497%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (686 instructions, 0.38%)</title><rect x="1.8060%" y="133" width="0.3828%" height="15" fill="rgb(224,107,43)" fg:x="3236" fg:w="686"/><text x="2.0989%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.05%)</title><rect x="2.1888%" y="133" width="0.0530%" height="15" fill="rgb(211,158,44)" fg:x="3922" fg:w="95"/><text x="2.4818%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.04%)</title><rect x="2.2418%" y="133" width="0.0352%" height="15" fill="rgb(234,69,43)" fg:x="4017" fg:w="63"/><text x="2.5348%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.05%)</title><rect x="2.2770%" y="117" width="0.0458%" height="15" fill="rgb(227,195,25)" fg:x="4080" fg:w="82"/><text x="2.5700%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.05%)</title><rect x="2.3228%" y="117" width="0.0530%" height="15" fill="rgb(245,170,26)" fg:x="4162" fg:w="95"/><text x="2.6157%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.3758%" y="117" width="0.0424%" height="15" fill="rgb(208,10,54)" fg:x="4257" fg:w="76"/><text x="2.6687%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.18%)</title><rect x="2.2770%" y="133" width="0.1842%" height="15" fill="rgb(236,144,53)" fg:x="4080" fg:w="330"/><text x="2.5700%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.4612%" y="133" width="0.0508%" height="15" fill="rgb(235,73,15)" fg:x="4410" fg:w="91"/><text x="2.7541%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,967 instructions, 1.10%)</title><rect x="1.5481%" y="149" width="1.0978%" height="15" fill="rgb(242,63,54)" fg:x="2774" fg:w="1967"/><text x="1.8411%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.04%)</title><rect x="2.6459%" y="149" width="0.0424%" height="15" fill="rgb(221,108,53)" fg:x="4741" fg:w="76"/><text x="2.9389%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.7173%" y="133" width="0.0508%" height="15" fill="rgb(252,189,42)" fg:x="4869" fg:w="91"/><text x="3.0103%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.10%)</title><rect x="2.7173%" y="149" width="0.1044%" height="15" fill="rgb(240,155,35)" fg:x="4869" fg:w="187"/><text x="3.0103%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.8217%" y="117" width="0.0508%" height="15" fill="rgb(219,197,15)" fg:x="5056" fg:w="91"/><text x="3.1146%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 instructions, 0.08%)</title><rect x="2.8217%" y="133" width="0.0776%" height="15" fill="rgb(236,162,12)" fg:x="5056" fg:w="139"/><text x="3.1146%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (224 instructions, 0.13%)</title><rect x="2.8217%" y="149" width="0.1250%" height="15" fill="rgb(233,147,8)" fg:x="5056" fg:w="224"/><text x="3.1146%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="2.9467%" y="149" width="0.0508%" height="15" fill="rgb(214,116,23)" fg:x="5280" fg:w="91"/><text x="3.2397%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="2.9975%" y="149" width="0.0497%" height="15" fill="rgb(213,195,25)" fg:x="5371" fg:w="89"/><text x="3.2904%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0471%" y="149" width="0.0508%" height="15" fill="rgb(246,103,4)" fg:x="5460" fg:w="91"/><text x="3.3401%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="3.0979%" y="149" width="0.0508%" height="15" fill="rgb(249,102,40)" fg:x="5551" fg:w="91"/><text x="3.3909%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="3.1510%" y="149" width="0.0497%" height="15" fill="rgb(239,203,18)" fg:x="5646" fg:w="89"/><text x="3.4439%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.22%)</title><rect x="3.2006%" y="149" width="0.2188%" height="15" fill="rgb(251,55,13)" fg:x="5735" fg:w="392"/><text x="3.4936%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.22%)</title><rect x="3.4194%" y="149" width="0.2188%" height="15" fill="rgb(218,36,11)" fg:x="6127" fg:w="392"/><text x="3.7124%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.28%)</title><rect x="3.6382%" y="149" width="0.2813%" height="15" fill="rgb(230,201,47)" fg:x="6519" fg:w="504"/><text x="3.9311%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,922 instructions, 4.42%)</title><rect x="0.1730%" y="165" width="4.4212%" height="15" fill="rgb(213,63,40)" fg:x="310" fg:w="7922"/><text x="0.4660%" y="175.50">cand..</text></g><g><title>memcpy (344 instructions, 0.19%)</title><rect x="4.5942%" y="165" width="0.1920%" height="15" fill="rgb(237,176,4)" fg:x="8232" fg:w="344"/><text x="4.8871%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.02%)</title><rect x="4.7861%" y="165" width="0.0218%" height="15" fill="rgb(245,218,36)" fg:x="8576" fg:w="39"/><text x="5.0791%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="4.8079%" y="165" width="0.0508%" height="15" fill="rgb(244,120,8)" fg:x="8615" fg:w="91"/><text x="5.1009%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="4.8626%" y="133" width="0.0329%" height="15" fill="rgb(231,202,12)" fg:x="8713" fg:w="59"/><text x="5.1556%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="4.8955%" y="133" width="0.0525%" height="15" fill="rgb(253,63,52)" fg:x="8772" fg:w="94"/><text x="5.1885%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="4.9480%" y="133" width="0.0965%" height="15" fill="rgb(233,136,42)" fg:x="8866" fg:w="173"/><text x="5.2410%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="4.8626%" y="149" width="0.3231%" height="15" fill="rgb(237,90,1)" fg:x="8713" fg:w="579"/><text x="5.1556%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 0.44%)</title><rect x="4.8587%" y="165" width="0.4448%" height="15" fill="rgb(223,209,49)" fg:x="8706" fg:w="797"/><text x="5.1517%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.05%)</title><rect x="5.3035%" y="165" width="0.0508%" height="15" fill="rgb(230,182,45)" fg:x="9503" fg:w="91"/><text x="5.5965%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.3582%" y="133" width="0.0329%" height="15" fill="rgb(235,186,43)" fg:x="9601" fg:w="59"/><text x="5.6511%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.05%)</title><rect x="5.3911%" y="133" width="0.0525%" height="15" fill="rgb(243,128,53)" fg:x="9660" fg:w="94"/><text x="5.6841%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.10%)</title><rect x="5.4436%" y="133" width="0.0965%" height="15" fill="rgb(223,206,51)" fg:x="9754" fg:w="173"/><text x="5.7365%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.32%)</title><rect x="5.3582%" y="149" width="0.3231%" height="15" fill="rgb(247,55,27)" fg:x="9601" fg:w="579"/><text x="5.6511%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.04%)</title><rect x="5.6813%" y="149" width="0.0430%" height="15" fill="rgb(238,29,26)" fg:x="10180" fg:w="77"/><text x="5.9743%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.05%)</title><rect x="5.7243%" y="133" width="0.0497%" height="15" fill="rgb(232,64,14)" fg:x="10257" fg:w="89"/><text x="6.0173%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.07%)</title><rect x="5.7243%" y="149" width="0.0742%" height="15" fill="rgb(222,164,13)" fg:x="10257" fg:w="133"/><text x="6.0173%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 0.54%)</title><rect x="5.3543%" y="165" width="0.5441%" height="15" fill="rgb(254,93,11)" fg:x="9594" fg:w="975"/><text x="5.6472%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.03%)</title><rect x="5.8984%" y="117" width="0.0329%" height="15" fill="rgb(249,51,53)" fg:x="10569" fg:w="59"/><text x="6.1914%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.06%)</title><rect x="5.8984%" y="133" width="0.0569%" height="15" fill="rgb(242,0,22)" fg:x="10569" fg:w="102"/><text x="6.1914%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.18%)</title><rect x="5.8984%" y="149" width="0.1803%" height="15" fill="rgb(247,221,33)" fg:x="10569" fg:w="323"/><text x="6.1914%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.314 (34 instructions, 0.02%)</title><rect x="6.0787%" y="149" width="0.0190%" height="15" fill="rgb(239,229,35)" fg:x="10892" fg:w="34"/><text x="6.3716%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 0.31%)</title><rect x="5.8984%" y="165" width="0.3097%" height="15" fill="rgb(229,54,21)" fg:x="10569" fg:w="555"/><text x="6.1914%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.03%)</title><rect x="6.2081%" y="165" width="0.0273%" height="15" fill="rgb(232,180,51)" fg:x="11124" fg:w="49"/><text x="6.5011%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.2355%" y="133" width="0.0151%" height="15" fill="rgb(233,90,54)" fg:x="11173" fg:w="27"/><text x="6.5285%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.08%)</title><rect x="6.2355%" y="149" width="0.0792%" height="15" fill="rgb(228,118,49)" fg:x="11173" fg:w="142"/><text x="6.5285%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.3393%" y="133" width="0.0151%" height="15" fill="rgb(230,209,32)" fg:x="11359" fg:w="27"/><text x="6.6323%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.08%)</title><rect x="6.3393%" y="149" width="0.0792%" height="15" fill="rgb(224,106,14)" fg:x="11359" fg:w="142"/><text x="6.6323%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 0.21%)</title><rect x="6.2355%" y="165" width="0.2076%" height="15" fill="rgb(242,213,37)" fg:x="11173" fg:w="372"/><text x="6.5285%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.02%)</title><rect x="6.4431%" y="149" width="0.0195%" height="15" fill="rgb(253,213,48)" fg:x="11545" fg:w="35"/><text x="6.7361%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1340 (34 instructions, 0.02%)</title><rect x="6.4626%" y="149" width="0.0190%" height="15" fill="rgb(221,11,3)" fg:x="11580" fg:w="34"/><text x="6.7556%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1340 (34 instructions, 0.02%)</title><rect x="6.4816%" y="149" width="0.0190%" height="15" fill="rgb(249,84,42)" fg:x="11614" fg:w="34"/><text x="6.7746%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.02%)</title><rect x="6.5006%" y="149" width="0.0184%" height="15" fill="rgb(229,203,43)" fg:x="11648" fg:w="33"/><text x="6.7935%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.14%)</title><rect x="6.4431%" y="165" width="0.1395%" height="15" fill="rgb(234,216,2)" fg:x="11545" fg:w="250"/><text x="6.7361%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.02%)</title><rect x="6.6044%" y="165" width="0.0240%" height="15" fill="rgb(249,204,28)" fg:x="11834" fg:w="43"/><text x="6.8974%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.6323%" y="133" width="0.0151%" height="15" fill="rgb(235,143,7)" fg:x="11884" fg:w="27"/><text x="6.9253%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.6474%" y="133" width="0.0151%" height="15" fill="rgb(212,102,47)" fg:x="11911" fg:w="27"/><text x="6.9403%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.11%)</title><rect x="6.6323%" y="149" width="0.1099%" height="15" fill="rgb(220,41,48)" fg:x="11884" fg:w="197"/><text x="6.9253%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.7422%" y="117" width="0.0151%" height="15" fill="rgb(233,65,18)" fg:x="12081" fg:w="27"/><text x="7.0352%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="6.7573%" y="117" width="0.0151%" height="15" fill="rgb(229,141,11)" fg:x="12108" fg:w="27"/><text x="7.0503%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="6.7724%" y="117" width="0.0379%" height="15" fill="rgb(223,10,5)" fg:x="12135" fg:w="68"/><text x="7.0653%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.14%)</title><rect x="6.7422%" y="133" width="0.1362%" height="15" fill="rgb(234,152,42)" fg:x="12081" fg:w="244"/><text x="7.0352%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (288 instructions, 0.16%)</title><rect x="6.7422%" y="149" width="0.1607%" height="15" fill="rgb(249,104,35)" fg:x="12081" fg:w="288"/><text x="7.0352%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (565 instructions, 0.32%)</title><rect x="6.6284%" y="165" width="0.3153%" height="15" fill="rgb(246,91,32)" fg:x="11877" fg:w="565"/><text x="6.9214%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.04%)</title><rect x="6.9437%" y="149" width="0.0385%" height="15" fill="rgb(229,177,42)" fg:x="12442" fg:w="69"/><text x="7.2367%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="6.9822%" y="149" width="0.0379%" height="15" fill="rgb(235,162,14)" fg:x="12511" fg:w="68"/><text x="7.2752%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.13%)</title><rect x="6.9437%" y="165" width="0.1289%" height="15" fill="rgb(216,213,20)" fg:x="12442" fg:w="231"/><text x="7.2367%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (14,023 instructions, 7.83%)</title><rect x="0.1222%" y="181" width="7.8260%" height="15" fill="rgb(214,97,10)" fg:x="219" fg:w="14023"/><text x="0.4152%" y="191.50">ic_cdk::a..</text></g><g><title>imrc_hashmap::MAP::__getit (19 instructions, 0.01%)</title><rect x="7.9483%" y="181" width="0.0106%" height="15" fill="rgb(244,169,10)" fg:x="14242" fg:w="19"/><text x="8.2412%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="7.9589%" y="165" width="0.1094%" height="15" fill="rgb(216,145,50)" fg:x="14261" fg:w="196"/><text x="8.2518%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="8.0682%" y="133" width="1.7636%" height="15" fill="rgb(233,160,49)" fg:x="14457" fg:w="3160"/><text x="8.3612%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="8.0682%" y="149" width="1.8188%" height="15" fill="rgb(235,220,49)" fg:x="14457" fg:w="3259"/><text x="8.3612%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="9.8870%" y="149" width="0.0787%" height="15" fill="rgb(246,52,12)" fg:x="17716" fg:w="141"/><text x="10.1800%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="9.9657%" y="149" width="1.7636%" height="15" fill="rgb(240,69,49)" fg:x="17857" fg:w="3160"/><text x="10.2587%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="8.0682%" y="165" width="3.8541%" height="15" fill="rgb(234,148,1)" fg:x="14457" fg:w="6906"/><text x="8.3612%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="11.9637%" y="165" width="0.1094%" height="15" fill="rgb(208,113,25)" fg:x="21437" fg:w="196"/><text x="12.2566%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="12.0731%" y="133" width="1.7636%" height="15" fill="rgb(241,51,37)" fg:x="21633" fg:w="3160"/><text x="12.3660%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="12.0731%" y="149" width="1.8188%" height="15" fill="rgb(243,19,52)" fg:x="21633" fg:w="3259"/><text x="12.3660%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="13.8919%" y="149" width="0.0787%" height="15" fill="rgb(241,229,39)" fg:x="24892" fg:w="141"/><text x="14.1848%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="13.9706%" y="149" width="1.7636%" height="15" fill="rgb(232,44,18)" fg:x="25033" fg:w="3160"/><text x="14.2635%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="12.0731%" y="165" width="3.8541%" height="15" fill="rgb(238,77,53)" fg:x="21633" fg:w="6906"/><text x="12.3660%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="15.9685%" y="165" width="0.1094%" height="15" fill="rgb(225,74,3)" fg:x="28613" fg:w="196"/><text x="16.2615%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="16.0779%" y="165" width="0.1406%" height="15" fill="rgb(229,101,20)" fg:x="28809" fg:w="252"/><text x="16.3709%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="16.2598%" y="165" width="0.1094%" height="15" fill="rgb(224,50,29)" fg:x="29135" fg:w="196"/><text x="16.5528%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="16.3692%" y="133" width="1.7636%" height="15" fill="rgb(225,129,7)" fg:x="29331" fg:w="3160"/><text x="16.6622%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="16.3692%" y="149" width="1.8188%" height="15" fill="rgb(229,225,1)" fg:x="29331" fg:w="3259"/><text x="16.6622%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="18.1880%" y="149" width="0.0787%" height="15" fill="rgb(215,163,39)" fg:x="32590" fg:w="141"/><text x="18.4810%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="18.2667%" y="149" width="1.7636%" height="15" fill="rgb(209,169,31)" fg:x="32731" fg:w="3160"/><text x="18.5597%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="16.3692%" y="165" width="3.8541%" height="15" fill="rgb(237,83,10)" fg:x="29331" fg:w="6906"/><text x="16.6622%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="20.2646%" y="165" width="0.1094%" height="15" fill="rgb(252,171,1)" fg:x="36311" fg:w="196"/><text x="20.5576%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="20.3740%" y="133" width="1.7636%" height="15" fill="rgb(242,119,6)" fg:x="36507" fg:w="3160"/><text x="20.6670%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="20.3740%" y="149" width="1.8188%" height="15" fill="rgb(205,14,27)" fg:x="36507" fg:w="3259"/><text x="20.6670%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="22.1928%" y="149" width="0.0787%" height="15" fill="rgb(205,180,43)" fg:x="39766" fg:w="141"/><text x="22.4858%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="22.2715%" y="149" width="1.7636%" height="15" fill="rgb(216,8,39)" fg:x="39907" fg:w="3160"/><text x="22.5645%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="20.3740%" y="165" width="3.8541%" height="15" fill="rgb(239,77,46)" fg:x="36507" fg:w="6906"/><text x="20.6670%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.2695%" y="165" width="0.1094%" height="15" fill="rgb(217,111,20)" fg:x="43487" fg:w="196"/><text x="24.5624%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="24.3789%" y="165" width="0.1769%" height="15" fill="rgb(232,86,30)" fg:x="43683" fg:w="317"/><text x="24.6718%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.5971%" y="165" width="0.1094%" height="15" fill="rgb(221,130,12)" fg:x="44074" fg:w="196"/><text x="24.8900%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="24.7064%" y="165" width="0.1406%" height="15" fill="rgb(221,217,0)" fg:x="44270" fg:w="252"/><text x="24.9994%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="24.8884%" y="165" width="0.1094%" height="15" fill="rgb(241,208,30)" fg:x="44596" fg:w="196"/><text x="25.1814%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="24.9978%" y="133" width="1.7636%" height="15" fill="rgb(217,5,45)" fg:x="44792" fg:w="3160"/><text x="25.2907%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="24.9978%" y="149" width="1.8188%" height="15" fill="rgb(226,8,37)" fg:x="44792" fg:w="3259"/><text x="25.2907%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="26.8166%" y="149" width="0.0787%" height="15" fill="rgb(247,23,45)" fg:x="48051" fg:w="141"/><text x="27.1095%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="26.8953%" y="149" width="1.7636%" height="15" fill="rgb(208,172,24)" fg:x="48192" fg:w="3160"/><text x="27.1882%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="24.9978%" y="165" width="3.8541%" height="15" fill="rgb(235,76,50)" fg:x="44792" fg:w="6906"/><text x="25.2907%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="28.8932%" y="165" width="0.1094%" height="15" fill="rgb(233,176,45)" fg:x="51772" fg:w="196"/><text x="29.1862%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="29.0026%" y="133" width="1.7636%" height="15" fill="rgb(217,23,26)" fg:x="51968" fg:w="3160"/><text x="29.2956%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="29.0026%" y="149" width="1.8188%" height="15" fill="rgb(238,104,30)" fg:x="51968" fg:w="3259"/><text x="29.2956%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="30.8214%" y="149" width="0.0787%" height="15" fill="rgb(212,156,54)" fg:x="55227" fg:w="141"/><text x="31.1144%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="30.9001%" y="149" width="1.7636%" height="15" fill="rgb(205,188,19)" fg:x="55368" fg:w="3160"/><text x="31.1930%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="29.0026%" y="165" width="3.8541%" height="15" fill="rgb(247,181,41)" fg:x="51968" fg:w="6906"/><text x="29.2956%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="32.8980%" y="165" width="0.1094%" height="15" fill="rgb(236,184,20)" fg:x="58948" fg:w="196"/><text x="33.1910%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="33.0074%" y="133" width="1.7636%" height="15" fill="rgb(216,130,0)" fg:x="59144" fg:w="3160"/><text x="33.3004%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="33.0074%" y="149" width="1.8188%" height="15" fill="rgb(218,51,31)" fg:x="59144" fg:w="3259"/><text x="33.3004%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="34.8262%" y="149" width="0.0787%" height="15" fill="rgb(228,67,52)" fg:x="62403" fg:w="141"/><text x="35.1192%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="34.9049%" y="149" width="1.7636%" height="15" fill="rgb(233,80,28)" fg:x="62544" fg:w="3160"/><text x="35.1979%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="33.0074%" y="165" width="3.8541%" height="15" fill="rgb(247,34,34)" fg:x="59144" fg:w="6906"/><text x="33.3004%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="36.9028%" y="165" width="0.1094%" height="15" fill="rgb(220,170,1)" fg:x="66124" fg:w="196"/><text x="37.1958%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.0122%" y="165" width="0.1406%" height="15" fill="rgb(208,4,12)" fg:x="66320" fg:w="252"/><text x="37.3052%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.1942%" y="165" width="0.1094%" height="15" fill="rgb(216,60,32)" fg:x="66646" fg:w="196"/><text x="37.4871%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.3036%" y="165" width="0.1406%" height="15" fill="rgb(219,57,15)" fg:x="66842" fg:w="252"/><text x="37.5965%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.4855%" y="165" width="0.1094%" height="15" fill="rgb(217,187,42)" fg:x="67168" fg:w="196"/><text x="37.7785%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="37.5949%" y="165" width="0.1406%" height="15" fill="rgb(253,129,18)" fg:x="67364" fg:w="252"/><text x="37.8878%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="37.7768%" y="165" width="0.1094%" height="15" fill="rgb(213,9,34)" fg:x="67690" fg:w="196"/><text x="38.0698%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="37.8862%" y="133" width="1.7636%" height="15" fill="rgb(208,116,6)" fg:x="67886" fg:w="3160"/><text x="38.1792%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="37.8862%" y="149" width="1.8188%" height="15" fill="rgb(213,137,37)" fg:x="67886" fg:w="3259"/><text x="38.1792%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="39.7050%" y="149" width="0.0787%" height="15" fill="rgb(208,40,5)" fg:x="71145" fg:w="141"/><text x="39.9980%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="39.7837%" y="149" width="1.7636%" height="15" fill="rgb(221,10,52)" fg:x="71286" fg:w="3160"/><text x="40.0767%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="37.8862%" y="165" width="3.8541%" height="15" fill="rgb(215,72,45)" fg:x="67886" fg:w="6906"/><text x="38.1792%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="41.7816%" y="165" width="0.1094%" height="15" fill="rgb(221,74,10)" fg:x="74866" fg:w="196"/><text x="42.0746%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="41.8910%" y="165" width="0.1406%" height="15" fill="rgb(225,133,37)" fg:x="75062" fg:w="252"/><text x="42.1840%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.0730%" y="165" width="0.1094%" height="15" fill="rgb(221,207,51)" fg:x="75388" fg:w="196"/><text x="42.3659%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.1823%" y="165" width="0.1406%" height="15" fill="rgb(237,176,6)" fg:x="75584" fg:w="252"/><text x="42.4753%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.3643%" y="165" width="0.1094%" height="15" fill="rgb(229,41,28)" fg:x="75910" fg:w="196"/><text x="42.6572%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.4737%" y="165" width="0.1406%" height="15" fill="rgb(243,158,42)" fg:x="76106" fg:w="252"/><text x="42.7666%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.6556%" y="165" width="0.1094%" height="15" fill="rgb(221,76,52)" fg:x="76432" fg:w="196"/><text x="42.9486%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="42.7650%" y="165" width="0.1406%" height="15" fill="rgb(217,127,35)" fg:x="76628" fg:w="252"/><text x="43.0579%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="42.9469%" y="165" width="0.1094%" height="15" fill="rgb(248,163,26)" fg:x="76954" fg:w="196"/><text x="43.2399%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="43.0563%" y="165" width="0.1769%" height="15" fill="rgb(209,187,24)" fg:x="77150" fg:w="317"/><text x="43.3493%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="43.2745%" y="165" width="0.1094%" height="15" fill="rgb(238,96,3)" fg:x="77541" fg:w="196"/><text x="43.5675%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="43.3839%" y="133" width="1.7636%" height="15" fill="rgb(209,116,12)" fg:x="77737" fg:w="3160"/><text x="43.6769%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="43.3839%" y="149" width="1.8188%" height="15" fill="rgb(243,57,6)" fg:x="77737" fg:w="3259"/><text x="43.6769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="45.2027%" y="149" width="0.0787%" height="15" fill="rgb(212,34,4)" fg:x="80996" fg:w="141"/><text x="45.4957%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="45.2814%" y="149" width="1.7636%" height="15" fill="rgb(226,98,30)" fg:x="81137" fg:w="3160"/><text x="45.5744%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="43.3839%" y="165" width="3.8541%" height="15" fill="rgb(227,37,29)" fg:x="77737" fg:w="6906"/><text x="43.6769%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="47.2793%" y="165" width="0.1094%" height="15" fill="rgb(214,10,27)" fg:x="84717" fg:w="196"/><text x="47.5723%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="47.3887%" y="133" width="1.7636%" height="15" fill="rgb(233,53,50)" fg:x="84913" fg:w="3160"/><text x="47.6817%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="47.3887%" y="149" width="1.8188%" height="15" fill="rgb(254,226,11)" fg:x="84913" fg:w="3259"/><text x="47.6817%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="49.2075%" y="149" width="0.0787%" height="15" fill="rgb(251,226,36)" fg:x="88172" fg:w="141"/><text x="49.5005%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="49.2862%" y="149" width="1.7636%" height="15" fill="rgb(225,38,39)" fg:x="88313" fg:w="3160"/><text x="49.5792%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="47.3887%" y="165" width="3.8541%" height="15" fill="rgb(235,167,7)" fg:x="84913" fg:w="6906"/><text x="47.6817%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.2842%" y="165" width="0.1094%" height="15" fill="rgb(231,202,54)" fg:x="91893" fg:w="196"/><text x="51.5771%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.3935%" y="165" width="0.1769%" height="15" fill="rgb(225,203,16)" fg:x="92089" fg:w="317"/><text x="51.6865%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.6118%" y="165" width="0.1094%" height="15" fill="rgb(227,94,30)" fg:x="92480" fg:w="196"/><text x="51.9047%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="51.7211%" y="165" width="0.1769%" height="15" fill="rgb(245,136,49)" fg:x="92676" fg:w="317"/><text x="52.0141%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="51.9393%" y="165" width="0.1094%" height="15" fill="rgb(229,153,20)" fg:x="93067" fg:w="196"/><text x="52.2323%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.0487%" y="165" width="0.1406%" height="15" fill="rgb(238,177,22)" fg:x="93263" fg:w="252"/><text x="52.3417%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.2307%" y="165" width="0.1094%" height="15" fill="rgb(221,17,34)" fg:x="93589" fg:w="196"/><text x="52.5236%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.3401%" y="165" width="0.1406%" height="15" fill="rgb(223,202,7)" fg:x="93785" fg:w="252"/><text x="52.6330%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.5220%" y="165" width="0.1094%" height="15" fill="rgb(247,99,7)" fg:x="94111" fg:w="196"/><text x="52.8150%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="52.6314%" y="165" width="0.1769%" height="15" fill="rgb(209,75,24)" fg:x="94307" fg:w="317"/><text x="52.9243%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="52.8496%" y="165" width="0.1094%" height="15" fill="rgb(225,62,11)" fg:x="94698" fg:w="196"/><text x="53.1426%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="52.9590%" y="165" width="0.1406%" height="15" fill="rgb(209,132,14)" fg:x="94894" fg:w="252"/><text x="53.2519%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.1409%" y="165" width="0.1094%" height="15" fill="rgb(205,189,31)" fg:x="95220" fg:w="196"/><text x="53.4339%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="53.2503%" y="165" width="0.1406%" height="15" fill="rgb(235,85,47)" fg:x="95416" fg:w="252"/><text x="53.5433%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="53.4322%" y="165" width="0.1094%" height="15" fill="rgb(244,22,15)" fg:x="95742" fg:w="196"/><text x="53.7252%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="53.5416%" y="133" width="1.7636%" height="15" fill="rgb(237,30,52)" fg:x="95938" fg:w="3160"/><text x="53.8346%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="53.5416%" y="149" width="1.8188%" height="15" fill="rgb(245,220,12)" fg:x="95938" fg:w="3259"/><text x="53.8346%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="55.3604%" y="149" width="0.0787%" height="15" fill="rgb(219,25,53)" fg:x="99197" fg:w="141"/><text x="55.6534%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="55.4391%" y="149" width="1.7636%" height="15" fill="rgb(253,207,34)" fg:x="99338" fg:w="3160"/><text x="55.7321%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="53.5416%" y="165" width="3.8541%" height="15" fill="rgb(228,159,13)" fg:x="95938" fg:w="6906"/><text x="53.8346%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.4370%" y="165" width="0.1094%" height="15" fill="rgb(210,58,27)" fg:x="102918" fg:w="196"/><text x="57.7300%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="57.5464%" y="165" width="0.1406%" height="15" fill="rgb(218,161,37)" fg:x="103114" fg:w="252"/><text x="57.8394%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="57.7284%" y="165" width="0.1094%" height="15" fill="rgb(249,102,10)" fg:x="103440" fg:w="196"/><text x="58.0213%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="57.8378%" y="165" width="0.1769%" height="15" fill="rgb(222,112,43)" fg:x="103636" fg:w="317"/><text x="58.1307%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.0560%" y="165" width="0.1094%" height="15" fill="rgb(232,154,19)" fg:x="104027" fg:w="196"/><text x="58.3489%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="58.1653%" y="165" width="0.1406%" height="15" fill="rgb(222,78,7)" fg:x="104223" fg:w="252"/><text x="58.4583%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="58.3473%" y="165" width="0.1094%" height="15" fill="rgb(223,121,42)" fg:x="104549" fg:w="196"/><text x="58.6403%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="58.4567%" y="133" width="1.7636%" height="15" fill="rgb(223,209,4)" fg:x="104745" fg:w="3160"/><text x="58.7496%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="58.4567%" y="149" width="1.8188%" height="15" fill="rgb(229,175,11)" fg:x="104745" fg:w="3259"/><text x="58.7496%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="60.2755%" y="149" width="0.0787%" height="15" fill="rgb(251,151,48)" fg:x="108004" fg:w="141"/><text x="60.5684%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="60.3542%" y="149" width="1.7636%" height="15" fill="rgb(239,13,42)" fg:x="108145" fg:w="3160"/><text x="60.6471%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="58.4567%" y="165" width="3.8541%" height="15" fill="rgb(241,188,9)" fg:x="104745" fg:w="6906"/><text x="58.7496%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="62.3521%" y="165" width="0.1094%" height="15" fill="rgb(254,3,22)" fg:x="111725" fg:w="196"/><text x="62.6451%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="62.4615%" y="133" width="1.7636%" height="15" fill="rgb(223,91,15)" fg:x="111921" fg:w="3160"/><text x="62.7545%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="62.4615%" y="149" width="1.8188%" height="15" fill="rgb(228,164,44)" fg:x="111921" fg:w="3259"/><text x="62.7545%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="64.2803%" y="149" width="0.0787%" height="15" fill="rgb(228,70,38)" fg:x="115180" fg:w="141"/><text x="64.5733%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="64.3590%" y="149" width="1.7636%" height="15" fill="rgb(241,125,36)" fg:x="115321" fg:w="3160"/><text x="64.6520%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="62.4615%" y="165" width="3.8541%" height="15" fill="rgb(205,17,45)" fg:x="111921" fg:w="6906"/><text x="62.7545%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.3569%" y="165" width="0.1094%" height="15" fill="rgb(246,2,54)" fg:x="118901" fg:w="196"/><text x="66.6499%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="66.4663%" y="165" width="0.1406%" height="15" fill="rgb(227,224,27)" fg:x="119097" fg:w="252"/><text x="66.7593%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.6482%" y="165" width="0.1094%" height="15" fill="rgb(249,71,16)" fg:x="119423" fg:w="196"/><text x="66.9412%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="66.7576%" y="165" width="0.1769%" height="15" fill="rgb(232,130,50)" fg:x="119619" fg:w="317"/><text x="67.0506%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="66.9758%" y="165" width="0.1094%" height="15" fill="rgb(215,130,25)" fg:x="120010" fg:w="196"/><text x="67.2688%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="67.0852%" y="133" width="1.7636%" height="15" fill="rgb(254,166,13)" fg:x="120206" fg:w="3160"/><text x="67.3782%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="67.0852%" y="149" width="1.8188%" height="15" fill="rgb(253,183,5)" fg:x="120206" fg:w="3259"/><text x="67.3782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="68.9040%" y="149" width="0.0787%" height="15" fill="rgb(226,174,5)" fg:x="123465" fg:w="141"/><text x="69.1970%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="68.9827%" y="149" width="1.7636%" height="15" fill="rgb(231,109,9)" fg:x="123606" fg:w="3160"/><text x="69.2757%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,971 instructions, 3.89%)</title><rect x="67.0852%" y="165" width="3.8904%" height="15" fill="rgb(222,144,40)" fg:x="120206" fg:w="6971"/><text x="67.3782%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="71.0169%" y="165" width="0.1094%" height="15" fill="rgb(246,38,26)" fg:x="127251" fg:w="196"/><text x="71.3099%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="71.1263%" y="133" width="1.7636%" height="15" fill="rgb(213,201,40)" fg:x="127447" fg:w="3160"/><text x="71.4193%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="71.1263%" y="149" width="1.8188%" height="15" fill="rgb(246,67,33)" fg:x="127447" fg:w="3259"/><text x="71.4193%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="72.9451%" y="149" width="0.0787%" height="15" fill="rgb(225,2,50)" fg:x="130706" fg:w="141"/><text x="73.2381%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="73.0238%" y="149" width="1.7636%" height="15" fill="rgb(214,116,45)" fg:x="130847" fg:w="3160"/><text x="73.3168%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="71.1263%" y="165" width="3.8541%" height="15" fill="rgb(211,217,30)" fg:x="127447" fg:w="6906"/><text x="71.4193%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.0218%" y="165" width="0.1094%" height="15" fill="rgb(251,160,51)" fg:x="134427" fg:w="196"/><text x="75.3147%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="75.1312%" y="165" width="0.1406%" height="15" fill="rgb(235,148,41)" fg:x="134623" fg:w="252"/><text x="75.4241%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.3131%" y="165" width="0.1094%" height="15" fill="rgb(230,35,13)" fg:x="134949" fg:w="196"/><text x="75.6061%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="75.4225%" y="165" width="0.1769%" height="15" fill="rgb(219,220,6)" fg:x="135145" fg:w="317"/><text x="75.7154%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="75.6407%" y="165" width="0.1094%" height="15" fill="rgb(235,29,11)" fg:x="135536" fg:w="196"/><text x="75.9337%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="75.7501%" y="133" width="1.7636%" height="15" fill="rgb(237,39,0)" fg:x="135732" fg:w="3160"/><text x="76.0430%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="75.7501%" y="149" width="1.8188%" height="15" fill="rgb(243,68,44)" fg:x="135732" fg:w="3259"/><text x="76.0430%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="77.5689%" y="149" width="0.0787%" height="15" fill="rgb(248,43,28)" fg:x="138991" fg:w="141"/><text x="77.8618%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="77.6476%" y="149" width="1.7636%" height="15" fill="rgb(252,179,49)" fg:x="139132" fg:w="3160"/><text x="77.9405%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="75.7501%" y="165" width="3.8541%" height="15" fill="rgb(243,0,31)" fg:x="135732" fg:w="6906"/><text x="76.0430%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="79.6455%" y="165" width="0.1094%" height="15" fill="rgb(219,21,35)" fg:x="142712" fg:w="196"/><text x="79.9385%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="79.7549%" y="133" width="1.7636%" height="15" fill="rgb(241,167,51)" fg:x="142908" fg:w="3160"/><text x="80.0479%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="79.7549%" y="149" width="1.8188%" height="15" fill="rgb(223,120,46)" fg:x="142908" fg:w="3259"/><text x="80.0479%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="81.5737%" y="149" width="0.0787%" height="15" fill="rgb(215,99,20)" fg:x="146167" fg:w="141"/><text x="81.8667%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="81.6524%" y="149" width="1.7636%" height="15" fill="rgb(245,45,10)" fg:x="146308" fg:w="3160"/><text x="81.9453%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="79.7549%" y="165" width="3.8541%" height="15" fill="rgb(234,92,5)" fg:x="142908" fg:w="6906"/><text x="80.0479%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.6503%" y="165" width="0.1094%" height="15" fill="rgb(228,115,5)" fg:x="149888" fg:w="196"/><text x="83.9433%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="83.7597%" y="165" width="0.1769%" height="15" fill="rgb(252,26,53)" fg:x="150084" fg:w="317"/><text x="84.0527%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="83.9779%" y="165" width="0.1094%" height="15" fill="rgb(217,221,33)" fg:x="150475" fg:w="196"/><text x="84.2709%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="84.0873%" y="165" width="0.1406%" height="15" fill="rgb(209,73,19)" fg:x="150671" fg:w="252"/><text x="84.3803%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="84.2692%" y="165" width="0.1094%" height="15" fill="rgb(207,35,48)" fg:x="150997" fg:w="196"/><text x="84.5622%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="84.3786%" y="133" width="1.7636%" height="15" fill="rgb(217,71,43)" fg:x="151193" fg:w="3160"/><text x="84.6716%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="84.3786%" y="149" width="1.8188%" height="15" fill="rgb(219,189,28)" fg:x="151193" fg:w="3259"/><text x="84.6716%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="86.1974%" y="149" width="0.0787%" height="15" fill="rgb(230,53,37)" fg:x="154452" fg:w="141"/><text x="86.4904%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="86.2761%" y="149" width="1.7636%" height="15" fill="rgb(247,27,16)" fg:x="154593" fg:w="3160"/><text x="86.5691%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="84.3786%" y="165" width="3.8541%" height="15" fill="rgb(225,97,7)" fg:x="151193" fg:w="6906"/><text x="84.6716%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.2741%" y="165" width="0.1094%" height="15" fill="rgb(215,167,27)" fg:x="158173" fg:w="196"/><text x="88.5670%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (317 instructions, 0.18%)</title><rect x="88.3834%" y="165" width="0.1769%" height="15" fill="rgb(221,198,48)" fg:x="158369" fg:w="317"/><text x="88.6764%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="88.6017%" y="165" width="0.1094%" height="15" fill="rgb(246,222,44)" fg:x="158760" fg:w="196"/><text x="88.8946%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="88.7110%" y="133" width="1.7636%" height="15" fill="rgb(236,208,30)" fg:x="158956" fg:w="3160"/><text x="89.0040%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="88.7110%" y="149" width="1.8188%" height="15" fill="rgb(253,104,26)" fg:x="158956" fg:w="3259"/><text x="89.0040%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="90.5298%" y="149" width="0.0787%" height="15" fill="rgb(215,28,38)" fg:x="162215" fg:w="141"/><text x="90.8228%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="90.6085%" y="149" width="1.7636%" height="15" fill="rgb(229,81,42)" fg:x="162356" fg:w="3160"/><text x="90.9015%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="88.7110%" y="165" width="3.8541%" height="15" fill="rgb(241,208,42)" fg:x="158956" fg:w="6906"/><text x="89.0040%" y="175.50">im_..</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.6065%" y="165" width="0.1094%" height="15" fill="rgb(240,216,31)" fg:x="165936" fg:w="196"/><text x="92.8995%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="92.7159%" y="165" width="0.1406%" height="15" fill="rgb(219,160,10)" fg:x="166132" fg:w="252"/><text x="93.0088%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="92.8978%" y="165" width="0.1094%" height="15" fill="rgb(249,85,50)" fg:x="166458" fg:w="196"/><text x="93.1908%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (252 instructions, 0.14%)</title><rect x="93.0072%" y="165" width="0.1406%" height="15" fill="rgb(239,203,38)" fg:x="166654" fg:w="252"/><text x="93.3002%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.11%)</title><rect x="93.1891%" y="165" width="0.1094%" height="15" fill="rgb(233,12,36)" fg:x="166980" fg:w="196"/><text x="93.4821%" y="175.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="93.2985%" y="133" width="1.7636%" height="15" fill="rgb(212,20,8)" fg:x="167176" fg:w="3160"/><text x="93.5915%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::merge_values (3,259 instructions, 1.82%)</title><rect x="93.2985%" y="149" width="1.8188%" height="15" fill="rgb(249,180,3)" fg:x="167176" fg:w="3259"/><text x="93.5915%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (141 instructions, 0.08%)</title><rect x="95.1173%" y="149" width="0.0787%" height="15" fill="rgb(254,212,28)" fg:x="170435" fg:w="141"/><text x="95.4103%" y="159.50"></text></g><g><title>memcpy (3,160 instructions, 1.76%)</title><rect x="95.1960%" y="149" width="1.7636%" height="15" fill="rgb(219,24,38)" fg:x="170576" fg:w="3160"/><text x="95.4890%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::insert (6,906 instructions, 3.85%)</title><rect x="93.2985%" y="165" width="3.8541%" height="15" fill="rgb(214,93,9)" fg:x="167176" fg:w="6906"/><text x="93.5915%" y="175.50">im_..</text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert (159,895 instructions, 89.24%)</title><rect x="7.9589%" y="181" width="89.2351%" height="15" fill="rgb(219,212,43)" fg:x="14261" fg:w="159895"/><text x="8.2518%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.04%)</title><rect x="97.1979%" y="117" width="0.0385%" height="15" fill="rgb(211,63,47)" fg:x="174163" fg:w="69"/><text x="97.4908%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.04%)</title><rect x="97.2364%" y="117" width="0.0379%" height="15" fill="rgb(221,2,45)" fg:x="174232" fg:w="68"/><text x="97.5293%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.13%)</title><rect x="97.1979%" y="133" width="0.1300%" height="15" fill="rgb(218,130,44)" fg:x="174163" fg:w="233"/><text x="97.4908%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (277 instructions, 0.15%)</title><rect x="97.1979%" y="149" width="0.1546%" height="15" fill="rgb(238,223,26)" fg:x="174163" fg:w="277"/><text x="97.4908%" y="159.50"></text></g><g><title>memset (152 instructions, 0.08%)</title><rect x="97.3524%" y="149" width="0.0848%" height="15" fill="rgb(206,15,16)" fg:x="174440" fg:w="152"/><text x="97.6454%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (610 instructions, 0.34%)</title><rect x="97.1939%" y="165" width="0.3404%" height="15" fill="rgb(241,130,30)" fg:x="174156" fg:w="610"/><text x="97.4869%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.29%)</title><rect x="97.5344%" y="149" width="0.2891%" height="15" fill="rgb(211,169,43)" fg:x="174766" fg:w="518"/><text x="97.8273%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (174 instructions, 0.10%)</title><rect x="97.8235%" y="101" width="0.0971%" height="15" fill="rgb(225,160,51)" fg:x="175284" fg:w="174"/><text x="98.1164%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (222 instructions, 0.12%)</title><rect x="97.8235%" y="117" width="0.1239%" height="15" fill="rgb(239,13,22)" fg:x="175284" fg:w="222"/><text x="98.1164%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (304 instructions, 0.17%)</title><rect x="97.8235%" y="133" width="0.1697%" height="15" fill="rgb(242,59,28)" fg:x="175284" fg:w="304"/><text x="98.1164%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (522 instructions, 0.29%)</title><rect x="97.8235%" y="149" width="0.2913%" height="15" fill="rgb(239,228,24)" fg:x="175284" fg:w="522"/><text x="98.1164%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.29%)</title><rect x="98.1148%" y="149" width="0.2880%" height="15" fill="rgb(213,79,6)" fg:x="175806" fg:w="516"/><text x="98.4078%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,660 instructions, 0.93%)</title><rect x="97.5344%" y="165" width="0.9264%" height="15" fill="rgb(228,129,25)" fg:x="174766" fg:w="1660"/><text x="97.8273%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.03%)</title><rect x="98.4647%" y="165" width="0.0335%" height="15" fill="rgb(207,133,34)" fg:x="176433" fg:w="60"/><text x="98.7577%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,943 instructions, 1.64%)</title><rect x="97.1939%" y="181" width="1.6424%" height="15" fill="rgb(211,219,2)" fg:x="174156" fg:w="2943"/><text x="97.4869%" y="191.50"></text></g><g><title>imrc_hashmap::__canister_method_batch_put::{{closure}} (178,573 instructions, 99.66%)</title><rect x="0.1222%" y="197" width="99.6590%" height="15" fill="rgb(236,147,47)" fg:x="219" fg:w="178573"/><text x="0.4152%" y="207.50">imrc_hashmap::__canister_method_batch_put::{{closure}}</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.02%)</title><rect x="99.8393%" y="181" width="0.0151%" height="15" fill="rgb(206,43,54)" fg:x="178896" fg:w="27"/><text x="100.1322%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.13%)</title><rect x="99.7896%" y="197" width="0.1300%" height="15" fill="rgb(210,56,46)" fg:x="178807" fg:w="233"/><text x="100.0826%" y="207.50"></text></g><g><title>all (179,184 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,51,32)" fg:x="0" fg:w="179184"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (179,184 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,180,44)" fg:x="0" fg:w="179184"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>