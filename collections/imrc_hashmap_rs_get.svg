<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="32841"><g><title>ic_cdk::setup (19 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0579%" height="15" fill="rgb(237,181,52)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.36%)</title><rect x="0.0579%" y="197" width="0.3593%" height="15" fill="rgb(234,152,48)" fg:x="19" fg:w="118"/><text x="0.3508%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.22%)</title><rect x="0.4172%" y="197" width="0.2162%" height="15" fill="rgb(223,12,2)" fg:x="137" fg:w="71"/><text x="0.7101%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="0.6334%" y="165" width="0.2497%" height="15" fill="rgb(217,81,12)" fg:x="208" fg:w="82"/><text x="0.9263%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="0.8830%" y="149" width="0.2101%" height="15" fill="rgb(213,217,22)" fg:x="290" fg:w="69"/><text x="1.1760%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.0931%" y="133" width="0.0122%" height="15" fill="rgb(210,44,16)" fg:x="359" fg:w="4"/><text x="1.3861%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.24%)</title><rect x="1.0931%" y="149" width="1.2363%" height="15" fill="rgb(205,31,49)" fg:x="359" fg:w="406"/><text x="1.3861%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="2.3294%" y="149" width="0.2497%" height="15" fill="rgb(230,127,21)" fg:x="765" fg:w="82"/><text x="2.6224%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.5791%" y="149" width="0.1644%" height="15" fill="rgb(208,155,13)" fg:x="847" fg:w="54"/><text x="2.8721%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.7435%" y="149" width="0.1644%" height="15" fill="rgb(230,48,30)" fg:x="901" fg:w="54"/><text x="3.0365%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.9080%" y="149" width="0.1644%" height="15" fill="rgb(224,162,50)" fg:x="955" fg:w="54"/><text x="3.2009%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="3.0724%" y="149" width="0.1644%" height="15" fill="rgb(229,112,7)" fg:x="1009" fg:w="54"/><text x="3.3653%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="3.2368%" y="149" width="0.2101%" height="15" fill="rgb(252,112,11)" fg:x="1063" fg:w="69"/><text x="3.5298%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="3.4469%" y="149" width="0.1979%" height="15" fill="rgb(217,91,25)" fg:x="1132" fg:w="65"/><text x="3.7399%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.6448%" y="133" width="0.0122%" height="15" fill="rgb(254,99,40)" fg:x="1197" fg:w="4"/><text x="3.9378%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.24%)</title><rect x="3.6448%" y="149" width="1.2363%" height="15" fill="rgb(216,220,13)" fg:x="1197" fg:w="406"/><text x="3.9378%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="4.8811%" y="149" width="0.0487%" height="15" fill="rgb(250,78,34)" fg:x="1603" fg:w="16"/><text x="5.1741%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="4.9298%" y="133" width="0.2497%" height="15" fill="rgb(227,187,51)" fg:x="1619" fg:w="82"/><text x="5.2228%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="5.1795%" y="101" width="0.1827%" height="15" fill="rgb(248,81,46)" fg:x="1701" fg:w="60"/><text x="5.4725%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="5.1795%" y="117" width="0.2588%" height="15" fill="rgb(234,8,3)" fg:x="1701" fg:w="85"/><text x="5.4725%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="5.4383%" y="69" width="0.0274%" height="15" fill="rgb(211,142,2)" fg:x="1786" fg:w="9"/><text x="5.7313%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="5.4657%" y="53" width="0.0913%" height="15" fill="rgb(217,197,51)" fg:x="1795" fg:w="30"/><text x="5.7587%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="5.4657%" y="69" width="0.1675%" height="15" fill="rgb(242,17,27)" fg:x="1795" fg:w="55"/><text x="5.7587%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="5.4383%" y="85" width="0.3593%" height="15" fill="rgb(228,37,21)" fg:x="1786" fg:w="118"/><text x="5.7313%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="5.4383%" y="101" width="0.5207%" height="15" fill="rgb(239,5,49)" fg:x="1786" fg:w="171"/><text x="5.7313%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.54%)</title><rect x="5.4383%" y="117" width="0.5359%" height="15" fill="rgb(223,16,35)" fg:x="1786" fg:w="176"/><text x="5.7313%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="5.1795%" y="133" width="1.1327%" height="15" fill="rgb(211,203,33)" fg:x="1701" fg:w="372"/><text x="5.4725%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="4.9298%" y="149" width="1.8118%" height="15" fill="rgb(234,139,4)" fg:x="1619" fg:w="595"/><text x="5.2228%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="6.7416%" y="149" width="0.2497%" height="15" fill="rgb(248,118,50)" fg:x="2214" fg:w="82"/><text x="7.0345%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="6.9913%" y="149" width="0.1705%" height="15" fill="rgb(223,23,1)" fg:x="2296" fg:w="56"/><text x="7.2842%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="7.1618%" y="149" width="0.1918%" height="15" fill="rgb(205,1,22)" fg:x="2352" fg:w="63"/><text x="7.4547%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="7.3536%" y="149" width="0.1979%" height="15" fill="rgb(230,1,25)" fg:x="2415" fg:w="65"/><text x="7.6466%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.5515%" y="117" width="0.0122%" height="15" fill="rgb(209,213,11)" fg:x="2480" fg:w="4"/><text x="7.8445%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.24%)</title><rect x="7.5515%" y="133" width="1.2363%" height="15" fill="rgb(218,8,46)" fg:x="2480" fg:w="406"/><text x="7.8445%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="8.7878%" y="133" width="0.0487%" height="15" fill="rgb(222,88,19)" fg:x="2886" fg:w="16"/><text x="9.0808%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="8.8365%" y="117" width="0.2497%" height="15" fill="rgb(244,68,4)" fg:x="2902" fg:w="82"/><text x="9.1295%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="9.0862%" y="85" width="0.1827%" height="15" fill="rgb(238,218,36)" fg:x="2984" fg:w="60"/><text x="9.3792%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="9.0862%" y="101" width="0.2588%" height="15" fill="rgb(229,212,32)" fg:x="2984" fg:w="85"/><text x="9.3792%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="9.3450%" y="53" width="0.0274%" height="15" fill="rgb(227,74,16)" fg:x="3069" fg:w="9"/><text x="9.6380%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="9.3724%" y="37" width="0.0913%" height="15" fill="rgb(216,172,15)" fg:x="3078" fg:w="30"/><text x="9.6654%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="9.3724%" y="53" width="0.1675%" height="15" fill="rgb(241,177,22)" fg:x="3078" fg:w="55"/><text x="9.6654%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="9.3450%" y="69" width="0.3593%" height="15" fill="rgb(232,12,53)" fg:x="3069" fg:w="118"/><text x="9.6380%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="9.3450%" y="85" width="0.5207%" height="15" fill="rgb(222,82,0)" fg:x="3069" fg:w="171"/><text x="9.6380%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.54%)</title><rect x="9.3450%" y="101" width="0.5359%" height="15" fill="rgb(223,79,38)" fg:x="3069" fg:w="176"/><text x="9.6380%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="9.0862%" y="117" width="1.1327%" height="15" fill="rgb(218,26,35)" fg:x="2984" fg:w="372"/><text x="9.3792%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="8.8365%" y="133" width="1.8118%" height="15" fill="rgb(212,90,12)" fg:x="2902" fg:w="595"/><text x="9.1295%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="10.6483%" y="133" width="0.2497%" height="15" fill="rgb(228,159,28)" fg:x="3497" fg:w="82"/><text x="10.9412%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="10.8980%" y="133" width="0.1705%" height="15" fill="rgb(206,16,2)" fg:x="3579" fg:w="56"/><text x="11.1909%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="11.0685%" y="117" width="0.2101%" height="15" fill="rgb(240,176,11)" fg:x="3635" fg:w="69"/><text x="11.3615%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.28%)</title><rect x="11.2786%" y="117" width="0.2771%" height="15" fill="rgb(247,120,32)" fg:x="3704" fg:w="91"/><text x="11.5716%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="11.5557%" y="117" width="0.1918%" height="15" fill="rgb(231,21,17)" fg:x="3795" fg:w="63"/><text x="11.8486%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.86%)</title><rect x="11.0685%" y="133" width="0.8587%" height="15" fill="rgb(239,216,11)" fg:x="3635" fg:w="282"/><text x="11.3615%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="11.9272%" y="133" width="0.2497%" height="15" fill="rgb(206,112,21)" fg:x="3917" fg:w="82"/><text x="12.2201%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 5.24%)</title><rect x="7.5515%" y="149" width="5.2434%" height="15" fill="rgb(207,120,14)" fg:x="2480" fg:w="1722"/><text x="7.8445%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="12.7950%" y="149" width="0.1918%" height="15" fill="rgb(241,215,9)" fg:x="4202" fg:w="63"/><text x="13.0880%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.9868%" y="149" width="0.0396%" height="15" fill="rgb(232,187,12)" fg:x="4265" fg:w="13"/><text x="13.2798%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="13.0264%" y="149" width="0.0396%" height="15" fill="rgb(226,132,43)" fg:x="4278" fg:w="13"/><text x="13.3194%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="13.0660%" y="149" width="0.0213%" height="15" fill="rgb(248,181,7)" fg:x="4291" fg:w="7"/><text x="13.3590%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="13.0873%" y="149" width="0.0457%" height="15" fill="rgb(244,76,8)" fg:x="4298" fg:w="15"/><text x="13.3803%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.1330%" y="133" width="0.2497%" height="15" fill="rgb(225,223,11)" fg:x="4313" fg:w="82"/><text x="13.4259%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.50%)</title><rect x="13.1330%" y="149" width="0.5024%" height="15" fill="rgb(215,145,14)" fg:x="4313" fg:w="165"/><text x="13.4259%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.6354%" y="117" width="0.2497%" height="15" fill="rgb(219,171,17)" fg:x="4478" fg:w="82"/><text x="13.9284%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="13.6354%" y="133" width="0.3532%" height="15" fill="rgb(233,147,22)" fg:x="4478" fg:w="116"/><text x="13.9284%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.56%)</title><rect x="13.6354%" y="149" width="0.5603%" height="15" fill="rgb(205,143,47)" fg:x="4478" fg:w="184"/><text x="13.9284%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.1957%" y="149" width="0.2497%" height="15" fill="rgb(216,212,20)" fg:x="4662" fg:w="82"/><text x="14.4886%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="14.4454%" y="149" width="0.2466%" height="15" fill="rgb(207,117,30)" fg:x="4744" fg:w="81"/><text x="14.7383%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.6920%" y="149" width="0.2497%" height="15" fill="rgb(219,107,33)" fg:x="4825" fg:w="82"/><text x="14.9850%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.9417%" y="149" width="0.2497%" height="15" fill="rgb(242,205,14)" fg:x="4907" fg:w="82"/><text x="15.2347%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="15.1975%" y="149" width="0.2466%" height="15" fill="rgb(235,56,52)" fg:x="4991" fg:w="81"/><text x="15.4904%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.16%)</title><rect x="15.4441%" y="149" width="1.1571%" height="15" fill="rgb(249,138,45)" fg:x="5072" fg:w="380"/><text x="15.7371%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.16%)</title><rect x="16.6012%" y="149" width="1.1571%" height="15" fill="rgb(240,3,20)" fg:x="5452" fg:w="380"/><text x="16.8942%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,486 instructions, 19.75%)</title><rect x="0.8830%" y="165" width="19.7497%" height="15" fill="rgb(217,136,37)" fg:x="290" fg:w="6486"/><text x="1.1760%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (335 instructions, 1.02%)</title><rect x="20.6327%" y="165" width="1.0201%" height="15" fill="rgb(239,43,46)" fg:x="6776" fg:w="335"/><text x="20.9257%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="21.6528%" y="149" width="0.0152%" height="15" fill="rgb(246,95,6)" fg:x="7111" fg:w="5"/><text x="21.9458%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.12%)</title><rect x="21.6528%" y="165" width="0.1188%" height="15" fill="rgb(224,115,17)" fg:x="7111" fg:w="39"/><text x="21.9458%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="21.7716%" y="165" width="0.2497%" height="15" fill="rgb(220,29,31)" fg:x="7150" fg:w="82"/><text x="22.0645%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="22.0213%" y="149" width="0.0152%" height="15" fill="rgb(214,106,26)" fg:x="7232" fg:w="5"/><text x="22.3142%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="22.0365%" y="133" width="0.1614%" height="15" fill="rgb(210,138,24)" fg:x="7237" fg:w="53"/><text x="22.3294%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="22.1979%" y="133" width="0.2680%" height="15" fill="rgb(214,73,5)" fg:x="7290" fg:w="88"/><text x="22.4908%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="22.4658%" y="133" width="0.4933%" height="15" fill="rgb(248,42,1)" fg:x="7378" fg:w="162"/><text x="22.7588%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="22.0365%" y="149" width="1.6443%" height="15" fill="rgb(229,87,25)" fg:x="7237" fg:w="540"/><text x="22.3294%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 2.28%)</title><rect x="22.0213%" y="165" width="2.2807%" height="15" fill="rgb(212,14,45)" fg:x="7232" fg:w="749"/><text x="22.3142%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="24.3019%" y="165" width="0.2497%" height="15" fill="rgb(214,109,1)" fg:x="7981" fg:w="82"/><text x="24.5949%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="24.5516%" y="149" width="0.0152%" height="15" fill="rgb(237,158,47)" fg:x="8063" fg:w="5"/><text x="24.8446%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="24.5669%" y="133" width="0.1614%" height="15" fill="rgb(242,129,51)" fg:x="8068" fg:w="53"/><text x="24.8598%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="24.7282%" y="133" width="0.2680%" height="15" fill="rgb(236,15,36)" fg:x="8121" fg:w="88"/><text x="25.0212%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="24.9962%" y="133" width="0.4933%" height="15" fill="rgb(218,118,4)" fg:x="8209" fg:w="162"/><text x="25.2892%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="24.5669%" y="149" width="1.6443%" height="15" fill="rgb(226,171,38)" fg:x="8068" fg:w="540"/><text x="24.8598%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.21%)</title><rect x="26.2111%" y="149" width="0.2071%" height="15" fill="rgb(237,169,5)" fg:x="8608" fg:w="68"/><text x="26.5041%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="26.4182%" y="133" width="0.2466%" height="15" fill="rgb(217,111,31)" fg:x="8676" fg:w="81"/><text x="26.7112%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.33%)</title><rect x="26.4182%" y="149" width="0.3289%" height="15" fill="rgb(247,28,22)" fg:x="8676" fg:w="108"/><text x="26.7112%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 2.71%)</title><rect x="24.5516%" y="165" width="2.7100%" height="15" fill="rgb(225,140,10)" fg:x="8063" fg:w="890"/><text x="24.8446%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="27.2617%" y="117" width="0.1614%" height="15" fill="rgb(226,192,30)" fg:x="8953" fg:w="53"/><text x="27.5546%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.24%)</title><rect x="27.2617%" y="133" width="0.2375%" height="15" fill="rgb(208,115,30)" fg:x="8953" fg:w="78"/><text x="27.5546%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.89%)</title><rect x="27.2617%" y="149" width="0.8922%" height="15" fill="rgb(213,80,46)" fg:x="8953" fg:w="293"/><text x="27.5546%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1312 (15 instructions, 0.05%)</title><rect x="28.1538%" y="149" width="0.0457%" height="15" fill="rgb(215,148,9)" fg:x="9246" fg:w="15"/><text x="28.4468%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.1995%" y="149" width="0.0335%" height="15" fill="rgb(232,222,27)" fg:x="9261" fg:w="11"/><text x="28.4925%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.46%)</title><rect x="27.2617%" y="165" width="1.4555%" height="15" fill="rgb(232,46,45)" fg:x="8953" fg:w="478"/><text x="27.5546%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.14%)</title><rect x="28.7172%" y="165" width="0.1431%" height="15" fill="rgb(247,79,26)" fg:x="9431" fg:w="47"/><text x="29.0101%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="28.8603%" y="149" width="0.3745%" height="15" fill="rgb(207,83,32)" fg:x="9478" fg:w="123"/><text x="29.1532%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="29.3170%" y="149" width="0.3745%" height="15" fill="rgb(232,127,20)" fg:x="9628" fg:w="123"/><text x="29.6100%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.91%)</title><rect x="28.8603%" y="165" width="0.9135%" height="15" fill="rgb(253,194,23)" fg:x="9478" fg:w="300"/><text x="29.1532%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.09%)</title><rect x="29.7738%" y="149" width="0.0853%" height="15" fill="rgb(223,132,26)" fg:x="9778" fg:w="28"/><text x="30.0667%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.30%)</title><rect x="29.7738%" y="165" width="0.2954%" height="15" fill="rgb(214,55,30)" fg:x="9778" fg:w="97"/><text x="30.0667%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.0691%" y="165" width="0.0335%" height="15" fill="rgb(226,188,51)" fg:x="9875" fg:w="11"/><text x="30.3621%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1026%" y="165" width="0.0335%" height="15" fill="rgb(238,217,3)" fg:x="9886" fg:w="11"/><text x="30.3956%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1361%" y="165" width="0.0335%" height="15" fill="rgb(224,174,47)" fg:x="9897" fg:w="11"/><text x="30.4291%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.25%)</title><rect x="30.1696%" y="165" width="1.2484%" height="15" fill="rgb(242,198,24)" fg:x="9908" fg:w="410"/><text x="30.4626%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="31.4180%" y="133" width="0.0365%" height="15" fill="rgb(225,39,24)" fg:x="10318" fg:w="12"/><text x="31.7110%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.51%)</title><rect x="31.4546%" y="133" width="0.5116%" height="15" fill="rgb(209,153,27)" fg:x="10330" fg:w="168"/><text x="31.7476%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="31.9661%" y="101" width="0.1918%" height="15" fill="rgb(243,141,7)" fg:x="10498" fg:w="63"/><text x="32.2591%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.63%)</title><rect x="31.9661%" y="117" width="0.6334%" height="15" fill="rgb(226,127,29)" fg:x="10498" fg:w="208"/><text x="32.2591%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.72%)</title><rect x="31.9661%" y="133" width="0.7156%" height="15" fill="rgb(210,47,30)" fg:x="10498" fg:w="235"/><text x="32.2591%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="32.6817%" y="133" width="0.0335%" height="15" fill="rgb(206,159,49)" fg:x="10733" fg:w="11"/><text x="32.9747%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 1.43%)</title><rect x="31.4180%" y="149" width="1.4250%" height="15" fill="rgb(222,218,25)" fg:x="10318" fg:w="468"/><text x="31.7110%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 1.53%)</title><rect x="31.4180%" y="165" width="1.5316%" height="15" fill="rgb(211,58,3)" fg:x="10318" fg:w="503"/><text x="31.7110%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="32.9497%" y="149" width="0.1675%" height="15" fill="rgb(229,127,11)" fg:x="10821" fg:w="55"/><text x="33.2426%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="33.1171%" y="149" width="0.1918%" height="15" fill="rgb(243,36,4)" fg:x="10876" fg:w="63"/><text x="33.4101%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.61%)</title><rect x="32.9497%" y="165" width="0.6059%" height="15" fill="rgb(244,104,6)" fg:x="10821" fg:w="199"/><text x="33.2426%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,203 instructions, 34.11%)</title><rect x="0.6334%" y="181" width="34.1128%" height="15" fill="rgb(235,205,13)" fg:x="208" fg:w="11203"/><text x="0.9263%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (14 instructions, 0.04%)</title><rect x="34.7462%" y="181" width="0.0426%" height="15" fill="rgb(221,68,9)" fg:x="11411" fg:w="14"/><text x="35.0392%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="34.7888%" y="181" width="0.6090%" height="15" fill="rgb(249,5,26)" fg:x="11425" fg:w="200"/><text x="35.0818%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="35.3978%" y="181" width="0.6090%" height="15" fill="rgb(226,167,18)" fg:x="11625" fg:w="200"/><text x="35.6908%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.0068%" y="181" width="0.6090%" height="15" fill="rgb(218,150,12)" fg:x="11825" fg:w="200"/><text x="36.2998%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.6158%" y="181" width="0.6090%" height="15" fill="rgb(220,105,47)" fg:x="12025" fg:w="200"/><text x="36.9088%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.2248%" y="181" width="0.6090%" height="15" fill="rgb(228,143,18)" fg:x="12225" fg:w="200"/><text x="37.5178%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.8338%" y="181" width="0.6090%" height="15" fill="rgb(226,29,51)" fg:x="12425" fg:w="200"/><text x="38.1268%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="38.4428%" y="181" width="0.6090%" height="15" fill="rgb(220,97,4)" fg:x="12625" fg:w="200"/><text x="38.7358%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.0518%" y="181" width="0.6090%" height="15" fill="rgb(238,7,53)" fg:x="12825" fg:w="200"/><text x="39.3448%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.6608%" y="181" width="0.6090%" height="15" fill="rgb(247,88,5)" fg:x="13025" fg:w="200"/><text x="39.9538%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.2698%" y="181" width="0.6090%" height="15" fill="rgb(215,219,46)" fg:x="13225" fg:w="200"/><text x="40.5628%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.8788%" y="181" width="0.6090%" height="15" fill="rgb(215,186,9)" fg:x="13425" fg:w="200"/><text x="41.1717%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="41.4878%" y="181" width="0.6090%" height="15" fill="rgb(242,166,53)" fg:x="13625" fg:w="200"/><text x="41.7807%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.0968%" y="181" width="0.6090%" height="15" fill="rgb(208,28,12)" fg:x="13825" fg:w="200"/><text x="42.3897%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.7058%" y="181" width="0.6090%" height="15" fill="rgb(248,164,18)" fg:x="14025" fg:w="200"/><text x="42.9987%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.3148%" y="181" width="0.6090%" height="15" fill="rgb(228,220,18)" fg:x="14225" fg:w="200"/><text x="43.6077%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.9238%" y="181" width="0.6090%" height="15" fill="rgb(206,118,35)" fg:x="14425" fg:w="200"/><text x="44.2167%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.5327%" y="181" width="0.6090%" height="15" fill="rgb(214,164,20)" fg:x="14625" fg:w="200"/><text x="44.8257%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.1417%" y="181" width="0.6090%" height="15" fill="rgb(212,179,28)" fg:x="14825" fg:w="200"/><text x="45.4347%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.7507%" y="181" width="0.6090%" height="15" fill="rgb(207,185,14)" fg:x="15025" fg:w="200"/><text x="46.0437%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.3597%" y="181" width="0.6090%" height="15" fill="rgb(216,38,39)" fg:x="15225" fg:w="200"/><text x="46.6527%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.9687%" y="181" width="0.6090%" height="15" fill="rgb(229,185,29)" fg:x="15425" fg:w="200"/><text x="47.2617%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.5777%" y="181" width="0.6090%" height="15" fill="rgb(231,91,16)" fg:x="15625" fg:w="200"/><text x="47.8707%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.1867%" y="181" width="0.6090%" height="15" fill="rgb(232,228,12)" fg:x="15825" fg:w="200"/><text x="48.4797%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.7957%" y="181" width="0.6090%" height="15" fill="rgb(215,172,19)" fg:x="16025" fg:w="200"/><text x="49.0887%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="49.4047%" y="181" width="0.6090%" height="15" fill="rgb(218,207,53)" fg:x="16225" fg:w="200"/><text x="49.6977%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.0137%" y="181" width="0.6090%" height="15" fill="rgb(251,212,23)" fg:x="16425" fg:w="200"/><text x="50.3067%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.6227%" y="181" width="0.6090%" height="15" fill="rgb(214,33,23)" fg:x="16625" fg:w="200"/><text x="50.9157%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.2317%" y="181" width="0.6090%" height="15" fill="rgb(236,93,26)" fg:x="16825" fg:w="200"/><text x="51.5247%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.8407%" y="181" width="0.6090%" height="15" fill="rgb(224,175,8)" fg:x="17025" fg:w="200"/><text x="52.1337%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="52.4497%" y="181" width="0.6090%" height="15" fill="rgb(214,207,19)" fg:x="17225" fg:w="200"/><text x="52.7427%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.0587%" y="181" width="0.6090%" height="15" fill="rgb(217,200,30)" fg:x="17425" fg:w="200"/><text x="53.3516%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.6677%" y="181" width="0.6090%" height="15" fill="rgb(250,179,19)" fg:x="17625" fg:w="200"/><text x="53.9606%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.2767%" y="181" width="0.6090%" height="15" fill="rgb(220,119,49)" fg:x="17825" fg:w="200"/><text x="54.5696%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.8857%" y="181" width="0.6090%" height="15" fill="rgb(248,203,6)" fg:x="18025" fg:w="200"/><text x="55.1786%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="55.4947%" y="181" width="0.6090%" height="15" fill="rgb(214,145,50)" fg:x="18225" fg:w="200"/><text x="55.7876%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.1037%" y="181" width="0.6090%" height="15" fill="rgb(207,66,2)" fg:x="18425" fg:w="200"/><text x="56.3966%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.7126%" y="181" width="0.6090%" height="15" fill="rgb(230,66,33)" fg:x="18625" fg:w="200"/><text x="57.0056%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.3216%" y="181" width="0.6090%" height="15" fill="rgb(247,58,29)" fg:x="18825" fg:w="200"/><text x="57.6146%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.9306%" y="181" width="0.6090%" height="15" fill="rgb(254,137,37)" fg:x="19025" fg:w="200"/><text x="58.2236%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="58.5396%" y="181" width="0.6090%" height="15" fill="rgb(212,43,33)" fg:x="19225" fg:w="200"/><text x="58.8326%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.1486%" y="181" width="0.6090%" height="15" fill="rgb(249,66,9)" fg:x="19425" fg:w="200"/><text x="59.4416%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.7576%" y="181" width="0.6090%" height="15" fill="rgb(245,104,17)" fg:x="19625" fg:w="200"/><text x="60.0506%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.3666%" y="181" width="0.6090%" height="15" fill="rgb(205,227,13)" fg:x="19825" fg:w="200"/><text x="60.6596%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.9756%" y="181" width="0.6090%" height="15" fill="rgb(250,83,47)" fg:x="20025" fg:w="200"/><text x="61.2686%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.5846%" y="181" width="0.6090%" height="15" fill="rgb(216,13,11)" fg:x="20225" fg:w="200"/><text x="61.8776%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.1936%" y="181" width="0.6090%" height="15" fill="rgb(234,62,32)" fg:x="20425" fg:w="200"/><text x="62.4866%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.8026%" y="181" width="0.6090%" height="15" fill="rgb(227,15,30)" fg:x="20625" fg:w="200"/><text x="63.0956%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="63.4116%" y="181" width="0.6090%" height="15" fill="rgb(211,23,18)" fg:x="20825" fg:w="200"/><text x="63.7046%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.0206%" y="181" width="0.6090%" height="15" fill="rgb(207,194,2)" fg:x="21025" fg:w="200"/><text x="64.3136%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.6296%" y="181" width="0.6090%" height="15" fill="rgb(210,108,25)" fg:x="21225" fg:w="200"/><text x="64.9225%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="65.2386%" y="149" width="0.0152%" height="15" fill="rgb(207,176,16)" fg:x="21425" fg:w="5"/><text x="65.5315%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="65.2538%" y="117" width="0.1675%" height="15" fill="rgb(241,54,31)" fg:x="21430" fg:w="55"/><text x="65.5468%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (137 instructions, 0.42%)</title><rect x="65.2538%" y="133" width="0.4172%" height="15" fill="rgb(240,197,51)" fg:x="21430" fg:w="137"/><text x="65.5468%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.50%)</title><rect x="65.2538%" y="149" width="0.4994%" height="15" fill="rgb(220,101,40)" fg:x="21430" fg:w="164"/><text x="65.5468%" y="159.50"></text></g><g><title>memset (136 instructions, 0.41%)</title><rect x="65.7532%" y="149" width="0.4141%" height="15" fill="rgb(222,129,31)" fg:x="21594" fg:w="136"/><text x="66.0461%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (465 instructions, 1.42%)</title><rect x="65.2386%" y="165" width="1.4159%" height="15" fill="rgb(227,103,18)" fg:x="21425" fg:w="465"/><text x="65.5315%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="66.6545%" y="117" width="0.2497%" height="15" fill="rgb(211,133,9)" fg:x="21890" fg:w="82"/><text x="66.9475%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="66.6545%" y="133" width="0.3532%" height="15" fill="rgb(211,220,5)" fg:x="21890" fg:w="116"/><text x="66.9475%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (181 instructions, 0.55%)</title><rect x="66.6545%" y="149" width="0.5511%" height="15" fill="rgb(211,149,6)" fg:x="21890" fg:w="181"/><text x="66.9475%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.2056%" y="149" width="0.0335%" height="15" fill="rgb(238,164,51)" fg:x="22071" fg:w="11"/><text x="67.4986%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.2391%" y="149" width="0.0335%" height="15" fill="rgb(241,128,45)" fg:x="22082" fg:w="11"/><text x="67.5321%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.09%)</title><rect x="67.2726%" y="149" width="0.0913%" height="15" fill="rgb(248,134,29)" fg:x="22093" fg:w="30"/><text x="67.5656%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 instructions, 0.02%)</title><rect x="67.3640%" y="149" width="0.0152%" height="15" fill="rgb(211,192,50)" fg:x="22123" fg:w="5"/><text x="67.6569%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (459 instructions, 1.40%)</title><rect x="66.6545%" y="165" width="1.3976%" height="15" fill="rgb(223,170,45)" fg:x="21890" fg:w="459"/><text x="66.9475%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="68.0521%" y="165" width="0.0152%" height="15" fill="rgb(219,135,45)" fg:x="22349" fg:w="5"/><text x="68.3451%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="68.0674%" y="165" width="0.1705%" height="15" fill="rgb(224,60,45)" fg:x="22354" fg:w="56"/><text x="68.3603%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,061 instructions, 3.23%)</title><rect x="65.2386%" y="181" width="3.2307%" height="15" fill="rgb(243,27,38)" fg:x="21425" fg:w="1061"/><text x="65.5315%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_get_2_::{{closure}} (32,316 instructions, 98.40%)</title><rect x="0.6334%" y="197" width="98.4014%" height="15" fill="rgb(228,24,38)" fg:x="208" fg:w="32316"/><text x="0.9263%" y="207.50">imrc_hashmap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="99.0347%" y="197" width="0.0365%" height="15" fill="rgb(223,204,21)" fg:x="32524" fg:w="12"/><text x="99.3277%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="99.0713%" y="197" width="0.2466%" height="15" fill="rgb(210,102,9)" fg:x="32536" fg:w="81"/><text x="99.3643%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.38%)</title><rect x="99.3179%" y="197" width="0.3837%" height="15" fill="rgb(217,73,1)" fg:x="32617" fg:w="126"/><text x="99.6109%" y="207.50"></text></g><g><title>all (32,841 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,18,46)" fg:x="0" fg:w="32841"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (32,841 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,126,23)" fg:x="0" fg:w="32841"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>