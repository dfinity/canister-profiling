<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="32962"><g><title>ic_cdk::setup (19 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0576%" height="15" fill="rgb(205,229,18)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.36%)</title><rect x="0.0576%" y="197" width="0.3580%" height="15" fill="rgb(245,80,14)" fg:x="19" fg:w="118"/><text x="0.3506%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.22%)</title><rect x="0.4156%" y="197" width="0.2154%" height="15" fill="rgb(250,167,3)" fg:x="137" fg:w="71"/><text x="0.7086%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="0.6310%" y="165" width="0.2488%" height="15" fill="rgb(236,57,6)" fg:x="208" fg:w="82"/><text x="0.9240%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="0.8798%" y="149" width="0.2093%" height="15" fill="rgb(244,139,49)" fg:x="290" fg:w="69"/><text x="1.1728%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.0891%" y="133" width="0.0121%" height="15" fill="rgb(230,187,53)" fg:x="359" fg:w="4"/><text x="1.3821%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="1.0891%" y="149" width="1.2317%" height="15" fill="rgb(230,138,16)" fg:x="359" fg:w="406"/><text x="1.3821%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="2.3209%" y="149" width="0.2488%" height="15" fill="rgb(249,21,46)" fg:x="765" fg:w="82"/><text x="2.6138%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.5696%" y="149" width="0.1638%" height="15" fill="rgb(215,23,1)" fg:x="847" fg:w="54"/><text x="2.8626%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.7335%" y="149" width="0.1638%" height="15" fill="rgb(213,183,14)" fg:x="901" fg:w="54"/><text x="3.0264%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.8973%" y="149" width="0.1638%" height="15" fill="rgb(220,73,12)" fg:x="955" fg:w="54"/><text x="3.1902%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="3.0611%" y="149" width="0.1638%" height="15" fill="rgb(234,41,48)" fg:x="1009" fg:w="54"/><text x="3.3541%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="3.2249%" y="149" width="0.2093%" height="15" fill="rgb(243,214,12)" fg:x="1063" fg:w="69"/><text x="3.5179%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="3.4343%" y="149" width="0.1972%" height="15" fill="rgb(240,203,30)" fg:x="1132" fg:w="65"/><text x="3.7272%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.6315%" y="133" width="0.0121%" height="15" fill="rgb(248,101,44)" fg:x="1197" fg:w="4"/><text x="3.9244%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="3.6315%" y="149" width="1.2317%" height="15" fill="rgb(215,79,20)" fg:x="1197" fg:w="406"/><text x="3.9244%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="4.8632%" y="149" width="0.0485%" height="15" fill="rgb(222,140,13)" fg:x="1603" fg:w="16"/><text x="5.1561%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="4.9117%" y="133" width="0.2488%" height="15" fill="rgb(216,32,44)" fg:x="1619" fg:w="82"/><text x="5.2047%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="5.1605%" y="101" width="0.1820%" height="15" fill="rgb(251,184,28)" fg:x="1701" fg:w="60"/><text x="5.4535%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="5.1605%" y="117" width="0.2579%" height="15" fill="rgb(251,124,17)" fg:x="1701" fg:w="85"/><text x="5.4535%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="5.4184%" y="69" width="0.0273%" height="15" fill="rgb(243,106,47)" fg:x="1786" fg:w="9"/><text x="5.7113%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="5.4457%" y="53" width="0.0910%" height="15" fill="rgb(252,132,44)" fg:x="1795" fg:w="30"/><text x="5.7386%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="5.4457%" y="69" width="0.1669%" height="15" fill="rgb(228,50,6)" fg:x="1795" fg:w="55"/><text x="5.7386%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="5.4184%" y="85" width="0.3580%" height="15" fill="rgb(207,118,22)" fg:x="1786" fg:w="118"/><text x="5.7113%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="5.4184%" y="101" width="0.5188%" height="15" fill="rgb(236,229,14)" fg:x="1786" fg:w="171"/><text x="5.7113%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.53%)</title><rect x="5.4184%" y="117" width="0.5339%" height="15" fill="rgb(252,179,52)" fg:x="1786" fg:w="176"/><text x="5.7113%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="5.1605%" y="133" width="1.1286%" height="15" fill="rgb(213,207,25)" fg:x="1701" fg:w="372"/><text x="5.4535%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="4.9117%" y="149" width="1.8051%" height="15" fill="rgb(225,6,50)" fg:x="1619" fg:w="595"/><text x="5.2047%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="6.7168%" y="149" width="0.2488%" height="15" fill="rgb(239,117,5)" fg:x="2214" fg:w="82"/><text x="7.0098%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="6.9656%" y="149" width="0.1699%" height="15" fill="rgb(211,57,28)" fg:x="2296" fg:w="56"/><text x="7.2586%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="7.1355%" y="149" width="0.1911%" height="15" fill="rgb(219,90,50)" fg:x="2352" fg:w="63"/><text x="7.4285%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="7.3266%" y="149" width="0.1972%" height="15" fill="rgb(233,106,17)" fg:x="2415" fg:w="65"/><text x="7.6196%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.5238%" y="117" width="0.0121%" height="15" fill="rgb(236,46,12)" fg:x="2480" fg:w="4"/><text x="7.8168%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="7.5238%" y="133" width="1.2317%" height="15" fill="rgb(232,172,36)" fg:x="2480" fg:w="406"/><text x="7.8168%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="8.7555%" y="133" width="0.0485%" height="15" fill="rgb(226,97,23)" fg:x="2886" fg:w="16"/><text x="9.0485%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="8.8041%" y="117" width="0.2488%" height="15" fill="rgb(246,48,24)" fg:x="2902" fg:w="82"/><text x="9.0970%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="9.0528%" y="85" width="0.1820%" height="15" fill="rgb(232,125,5)" fg:x="2984" fg:w="60"/><text x="9.3458%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="9.0528%" y="101" width="0.2579%" height="15" fill="rgb(225,37,18)" fg:x="2984" fg:w="85"/><text x="9.3458%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="9.3107%" y="53" width="0.0273%" height="15" fill="rgb(254,131,43)" fg:x="3069" fg:w="9"/><text x="9.6037%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="9.3380%" y="37" width="0.0910%" height="15" fill="rgb(205,46,50)" fg:x="3078" fg:w="30"/><text x="9.6310%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="9.3380%" y="53" width="0.1669%" height="15" fill="rgb(234,205,32)" fg:x="3078" fg:w="55"/><text x="9.6310%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="9.3107%" y="69" width="0.3580%" height="15" fill="rgb(218,208,13)" fg:x="3069" fg:w="118"/><text x="9.6037%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="9.3107%" y="85" width="0.5188%" height="15" fill="rgb(215,40,29)" fg:x="3069" fg:w="171"/><text x="9.6037%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.53%)</title><rect x="9.3107%" y="101" width="0.5339%" height="15" fill="rgb(233,168,15)" fg:x="3069" fg:w="176"/><text x="9.6037%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="9.0528%" y="117" width="1.1286%" height="15" fill="rgb(250,209,8)" fg:x="2984" fg:w="372"/><text x="9.3458%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="8.8041%" y="133" width="1.8051%" height="15" fill="rgb(227,98,2)" fg:x="2902" fg:w="595"/><text x="9.0970%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="10.6092%" y="133" width="0.2488%" height="15" fill="rgb(227,44,44)" fg:x="3497" fg:w="82"/><text x="10.9022%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="10.8580%" y="133" width="0.1699%" height="15" fill="rgb(229,191,28)" fg:x="3579" fg:w="56"/><text x="11.1509%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="11.0279%" y="117" width="0.2093%" height="15" fill="rgb(215,216,15)" fg:x="3635" fg:w="69"/><text x="11.3208%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.28%)</title><rect x="11.2372%" y="117" width="0.2761%" height="15" fill="rgb(219,97,45)" fg:x="3704" fg:w="91"/><text x="11.5302%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="11.5133%" y="117" width="0.1911%" height="15" fill="rgb(245,193,35)" fg:x="3795" fg:w="63"/><text x="11.8062%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.86%)</title><rect x="11.0279%" y="133" width="0.8555%" height="15" fill="rgb(219,164,31)" fg:x="3635" fg:w="282"/><text x="11.3208%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="11.8834%" y="133" width="0.2488%" height="15" fill="rgb(216,125,5)" fg:x="3917" fg:w="82"/><text x="12.1763%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 5.22%)</title><rect x="7.5238%" y="149" width="5.2242%" height="15" fill="rgb(243,79,28)" fg:x="2480" fg:w="1722"/><text x="7.8168%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="12.7480%" y="149" width="0.1911%" height="15" fill="rgb(211,217,30)" fg:x="4202" fg:w="63"/><text x="13.0410%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.9391%" y="149" width="0.0394%" height="15" fill="rgb(226,117,42)" fg:x="4265" fg:w="13"/><text x="13.2321%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.9786%" y="149" width="0.0394%" height="15" fill="rgb(224,63,53)" fg:x="4278" fg:w="13"/><text x="13.2716%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="13.0180%" y="149" width="0.0212%" height="15" fill="rgb(224,84,3)" fg:x="4291" fg:w="7"/><text x="13.3110%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="13.0393%" y="149" width="0.0455%" height="15" fill="rgb(205,50,35)" fg:x="4298" fg:w="15"/><text x="13.3322%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.0848%" y="133" width="0.2488%" height="15" fill="rgb(254,208,44)" fg:x="4313" fg:w="82"/><text x="13.3777%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.50%)</title><rect x="13.0848%" y="149" width="0.5006%" height="15" fill="rgb(207,126,28)" fg:x="4313" fg:w="165"/><text x="13.3777%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.5853%" y="117" width="0.2488%" height="15" fill="rgb(223,134,12)" fg:x="4478" fg:w="82"/><text x="13.8783%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="13.5853%" y="133" width="0.3519%" height="15" fill="rgb(253,108,53)" fg:x="4478" fg:w="116"/><text x="13.8783%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.56%)</title><rect x="13.5853%" y="149" width="0.5582%" height="15" fill="rgb(206,167,36)" fg:x="4478" fg:w="184"/><text x="13.8783%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.1436%" y="149" width="0.2488%" height="15" fill="rgb(242,45,32)" fg:x="4662" fg:w="82"/><text x="14.4365%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="14.3923%" y="149" width="0.2457%" height="15" fill="rgb(221,136,16)" fg:x="4744" fg:w="81"/><text x="14.6853%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.6381%" y="149" width="0.2488%" height="15" fill="rgb(235,53,28)" fg:x="4825" fg:w="82"/><text x="14.9310%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.8868%" y="149" width="0.2488%" height="15" fill="rgb(214,127,26)" fg:x="4907" fg:w="82"/><text x="15.1798%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="15.1417%" y="149" width="0.2457%" height="15" fill="rgb(225,155,12)" fg:x="4991" fg:w="81"/><text x="15.4346%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.21%)</title><rect x="15.3874%" y="149" width="1.2105%" height="15" fill="rgb(245,206,40)" fg:x="5072" fg:w="399"/><text x="15.6804%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.21%)</title><rect x="16.5979%" y="149" width="1.2105%" height="15" fill="rgb(237,174,23)" fg:x="5471" fg:w="399"/><text x="16.8909%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,506 instructions, 19.74%)</title><rect x="0.8798%" y="165" width="19.7379%" height="15" fill="rgb(232,131,21)" fg:x="290" fg:w="6506"/><text x="1.1728%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (354 instructions, 1.07%)</title><rect x="20.6177%" y="165" width="1.0740%" height="15" fill="rgb(212,96,3)" fg:x="6796" fg:w="354"/><text x="20.9106%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="21.6916%" y="149" width="0.0152%" height="15" fill="rgb(207,213,15)" fg:x="7150" fg:w="5"/><text x="21.9846%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.12%)</title><rect x="21.6916%" y="165" width="0.1183%" height="15" fill="rgb(236,122,21)" fg:x="7150" fg:w="39"/><text x="21.9846%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="21.8100%" y="165" width="0.2488%" height="15" fill="rgb(239,195,30)" fg:x="7189" fg:w="82"/><text x="22.1029%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="22.0587%" y="149" width="0.0152%" height="15" fill="rgb(241,174,23)" fg:x="7271" fg:w="5"/><text x="22.3517%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="22.0739%" y="133" width="0.1608%" height="15" fill="rgb(209,165,52)" fg:x="7276" fg:w="53"/><text x="22.3669%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="22.2347%" y="133" width="0.2670%" height="15" fill="rgb(224,151,21)" fg:x="7329" fg:w="88"/><text x="22.5277%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="22.5017%" y="133" width="0.4915%" height="15" fill="rgb(232,112,44)" fg:x="7417" fg:w="162"/><text x="22.7946%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="22.0739%" y="149" width="1.6383%" height="15" fill="rgb(220,72,37)" fg:x="7276" fg:w="540"/><text x="22.3669%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 2.27%)</title><rect x="22.0587%" y="165" width="2.2723%" height="15" fill="rgb(210,131,44)" fg:x="7271" fg:w="749"/><text x="22.3517%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="24.3310%" y="165" width="0.2488%" height="15" fill="rgb(207,29,46)" fg:x="8020" fg:w="82"/><text x="24.6240%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="24.5798%" y="149" width="0.0152%" height="15" fill="rgb(215,17,32)" fg:x="8102" fg:w="5"/><text x="24.8728%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="24.5950%" y="133" width="0.1608%" height="15" fill="rgb(247,162,9)" fg:x="8107" fg:w="53"/><text x="24.8880%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="24.7558%" y="133" width="0.2670%" height="15" fill="rgb(223,102,1)" fg:x="8160" fg:w="88"/><text x="25.0487%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="25.0228%" y="133" width="0.4915%" height="15" fill="rgb(238,96,39)" fg:x="8248" fg:w="162"/><text x="25.3157%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="24.5950%" y="149" width="1.6383%" height="15" fill="rgb(244,24,45)" fg:x="8107" fg:w="540"/><text x="24.8880%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.21%)</title><rect x="26.2332%" y="149" width="0.2063%" height="15" fill="rgb(246,147,47)" fg:x="8647" fg:w="68"/><text x="26.5262%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="26.4395%" y="133" width="0.2457%" height="15" fill="rgb(208,147,12)" fg:x="8715" fg:w="81"/><text x="26.7325%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.33%)</title><rect x="26.4395%" y="149" width="0.3277%" height="15" fill="rgb(246,113,49)" fg:x="8715" fg:w="108"/><text x="26.7325%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 2.70%)</title><rect x="24.5798%" y="165" width="2.7001%" height="15" fill="rgb(242,90,53)" fg:x="8102" fg:w="890"/><text x="24.8728%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="27.2799%" y="117" width="0.1608%" height="15" fill="rgb(252,160,40)" fg:x="8992" fg:w="53"/><text x="27.5729%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.24%)</title><rect x="27.2799%" y="133" width="0.2366%" height="15" fill="rgb(237,182,38)" fg:x="8992" fg:w="78"/><text x="27.5729%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.89%)</title><rect x="27.2799%" y="149" width="0.8889%" height="15" fill="rgb(246,26,47)" fg:x="8992" fg:w="293"/><text x="27.5729%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1350 (15 instructions, 0.05%)</title><rect x="28.1688%" y="149" width="0.0455%" height="15" fill="rgb(240,203,51)" fg:x="9285" fg:w="15"/><text x="28.4618%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.2143%" y="149" width="0.0334%" height="15" fill="rgb(235,193,16)" fg:x="9300" fg:w="11"/><text x="28.5073%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.45%)</title><rect x="27.2799%" y="165" width="1.4502%" height="15" fill="rgb(227,91,44)" fg:x="8992" fg:w="478"/><text x="27.5729%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.14%)</title><rect x="28.7301%" y="165" width="0.1426%" height="15" fill="rgb(251,138,15)" fg:x="9470" fg:w="47"/><text x="29.0230%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="28.8726%" y="149" width="0.3732%" height="15" fill="rgb(211,155,7)" fg:x="9517" fg:w="123"/><text x="29.1656%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="29.3277%" y="149" width="0.3732%" height="15" fill="rgb(225,73,34)" fg:x="9667" fg:w="123"/><text x="29.6207%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.91%)</title><rect x="28.8726%" y="165" width="0.9101%" height="15" fill="rgb(208,119,49)" fg:x="9517" fg:w="300"/><text x="29.1656%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.08%)</title><rect x="29.7828%" y="149" width="0.0849%" height="15" fill="rgb(245,148,32)" fg:x="9817" fg:w="28"/><text x="30.0757%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2137 (15 instructions, 0.05%)</title><rect x="29.8677%" y="149" width="0.0455%" height="15" fill="rgb(217,198,11)" fg:x="9845" fg:w="15"/><text x="30.1607%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2137 (15 instructions, 0.05%)</title><rect x="29.9132%" y="149" width="0.0455%" height="15" fill="rgb(236,19,45)" fg:x="9860" fg:w="15"/><text x="30.2062%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.41%)</title><rect x="29.7828%" y="165" width="0.4096%" height="15" fill="rgb(219,57,53)" fg:x="9817" fg:w="135"/><text x="30.0757%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1923%" y="165" width="0.0334%" height="15" fill="rgb(237,43,33)" fg:x="9952" fg:w="11"/><text x="30.4853%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.2257%" y="165" width="0.0334%" height="15" fill="rgb(226,121,45)" fg:x="9963" fg:w="11"/><text x="30.5187%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.2591%" y="165" width="0.0334%" height="15" fill="rgb(220,60,35)" fg:x="9974" fg:w="11"/><text x="30.5521%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.24%)</title><rect x="30.2925%" y="165" width="1.2439%" height="15" fill="rgb(232,194,3)" fg:x="9985" fg:w="410"/><text x="30.5854%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="31.5363%" y="133" width="0.0364%" height="15" fill="rgb(222,193,31)" fg:x="10395" fg:w="12"/><text x="31.8293%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.51%)</title><rect x="31.5727%" y="133" width="0.5097%" height="15" fill="rgb(246,75,16)" fg:x="10407" fg:w="168"/><text x="31.8657%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="32.0824%" y="101" width="0.1911%" height="15" fill="rgb(205,54,52)" fg:x="10575" fg:w="63"/><text x="32.3754%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.63%)</title><rect x="32.0824%" y="117" width="0.6310%" height="15" fill="rgb(228,102,19)" fg:x="10575" fg:w="208"/><text x="32.3754%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.71%)</title><rect x="32.0824%" y="133" width="0.7129%" height="15" fill="rgb(249,5,51)" fg:x="10575" fg:w="235"/><text x="32.3754%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="32.7953%" y="133" width="0.0334%" height="15" fill="rgb(219,11,23)" fg:x="10810" fg:w="11"/><text x="33.0883%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (466 instructions, 1.41%)</title><rect x="31.5363%" y="149" width="1.4137%" height="15" fill="rgb(252,60,16)" fg:x="10395" fg:w="466"/><text x="31.8293%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (504 instructions, 1.53%)</title><rect x="31.5363%" y="165" width="1.5290%" height="15" fill="rgb(211,130,1)" fg:x="10395" fg:w="504"/><text x="31.8293%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="33.0653%" y="149" width="0.1669%" height="15" fill="rgb(217,36,31)" fg:x="10899" fg:w="55"/><text x="33.3583%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="33.2322%" y="149" width="0.1911%" height="15" fill="rgb(234,70,22)" fg:x="10954" fg:w="63"/><text x="33.5252%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.60%)</title><rect x="33.0653%" y="165" width="0.6037%" height="15" fill="rgb(231,105,12)" fg:x="10899" fg:w="199"/><text x="33.3583%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,283 instructions, 34.23%)</title><rect x="0.6310%" y="181" width="34.2303%" height="15" fill="rgb(253,35,3)" fg:x="208" fg:w="11283"/><text x="0.9240%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (20 instructions, 0.06%)</title><rect x="34.8614%" y="181" width="0.0607%" height="15" fill="rgb(240,126,49)" fg:x="11491" fg:w="20"/><text x="35.1543%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="34.9220%" y="181" width="0.6068%" height="15" fill="rgb(254,30,51)" fg:x="11511" fg:w="200"/><text x="35.2150%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="35.5288%" y="181" width="0.6068%" height="15" fill="rgb(212,73,51)" fg:x="11711" fg:w="200"/><text x="35.8218%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.1356%" y="181" width="0.6068%" height="15" fill="rgb(230,139,46)" fg:x="11911" fg:w="200"/><text x="36.4285%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.7423%" y="181" width="0.6068%" height="15" fill="rgb(253,107,50)" fg:x="12111" fg:w="200"/><text x="37.0353%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.3491%" y="181" width="0.6068%" height="15" fill="rgb(226,174,19)" fg:x="12311" fg:w="200"/><text x="37.6420%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.9558%" y="181" width="0.6068%" height="15" fill="rgb(254,20,10)" fg:x="12511" fg:w="200"/><text x="38.2488%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="38.5626%" y="181" width="0.6068%" height="15" fill="rgb(208,191,8)" fg:x="12711" fg:w="200"/><text x="38.8556%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.1693%" y="181" width="0.6068%" height="15" fill="rgb(222,42,18)" fg:x="12911" fg:w="200"/><text x="39.4623%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.7761%" y="181" width="0.6068%" height="15" fill="rgb(244,64,53)" fg:x="13111" fg:w="200"/><text x="40.0691%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.3829%" y="181" width="0.6068%" height="15" fill="rgb(205,198,9)" fg:x="13311" fg:w="200"/><text x="40.6758%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.9896%" y="181" width="0.6068%" height="15" fill="rgb(217,165,0)" fg:x="13511" fg:w="200"/><text x="41.2826%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="41.5964%" y="181" width="0.6068%" height="15" fill="rgb(251,92,47)" fg:x="13711" fg:w="200"/><text x="41.8894%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.2031%" y="181" width="0.6068%" height="15" fill="rgb(253,174,31)" fg:x="13911" fg:w="200"/><text x="42.4961%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.8099%" y="181" width="0.6068%" height="15" fill="rgb(206,102,45)" fg:x="14111" fg:w="200"/><text x="43.1029%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.4167%" y="181" width="0.6068%" height="15" fill="rgb(244,19,54)" fg:x="14311" fg:w="200"/><text x="43.7096%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.0234%" y="181" width="0.6068%" height="15" fill="rgb(247,74,48)" fg:x="14511" fg:w="200"/><text x="44.3164%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.6302%" y="181" width="0.6068%" height="15" fill="rgb(227,152,51)" fg:x="14711" fg:w="200"/><text x="44.9231%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.2369%" y="181" width="0.6068%" height="15" fill="rgb(213,72,42)" fg:x="14911" fg:w="200"/><text x="45.5299%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.8437%" y="181" width="0.6068%" height="15" fill="rgb(244,60,9)" fg:x="15111" fg:w="200"/><text x="46.1367%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.4505%" y="181" width="0.6068%" height="15" fill="rgb(246,165,44)" fg:x="15311" fg:w="200"/><text x="46.7434%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.0572%" y="181" width="0.6068%" height="15" fill="rgb(246,149,33)" fg:x="15511" fg:w="200"/><text x="47.3502%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.6640%" y="181" width="0.6068%" height="15" fill="rgb(250,148,17)" fg:x="15711" fg:w="200"/><text x="47.9569%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.2707%" y="181" width="0.6068%" height="15" fill="rgb(223,148,38)" fg:x="15911" fg:w="200"/><text x="48.5637%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.8775%" y="181" width="0.6068%" height="15" fill="rgb(226,94,5)" fg:x="16111" fg:w="200"/><text x="49.1705%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="49.4843%" y="181" width="0.6068%" height="15" fill="rgb(224,149,50)" fg:x="16311" fg:w="200"/><text x="49.7772%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.0910%" y="181" width="0.6068%" height="15" fill="rgb(223,77,39)" fg:x="16511" fg:w="200"/><text x="50.3840%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.6978%" y="181" width="0.6068%" height="15" fill="rgb(231,91,14)" fg:x="16711" fg:w="200"/><text x="50.9907%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.3045%" y="181" width="0.6068%" height="15" fill="rgb(214,119,21)" fg:x="16911" fg:w="200"/><text x="51.5975%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.9113%" y="181" width="0.6068%" height="15" fill="rgb(206,65,46)" fg:x="17111" fg:w="200"/><text x="52.2043%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="52.5181%" y="181" width="0.6068%" height="15" fill="rgb(236,25,6)" fg:x="17311" fg:w="200"/><text x="52.8110%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.1248%" y="181" width="0.6068%" height="15" fill="rgb(239,150,19)" fg:x="17511" fg:w="200"/><text x="53.4178%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.7316%" y="181" width="0.6068%" height="15" fill="rgb(230,93,41)" fg:x="17711" fg:w="200"/><text x="54.0245%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.3383%" y="181" width="0.6068%" height="15" fill="rgb(243,66,1)" fg:x="17911" fg:w="200"/><text x="54.6313%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.9451%" y="181" width="0.6068%" height="15" fill="rgb(238,89,38)" fg:x="18111" fg:w="200"/><text x="55.2381%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="55.5518%" y="181" width="0.6068%" height="15" fill="rgb(217,131,5)" fg:x="18311" fg:w="200"/><text x="55.8448%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.1586%" y="181" width="0.6068%" height="15" fill="rgb(252,79,5)" fg:x="18511" fg:w="200"/><text x="56.4516%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.7654%" y="181" width="0.6068%" height="15" fill="rgb(238,8,22)" fg:x="18711" fg:w="200"/><text x="57.0583%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.3721%" y="181" width="0.6068%" height="15" fill="rgb(231,135,40)" fg:x="18911" fg:w="200"/><text x="57.6651%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.9789%" y="181" width="0.6068%" height="15" fill="rgb(234,8,42)" fg:x="19111" fg:w="200"/><text x="58.2719%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="58.5856%" y="181" width="0.6068%" height="15" fill="rgb(205,183,30)" fg:x="19311" fg:w="200"/><text x="58.8786%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.1924%" y="181" width="0.6068%" height="15" fill="rgb(238,215,24)" fg:x="19511" fg:w="200"/><text x="59.4854%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.7992%" y="181" width="0.6068%" height="15" fill="rgb(245,32,20)" fg:x="19711" fg:w="200"/><text x="60.0921%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.4059%" y="181" width="0.6068%" height="15" fill="rgb(234,149,53)" fg:x="19911" fg:w="200"/><text x="60.6989%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.0127%" y="181" width="0.6068%" height="15" fill="rgb(254,98,12)" fg:x="20111" fg:w="200"/><text x="61.3057%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.6194%" y="181" width="0.6068%" height="15" fill="rgb(252,222,0)" fg:x="20311" fg:w="200"/><text x="61.9124%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.2262%" y="181" width="0.6068%" height="15" fill="rgb(238,74,43)" fg:x="20511" fg:w="200"/><text x="62.5192%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.8330%" y="181" width="0.6068%" height="15" fill="rgb(221,213,8)" fg:x="20711" fg:w="200"/><text x="63.1259%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="63.4397%" y="181" width="0.6068%" height="15" fill="rgb(244,158,34)" fg:x="20911" fg:w="200"/><text x="63.7327%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.0465%" y="181" width="0.6068%" height="15" fill="rgb(251,136,28)" fg:x="21111" fg:w="200"/><text x="64.3394%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.6532%" y="181" width="0.6068%" height="15" fill="rgb(225,70,13)" fg:x="21311" fg:w="200"/><text x="64.9462%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="65.2600%" y="149" width="0.0152%" height="15" fill="rgb(246,147,29)" fg:x="21511" fg:w="5"/><text x="65.5530%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="65.2752%" y="117" width="0.1669%" height="15" fill="rgb(238,20,50)" fg:x="21516" fg:w="55"/><text x="65.5681%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (137 instructions, 0.42%)</title><rect x="65.2752%" y="133" width="0.4156%" height="15" fill="rgb(227,54,34)" fg:x="21516" fg:w="137"/><text x="65.5681%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.50%)</title><rect x="65.2752%" y="149" width="0.4975%" height="15" fill="rgb(249,57,20)" fg:x="21516" fg:w="164"/><text x="65.5681%" y="159.50"></text></g><g><title>memset (136 instructions, 0.41%)</title><rect x="65.7727%" y="149" width="0.4126%" height="15" fill="rgb(240,14,9)" fg:x="21680" fg:w="136"/><text x="66.0657%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.41%)</title><rect x="65.2600%" y="165" width="1.4077%" height="15" fill="rgb(211,145,54)" fg:x="21511" fg:w="464"/><text x="65.5530%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.10%)</title><rect x="66.6677%" y="149" width="0.0971%" height="15" fill="rgb(247,73,45)" fg:x="21975" fg:w="32"/><text x="66.9606%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="66.7648%" y="101" width="0.2488%" height="15" fill="rgb(244,143,28)" fg:x="22007" fg:w="82"/><text x="67.0577%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="66.7648%" y="117" width="0.3519%" height="15" fill="rgb(213,96,7)" fg:x="22007" fg:w="116"/><text x="67.0577%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (181 instructions, 0.55%)</title><rect x="66.7648%" y="133" width="0.5491%" height="15" fill="rgb(211,178,22)" fg:x="22007" fg:w="181"/><text x="67.0577%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.3139%" y="133" width="0.0334%" height="15" fill="rgb(235,118,54)" fg:x="22188" fg:w="11"/><text x="67.6068%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.3472%" y="133" width="0.0334%" height="15" fill="rgb(220,83,27)" fg:x="22199" fg:w="11"/><text x="67.6402%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (365 instructions, 1.11%)</title><rect x="66.7648%" y="149" width="1.1073%" height="15" fill="rgb(225,178,13)" fg:x="22007" fg:w="365"/><text x="67.0577%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.09%)</title><rect x="67.8721%" y="149" width="0.0910%" height="15" fill="rgb(229,121,38)" fg:x="22372" fg:w="30"/><text x="68.1651%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="67.9631%" y="149" width="0.0152%" height="15" fill="rgb(212,158,37)" fg:x="22402" fg:w="5"/><text x="68.2561%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (500 instructions, 1.52%)</title><rect x="66.6677%" y="165" width="1.5169%" height="15" fill="rgb(249,156,1)" fg:x="21975" fg:w="500"/><text x="66.9606%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="68.1846%" y="165" width="0.0152%" height="15" fill="rgb(229,124,34)" fg:x="22475" fg:w="5"/><text x="68.4775%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="68.1997%" y="165" width="0.1699%" height="15" fill="rgb(247,227,25)" fg:x="22480" fg:w="56"/><text x="68.4927%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,099 instructions, 3.33%)</title><rect x="65.2600%" y="181" width="3.3341%" height="15" fill="rgb(230,211,11)" fg:x="21511" fg:w="1099"/><text x="65.5530%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_get_5_::{{closure}} (32,437 instructions, 98.41%)</title><rect x="0.6310%" y="197" width="98.4073%" height="15" fill="rgb(250,191,5)" fg:x="208" fg:w="32437"/><text x="0.9240%" y="207.50">imrc_hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="99.0383%" y="197" width="0.0364%" height="15" fill="rgb(213,58,9)" fg:x="32645" fg:w="12"/><text x="99.3313%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="99.0747%" y="197" width="0.2457%" height="15" fill="rgb(230,117,2)" fg:x="32657" fg:w="81"/><text x="99.3677%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.38%)</title><rect x="99.3204%" y="197" width="0.3823%" height="15" fill="rgb(223,161,18)" fg:x="32738" fg:w="126"/><text x="99.6134%" y="207.50"></text></g><g><title>all (32,962 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,172,23)" fg:x="0" fg:w="32962"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (32,962 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,33,13)" fg:x="0" fg:w="32962"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>