<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="32763"><g><title>ic_cdk::setup (19 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0580%" height="15" fill="rgb(254,66,3)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.34%)</title><rect x="0.0580%" y="197" width="0.3449%" height="15" fill="rgb(243,170,44)" fg:x="19" fg:w="113"/><text x="0.3510%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.22%)</title><rect x="0.4029%" y="197" width="0.2167%" height="15" fill="rgb(250,41,24)" fg:x="132" fg:w="71"/><text x="0.6959%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="0.6196%" y="165" width="0.2503%" height="15" fill="rgb(210,0,40)" fg:x="203" fg:w="82"/><text x="0.9126%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="0.8699%" y="149" width="0.2167%" height="15" fill="rgb(238,202,31)" fg:x="285" fg:w="71"/><text x="1.1629%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.0866%" y="133" width="0.0122%" height="15" fill="rgb(236,26,12)" fg:x="356" fg:w="4"/><text x="1.3796%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.23%)</title><rect x="1.0866%" y="149" width="1.2270%" height="15" fill="rgb(213,173,5)" fg:x="356" fg:w="402"/><text x="1.3796%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.25%)</title><rect x="2.3136%" y="149" width="0.2533%" height="15" fill="rgb(223,199,41)" fg:x="758" fg:w="83"/><text x="2.6066%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.5669%" y="149" width="0.1648%" height="15" fill="rgb(229,24,52)" fg:x="841" fg:w="54"/><text x="2.8599%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.7317%" y="149" width="0.1648%" height="15" fill="rgb(212,212,48)" fg:x="895" fg:w="54"/><text x="3.0247%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.8966%" y="149" width="0.1648%" height="15" fill="rgb(212,103,20)" fg:x="949" fg:w="54"/><text x="3.1895%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="3.0614%" y="149" width="0.1648%" height="15" fill="rgb(227,122,12)" fg:x="1003" fg:w="54"/><text x="3.3543%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="3.2262%" y="149" width="0.2167%" height="15" fill="rgb(248,198,39)" fg:x="1057" fg:w="71"/><text x="3.5192%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="3.4429%" y="149" width="0.1984%" height="15" fill="rgb(230,114,4)" fg:x="1128" fg:w="65"/><text x="3.7359%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.6413%" y="133" width="0.0122%" height="15" fill="rgb(239,188,52)" fg:x="1193" fg:w="4"/><text x="3.9343%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.23%)</title><rect x="3.6413%" y="149" width="1.2270%" height="15" fill="rgb(217,91,5)" fg:x="1193" fg:w="402"/><text x="3.9343%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="4.8683%" y="149" width="0.0488%" height="15" fill="rgb(224,52,6)" fg:x="1595" fg:w="16"/><text x="5.1613%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="4.9171%" y="133" width="0.2503%" height="15" fill="rgb(215,151,45)" fg:x="1611" fg:w="82"/><text x="5.2101%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="5.1674%" y="101" width="0.1831%" height="15" fill="rgb(213,73,10)" fg:x="1693" fg:w="60"/><text x="5.4604%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="5.1674%" y="117" width="0.2594%" height="15" fill="rgb(247,26,42)" fg:x="1693" fg:w="85"/><text x="5.4604%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="5.4269%" y="69" width="0.0275%" height="15" fill="rgb(221,198,30)" fg:x="1778" fg:w="9"/><text x="5.7198%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="5.4543%" y="53" width="0.0916%" height="15" fill="rgb(241,201,18)" fg:x="1787" fg:w="30"/><text x="5.7473%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="5.4543%" y="69" width="0.1679%" height="15" fill="rgb(207,8,39)" fg:x="1787" fg:w="55"/><text x="5.7473%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.35%)</title><rect x="5.4269%" y="85" width="0.3480%" height="15" fill="rgb(220,17,53)" fg:x="1778" fg:w="114"/><text x="5.7198%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.51%)</title><rect x="5.4269%" y="101" width="0.5097%" height="15" fill="rgb(207,38,24)" fg:x="1778" fg:w="167"/><text x="5.7198%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.52%)</title><rect x="5.4269%" y="117" width="0.5250%" height="15" fill="rgb(228,35,3)" fg:x="1778" fg:w="172"/><text x="5.7198%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 1.12%)</title><rect x="5.1674%" y="133" width="1.1232%" height="15" fill="rgb(226,75,20)" fg:x="1693" fg:w="368"/><text x="5.4604%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (571 instructions, 1.74%)</title><rect x="4.9171%" y="149" width="1.7428%" height="15" fill="rgb(251,207,27)" fg:x="1611" fg:w="571"/><text x="5.2101%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.25%)</title><rect x="6.6600%" y="149" width="0.2533%" height="15" fill="rgb(216,212,6)" fg:x="2182" fg:w="83"/><text x="6.9529%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="6.9133%" y="149" width="0.1709%" height="15" fill="rgb(229,198,30)" fg:x="2265" fg:w="56"/><text x="7.2063%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.20%)</title><rect x="7.0842%" y="149" width="0.1984%" height="15" fill="rgb(239,25,20)" fg:x="2321" fg:w="65"/><text x="7.3772%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="7.2826%" y="149" width="0.1984%" height="15" fill="rgb(247,43,29)" fg:x="2386" fg:w="65"/><text x="7.5756%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.4810%" y="117" width="0.0122%" height="15" fill="rgb(232,120,27)" fg:x="2451" fg:w="4"/><text x="7.7740%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.23%)</title><rect x="7.4810%" y="133" width="1.2270%" height="15" fill="rgb(214,183,36)" fg:x="2451" fg:w="402"/><text x="7.7740%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="8.7080%" y="133" width="0.0488%" height="15" fill="rgb(219,186,53)" fg:x="2853" fg:w="16"/><text x="9.0010%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="8.7568%" y="117" width="0.2503%" height="15" fill="rgb(212,190,23)" fg:x="2869" fg:w="82"/><text x="9.0498%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="9.0071%" y="85" width="0.1831%" height="15" fill="rgb(229,63,38)" fg:x="2951" fg:w="60"/><text x="9.3001%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="9.0071%" y="101" width="0.2594%" height="15" fill="rgb(238,51,16)" fg:x="2951" fg:w="85"/><text x="9.3001%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="9.2666%" y="53" width="0.0275%" height="15" fill="rgb(228,183,38)" fg:x="3036" fg:w="9"/><text x="9.5595%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="9.2940%" y="37" width="0.0916%" height="15" fill="rgb(209,221,14)" fg:x="3045" fg:w="30"/><text x="9.5870%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="9.2940%" y="53" width="0.1679%" height="15" fill="rgb(232,184,53)" fg:x="3045" fg:w="55"/><text x="9.5870%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.35%)</title><rect x="9.2666%" y="69" width="0.3480%" height="15" fill="rgb(235,32,48)" fg:x="3036" fg:w="114"/><text x="9.5595%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.51%)</title><rect x="9.2666%" y="85" width="0.5097%" height="15" fill="rgb(241,150,44)" fg:x="3036" fg:w="167"/><text x="9.5595%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.52%)</title><rect x="9.2666%" y="101" width="0.5250%" height="15" fill="rgb(216,97,39)" fg:x="3036" fg:w="172"/><text x="9.5595%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 1.12%)</title><rect x="9.0071%" y="117" width="1.1232%" height="15" fill="rgb(216,110,12)" fg:x="2951" fg:w="368"/><text x="9.3001%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (571 instructions, 1.74%)</title><rect x="8.7568%" y="133" width="1.7428%" height="15" fill="rgb(220,202,7)" fg:x="2869" fg:w="571"/><text x="9.0498%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.25%)</title><rect x="10.4996%" y="133" width="0.2533%" height="15" fill="rgb(219,56,37)" fg:x="3440" fg:w="83"/><text x="10.7926%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="10.7530%" y="133" width="0.1709%" height="15" fill="rgb(218,41,34)" fg:x="3523" fg:w="56"/><text x="11.0460%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="10.9239%" y="117" width="0.2167%" height="15" fill="rgb(216,206,5)" fg:x="3579" fg:w="71"/><text x="11.2169%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.27%)</title><rect x="11.1406%" y="117" width="0.2747%" height="15" fill="rgb(216,154,20)" fg:x="3650" fg:w="90"/><text x="11.4336%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.20%)</title><rect x="11.4153%" y="117" width="0.1984%" height="15" fill="rgb(254,171,3)" fg:x="3740" fg:w="65"/><text x="11.7083%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.87%)</title><rect x="10.9239%" y="133" width="0.8699%" height="15" fill="rgb(239,81,4)" fg:x="3579" fg:w="285"/><text x="11.2169%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="11.7938%" y="133" width="0.2503%" height="15" fill="rgb(223,4,32)" fg:x="3864" fg:w="82"/><text x="12.0868%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,698 instructions, 5.18%)</title><rect x="7.4810%" y="149" width="5.1827%" height="15" fill="rgb(215,113,18)" fg:x="2451" fg:w="1698"/><text x="7.7740%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.20%)</title><rect x="12.6637%" y="149" width="0.1984%" height="15" fill="rgb(251,80,20)" fg:x="4149" fg:w="65"/><text x="12.9566%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.8621%" y="149" width="0.0397%" height="15" fill="rgb(211,59,44)" fg:x="4214" fg:w="13"/><text x="13.1550%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.9017%" y="149" width="0.0397%" height="15" fill="rgb(212,35,46)" fg:x="4227" fg:w="13"/><text x="13.1947%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="12.9414%" y="149" width="0.0214%" height="15" fill="rgb(236,154,11)" fg:x="4240" fg:w="7"/><text x="13.2344%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="12.9628%" y="149" width="0.0458%" height="15" fill="rgb(244,8,36)" fg:x="4247" fg:w="15"/><text x="13.2558%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.0086%" y="133" width="0.2503%" height="15" fill="rgb(221,121,53)" fg:x="4262" fg:w="82"/><text x="13.3015%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.50%)</title><rect x="13.0086%" y="149" width="0.5036%" height="15" fill="rgb(217,148,7)" fg:x="4262" fg:w="165"/><text x="13.3015%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.5122%" y="101" width="0.2503%" height="15" fill="rgb(220,15,35)" fg:x="4427" fg:w="82"/><text x="13.8052%" y="111.50"></text></g><g><title>__rust_alloc (91 instructions, 0.28%)</title><rect x="13.5122%" y="117" width="0.2778%" height="15" fill="rgb(216,213,4)" fg:x="4427" fg:w="91"/><text x="13.8052%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.38%)</title><rect x="13.5122%" y="133" width="0.3846%" height="15" fill="rgb(243,135,45)" fg:x="4427" fg:w="126"/><text x="13.8052%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (196 instructions, 0.60%)</title><rect x="13.5122%" y="149" width="0.5982%" height="15" fill="rgb(212,110,22)" fg:x="4427" fg:w="196"/><text x="13.8052%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.1104%" y="149" width="0.2503%" height="15" fill="rgb(210,119,38)" fg:x="4623" fg:w="82"/><text x="14.4034%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="14.3607%" y="149" width="0.2472%" height="15" fill="rgb(226,206,15)" fg:x="4705" fg:w="81"/><text x="14.6537%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.6079%" y="149" width="0.2503%" height="15" fill="rgb(246,222,38)" fg:x="4786" fg:w="82"/><text x="14.9009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.8582%" y="149" width="0.2503%" height="15" fill="rgb(212,175,15)" fg:x="4868" fg:w="82"/><text x="15.1512%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="15.1146%" y="149" width="0.2472%" height="15" fill="rgb(223,60,29)" fg:x="4952" fg:w="81"/><text x="15.4076%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.22%)</title><rect x="15.3618%" y="149" width="1.2178%" height="15" fill="rgb(228,134,53)" fg:x="5033" fg:w="399"/><text x="15.6548%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.22%)</title><rect x="16.5797%" y="149" width="1.2178%" height="15" fill="rgb(248,52,38)" fg:x="5432" fg:w="399"/><text x="16.8726%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,506 instructions, 19.86%)</title><rect x="0.8699%" y="165" width="19.8578%" height="15" fill="rgb(235,2,37)" fg:x="285" fg:w="6506"/><text x="1.1629%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (354 instructions, 1.08%)</title><rect x="20.7277%" y="165" width="1.0805%" height="15" fill="rgb(231,39,26)" fg:x="6791" fg:w="354"/><text x="21.0206%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="21.8081%" y="149" width="0.0366%" height="15" fill="rgb(230,53,45)" fg:x="7145" fg:w="12"/><text x="22.1011%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.15%)</title><rect x="21.8081%" y="165" width="0.1526%" height="15" fill="rgb(251,78,30)" fg:x="7145" fg:w="50"/><text x="22.1011%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="21.9607%" y="165" width="0.2503%" height="15" fill="rgb(251,109,10)" fg:x="7195" fg:w="82"/><text x="22.2537%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="22.2110%" y="149" width="0.0366%" height="15" fill="rgb(236,49,41)" fg:x="7277" fg:w="12"/><text x="22.5040%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="22.2477%" y="133" width="0.1618%" height="15" fill="rgb(223,43,38)" fg:x="7289" fg:w="53"/><text x="22.5406%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="22.4094%" y="133" width="0.2686%" height="15" fill="rgb(225,53,41)" fg:x="7342" fg:w="88"/><text x="22.7024%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="22.6780%" y="133" width="0.4945%" height="15" fill="rgb(254,27,1)" fg:x="7430" fg:w="162"/><text x="22.9710%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.65%)</title><rect x="22.2477%" y="149" width="1.6482%" height="15" fill="rgb(225,205,35)" fg:x="7289" fg:w="540"/><text x="22.5406%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 2.32%)</title><rect x="22.2110%" y="165" width="2.3197%" height="15" fill="rgb(214,109,28)" fg:x="7277" fg:w="760"/><text x="22.5040%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="24.5307%" y="165" width="0.2503%" height="15" fill="rgb(241,149,41)" fg:x="8037" fg:w="82"/><text x="24.8237%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="24.7810%" y="149" width="0.0366%" height="15" fill="rgb(233,128,44)" fg:x="8119" fg:w="12"/><text x="25.0740%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="24.8176%" y="133" width="0.1618%" height="15" fill="rgb(254,132,37)" fg:x="8131" fg:w="53"/><text x="25.1106%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="24.9794%" y="133" width="0.2686%" height="15" fill="rgb(240,57,49)" fg:x="8184" fg:w="88"/><text x="25.2724%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="25.2480%" y="133" width="0.4945%" height="15" fill="rgb(240,173,15)" fg:x="8272" fg:w="162"/><text x="25.5410%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.65%)</title><rect x="24.8176%" y="149" width="1.6482%" height="15" fill="rgb(244,24,0)" fg:x="8131" fg:w="540"/><text x="25.1106%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.21%)</title><rect x="26.4658%" y="149" width="0.2076%" height="15" fill="rgb(246,220,0)" fg:x="8671" fg:w="68"/><text x="26.7588%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="26.6734%" y="133" width="0.2472%" height="15" fill="rgb(240,158,27)" fg:x="8739" fg:w="81"/><text x="26.9664%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.33%)</title><rect x="26.6734%" y="149" width="0.3296%" height="15" fill="rgb(240,167,37)" fg:x="8739" fg:w="108"/><text x="26.9664%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 2.73%)</title><rect x="24.7810%" y="165" width="2.7317%" height="15" fill="rgb(232,182,26)" fg:x="8119" fg:w="895"/><text x="25.0740%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="27.5127%" y="117" width="0.1618%" height="15" fill="rgb(210,133,14)" fg:x="9014" fg:w="53"/><text x="27.8057%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.24%)</title><rect x="27.5127%" y="133" width="0.2411%" height="15" fill="rgb(205,172,39)" fg:x="9014" fg:w="79"/><text x="27.8057%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.89%)</title><rect x="27.5127%" y="149" width="0.8912%" height="15" fill="rgb(239,161,50)" fg:x="9014" fg:w="292"/><text x="27.8057%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.896 (15 instructions, 0.05%)</title><rect x="28.4040%" y="149" width="0.0458%" height="15" fill="rgb(214,161,12)" fg:x="9306" fg:w="15"/><text x="28.6970%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.4498%" y="149" width="0.0336%" height="15" fill="rgb(216,216,39)" fg:x="9321" fg:w="11"/><text x="28.7427%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 1.52%)</title><rect x="27.5127%" y="165" width="1.5200%" height="15" fill="rgb(234,173,43)" fg:x="9014" fg:w="498"/><text x="27.8057%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.14%)</title><rect x="29.0328%" y="165" width="0.1374%" height="15" fill="rgb(219,137,33)" fg:x="9512" fg:w="45"/><text x="29.3257%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.38%)</title><rect x="29.1701%" y="149" width="0.3754%" height="15" fill="rgb(250,166,35)" fg:x="9557" fg:w="123"/><text x="29.4631%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.38%)</title><rect x="29.6279%" y="149" width="0.3754%" height="15" fill="rgb(244,210,28)" fg:x="9707" fg:w="123"/><text x="29.9209%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.92%)</title><rect x="29.1701%" y="165" width="0.9157%" height="15" fill="rgb(210,134,6)" fg:x="9557" fg:w="300"/><text x="29.4631%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.09%)</title><rect x="30.0858%" y="149" width="0.0855%" height="15" fill="rgb(229,215,13)" fg:x="9857" fg:w="28"/><text x="30.3787%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (15 instructions, 0.05%)</title><rect x="30.1712%" y="149" width="0.0458%" height="15" fill="rgb(253,44,45)" fg:x="9885" fg:w="15"/><text x="30.4642%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (15 instructions, 0.05%)</title><rect x="30.2170%" y="149" width="0.0458%" height="15" fill="rgb(219,188,15)" fg:x="9900" fg:w="15"/><text x="30.5100%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.41%)</title><rect x="30.0858%" y="165" width="0.4121%" height="15" fill="rgb(205,34,40)" fg:x="9857" fg:w="135"/><text x="30.3787%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.4978%" y="165" width="0.0336%" height="15" fill="rgb(240,126,23)" fg:x="9992" fg:w="11"/><text x="30.7908%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.5314%" y="165" width="0.0336%" height="15" fill="rgb(253,198,30)" fg:x="10003" fg:w="11"/><text x="30.8244%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.5650%" y="165" width="0.0336%" height="15" fill="rgb(218,105,4)" fg:x="10014" fg:w="11"/><text x="30.8579%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.25%)</title><rect x="30.5985%" y="165" width="1.2514%" height="15" fill="rgb(242,12,13)" fg:x="10025" fg:w="410"/><text x="30.8915%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.05%)</title><rect x="31.8500%" y="133" width="0.0458%" height="15" fill="rgb(238,229,10)" fg:x="10435" fg:w="15"/><text x="32.1429%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.51%)</title><rect x="31.8957%" y="133" width="0.5128%" height="15" fill="rgb(221,56,0)" fg:x="10450" fg:w="168"/><text x="32.1887%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="32.4085%" y="101" width="0.1923%" height="15" fill="rgb(243,222,48)" fg:x="10618" fg:w="63"/><text x="32.7015%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.63%)</title><rect x="32.4085%" y="117" width="0.6349%" height="15" fill="rgb(221,136,4)" fg:x="10618" fg:w="208"/><text x="32.7015%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.72%)</title><rect x="32.4085%" y="133" width="0.7173%" height="15" fill="rgb(246,127,45)" fg:x="10618" fg:w="235"/><text x="32.7015%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="33.1258%" y="133" width="0.0336%" height="15" fill="rgb(214,216,4)" fg:x="10853" fg:w="11"/><text x="33.4188%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 1.43%)</title><rect x="31.8500%" y="149" width="1.4315%" height="15" fill="rgb(236,46,34)" fg:x="10435" fg:w="469"/><text x="32.1429%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (506 instructions, 1.54%)</title><rect x="31.8500%" y="165" width="1.5444%" height="15" fill="rgb(235,192,51)" fg:x="10435" fg:w="506"/><text x="32.1429%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="33.3944%" y="149" width="0.1679%" height="15" fill="rgb(242,59,49)" fg:x="10941" fg:w="55"/><text x="33.6873%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="33.5623%" y="149" width="0.1923%" height="15" fill="rgb(212,30,2)" fg:x="10996" fg:w="63"/><text x="33.8552%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.61%)</title><rect x="33.3944%" y="165" width="0.6074%" height="15" fill="rgb(234,64,38)" fg:x="10941" fg:w="199"/><text x="33.6873%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,319 instructions, 34.55%)</title><rect x="0.6196%" y="181" width="34.5481%" height="15" fill="rgb(240,179,50)" fg:x="203" fg:w="11319"/><text x="0.9126%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.06%)</title><rect x="35.1677%" y="181" width="0.0610%" height="15" fill="rgb(238,55,17)" fg:x="11522" fg:w="20"/><text x="35.4607%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="35.2288%" y="181" width="0.5952%" height="15" fill="rgb(207,142,28)" fg:x="11542" fg:w="195"/><text x="35.5217%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="35.8239%" y="181" width="0.5952%" height="15" fill="rgb(209,74,2)" fg:x="11737" fg:w="195"/><text x="36.1169%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="36.4191%" y="181" width="0.5952%" height="15" fill="rgb(230,18,0)" fg:x="11932" fg:w="195"/><text x="36.7121%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="37.0143%" y="181" width="0.5952%" height="15" fill="rgb(252,164,24)" fg:x="12127" fg:w="195"/><text x="37.3073%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="37.6095%" y="181" width="0.5952%" height="15" fill="rgb(236,44,53)" fg:x="12322" fg:w="195"/><text x="37.9025%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="38.2047%" y="181" width="0.5952%" height="15" fill="rgb(236,105,19)" fg:x="12517" fg:w="195"/><text x="38.4977%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="38.7999%" y="181" width="0.5952%" height="15" fill="rgb(248,52,14)" fg:x="12712" fg:w="195"/><text x="39.0928%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="39.3950%" y="181" width="0.5952%" height="15" fill="rgb(246,166,38)" fg:x="12907" fg:w="195"/><text x="39.6880%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="39.9902%" y="181" width="0.5952%" height="15" fill="rgb(251,210,27)" fg:x="13102" fg:w="195"/><text x="40.2832%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="40.5854%" y="181" width="0.5952%" height="15" fill="rgb(220,2,28)" fg:x="13297" fg:w="195"/><text x="40.8784%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="41.1806%" y="181" width="0.5952%" height="15" fill="rgb(247,170,22)" fg:x="13492" fg:w="195"/><text x="41.4736%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="41.7758%" y="181" width="0.5952%" height="15" fill="rgb(250,169,0)" fg:x="13687" fg:w="195"/><text x="42.0688%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="42.3710%" y="181" width="0.5952%" height="15" fill="rgb(210,70,45)" fg:x="13882" fg:w="195"/><text x="42.6639%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="42.9662%" y="181" width="0.5952%" height="15" fill="rgb(217,47,54)" fg:x="14077" fg:w="195"/><text x="43.2591%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="43.5613%" y="181" width="0.5952%" height="15" fill="rgb(215,188,26)" fg:x="14272" fg:w="195"/><text x="43.8543%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="44.1565%" y="181" width="0.5952%" height="15" fill="rgb(233,74,1)" fg:x="14467" fg:w="195"/><text x="44.4495%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="44.7517%" y="181" width="0.5952%" height="15" fill="rgb(222,77,5)" fg:x="14662" fg:w="195"/><text x="45.0447%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="45.3469%" y="181" width="0.5952%" height="15" fill="rgb(240,59,41)" fg:x="14857" fg:w="195"/><text x="45.6399%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="45.9421%" y="181" width="0.5952%" height="15" fill="rgb(230,41,16)" fg:x="15052" fg:w="195"/><text x="46.2350%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="46.5373%" y="181" width="0.5952%" height="15" fill="rgb(227,188,13)" fg:x="15247" fg:w="195"/><text x="46.8302%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="47.1324%" y="181" width="0.5952%" height="15" fill="rgb(239,221,8)" fg:x="15442" fg:w="195"/><text x="47.4254%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="47.7276%" y="181" width="0.5952%" height="15" fill="rgb(252,204,39)" fg:x="15637" fg:w="195"/><text x="48.0206%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="48.3228%" y="181" width="0.5952%" height="15" fill="rgb(223,111,38)" fg:x="15832" fg:w="195"/><text x="48.6158%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="48.9180%" y="181" width="0.5952%" height="15" fill="rgb(251,148,6)" fg:x="16027" fg:w="195"/><text x="49.2110%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="49.5132%" y="181" width="0.5952%" height="15" fill="rgb(231,115,50)" fg:x="16222" fg:w="195"/><text x="49.8061%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="50.1084%" y="181" width="0.5952%" height="15" fill="rgb(245,224,15)" fg:x="16417" fg:w="195"/><text x="50.4013%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="50.7035%" y="181" width="0.5952%" height="15" fill="rgb(214,28,20)" fg:x="16612" fg:w="195"/><text x="50.9965%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="51.2987%" y="181" width="0.5952%" height="15" fill="rgb(241,220,14)" fg:x="16807" fg:w="195"/><text x="51.5917%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="51.8939%" y="181" width="0.5952%" height="15" fill="rgb(243,222,19)" fg:x="17002" fg:w="195"/><text x="52.1869%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="52.4891%" y="181" width="0.5952%" height="15" fill="rgb(227,11,26)" fg:x="17197" fg:w="195"/><text x="52.7821%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="53.0843%" y="181" width="0.5952%" height="15" fill="rgb(250,167,40)" fg:x="17392" fg:w="195"/><text x="53.3772%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="53.6795%" y="181" width="0.5952%" height="15" fill="rgb(216,149,51)" fg:x="17587" fg:w="195"/><text x="53.9724%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="54.2746%" y="181" width="0.5952%" height="15" fill="rgb(229,56,37)" fg:x="17782" fg:w="195"/><text x="54.5676%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="54.8698%" y="181" width="0.5952%" height="15" fill="rgb(231,135,5)" fg:x="17977" fg:w="195"/><text x="55.1628%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="55.4650%" y="181" width="0.5952%" height="15" fill="rgb(227,187,3)" fg:x="18172" fg:w="195"/><text x="55.7580%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="56.0602%" y="181" width="0.5952%" height="15" fill="rgb(252,86,15)" fg:x="18367" fg:w="195"/><text x="56.3532%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="56.6554%" y="181" width="0.5952%" height="15" fill="rgb(233,70,0)" fg:x="18562" fg:w="195"/><text x="56.9483%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="57.2506%" y="181" width="0.5952%" height="15" fill="rgb(212,225,20)" fg:x="18757" fg:w="195"/><text x="57.5435%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="57.8457%" y="181" width="0.5952%" height="15" fill="rgb(250,166,29)" fg:x="18952" fg:w="195"/><text x="58.1387%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="58.4409%" y="181" width="0.5952%" height="15" fill="rgb(241,161,13)" fg:x="19147" fg:w="195"/><text x="58.7339%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="59.0361%" y="181" width="0.5952%" height="15" fill="rgb(232,110,34)" fg:x="19342" fg:w="195"/><text x="59.3291%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="59.6313%" y="181" width="0.5952%" height="15" fill="rgb(247,67,36)" fg:x="19537" fg:w="195"/><text x="59.9243%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="60.2265%" y="181" width="0.5952%" height="15" fill="rgb(249,6,34)" fg:x="19732" fg:w="195"/><text x="60.5194%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="60.8217%" y="181" width="0.5952%" height="15" fill="rgb(254,189,37)" fg:x="19927" fg:w="195"/><text x="61.1146%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="61.4168%" y="181" width="0.5952%" height="15" fill="rgb(235,156,8)" fg:x="20122" fg:w="195"/><text x="61.7098%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="62.0120%" y="181" width="0.5952%" height="15" fill="rgb(213,5,47)" fg:x="20317" fg:w="195"/><text x="62.3050%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="62.6072%" y="181" width="0.5952%" height="15" fill="rgb(251,58,39)" fg:x="20512" fg:w="195"/><text x="62.9002%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="63.2024%" y="181" width="0.5952%" height="15" fill="rgb(214,50,42)" fg:x="20707" fg:w="195"/><text x="63.4954%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="63.7976%" y="181" width="0.5952%" height="15" fill="rgb(210,40,29)" fg:x="20902" fg:w="195"/><text x="64.0905%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (195 instructions, 0.60%)</title><rect x="64.3928%" y="181" width="0.5952%" height="15" fill="rgb(238,50,46)" fg:x="21097" fg:w="195"/><text x="64.6857%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="64.9879%" y="149" width="0.0366%" height="15" fill="rgb(253,210,22)" fg:x="21292" fg:w="12"/><text x="65.2809%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="65.0246%" y="117" width="0.1679%" height="15" fill="rgb(237,19,6)" fg:x="21304" fg:w="55"/><text x="65.3175%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (137 instructions, 0.42%)</title><rect x="65.0246%" y="133" width="0.4182%" height="15" fill="rgb(206,217,26)" fg:x="21304" fg:w="137"/><text x="65.3175%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.50%)</title><rect x="65.0246%" y="149" width="0.5006%" height="15" fill="rgb(222,125,33)" fg:x="21304" fg:w="164"/><text x="65.3175%" y="159.50"></text></g><g><title>memset (136 instructions, 0.42%)</title><rect x="65.5251%" y="149" width="0.4151%" height="15" fill="rgb(240,219,14)" fg:x="21468" fg:w="136"/><text x="65.8181%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (470 instructions, 1.43%)</title><rect x="64.9879%" y="165" width="1.4345%" height="15" fill="rgb(235,129,42)" fg:x="21292" fg:w="470"/><text x="65.2809%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.10%)</title><rect x="66.4225%" y="149" width="0.0977%" height="15" fill="rgb(241,161,33)" fg:x="21762" fg:w="32"/><text x="66.7155%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="66.5202%" y="85" width="0.2503%" height="15" fill="rgb(253,84,27)" fg:x="21794" fg:w="82"/><text x="66.8131%" y="95.50"></text></g><g><title>__rust_alloc (91 instructions, 0.28%)</title><rect x="66.5202%" y="101" width="0.2778%" height="15" fill="rgb(210,174,46)" fg:x="21794" fg:w="91"/><text x="66.8131%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.38%)</title><rect x="66.5202%" y="117" width="0.3846%" height="15" fill="rgb(224,45,24)" fg:x="21794" fg:w="126"/><text x="66.8131%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (193 instructions, 0.59%)</title><rect x="66.5202%" y="133" width="0.5891%" height="15" fill="rgb(251,163,0)" fg:x="21794" fg:w="193"/><text x="66.8131%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.1092%" y="133" width="0.0336%" height="15" fill="rgb(221,158,44)" fg:x="21987" fg:w="11"/><text x="67.4022%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.1428%" y="133" width="0.0336%" height="15" fill="rgb(229,199,42)" fg:x="21998" fg:w="11"/><text x="67.4358%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (377 instructions, 1.15%)</title><rect x="66.5202%" y="149" width="1.1507%" height="15" fill="rgb(236,80,34)" fg:x="21794" fg:w="377"/><text x="66.8131%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.09%)</title><rect x="67.6708%" y="149" width="0.0916%" height="15" fill="rgb(235,134,3)" fg:x="22171" fg:w="30"/><text x="67.9638%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="67.7624%" y="149" width="0.0153%" height="15" fill="rgb(223,209,44)" fg:x="22201" fg:w="5"/><text x="68.0554%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (512 instructions, 1.56%)</title><rect x="66.4225%" y="165" width="1.5627%" height="15" fill="rgb(252,151,20)" fg:x="21762" fg:w="512"/><text x="66.7155%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="67.9852%" y="165" width="0.0122%" height="15" fill="rgb(244,77,50)" fg:x="22274" fg:w="4"/><text x="68.2782%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="67.9974%" y="165" width="0.1709%" height="15" fill="rgb(236,210,47)" fg:x="22278" fg:w="56"/><text x="68.2904%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,116 instructions, 3.41%)</title><rect x="64.9879%" y="181" width="3.4063%" height="15" fill="rgb(209,23,47)" fg:x="21292" fg:w="1116"/><text x="65.2809%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_get_5_::{{closure}} (32,243 instructions, 98.41%)</title><rect x="0.6196%" y="197" width="98.4128%" height="15" fill="rgb(206,106,24)" fg:x="203" fg:w="32243"/><text x="0.9126%" y="207.50">imrc_hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="99.0324%" y="197" width="0.0366%" height="15" fill="rgb(243,119,38)" fg:x="32446" fg:w="12"/><text x="99.3254%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="99.0691%" y="197" width="0.2472%" height="15" fill="rgb(205,226,51)" fg:x="32458" fg:w="81"/><text x="99.3620%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.38%)</title><rect x="99.3163%" y="197" width="0.3846%" height="15" fill="rgb(230,193,47)" fg:x="32539" fg:w="126"/><text x="99.6093%" y="207.50"></text></g><g><title>all (32,763 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,186,29)" fg:x="0" fg:w="32763"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (32,763 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,98,19)" fg:x="0" fg:w="32763"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>