<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="37762"><g><title>ic_cdk::setup (24 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0636%" height="15" fill="rgb(228,154,42)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (115 instructions, 0.30%)</title><rect x="0.0636%" y="197" width="0.3045%" height="15" fill="rgb(254,206,16)" fg:x="24" fg:w="115"/><text x="0.3565%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.21%)</title><rect x="0.3681%" y="197" width="0.2119%" height="15" fill="rgb(220,228,29)" fg:x="139" fg:w="80"/><text x="0.6611%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="0.5799%" y="165" width="0.2410%" height="15" fill="rgb(249,82,45)" fg:x="219" fg:w="91"/><text x="0.8729%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="0.8209%" y="149" width="0.2171%" height="15" fill="rgb(213,212,38)" fg:x="310" fg:w="82"/><text x="1.1139%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.0381%" y="133" width="0.0159%" height="15" fill="rgb(234,30,32)" fg:x="392" fg:w="6"/><text x="1.3310%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="1.0381%" y="149" width="1.1731%" height="15" fill="rgb(223,77,45)" fg:x="392" fg:w="443"/><text x="1.3310%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="2.2112%" y="149" width="0.2516%" height="15" fill="rgb(221,24,12)" fg:x="835" fg:w="95"/><text x="2.5042%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.4628%" y="149" width="0.1589%" height="15" fill="rgb(227,113,48)" fg:x="930" fg:w="60"/><text x="2.7558%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.6217%" y="149" width="0.1589%" height="15" fill="rgb(206,52,7)" fg:x="990" fg:w="60"/><text x="2.9147%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.7806%" y="149" width="0.1589%" height="15" fill="rgb(212,35,53)" fg:x="1050" fg:w="60"/><text x="3.0735%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.9395%" y="149" width="0.1589%" height="15" fill="rgb(228,133,47)" fg:x="1110" fg:w="60"/><text x="3.2324%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="3.0984%" y="149" width="0.2171%" height="15" fill="rgb(251,166,13)" fg:x="1170" fg:w="82"/><text x="3.3913%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.19%)</title><rect x="3.3155%" y="149" width="0.1854%" height="15" fill="rgb(218,64,11)" fg:x="1252" fg:w="70"/><text x="3.6085%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.5009%" y="133" width="0.0159%" height="15" fill="rgb(222,138,29)" fg:x="1322" fg:w="6"/><text x="3.7938%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="3.5009%" y="149" width="1.1731%" height="15" fill="rgb(224,199,42)" fg:x="1322" fg:w="443"/><text x="3.7938%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.6740%" y="149" width="0.0503%" height="15" fill="rgb(235,53,26)" fg:x="1765" fg:w="19"/><text x="4.9670%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="4.7243%" y="133" width="0.2410%" height="15" fill="rgb(216,66,32)" fg:x="1784" fg:w="91"/><text x="5.0173%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.18%)</title><rect x="4.9653%" y="101" width="0.1774%" height="15" fill="rgb(207,209,13)" fg:x="1875" fg:w="67"/><text x="5.2583%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.25%)</title><rect x="4.9653%" y="117" width="0.2542%" height="15" fill="rgb(239,28,5)" fg:x="1875" fg:w="96"/><text x="5.2583%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="5.2195%" y="69" width="0.0291%" height="15" fill="rgb(218,90,38)" fg:x="1971" fg:w="11"/><text x="5.5125%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="5.2487%" y="53" width="0.0927%" height="15" fill="rgb(239,86,36)" fg:x="1982" fg:w="35"/><text x="5.5416%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.17%)</title><rect x="5.2487%" y="69" width="0.1695%" height="15" fill="rgb(208,60,53)" fg:x="1982" fg:w="64"/><text x="5.5416%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.38%)</title><rect x="5.2195%" y="85" width="0.3813%" height="15" fill="rgb(252,172,46)" fg:x="1971" fg:w="144"/><text x="5.5125%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.55%)</title><rect x="5.2195%" y="101" width="0.5535%" height="15" fill="rgb(212,177,42)" fg:x="1971" fg:w="209"/><text x="5.5125%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.58%)</title><rect x="5.2195%" y="117" width="0.5799%" height="15" fill="rgb(250,167,31)" fg:x="1971" fg:w="219"/><text x="5.5125%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 1.20%)</title><rect x="4.9653%" y="133" width="1.1996%" height="15" fill="rgb(250,106,46)" fg:x="1875" fg:w="453"/><text x="5.2583%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (682 instructions, 1.81%)</title><rect x="4.7243%" y="149" width="1.8060%" height="15" fill="rgb(220,109,26)" fg:x="1784" fg:w="682"/><text x="5.0173%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="6.5304%" y="149" width="0.2516%" height="15" fill="rgb(215,108,9)" fg:x="2466" fg:w="95"/><text x="6.8233%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="6.7820%" y="149" width="0.1668%" height="15" fill="rgb(239,168,7)" fg:x="2561" fg:w="63"/><text x="7.0749%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="6.9488%" y="149" width="0.2013%" height="15" fill="rgb(246,224,37)" fg:x="2624" fg:w="76"/><text x="7.2418%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.19%)</title><rect x="7.1500%" y="149" width="0.1854%" height="15" fill="rgb(218,105,44)" fg:x="2700" fg:w="70"/><text x="7.4430%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="7.3354%" y="117" width="0.0159%" height="15" fill="rgb(221,131,31)" fg:x="2770" fg:w="6"/><text x="7.6284%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="7.3354%" y="133" width="1.1731%" height="15" fill="rgb(229,209,2)" fg:x="2770" fg:w="443"/><text x="7.6284%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="8.5086%" y="133" width="0.0503%" height="15" fill="rgb(236,203,46)" fg:x="3213" fg:w="19"/><text x="8.8015%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="8.5589%" y="117" width="0.2410%" height="15" fill="rgb(228,108,21)" fg:x="3232" fg:w="91"/><text x="8.8518%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.18%)</title><rect x="8.7999%" y="85" width="0.1774%" height="15" fill="rgb(215,146,43)" fg:x="3323" fg:w="67"/><text x="9.0928%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.25%)</title><rect x="8.7999%" y="101" width="0.2542%" height="15" fill="rgb(240,32,41)" fg:x="3323" fg:w="96"/><text x="9.0928%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="9.0541%" y="53" width="0.0291%" height="15" fill="rgb(233,198,31)" fg:x="3419" fg:w="11"/><text x="9.3470%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="9.0832%" y="37" width="0.0927%" height="15" fill="rgb(227,218,32)" fg:x="3430" fg:w="35"/><text x="9.3762%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.17%)</title><rect x="9.0832%" y="53" width="0.1695%" height="15" fill="rgb(240,226,0)" fg:x="3430" fg:w="64"/><text x="9.3762%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.38%)</title><rect x="9.0541%" y="69" width="0.3813%" height="15" fill="rgb(248,217,14)" fg:x="3419" fg:w="144"/><text x="9.3470%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.55%)</title><rect x="9.0541%" y="85" width="0.5535%" height="15" fill="rgb(233,176,23)" fg:x="3419" fg:w="209"/><text x="9.3470%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.58%)</title><rect x="9.0541%" y="101" width="0.5799%" height="15" fill="rgb(223,119,40)" fg:x="3419" fg:w="219"/><text x="9.3470%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 1.20%)</title><rect x="8.7999%" y="117" width="1.1996%" height="15" fill="rgb(244,0,54)" fg:x="3323" fg:w="453"/><text x="9.0928%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (682 instructions, 1.81%)</title><rect x="8.5589%" y="133" width="1.8060%" height="15" fill="rgb(233,3,40)" fg:x="3232" fg:w="682"/><text x="8.8518%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="10.3649%" y="133" width="0.2516%" height="15" fill="rgb(241,59,47)" fg:x="3914" fg:w="95"/><text x="10.6579%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="10.6165%" y="133" width="0.1668%" height="15" fill="rgb(233,66,10)" fg:x="4009" fg:w="63"/><text x="10.9095%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="10.7833%" y="117" width="0.2171%" height="15" fill="rgb(226,119,36)" fg:x="4072" fg:w="82"/><text x="11.0763%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.25%)</title><rect x="11.0005%" y="117" width="0.2516%" height="15" fill="rgb(249,26,8)" fg:x="4154" fg:w="95"/><text x="11.2934%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="11.2521%" y="117" width="0.2013%" height="15" fill="rgb(206,190,37)" fg:x="4249" fg:w="76"/><text x="11.5450%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.87%)</title><rect x="10.7833%" y="133" width="0.8739%" height="15" fill="rgb(242,60,53)" fg:x="4072" fg:w="330"/><text x="11.0763%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="11.6572%" y="133" width="0.2410%" height="15" fill="rgb(243,121,2)" fg:x="4402" fg:w="91"/><text x="11.9502%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,966 instructions, 5.21%)</title><rect x="7.3354%" y="149" width="5.2063%" height="15" fill="rgb(233,98,3)" fg:x="2770" fg:w="1966"/><text x="7.6284%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="12.5417%" y="149" width="0.2013%" height="15" fill="rgb(216,107,19)" fg:x="4736" fg:w="76"/><text x="12.8347%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.7430%" y="149" width="0.0397%" height="15" fill="rgb(211,212,6)" fg:x="4812" fg:w="15"/><text x="13.0359%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.7827%" y="149" width="0.0397%" height="15" fill="rgb(251,47,31)" fg:x="4827" fg:w="15"/><text x="13.0757%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="12.8224%" y="149" width="0.0238%" height="15" fill="rgb(218,19,13)" fg:x="4842" fg:w="9"/><text x="13.1154%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.04%)</title><rect x="12.8462%" y="149" width="0.0424%" height="15" fill="rgb(216,6,26)" fg:x="4851" fg:w="16"/><text x="13.1392%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="12.8886%" y="133" width="0.2410%" height="15" fill="rgb(230,58,28)" fg:x="4867" fg:w="91"/><text x="13.1816%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.50%)</title><rect x="12.8886%" y="149" width="0.4952%" height="15" fill="rgb(225,209,0)" fg:x="4867" fg:w="187"/><text x="13.1816%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.3838%" y="117" width="0.2410%" height="15" fill="rgb(246,67,54)" fg:x="5054" fg:w="91"/><text x="13.6768%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.35%)</title><rect x="13.3838%" y="133" width="0.3549%" height="15" fill="rgb(248,75,5)" fg:x="5054" fg:w="134"/><text x="13.6768%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (219 instructions, 0.58%)</title><rect x="13.3838%" y="149" width="0.5799%" height="15" fill="rgb(231,72,26)" fg:x="5054" fg:w="219"/><text x="13.6768%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.9638%" y="149" width="0.2410%" height="15" fill="rgb(220,151,33)" fg:x="5273" fg:w="91"/><text x="14.2567%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.24%)</title><rect x="14.2048%" y="149" width="0.2357%" height="15" fill="rgb(251,195,9)" fg:x="5364" fg:w="89"/><text x="14.4977%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.4404%" y="149" width="0.2410%" height="15" fill="rgb(214,167,6)" fg:x="5453" fg:w="91"/><text x="14.7334%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.6814%" y="149" width="0.2410%" height="15" fill="rgb(205,42,1)" fg:x="5544" fg:w="91"/><text x="14.9744%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="14.9224%" y="149" width="0.0106%" height="15" fill="rgb(230,131,9)" fg:x="5635" fg:w="4"/><text x="15.2154%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.24%)</title><rect x="14.9330%" y="149" width="0.2357%" height="15" fill="rgb(222,227,37)" fg:x="5639" fg:w="89"/><text x="15.2260%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.13%)</title><rect x="15.1687%" y="149" width="1.1334%" height="15" fill="rgb(245,50,47)" fg:x="5728" fg:w="428"/><text x="15.4617%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.13%)</title><rect x="16.3021%" y="149" width="1.1334%" height="15" fill="rgb(233,118,47)" fg:x="6156" fg:w="428"/><text x="16.5951%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,463 instructions, 19.76%)</title><rect x="0.8209%" y="165" width="19.7633%" height="15" fill="rgb(233,67,38)" fg:x="310" fg:w="7463"/><text x="1.1139%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (380 instructions, 1.01%)</title><rect x="20.5842%" y="165" width="1.0063%" height="15" fill="rgb(225,170,51)" fg:x="7773" fg:w="380"/><text x="20.8772%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="21.5905%" y="149" width="0.0185%" height="15" fill="rgb(216,145,49)" fg:x="8153" fg:w="7"/><text x="21.8835%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.10%)</title><rect x="21.5905%" y="165" width="0.1033%" height="15" fill="rgb(214,97,40)" fg:x="8153" fg:w="39"/><text x="21.8835%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="21.6938%" y="165" width="0.2410%" height="15" fill="rgb(221,124,49)" fg:x="8192" fg:w="91"/><text x="21.9867%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="21.9347%" y="149" width="0.0185%" height="15" fill="rgb(228,21,13)" fg:x="8283" fg:w="7"/><text x="22.2277%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="21.9533%" y="133" width="0.1562%" height="15" fill="rgb(231,13,51)" fg:x="8290" fg:w="59"/><text x="22.2463%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.25%)</title><rect x="22.1095%" y="133" width="0.2489%" height="15" fill="rgb(220,31,27)" fg:x="8349" fg:w="94"/><text x="22.4025%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.46%)</title><rect x="22.3585%" y="133" width="0.4581%" height="15" fill="rgb(229,118,0)" fg:x="8443" fg:w="173"/><text x="22.6514%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.53%)</title><rect x="21.9533%" y="149" width="1.5333%" height="15" fill="rgb(250,201,47)" fg:x="8290" fg:w="579"/><text x="22.2463%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 2.11%)</title><rect x="21.9347%" y="165" width="2.1132%" height="15" fill="rgb(230,202,53)" fg:x="8283" fg:w="798"/><text x="22.2277%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="24.0480%" y="165" width="0.2410%" height="15" fill="rgb(231,173,44)" fg:x="9081" fg:w="91"/><text x="24.3410%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="24.2890%" y="149" width="0.0185%" height="15" fill="rgb(212,115,53)" fg:x="9172" fg:w="7"/><text x="24.5819%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="24.3075%" y="133" width="0.1562%" height="15" fill="rgb(249,109,2)" fg:x="9179" fg:w="59"/><text x="24.6005%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.25%)</title><rect x="24.4637%" y="133" width="0.2489%" height="15" fill="rgb(208,6,16)" fg:x="9238" fg:w="94"/><text x="24.7567%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.46%)</title><rect x="24.7127%" y="133" width="0.4581%" height="15" fill="rgb(234,119,18)" fg:x="9332" fg:w="173"/><text x="25.0056%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.53%)</title><rect x="24.3075%" y="149" width="1.5333%" height="15" fill="rgb(214,229,43)" fg:x="9179" fg:w="579"/><text x="24.6005%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.20%)</title><rect x="25.8408%" y="149" width="0.2039%" height="15" fill="rgb(206,38,2)" fg:x="9758" fg:w="77"/><text x="26.1338%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.24%)</title><rect x="26.0447%" y="133" width="0.2357%" height="15" fill="rgb(226,157,50)" fg:x="9835" fg:w="89"/><text x="26.3377%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.33%)</title><rect x="26.0447%" y="149" width="0.3284%" height="15" fill="rgb(229,10,16)" fg:x="9835" fg:w="124"/><text x="26.3377%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 2.56%)</title><rect x="24.2890%" y="165" width="2.5555%" height="15" fill="rgb(235,97,47)" fg:x="9172" fg:w="965"/><text x="24.5819%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="26.8444%" y="117" width="0.1562%" height="15" fill="rgb(231,137,42)" fg:x="10137" fg:w="59"/><text x="27.1374%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.25%)</title><rect x="26.8444%" y="133" width="0.2463%" height="15" fill="rgb(214,130,37)" fg:x="10137" fg:w="93"/><text x="27.1374%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.84%)</title><rect x="26.8444%" y="149" width="0.8368%" height="15" fill="rgb(232,110,17)" fg:x="10137" fg:w="316"/><text x="27.1374%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.331 (18 instructions, 0.05%)</title><rect x="27.6813%" y="149" width="0.0477%" height="15" fill="rgb(225,151,9)" fg:x="10453" fg:w="18"/><text x="27.9742%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="27.7289%" y="149" width="0.0344%" height="15" fill="rgb(223,229,36)" fg:x="10471" fg:w="13"/><text x="28.0219%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 1.40%)</title><rect x="26.8444%" y="165" width="1.4009%" height="15" fill="rgb(247,110,2)" fg:x="10137" fg:w="529"/><text x="27.1374%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.14%)</title><rect x="28.2453%" y="165" width="0.1404%" height="15" fill="rgb(213,222,45)" fg:x="10666" fg:w="53"/><text x="28.5383%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="28.3857%" y="133" width="0.0715%" height="15" fill="rgb(233,36,35)" fg:x="10719" fg:w="27"/><text x="28.6786%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.38%)</title><rect x="28.3857%" y="149" width="0.3760%" height="15" fill="rgb(229,106,52)" fg:x="10719" fg:w="142"/><text x="28.6786%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="28.8544%" y="133" width="0.0715%" height="15" fill="rgb(210,139,10)" fg:x="10896" fg:w="27"/><text x="29.1474%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.38%)</title><rect x="28.8544%" y="149" width="0.3760%" height="15" fill="rgb(210,58,13)" fg:x="10896" fg:w="142"/><text x="29.1474%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 0.94%)</title><rect x="28.3857%" y="165" width="0.9375%" height="15" fill="rgb(252,26,33)" fg:x="10719" fg:w="354"/><text x="28.6786%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.09%)</title><rect x="29.3231%" y="149" width="0.0900%" height="15" fill="rgb(227,101,52)" fg:x="11073" fg:w="34"/><text x="29.6161%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1310 (18 instructions, 0.05%)</title><rect x="29.4132%" y="149" width="0.0477%" height="15" fill="rgb(243,39,47)" fg:x="11107" fg:w="18"/><text x="29.7061%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1310 (18 instructions, 0.05%)</title><rect x="29.4608%" y="149" width="0.0477%" height="15" fill="rgb(214,18,19)" fg:x="11125" fg:w="18"/><text x="29.7538%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.44%)</title><rect x="29.3231%" y="165" width="0.4422%" height="15" fill="rgb(250,175,34)" fg:x="11073" fg:w="167"/><text x="29.6161%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.7654%" y="165" width="0.0344%" height="15" fill="rgb(225,55,5)" fg:x="11240" fg:w="13"/><text x="30.0583%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.7998%" y="165" width="0.0344%" height="15" fill="rgb(206,77,3)" fg:x="11253" fg:w="13"/><text x="30.0928%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.8342%" y="165" width="0.0344%" height="15" fill="rgb(239,21,5)" fg:x="11266" fg:w="13"/><text x="30.1272%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.17%)</title><rect x="29.8687%" y="165" width="1.1652%" height="15" fill="rgb(249,19,41)" fg:x="11279" fg:w="440"/><text x="30.1616%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="31.0338%" y="133" width="0.0185%" height="15" fill="rgb(222,80,48)" fg:x="11719" fg:w="7"/><text x="31.3268%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.0524%" y="117" width="0.0715%" height="15" fill="rgb(247,148,4)" fg:x="11726" fg:w="27"/><text x="31.3453%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.1239%" y="117" width="0.0715%" height="15" fill="rgb(251,216,2)" fg:x="11753" fg:w="27"/><text x="31.4168%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.52%)</title><rect x="31.0524%" y="133" width="0.5217%" height="15" fill="rgb(220,152,10)" fg:x="11726" fg:w="197"/><text x="31.3453%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.5741%" y="101" width="0.0715%" height="15" fill="rgb(250,95,20)" fg:x="11923" fg:w="27"/><text x="31.8670%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.6456%" y="101" width="0.0715%" height="15" fill="rgb(225,190,3)" fg:x="11950" fg:w="27"/><text x="31.9385%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.18%)</title><rect x="31.7171%" y="101" width="0.1801%" height="15" fill="rgb(226,206,29)" fg:x="11977" fg:w="68"/><text x="32.0100%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.65%)</title><rect x="31.5741%" y="117" width="0.6462%" height="15" fill="rgb(251,96,15)" fg:x="11923" fg:w="244"/><text x="31.8670%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (279 instructions, 0.74%)</title><rect x="31.5741%" y="133" width="0.7388%" height="15" fill="rgb(212,180,10)" fg:x="11923" fg:w="279"/><text x="31.8670%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="32.3129%" y="133" width="0.0344%" height="15" fill="rgb(225,131,17)" fg:x="12202" fg:w="13"/><text x="32.6059%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (558 instructions, 1.48%)</title><rect x="31.0338%" y="149" width="1.4777%" height="15" fill="rgb(218,136,19)" fg:x="11719" fg:w="558"/><text x="31.3268%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (607 instructions, 1.61%)</title><rect x="31.0338%" y="165" width="1.6074%" height="15" fill="rgb(209,86,37)" fg:x="11719" fg:w="607"/><text x="31.3268%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.18%)</title><rect x="32.6413%" y="149" width="0.1827%" height="15" fill="rgb(229,37,51)" fg:x="12326" fg:w="69"/><text x="32.9342%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.18%)</title><rect x="32.8240%" y="149" width="0.1801%" height="15" fill="rgb(220,48,32)" fg:x="12395" fg:w="68"/><text x="33.1170%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.61%)</title><rect x="32.6413%" y="165" width="0.6117%" height="15" fill="rgb(212,219,16)" fg:x="12326" fg:w="231"/><text x="32.9342%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,808 instructions, 36.57%)</title><rect x="0.5799%" y="181" width="36.5659%" height="15" fill="rgb(228,218,5)" fg:x="219" fg:w="13808"/><text x="0.8729%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (19 instructions, 0.05%)</title><rect x="37.1458%" y="181" width="0.0503%" height="15" fill="rgb(218,206,50)" fg:x="14027" fg:w="19"/><text x="37.4388%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="37.1961%" y="181" width="0.5190%" height="15" fill="rgb(206,171,29)" fg:x="14046" fg:w="196"/><text x="37.4891%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="37.7152%" y="181" width="0.5190%" height="15" fill="rgb(211,36,0)" fg:x="14242" fg:w="196"/><text x="38.0081%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="38.2342%" y="181" width="0.5190%" height="15" fill="rgb(239,105,30)" fg:x="14438" fg:w="196"/><text x="38.5272%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="38.7532%" y="181" width="0.5190%" height="15" fill="rgb(243,219,0)" fg:x="14634" fg:w="196"/><text x="39.0462%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="39.2723%" y="181" width="0.5190%" height="15" fill="rgb(244,39,49)" fg:x="14830" fg:w="196"/><text x="39.5653%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="39.7913%" y="181" width="0.5190%" height="15" fill="rgb(247,114,35)" fg:x="15026" fg:w="196"/><text x="40.0843%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="40.3104%" y="181" width="0.5190%" height="15" fill="rgb(211,137,46)" fg:x="15222" fg:w="196"/><text x="40.6033%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="40.8294%" y="181" width="0.5190%" height="15" fill="rgb(247,225,37)" fg:x="15418" fg:w="196"/><text x="41.1224%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="41.3484%" y="181" width="0.5190%" height="15" fill="rgb(238,11,9)" fg:x="15614" fg:w="196"/><text x="41.6414%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="41.8675%" y="181" width="0.5190%" height="15" fill="rgb(210,68,29)" fg:x="15810" fg:w="196"/><text x="42.1605%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="42.3865%" y="181" width="0.5190%" height="15" fill="rgb(254,42,23)" fg:x="16006" fg:w="196"/><text x="42.6795%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="42.9056%" y="181" width="0.5190%" height="15" fill="rgb(221,119,9)" fg:x="16202" fg:w="196"/><text x="43.1985%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="43.4246%" y="181" width="0.5190%" height="15" fill="rgb(248,33,21)" fg:x="16398" fg:w="196"/><text x="43.7176%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="43.9436%" y="181" width="0.5190%" height="15" fill="rgb(213,201,27)" fg:x="16594" fg:w="196"/><text x="44.2366%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="44.4627%" y="181" width="0.5190%" height="15" fill="rgb(252,126,17)" fg:x="16790" fg:w="196"/><text x="44.7557%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="44.9817%" y="181" width="0.5190%" height="15" fill="rgb(229,222,24)" fg:x="16986" fg:w="196"/><text x="45.2747%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="45.5008%" y="181" width="0.5190%" height="15" fill="rgb(230,165,37)" fg:x="17182" fg:w="196"/><text x="45.7937%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="46.0198%" y="181" width="0.5190%" height="15" fill="rgb(233,14,41)" fg:x="17378" fg:w="196"/><text x="46.3128%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="46.5388%" y="181" width="0.5190%" height="15" fill="rgb(220,124,36)" fg:x="17574" fg:w="196"/><text x="46.8318%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="47.0579%" y="181" width="0.5190%" height="15" fill="rgb(247,210,52)" fg:x="17770" fg:w="196"/><text x="47.3509%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="47.5769%" y="181" width="0.5190%" height="15" fill="rgb(210,219,20)" fg:x="17966" fg:w="196"/><text x="47.8699%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="48.0960%" y="181" width="0.5190%" height="15" fill="rgb(219,142,31)" fg:x="18162" fg:w="196"/><text x="48.3889%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="48.6150%" y="181" width="0.5190%" height="15" fill="rgb(246,3,32)" fg:x="18358" fg:w="196"/><text x="48.9080%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="49.1341%" y="181" width="0.5190%" height="15" fill="rgb(248,14,6)" fg:x="18554" fg:w="196"/><text x="49.4270%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="49.6531%" y="181" width="0.5190%" height="15" fill="rgb(232,69,28)" fg:x="18750" fg:w="196"/><text x="49.9461%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="50.1721%" y="181" width="0.5190%" height="15" fill="rgb(225,157,41)" fg:x="18946" fg:w="196"/><text x="50.4651%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="50.6912%" y="181" width="0.5190%" height="15" fill="rgb(207,133,46)" fg:x="19142" fg:w="196"/><text x="50.9841%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="51.2102%" y="181" width="0.5190%" height="15" fill="rgb(218,225,29)" fg:x="19338" fg:w="196"/><text x="51.5032%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="51.7293%" y="181" width="0.5190%" height="15" fill="rgb(242,38,40)" fg:x="19534" fg:w="196"/><text x="52.0222%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="52.2483%" y="181" width="0.5190%" height="15" fill="rgb(211,177,32)" fg:x="19730" fg:w="196"/><text x="52.5413%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="52.7673%" y="181" width="0.5190%" height="15" fill="rgb(251,139,41)" fg:x="19926" fg:w="196"/><text x="53.0603%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="53.2864%" y="181" width="0.5190%" height="15" fill="rgb(211,182,47)" fg:x="20122" fg:w="196"/><text x="53.5793%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="53.8054%" y="181" width="0.5190%" height="15" fill="rgb(227,108,6)" fg:x="20318" fg:w="196"/><text x="54.0984%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="54.3245%" y="181" width="0.5190%" height="15" fill="rgb(206,4,36)" fg:x="20514" fg:w="196"/><text x="54.6174%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="54.8435%" y="181" width="0.5190%" height="15" fill="rgb(232,107,21)" fg:x="20710" fg:w="196"/><text x="55.1365%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="55.3625%" y="181" width="0.5190%" height="15" fill="rgb(236,11,10)" fg:x="20906" fg:w="196"/><text x="55.6555%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="55.8816%" y="181" width="0.5190%" height="15" fill="rgb(238,201,34)" fg:x="21102" fg:w="196"/><text x="56.1745%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="56.4006%" y="181" width="0.5190%" height="15" fill="rgb(232,56,27)" fg:x="21298" fg:w="196"/><text x="56.6936%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="56.9197%" y="181" width="0.5190%" height="15" fill="rgb(253,86,41)" fg:x="21494" fg:w="196"/><text x="57.2126%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="57.4387%" y="181" width="0.5190%" height="15" fill="rgb(216,169,7)" fg:x="21690" fg:w="196"/><text x="57.7317%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="57.9577%" y="181" width="0.5190%" height="15" fill="rgb(245,222,25)" fg:x="21886" fg:w="196"/><text x="58.2507%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="58.4768%" y="181" width="0.5190%" height="15" fill="rgb(210,222,40)" fg:x="22082" fg:w="196"/><text x="58.7697%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="58.9958%" y="181" width="0.5190%" height="15" fill="rgb(214,122,0)" fg:x="22278" fg:w="196"/><text x="59.2888%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="59.5149%" y="181" width="0.5190%" height="15" fill="rgb(206,77,31)" fg:x="22474" fg:w="196"/><text x="59.8078%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="60.0339%" y="181" width="0.5190%" height="15" fill="rgb(233,8,28)" fg:x="22670" fg:w="196"/><text x="60.3269%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="60.5529%" y="181" width="0.5190%" height="15" fill="rgb(241,89,47)" fg:x="22866" fg:w="196"/><text x="60.8459%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="61.0720%" y="181" width="0.5190%" height="15" fill="rgb(247,43,42)" fg:x="23062" fg:w="196"/><text x="61.3649%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="61.5910%" y="181" width="0.5190%" height="15" fill="rgb(251,69,26)" fg:x="23258" fg:w="196"/><text x="61.8840%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="62.1101%" y="181" width="0.5190%" height="15" fill="rgb(254,154,19)" fg:x="23454" fg:w="196"/><text x="62.4030%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="62.6291%" y="181" width="0.5190%" height="15" fill="rgb(225,34,44)" fg:x="23650" fg:w="196"/><text x="62.9221%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="63.1481%" y="149" width="0.0185%" height="15" fill="rgb(253,106,18)" fg:x="23846" fg:w="7"/><text x="63.4411%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.18%)</title><rect x="63.1667%" y="117" width="0.1827%" height="15" fill="rgb(213,52,17)" fg:x="23853" fg:w="69"/><text x="63.4596%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (160 instructions, 0.42%)</title><rect x="63.1667%" y="133" width="0.4237%" height="15" fill="rgb(240,102,9)" fg:x="23853" fg:w="160"/><text x="63.4596%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 0.52%)</title><rect x="63.1667%" y="149" width="0.5164%" height="15" fill="rgb(209,113,39)" fg:x="23853" fg:w="195"/><text x="63.4596%" y="159.50"></text></g><g><title>memset (152 instructions, 0.40%)</title><rect x="63.6831%" y="149" width="0.4025%" height="15" fill="rgb(227,2,2)" fg:x="24048" fg:w="152"/><text x="63.9760%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (525 instructions, 1.39%)</title><rect x="63.1481%" y="165" width="1.3903%" height="15" fill="rgb(218,64,9)" fg:x="23846" fg:w="525"/><text x="63.4411%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 1.37%)</title><rect x="64.5384%" y="149" width="1.3717%" height="15" fill="rgb(241,221,14)" fg:x="24371" fg:w="518"/><text x="64.8314%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="65.9102%" y="101" width="0.2410%" height="15" fill="rgb(251,117,52)" fg:x="24889" fg:w="91"/><text x="66.2031%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.35%)</title><rect x="65.9102%" y="117" width="0.3549%" height="15" fill="rgb(232,147,16)" fg:x="24889" fg:w="134"/><text x="66.2031%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (216 instructions, 0.57%)</title><rect x="65.9102%" y="133" width="0.5720%" height="15" fill="rgb(250,20,12)" fg:x="24889" fg:w="216"/><text x="66.2031%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="66.4822%" y="133" width="0.0397%" height="15" fill="rgb(253,217,21)" fg:x="25105" fg:w="15"/><text x="66.7751%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="66.5219%" y="133" width="0.0397%" height="15" fill="rgb(219,83,9)" fg:x="25120" fg:w="15"/><text x="66.8149%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (434 instructions, 1.15%)</title><rect x="65.9102%" y="149" width="1.1493%" height="15" fill="rgb(216,98,2)" fg:x="24889" fg:w="434"/><text x="66.2031%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 1.37%)</title><rect x="67.0595%" y="149" width="1.3665%" height="15" fill="rgb(245,118,47)" fg:x="25323" fg:w="516"/><text x="67.3524%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 instructions, 0.02%)</title><rect x="68.4259%" y="149" width="0.0185%" height="15" fill="rgb(213,171,13)" fg:x="25839" fg:w="7"/><text x="68.7189%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 4.15%)</title><rect x="64.5384%" y="165" width="4.1523%" height="15" fill="rgb(234,181,49)" fg:x="24371" fg:w="1568"/><text x="64.8314%" y="175.50">cand..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="68.6907%" y="165" width="0.0185%" height="15" fill="rgb(245,88,45)" fg:x="25939" fg:w="7"/><text x="68.9837%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="68.7093%" y="165" width="0.1668%" height="15" fill="rgb(248,136,45)" fg:x="25946" fg:w="63"/><text x="69.0023%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,771 instructions, 7.34%)</title><rect x="63.1481%" y="181" width="7.3381%" height="15" fill="rgb(250,10,39)" fg:x="23846" fg:w="2771"/><text x="63.4411%" y="191.50">ic_cdk::..</text></g><g><title>imrc_hashmap::__canister_method_batch_get::{{closure}} (37,151 instructions, 98.38%)</title><rect x="0.5799%" y="197" width="98.3820%" height="15" fill="rgb(209,70,2)" fg:x="219" fg:w="37151"/><text x="0.8729%" y="207.50">imrc_hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.04%)</title><rect x="98.9619%" y="197" width="0.0371%" height="15" fill="rgb(231,185,18)" fg:x="37370" fg:w="14"/><text x="99.2549%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="99.2373%" y="181" width="0.0715%" height="15" fill="rgb(243,183,3)" fg:x="37474" fg:w="27"/><text x="99.5303%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.62%)</title><rect x="99.0016%" y="197" width="0.6170%" height="15" fill="rgb(248,22,54)" fg:x="37385" fg:w="233"/><text x="99.2946%" y="207.50"></text></g><g><title>all (37,762 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,27,22)" fg:x="0" fg:w="37762"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (37,762 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,21,25)" fg:x="0" fg:w="37762"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>