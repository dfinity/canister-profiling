<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="28431"><g><title>ic_cdk::setup (19 instructions, 0.07%)</title><rect x="0.0000%" y="197" width="0.0668%" height="15" fill="rgb(232,11,8)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.42%)</title><rect x="0.0668%" y="197" width="0.4150%" height="15" fill="rgb(218,100,45)" fg:x="19" fg:w="118"/><text x="0.3598%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.26%)</title><rect x="0.4819%" y="197" width="0.2568%" height="15" fill="rgb(206,67,0)" fg:x="137" fg:w="73"/><text x="0.7748%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="0.7386%" y="165" width="0.2884%" height="15" fill="rgb(207,182,16)" fg:x="210" fg:w="82"/><text x="1.0316%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="1.0270%" y="149" width="0.2497%" height="15" fill="rgb(222,109,14)" fg:x="292" fg:w="71"/><text x="1.3200%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.2768%" y="133" width="0.0141%" height="15" fill="rgb(243,207,28)" fg:x="363" fg:w="4"/><text x="1.5697%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.41%)</title><rect x="1.2768%" y="149" width="1.4069%" height="15" fill="rgb(212,153,38)" fg:x="363" fg:w="400"/><text x="1.5697%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="2.6837%" y="149" width="0.2990%" height="15" fill="rgb(215,68,20)" fg:x="763" fg:w="85"/><text x="2.9767%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.19%)</title><rect x="2.9827%" y="149" width="0.1899%" height="15" fill="rgb(207,37,13)" fg:x="848" fg:w="54"/><text x="3.2756%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.19%)</title><rect x="3.1726%" y="149" width="0.1899%" height="15" fill="rgb(251,157,10)" fg:x="902" fg:w="54"/><text x="3.4656%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.19%)</title><rect x="3.3625%" y="149" width="0.1899%" height="15" fill="rgb(209,217,20)" fg:x="956" fg:w="54"/><text x="3.6555%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.19%)</title><rect x="3.5525%" y="149" width="0.1899%" height="15" fill="rgb(227,101,27)" fg:x="1010" fg:w="54"/><text x="3.8454%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="3.7424%" y="149" width="0.2497%" height="15" fill="rgb(220,120,10)" fg:x="1064" fg:w="71"/><text x="4.0354%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.23%)</title><rect x="3.9921%" y="149" width="0.2286%" height="15" fill="rgb(254,74,35)" fg:x="1135" fg:w="65"/><text x="4.2851%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="4.2207%" y="133" width="0.0141%" height="15" fill="rgb(225,17,53)" fg:x="1200" fg:w="4"/><text x="4.5137%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.41%)</title><rect x="4.2207%" y="149" width="1.4069%" height="15" fill="rgb(234,84,36)" fg:x="1200" fg:w="400"/><text x="4.5137%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="5.6277%" y="149" width="0.0563%" height="15" fill="rgb(250,43,5)" fg:x="1600" fg:w="16"/><text x="5.9206%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="5.6839%" y="133" width="0.2884%" height="15" fill="rgb(250,199,37)" fg:x="1616" fg:w="82"/><text x="5.9769%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.21%)</title><rect x="5.9724%" y="101" width="0.2110%" height="15" fill="rgb(246,100,23)" fg:x="1698" fg:w="60"/><text x="6.2653%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.30%)</title><rect x="5.9724%" y="117" width="0.2990%" height="15" fill="rgb(233,14,53)" fg:x="1698" fg:w="85"/><text x="6.2653%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="6.2713%" y="69" width="0.0317%" height="15" fill="rgb(205,95,53)" fg:x="1783" fg:w="9"/><text x="6.5643%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.11%)</title><rect x="6.3030%" y="53" width="0.1055%" height="15" fill="rgb(238,110,48)" fg:x="1792" fg:w="30"/><text x="6.5959%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.19%)</title><rect x="6.3030%" y="69" width="0.1935%" height="15" fill="rgb(205,228,20)" fg:x="1792" fg:w="55"/><text x="6.5959%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.42%)</title><rect x="6.2713%" y="85" width="0.4150%" height="15" fill="rgb(235,24,17)" fg:x="1783" fg:w="118"/><text x="6.5643%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.60%)</title><rect x="6.2713%" y="101" width="0.6015%" height="15" fill="rgb(207,130,46)" fg:x="1783" fg:w="171"/><text x="6.5643%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.62%)</title><rect x="6.2713%" y="117" width="0.6190%" height="15" fill="rgb(221,55,22)" fg:x="1783" fg:w="176"/><text x="6.5643%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.31%)</title><rect x="5.9724%" y="133" width="1.3084%" height="15" fill="rgb(218,141,53)" fg:x="1698" fg:w="372"/><text x="6.2653%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 2.11%)</title><rect x="5.6839%" y="149" width="2.1104%" height="15" fill="rgb(213,7,18)" fg:x="1616" fg:w="600"/><text x="5.9769%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="7.7943%" y="149" width="0.2990%" height="15" fill="rgb(229,76,38)" fg:x="2216" fg:w="85"/><text x="8.0873%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="8.0933%" y="149" width="0.2005%" height="15" fill="rgb(219,126,16)" fg:x="2301" fg:w="57"/><text x="8.3862%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="8.2938%" y="149" width="0.2321%" height="15" fill="rgb(213,15,43)" fg:x="2358" fg:w="66"/><text x="8.5867%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.23%)</title><rect x="8.5259%" y="149" width="0.2286%" height="15" fill="rgb(247,42,15)" fg:x="2424" fg:w="65"/><text x="8.8189%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="8.7545%" y="117" width="0.0141%" height="15" fill="rgb(219,194,38)" fg:x="2489" fg:w="4"/><text x="9.0475%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.41%)</title><rect x="8.7545%" y="133" width="1.4069%" height="15" fill="rgb(235,117,20)" fg:x="2489" fg:w="400"/><text x="9.0475%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="10.1614%" y="133" width="0.0563%" height="15" fill="rgb(229,123,27)" fg:x="2889" fg:w="16"/><text x="10.4544%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="10.2177%" y="117" width="0.2884%" height="15" fill="rgb(209,96,40)" fg:x="2905" fg:w="82"/><text x="10.5107%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.21%)</title><rect x="10.5061%" y="85" width="0.2110%" height="15" fill="rgb(236,211,11)" fg:x="2987" fg:w="60"/><text x="10.7991%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.30%)</title><rect x="10.5061%" y="101" width="0.2990%" height="15" fill="rgb(235,80,4)" fg:x="2987" fg:w="85"/><text x="10.7991%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="10.8051%" y="53" width="0.0317%" height="15" fill="rgb(249,65,54)" fg:x="3072" fg:w="9"/><text x="11.0981%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.11%)</title><rect x="10.8368%" y="37" width="0.1055%" height="15" fill="rgb(237,78,33)" fg:x="3081" fg:w="30"/><text x="11.1297%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.19%)</title><rect x="10.8368%" y="53" width="0.1935%" height="15" fill="rgb(229,103,33)" fg:x="3081" fg:w="55"/><text x="11.1297%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.42%)</title><rect x="10.8051%" y="69" width="0.4150%" height="15" fill="rgb(219,49,8)" fg:x="3072" fg:w="118"/><text x="11.0981%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.60%)</title><rect x="10.8051%" y="85" width="0.6015%" height="15" fill="rgb(253,173,37)" fg:x="3072" fg:w="171"/><text x="11.0981%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.62%)</title><rect x="10.8051%" y="101" width="0.6190%" height="15" fill="rgb(228,30,21)" fg:x="3072" fg:w="176"/><text x="11.0981%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.31%)</title><rect x="10.5061%" y="117" width="1.3084%" height="15" fill="rgb(242,131,32)" fg:x="2987" fg:w="372"/><text x="10.7991%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 2.11%)</title><rect x="10.2177%" y="133" width="2.1104%" height="15" fill="rgb(235,53,12)" fg:x="2905" fg:w="600"/><text x="10.5107%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="12.3281%" y="133" width="0.2990%" height="15" fill="rgb(224,219,19)" fg:x="3505" fg:w="85"/><text x="12.6211%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="12.6271%" y="133" width="0.2005%" height="15" fill="rgb(225,203,51)" fg:x="3590" fg:w="57"/><text x="12.9200%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="12.8275%" y="117" width="0.2497%" height="15" fill="rgb(250,208,52)" fg:x="3647" fg:w="71"/><text x="13.1205%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.32%)</title><rect x="13.0773%" y="117" width="0.3201%" height="15" fill="rgb(248,13,40)" fg:x="3718" fg:w="91"/><text x="13.3702%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="13.3973%" y="117" width="0.2321%" height="15" fill="rgb(214,71,30)" fg:x="3809" fg:w="66"/><text x="13.6903%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.01%)</title><rect x="12.8275%" y="133" width="1.0095%" height="15" fill="rgb(231,84,42)" fg:x="3647" fg:w="287"/><text x="13.1205%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="13.8370%" y="133" width="0.2884%" height="15" fill="rgb(254,166,38)" fg:x="3934" fg:w="82"/><text x="14.1300%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,728 instructions, 6.08%)</title><rect x="8.7545%" y="149" width="6.0779%" height="15" fill="rgb(254,100,44)" fg:x="2489" fg:w="1728"/><text x="9.0475%" y="159.50">binrea..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="14.8324%" y="149" width="0.2321%" height="15" fill="rgb(231,192,51)" fg:x="4217" fg:w="66"/><text x="15.1254%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="15.0645%" y="149" width="0.0457%" height="15" fill="rgb(239,131,20)" fg:x="4283" fg:w="13"/><text x="15.3575%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="15.1103%" y="149" width="0.0457%" height="15" fill="rgb(252,218,34)" fg:x="4296" fg:w="13"/><text x="15.4032%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="15.1560%" y="149" width="0.0246%" height="15" fill="rgb(210,209,42)" fg:x="4309" fg:w="7"/><text x="15.4490%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="15.1806%" y="149" width="0.0528%" height="15" fill="rgb(251,200,39)" fg:x="4316" fg:w="15"/><text x="15.4736%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="15.2334%" y="133" width="0.2884%" height="15" fill="rgb(213,4,19)" fg:x="4331" fg:w="82"/><text x="15.5263%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.58%)</title><rect x="15.2334%" y="149" width="0.5804%" height="15" fill="rgb(234,116,48)" fg:x="4331" fg:w="165"/><text x="15.5263%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="15.8137%" y="117" width="0.2884%" height="15" fill="rgb(217,53,11)" fg:x="4496" fg:w="82"/><text x="16.1067%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.41%)</title><rect x="15.8137%" y="133" width="0.4115%" height="15" fill="rgb(225,188,45)" fg:x="4496" fg:w="117"/><text x="16.1067%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (185 instructions, 0.65%)</title><rect x="15.8137%" y="149" width="0.6507%" height="15" fill="rgb(233,140,11)" fg:x="4496" fg:w="185"/><text x="16.1067%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="16.4644%" y="149" width="0.2884%" height="15" fill="rgb(207,160,15)" fg:x="4681" fg:w="82"/><text x="16.7574%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="16.7528%" y="149" width="0.2849%" height="15" fill="rgb(247,30,27)" fg:x="4763" fg:w="81"/><text x="17.0458%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="17.0377%" y="149" width="0.2884%" height="15" fill="rgb(248,88,33)" fg:x="4844" fg:w="82"/><text x="17.3307%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="17.3262%" y="149" width="0.2884%" height="15" fill="rgb(215,114,35)" fg:x="4926" fg:w="82"/><text x="17.6191%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="17.6216%" y="149" width="0.2849%" height="15" fill="rgb(238,6,5)" fg:x="5010" fg:w="81"/><text x="17.9146%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.34%)</title><rect x="17.9065%" y="149" width="1.3401%" height="15" fill="rgb(231,197,38)" fg:x="5091" fg:w="381"/><text x="18.1995%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.34%)</title><rect x="19.2466%" y="149" width="1.3401%" height="15" fill="rgb(218,162,21)" fg:x="5472" fg:w="381"/><text x="19.5396%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,475 instructions, 22.77%)</title><rect x="1.0270%" y="165" width="22.7744%" height="15" fill="rgb(229,156,39)" fg:x="292" fg:w="6475"/><text x="1.3200%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.18%)</title><rect x="23.8015%" y="165" width="1.1818%" height="15" fill="rgb(213,179,14)" fg:x="6767" fg:w="336"/><text x="24.0945%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="24.9833%" y="133" width="0.0176%" height="15" fill="rgb(251,118,2)" fg:x="7103" fg:w="5"/><text x="25.2763%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.14%)</title><rect x="24.9833%" y="149" width="0.1372%" height="15" fill="rgb(227,65,11)" fg:x="7103" fg:w="39"/><text x="25.2763%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="25.1205%" y="149" width="0.2884%" height="15" fill="rgb(249,48,53)" fg:x="7142" fg:w="82"/><text x="25.4134%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="25.4089%" y="133" width="0.0176%" height="15" fill="rgb(226,221,47)" fg:x="7224" fg:w="5"/><text x="25.7019%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="25.4265%" y="117" width="0.1864%" height="15" fill="rgb(226,188,24)" fg:x="7229" fg:w="53"/><text x="25.7194%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.31%)</title><rect x="25.6129%" y="117" width="0.3130%" height="15" fill="rgb(227,211,9)" fg:x="7282" fg:w="89"/><text x="25.9059%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.57%)</title><rect x="25.9259%" y="117" width="0.5663%" height="15" fill="rgb(251,179,23)" fg:x="7371" fg:w="161"/><text x="26.2189%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.90%)</title><rect x="25.4265%" y="133" width="1.8993%" height="15" fill="rgb(220,80,35)" fg:x="7229" fg:w="540"/><text x="25.7194%" y="143.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 2.66%)</title><rect x="25.4089%" y="149" width="2.6556%" height="15" fill="rgb(253,132,36)" fg:x="7224" fg:w="755"/><text x="25.7019%" y="159.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="28.0644%" y="149" width="0.2884%" height="15" fill="rgb(249,213,27)" fg:x="7979" fg:w="82"/><text x="28.3574%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="28.3529%" y="133" width="0.0176%" height="15" fill="rgb(219,186,8)" fg:x="8061" fg:w="5"/><text x="28.6458%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="28.3704%" y="117" width="0.1864%" height="15" fill="rgb(239,146,27)" fg:x="8066" fg:w="53"/><text x="28.6634%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.31%)</title><rect x="28.5569%" y="117" width="0.3130%" height="15" fill="rgb(218,228,0)" fg:x="8119" fg:w="89"/><text x="28.8498%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.57%)</title><rect x="28.8699%" y="117" width="0.5663%" height="15" fill="rgb(231,203,5)" fg:x="8208" fg:w="161"/><text x="29.1629%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.90%)</title><rect x="28.3704%" y="133" width="1.8993%" height="15" fill="rgb(253,167,34)" fg:x="8066" fg:w="540"/><text x="28.6634%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.24%)</title><rect x="30.2698%" y="133" width="0.2392%" height="15" fill="rgb(223,11,50)" fg:x="8606" fg:w="68"/><text x="30.5627%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="30.5090%" y="117" width="0.2849%" height="15" fill="rgb(232,205,53)" fg:x="8674" fg:w="81"/><text x="30.8019%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.38%)</title><rect x="30.5090%" y="133" width="0.3799%" height="15" fill="rgb(222,227,17)" fg:x="8674" fg:w="108"/><text x="30.8019%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 3.13%)</title><rect x="28.3529%" y="149" width="3.1269%" height="15" fill="rgb(230,99,15)" fg:x="8061" fg:w="889"/><text x="28.6458%" y="159.50">ca..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="31.4797%" y="101" width="0.1864%" height="15" fill="rgb(242,181,18)" fg:x="8950" fg:w="53"/><text x="31.7727%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.28%)</title><rect x="31.4797%" y="117" width="0.2779%" height="15" fill="rgb(233,132,0)" fg:x="8950" fg:w="79"/><text x="31.7727%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.03%)</title><rect x="31.4797%" y="133" width="1.0270%" height="15" fill="rgb(234,194,49)" fg:x="8950" fg:w="292"/><text x="31.7727%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.178 (15 instructions, 0.05%)</title><rect x="32.5068%" y="133" width="0.0528%" height="15" fill="rgb(235,128,5)" fg:x="9242" fg:w="15"/><text x="32.7997%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="32.5595%" y="133" width="0.0387%" height="15" fill="rgb(247,63,48)" fg:x="9257" fg:w="11"/><text x="32.8525%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.68%)</title><rect x="31.4797%" y="149" width="1.6813%" height="15" fill="rgb(239,126,51)" fg:x="8950" fg:w="478"/><text x="31.7727%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,432 instructions, 8.55%)</title><rect x="24.9833%" y="165" width="8.5540%" height="15" fill="rgb(229,72,10)" fg:x="7103" fg:w="2432"/><text x="25.2763%" y="175.50">candid::ty..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.12%)</title><rect x="33.5373%" y="149" width="0.1161%" height="15" fill="rgb(211,181,50)" fg:x="9535" fg:w="33"/><text x="33.8303%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.43%)</title><rect x="33.6534%" y="133" width="0.4326%" height="15" fill="rgb(221,219,34)" fg:x="9568" fg:w="123"/><text x="33.9464%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.43%)</title><rect x="34.1810%" y="133" width="0.4326%" height="15" fill="rgb(211,42,24)" fg:x="9718" fg:w="123"/><text x="34.4740%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.06%)</title><rect x="33.6534%" y="149" width="1.0552%" height="15" fill="rgb(243,95,26)" fg:x="9568" fg:w="300"/><text x="33.9464%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.10%)</title><rect x="34.7086%" y="133" width="0.0985%" height="15" fill="rgb(239,196,50)" fg:x="9868" fg:w="28"/><text x="35.0016%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1950 (15 instructions, 0.05%)</title><rect x="34.8071%" y="133" width="0.0528%" height="15" fill="rgb(227,46,31)" fg:x="9896" fg:w="15"/><text x="35.1000%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1950 (15 instructions, 0.05%)</title><rect x="34.8598%" y="133" width="0.0528%" height="15" fill="rgb(214,22,14)" fg:x="9911" fg:w="15"/><text x="35.1528%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.47%)</title><rect x="34.7086%" y="149" width="0.4678%" height="15" fill="rgb(239,57,25)" fg:x="9868" fg:w="133"/><text x="35.0016%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="35.1764%" y="149" width="0.0387%" height="15" fill="rgb(211,90,6)" fg:x="10001" fg:w="11"/><text x="35.4694%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="35.2151%" y="149" width="0.0387%" height="15" fill="rgb(239,217,51)" fg:x="10012" fg:w="11"/><text x="35.5081%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="35.2538%" y="149" width="0.0387%" height="15" fill="rgb(209,2,7)" fg:x="10023" fg:w="11"/><text x="35.5467%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 2.34%)</title><rect x="33.5373%" y="165" width="2.3390%" height="15" fill="rgb(214,28,23)" fg:x="9535" fg:w="665"/><text x="33.8303%" y="175.50">c..</text></g><g><title>memcpy (411 instructions, 1.45%)</title><rect x="35.8763%" y="165" width="1.4456%" height="15" fill="rgb(242,32,0)" fg:x="10200" fg:w="411"/><text x="36.1693%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="37.3219%" y="133" width="0.0422%" height="15" fill="rgb(249,198,36)" fg:x="10611" fg:w="12"/><text x="37.6149%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.59%)</title><rect x="37.3641%" y="133" width="0.5909%" height="15" fill="rgb(238,214,7)" fg:x="10623" fg:w="168"/><text x="37.6571%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.22%)</title><rect x="37.9550%" y="101" width="0.2216%" height="15" fill="rgb(225,58,23)" fg:x="10791" fg:w="63"/><text x="38.2480%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.74%)</title><rect x="37.9550%" y="117" width="0.7351%" height="15" fill="rgb(215,64,54)" fg:x="10791" fg:w="209"/><text x="38.2480%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.83%)</title><rect x="37.9550%" y="133" width="0.8301%" height="15" fill="rgb(252,221,16)" fg:x="10791" fg:w="236"/><text x="38.2480%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="38.7851%" y="133" width="0.0387%" height="15" fill="rgb(211,33,6)" fg:x="11027" fg:w="11"/><text x="39.0781%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 1.65%)</title><rect x="37.3219%" y="149" width="1.6496%" height="15" fill="rgb(244,190,1)" fg:x="10611" fg:w="469"/><text x="37.6149%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 1.77%)</title><rect x="37.3219%" y="165" width="1.7692%" height="15" fill="rgb(206,48,20)" fg:x="10611" fg:w="503"/><text x="37.6149%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.19%)</title><rect x="39.0911%" y="149" width="0.1935%" height="15" fill="rgb(229,28,40)" fg:x="11114" fg:w="55"/><text x="39.3841%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.22%)</title><rect x="39.2846%" y="149" width="0.2216%" height="15" fill="rgb(225,193,33)" fg:x="11169" fg:w="63"/><text x="39.5776%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 0.70%)</title><rect x="39.0911%" y="165" width="0.7035%" height="15" fill="rgb(248,101,16)" fg:x="11114" fg:w="200"/><text x="39.3841%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,261 instructions, 39.61%)</title><rect x="0.7386%" y="181" width="39.6082%" height="15" fill="rgb(207,221,36)" fg:x="210" fg:w="11261"/><text x="1.0316%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.07%)</title><rect x="40.3468%" y="181" width="0.0703%" height="15" fill="rgb(218,185,0)" fg:x="11471" fg:w="20"/><text x="40.6398%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="40.4172%" y="181" width="1.0657%" height="15" fill="rgb(226,171,5)" fg:x="11491" fg:w="303"/><text x="40.7101%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="41.4829%" y="181" width="0.9602%" height="15" fill="rgb(236,123,1)" fg:x="11794" fg:w="273"/><text x="41.7759%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="42.4431%" y="181" width="0.9602%" height="15" fill="rgb(249,217,28)" fg:x="12067" fg:w="273"/><text x="42.7361%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="43.4033%" y="181" width="1.0657%" height="15" fill="rgb(250,96,17)" fg:x="12340" fg:w="303"/><text x="43.6963%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="44.4691%" y="181" width="1.0657%" height="15" fill="rgb(232,92,32)" fg:x="12643" fg:w="303"/><text x="44.7620%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="45.5348%" y="181" width="0.9602%" height="15" fill="rgb(243,35,39)" fg:x="12946" fg:w="273"/><text x="45.8278%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="46.4950%" y="181" width="0.9602%" height="15" fill="rgb(208,44,32)" fg:x="13219" fg:w="273"/><text x="46.7880%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="47.4552%" y="181" width="0.9602%" height="15" fill="rgb(225,186,3)" fg:x="13492" fg:w="273"/><text x="47.7482%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="48.4155%" y="181" width="1.0657%" height="15" fill="rgb(236,86,4)" fg:x="13765" fg:w="303"/><text x="48.7084%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="49.4812%" y="181" width="1.0657%" height="15" fill="rgb(238,179,12)" fg:x="14068" fg:w="303"/><text x="49.7742%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="50.5469%" y="181" width="0.9602%" height="15" fill="rgb(228,94,21)" fg:x="14371" fg:w="273"/><text x="50.8399%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="51.5072%" y="181" width="0.9602%" height="15" fill="rgb(219,38,31)" fg:x="14644" fg:w="273"/><text x="51.8001%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="52.4674%" y="181" width="1.0657%" height="15" fill="rgb(239,21,13)" fg:x="14917" fg:w="303"/><text x="52.7603%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (314 instructions, 1.10%)</title><rect x="53.5331%" y="181" width="1.1044%" height="15" fill="rgb(206,155,43)" fg:x="15220" fg:w="314"/><text x="53.8261%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="54.6375%" y="181" width="0.9602%" height="15" fill="rgb(225,179,12)" fg:x="15534" fg:w="273"/><text x="54.9305%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="55.5978%" y="181" width="0.9602%" height="15" fill="rgb(212,106,15)" fg:x="15807" fg:w="273"/><text x="55.8907%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="56.5580%" y="181" width="0.9602%" height="15" fill="rgb(225,70,2)" fg:x="16080" fg:w="273"/><text x="56.8510%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="57.5182%" y="181" width="0.9602%" height="15" fill="rgb(238,100,15)" fg:x="16353" fg:w="273"/><text x="57.8112%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="58.4784%" y="181" width="0.9602%" height="15" fill="rgb(223,4,4)" fg:x="16626" fg:w="273"/><text x="58.7714%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="59.4386%" y="181" width="0.9602%" height="15" fill="rgb(219,41,51)" fg:x="16899" fg:w="273"/><text x="59.7316%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="60.3989%" y="181" width="1.0657%" height="15" fill="rgb(252,124,36)" fg:x="17172" fg:w="303"/><text x="60.6918%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="61.4646%" y="181" width="1.0657%" height="15" fill="rgb(254,180,44)" fg:x="17475" fg:w="303"/><text x="61.7576%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (314 instructions, 1.10%)</title><rect x="62.5303%" y="181" width="1.1044%" height="15" fill="rgb(233,194,39)" fg:x="17778" fg:w="314"/><text x="62.8233%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="63.6348%" y="181" width="1.0657%" height="15" fill="rgb(231,57,16)" fg:x="18092" fg:w="303"/><text x="63.9277%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="64.7005%" y="181" width="1.0657%" height="15" fill="rgb(220,227,2)" fg:x="18395" fg:w="303"/><text x="64.9935%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="65.7662%" y="181" width="0.9602%" height="15" fill="rgb(226,144,47)" fg:x="18698" fg:w="273"/><text x="66.0592%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="66.7265%" y="181" width="0.9602%" height="15" fill="rgb(233,51,54)" fg:x="18971" fg:w="273"/><text x="67.0194%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="67.6867%" y="181" width="0.9602%" height="15" fill="rgb(205,48,20)" fg:x="19244" fg:w="273"/><text x="67.9796%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="68.6469%" y="181" width="0.9602%" height="15" fill="rgb(227,8,36)" fg:x="19517" fg:w="273"/><text x="68.9399%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="69.6071%" y="181" width="0.9602%" height="15" fill="rgb(235,27,31)" fg:x="19790" fg:w="273"/><text x="69.9001%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="70.5673%" y="181" width="0.9602%" height="15" fill="rgb(206,125,9)" fg:x="20063" fg:w="273"/><text x="70.8603%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="71.5276%" y="181" width="1.0657%" height="15" fill="rgb(226,152,9)" fg:x="20336" fg:w="303"/><text x="71.8205%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="72.5933%" y="181" width="1.0657%" height="15" fill="rgb(253,188,48)" fg:x="20639" fg:w="303"/><text x="72.8863%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="73.6590%" y="181" width="0.9602%" height="15" fill="rgb(251,12,28)" fg:x="20942" fg:w="273"/><text x="73.9520%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="74.6193%" y="181" width="1.0657%" height="15" fill="rgb(223,138,30)" fg:x="21215" fg:w="303"/><text x="74.9122%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="75.6850%" y="181" width="1.0657%" height="15" fill="rgb(232,144,34)" fg:x="21518" fg:w="303"/><text x="75.9780%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="76.7507%" y="181" width="0.9602%" height="15" fill="rgb(230,220,52)" fg:x="21821" fg:w="273"/><text x="77.0437%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="77.7109%" y="181" width="1.0657%" height="15" fill="rgb(246,222,11)" fg:x="22094" fg:w="303"/><text x="78.0039%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (314 instructions, 1.10%)</title><rect x="78.7767%" y="181" width="1.1044%" height="15" fill="rgb(248,84,5)" fg:x="22397" fg:w="314"/><text x="79.0697%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="79.8811%" y="181" width="0.9602%" height="15" fill="rgb(248,189,42)" fg:x="22711" fg:w="273"/><text x="80.1741%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="80.8413%" y="181" width="0.9602%" height="15" fill="rgb(249,149,22)" fg:x="22984" fg:w="273"/><text x="81.1343%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="81.8016%" y="181" width="0.9602%" height="15" fill="rgb(229,107,6)" fg:x="23257" fg:w="273"/><text x="82.0945%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="82.7618%" y="181" width="0.9602%" height="15" fill="rgb(242,138,36)" fg:x="23530" fg:w="273"/><text x="83.0547%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="83.7220%" y="181" width="0.9602%" height="15" fill="rgb(215,170,43)" fg:x="23803" fg:w="273"/><text x="84.0150%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="84.6822%" y="181" width="1.0657%" height="15" fill="rgb(205,42,46)" fg:x="24076" fg:w="303"/><text x="84.9752%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="85.7480%" y="181" width="0.9602%" height="15" fill="rgb(224,127,53)" fg:x="24379" fg:w="273"/><text x="86.0409%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="86.7082%" y="181" width="0.9602%" height="15" fill="rgb(230,97,18)" fg:x="24652" fg:w="273"/><text x="87.0011%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (314 instructions, 1.10%)</title><rect x="87.6684%" y="181" width="1.1044%" height="15" fill="rgb(209,123,27)" fg:x="24925" fg:w="314"/><text x="87.9614%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.96%)</title><rect x="88.7728%" y="181" width="0.9602%" height="15" fill="rgb(247,187,1)" fg:x="25239" fg:w="273"/><text x="89.0658%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (303 instructions, 1.07%)</title><rect x="89.7330%" y="181" width="1.0657%" height="15" fill="rgb(243,178,48)" fg:x="25512" fg:w="303"/><text x="90.0260%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="90.7988%" y="149" width="0.0176%" height="15" fill="rgb(241,106,52)" fg:x="25815" fg:w="5"/><text x="91.0917%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.19%)</title><rect x="90.8164%" y="117" width="0.1935%" height="15" fill="rgb(246,28,53)" fg:x="25820" fg:w="55"/><text x="91.1093%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.49%)</title><rect x="90.8164%" y="133" width="0.4854%" height="15" fill="rgb(254,77,6)" fg:x="25820" fg:w="138"/><text x="91.1093%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.58%)</title><rect x="90.8164%" y="149" width="0.5804%" height="15" fill="rgb(238,90,5)" fg:x="25820" fg:w="165"/><text x="91.1093%" y="159.50"></text></g><g><title>memset (136 instructions, 0.48%)</title><rect x="91.3967%" y="149" width="0.4784%" height="15" fill="rgb(227,182,32)" fg:x="25985" fg:w="136"/><text x="91.6897%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.63%)</title><rect x="90.7988%" y="165" width="1.6320%" height="15" fill="rgb(249,128,49)" fg:x="25815" fg:w="464"/><text x="91.0917%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.11%)</title><rect x="92.4308%" y="149" width="0.1126%" height="15" fill="rgb(234,93,3)" fg:x="26279" fg:w="32"/><text x="92.7238%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="92.5434%" y="117" width="0.2884%" height="15" fill="rgb(233,171,1)" fg:x="26311" fg:w="82"/><text x="92.8363%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.41%)</title><rect x="92.5434%" y="133" width="0.4115%" height="15" fill="rgb(245,2,9)" fg:x="26311" fg:w="117"/><text x="92.8363%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (182 instructions, 0.64%)</title><rect x="92.5434%" y="149" width="0.6401%" height="15" fill="rgb(216,146,27)" fg:x="26311" fg:w="182"/><text x="92.8363%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="93.1835%" y="149" width="0.0387%" height="15" fill="rgb(238,155,19)" fg:x="26493" fg:w="11"/><text x="93.4765%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="93.2222%" y="149" width="0.0387%" height="15" fill="rgb(213,9,49)" fg:x="26504" fg:w="11"/><text x="93.5152%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.11%)</title><rect x="93.2609%" y="149" width="0.1055%" height="15" fill="rgb(246,183,47)" fg:x="26515" fg:w="30"/><text x="93.5538%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="93.3664%" y="149" width="0.0176%" height="15" fill="rgb(218,41,15)" fg:x="26545" fg:w="5"/><text x="93.6594%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (478 instructions, 1.68%)</title><rect x="92.4308%" y="165" width="1.6813%" height="15" fill="rgb(211,183,32)" fg:x="26279" fg:w="478"/><text x="92.7238%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="94.1121%" y="165" width="0.0176%" height="15" fill="rgb(218,136,16)" fg:x="26757" fg:w="5"/><text x="94.4050%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="94.1296%" y="165" width="0.2005%" height="15" fill="rgb(247,111,49)" fg:x="26762" fg:w="57"/><text x="94.4226%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,078 instructions, 3.79%)</title><rect x="90.7988%" y="181" width="3.7916%" height="15" fill="rgb(240,216,48)" fg:x="25815" fg:w="1078"/><text x="91.0917%" y="191.50">ic_..</text></g><g><title>imrc_hashmap::batch_get_5_::{{closure}} (27,904 instructions, 98.15%)</title><rect x="0.7386%" y="197" width="98.1464%" height="15" fill="rgb(214,65,14)" fg:x="210" fg:w="27904"/><text x="1.0316%" y="207.50">imrc_hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="98.8850%" y="197" width="0.0422%" height="15" fill="rgb(217,167,20)" fg:x="28114" fg:w="12"/><text x="99.1780%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="98.9272%" y="197" width="0.2849%" height="15" fill="rgb(244,164,5)" fg:x="28126" fg:w="81"/><text x="99.2202%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.44%)</title><rect x="99.2121%" y="197" width="0.4432%" height="15" fill="rgb(231,86,47)" fg:x="28207" fg:w="126"/><text x="99.5051%" y="207.50"></text></g><g><title>all (28,431 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,12,44)" fg:x="0" fg:w="28431"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (28,431 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,220,11)" fg:x="0" fg:w="28431"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>