<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="38439"><g><title>ic_cdk::setup (24 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0624%" height="15" fill="rgb(247,66,9)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.31%)</title><rect x="0.0624%" y="197" width="0.3148%" height="15" fill="rgb(215,37,7)" fg:x="24" fg:w="121"/><text x="0.3554%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.20%)</title><rect x="0.3772%" y="197" width="0.2003%" height="15" fill="rgb(241,133,17)" fg:x="145" fg:w="77"/><text x="0.6702%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="0.5775%" y="165" width="0.2367%" height="15" fill="rgb(217,211,51)" fg:x="222" fg:w="91"/><text x="0.8705%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="0.8143%" y="149" width="0.2133%" height="15" fill="rgb(213,67,47)" fg:x="313" fg:w="82"/><text x="1.1072%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.0276%" y="133" width="0.0156%" height="15" fill="rgb(214,79,33)" fg:x="395" fg:w="6"/><text x="1.3206%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.14%)</title><rect x="1.0276%" y="149" width="1.1447%" height="15" fill="rgb(212,111,29)" fg:x="395" fg:w="440"/><text x="1.3206%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="2.1723%" y="149" width="0.2471%" height="15" fill="rgb(230,228,3)" fg:x="835" fg:w="95"/><text x="2.4652%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.4194%" y="149" width="0.1561%" height="15" fill="rgb(210,14,10)" fg:x="930" fg:w="60"/><text x="2.7124%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.5755%" y="149" width="0.1561%" height="15" fill="rgb(210,83,9)" fg:x="990" fg:w="60"/><text x="2.8685%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.7316%" y="149" width="0.1561%" height="15" fill="rgb(216,175,40)" fg:x="1050" fg:w="60"/><text x="3.0246%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.8877%" y="149" width="0.1561%" height="15" fill="rgb(206,19,28)" fg:x="1110" fg:w="60"/><text x="3.1807%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="3.0438%" y="149" width="0.2133%" height="15" fill="rgb(224,9,17)" fg:x="1170" fg:w="82"/><text x="3.3368%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="3.2571%" y="149" width="0.1821%" height="15" fill="rgb(207,99,28)" fg:x="1252" fg:w="70"/><text x="3.5501%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.4392%" y="133" width="0.0156%" height="15" fill="rgb(214,219,44)" fg:x="1322" fg:w="6"/><text x="3.7322%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.14%)</title><rect x="3.4392%" y="149" width="1.1447%" height="15" fill="rgb(236,20,15)" fg:x="1322" fg:w="440"/><text x="3.7322%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.5839%" y="149" width="0.0494%" height="15" fill="rgb(234,120,47)" fg:x="1762" fg:w="19"/><text x="4.8769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="4.6333%" y="133" width="0.2367%" height="15" fill="rgb(216,174,1)" fg:x="1781" fg:w="91"/><text x="4.9263%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.17%)</title><rect x="4.8701%" y="101" width="0.1743%" height="15" fill="rgb(243,139,40)" fg:x="1872" fg:w="67"/><text x="5.1630%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.25%)</title><rect x="4.8701%" y="117" width="0.2549%" height="15" fill="rgb(249,86,49)" fg:x="1872" fg:w="98"/><text x="5.1630%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="5.1250%" y="69" width="0.0286%" height="15" fill="rgb(220,114,16)" fg:x="1970" fg:w="11"/><text x="5.4180%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="5.1536%" y="53" width="0.0911%" height="15" fill="rgb(218,152,49)" fg:x="1981" fg:w="35"/><text x="5.4466%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.17%)</title><rect x="5.1536%" y="69" width="0.1717%" height="15" fill="rgb(243,151,23)" fg:x="1981" fg:w="66"/><text x="5.4466%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.38%)</title><rect x="5.1250%" y="85" width="0.3824%" height="15" fill="rgb(246,186,9)" fg:x="1970" fg:w="147"/><text x="5.4180%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.55%)</title><rect x="5.1250%" y="101" width="0.5515%" height="15" fill="rgb(221,171,41)" fg:x="1970" fg:w="212"/><text x="5.4180%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.58%)</title><rect x="5.1250%" y="117" width="0.5775%" height="15" fill="rgb(212,7,11)" fg:x="1970" fg:w="222"/><text x="5.4180%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 1.20%)</title><rect x="4.8701%" y="133" width="1.1993%" height="15" fill="rgb(250,177,39)" fg:x="1872" fg:w="461"/><text x="5.1630%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 1.81%)</title><rect x="4.6333%" y="149" width="1.8133%" height="15" fill="rgb(213,100,28)" fg:x="1781" fg:w="697"/><text x="4.9263%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="6.4466%" y="149" width="0.2471%" height="15" fill="rgb(210,101,43)" fg:x="2478" fg:w="95"/><text x="6.7395%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="6.6937%" y="149" width="0.1639%" height="15" fill="rgb(239,20,29)" fg:x="2573" fg:w="63"/><text x="6.9867%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="6.8576%" y="149" width="0.1977%" height="15" fill="rgb(226,122,43)" fg:x="2636" fg:w="76"/><text x="7.1506%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="7.0553%" y="149" width="0.1821%" height="15" fill="rgb(240,200,32)" fg:x="2712" fg:w="70"/><text x="7.3483%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="7.2374%" y="117" width="0.0156%" height="15" fill="rgb(241,155,34)" fg:x="2782" fg:w="6"/><text x="7.5304%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.14%)</title><rect x="7.2374%" y="133" width="1.1447%" height="15" fill="rgb(249,207,14)" fg:x="2782" fg:w="440"/><text x="7.5304%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="8.3821%" y="133" width="0.0494%" height="15" fill="rgb(210,89,31)" fg:x="3222" fg:w="19"/><text x="8.6751%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="8.4315%" y="117" width="0.2367%" height="15" fill="rgb(209,23,31)" fg:x="3241" fg:w="91"/><text x="8.7245%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.17%)</title><rect x="8.6683%" y="85" width="0.1743%" height="15" fill="rgb(247,94,52)" fg:x="3332" fg:w="67"/><text x="8.9612%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.25%)</title><rect x="8.6683%" y="101" width="0.2549%" height="15" fill="rgb(218,220,7)" fg:x="3332" fg:w="98"/><text x="8.9612%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="8.9232%" y="53" width="0.0286%" height="15" fill="rgb(232,18,22)" fg:x="3430" fg:w="11"/><text x="9.2162%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="8.9518%" y="37" width="0.0911%" height="15" fill="rgb(215,5,14)" fg:x="3441" fg:w="35"/><text x="9.2448%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.17%)</title><rect x="8.9518%" y="53" width="0.1717%" height="15" fill="rgb(205,130,36)" fg:x="3441" fg:w="66"/><text x="9.2448%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.38%)</title><rect x="8.9232%" y="69" width="0.3824%" height="15" fill="rgb(212,96,6)" fg:x="3430" fg:w="147"/><text x="9.2162%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.55%)</title><rect x="8.9232%" y="85" width="0.5515%" height="15" fill="rgb(207,137,28)" fg:x="3430" fg:w="212"/><text x="9.2162%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.58%)</title><rect x="8.9232%" y="101" width="0.5775%" height="15" fill="rgb(220,127,33)" fg:x="3430" fg:w="222"/><text x="9.2162%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 1.20%)</title><rect x="8.6683%" y="117" width="1.1993%" height="15" fill="rgb(228,137,18)" fg:x="3332" fg:w="461"/><text x="8.9612%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 1.81%)</title><rect x="8.4315%" y="133" width="1.8133%" height="15" fill="rgb(231,1,52)" fg:x="3241" fg:w="697"/><text x="8.7245%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="10.2448%" y="133" width="0.2471%" height="15" fill="rgb(243,69,25)" fg:x="3938" fg:w="95"/><text x="10.5378%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="10.4919%" y="133" width="0.1639%" height="15" fill="rgb(228,45,52)" fg:x="4033" fg:w="63"/><text x="10.7849%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="10.6558%" y="117" width="0.2133%" height="15" fill="rgb(251,15,7)" fg:x="4096" fg:w="82"/><text x="10.9488%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.25%)</title><rect x="10.8692%" y="117" width="0.2471%" height="15" fill="rgb(212,39,38)" fg:x="4178" fg:w="95"/><text x="11.1621%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="11.1163%" y="117" width="0.1977%" height="15" fill="rgb(209,225,0)" fg:x="4273" fg:w="76"/><text x="11.4093%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.86%)</title><rect x="10.6558%" y="133" width="0.8585%" height="15" fill="rgb(209,37,16)" fg:x="4096" fg:w="330"/><text x="10.9488%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="11.5143%" y="133" width="0.2367%" height="15" fill="rgb(246,111,39)" fg:x="4426" fg:w="91"/><text x="11.8073%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,980 instructions, 5.15%)</title><rect x="7.2374%" y="149" width="5.1510%" height="15" fill="rgb(221,59,52)" fg:x="2782" fg:w="1980"/><text x="7.5304%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="12.3885%" y="149" width="0.1977%" height="15" fill="rgb(213,132,2)" fg:x="4762" fg:w="76"/><text x="12.6814%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.5862%" y="149" width="0.0390%" height="15" fill="rgb(223,69,53)" fg:x="4838" fg:w="15"/><text x="12.8791%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.6252%" y="149" width="0.0390%" height="15" fill="rgb(230,161,8)" fg:x="4853" fg:w="15"/><text x="12.9182%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="12.6642%" y="149" width="0.0234%" height="15" fill="rgb(207,9,17)" fg:x="4868" fg:w="9"/><text x="12.9572%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.05%)</title><rect x="12.6876%" y="149" width="0.0468%" height="15" fill="rgb(243,62,31)" fg:x="4877" fg:w="18"/><text x="12.9806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="12.7345%" y="133" width="0.2367%" height="15" fill="rgb(248,73,22)" fg:x="4895" fg:w="91"/><text x="13.0274%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.49%)</title><rect x="12.7345%" y="149" width="0.4865%" height="15" fill="rgb(213,133,50)" fg:x="4895" fg:w="187"/><text x="13.0274%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.2209%" y="101" width="0.2367%" height="15" fill="rgb(207,20,4)" fg:x="5082" fg:w="91"/><text x="13.5139%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.28%)</title><rect x="13.2209%" y="117" width="0.2758%" height="15" fill="rgb(209,121,1)" fg:x="5082" fg:w="106"/><text x="13.5139%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.39%)</title><rect x="13.2209%" y="133" width="0.3902%" height="15" fill="rgb(214,39,40)" fg:x="5082" fg:w="150"/><text x="13.5139%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (232 instructions, 0.60%)</title><rect x="13.2209%" y="149" width="0.6036%" height="15" fill="rgb(237,82,36)" fg:x="5082" fg:w="232"/><text x="13.5139%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.8245%" y="149" width="0.2367%" height="15" fill="rgb(245,157,35)" fg:x="5314" fg:w="91"/><text x="14.1175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="14.0612%" y="149" width="0.2237%" height="15" fill="rgb(233,104,28)" fg:x="5405" fg:w="86"/><text x="14.3542%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.2850%" y="149" width="0.2367%" height="15" fill="rgb(217,64,40)" fg:x="5491" fg:w="91"/><text x="14.5779%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.5217%" y="149" width="0.2367%" height="15" fill="rgb(239,168,17)" fg:x="5582" fg:w="91"/><text x="14.8147%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="14.7584%" y="149" width="0.0104%" height="15" fill="rgb(226,130,20)" fg:x="5673" fg:w="4"/><text x="15.0514%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="14.7689%" y="149" width="0.2237%" height="15" fill="rgb(244,174,8)" fg:x="5677" fg:w="86"/><text x="15.0618%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.11%)</title><rect x="14.9926%" y="149" width="1.1135%" height="15" fill="rgb(233,63,23)" fg:x="5763" fg:w="428"/><text x="15.2856%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.11%)</title><rect x="16.1060%" y="149" width="1.1135%" height="15" fill="rgb(254,179,15)" fg:x="6191" fg:w="428"/><text x="16.3990%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,453 instructions, 19.39%)</title><rect x="0.8143%" y="165" width="19.3892%" height="15" fill="rgb(205,205,44)" fg:x="313" fg:w="7453"/><text x="1.1072%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (380 instructions, 0.99%)</title><rect x="20.2034%" y="165" width="0.9886%" height="15" fill="rgb(217,75,37)" fg:x="7766" fg:w="380"/><text x="20.4964%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="21.1920%" y="149" width="0.0364%" height="15" fill="rgb(226,65,28)" fg:x="8146" fg:w="14"/><text x="21.4850%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.16%)</title><rect x="21.1920%" y="165" width="0.1639%" height="15" fill="rgb(222,105,34)" fg:x="8146" fg:w="63"/><text x="21.4850%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="21.3559%" y="165" width="0.2367%" height="15" fill="rgb(254,34,32)" fg:x="8209" fg:w="91"/><text x="21.6489%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="21.5927%" y="149" width="0.0364%" height="15" fill="rgb(210,165,43)" fg:x="8300" fg:w="14"/><text x="21.8856%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="21.6291%" y="133" width="0.1535%" height="15" fill="rgb(230,161,30)" fg:x="8314" fg:w="59"/><text x="21.9220%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.24%)</title><rect x="21.7826%" y="133" width="0.2445%" height="15" fill="rgb(226,12,11)" fg:x="8373" fg:w="94"/><text x="22.0755%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.45%)</title><rect x="22.0271%" y="133" width="0.4501%" height="15" fill="rgb(236,29,13)" fg:x="8467" fg:w="173"/><text x="22.3201%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.51%)</title><rect x="21.6291%" y="149" width="1.5063%" height="15" fill="rgb(224,54,3)" fg:x="8314" fg:w="579"/><text x="21.9220%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 2.14%)</title><rect x="21.5927%" y="165" width="2.1359%" height="15" fill="rgb(244,127,48)" fg:x="8300" fg:w="821"/><text x="21.8856%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="23.7285%" y="165" width="0.2367%" height="15" fill="rgb(248,118,14)" fg:x="9121" fg:w="91"/><text x="24.0215%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="23.9652%" y="149" width="0.0364%" height="15" fill="rgb(247,113,25)" fg:x="9212" fg:w="14"/><text x="24.2582%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="24.0017%" y="133" width="0.1535%" height="15" fill="rgb(242,117,20)" fg:x="9226" fg:w="59"/><text x="24.2946%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.24%)</title><rect x="24.1552%" y="133" width="0.2445%" height="15" fill="rgb(250,135,44)" fg:x="9285" fg:w="94"/><text x="24.4481%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.45%)</title><rect x="24.3997%" y="133" width="0.4501%" height="15" fill="rgb(244,145,49)" fg:x="9379" fg:w="173"/><text x="24.6927%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.51%)</title><rect x="24.0017%" y="149" width="1.5063%" height="15" fill="rgb(230,160,30)" fg:x="9226" fg:w="579"/><text x="24.2946%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.20%)</title><rect x="25.5079%" y="149" width="0.2003%" height="15" fill="rgb(220,52,2)" fg:x="9805" fg:w="77"/><text x="25.8009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="25.7083%" y="133" width="0.2237%" height="15" fill="rgb(217,169,9)" fg:x="9882" fg:w="86"/><text x="26.0012%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.31%)</title><rect x="25.7083%" y="149" width="0.3148%" height="15" fill="rgb(250,145,19)" fg:x="9882" fg:w="121"/><text x="26.0012%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 2.57%)</title><rect x="23.9652%" y="165" width="2.5651%" height="15" fill="rgb(221,106,0)" fg:x="9212" fg:w="986"/><text x="24.2582%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="26.5303%" y="117" width="0.1535%" height="15" fill="rgb(207,60,0)" fg:x="10198" fg:w="59"/><text x="26.8233%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.24%)</title><rect x="26.5303%" y="133" width="0.2445%" height="15" fill="rgb(245,226,39)" fg:x="10198" fg:w="94"/><text x="26.8233%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.82%)</title><rect x="26.5303%" y="149" width="0.8195%" height="15" fill="rgb(245,12,37)" fg:x="10198" fg:w="315"/><text x="26.8233%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.896 (18 instructions, 0.05%)</title><rect x="27.3498%" y="149" width="0.0468%" height="15" fill="rgb(220,219,0)" fg:x="10513" fg:w="18"/><text x="27.6428%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="27.3967%" y="149" width="0.0338%" height="15" fill="rgb(252,190,20)" fg:x="10531" fg:w="13"/><text x="27.6896%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.43%)</title><rect x="26.5303%" y="165" width="1.4334%" height="15" fill="rgb(229,194,4)" fg:x="10198" fg:w="551"/><text x="26.8233%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.14%)</title><rect x="27.9638%" y="165" width="0.1379%" height="15" fill="rgb(230,59,0)" fg:x="10749" fg:w="53"/><text x="28.2568%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.34%)</title><rect x="28.1017%" y="149" width="0.3434%" height="15" fill="rgb(240,104,43)" fg:x="10802" fg:w="132"/><text x="28.3946%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.34%)</title><rect x="28.5361%" y="149" width="0.3434%" height="15" fill="rgb(252,112,34)" fg:x="10969" fg:w="132"/><text x="28.8291%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.87%)</title><rect x="28.1017%" y="165" width="0.8689%" height="15" fill="rgb(242,199,17)" fg:x="10802" fg:w="334"/><text x="28.3946%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.09%)</title><rect x="28.9706%" y="149" width="0.0885%" height="15" fill="rgb(207,157,20)" fg:x="11136" fg:w="34"/><text x="29.2635%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (18 instructions, 0.05%)</title><rect x="29.0590%" y="149" width="0.0468%" height="15" fill="rgb(225,212,0)" fg:x="11170" fg:w="18"/><text x="29.3520%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2153 (18 instructions, 0.05%)</title><rect x="29.1059%" y="149" width="0.0468%" height="15" fill="rgb(224,227,25)" fg:x="11188" fg:w="18"/><text x="29.3988%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.44%)</title><rect x="28.9706%" y="165" width="0.4397%" height="15" fill="rgb(228,41,33)" fg:x="11136" fg:w="169"/><text x="29.2635%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4102%" y="165" width="0.0338%" height="15" fill="rgb(246,141,24)" fg:x="11305" fg:w="13"/><text x="29.7032%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4441%" y="165" width="0.0338%" height="15" fill="rgb(221,50,31)" fg:x="11318" fg:w="13"/><text x="29.7370%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4779%" y="165" width="0.0338%" height="15" fill="rgb(232,49,26)" fg:x="11331" fg:w="13"/><text x="29.7708%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.14%)</title><rect x="29.5117%" y="165" width="1.1447%" height="15" fill="rgb(237,64,42)" fg:x="11344" fg:w="440"/><text x="29.8047%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.05%)</title><rect x="30.6564%" y="133" width="0.0494%" height="15" fill="rgb(211,51,41)" fg:x="11784" fg:w="19"/><text x="30.9493%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.47%)</title><rect x="30.7058%" y="133" width="0.4709%" height="15" fill="rgb(243,141,31)" fg:x="11803" fg:w="181"/><text x="30.9988%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.17%)</title><rect x="31.1767%" y="101" width="0.1743%" height="15" fill="rgb(253,206,34)" fg:x="11984" fg:w="67"/><text x="31.4696%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.60%)</title><rect x="31.1767%" y="117" width="0.5984%" height="15" fill="rgb(223,28,53)" fg:x="11984" fg:w="230"/><text x="31.4696%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265 instructions, 0.69%)</title><rect x="31.1767%" y="133" width="0.6894%" height="15" fill="rgb(225,105,38)" fg:x="11984" fg:w="265"/><text x="31.4696%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="31.8661%" y="133" width="0.0338%" height="15" fill="rgb(242,191,26)" fg:x="12249" fg:w="13"/><text x="32.1590%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (540 instructions, 1.40%)</title><rect x="30.6564%" y="149" width="1.4048%" height="15" fill="rgb(248,204,2)" fg:x="11784" fg:w="540"/><text x="30.9493%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (589 instructions, 1.53%)</title><rect x="30.6564%" y="165" width="1.5323%" height="15" fill="rgb(242,67,16)" fg:x="11784" fg:w="589"/><text x="30.9493%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.16%)</title><rect x="32.1887%" y="149" width="0.1613%" height="15" fill="rgb(231,84,28)" fg:x="12373" fg:w="62"/><text x="32.4816%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.17%)</title><rect x="32.3500%" y="149" width="0.1743%" height="15" fill="rgb(210,65,34)" fg:x="12435" fg:w="67"/><text x="32.6429%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.59%)</title><rect x="32.1887%" y="165" width="0.5931%" height="15" fill="rgb(219,87,35)" fg:x="12373" fg:w="228"/><text x="32.4816%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,847 instructions, 36.02%)</title><rect x="0.5775%" y="181" width="36.0233%" height="15" fill="rgb(210,219,53)" fg:x="222" fg:w="13847"/><text x="0.8705%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (25 instructions, 0.07%)</title><rect x="36.6008%" y="181" width="0.0650%" height="15" fill="rgb(229,57,53)" fg:x="14069" fg:w="25"/><text x="36.8938%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="36.6659%" y="181" width="0.5099%" height="15" fill="rgb(227,31,39)" fg:x="14094" fg:w="196"/><text x="36.9589%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="37.1758%" y="181" width="0.5099%" height="15" fill="rgb(240,70,21)" fg:x="14290" fg:w="196"/><text x="37.4688%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="37.6857%" y="181" width="0.5099%" height="15" fill="rgb(224,51,8)" fg:x="14486" fg:w="196"/><text x="37.9787%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="38.1956%" y="181" width="0.5099%" height="15" fill="rgb(235,1,35)" fg:x="14682" fg:w="196"/><text x="38.4886%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="38.7055%" y="181" width="0.5099%" height="15" fill="rgb(231,41,22)" fg:x="14878" fg:w="196"/><text x="38.9985%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="39.2154%" y="181" width="0.5099%" height="15" fill="rgb(250,194,10)" fg:x="15074" fg:w="196"/><text x="39.5083%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="39.7253%" y="181" width="0.5099%" height="15" fill="rgb(231,145,42)" fg:x="15270" fg:w="196"/><text x="40.0182%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="40.2352%" y="181" width="0.5099%" height="15" fill="rgb(222,171,40)" fg:x="15466" fg:w="196"/><text x="40.5281%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="40.7451%" y="181" width="0.5099%" height="15" fill="rgb(253,151,42)" fg:x="15662" fg:w="196"/><text x="41.0380%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="41.2550%" y="181" width="0.5099%" height="15" fill="rgb(234,164,34)" fg:x="15858" fg:w="196"/><text x="41.5479%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="41.7649%" y="181" width="0.5099%" height="15" fill="rgb(216,15,19)" fg:x="16054" fg:w="196"/><text x="42.0578%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="42.2748%" y="181" width="0.5099%" height="15" fill="rgb(231,6,11)" fg:x="16250" fg:w="196"/><text x="42.5677%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="42.7847%" y="181" width="0.5099%" height="15" fill="rgb(245,26,18)" fg:x="16446" fg:w="196"/><text x="43.0776%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="43.2946%" y="181" width="0.5099%" height="15" fill="rgb(221,150,4)" fg:x="16642" fg:w="196"/><text x="43.5875%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="43.8045%" y="181" width="0.5099%" height="15" fill="rgb(210,120,28)" fg:x="16838" fg:w="196"/><text x="44.0974%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="44.3144%" y="181" width="0.5099%" height="15" fill="rgb(219,104,48)" fg:x="17034" fg:w="196"/><text x="44.6073%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="44.8243%" y="181" width="0.5099%" height="15" fill="rgb(208,108,30)" fg:x="17230" fg:w="196"/><text x="45.1172%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="45.3342%" y="181" width="0.5099%" height="15" fill="rgb(229,221,51)" fg:x="17426" fg:w="196"/><text x="45.6271%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="45.8441%" y="181" width="0.5099%" height="15" fill="rgb(210,208,49)" fg:x="17622" fg:w="196"/><text x="46.1370%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="46.3540%" y="181" width="0.5099%" height="15" fill="rgb(222,226,1)" fg:x="17818" fg:w="196"/><text x="46.6469%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="46.8639%" y="181" width="0.5099%" height="15" fill="rgb(206,130,53)" fg:x="18014" fg:w="196"/><text x="47.1568%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="47.3738%" y="181" width="0.5099%" height="15" fill="rgb(205,31,34)" fg:x="18210" fg:w="196"/><text x="47.6667%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="47.8837%" y="181" width="0.5099%" height="15" fill="rgb(253,217,47)" fg:x="18406" fg:w="196"/><text x="48.1766%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="48.3936%" y="181" width="0.5099%" height="15" fill="rgb(249,227,18)" fg:x="18602" fg:w="196"/><text x="48.6865%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="48.9035%" y="181" width="0.5099%" height="15" fill="rgb(215,105,7)" fg:x="18798" fg:w="196"/><text x="49.1964%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="49.4134%" y="181" width="0.5099%" height="15" fill="rgb(233,169,45)" fg:x="18994" fg:w="196"/><text x="49.7063%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="49.9233%" y="181" width="0.5099%" height="15" fill="rgb(230,125,44)" fg:x="19190" fg:w="196"/><text x="50.2162%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="50.4332%" y="181" width="0.5099%" height="15" fill="rgb(251,214,33)" fg:x="19386" fg:w="196"/><text x="50.7261%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="50.9431%" y="181" width="0.5099%" height="15" fill="rgb(217,228,44)" fg:x="19582" fg:w="196"/><text x="51.2360%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="51.4530%" y="181" width="0.5099%" height="15" fill="rgb(208,92,40)" fg:x="19778" fg:w="196"/><text x="51.7459%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="51.9629%" y="181" width="0.5099%" height="15" fill="rgb(238,191,47)" fg:x="19974" fg:w="196"/><text x="52.2558%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="52.4727%" y="181" width="0.5099%" height="15" fill="rgb(207,11,45)" fg:x="20170" fg:w="196"/><text x="52.7657%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="52.9826%" y="181" width="0.5099%" height="15" fill="rgb(241,149,0)" fg:x="20366" fg:w="196"/><text x="53.2756%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="53.4925%" y="181" width="0.5099%" height="15" fill="rgb(227,168,17)" fg:x="20562" fg:w="196"/><text x="53.7855%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="54.0024%" y="181" width="0.5099%" height="15" fill="rgb(235,178,48)" fg:x="20758" fg:w="196"/><text x="54.2954%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="54.5123%" y="181" width="0.5099%" height="15" fill="rgb(252,8,5)" fg:x="20954" fg:w="196"/><text x="54.8053%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="55.0222%" y="181" width="0.5099%" height="15" fill="rgb(217,58,15)" fg:x="21150" fg:w="196"/><text x="55.3152%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="55.5321%" y="181" width="0.5099%" height="15" fill="rgb(225,194,26)" fg:x="21346" fg:w="196"/><text x="55.8251%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="56.0420%" y="181" width="0.5099%" height="15" fill="rgb(219,22,50)" fg:x="21542" fg:w="196"/><text x="56.3350%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="56.5519%" y="181" width="0.5099%" height="15" fill="rgb(218,213,32)" fg:x="21738" fg:w="196"/><text x="56.8449%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="57.0618%" y="181" width="0.5099%" height="15" fill="rgb(224,194,0)" fg:x="21934" fg:w="196"/><text x="57.3548%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="57.5717%" y="181" width="0.5099%" height="15" fill="rgb(219,17,35)" fg:x="22130" fg:w="196"/><text x="57.8647%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="58.0816%" y="181" width="0.5099%" height="15" fill="rgb(226,208,25)" fg:x="22326" fg:w="196"/><text x="58.3746%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="58.5915%" y="181" width="0.5099%" height="15" fill="rgb(253,30,36)" fg:x="22522" fg:w="196"/><text x="58.8845%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="59.1014%" y="181" width="0.5099%" height="15" fill="rgb(242,182,40)" fg:x="22718" fg:w="196"/><text x="59.3944%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="59.6113%" y="181" width="0.5099%" height="15" fill="rgb(241,139,51)" fg:x="22914" fg:w="196"/><text x="59.9043%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="60.1212%" y="181" width="0.5099%" height="15" fill="rgb(232,58,6)" fg:x="23110" fg:w="196"/><text x="60.4142%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="60.6311%" y="181" width="0.5099%" height="15" fill="rgb(220,84,41)" fg:x="23306" fg:w="196"/><text x="60.9241%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="61.1410%" y="181" width="0.5099%" height="15" fill="rgb(240,200,52)" fg:x="23502" fg:w="196"/><text x="61.4340%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="61.6509%" y="181" width="0.5099%" height="15" fill="rgb(239,12,29)" fg:x="23698" fg:w="196"/><text x="61.9439%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="62.1608%" y="149" width="0.0364%" height="15" fill="rgb(239,158,48)" fg:x="23894" fg:w="14"/><text x="62.4538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.16%)</title><rect x="62.1972%" y="117" width="0.1613%" height="15" fill="rgb(211,115,26)" fg:x="23908" fg:w="62"/><text x="62.4902%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (159 instructions, 0.41%)</title><rect x="62.1972%" y="133" width="0.4136%" height="15" fill="rgb(225,112,31)" fg:x="23908" fg:w="159"/><text x="62.4902%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (194 instructions, 0.50%)</title><rect x="62.1972%" y="149" width="0.5047%" height="15" fill="rgb(212,83,21)" fg:x="23908" fg:w="194"/><text x="62.4902%" y="159.50"></text></g><g><title>memset (152 instructions, 0.40%)</title><rect x="62.7019%" y="149" width="0.3954%" height="15" fill="rgb(246,125,6)" fg:x="24102" fg:w="152"/><text x="62.9949%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (540 instructions, 1.40%)</title><rect x="62.1608%" y="165" width="1.4048%" height="15" fill="rgb(248,154,27)" fg:x="23894" fg:w="540"/><text x="62.4538%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.35%)</title><rect x="63.5656%" y="149" width="1.3476%" height="15" fill="rgb(239,194,17)" fg:x="24434" fg:w="518"/><text x="63.8586%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="64.9132%" y="85" width="0.2367%" height="15" fill="rgb(239,182,11)" fg:x="24952" fg:w="91"/><text x="65.2062%" y="95.50"></text></g><g><title>__rust_alloc (106 instructions, 0.28%)</title><rect x="64.9132%" y="101" width="0.2758%" height="15" fill="rgb(234,210,43)" fg:x="24952" fg:w="106"/><text x="65.2062%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.39%)</title><rect x="64.9132%" y="117" width="0.3902%" height="15" fill="rgb(212,172,12)" fg:x="24952" fg:w="150"/><text x="65.2062%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (229 instructions, 0.60%)</title><rect x="64.9132%" y="133" width="0.5957%" height="15" fill="rgb(214,13,23)" fg:x="24952" fg:w="229"/><text x="65.2062%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="65.5090%" y="133" width="0.0390%" height="15" fill="rgb(251,47,23)" fg:x="25181" fg:w="15"/><text x="65.8020%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="65.5480%" y="133" width="0.0390%" height="15" fill="rgb(224,167,37)" fg:x="25196" fg:w="15"/><text x="65.8410%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (447 instructions, 1.16%)</title><rect x="64.9132%" y="149" width="1.1629%" height="15" fill="rgb(238,224,51)" fg:x="24952" fg:w="447"/><text x="65.2062%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.34%)</title><rect x="66.0761%" y="149" width="1.3424%" height="15" fill="rgb(212,125,43)" fg:x="25399" fg:w="516"/><text x="66.3691%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.02%)</title><rect x="67.4185%" y="149" width="0.0182%" height="15" fill="rgb(210,137,6)" fg:x="25915" fg:w="7"/><text x="67.7115%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,581 instructions, 4.11%)</title><rect x="63.5656%" y="165" width="4.1130%" height="15" fill="rgb(245,127,7)" fg:x="24434" fg:w="1581"/><text x="63.8586%" y="175.50">can..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.02%)</title><rect x="67.6787%" y="165" width="0.0156%" height="15" fill="rgb(240,177,10)" fg:x="26015" fg:w="6"/><text x="67.9716%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="67.6943%" y="165" width="0.1639%" height="15" fill="rgb(209,41,24)" fg:x="26021" fg:w="63"/><text x="67.9872%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,796 instructions, 7.27%)</title><rect x="62.1608%" y="181" width="7.2739%" height="15" fill="rgb(216,61,40)" fg:x="23894" fg:w="2796"/><text x="62.4538%" y="191.50">ic_cdk::..</text></g><g><title>imrc_hashmap::batch_get_5_::{{closure}} (37,837 instructions, 98.43%)</title><rect x="0.5775%" y="197" width="98.4339%" height="15" fill="rgb(231,38,1)" fg:x="222" fg:w="37837"/><text x="0.8705%" y="207.50">imrc_hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.04%)</title><rect x="99.0114%" y="197" width="0.0364%" height="15" fill="rgb(209,52,9)" fg:x="38059" fg:w="14"/><text x="99.3044%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="99.0504%" y="197" width="0.2237%" height="15" fill="rgb(238,49,39)" fg:x="38074" fg:w="86"/><text x="99.3434%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.35%)</title><rect x="99.2742%" y="197" width="0.3512%" height="15" fill="rgb(221,10,5)" fg:x="38160" fg:w="135"/><text x="99.5671%" y="207.50"></text></g><g><title>all (38,439 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,176,45)" fg:x="0" fg:w="38439"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (38,439 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,196,44)" fg:x="0" fg:w="38439"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>