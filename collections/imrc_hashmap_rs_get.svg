<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="35545"><g><title>ic_cdk::setup (24 instructions, 0.07%)</title><rect x="0.0000%" y="197" width="0.0675%" height="15" fill="rgb(207,57,50)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.0675%" y="197" width="0.2307%" height="15" fill="rgb(211,154,17)" fg:x="24" fg:w="82"/><text x="0.3605%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.2982%" y="197" width="0.2307%" height="15" fill="rgb(234,113,3)" fg:x="106" fg:w="82"/><text x="0.5912%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.5289%" y="165" width="0.2307%" height="15" fill="rgb(205,162,37)" fg:x="188" fg:w="82"/><text x="0.8219%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.23%)</title><rect x="0.7596%" y="149" width="0.2307%" height="15" fill="rgb(251,136,32)" fg:x="270" fg:w="82"/><text x="1.0526%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="0.9903%" y="133" width="0.0169%" height="15" fill="rgb(215,25,16)" fg:x="352" fg:w="6"/><text x="1.2833%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.25%)</title><rect x="0.9903%" y="149" width="1.2463%" height="15" fill="rgb(240,94,51)" fg:x="352" fg:w="443"/><text x="1.2833%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.27%)</title><rect x="2.2366%" y="149" width="0.2673%" height="15" fill="rgb(206,105,49)" fg:x="795" fg:w="95"/><text x="2.5296%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.17%)</title><rect x="2.5039%" y="149" width="0.1688%" height="15" fill="rgb(215,120,5)" fg:x="890" fg:w="60"/><text x="2.7968%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.17%)</title><rect x="2.6727%" y="149" width="0.1688%" height="15" fill="rgb(246,159,36)" fg:x="950" fg:w="60"/><text x="2.9656%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.17%)</title><rect x="2.8415%" y="149" width="0.1688%" height="15" fill="rgb(217,102,28)" fg:x="1010" fg:w="60"/><text x="3.1344%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.17%)</title><rect x="3.0103%" y="149" width="0.1688%" height="15" fill="rgb(217,139,13)" fg:x="1070" fg:w="60"/><text x="3.3032%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.23%)</title><rect x="3.1791%" y="149" width="0.2307%" height="15" fill="rgb(232,209,23)" fg:x="1130" fg:w="82"/><text x="3.4720%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.20%)</title><rect x="3.4098%" y="149" width="0.1969%" height="15" fill="rgb(228,10,9)" fg:x="1212" fg:w="70"/><text x="3.7027%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.6067%" y="133" width="0.0169%" height="15" fill="rgb(226,205,11)" fg:x="1282" fg:w="6"/><text x="3.8997%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.25%)</title><rect x="3.6067%" y="149" width="1.2463%" height="15" fill="rgb(226,96,9)" fg:x="1282" fg:w="443"/><text x="3.8997%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.8530%" y="149" width="0.0535%" height="15" fill="rgb(216,64,45)" fg:x="1725" fg:w="19"/><text x="5.1460%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="4.9065%" y="133" width="0.2307%" height="15" fill="rgb(214,17,38)" fg:x="1744" fg:w="82"/><text x="5.1994%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.19%)</title><rect x="5.1372%" y="101" width="0.1885%" height="15" fill="rgb(240,211,4)" fg:x="1826" fg:w="67"/><text x="5.4301%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.27%)</title><rect x="5.1372%" y="117" width="0.2701%" height="15" fill="rgb(215,63,10)" fg:x="1826" fg:w="96"/><text x="5.4301%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="5.4072%" y="69" width="0.0309%" height="15" fill="rgb(206,97,39)" fg:x="1922" fg:w="11"/><text x="5.7002%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.10%)</title><rect x="5.4382%" y="53" width="0.0985%" height="15" fill="rgb(229,137,39)" fg:x="1933" fg:w="35"/><text x="5.7311%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.18%)</title><rect x="5.4382%" y="69" width="0.1801%" height="15" fill="rgb(226,108,36)" fg:x="1933" fg:w="64"/><text x="5.7311%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.41%)</title><rect x="5.4072%" y="85" width="0.4051%" height="15" fill="rgb(242,78,24)" fg:x="1922" fg:w="144"/><text x="5.7002%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.59%)</title><rect x="5.4072%" y="101" width="0.5880%" height="15" fill="rgb(228,225,49)" fg:x="1922" fg:w="209"/><text x="5.7002%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.62%)</title><rect x="5.4072%" y="117" width="0.6161%" height="15" fill="rgb(212,208,24)" fg:x="1922" fg:w="219"/><text x="5.7002%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.29%)</title><rect x="5.1372%" y="133" width="1.2857%" height="15" fill="rgb(231,104,6)" fg:x="1826" fg:w="457"/><text x="5.4301%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.90%)</title><rect x="4.9065%" y="149" width="1.9046%" height="15" fill="rgb(215,90,2)" fg:x="1744" fg:w="677"/><text x="5.1994%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.27%)</title><rect x="6.8111%" y="149" width="0.2673%" height="15" fill="rgb(236,73,21)" fg:x="2421" fg:w="95"/><text x="7.1041%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.17%)</title><rect x="7.0784%" y="149" width="0.1688%" height="15" fill="rgb(237,84,14)" fg:x="2516" fg:w="60"/><text x="7.3713%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.21%)</title><rect x="7.2472%" y="149" width="0.2138%" height="15" fill="rgb(243,144,42)" fg:x="2576" fg:w="76"/><text x="7.5401%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.20%)</title><rect x="7.4610%" y="149" width="0.1969%" height="15" fill="rgb(224,142,24)" fg:x="2652" fg:w="70"/><text x="7.7539%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="7.6579%" y="117" width="0.0169%" height="15" fill="rgb(246,137,47)" fg:x="2722" fg:w="6"/><text x="7.9509%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.25%)</title><rect x="7.6579%" y="133" width="1.2463%" height="15" fill="rgb(251,162,3)" fg:x="2722" fg:w="443"/><text x="7.9509%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="8.9042%" y="133" width="0.0535%" height="15" fill="rgb(214,194,29)" fg:x="3165" fg:w="19"/><text x="9.1972%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="8.9577%" y="117" width="0.2307%" height="15" fill="rgb(233,205,3)" fg:x="3184" fg:w="82"/><text x="9.2506%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.19%)</title><rect x="9.1884%" y="85" width="0.1885%" height="15" fill="rgb(252,136,12)" fg:x="3266" fg:w="67"/><text x="9.4813%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.27%)</title><rect x="9.1884%" y="101" width="0.2701%" height="15" fill="rgb(225,21,32)" fg:x="3266" fg:w="96"/><text x="9.4813%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="9.4584%" y="53" width="0.0309%" height="15" fill="rgb(210,131,16)" fg:x="3362" fg:w="11"/><text x="9.7514%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.10%)</title><rect x="9.4894%" y="37" width="0.0985%" height="15" fill="rgb(212,20,40)" fg:x="3373" fg:w="35"/><text x="9.7823%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.18%)</title><rect x="9.4894%" y="53" width="0.1801%" height="15" fill="rgb(210,79,27)" fg:x="3373" fg:w="64"/><text x="9.7823%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.41%)</title><rect x="9.4584%" y="69" width="0.4051%" height="15" fill="rgb(239,190,11)" fg:x="3362" fg:w="144"/><text x="9.7514%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.59%)</title><rect x="9.4584%" y="85" width="0.5880%" height="15" fill="rgb(221,165,8)" fg:x="3362" fg:w="209"/><text x="9.7514%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.62%)</title><rect x="9.4584%" y="101" width="0.6161%" height="15" fill="rgb(205,6,48)" fg:x="3362" fg:w="219"/><text x="9.7514%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.29%)</title><rect x="9.1884%" y="117" width="1.2857%" height="15" fill="rgb(235,27,42)" fg:x="3266" fg:w="457"/><text x="9.4813%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.90%)</title><rect x="8.9577%" y="133" width="1.9046%" height="15" fill="rgb(232,91,16)" fg:x="3184" fg:w="677"/><text x="9.2506%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.27%)</title><rect x="10.8623%" y="133" width="0.2673%" height="15" fill="rgb(229,32,30)" fg:x="3861" fg:w="95"/><text x="11.1553%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.17%)</title><rect x="11.1296%" y="133" width="0.1688%" height="15" fill="rgb(221,63,5)" fg:x="3956" fg:w="60"/><text x="11.4225%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.23%)</title><rect x="11.2984%" y="117" width="0.2307%" height="15" fill="rgb(245,123,40)" fg:x="4016" fg:w="82"/><text x="11.5913%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.27%)</title><rect x="11.5290%" y="117" width="0.2673%" height="15" fill="rgb(246,40,52)" fg:x="4098" fg:w="95"/><text x="11.8220%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.21%)</title><rect x="11.7963%" y="117" width="0.2138%" height="15" fill="rgb(251,9,36)" fg:x="4193" fg:w="76"/><text x="12.0893%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.93%)</title><rect x="11.2984%" y="133" width="0.9284%" height="15" fill="rgb(251,125,36)" fg:x="4016" fg:w="330"/><text x="11.5913%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="12.2268%" y="133" width="0.2307%" height="15" fill="rgb(213,207,27)" fg:x="4346" fg:w="82"/><text x="12.5197%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 5.49%)</title><rect x="7.6579%" y="149" width="5.4916%" height="15" fill="rgb(249,213,18)" fg:x="2722" fg:w="1952"/><text x="7.9509%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.21%)</title><rect x="13.1495%" y="149" width="0.2138%" height="15" fill="rgb(230,10,47)" fg:x="4674" fg:w="76"/><text x="13.4425%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="13.3633%" y="149" width="0.0422%" height="15" fill="rgb(206,53,3)" fg:x="4750" fg:w="15"/><text x="13.6563%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="13.4055%" y="149" width="0.0422%" height="15" fill="rgb(208,197,33)" fg:x="4765" fg:w="15"/><text x="13.6985%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="13.4477%" y="149" width="0.0422%" height="15" fill="rgb(253,146,39)" fg:x="4780" fg:w="15"/><text x="13.7407%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.02%)</title><rect x="13.4899%" y="149" width="0.0169%" height="15" fill="rgb(244,170,0)" fg:x="4795" fg:w="6"/><text x="13.7829%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="13.5068%" y="133" width="0.2307%" height="15" fill="rgb(233,196,10)" fg:x="4801" fg:w="82"/><text x="13.7998%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.50%)</title><rect x="13.5068%" y="149" width="0.5008%" height="15" fill="rgb(233,28,0)" fg:x="4801" fg:w="178"/><text x="13.7998%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="14.0076%" y="117" width="0.2307%" height="15" fill="rgb(206,89,51)" fg:x="4979" fg:w="82"/><text x="14.3006%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.37%)</title><rect x="14.0076%" y="133" width="0.3657%" height="15" fill="rgb(230,160,33)" fg:x="4979" fg:w="130"/><text x="14.3006%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.60%)</title><rect x="14.0076%" y="149" width="0.6049%" height="15" fill="rgb(220,185,11)" fg:x="4979" fg:w="215"/><text x="14.3006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="14.6125%" y="149" width="0.2307%" height="15" fill="rgb(252,3,2)" fg:x="5194" fg:w="82"/><text x="14.9054%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="14.8432%" y="149" width="0.2504%" height="15" fill="rgb(247,171,49)" fg:x="5276" fg:w="89"/><text x="15.1361%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.26%)</title><rect x="15.0935%" y="149" width="0.2560%" height="15" fill="rgb(224,168,35)" fg:x="5365" fg:w="91"/><text x="15.3865%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.26%)</title><rect x="15.3496%" y="149" width="0.2560%" height="15" fill="rgb(206,53,22)" fg:x="5456" fg:w="91"/><text x="15.6425%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="15.6056%" y="149" width="0.0113%" height="15" fill="rgb(220,113,41)" fg:x="5547" fg:w="4"/><text x="15.8985%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="15.6168%" y="149" width="0.2504%" height="15" fill="rgb(225,204,46)" fg:x="5551" fg:w="89"/><text x="15.9098%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.10%)</title><rect x="15.8672%" y="149" width="1.1028%" height="15" fill="rgb(212,107,9)" fg:x="5640" fg:w="392"/><text x="16.1602%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.10%)</title><rect x="16.9700%" y="149" width="1.1028%" height="15" fill="rgb(222,175,33)" fg:x="6032" fg:w="392"/><text x="17.2630%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.42%)</title><rect x="18.0729%" y="149" width="1.4179%" height="15" fill="rgb(223,119,39)" fg:x="6424" fg:w="504"/><text x="18.3658%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,872 instructions, 22.15%)</title><rect x="0.7596%" y="165" width="22.1466%" height="15" fill="rgb(208,223,52)" fg:x="270" fg:w="7872"/><text x="1.0526%" y="175.50">candid::de::IDLDeserialize::ne..</text></g><g><title>memcpy (344 instructions, 0.97%)</title><rect x="22.9062%" y="165" width="0.9678%" height="15" fill="rgb(232,12,50)" fg:x="8142" fg:w="344"/><text x="23.1991%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.06%)</title><rect x="23.8740%" y="165" width="0.0647%" height="15" fill="rgb(240,195,24)" fg:x="8486" fg:w="23"/><text x="24.1669%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="23.9387%" y="165" width="0.2307%" height="15" fill="rgb(217,145,10)" fg:x="8509" fg:w="82"/><text x="24.2316%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.26%)</title><rect x="24.1694%" y="149" width="0.2560%" height="15" fill="rgb(216,67,22)" fg:x="8591" fg:w="91"/><text x="24.4623%" y="159.50"></text></g><g><title>candid::types::internal::env_add (174 instructions, 0.49%)</title><rect x="24.1694%" y="165" width="0.4895%" height="15" fill="rgb(242,24,27)" fg:x="8591" fg:w="174"/><text x="24.4623%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.26%)</title><rect x="24.6589%" y="165" width="0.2560%" height="15" fill="rgb(236,110,43)" fg:x="8765" fg:w="91"/><text x="24.9519%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.22%)</title><rect x="24.9149%" y="149" width="0.2166%" height="15" fill="rgb(239,80,39)" fg:x="8856" fg:w="77"/><text x="25.2079%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="25.1315%" y="133" width="0.2504%" height="15" fill="rgb(226,85,15)" fg:x="8933" fg:w="89"/><text x="25.4245%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.37%)</title><rect x="25.1315%" y="149" width="0.3742%" height="15" fill="rgb(250,161,43)" fg:x="8933" fg:w="133"/><text x="25.4245%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 1.07%)</title><rect x="24.9149%" y="165" width="1.0747%" height="15" fill="rgb(220,186,21)" fg:x="8856" fg:w="382"/><text x="25.2079%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.14%)</title><rect x="25.9896%" y="149" width="0.1435%" height="15" fill="rgb(249,178,36)" fg:x="9238" fg:w="51"/><text x="26.2826%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.04%)</title><rect x="26.1331%" y="149" width="0.0366%" height="15" fill="rgb(235,219,19)" fg:x="9289" fg:w="13"/><text x="26.4260%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.56%)</title><rect x="25.9896%" y="165" width="0.5570%" height="15" fill="rgb(228,199,29)" fg:x="9238" fg:w="198"/><text x="26.2826%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.14%)</title><rect x="26.5466%" y="165" width="0.1379%" height="15" fill="rgb(225,183,34)" fg:x="9436" fg:w="49"/><text x="26.8396%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.23%)</title><rect x="26.6845%" y="149" width="0.2335%" height="15" fill="rgb(254,130,22)" fg:x="9485" fg:w="83"/><text x="26.9775%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.06%)</title><rect x="27.0418%" y="133" width="0.0647%" height="15" fill="rgb(213,170,10)" fg:x="9612" fg:w="23"/><text x="27.3347%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.39%)</title><rect x="27.0418%" y="149" width="0.3882%" height="15" fill="rgb(207,5,35)" fg:x="9612" fg:w="138"/><text x="27.3347%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.87%)</title><rect x="26.6845%" y="165" width="0.8693%" height="15" fill="rgb(224,215,45)" fg:x="9485" fg:w="309"/><text x="26.9775%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.10%)</title><rect x="27.5538%" y="149" width="0.0985%" height="15" fill="rgb(244,193,16)" fg:x="9794" fg:w="35"/><text x="27.8468%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1330 (34 instructions, 0.10%)</title><rect x="27.6523%" y="149" width="0.0957%" height="15" fill="rgb(215,41,0)" fg:x="9829" fg:w="34"/><text x="27.9452%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1330 (34 instructions, 0.10%)</title><rect x="27.7479%" y="149" width="0.0957%" height="15" fill="rgb(251,95,41)" fg:x="9863" fg:w="34"/><text x="28.0409%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.09%)</title><rect x="27.8436%" y="149" width="0.0928%" height="15" fill="rgb(229,78,34)" fg:x="9897" fg:w="33"/><text x="28.1365%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.70%)</title><rect x="27.5538%" y="165" width="0.7033%" height="15" fill="rgb(238,11,24)" fg:x="9794" fg:w="250"/><text x="27.8468%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.04%)</title><rect x="28.2571%" y="165" width="0.0366%" height="15" fill="rgb(221,114,2)" fg:x="10044" fg:w="13"/><text x="28.5501%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.04%)</title><rect x="28.2937%" y="165" width="0.0366%" height="15" fill="rgb(231,88,16)" fg:x="10057" fg:w="13"/><text x="28.5867%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.04%)</title><rect x="28.3303%" y="165" width="0.0366%" height="15" fill="rgb(227,127,37)" fg:x="10070" fg:w="13"/><text x="28.6233%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.12%)</title><rect x="28.3669%" y="165" width="0.1210%" height="15" fill="rgb(232,133,17)" fg:x="10083" fg:w="43"/><text x="28.6598%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="28.4878%" y="149" width="0.0197%" height="15" fill="rgb(249,98,32)" fg:x="10126" fg:w="7"/><text x="28.7808%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="28.5075%" y="133" width="0.0760%" height="15" fill="rgb(233,173,47)" fg:x="10133" fg:w="27"/><text x="28.8005%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.32%)</title><rect x="28.5075%" y="149" width="0.3235%" height="15" fill="rgb(214,100,14)" fg:x="10133" fg:w="115"/><text x="28.8005%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.17%)</title><rect x="28.8311%" y="133" width="0.1688%" height="15" fill="rgb(240,48,44)" fg:x="10248" fg:w="60"/><text x="29.1240%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.29%)</title><rect x="28.8311%" y="149" width="0.2926%" height="15" fill="rgb(227,101,13)" fg:x="10248" fg:w="104"/><text x="29.1240%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.04%)</title><rect x="29.1236%" y="149" width="0.0366%" height="15" fill="rgb(241,163,32)" fg:x="10352" fg:w="13"/><text x="29.4166%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="29.1602%" y="149" width="0.0197%" height="15" fill="rgb(205,152,29)" fg:x="10365" fg:w="7"/><text x="29.4532%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (306 instructions, 0.86%)</title><rect x="28.4878%" y="165" width="0.8609%" height="15" fill="rgb(239,88,54)" fg:x="10126" fg:w="306"/><text x="28.7808%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.17%)</title><rect x="29.3487%" y="165" width="0.1688%" height="15" fill="rgb(218,54,32)" fg:x="10432" fg:w="60"/><text x="29.6417%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,873 instructions, 33.40%)</title><rect x="0.5289%" y="181" width="33.4027%" height="15" fill="rgb(245,130,44)" fg:x="188" fg:w="11873"/><text x="0.8219%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (19 instructions, 0.05%)</title><rect x="33.9316%" y="181" width="0.0535%" height="15" fill="rgb(231,138,11)" fg:x="12061" fg:w="19"/><text x="34.2246%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="33.9851%" y="181" width="0.5514%" height="15" fill="rgb(218,27,50)" fg:x="12080" fg:w="196"/><text x="34.2781%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="34.5365%" y="181" width="0.5514%" height="15" fill="rgb(227,40,31)" fg:x="12276" fg:w="196"/><text x="34.8295%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="35.0879%" y="181" width="0.5514%" height="15" fill="rgb(224,3,12)" fg:x="12472" fg:w="196"/><text x="35.3809%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="35.6393%" y="181" width="0.5514%" height="15" fill="rgb(241,182,24)" fg:x="12668" fg:w="196"/><text x="35.9323%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="36.1907%" y="181" width="0.5514%" height="15" fill="rgb(243,27,32)" fg:x="12864" fg:w="196"/><text x="36.4837%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="36.7422%" y="181" width="0.5514%" height="15" fill="rgb(250,144,34)" fg:x="13060" fg:w="196"/><text x="37.0351%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="37.2936%" y="181" width="0.5514%" height="15" fill="rgb(250,96,4)" fg:x="13256" fg:w="196"/><text x="37.5865%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="37.8450%" y="181" width="0.5514%" height="15" fill="rgb(216,188,10)" fg:x="13452" fg:w="196"/><text x="38.1380%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="38.3964%" y="181" width="0.5514%" height="15" fill="rgb(223,183,18)" fg:x="13648" fg:w="196"/><text x="38.6894%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="38.9478%" y="181" width="0.5514%" height="15" fill="rgb(224,158,47)" fg:x="13844" fg:w="196"/><text x="39.2408%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="39.4992%" y="181" width="0.5514%" height="15" fill="rgb(207,108,9)" fg:x="14040" fg:w="196"/><text x="39.7922%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="40.0506%" y="181" width="0.5514%" height="15" fill="rgb(223,58,11)" fg:x="14236" fg:w="196"/><text x="40.3436%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="40.6021%" y="181" width="0.5514%" height="15" fill="rgb(209,26,16)" fg:x="14432" fg:w="196"/><text x="40.8950%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="41.1535%" y="181" width="0.5514%" height="15" fill="rgb(233,43,27)" fg:x="14628" fg:w="196"/><text x="41.4464%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="41.7049%" y="181" width="0.5514%" height="15" fill="rgb(245,192,16)" fg:x="14824" fg:w="196"/><text x="41.9978%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="42.2563%" y="181" width="0.5514%" height="15" fill="rgb(254,67,46)" fg:x="15020" fg:w="196"/><text x="42.5493%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="42.8077%" y="181" width="0.5514%" height="15" fill="rgb(236,48,16)" fg:x="15216" fg:w="196"/><text x="43.1007%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="43.3591%" y="181" width="0.5514%" height="15" fill="rgb(237,169,28)" fg:x="15412" fg:w="196"/><text x="43.6521%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="43.9105%" y="181" width="0.5514%" height="15" fill="rgb(254,216,5)" fg:x="15608" fg:w="196"/><text x="44.2035%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="44.4619%" y="181" width="0.5514%" height="15" fill="rgb(228,1,47)" fg:x="15804" fg:w="196"/><text x="44.7549%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="45.0134%" y="181" width="0.5514%" height="15" fill="rgb(220,213,44)" fg:x="16000" fg:w="196"/><text x="45.3063%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="45.5648%" y="181" width="0.5514%" height="15" fill="rgb(240,194,35)" fg:x="16196" fg:w="196"/><text x="45.8577%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="46.1162%" y="181" width="0.5514%" height="15" fill="rgb(250,155,34)" fg:x="16392" fg:w="196"/><text x="46.4092%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="46.6676%" y="181" width="0.5514%" height="15" fill="rgb(207,127,10)" fg:x="16588" fg:w="196"/><text x="46.9606%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="47.2190%" y="181" width="0.5514%" height="15" fill="rgb(254,81,12)" fg:x="16784" fg:w="196"/><text x="47.5120%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="47.7704%" y="181" width="0.5514%" height="15" fill="rgb(242,64,2)" fg:x="16980" fg:w="196"/><text x="48.0634%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="48.3218%" y="181" width="0.5514%" height="15" fill="rgb(250,103,5)" fg:x="17176" fg:w="196"/><text x="48.6148%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="48.8733%" y="181" width="0.5514%" height="15" fill="rgb(221,174,4)" fg:x="17372" fg:w="196"/><text x="49.1662%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="49.4247%" y="181" width="0.5514%" height="15" fill="rgb(215,190,25)" fg:x="17568" fg:w="196"/><text x="49.7176%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="49.9761%" y="181" width="0.5514%" height="15" fill="rgb(216,78,3)" fg:x="17764" fg:w="196"/><text x="50.2691%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="50.5275%" y="181" width="0.5514%" height="15" fill="rgb(251,4,39)" fg:x="17960" fg:w="196"/><text x="50.8205%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="51.0789%" y="181" width="0.5514%" height="15" fill="rgb(249,166,51)" fg:x="18156" fg:w="196"/><text x="51.3719%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="51.6303%" y="181" width="0.5514%" height="15" fill="rgb(252,82,21)" fg:x="18352" fg:w="196"/><text x="51.9233%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="52.1817%" y="181" width="0.5514%" height="15" fill="rgb(223,229,54)" fg:x="18548" fg:w="196"/><text x="52.4747%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="52.7332%" y="181" width="0.5514%" height="15" fill="rgb(224,84,46)" fg:x="18744" fg:w="196"/><text x="53.0261%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="53.2846%" y="181" width="0.5514%" height="15" fill="rgb(224,42,50)" fg:x="18940" fg:w="196"/><text x="53.5775%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="53.8360%" y="181" width="0.5514%" height="15" fill="rgb(219,45,25)" fg:x="19136" fg:w="196"/><text x="54.1290%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="54.3874%" y="181" width="0.5514%" height="15" fill="rgb(218,34,9)" fg:x="19332" fg:w="196"/><text x="54.6804%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="54.9388%" y="181" width="0.5514%" height="15" fill="rgb(227,215,29)" fg:x="19528" fg:w="196"/><text x="55.2318%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="55.4902%" y="181" width="0.5514%" height="15" fill="rgb(246,79,15)" fg:x="19724" fg:w="196"/><text x="55.7832%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="56.0416%" y="181" width="0.5514%" height="15" fill="rgb(211,216,44)" fg:x="19920" fg:w="196"/><text x="56.3346%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="56.5931%" y="181" width="0.5514%" height="15" fill="rgb(219,203,32)" fg:x="20116" fg:w="196"/><text x="56.8860%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="57.1445%" y="181" width="0.5514%" height="15" fill="rgb(205,38,25)" fg:x="20312" fg:w="196"/><text x="57.4374%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="57.6959%" y="181" width="0.5514%" height="15" fill="rgb(248,224,19)" fg:x="20508" fg:w="196"/><text x="57.9888%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="58.2473%" y="181" width="0.5514%" height="15" fill="rgb(247,187,51)" fg:x="20704" fg:w="196"/><text x="58.5403%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="58.7987%" y="181" width="0.5514%" height="15" fill="rgb(226,0,31)" fg:x="20900" fg:w="196"/><text x="59.0917%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="59.3501%" y="181" width="0.5514%" height="15" fill="rgb(236,215,20)" fg:x="21096" fg:w="196"/><text x="59.6431%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="59.9015%" y="181" width="0.5514%" height="15" fill="rgb(212,112,25)" fg:x="21292" fg:w="196"/><text x="60.1945%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="60.4529%" y="181" width="0.5514%" height="15" fill="rgb(247,18,24)" fg:x="21488" fg:w="196"/><text x="60.7459%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="61.0044%" y="181" width="0.5514%" height="15" fill="rgb(208,83,31)" fg:x="21684" fg:w="196"/><text x="61.2973%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.18%)</title><rect x="61.5558%" y="133" width="0.1772%" height="15" fill="rgb(223,155,28)" fg:x="21880" fg:w="63"/><text x="61.8487%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (107 instructions, 0.30%)</title><rect x="61.5558%" y="149" width="0.3010%" height="15" fill="rgb(230,102,53)" fg:x="21880" fg:w="107"/><text x="61.8487%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="61.8568%" y="133" width="0.0760%" height="15" fill="rgb(239,143,12)" fg:x="21987" fg:w="27"/><text x="62.1498%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (118 instructions, 0.33%)</title><rect x="61.8568%" y="149" width="0.3320%" height="15" fill="rgb(246,52,41)" fg:x="21987" fg:w="118"/><text x="62.1498%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (349 instructions, 0.98%)</title><rect x="61.5558%" y="165" width="0.9819%" height="15" fill="rgb(246,148,41)" fg:x="21880" fg:w="349"/><text x="61.8487%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.46%)</title><rect x="62.5376%" y="149" width="1.4573%" height="15" fill="rgb(218,166,38)" fg:x="22229" fg:w="518"/><text x="62.8306%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="63.9949%" y="101" width="0.2307%" height="15" fill="rgb(229,87,40)" fg:x="22747" fg:w="82"/><text x="64.2879%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.37%)</title><rect x="63.9949%" y="117" width="0.3657%" height="15" fill="rgb(210,75,22)" fg:x="22747" fg:w="130"/><text x="64.2879%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.60%)</title><rect x="63.9949%" y="133" width="0.5964%" height="15" fill="rgb(248,54,30)" fg:x="22747" fg:w="212"/><text x="64.2879%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="64.5914%" y="133" width="0.0422%" height="15" fill="rgb(248,58,45)" fg:x="22959" fg:w="15"/><text x="64.8843%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="64.6336%" y="133" width="0.0422%" height="15" fill="rgb(243,164,39)" fg:x="22974" fg:w="15"/><text x="64.9265%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.20%)</title><rect x="63.9949%" y="149" width="1.2041%" height="15" fill="rgb(211,117,43)" fg:x="22747" fg:w="428"/><text x="64.2879%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.45%)</title><rect x="65.1990%" y="149" width="1.4517%" height="15" fill="rgb(236,92,46)" fg:x="23175" fg:w="516"/><text x="65.4920%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.02%)</title><rect x="66.6507%" y="149" width="0.0197%" height="15" fill="rgb(229,82,24)" fg:x="23691" fg:w="7"/><text x="66.9437%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 4.41%)</title><rect x="62.5376%" y="165" width="4.4057%" height="15" fill="rgb(236,176,54)" fg:x="22229" fg:w="1566"/><text x="62.8306%" y="175.50">cand..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="66.9433%" y="165" width="0.0197%" height="15" fill="rgb(213,111,13)" fg:x="23795" fg:w="7"/><text x="67.2363%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="66.9630%" y="165" width="0.0197%" height="15" fill="rgb(245,153,30)" fg:x="23802" fg:w="7"/><text x="67.2560%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.17%)</title><rect x="66.9827%" y="165" width="0.1688%" height="15" fill="rgb(228,72,34)" fg:x="23809" fg:w="60"/><text x="67.2757%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,593 instructions, 7.29%)</title><rect x="61.5558%" y="181" width="7.2950%" height="15" fill="rgb(209,75,51)" fg:x="21880" fg:w="2593"/><text x="61.8487%" y="191.50">ic_cdk::..</text></g><g><title>imrc_hashmap::__canister_method_batch_get::{{closure}} (34,994 instructions, 98.45%)</title><rect x="0.5289%" y="197" width="98.4499%" height="15" fill="rgb(229,169,13)" fg:x="188" fg:w="34994"/><text x="0.8219%" y="207.50">imrc_hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.04%)</title><rect x="98.9788%" y="197" width="0.0394%" height="15" fill="rgb(230,13,1)" fg:x="35182" fg:w="14"/><text x="99.2717%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="99.2713%" y="181" width="0.0760%" height="15" fill="rgb(243,66,21)" fg:x="35286" fg:w="27"/><text x="99.5643%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.57%)</title><rect x="99.0210%" y="197" width="0.5739%" height="15" fill="rgb(217,156,46)" fg:x="35197" fg:w="204"/><text x="99.3139%" y="207.50"></text></g><g><title>all (35,545 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,82,46)" fg:x="0" fg:w="35545"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (35,545 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,63,54)" fg:x="0" fg:w="35545"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>