<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="32846"><g><title>ic_cdk::setup (19 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0578%" height="15" fill="rgb(248,166,45)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.36%)</title><rect x="0.0578%" y="197" width="0.3593%" height="15" fill="rgb(250,31,48)" fg:x="19" fg:w="118"/><text x="0.3508%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.22%)</title><rect x="0.4171%" y="197" width="0.2222%" height="15" fill="rgb(220,92,20)" fg:x="137" fg:w="73"/><text x="0.7101%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="0.6393%" y="165" width="0.2496%" height="15" fill="rgb(219,46,45)" fg:x="210" fg:w="82"/><text x="0.9323%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="0.8890%" y="149" width="0.2162%" height="15" fill="rgb(242,224,50)" fg:x="292" fg:w="71"/><text x="1.1820%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.1052%" y="133" width="0.0122%" height="15" fill="rgb(229,53,23)" fg:x="363" fg:w="4"/><text x="1.3981%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.22%)</title><rect x="1.1052%" y="149" width="1.2178%" height="15" fill="rgb(214,156,36)" fg:x="363" fg:w="400"/><text x="1.3981%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.26%)</title><rect x="2.3230%" y="149" width="0.2588%" height="15" fill="rgb(251,164,4)" fg:x="763" fg:w="85"/><text x="2.6159%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.5817%" y="149" width="0.1644%" height="15" fill="rgb(223,49,8)" fg:x="848" fg:w="54"/><text x="2.8747%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.7461%" y="149" width="0.1644%" height="15" fill="rgb(205,169,17)" fg:x="902" fg:w="54"/><text x="3.0391%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.9106%" y="149" width="0.1644%" height="15" fill="rgb(205,58,20)" fg:x="956" fg:w="54"/><text x="3.2035%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="3.0750%" y="149" width="0.1644%" height="15" fill="rgb(236,227,14)" fg:x="1010" fg:w="54"/><text x="3.3679%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="3.2394%" y="149" width="0.2162%" height="15" fill="rgb(233,198,53)" fg:x="1064" fg:w="71"/><text x="3.5323%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="3.4555%" y="149" width="0.1979%" height="15" fill="rgb(212,161,42)" fg:x="1135" fg:w="65"/><text x="3.7485%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.6534%" y="133" width="0.0122%" height="15" fill="rgb(248,177,35)" fg:x="1200" fg:w="4"/><text x="3.9464%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.22%)</title><rect x="3.6534%" y="149" width="1.2178%" height="15" fill="rgb(242,73,36)" fg:x="1200" fg:w="400"/><text x="3.9464%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="4.8712%" y="149" width="0.0487%" height="15" fill="rgb(245,107,31)" fg:x="1600" fg:w="16"/><text x="5.1642%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="4.9199%" y="133" width="0.2496%" height="15" fill="rgb(220,120,0)" fg:x="1616" fg:w="82"/><text x="5.2129%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="5.1696%" y="101" width="0.1827%" height="15" fill="rgb(212,41,7)" fg:x="1698" fg:w="60"/><text x="5.4625%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="5.1696%" y="117" width="0.2588%" height="15" fill="rgb(232,70,4)" fg:x="1698" fg:w="85"/><text x="5.4625%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="5.4284%" y="69" width="0.0274%" height="15" fill="rgb(215,142,44)" fg:x="1783" fg:w="9"/><text x="5.7213%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="5.4558%" y="53" width="0.0913%" height="15" fill="rgb(215,84,33)" fg:x="1792" fg:w="30"/><text x="5.7487%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="5.4558%" y="69" width="0.1674%" height="15" fill="rgb(207,229,26)" fg:x="1792" fg:w="55"/><text x="5.7487%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="5.4284%" y="85" width="0.3593%" height="15" fill="rgb(252,106,39)" fg:x="1783" fg:w="118"/><text x="5.7213%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="5.4284%" y="101" width="0.5206%" height="15" fill="rgb(234,125,38)" fg:x="1783" fg:w="171"/><text x="5.7213%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.54%)</title><rect x="5.4284%" y="117" width="0.5358%" height="15" fill="rgb(252,3,2)" fg:x="1783" fg:w="176"/><text x="5.7213%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="5.1696%" y="133" width="1.1326%" height="15" fill="rgb(236,1,28)" fg:x="1698" fg:w="372"/><text x="5.4625%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 1.83%)</title><rect x="4.9199%" y="149" width="1.8267%" height="15" fill="rgb(230,157,39)" fg:x="1616" fg:w="600"/><text x="5.2129%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.26%)</title><rect x="6.7466%" y="149" width="0.2588%" height="15" fill="rgb(243,199,42)" fg:x="2216" fg:w="85"/><text x="7.0396%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.17%)</title><rect x="7.0054%" y="149" width="0.1735%" height="15" fill="rgb(215,46,49)" fg:x="2301" fg:w="57"/><text x="7.2984%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.20%)</title><rect x="7.1790%" y="149" width="0.2009%" height="15" fill="rgb(220,180,9)" fg:x="2358" fg:w="66"/><text x="7.4719%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="7.3799%" y="149" width="0.1979%" height="15" fill="rgb(219,185,36)" fg:x="2424" fg:w="65"/><text x="7.6729%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.5778%" y="117" width="0.0122%" height="15" fill="rgb(228,117,53)" fg:x="2489" fg:w="4"/><text x="7.8708%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.22%)</title><rect x="7.5778%" y="133" width="1.2178%" height="15" fill="rgb(221,106,12)" fg:x="2489" fg:w="400"/><text x="7.8708%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="8.7956%" y="133" width="0.0487%" height="15" fill="rgb(215,108,17)" fg:x="2889" fg:w="16"/><text x="9.0886%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="8.8443%" y="117" width="0.2496%" height="15" fill="rgb(245,26,18)" fg:x="2905" fg:w="82"/><text x="9.1373%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="9.0940%" y="85" width="0.1827%" height="15" fill="rgb(237,27,36)" fg:x="2987" fg:w="60"/><text x="9.3869%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="9.0940%" y="101" width="0.2588%" height="15" fill="rgb(247,5,1)" fg:x="2987" fg:w="85"/><text x="9.3869%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="9.3527%" y="53" width="0.0274%" height="15" fill="rgb(215,108,11)" fg:x="3072" fg:w="9"/><text x="9.6457%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="9.3801%" y="37" width="0.0913%" height="15" fill="rgb(252,83,12)" fg:x="3081" fg:w="30"/><text x="9.6731%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="9.3801%" y="53" width="0.1674%" height="15" fill="rgb(224,206,18)" fg:x="3081" fg:w="55"/><text x="9.6731%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="9.3527%" y="69" width="0.3593%" height="15" fill="rgb(248,203,50)" fg:x="3072" fg:w="118"/><text x="9.6457%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="9.3527%" y="85" width="0.5206%" height="15" fill="rgb(252,31,12)" fg:x="3072" fg:w="171"/><text x="9.6457%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.54%)</title><rect x="9.3527%" y="101" width="0.5358%" height="15" fill="rgb(232,228,4)" fg:x="3072" fg:w="176"/><text x="9.6457%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="9.0940%" y="117" width="1.1326%" height="15" fill="rgb(245,220,34)" fg:x="2987" fg:w="372"/><text x="9.3869%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 1.83%)</title><rect x="8.8443%" y="133" width="1.8267%" height="15" fill="rgb(239,102,53)" fg:x="2905" fg:w="600"/><text x="9.1373%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.26%)</title><rect x="10.6710%" y="133" width="0.2588%" height="15" fill="rgb(239,63,17)" fg:x="3505" fg:w="85"/><text x="10.9640%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.17%)</title><rect x="10.9298%" y="133" width="0.1735%" height="15" fill="rgb(211,89,0)" fg:x="3590" fg:w="57"/><text x="11.2228%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.22%)</title><rect x="11.1033%" y="117" width="0.2162%" height="15" fill="rgb(228,127,4)" fg:x="3647" fg:w="71"/><text x="11.3963%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.28%)</title><rect x="11.3195%" y="117" width="0.2771%" height="15" fill="rgb(248,184,36)" fg:x="3718" fg:w="91"/><text x="11.6125%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.20%)</title><rect x="11.5965%" y="117" width="0.2009%" height="15" fill="rgb(234,210,44)" fg:x="3809" fg:w="66"/><text x="11.8895%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.87%)</title><rect x="11.1033%" y="133" width="0.8738%" height="15" fill="rgb(211,192,41)" fg:x="3647" fg:w="287"/><text x="11.3963%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="11.9771%" y="133" width="0.2496%" height="15" fill="rgb(234,98,45)" fg:x="3934" fg:w="82"/><text x="12.2701%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,728 instructions, 5.26%)</title><rect x="7.5778%" y="149" width="5.2609%" height="15" fill="rgb(226,184,27)" fg:x="2489" fg:w="1728"/><text x="7.8708%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.20%)</title><rect x="12.8387%" y="149" width="0.2009%" height="15" fill="rgb(248,47,9)" fg:x="4217" fg:w="66"/><text x="13.1317%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="13.0396%" y="149" width="0.0396%" height="15" fill="rgb(234,135,15)" fg:x="4283" fg:w="13"/><text x="13.3326%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="13.0792%" y="149" width="0.0396%" height="15" fill="rgb(218,229,45)" fg:x="4296" fg:w="13"/><text x="13.3722%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="13.1188%" y="149" width="0.0213%" height="15" fill="rgb(233,105,40)" fg:x="4309" fg:w="7"/><text x="13.4118%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="13.1401%" y="149" width="0.0457%" height="15" fill="rgb(228,166,10)" fg:x="4316" fg:w="15"/><text x="13.4331%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.1858%" y="133" width="0.2496%" height="15" fill="rgb(243,66,27)" fg:x="4331" fg:w="82"/><text x="13.4787%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.50%)</title><rect x="13.1858%" y="149" width="0.5023%" height="15" fill="rgb(231,46,38)" fg:x="4331" fg:w="165"/><text x="13.4787%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.6881%" y="117" width="0.2496%" height="15" fill="rgb(248,117,18)" fg:x="4496" fg:w="82"/><text x="13.9811%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.36%)</title><rect x="13.6881%" y="133" width="0.3562%" height="15" fill="rgb(210,189,6)" fg:x="4496" fg:w="117"/><text x="13.9811%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (185 instructions, 0.56%)</title><rect x="13.6881%" y="149" width="0.5632%" height="15" fill="rgb(221,40,47)" fg:x="4496" fg:w="185"/><text x="13.9811%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.2514%" y="149" width="0.2496%" height="15" fill="rgb(208,18,49)" fg:x="4681" fg:w="82"/><text x="14.5443%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="14.5010%" y="149" width="0.2466%" height="15" fill="rgb(233,67,46)" fg:x="4763" fg:w="81"/><text x="14.7940%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.7476%" y="149" width="0.2496%" height="15" fill="rgb(250,128,28)" fg:x="4844" fg:w="82"/><text x="15.0406%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.9973%" y="149" width="0.2496%" height="15" fill="rgb(223,170,18)" fg:x="4926" fg:w="82"/><text x="15.2902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="15.2530%" y="149" width="0.2466%" height="15" fill="rgb(209,211,26)" fg:x="5010" fg:w="81"/><text x="15.5460%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.16%)</title><rect x="15.4996%" y="149" width="1.1600%" height="15" fill="rgb(217,227,11)" fg:x="5091" fg:w="381"/><text x="15.7926%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.16%)</title><rect x="16.6596%" y="149" width="1.1600%" height="15" fill="rgb(211,85,42)" fg:x="5472" fg:w="381"/><text x="16.9525%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,475 instructions, 19.71%)</title><rect x="0.8890%" y="165" width="19.7132%" height="15" fill="rgb(216,171,2)" fg:x="292" fg:w="6475"/><text x="1.1820%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (336 instructions, 1.02%)</title><rect x="20.6022%" y="165" width="1.0230%" height="15" fill="rgb(250,124,51)" fg:x="6767" fg:w="336"/><text x="20.8952%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="21.6252%" y="149" width="0.0152%" height="15" fill="rgb(249,28,37)" fg:x="7103" fg:w="5"/><text x="21.9181%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.12%)</title><rect x="21.6252%" y="165" width="0.1187%" height="15" fill="rgb(218,102,20)" fg:x="7103" fg:w="39"/><text x="21.9181%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="21.7439%" y="165" width="0.2496%" height="15" fill="rgb(254,102,2)" fg:x="7142" fg:w="82"/><text x="22.0369%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="21.9935%" y="149" width="0.0152%" height="15" fill="rgb(241,42,0)" fg:x="7224" fg:w="5"/><text x="22.2865%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="22.0088%" y="133" width="0.1614%" height="15" fill="rgb(215,39,30)" fg:x="7229" fg:w="53"/><text x="22.3017%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.27%)</title><rect x="22.1701%" y="133" width="0.2710%" height="15" fill="rgb(205,72,52)" fg:x="7282" fg:w="89"/><text x="22.4631%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.49%)</title><rect x="22.4411%" y="133" width="0.4902%" height="15" fill="rgb(248,113,13)" fg:x="7371" fg:w="161"/><text x="22.7341%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="22.0088%" y="149" width="1.6440%" height="15" fill="rgb(212,120,42)" fg:x="7229" fg:w="540"/><text x="22.3017%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 2.30%)</title><rect x="21.9935%" y="165" width="2.2986%" height="15" fill="rgb(236,88,35)" fg:x="7224" fg:w="755"/><text x="22.2865%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="24.2922%" y="165" width="0.2496%" height="15" fill="rgb(248,224,14)" fg:x="7979" fg:w="82"/><text x="24.5851%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="24.5418%" y="149" width="0.0152%" height="15" fill="rgb(227,174,17)" fg:x="8061" fg:w="5"/><text x="24.8348%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="24.5570%" y="133" width="0.1614%" height="15" fill="rgb(225,119,6)" fg:x="8066" fg:w="53"/><text x="24.8500%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.27%)</title><rect x="24.7184%" y="133" width="0.2710%" height="15" fill="rgb(211,178,6)" fg:x="8119" fg:w="89"/><text x="25.0114%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.49%)</title><rect x="24.9893%" y="133" width="0.4902%" height="15" fill="rgb(234,207,25)" fg:x="8208" fg:w="161"/><text x="25.2823%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="24.5570%" y="149" width="1.6440%" height="15" fill="rgb(250,43,8)" fg:x="8066" fg:w="540"/><text x="24.8500%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.21%)</title><rect x="26.2011%" y="149" width="0.2070%" height="15" fill="rgb(208,20,18)" fg:x="8606" fg:w="68"/><text x="26.4940%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="26.4081%" y="133" width="0.2466%" height="15" fill="rgb(227,74,4)" fg:x="8674" fg:w="81"/><text x="26.7011%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.33%)</title><rect x="26.4081%" y="149" width="0.3288%" height="15" fill="rgb(254,167,9)" fg:x="8674" fg:w="108"/><text x="26.7011%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 2.71%)</title><rect x="24.5418%" y="165" width="2.7066%" height="15" fill="rgb(233,18,12)" fg:x="8061" fg:w="889"/><text x="24.8348%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="27.2484%" y="117" width="0.1614%" height="15" fill="rgb(237,18,54)" fg:x="8950" fg:w="53"/><text x="27.5413%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.24%)</title><rect x="27.2484%" y="133" width="0.2405%" height="15" fill="rgb(215,135,26)" fg:x="8950" fg:w="79"/><text x="27.5413%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.89%)</title><rect x="27.2484%" y="149" width="0.8890%" height="15" fill="rgb(234,52,47)" fg:x="8950" fg:w="292"/><text x="27.5413%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.180 (15 instructions, 0.05%)</title><rect x="28.1374%" y="149" width="0.0457%" height="15" fill="rgb(207,7,9)" fg:x="9242" fg:w="15"/><text x="28.4303%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.1830%" y="149" width="0.0335%" height="15" fill="rgb(218,149,23)" fg:x="9257" fg:w="11"/><text x="28.4760%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.46%)</title><rect x="27.2484%" y="165" width="1.4553%" height="15" fill="rgb(238,125,25)" fg:x="8950" fg:w="478"/><text x="27.5413%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.10%)</title><rect x="28.7036%" y="165" width="0.1005%" height="15" fill="rgb(244,36,8)" fg:x="9428" fg:w="33"/><text x="28.9966%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="28.8041%" y="149" width="0.3745%" height="15" fill="rgb(229,62,10)" fg:x="9461" fg:w="123"/><text x="29.0971%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="29.2608%" y="149" width="0.3745%" height="15" fill="rgb(242,183,37)" fg:x="9611" fg:w="123"/><text x="29.5538%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.91%)</title><rect x="28.8041%" y="165" width="0.9134%" height="15" fill="rgb(222,136,53)" fg:x="9461" fg:w="300"/><text x="29.0971%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.09%)</title><rect x="29.7175%" y="149" width="0.0852%" height="15" fill="rgb(208,66,38)" fg:x="9761" fg:w="28"/><text x="30.0104%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.30%)</title><rect x="29.7175%" y="165" width="0.2953%" height="15" fill="rgb(220,71,20)" fg:x="9761" fg:w="97"/><text x="30.0104%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.0128%" y="165" width="0.0335%" height="15" fill="rgb(220,168,3)" fg:x="9858" fg:w="11"/><text x="30.3058%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.0463%" y="165" width="0.0335%" height="15" fill="rgb(248,9,40)" fg:x="9869" fg:w="11"/><text x="30.3392%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.0798%" y="165" width="0.0335%" height="15" fill="rgb(251,29,41)" fg:x="9880" fg:w="11"/><text x="30.3727%" y="175.50"></text></g><g><title>memcpy (411 instructions, 1.25%)</title><rect x="30.1133%" y="165" width="1.2513%" height="15" fill="rgb(209,97,45)" fg:x="9891" fg:w="411"/><text x="30.4062%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="31.3645%" y="133" width="0.0365%" height="15" fill="rgb(245,63,32)" fg:x="10302" fg:w="12"/><text x="31.6575%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.51%)</title><rect x="31.4011%" y="133" width="0.5115%" height="15" fill="rgb(210,7,50)" fg:x="10314" fg:w="168"/><text x="31.6941%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="31.9126%" y="101" width="0.1918%" height="15" fill="rgb(229,181,10)" fg:x="10482" fg:w="63"/><text x="32.2055%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.64%)</title><rect x="31.9126%" y="117" width="0.6363%" height="15" fill="rgb(235,175,46)" fg:x="10482" fg:w="209"/><text x="32.2055%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.72%)</title><rect x="31.9126%" y="133" width="0.7185%" height="15" fill="rgb(228,213,15)" fg:x="10482" fg:w="236"/><text x="32.2055%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="32.6311%" y="133" width="0.0335%" height="15" fill="rgb(230,23,34)" fg:x="10718" fg:w="11"/><text x="32.9240%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 1.43%)</title><rect x="31.3645%" y="149" width="1.4279%" height="15" fill="rgb(230,33,13)" fg:x="10302" fg:w="469"/><text x="31.6575%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 1.53%)</title><rect x="31.3645%" y="165" width="1.5314%" height="15" fill="rgb(213,180,30)" fg:x="10302" fg:w="503"/><text x="31.6575%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="32.8959%" y="149" width="0.1674%" height="15" fill="rgb(252,191,10)" fg:x="10805" fg:w="55"/><text x="33.1889%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="33.0634%" y="149" width="0.1918%" height="15" fill="rgb(232,53,48)" fg:x="10860" fg:w="63"/><text x="33.3564%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 0.61%)</title><rect x="32.8959%" y="165" width="0.6089%" height="15" fill="rgb(252,107,52)" fg:x="10805" fg:w="200"/><text x="33.1889%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,186 instructions, 34.06%)</title><rect x="0.6393%" y="181" width="34.0559%" height="15" fill="rgb(252,26,41)" fg:x="210" fg:w="11186"/><text x="0.9323%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (20 instructions, 0.06%)</title><rect x="34.6952%" y="181" width="0.0609%" height="15" fill="rgb(237,200,5)" fg:x="11396" fg:w="20"/><text x="34.9882%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="34.7561%" y="181" width="0.6089%" height="15" fill="rgb(241,5,51)" fg:x="11416" fg:w="200"/><text x="35.0491%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="35.3650%" y="181" width="0.6089%" height="15" fill="rgb(205,114,42)" fg:x="11616" fg:w="200"/><text x="35.6580%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="35.9739%" y="181" width="0.6089%" height="15" fill="rgb(243,18,14)" fg:x="11816" fg:w="200"/><text x="36.2669%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.5828%" y="181" width="0.6089%" height="15" fill="rgb(247,151,10)" fg:x="12016" fg:w="200"/><text x="36.8758%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.1917%" y="181" width="0.6089%" height="15" fill="rgb(234,130,32)" fg:x="12216" fg:w="200"/><text x="37.4847%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.8006%" y="181" width="0.6089%" height="15" fill="rgb(254,156,33)" fg:x="12416" fg:w="200"/><text x="38.0936%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="38.4095%" y="181" width="0.6089%" height="15" fill="rgb(232,1,54)" fg:x="12616" fg:w="200"/><text x="38.7025%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.0184%" y="181" width="0.6089%" height="15" fill="rgb(224,223,48)" fg:x="12816" fg:w="200"/><text x="39.3114%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.6274%" y="181" width="0.6089%" height="15" fill="rgb(233,106,10)" fg:x="13016" fg:w="200"/><text x="39.9203%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.2363%" y="181" width="0.6089%" height="15" fill="rgb(233,149,51)" fg:x="13216" fg:w="200"/><text x="40.5292%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.8452%" y="181" width="0.6089%" height="15" fill="rgb(218,27,14)" fg:x="13416" fg:w="200"/><text x="41.1381%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="41.4541%" y="181" width="0.6089%" height="15" fill="rgb(216,114,53)" fg:x="13616" fg:w="200"/><text x="41.7470%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.0630%" y="181" width="0.6089%" height="15" fill="rgb(214,105,42)" fg:x="13816" fg:w="200"/><text x="42.3559%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.6719%" y="181" width="0.6089%" height="15" fill="rgb(246,150,19)" fg:x="14016" fg:w="200"/><text x="42.9648%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.2808%" y="181" width="0.6089%" height="15" fill="rgb(254,75,3)" fg:x="14216" fg:w="200"/><text x="43.5737%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.8897%" y="181" width="0.6089%" height="15" fill="rgb(236,94,54)" fg:x="14416" fg:w="200"/><text x="44.1826%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.4986%" y="181" width="0.6089%" height="15" fill="rgb(250,50,17)" fg:x="14616" fg:w="200"/><text x="44.7915%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.1075%" y="181" width="0.6089%" height="15" fill="rgb(206,179,36)" fg:x="14816" fg:w="200"/><text x="45.4004%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.7164%" y="181" width="0.6089%" height="15" fill="rgb(208,7,9)" fg:x="15016" fg:w="200"/><text x="46.0093%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.3253%" y="181" width="0.6089%" height="15" fill="rgb(220,97,41)" fg:x="15216" fg:w="200"/><text x="46.6182%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.9342%" y="181" width="0.6089%" height="15" fill="rgb(226,41,7)" fg:x="15416" fg:w="200"/><text x="47.2271%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.5431%" y="181" width="0.6089%" height="15" fill="rgb(217,209,42)" fg:x="15616" fg:w="200"/><text x="47.8360%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.1520%" y="181" width="0.6089%" height="15" fill="rgb(227,15,9)" fg:x="15816" fg:w="200"/><text x="48.4450%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.7609%" y="181" width="0.6089%" height="15" fill="rgb(213,23,26)" fg:x="16016" fg:w="200"/><text x="49.0539%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="49.3698%" y="181" width="0.6089%" height="15" fill="rgb(234,179,17)" fg:x="16216" fg:w="200"/><text x="49.6628%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="49.9787%" y="181" width="0.6089%" height="15" fill="rgb(213,184,43)" fg:x="16416" fg:w="200"/><text x="50.2717%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.5876%" y="181" width="0.6089%" height="15" fill="rgb(239,184,20)" fg:x="16616" fg:w="200"/><text x="50.8806%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.1965%" y="181" width="0.6089%" height="15" fill="rgb(249,132,23)" fg:x="16816" fg:w="200"/><text x="51.4895%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.8054%" y="181" width="0.6089%" height="15" fill="rgb(237,85,14)" fg:x="17016" fg:w="200"/><text x="52.0984%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="52.4143%" y="181" width="0.6089%" height="15" fill="rgb(207,28,12)" fg:x="17216" fg:w="200"/><text x="52.7073%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.0232%" y="181" width="0.6089%" height="15" fill="rgb(216,128,20)" fg:x="17416" fg:w="200"/><text x="53.3162%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.6321%" y="181" width="0.6089%" height="15" fill="rgb(242,101,1)" fg:x="17616" fg:w="200"/><text x="53.9251%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.2410%" y="181" width="0.6089%" height="15" fill="rgb(212,186,52)" fg:x="17816" fg:w="200"/><text x="54.5340%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.8499%" y="181" width="0.6089%" height="15" fill="rgb(224,223,13)" fg:x="18016" fg:w="200"/><text x="55.1429%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="55.4588%" y="181" width="0.6089%" height="15" fill="rgb(221,181,44)" fg:x="18216" fg:w="200"/><text x="55.7518%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.0677%" y="181" width="0.6089%" height="15" fill="rgb(254,148,4)" fg:x="18416" fg:w="200"/><text x="56.3607%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.6766%" y="181" width="0.6089%" height="15" fill="rgb(221,76,51)" fg:x="18616" fg:w="200"/><text x="56.9696%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.2855%" y="181" width="0.6089%" height="15" fill="rgb(225,63,8)" fg:x="18816" fg:w="200"/><text x="57.5785%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.8944%" y="181" width="0.6089%" height="15" fill="rgb(222,19,52)" fg:x="19016" fg:w="200"/><text x="58.1874%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="58.5033%" y="181" width="0.6089%" height="15" fill="rgb(251,194,23)" fg:x="19216" fg:w="200"/><text x="58.7963%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.1122%" y="181" width="0.6089%" height="15" fill="rgb(205,1,52)" fg:x="19416" fg:w="200"/><text x="59.4052%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.7211%" y="181" width="0.6089%" height="15" fill="rgb(223,68,16)" fg:x="19616" fg:w="200"/><text x="60.0141%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.3300%" y="181" width="0.6089%" height="15" fill="rgb(213,21,34)" fg:x="19816" fg:w="200"/><text x="60.6230%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.9389%" y="181" width="0.6089%" height="15" fill="rgb(226,205,0)" fg:x="20016" fg:w="200"/><text x="61.2319%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.5478%" y="181" width="0.6089%" height="15" fill="rgb(242,20,46)" fg:x="20216" fg:w="200"/><text x="61.8408%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.1567%" y="181" width="0.6089%" height="15" fill="rgb(213,51,30)" fg:x="20416" fg:w="200"/><text x="62.4497%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.7656%" y="181" width="0.6089%" height="15" fill="rgb(205,152,22)" fg:x="20616" fg:w="200"/><text x="63.0586%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="63.3745%" y="181" width="0.6089%" height="15" fill="rgb(234,122,13)" fg:x="20816" fg:w="200"/><text x="63.6675%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="63.9834%" y="181" width="0.6089%" height="15" fill="rgb(240,15,49)" fg:x="21016" fg:w="200"/><text x="64.2764%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.5923%" y="181" width="0.6089%" height="15" fill="rgb(225,226,0)" fg:x="21216" fg:w="200"/><text x="64.8853%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="65.2012%" y="149" width="0.0152%" height="15" fill="rgb(232,194,27)" fg:x="21416" fg:w="5"/><text x="65.4942%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="65.2165%" y="117" width="0.1674%" height="15" fill="rgb(245,182,2)" fg:x="21421" fg:w="55"/><text x="65.5094%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.42%)</title><rect x="65.2165%" y="133" width="0.4201%" height="15" fill="rgb(218,93,43)" fg:x="21421" fg:w="138"/><text x="65.5094%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.50%)</title><rect x="65.2165%" y="149" width="0.5023%" height="15" fill="rgb(243,98,11)" fg:x="21421" fg:w="165"/><text x="65.5094%" y="159.50"></text></g><g><title>memset (136 instructions, 0.41%)</title><rect x="65.7188%" y="149" width="0.4141%" height="15" fill="rgb(231,75,50)" fg:x="21586" fg:w="136"/><text x="66.0118%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.41%)</title><rect x="65.2012%" y="165" width="1.4127%" height="15" fill="rgb(251,21,18)" fg:x="21416" fg:w="464"/><text x="65.4942%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.10%)</title><rect x="66.6139%" y="149" width="0.0974%" height="15" fill="rgb(219,83,39)" fg:x="21880" fg:w="32"/><text x="66.9069%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="66.7113%" y="117" width="0.2496%" height="15" fill="rgb(224,166,54)" fg:x="21912" fg:w="82"/><text x="67.0043%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.36%)</title><rect x="66.7113%" y="133" width="0.3562%" height="15" fill="rgb(228,188,33)" fg:x="21912" fg:w="117"/><text x="67.0043%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (182 instructions, 0.55%)</title><rect x="66.7113%" y="149" width="0.5541%" height="15" fill="rgb(205,16,29)" fg:x="21912" fg:w="182"/><text x="67.0043%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.2654%" y="149" width="0.0335%" height="15" fill="rgb(252,16,38)" fg:x="22094" fg:w="11"/><text x="67.5584%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.2989%" y="149" width="0.0335%" height="15" fill="rgb(234,181,7)" fg:x="22105" fg:w="11"/><text x="67.5919%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.09%)</title><rect x="67.3324%" y="149" width="0.0913%" height="15" fill="rgb(249,7,17)" fg:x="22116" fg:w="30"/><text x="67.6254%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="67.4237%" y="149" width="0.0152%" height="15" fill="rgb(254,175,27)" fg:x="22146" fg:w="5"/><text x="67.7167%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (478 instructions, 1.46%)</title><rect x="66.6139%" y="165" width="1.4553%" height="15" fill="rgb(251,8,47)" fg:x="21880" fg:w="478"/><text x="66.9069%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="68.0692%" y="165" width="0.0152%" height="15" fill="rgb(220,128,19)" fg:x="22358" fg:w="5"/><text x="68.3621%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.17%)</title><rect x="68.0844%" y="165" width="0.1735%" height="15" fill="rgb(252,8,17)" fg:x="22363" fg:w="57"/><text x="68.3774%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,078 instructions, 3.28%)</title><rect x="65.2012%" y="181" width="3.2820%" height="15" fill="rgb(254,168,36)" fg:x="21416" fg:w="1078"/><text x="65.4942%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_get_2_::{{closure}} (32,319 instructions, 98.40%)</title><rect x="0.6393%" y="197" width="98.3955%" height="15" fill="rgb(248,147,26)" fg:x="210" fg:w="32319"/><text x="0.9323%" y="207.50">imrc_hashmap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="99.0349%" y="197" width="0.0365%" height="15" fill="rgb(207,36,33)" fg:x="32529" fg:w="12"/><text x="99.3279%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="99.0714%" y="197" width="0.2466%" height="15" fill="rgb(240,176,35)" fg:x="32541" fg:w="81"/><text x="99.3644%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.38%)</title><rect x="99.3180%" y="197" width="0.3836%" height="15" fill="rgb(235,26,12)" fg:x="32622" fg:w="126"/><text x="99.6110%" y="207.50"></text></g><g><title>all (32,846 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,182,42)" fg:x="0" fg:w="32846"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (32,846 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,144,28)" fg:x="0" fg:w="32846"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>