<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="35894"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.0000%" y="229" width="0.2285%" height="15" fill="rgb(250,165,2)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.2285%" y="229" width="0.2285%" height="15" fill="rgb(227,161,42)" fg:x="82" fg:w="82"/><text x="0.5214%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="0.4569%" y="181" width="0.2285%" height="15" fill="rgb(216,170,4)" fg:x="164" fg:w="82"/><text x="0.7499%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 3.17%)</title><rect x="0.4569%" y="197" width="3.1732%" height="15" fill="rgb(229,79,9)" fg:x="164" fg:w="1139"/><text x="0.7499%" y="207.50">ic..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.14%)</title><rect x="3.6301%" y="165" width="0.1421%" height="15" fill="rgb(242,149,43)" fg:x="1303" fg:w="51"/><text x="3.9231%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.7722%" y="149" width="0.0167%" height="15" fill="rgb(207,144,43)" fg:x="1354" fg:w="6"/><text x="4.0652%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.22%)</title><rect x="3.7722%" y="165" width="1.2175%" height="15" fill="rgb(223,13,4)" fg:x="1354" fg:w="437"/><text x="4.0652%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.18%)</title><rect x="4.9897%" y="165" width="0.1783%" height="15" fill="rgb(218,7,2)" fg:x="1791" fg:w="64"/><text x="5.2827%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.21%)</title><rect x="5.1680%" y="165" width="0.2117%" height="15" fill="rgb(249,150,54)" fg:x="1855" fg:w="76"/><text x="5.4610%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.21%)</title><rect x="5.3797%" y="165" width="0.2117%" height="15" fill="rgb(246,107,10)" fg:x="1931" fg:w="76"/><text x="5.6727%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.21%)</title><rect x="5.5915%" y="165" width="0.2117%" height="15" fill="rgb(213,86,14)" fg:x="2007" fg:w="76"/><text x="5.8844%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.21%)</title><rect x="5.8032%" y="165" width="0.2117%" height="15" fill="rgb(240,31,14)" fg:x="2083" fg:w="76"/><text x="6.0962%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.14%)</title><rect x="6.0149%" y="165" width="0.1421%" height="15" fill="rgb(232,157,54)" fg:x="2159" fg:w="51"/><text x="6.3079%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.26%)</title><rect x="6.1570%" y="165" width="0.2647%" height="15" fill="rgb(252,48,7)" fg:x="2210" fg:w="95"/><text x="6.4500%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="6.4217%" y="149" width="0.0167%" height="15" fill="rgb(233,227,49)" fg:x="2305" fg:w="6"/><text x="6.7147%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.22%)</title><rect x="6.4217%" y="165" width="1.2175%" height="15" fill="rgb(234,40,51)" fg:x="2305" fg:w="437"/><text x="6.7147%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="7.6392%" y="165" width="0.0529%" height="15" fill="rgb(209,67,18)" fg:x="2742" fg:w="19"/><text x="7.9321%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="7.6921%" y="133" width="0.2285%" height="15" fill="rgb(210,64,40)" fg:x="2761" fg:w="82"/><text x="7.9851%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.19%)</title><rect x="7.9205%" y="101" width="0.1867%" height="15" fill="rgb(254,171,4)" fg:x="2843" fg:w="67"/><text x="8.2135%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.27%)</title><rect x="7.9205%" y="117" width="0.2675%" height="15" fill="rgb(211,106,47)" fg:x="2843" fg:w="96"/><text x="8.2135%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="8.1880%" y="69" width="0.0306%" height="15" fill="rgb(241,140,28)" fg:x="2939" fg:w="11"/><text x="8.4810%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.10%)</title><rect x="8.2186%" y="53" width="0.0975%" height="15" fill="rgb(240,111,53)" fg:x="2950" fg:w="35"/><text x="8.5116%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.18%)</title><rect x="8.2186%" y="69" width="0.1783%" height="15" fill="rgb(227,29,7)" fg:x="2950" fg:w="64"/><text x="8.5116%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.40%)</title><rect x="8.1880%" y="85" width="0.4012%" height="15" fill="rgb(232,214,35)" fg:x="2939" fg:w="144"/><text x="8.4810%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.59%)</title><rect x="8.1880%" y="101" width="0.5851%" height="15" fill="rgb(207,31,42)" fg:x="2939" fg:w="210"/><text x="8.4810%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.61%)</title><rect x="8.1880%" y="117" width="0.6129%" height="15" fill="rgb(218,109,46)" fg:x="2939" fg:w="220"/><text x="8.4810%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 1.25%)</title><rect x="7.9205%" y="133" width="1.2509%" height="15" fill="rgb(223,153,1)" fg:x="2843" fg:w="449"/><text x="8.2135%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.86%)</title><rect x="7.6921%" y="149" width="1.8582%" height="15" fill="rgb(218,79,7)" fg:x="2761" fg:w="667"/><text x="7.9851%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.18%)</title><rect x="9.5503%" y="149" width="0.1783%" height="15" fill="rgb(249,99,10)" fg:x="3428" fg:w="64"/><text x="9.8433%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.17%)</title><rect x="9.7286%" y="149" width="0.1699%" height="15" fill="rgb(228,81,52)" fg:x="3492" fg:w="61"/><text x="10.0216%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.52%)</title><rect x="7.6921%" y="165" width="2.5157%" height="15" fill="rgb(229,137,36)" fg:x="2761" fg:w="903"/><text x="7.9851%" y="175.50">b..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.08%)</title><rect x="10.2078%" y="165" width="0.0752%" height="15" fill="rgb(224,48,30)" fg:x="3664" fg:w="27"/><text x="10.5008%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.13%)</title><rect x="10.2831%" y="165" width="0.1282%" height="15" fill="rgb(253,65,8)" fg:x="3691" fg:w="46"/><text x="10.5760%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.26%)</title><rect x="10.4112%" y="165" width="0.2647%" height="15" fill="rgb(242,229,36)" fg:x="3737" fg:w="95"/><text x="10.7042%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.6759%" y="133" width="0.0167%" height="15" fill="rgb(211,46,19)" fg:x="3832" fg:w="6"/><text x="10.9688%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.22%)</title><rect x="10.6759%" y="149" width="1.2175%" height="15" fill="rgb(219,64,23)" fg:x="3832" fg:w="437"/><text x="10.9688%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="11.8934%" y="149" width="0.0529%" height="15" fill="rgb(237,63,23)" fg:x="4269" fg:w="19"/><text x="12.1863%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="11.9463%" y="117" width="0.2285%" height="15" fill="rgb(249,15,27)" fg:x="4288" fg:w="82"/><text x="12.2393%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.19%)</title><rect x="12.1747%" y="85" width="0.1867%" height="15" fill="rgb(241,25,46)" fg:x="4370" fg:w="67"/><text x="12.4677%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.27%)</title><rect x="12.1747%" y="101" width="0.2675%" height="15" fill="rgb(240,130,1)" fg:x="4370" fg:w="96"/><text x="12.4677%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="12.4422%" y="53" width="0.0306%" height="15" fill="rgb(218,47,39)" fg:x="4466" fg:w="11"/><text x="12.7352%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.10%)</title><rect x="12.4728%" y="37" width="0.0975%" height="15" fill="rgb(253,227,2)" fg:x="4477" fg:w="35"/><text x="12.7658%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.18%)</title><rect x="12.4728%" y="53" width="0.1783%" height="15" fill="rgb(233,220,26)" fg:x="4477" fg:w="64"/><text x="12.7658%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.40%)</title><rect x="12.4422%" y="69" width="0.4012%" height="15" fill="rgb(207,56,43)" fg:x="4466" fg:w="144"/><text x="12.7352%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.59%)</title><rect x="12.4422%" y="85" width="0.5851%" height="15" fill="rgb(230,63,8)" fg:x="4466" fg:w="210"/><text x="12.7352%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.61%)</title><rect x="12.4422%" y="101" width="0.6129%" height="15" fill="rgb(243,93,42)" fg:x="4466" fg:w="220"/><text x="12.7352%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.25%)</title><rect x="12.1747%" y="117" width="1.2509%" height="15" fill="rgb(239,198,54)" fg:x="4370" fg:w="449"/><text x="12.4677%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.86%)</title><rect x="11.9463%" y="133" width="1.8582%" height="15" fill="rgb(210,128,31)" fg:x="4288" fg:w="667"/><text x="12.2393%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.18%)</title><rect x="13.8045%" y="133" width="0.1783%" height="15" fill="rgb(230,92,9)" fg:x="4955" fg:w="64"/><text x="14.0975%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.17%)</title><rect x="13.9828%" y="133" width="0.1699%" height="15" fill="rgb(249,76,10)" fg:x="5019" fg:w="61"/><text x="14.2758%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 2.52%)</title><rect x="11.9463%" y="149" width="2.5157%" height="15" fill="rgb(205,144,42)" fg:x="4288" fg:w="903"/><text x="12.2393%" y="159.50">b..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.14%)</title><rect x="14.4620%" y="133" width="0.1421%" height="15" fill="rgb(218,100,27)" fg:x="5191" fg:w="51"/><text x="14.7550%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.33%)</title><rect x="14.6041%" y="133" width="0.3287%" height="15" fill="rgb(233,81,36)" fg:x="5242" fg:w="118"/><text x="14.8971%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.13%)</title><rect x="14.9329%" y="133" width="0.1282%" height="15" fill="rgb(213,150,24)" fg:x="5360" fg:w="46"/><text x="15.2258%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.79%)</title><rect x="14.4620%" y="149" width="0.7884%" height="15" fill="rgb(246,148,47)" fg:x="5191" fg:w="283"/><text x="14.7550%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="15.2505%" y="149" width="0.2285%" height="15" fill="rgb(209,48,19)" fg:x="5474" fg:w="82"/><text x="15.5434%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 5.32%)</title><rect x="10.6759%" y="165" width="5.3212%" height="15" fill="rgb(215,207,53)" fg:x="3832" fg:w="1910"/><text x="10.9688%" y="175.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.13%)</title><rect x="15.9971%" y="165" width="0.1282%" height="15" fill="rgb(209,215,27)" fg:x="5742" fg:w="46"/><text x="16.2901%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="16.1253%" y="165" width="0.0418%" height="15" fill="rgb(228,113,28)" fg:x="5788" fg:w="15"/><text x="16.4182%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="16.1670%" y="165" width="0.0223%" height="15" fill="rgb(206,85,9)" fg:x="5803" fg:w="8"/><text x="16.4600%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="16.1893%" y="149" width="0.2285%" height="15" fill="rgb(252,0,16)" fg:x="5811" fg:w="82"/><text x="16.4823%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.50%)</title><rect x="16.1893%" y="165" width="0.4959%" height="15" fill="rgb(234,204,35)" fg:x="5811" fg:w="178"/><text x="16.4823%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="16.6852%" y="133" width="0.2285%" height="15" fill="rgb(236,211,36)" fg:x="5989" fg:w="82"/><text x="16.9782%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.34%)</title><rect x="16.6852%" y="149" width="0.3427%" height="15" fill="rgb(222,75,2)" fg:x="5989" fg:w="123"/><text x="16.9782%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.59%)</title><rect x="16.6852%" y="165" width="0.5851%" height="15" fill="rgb(237,33,14)" fg:x="5989" fg:w="210"/><text x="16.9782%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="17.2703%" y="165" width="0.2285%" height="15" fill="rgb(217,73,30)" fg:x="6199" fg:w="82"/><text x="17.5633%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="17.4987%" y="165" width="0.2480%" height="15" fill="rgb(213,61,36)" fg:x="6281" fg:w="89"/><text x="17.7917%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.25%)</title><rect x="17.7467%" y="165" width="0.2535%" height="15" fill="rgb(213,87,46)" fg:x="6370" fg:w="91"/><text x="18.0397%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.25%)</title><rect x="18.0002%" y="165" width="0.2535%" height="15" fill="rgb(223,197,1)" fg:x="6461" fg:w="91"/><text x="18.2932%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="18.2537%" y="165" width="0.0139%" height="15" fill="rgb(240,41,5)" fg:x="6552" fg:w="5"/><text x="18.5467%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="18.2677%" y="165" width="0.2480%" height="15" fill="rgb(217,144,24)" fg:x="6557" fg:w="89"/><text x="18.5606%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.09%)</title><rect x="18.5156%" y="165" width="1.0921%" height="15" fill="rgb(230,40,49)" fg:x="6646" fg:w="392"/><text x="18.8086%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.09%)</title><rect x="19.6077%" y="165" width="1.0921%" height="15" fill="rgb(208,119,54)" fg:x="7038" fg:w="392"/><text x="19.9007%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.40%)</title><rect x="20.6998%" y="165" width="1.4041%" height="15" fill="rgb(252,199,13)" fg:x="7430" fg:w="504"/><text x="20.9928%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,875 instructions, 21.94%)</title><rect x="3.6301%" y="181" width="21.9396%" height="15" fill="rgb(206,41,41)" fg:x="1303" fg:w="7875"/><text x="3.9231%" y="191.50">candid::de::IDLDeserialize::n..</text></g><g><title>memcpy (408 instructions, 1.14%)</title><rect x="25.5697%" y="181" width="1.1367%" height="15" fill="rgb(228,35,31)" fg:x="9178" fg:w="408"/><text x="25.8627%" y="191.50"></text></g><g><title>memcpy (408 instructions, 1.14%)</title><rect x="26.7064%" y="181" width="1.1367%" height="15" fill="rgb(237,36,8)" fg:x="9586" fg:w="408"/><text x="26.9994%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.07%)</title><rect x="27.8431%" y="181" width="0.0669%" height="15" fill="rgb(219,197,7)" fg:x="9994" fg:w="24"/><text x="28.1361%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="27.9100%" y="181" width="0.2285%" height="15" fill="rgb(213,5,17)" fg:x="10018" fg:w="82"/><text x="28.2029%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.25%)</title><rect x="28.1384%" y="165" width="0.2535%" height="15" fill="rgb(242,50,28)" fg:x="10100" fg:w="91"/><text x="28.4314%" y="175.50"></text></g><g><title>candid::types::internal::env_add (175 instructions, 0.49%)</title><rect x="28.1384%" y="181" width="0.4875%" height="15" fill="rgb(252,202,47)" fg:x="10100" fg:w="175"/><text x="28.4314%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.25%)</title><rect x="28.6260%" y="181" width="0.2535%" height="15" fill="rgb(254,109,41)" fg:x="10275" fg:w="91"/><text x="28.9189%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.21%)</title><rect x="28.8795%" y="165" width="0.2145%" height="15" fill="rgb(222,60,12)" fg:x="10366" fg:w="77"/><text x="29.1724%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.25%)</title><rect x="29.0940%" y="149" width="0.2480%" height="15" fill="rgb(233,185,27)" fg:x="10443" fg:w="89"/><text x="29.3870%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.45%)</title><rect x="29.0940%" y="165" width="0.4458%" height="15" fill="rgb(251,157,3)" fg:x="10443" fg:w="160"/><text x="29.3870%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 1.16%)</title><rect x="28.8795%" y="181" width="1.1590%" height="15" fill="rgb(230,165,25)" fg:x="10366" fg:w="416"/><text x="29.1724%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.14%)</title><rect x="30.0384%" y="165" width="0.1365%" height="15" fill="rgb(220,48,42)" fg:x="10782" fg:w="49"/><text x="30.3314%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.04%)</title><rect x="30.1750%" y="165" width="0.0390%" height="15" fill="rgb(226,71,37)" fg:x="10831" fg:w="14"/><text x="30.4679%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.56%)</title><rect x="30.0384%" y="181" width="0.5572%" height="15" fill="rgb(206,49,8)" fg:x="10782" fg:w="200"/><text x="30.3314%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.14%)</title><rect x="30.5956%" y="181" width="0.1365%" height="15" fill="rgb(218,229,53)" fg:x="10982" fg:w="49"/><text x="30.8886%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.23%)</title><rect x="30.7322%" y="165" width="0.2312%" height="15" fill="rgb(228,191,0)" fg:x="11031" fg:w="83"/><text x="31.0251%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.06%)</title><rect x="31.1612%" y="149" width="0.0641%" height="15" fill="rgb(214,229,26)" fg:x="11185" fg:w="23"/><text x="31.4542%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.38%)</title><rect x="31.1612%" y="165" width="0.3845%" height="15" fill="rgb(221,99,52)" fg:x="11185" fg:w="138"/><text x="31.4542%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 1.01%)</title><rect x="30.7322%" y="181" width="1.0113%" height="15" fill="rgb(250,33,27)" fg:x="11031" fg:w="363"/><text x="31.0251%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.10%)</title><rect x="31.7435%" y="165" width="0.1031%" height="15" fill="rgb(220,95,50)" fg:x="11394" fg:w="37"/><text x="32.0364%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1370 (34 instructions, 0.09%)</title><rect x="31.8465%" y="165" width="0.0947%" height="15" fill="rgb(210,32,49)" fg:x="11431" fg:w="34"/><text x="32.1395%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1370 (34 instructions, 0.09%)</title><rect x="31.9413%" y="165" width="0.0947%" height="15" fill="rgb(240,52,22)" fg:x="11465" fg:w="34"/><text x="32.2342%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.09%)</title><rect x="32.0360%" y="165" width="0.0864%" height="15" fill="rgb(214,211,39)" fg:x="11499" fg:w="31"/><text x="32.3290%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.73%)</title><rect x="31.7435%" y="181" width="0.7271%" height="15" fill="rgb(238,114,7)" fg:x="11394" fg:w="261"/><text x="32.0364%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.04%)</title><rect x="32.4706%" y="181" width="0.0390%" height="15" fill="rgb(205,162,37)" fg:x="11655" fg:w="14"/><text x="32.7636%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.04%)</title><rect x="32.5096%" y="181" width="0.0390%" height="15" fill="rgb(210,206,12)" fg:x="11669" fg:w="14"/><text x="32.8026%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.04%)</title><rect x="32.5486%" y="181" width="0.0390%" height="15" fill="rgb(219,148,28)" fg:x="11683" fg:w="14"/><text x="32.8416%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.10%)</title><rect x="32.5876%" y="181" width="0.1031%" height="15" fill="rgb(213,118,13)" fg:x="11697" fg:w="37"/><text x="32.8806%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="32.6907%" y="165" width="0.0223%" height="15" fill="rgb(254,217,13)" fg:x="11734" fg:w="8"/><text x="32.9837%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="32.7130%" y="149" width="0.0752%" height="15" fill="rgb(219,153,33)" fg:x="11742" fg:w="27"/><text x="33.0060%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.32%)</title><rect x="32.7130%" y="165" width="0.3232%" height="15" fill="rgb(230,14,27)" fg:x="11742" fg:w="116"/><text x="33.0060%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.17%)</title><rect x="33.0362%" y="149" width="0.1699%" height="15" fill="rgb(245,115,51)" fg:x="11858" fg:w="61"/><text x="33.3291%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.37%)</title><rect x="33.0362%" y="165" width="0.3677%" height="15" fill="rgb(207,169,41)" fg:x="11858" fg:w="132"/><text x="33.3291%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.04%)</title><rect x="33.4039%" y="165" width="0.0390%" height="15" fill="rgb(215,3,15)" fg:x="11990" fg:w="14"/><text x="33.6969%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="33.4429%" y="165" width="0.0195%" height="15" fill="rgb(237,170,37)" fg:x="12004" fg:w="7"/><text x="33.7359%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (367 instructions, 1.02%)</title><rect x="32.6907%" y="181" width="1.0225%" height="15" fill="rgb(241,129,48)" fg:x="11734" fg:w="367"/><text x="32.9837%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,230 instructions, 31.29%)</title><rect x="3.6301%" y="197" width="31.2866%" height="15" fill="rgb(224,122,24)" fg:x="1303" fg:w="11230"/><text x="3.9231%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.17%)</title><rect x="34.9167%" y="197" width="0.1699%" height="15" fill="rgb(211,74,12)" fg:x="12533" fg:w="61"/><text x="35.2097%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,537 instructions, 34.93%)</title><rect x="0.4569%" y="213" width="34.9278%" height="15" fill="rgb(249,188,3)" fg:x="164" fg:w="12537"/><text x="0.7499%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="35.3847%" y="213" width="0.5461%" height="15" fill="rgb(231,144,25)" fg:x="12701" fg:w="196"/><text x="35.6777%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="35.9308%" y="213" width="0.5461%" height="15" fill="rgb(219,205,31)" fg:x="12897" fg:w="196"/><text x="36.2238%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="36.4768%" y="213" width="0.5461%" height="15" fill="rgb(212,208,0)" fg:x="13093" fg:w="196"/><text x="36.7698%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="37.0229%" y="213" width="0.5461%" height="15" fill="rgb(250,23,2)" fg:x="13289" fg:w="196"/><text x="37.3159%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="37.5690%" y="213" width="0.5461%" height="15" fill="rgb(219,202,9)" fg:x="13485" fg:w="196"/><text x="37.8619%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="38.1150%" y="213" width="0.5461%" height="15" fill="rgb(208,119,4)" fg:x="13681" fg:w="196"/><text x="38.4080%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="38.6611%" y="213" width="0.5461%" height="15" fill="rgb(206,19,48)" fg:x="13877" fg:w="196"/><text x="38.9540%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="39.2071%" y="213" width="0.5461%" height="15" fill="rgb(219,83,15)" fg:x="14073" fg:w="196"/><text x="39.5001%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="39.7532%" y="213" width="0.5461%" height="15" fill="rgb(209,183,43)" fg:x="14269" fg:w="196"/><text x="40.0461%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="40.2992%" y="213" width="0.5461%" height="15" fill="rgb(241,138,34)" fg:x="14465" fg:w="196"/><text x="40.5922%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="40.8453%" y="213" width="0.5461%" height="15" fill="rgb(252,20,52)" fg:x="14661" fg:w="196"/><text x="41.1382%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="41.3913%" y="213" width="0.5461%" height="15" fill="rgb(211,71,12)" fg:x="14857" fg:w="196"/><text x="41.6843%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="41.9374%" y="213" width="0.5461%" height="15" fill="rgb(215,151,0)" fg:x="15053" fg:w="196"/><text x="42.2303%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="42.4834%" y="213" width="0.5461%" height="15" fill="rgb(227,172,15)" fg:x="15249" fg:w="196"/><text x="42.7764%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="43.0295%" y="213" width="0.5461%" height="15" fill="rgb(208,135,31)" fg:x="15445" fg:w="196"/><text x="43.3224%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="43.5755%" y="213" width="0.5461%" height="15" fill="rgb(231,188,2)" fg:x="15641" fg:w="196"/><text x="43.8685%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="44.1216%" y="213" width="0.5461%" height="15" fill="rgb(233,50,7)" fg:x="15837" fg:w="196"/><text x="44.4145%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="44.6676%" y="213" width="0.5461%" height="15" fill="rgb(214,18,6)" fg:x="16033" fg:w="196"/><text x="44.9606%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="45.2137%" y="213" width="0.5461%" height="15" fill="rgb(249,45,29)" fg:x="16229" fg:w="196"/><text x="45.5067%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="45.7597%" y="213" width="0.5461%" height="15" fill="rgb(254,102,4)" fg:x="16425" fg:w="196"/><text x="46.0527%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="46.3058%" y="213" width="0.5461%" height="15" fill="rgb(229,141,46)" fg:x="16621" fg:w="196"/><text x="46.5988%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="46.8518%" y="213" width="0.5461%" height="15" fill="rgb(226,104,20)" fg:x="16817" fg:w="196"/><text x="47.1448%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="47.3979%" y="213" width="0.5461%" height="15" fill="rgb(239,49,40)" fg:x="17013" fg:w="196"/><text x="47.6909%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="47.9439%" y="213" width="0.5461%" height="15" fill="rgb(228,71,21)" fg:x="17209" fg:w="196"/><text x="48.2369%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="48.4900%" y="213" width="0.5461%" height="15" fill="rgb(220,157,40)" fg:x="17405" fg:w="196"/><text x="48.7830%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="49.0361%" y="213" width="0.5461%" height="15" fill="rgb(251,166,1)" fg:x="17601" fg:w="196"/><text x="49.3290%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="49.5821%" y="213" width="0.5461%" height="15" fill="rgb(212,175,38)" fg:x="17797" fg:w="196"/><text x="49.8751%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="50.1282%" y="213" width="0.5461%" height="15" fill="rgb(210,12,23)" fg:x="17993" fg:w="196"/><text x="50.4211%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="50.6742%" y="213" width="0.5461%" height="15" fill="rgb(205,34,26)" fg:x="18189" fg:w="196"/><text x="50.9672%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="51.2203%" y="213" width="0.5461%" height="15" fill="rgb(229,125,48)" fg:x="18385" fg:w="196"/><text x="51.5132%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="51.7663%" y="213" width="0.5461%" height="15" fill="rgb(254,128,43)" fg:x="18581" fg:w="196"/><text x="52.0593%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="52.3124%" y="213" width="0.5461%" height="15" fill="rgb(239,221,50)" fg:x="18777" fg:w="196"/><text x="52.6053%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="52.8584%" y="213" width="0.5461%" height="15" fill="rgb(247,34,42)" fg:x="18973" fg:w="196"/><text x="53.1514%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="53.4045%" y="213" width="0.5461%" height="15" fill="rgb(221,77,40)" fg:x="19169" fg:w="196"/><text x="53.6974%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="53.9505%" y="213" width="0.5461%" height="15" fill="rgb(237,176,36)" fg:x="19365" fg:w="196"/><text x="54.2435%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="54.4966%" y="213" width="0.5461%" height="15" fill="rgb(212,187,4)" fg:x="19561" fg:w="196"/><text x="54.7895%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="55.0426%" y="213" width="0.5461%" height="15" fill="rgb(249,182,39)" fg:x="19757" fg:w="196"/><text x="55.3356%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="55.5887%" y="213" width="0.5461%" height="15" fill="rgb(209,176,7)" fg:x="19953" fg:w="196"/><text x="55.8816%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="56.1347%" y="213" width="0.5461%" height="15" fill="rgb(240,57,25)" fg:x="20149" fg:w="196"/><text x="56.4277%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="56.6808%" y="213" width="0.5461%" height="15" fill="rgb(247,214,51)" fg:x="20345" fg:w="196"/><text x="56.9738%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="57.2268%" y="213" width="0.5461%" height="15" fill="rgb(242,47,14)" fg:x="20541" fg:w="196"/><text x="57.5198%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="57.7729%" y="213" width="0.5461%" height="15" fill="rgb(248,217,42)" fg:x="20737" fg:w="196"/><text x="58.0659%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="58.3189%" y="213" width="0.5461%" height="15" fill="rgb(240,207,7)" fg:x="20933" fg:w="196"/><text x="58.6119%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="58.8650%" y="213" width="0.5461%" height="15" fill="rgb(210,141,53)" fg:x="21129" fg:w="196"/><text x="59.1580%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="59.4110%" y="213" width="0.5461%" height="15" fill="rgb(241,187,27)" fg:x="21325" fg:w="196"/><text x="59.7040%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="59.9571%" y="213" width="0.5461%" height="15" fill="rgb(222,202,10)" fg:x="21521" fg:w="196"/><text x="60.2501%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="60.5031%" y="213" width="0.5461%" height="15" fill="rgb(220,89,50)" fg:x="21717" fg:w="196"/><text x="60.7961%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="61.0492%" y="213" width="0.5461%" height="15" fill="rgb(213,29,18)" fg:x="21913" fg:w="196"/><text x="61.3422%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="61.5953%" y="213" width="0.5461%" height="15" fill="rgb(249,162,7)" fg:x="22109" fg:w="196"/><text x="61.8882%" y="223.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.55%)</title><rect x="62.1413%" y="213" width="0.5461%" height="15" fill="rgb(233,212,24)" fg:x="22305" fg:w="196"/><text x="62.4343%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (62 instructions, 0.17%)</title><rect x="62.6874%" y="165" width="0.1727%" height="15" fill="rgb(235,166,26)" fg:x="22501" fg:w="62"/><text x="62.9803%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.37%)</title><rect x="62.6874%" y="181" width="0.3705%" height="15" fill="rgb(238,216,51)" fg:x="22501" fg:w="133"/><text x="62.9803%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="63.0579%" y="165" width="0.0752%" height="15" fill="rgb(224,101,42)" fg:x="22634" fg:w="27"/><text x="63.3509%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (117 instructions, 0.33%)</title><rect x="63.0579%" y="181" width="0.3260%" height="15" fill="rgb(220,185,18)" fg:x="22634" fg:w="117"/><text x="63.3509%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (426 instructions, 1.19%)</title><rect x="62.6874%" y="197" width="1.1868%" height="15" fill="rgb(226,21,2)" fg:x="22501" fg:w="426"/><text x="62.9803%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.44%)</title><rect x="63.8742%" y="181" width="1.4431%" height="15" fill="rgb(223,179,10)" fg:x="22927" fg:w="518"/><text x="64.1672%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="65.3173%" y="133" width="0.2285%" height="15" fill="rgb(229,32,46)" fg:x="23445" fg:w="82"/><text x="65.6103%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.34%)</title><rect x="65.3173%" y="149" width="0.3427%" height="15" fill="rgb(212,19,15)" fg:x="23445" fg:w="123"/><text x="65.6103%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.57%)</title><rect x="65.3173%" y="165" width="0.5739%" height="15" fill="rgb(241,174,23)" fg:x="23445" fg:w="206"/><text x="65.6103%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="65.8912%" y="165" width="0.0418%" height="15" fill="rgb(240,220,53)" fg:x="23651" fg:w="15"/><text x="66.1842%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="65.9330%" y="165" width="0.0418%" height="15" fill="rgb(216,121,1)" fg:x="23666" fg:w="15"/><text x="66.2260%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.19%)</title><rect x="65.3173%" y="181" width="1.1924%" height="15" fill="rgb(229,128,34)" fg:x="23445" fg:w="428"/><text x="65.6103%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.44%)</title><rect x="66.5097%" y="181" width="1.4376%" height="15" fill="rgb(251,108,30)" fg:x="23873" fg:w="516"/><text x="66.8027%" y="191.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.02%)</title><rect x="67.9473%" y="181" width="0.0195%" height="15" fill="rgb(237,186,44)" fg:x="24389" fg:w="7"/><text x="68.2403%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 4.31%)</title><rect x="63.8742%" y="197" width="4.3071%" height="15" fill="rgb(234,34,50)" fg:x="22927" fg:w="1546"/><text x="64.1672%" y="207.50">cand..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="68.1813%" y="197" width="0.0223%" height="15" fill="rgb(231,21,16)" fg:x="24473" fg:w="8"/><text x="68.4743%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="68.2036%" y="197" width="0.0223%" height="15" fill="rgb(229,206,25)" fg:x="24481" fg:w="8"/><text x="68.4966%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.17%)</title><rect x="68.2259%" y="197" width="0.1699%" height="15" fill="rgb(221,118,38)" fg:x="24489" fg:w="61"/><text x="68.5189%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,682 instructions, 7.47%)</title><rect x="62.6874%" y="213" width="7.4720%" height="15" fill="rgb(249,177,8)" fg:x="22501" fg:w="2682"/><text x="62.9803%" y="223.50">ic_cdk::..</text></g><g><title>imrc_hashmap::__canister_method_batch_get::{{closure}} (35,296 instructions, 98.33%)</title><rect x="0.4569%" y="229" width="98.3340%" height="15" fill="rgb(233,54,50)" fg:x="164" fg:w="35296"/><text x="0.7499%" y="239.50">imrc_hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.04%)</title><rect x="98.7909%" y="229" width="0.0418%" height="15" fill="rgb(254,212,43)" fg:x="35460" fg:w="15"/><text x="99.0839%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.08%)</title><rect x="99.0834%" y="197" width="0.0752%" height="15" fill="rgb(243,86,29)" fg:x="35565" fg:w="27"/><text x="99.3764%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.57%)</title><rect x="98.8355%" y="213" width="0.5711%" height="15" fill="rgb(205,176,19)" fg:x="35476" fg:w="205"/><text x="99.1284%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 0.90%)</title><rect x="98.8327%" y="229" width="0.8999%" height="15" fill="rgb(244,219,40)" fg:x="35475" fg:w="323"/><text x="99.1256%" y="239.50"></text></g><g><title>all (35,894 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,158,13)" fg:x="0" fg:w="35894"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_get (35,894 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,49,11)" fg:x="0" fg:w="35894"/><text x="0.2930%" y="255.50">canister_update batch_get</text></g></svg></svg>