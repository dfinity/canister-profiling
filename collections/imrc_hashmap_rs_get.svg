<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="38416"><g><title>ic_cdk::setup (24 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0625%" height="15" fill="rgb(228,154,42)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.31%)</title><rect x="0.0625%" y="197" width="0.3150%" height="15" fill="rgb(254,206,16)" fg:x="24" fg:w="121"/><text x="0.3554%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.20%)</title><rect x="0.3774%" y="197" width="0.2004%" height="15" fill="rgb(220,228,29)" fg:x="145" fg:w="77"/><text x="0.6704%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="0.5779%" y="165" width="0.2369%" height="15" fill="rgb(249,82,45)" fg:x="222" fg:w="91"/><text x="0.8709%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="0.8148%" y="149" width="0.2135%" height="15" fill="rgb(213,212,38)" fg:x="313" fg:w="82"/><text x="1.1077%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.0282%" y="133" width="0.0156%" height="15" fill="rgb(234,30,32)" fg:x="395" fg:w="6"/><text x="1.3212%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.15%)</title><rect x="1.0282%" y="149" width="1.1454%" height="15" fill="rgb(223,77,45)" fg:x="395" fg:w="440"/><text x="1.3212%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="2.1736%" y="149" width="0.2473%" height="15" fill="rgb(221,24,12)" fg:x="835" fg:w="95"/><text x="2.4665%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.4209%" y="149" width="0.1562%" height="15" fill="rgb(227,113,48)" fg:x="930" fg:w="60"/><text x="2.7138%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.5771%" y="149" width="0.1562%" height="15" fill="rgb(206,52,7)" fg:x="990" fg:w="60"/><text x="2.8700%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.7332%" y="149" width="0.1562%" height="15" fill="rgb(212,35,53)" fg:x="1050" fg:w="60"/><text x="3.0262%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.8894%" y="149" width="0.1562%" height="15" fill="rgb(228,133,47)" fg:x="1110" fg:w="60"/><text x="3.1824%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="3.0456%" y="149" width="0.2135%" height="15" fill="rgb(251,166,13)" fg:x="1170" fg:w="82"/><text x="3.3386%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="3.2591%" y="149" width="0.1822%" height="15" fill="rgb(218,64,11)" fg:x="1252" fg:w="70"/><text x="3.5520%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.4413%" y="133" width="0.0156%" height="15" fill="rgb(222,138,29)" fg:x="1322" fg:w="6"/><text x="3.7342%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.15%)</title><rect x="3.4413%" y="149" width="1.1454%" height="15" fill="rgb(224,199,42)" fg:x="1322" fg:w="440"/><text x="3.7342%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.5866%" y="149" width="0.0495%" height="15" fill="rgb(235,53,26)" fg:x="1762" fg:w="19"/><text x="4.8796%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="4.6361%" y="133" width="0.2369%" height="15" fill="rgb(216,66,32)" fg:x="1781" fg:w="91"/><text x="4.9291%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.17%)</title><rect x="4.8730%" y="101" width="0.1744%" height="15" fill="rgb(207,209,13)" fg:x="1872" fg:w="67"/><text x="5.1659%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.26%)</title><rect x="4.8730%" y="117" width="0.2551%" height="15" fill="rgb(239,28,5)" fg:x="1872" fg:w="98"/><text x="5.1659%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="5.1281%" y="69" width="0.0286%" height="15" fill="rgb(218,90,38)" fg:x="1970" fg:w="11"/><text x="5.4210%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="5.1567%" y="53" width="0.0911%" height="15" fill="rgb(239,86,36)" fg:x="1981" fg:w="35"/><text x="5.4497%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.17%)</title><rect x="5.1567%" y="69" width="0.1718%" height="15" fill="rgb(208,60,53)" fg:x="1981" fg:w="66"/><text x="5.4497%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.38%)</title><rect x="5.1281%" y="85" width="0.3827%" height="15" fill="rgb(252,172,46)" fg:x="1970" fg:w="147"/><text x="5.4210%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.55%)</title><rect x="5.1281%" y="101" width="0.5519%" height="15" fill="rgb(212,177,42)" fg:x="1970" fg:w="212"/><text x="5.4210%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.58%)</title><rect x="5.1281%" y="117" width="0.5779%" height="15" fill="rgb(250,167,31)" fg:x="1970" fg:w="222"/><text x="5.4210%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 1.20%)</title><rect x="4.8730%" y="133" width="1.2000%" height="15" fill="rgb(250,106,46)" fg:x="1872" fg:w="461"/><text x="5.1659%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 1.81%)</title><rect x="4.6361%" y="149" width="1.8143%" height="15" fill="rgb(220,109,26)" fg:x="1781" fg:w="697"/><text x="4.9291%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="6.4504%" y="149" width="0.2473%" height="15" fill="rgb(215,108,9)" fg:x="2478" fg:w="95"/><text x="6.7434%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="6.6977%" y="149" width="0.1640%" height="15" fill="rgb(239,168,7)" fg:x="2573" fg:w="63"/><text x="6.9907%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="6.8617%" y="149" width="0.1978%" height="15" fill="rgb(246,224,37)" fg:x="2636" fg:w="76"/><text x="7.1547%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="7.0596%" y="149" width="0.1822%" height="15" fill="rgb(218,105,44)" fg:x="2712" fg:w="70"/><text x="7.3525%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="7.2418%" y="117" width="0.0156%" height="15" fill="rgb(221,131,31)" fg:x="2782" fg:w="6"/><text x="7.5347%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.15%)</title><rect x="7.2418%" y="133" width="1.1454%" height="15" fill="rgb(229,209,2)" fg:x="2782" fg:w="440"/><text x="7.5347%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="8.3871%" y="133" width="0.0495%" height="15" fill="rgb(236,203,46)" fg:x="3222" fg:w="19"/><text x="8.6801%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="8.4366%" y="117" width="0.2369%" height="15" fill="rgb(228,108,21)" fg:x="3241" fg:w="91"/><text x="8.7296%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.17%)</title><rect x="8.6735%" y="85" width="0.1744%" height="15" fill="rgb(215,146,43)" fg:x="3332" fg:w="67"/><text x="8.9664%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.26%)</title><rect x="8.6735%" y="101" width="0.2551%" height="15" fill="rgb(240,32,41)" fg:x="3332" fg:w="98"/><text x="8.9664%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="8.9286%" y="53" width="0.0286%" height="15" fill="rgb(233,198,31)" fg:x="3430" fg:w="11"/><text x="9.2215%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="8.9572%" y="37" width="0.0911%" height="15" fill="rgb(227,218,32)" fg:x="3441" fg:w="35"/><text x="9.2502%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.17%)</title><rect x="8.9572%" y="53" width="0.1718%" height="15" fill="rgb(240,226,0)" fg:x="3441" fg:w="66"/><text x="9.2502%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.38%)</title><rect x="8.9286%" y="69" width="0.3827%" height="15" fill="rgb(248,217,14)" fg:x="3430" fg:w="147"/><text x="9.2215%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.55%)</title><rect x="8.9286%" y="85" width="0.5519%" height="15" fill="rgb(233,176,23)" fg:x="3430" fg:w="212"/><text x="9.2215%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.58%)</title><rect x="8.9286%" y="101" width="0.5779%" height="15" fill="rgb(223,119,40)" fg:x="3430" fg:w="222"/><text x="9.2215%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 1.20%)</title><rect x="8.6735%" y="117" width="1.2000%" height="15" fill="rgb(244,0,54)" fg:x="3332" fg:w="461"/><text x="8.9664%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (697 instructions, 1.81%)</title><rect x="8.4366%" y="133" width="1.8143%" height="15" fill="rgb(233,3,40)" fg:x="3241" fg:w="697"/><text x="8.7296%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="10.2509%" y="133" width="0.2473%" height="15" fill="rgb(241,59,47)" fg:x="3938" fg:w="95"/><text x="10.5439%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="10.4982%" y="133" width="0.1640%" height="15" fill="rgb(233,66,10)" fg:x="4033" fg:w="63"/><text x="10.7912%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.21%)</title><rect x="10.6622%" y="117" width="0.2135%" height="15" fill="rgb(226,119,36)" fg:x="4096" fg:w="82"/><text x="10.9552%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.25%)</title><rect x="10.8757%" y="117" width="0.2473%" height="15" fill="rgb(249,26,8)" fg:x="4178" fg:w="95"/><text x="11.1686%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="11.1230%" y="117" width="0.1978%" height="15" fill="rgb(206,190,37)" fg:x="4273" fg:w="76"/><text x="11.4159%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.86%)</title><rect x="10.6622%" y="133" width="0.8590%" height="15" fill="rgb(242,60,53)" fg:x="4096" fg:w="330"/><text x="10.9552%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="11.5212%" y="133" width="0.2369%" height="15" fill="rgb(243,121,2)" fg:x="4426" fg:w="91"/><text x="11.8142%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,980 instructions, 5.15%)</title><rect x="7.2418%" y="149" width="5.1541%" height="15" fill="rgb(233,98,3)" fg:x="2782" fg:w="1980"/><text x="7.5347%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="12.3959%" y="149" width="0.1978%" height="15" fill="rgb(216,107,19)" fg:x="4762" fg:w="76"/><text x="12.6888%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.5937%" y="149" width="0.0390%" height="15" fill="rgb(211,212,6)" fg:x="4838" fg:w="15"/><text x="12.8867%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.6328%" y="149" width="0.0390%" height="15" fill="rgb(251,47,31)" fg:x="4853" fg:w="15"/><text x="12.9257%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="12.6718%" y="149" width="0.0234%" height="15" fill="rgb(218,19,13)" fg:x="4868" fg:w="9"/><text x="12.9648%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.05%)</title><rect x="12.6952%" y="149" width="0.0469%" height="15" fill="rgb(216,6,26)" fg:x="4877" fg:w="18"/><text x="12.9882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="12.7421%" y="133" width="0.2369%" height="15" fill="rgb(230,58,28)" fg:x="4895" fg:w="91"/><text x="13.0351%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.49%)</title><rect x="12.7421%" y="149" width="0.4868%" height="15" fill="rgb(225,209,0)" fg:x="4895" fg:w="187"/><text x="13.0351%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.2289%" y="101" width="0.2369%" height="15" fill="rgb(246,67,54)" fg:x="5082" fg:w="91"/><text x="13.5218%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.28%)</title><rect x="13.2289%" y="117" width="0.2759%" height="15" fill="rgb(248,75,5)" fg:x="5082" fg:w="106"/><text x="13.5218%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.39%)</title><rect x="13.2289%" y="133" width="0.3905%" height="15" fill="rgb(231,72,26)" fg:x="5082" fg:w="150"/><text x="13.5218%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (232 instructions, 0.60%)</title><rect x="13.2289%" y="149" width="0.6039%" height="15" fill="rgb(220,151,33)" fg:x="5082" fg:w="232"/><text x="13.5218%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.8328%" y="149" width="0.2369%" height="15" fill="rgb(251,195,9)" fg:x="5314" fg:w="91"/><text x="14.1257%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="14.0697%" y="149" width="0.2239%" height="15" fill="rgb(214,167,6)" fg:x="5405" fg:w="86"/><text x="14.3626%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.2935%" y="149" width="0.2369%" height="15" fill="rgb(205,42,1)" fg:x="5491" fg:w="91"/><text x="14.5865%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.5304%" y="149" width="0.2369%" height="15" fill="rgb(230,131,9)" fg:x="5582" fg:w="91"/><text x="14.8234%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="14.7673%" y="149" width="0.0104%" height="15" fill="rgb(222,227,37)" fg:x="5673" fg:w="4"/><text x="15.0603%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="14.7777%" y="149" width="0.2239%" height="15" fill="rgb(245,50,47)" fg:x="5677" fg:w="86"/><text x="15.0707%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.11%)</title><rect x="15.0016%" y="149" width="1.1141%" height="15" fill="rgb(233,118,47)" fg:x="5763" fg:w="428"/><text x="15.2945%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.11%)</title><rect x="16.1157%" y="149" width="1.1141%" height="15" fill="rgb(233,67,38)" fg:x="6191" fg:w="428"/><text x="16.4086%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,452 instructions, 19.40%)</title><rect x="0.8148%" y="165" width="19.3982%" height="15" fill="rgb(225,170,51)" fg:x="313" fg:w="7452"/><text x="1.1077%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (380 instructions, 0.99%)</title><rect x="20.2129%" y="165" width="0.9892%" height="15" fill="rgb(216,145,49)" fg:x="7765" fg:w="380"/><text x="20.5059%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="21.2021%" y="149" width="0.0364%" height="15" fill="rgb(214,97,40)" fg:x="8145" fg:w="14"/><text x="21.4951%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.16%)</title><rect x="21.2021%" y="165" width="0.1640%" height="15" fill="rgb(221,124,49)" fg:x="8145" fg:w="63"/><text x="21.4951%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="21.3661%" y="165" width="0.2369%" height="15" fill="rgb(228,21,13)" fg:x="8208" fg:w="91"/><text x="21.6591%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="21.6030%" y="149" width="0.0364%" height="15" fill="rgb(231,13,51)" fg:x="8299" fg:w="14"/><text x="21.8959%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="21.6394%" y="133" width="0.1536%" height="15" fill="rgb(220,31,27)" fg:x="8313" fg:w="59"/><text x="21.9324%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.24%)</title><rect x="21.7930%" y="133" width="0.2447%" height="15" fill="rgb(229,118,0)" fg:x="8372" fg:w="94"/><text x="22.0860%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.45%)</title><rect x="22.0377%" y="133" width="0.4503%" height="15" fill="rgb(250,201,47)" fg:x="8466" fg:w="173"/><text x="22.3307%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.51%)</title><rect x="21.6394%" y="149" width="1.5072%" height="15" fill="rgb(230,202,53)" fg:x="8313" fg:w="579"/><text x="21.9324%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 2.14%)</title><rect x="21.6030%" y="165" width="2.1371%" height="15" fill="rgb(231,173,44)" fg:x="8299" fg:w="821"/><text x="21.8959%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="23.7401%" y="165" width="0.2369%" height="15" fill="rgb(212,115,53)" fg:x="9120" fg:w="91"/><text x="24.0331%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="23.9770%" y="149" width="0.0364%" height="15" fill="rgb(249,109,2)" fg:x="9211" fg:w="14"/><text x="24.2700%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="24.0134%" y="133" width="0.1536%" height="15" fill="rgb(208,6,16)" fg:x="9225" fg:w="59"/><text x="24.3064%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.24%)</title><rect x="24.1670%" y="133" width="0.2447%" height="15" fill="rgb(234,119,18)" fg:x="9284" fg:w="94"/><text x="24.4600%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.45%)</title><rect x="24.4117%" y="133" width="0.4503%" height="15" fill="rgb(214,229,43)" fg:x="9378" fg:w="173"/><text x="24.7047%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.51%)</title><rect x="24.0134%" y="149" width="1.5072%" height="15" fill="rgb(206,38,2)" fg:x="9225" fg:w="579"/><text x="24.3064%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.20%)</title><rect x="25.5206%" y="149" width="0.2004%" height="15" fill="rgb(226,157,50)" fg:x="9804" fg:w="77"/><text x="25.8136%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="25.7211%" y="133" width="0.2239%" height="15" fill="rgb(229,10,16)" fg:x="9881" fg:w="86"/><text x="26.0140%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.31%)</title><rect x="25.7211%" y="149" width="0.3150%" height="15" fill="rgb(235,97,47)" fg:x="9881" fg:w="121"/><text x="26.0140%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 2.57%)</title><rect x="23.9770%" y="165" width="2.5666%" height="15" fill="rgb(231,137,42)" fg:x="9211" fg:w="986"/><text x="24.2700%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.15%)</title><rect x="26.5436%" y="117" width="0.1536%" height="15" fill="rgb(214,130,37)" fg:x="10197" fg:w="59"/><text x="26.8366%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.24%)</title><rect x="26.5436%" y="133" width="0.2447%" height="15" fill="rgb(232,110,17)" fg:x="10197" fg:w="94"/><text x="26.8366%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.82%)</title><rect x="26.5436%" y="149" width="0.8200%" height="15" fill="rgb(225,151,9)" fg:x="10197" fg:w="315"/><text x="26.8366%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.359 (18 instructions, 0.05%)</title><rect x="27.3636%" y="149" width="0.0469%" height="15" fill="rgb(223,229,36)" fg:x="10512" fg:w="18"/><text x="27.6566%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="27.4105%" y="149" width="0.0338%" height="15" fill="rgb(247,110,2)" fg:x="10530" fg:w="13"/><text x="27.7034%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.43%)</title><rect x="26.5436%" y="165" width="1.4343%" height="15" fill="rgb(213,222,45)" fg:x="10197" fg:w="551"/><text x="26.8366%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.14%)</title><rect x="27.9779%" y="165" width="0.1380%" height="15" fill="rgb(233,36,35)" fg:x="10748" fg:w="53"/><text x="28.2709%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.34%)</title><rect x="28.1159%" y="149" width="0.3436%" height="15" fill="rgb(229,106,52)" fg:x="10801" fg:w="132"/><text x="28.4089%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.34%)</title><rect x="28.5506%" y="149" width="0.3436%" height="15" fill="rgb(210,139,10)" fg:x="10968" fg:w="132"/><text x="28.8436%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.87%)</title><rect x="28.1159%" y="165" width="0.8694%" height="15" fill="rgb(210,58,13)" fg:x="10801" fg:w="334"/><text x="28.4089%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.09%)</title><rect x="28.9853%" y="149" width="0.0885%" height="15" fill="rgb(252,26,33)" fg:x="11135" fg:w="34"/><text x="29.2783%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1747 (18 instructions, 0.05%)</title><rect x="29.0738%" y="149" width="0.0469%" height="15" fill="rgb(227,101,52)" fg:x="11169" fg:w="18"/><text x="29.3668%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1747 (18 instructions, 0.05%)</title><rect x="29.1207%" y="149" width="0.0469%" height="15" fill="rgb(243,39,47)" fg:x="11187" fg:w="18"/><text x="29.4136%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.44%)</title><rect x="28.9853%" y="165" width="0.4399%" height="15" fill="rgb(214,18,19)" fg:x="11135" fg:w="169"/><text x="29.2783%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4252%" y="165" width="0.0338%" height="15" fill="rgb(250,175,34)" fg:x="11304" fg:w="13"/><text x="29.7182%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4591%" y="165" width="0.0338%" height="15" fill="rgb(225,55,5)" fg:x="11317" fg:w="13"/><text x="29.7520%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="29.4929%" y="165" width="0.0338%" height="15" fill="rgb(206,77,3)" fg:x="11330" fg:w="13"/><text x="29.7859%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.15%)</title><rect x="29.5268%" y="165" width="1.1454%" height="15" fill="rgb(239,21,5)" fg:x="11343" fg:w="440"/><text x="29.8197%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.05%)</title><rect x="30.6721%" y="133" width="0.0495%" height="15" fill="rgb(249,19,41)" fg:x="11783" fg:w="19"/><text x="30.9651%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.47%)</title><rect x="30.7216%" y="133" width="0.4712%" height="15" fill="rgb(222,80,48)" fg:x="11802" fg:w="181"/><text x="31.0145%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.17%)</title><rect x="31.1927%" y="101" width="0.1744%" height="15" fill="rgb(247,148,4)" fg:x="11983" fg:w="67"/><text x="31.4857%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.60%)</title><rect x="31.1927%" y="117" width="0.5987%" height="15" fill="rgb(251,216,2)" fg:x="11983" fg:w="230"/><text x="31.4857%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265 instructions, 0.69%)</title><rect x="31.1927%" y="133" width="0.6898%" height="15" fill="rgb(220,152,10)" fg:x="11983" fg:w="265"/><text x="31.4857%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="31.8825%" y="133" width="0.0338%" height="15" fill="rgb(250,95,20)" fg:x="12248" fg:w="13"/><text x="32.1755%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (540 instructions, 1.41%)</title><rect x="30.6721%" y="149" width="1.4057%" height="15" fill="rgb(225,190,3)" fg:x="11783" fg:w="540"/><text x="30.9651%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (589 instructions, 1.53%)</title><rect x="30.6721%" y="165" width="1.5332%" height="15" fill="rgb(226,206,29)" fg:x="11783" fg:w="589"/><text x="30.9651%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.16%)</title><rect x="32.2053%" y="149" width="0.1614%" height="15" fill="rgb(251,96,15)" fg:x="12372" fg:w="62"/><text x="32.4983%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.17%)</title><rect x="32.3667%" y="149" width="0.1744%" height="15" fill="rgb(212,180,10)" fg:x="12434" fg:w="67"/><text x="32.6597%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.59%)</title><rect x="32.2053%" y="165" width="0.5935%" height="15" fill="rgb(225,131,17)" fg:x="12372" fg:w="228"/><text x="32.4983%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,846 instructions, 36.04%)</title><rect x="0.5779%" y="181" width="36.0423%" height="15" fill="rgb(218,136,19)" fg:x="222" fg:w="13846"/><text x="0.8709%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (25 instructions, 0.07%)</title><rect x="36.6202%" y="181" width="0.0651%" height="15" fill="rgb(209,86,37)" fg:x="14068" fg:w="25"/><text x="36.9131%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="36.6852%" y="181" width="0.5102%" height="15" fill="rgb(229,37,51)" fg:x="14093" fg:w="196"/><text x="36.9782%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="37.1954%" y="181" width="0.5102%" height="15" fill="rgb(220,48,32)" fg:x="14289" fg:w="196"/><text x="37.4884%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="37.7056%" y="181" width="0.5102%" height="15" fill="rgb(212,219,16)" fg:x="14485" fg:w="196"/><text x="37.9986%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="38.2158%" y="181" width="0.5102%" height="15" fill="rgb(228,218,5)" fg:x="14681" fg:w="196"/><text x="38.5088%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="38.7261%" y="181" width="0.5102%" height="15" fill="rgb(218,206,50)" fg:x="14877" fg:w="196"/><text x="39.0190%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="39.2363%" y="181" width="0.5102%" height="15" fill="rgb(206,171,29)" fg:x="15073" fg:w="196"/><text x="39.5292%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="39.7465%" y="181" width="0.5102%" height="15" fill="rgb(211,36,0)" fg:x="15269" fg:w="196"/><text x="40.0394%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="40.2567%" y="181" width="0.5102%" height="15" fill="rgb(239,105,30)" fg:x="15465" fg:w="196"/><text x="40.5496%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="40.7669%" y="181" width="0.5102%" height="15" fill="rgb(243,219,0)" fg:x="15661" fg:w="196"/><text x="41.0598%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="41.2771%" y="181" width="0.5102%" height="15" fill="rgb(244,39,49)" fg:x="15857" fg:w="196"/><text x="41.5700%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="41.7873%" y="181" width="0.5102%" height="15" fill="rgb(247,114,35)" fg:x="16053" fg:w="196"/><text x="42.0802%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="42.2975%" y="181" width="0.5102%" height="15" fill="rgb(211,137,46)" fg:x="16249" fg:w="196"/><text x="42.5904%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="42.8077%" y="181" width="0.5102%" height="15" fill="rgb(247,225,37)" fg:x="16445" fg:w="196"/><text x="43.1007%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="43.3179%" y="181" width="0.5102%" height="15" fill="rgb(238,11,9)" fg:x="16641" fg:w="196"/><text x="43.6109%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="43.8281%" y="181" width="0.5102%" height="15" fill="rgb(210,68,29)" fg:x="16837" fg:w="196"/><text x="44.1211%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="44.3383%" y="181" width="0.5102%" height="15" fill="rgb(254,42,23)" fg:x="17033" fg:w="196"/><text x="44.6313%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="44.8485%" y="181" width="0.5102%" height="15" fill="rgb(221,119,9)" fg:x="17229" fg:w="196"/><text x="45.1415%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="45.3587%" y="181" width="0.5102%" height="15" fill="rgb(248,33,21)" fg:x="17425" fg:w="196"/><text x="45.6517%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="45.8689%" y="181" width="0.5102%" height="15" fill="rgb(213,201,27)" fg:x="17621" fg:w="196"/><text x="46.1619%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="46.3791%" y="181" width="0.5102%" height="15" fill="rgb(252,126,17)" fg:x="17817" fg:w="196"/><text x="46.6721%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="46.8893%" y="181" width="0.5102%" height="15" fill="rgb(229,222,24)" fg:x="18013" fg:w="196"/><text x="47.1823%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="47.3995%" y="181" width="0.5102%" height="15" fill="rgb(230,165,37)" fg:x="18209" fg:w="196"/><text x="47.6925%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="47.9097%" y="181" width="0.5102%" height="15" fill="rgb(233,14,41)" fg:x="18405" fg:w="196"/><text x="48.2027%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="48.4199%" y="181" width="0.5102%" height="15" fill="rgb(220,124,36)" fg:x="18601" fg:w="196"/><text x="48.7129%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="48.9301%" y="181" width="0.5102%" height="15" fill="rgb(247,210,52)" fg:x="18797" fg:w="196"/><text x="49.2231%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="49.4403%" y="181" width="0.5102%" height="15" fill="rgb(210,219,20)" fg:x="18993" fg:w="196"/><text x="49.7333%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="49.9505%" y="181" width="0.5102%" height="15" fill="rgb(219,142,31)" fg:x="19189" fg:w="196"/><text x="50.2435%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="50.4607%" y="181" width="0.5102%" height="15" fill="rgb(246,3,32)" fg:x="19385" fg:w="196"/><text x="50.7537%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="50.9709%" y="181" width="0.5102%" height="15" fill="rgb(248,14,6)" fg:x="19581" fg:w="196"/><text x="51.2639%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="51.4812%" y="181" width="0.5102%" height="15" fill="rgb(232,69,28)" fg:x="19777" fg:w="196"/><text x="51.7741%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="51.9914%" y="181" width="0.5102%" height="15" fill="rgb(225,157,41)" fg:x="19973" fg:w="196"/><text x="52.2843%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="52.5016%" y="181" width="0.5102%" height="15" fill="rgb(207,133,46)" fg:x="20169" fg:w="196"/><text x="52.7945%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="53.0118%" y="181" width="0.5102%" height="15" fill="rgb(218,225,29)" fg:x="20365" fg:w="196"/><text x="53.3047%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="53.5220%" y="181" width="0.5102%" height="15" fill="rgb(242,38,40)" fg:x="20561" fg:w="196"/><text x="53.8149%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="54.0322%" y="181" width="0.5102%" height="15" fill="rgb(211,177,32)" fg:x="20757" fg:w="196"/><text x="54.3251%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="54.5424%" y="181" width="0.5102%" height="15" fill="rgb(251,139,41)" fg:x="20953" fg:w="196"/><text x="54.8353%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="55.0526%" y="181" width="0.5102%" height="15" fill="rgb(211,182,47)" fg:x="21149" fg:w="196"/><text x="55.3456%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="55.5628%" y="181" width="0.5102%" height="15" fill="rgb(227,108,6)" fg:x="21345" fg:w="196"/><text x="55.8558%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="56.0730%" y="181" width="0.5102%" height="15" fill="rgb(206,4,36)" fg:x="21541" fg:w="196"/><text x="56.3660%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="56.5832%" y="181" width="0.5102%" height="15" fill="rgb(232,107,21)" fg:x="21737" fg:w="196"/><text x="56.8762%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="57.0934%" y="181" width="0.5102%" height="15" fill="rgb(236,11,10)" fg:x="21933" fg:w="196"/><text x="57.3864%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="57.6036%" y="181" width="0.5102%" height="15" fill="rgb(238,201,34)" fg:x="22129" fg:w="196"/><text x="57.8966%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="58.1138%" y="181" width="0.5102%" height="15" fill="rgb(232,56,27)" fg:x="22325" fg:w="196"/><text x="58.4068%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="58.6240%" y="181" width="0.5102%" height="15" fill="rgb(253,86,41)" fg:x="22521" fg:w="196"/><text x="58.9170%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="59.1342%" y="181" width="0.5102%" height="15" fill="rgb(216,169,7)" fg:x="22717" fg:w="196"/><text x="59.4272%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="59.6444%" y="181" width="0.5102%" height="15" fill="rgb(245,222,25)" fg:x="22913" fg:w="196"/><text x="59.9374%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="60.1546%" y="181" width="0.5102%" height="15" fill="rgb(210,222,40)" fg:x="23109" fg:w="196"/><text x="60.4476%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="60.6648%" y="181" width="0.5102%" height="15" fill="rgb(214,122,0)" fg:x="23305" fg:w="196"/><text x="60.9578%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="61.1750%" y="181" width="0.5102%" height="15" fill="rgb(206,77,31)" fg:x="23501" fg:w="196"/><text x="61.4680%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.51%)</title><rect x="61.6852%" y="181" width="0.5102%" height="15" fill="rgb(233,8,28)" fg:x="23697" fg:w="196"/><text x="61.9782%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.04%)</title><rect x="62.1954%" y="149" width="0.0364%" height="15" fill="rgb(241,89,47)" fg:x="23893" fg:w="14"/><text x="62.4884%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.16%)</title><rect x="62.2319%" y="117" width="0.1614%" height="15" fill="rgb(247,43,42)" fg:x="23907" fg:w="62"/><text x="62.5249%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (159 instructions, 0.41%)</title><rect x="62.2319%" y="133" width="0.4139%" height="15" fill="rgb(251,69,26)" fg:x="23907" fg:w="159"/><text x="62.5249%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (194 instructions, 0.50%)</title><rect x="62.2319%" y="149" width="0.5050%" height="15" fill="rgb(254,154,19)" fg:x="23907" fg:w="194"/><text x="62.5249%" y="159.50"></text></g><g><title>memset (152 instructions, 0.40%)</title><rect x="62.7369%" y="149" width="0.3957%" height="15" fill="rgb(225,34,44)" fg:x="24101" fg:w="152"/><text x="63.0298%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (540 instructions, 1.41%)</title><rect x="62.1954%" y="165" width="1.4057%" height="15" fill="rgb(253,106,18)" fg:x="23893" fg:w="540"/><text x="62.4884%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="63.6011%" y="85" width="0.2369%" height="15" fill="rgb(213,52,17)" fg:x="24433" fg:w="91"/><text x="63.8941%" y="95.50"></text></g><g><title>__rust_alloc (106 instructions, 0.28%)</title><rect x="63.6011%" y="101" width="0.2759%" height="15" fill="rgb(240,102,9)" fg:x="24433" fg:w="106"/><text x="63.8941%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (150 instructions, 0.39%)</title><rect x="63.6011%" y="117" width="0.3905%" height="15" fill="rgb(209,113,39)" fg:x="24433" fg:w="150"/><text x="63.8941%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (229 instructions, 0.60%)</title><rect x="63.6011%" y="133" width="0.5961%" height="15" fill="rgb(227,2,2)" fg:x="24433" fg:w="229"/><text x="63.8941%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="64.1972%" y="133" width="0.0390%" height="15" fill="rgb(218,64,9)" fg:x="24662" fg:w="15"/><text x="64.4902%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="64.2363%" y="133" width="0.0390%" height="15" fill="rgb(241,221,14)" fg:x="24677" fg:w="15"/><text x="64.5292%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (447 instructions, 1.16%)</title><rect x="63.6011%" y="149" width="1.1636%" height="15" fill="rgb(251,117,52)" fg:x="24433" fg:w="447"/><text x="63.8941%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 1.34%)</title><rect x="64.7647%" y="149" width="1.3432%" height="15" fill="rgb(232,147,16)" fg:x="24880" fg:w="516"/><text x="65.0577%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 instructions, 0.02%)</title><rect x="66.1079%" y="149" width="0.0182%" height="15" fill="rgb(250,20,12)" fg:x="25396" fg:w="7"/><text x="66.4008%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 4.05%)</title><rect x="63.6011%" y="165" width="4.0530%" height="15" fill="rgb(253,217,21)" fg:x="24433" fg:w="1557"/><text x="63.8941%" y="175.50">can..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.02%)</title><rect x="67.6541%" y="165" width="0.0156%" height="15" fill="rgb(219,83,9)" fg:x="25990" fg:w="6"/><text x="67.9471%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.16%)</title><rect x="67.6697%" y="165" width="0.1640%" height="15" fill="rgb(216,98,2)" fg:x="25996" fg:w="63"/><text x="67.9627%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,774 instructions, 7.22%)</title><rect x="62.1954%" y="181" width="7.2209%" height="15" fill="rgb(245,118,47)" fg:x="23893" fg:w="2774"/><text x="62.4884%" y="191.50">ic_cdk::..</text></g><g><title>imrc_hashmap::__canister_method_batch_get::{{closure}} (37,814 instructions, 98.43%)</title><rect x="0.5779%" y="197" width="98.4329%" height="15" fill="rgb(213,171,13)" fg:x="222" fg:w="37814"/><text x="0.8709%" y="207.50">imrc_hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.04%)</title><rect x="99.0108%" y="197" width="0.0364%" height="15" fill="rgb(234,181,49)" fg:x="38036" fg:w="14"/><text x="99.3038%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.22%)</title><rect x="99.0499%" y="197" width="0.2239%" height="15" fill="rgb(245,88,45)" fg:x="38051" fg:w="86"/><text x="99.3428%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.35%)</title><rect x="99.2737%" y="197" width="0.3514%" height="15" fill="rgb(248,136,45)" fg:x="38137" fg:w="135"/><text x="99.5667%" y="207.50"></text></g><g><title>all (38,416 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,10,39)" fg:x="0" fg:w="38416"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (38,416 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,70,2)" fg:x="0" fg:w="38416"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>