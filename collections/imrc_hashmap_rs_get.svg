<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="32903"><g><title>ic_cdk::setup (19 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0577%" height="15" fill="rgb(228,213,15)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.36%)</title><rect x="0.0577%" y="197" width="0.3586%" height="15" fill="rgb(230,23,34)" fg:x="19" fg:w="118"/><text x="0.3507%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.22%)</title><rect x="0.4164%" y="197" width="0.2158%" height="15" fill="rgb(230,33,13)" fg:x="137" fg:w="71"/><text x="0.7093%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="0.6322%" y="165" width="0.2492%" height="15" fill="rgb(213,180,30)" fg:x="208" fg:w="82"/><text x="0.9251%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="0.8814%" y="149" width="0.2097%" height="15" fill="rgb(252,191,10)" fg:x="290" fg:w="69"/><text x="1.1743%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.0911%" y="133" width="0.0122%" height="15" fill="rgb(232,53,48)" fg:x="359" fg:w="4"/><text x="1.3841%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="1.0911%" y="149" width="1.2339%" height="15" fill="rgb(252,107,52)" fg:x="359" fg:w="406"/><text x="1.3841%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="2.3250%" y="149" width="0.2492%" height="15" fill="rgb(252,26,41)" fg:x="765" fg:w="82"/><text x="2.6180%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.5742%" y="149" width="0.1641%" height="15" fill="rgb(237,200,5)" fg:x="847" fg:w="54"/><text x="2.8672%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.7384%" y="149" width="0.1641%" height="15" fill="rgb(241,5,51)" fg:x="901" fg:w="54"/><text x="3.0313%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="2.9025%" y="149" width="0.1641%" height="15" fill="rgb(205,114,42)" fg:x="955" fg:w="54"/><text x="3.1954%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.16%)</title><rect x="3.0666%" y="149" width="0.1641%" height="15" fill="rgb(243,18,14)" fg:x="1009" fg:w="54"/><text x="3.3596%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="3.2307%" y="149" width="0.2097%" height="15" fill="rgb(247,151,10)" fg:x="1063" fg:w="69"/><text x="3.5237%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="3.4404%" y="149" width="0.1976%" height="15" fill="rgb(234,130,32)" fg:x="1132" fg:w="65"/><text x="3.7334%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.6380%" y="133" width="0.0122%" height="15" fill="rgb(254,156,33)" fg:x="1197" fg:w="4"/><text x="3.9309%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="3.6380%" y="149" width="1.2339%" height="15" fill="rgb(232,1,54)" fg:x="1197" fg:w="406"/><text x="3.9309%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="4.8719%" y="149" width="0.0486%" height="15" fill="rgb(224,223,48)" fg:x="1603" fg:w="16"/><text x="5.1649%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="4.9205%" y="133" width="0.2492%" height="15" fill="rgb(233,106,10)" fg:x="1619" fg:w="82"/><text x="5.2135%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="5.1697%" y="101" width="0.1824%" height="15" fill="rgb(233,149,51)" fg:x="1701" fg:w="60"/><text x="5.4627%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="5.1697%" y="117" width="0.2583%" height="15" fill="rgb(218,27,14)" fg:x="1701" fg:w="85"/><text x="5.4627%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="5.4281%" y="69" width="0.0274%" height="15" fill="rgb(216,114,53)" fg:x="1786" fg:w="9"/><text x="5.7210%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="5.4554%" y="53" width="0.0912%" height="15" fill="rgb(214,105,42)" fg:x="1795" fg:w="30"/><text x="5.7484%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="5.4554%" y="69" width="0.1672%" height="15" fill="rgb(246,150,19)" fg:x="1795" fg:w="55"/><text x="5.7484%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="5.4281%" y="85" width="0.3586%" height="15" fill="rgb(254,75,3)" fg:x="1786" fg:w="118"/><text x="5.7210%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="5.4281%" y="101" width="0.5197%" height="15" fill="rgb(236,94,54)" fg:x="1786" fg:w="171"/><text x="5.7210%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.53%)</title><rect x="5.4281%" y="117" width="0.5349%" height="15" fill="rgb(250,50,17)" fg:x="1786" fg:w="176"/><text x="5.7210%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="5.1697%" y="133" width="1.1306%" height="15" fill="rgb(206,179,36)" fg:x="1701" fg:w="372"/><text x="5.4627%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="4.9205%" y="149" width="1.8083%" height="15" fill="rgb(208,7,9)" fg:x="1619" fg:w="595"/><text x="5.2135%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="6.7289%" y="149" width="0.2492%" height="15" fill="rgb(220,97,41)" fg:x="2214" fg:w="82"/><text x="7.0218%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="6.9781%" y="149" width="0.1702%" height="15" fill="rgb(226,41,7)" fg:x="2296" fg:w="56"/><text x="7.2711%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="7.1483%" y="149" width="0.1915%" height="15" fill="rgb(217,209,42)" fg:x="2352" fg:w="63"/><text x="7.4413%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.20%)</title><rect x="7.3398%" y="149" width="0.1976%" height="15" fill="rgb(227,15,9)" fg:x="2415" fg:w="65"/><text x="7.6327%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.5373%" y="117" width="0.0122%" height="15" fill="rgb(213,23,26)" fg:x="2480" fg:w="4"/><text x="7.8303%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.23%)</title><rect x="7.5373%" y="133" width="1.2339%" height="15" fill="rgb(234,179,17)" fg:x="2480" fg:w="406"/><text x="7.8303%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="8.7712%" y="133" width="0.0486%" height="15" fill="rgb(213,184,43)" fg:x="2886" fg:w="16"/><text x="9.0642%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="8.8199%" y="117" width="0.2492%" height="15" fill="rgb(239,184,20)" fg:x="2902" fg:w="82"/><text x="9.1128%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.18%)</title><rect x="9.0691%" y="85" width="0.1824%" height="15" fill="rgb(249,132,23)" fg:x="2984" fg:w="60"/><text x="9.3621%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.26%)</title><rect x="9.0691%" y="101" width="0.2583%" height="15" fill="rgb(237,85,14)" fg:x="2984" fg:w="85"/><text x="9.3621%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="9.3274%" y="53" width="0.0274%" height="15" fill="rgb(207,28,12)" fg:x="3069" fg:w="9"/><text x="9.6204%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.09%)</title><rect x="9.3548%" y="37" width="0.0912%" height="15" fill="rgb(216,128,20)" fg:x="3078" fg:w="30"/><text x="9.6477%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.17%)</title><rect x="9.3548%" y="53" width="0.1672%" height="15" fill="rgb(242,101,1)" fg:x="3078" fg:w="55"/><text x="9.6477%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.36%)</title><rect x="9.3274%" y="69" width="0.3586%" height="15" fill="rgb(212,186,52)" fg:x="3069" fg:w="118"/><text x="9.6204%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.52%)</title><rect x="9.3274%" y="85" width="0.5197%" height="15" fill="rgb(224,223,13)" fg:x="3069" fg:w="171"/><text x="9.6204%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.53%)</title><rect x="9.3274%" y="101" width="0.5349%" height="15" fill="rgb(221,181,44)" fg:x="3069" fg:w="176"/><text x="9.6204%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.13%)</title><rect x="9.0691%" y="117" width="1.1306%" height="15" fill="rgb(254,148,4)" fg:x="2984" fg:w="372"/><text x="9.3621%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (595 instructions, 1.81%)</title><rect x="8.8199%" y="133" width="1.8083%" height="15" fill="rgb(221,76,51)" fg:x="2902" fg:w="595"/><text x="9.1128%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.25%)</title><rect x="10.6282%" y="133" width="0.2492%" height="15" fill="rgb(225,63,8)" fg:x="3497" fg:w="82"/><text x="10.9212%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="10.8774%" y="133" width="0.1702%" height="15" fill="rgb(222,19,52)" fg:x="3579" fg:w="56"/><text x="11.1704%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.21%)</title><rect x="11.0476%" y="117" width="0.2097%" height="15" fill="rgb(251,194,23)" fg:x="3635" fg:w="69"/><text x="11.3406%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.28%)</title><rect x="11.2573%" y="117" width="0.2766%" height="15" fill="rgb(205,1,52)" fg:x="3704" fg:w="91"/><text x="11.5503%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="11.5339%" y="117" width="0.1915%" height="15" fill="rgb(223,68,16)" fg:x="3795" fg:w="63"/><text x="11.8269%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.86%)</title><rect x="11.0476%" y="133" width="0.8571%" height="15" fill="rgb(213,21,34)" fg:x="3635" fg:w="282"/><text x="11.3406%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="11.9047%" y="133" width="0.2492%" height="15" fill="rgb(226,205,0)" fg:x="3917" fg:w="82"/><text x="12.1977%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,722 instructions, 5.23%)</title><rect x="7.5373%" y="149" width="5.2336%" height="15" fill="rgb(242,20,46)" fg:x="2480" fg:w="1722"/><text x="7.8303%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.19%)</title><rect x="12.7709%" y="149" width="0.1915%" height="15" fill="rgb(213,51,30)" fg:x="4202" fg:w="63"/><text x="13.0638%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.9623%" y="149" width="0.0395%" height="15" fill="rgb(205,152,22)" fg:x="4265" fg:w="13"/><text x="13.2553%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="13.0019%" y="149" width="0.0395%" height="15" fill="rgb(234,122,13)" fg:x="4278" fg:w="13"/><text x="13.2948%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="13.0414%" y="149" width="0.0213%" height="15" fill="rgb(240,15,49)" fg:x="4291" fg:w="7"/><text x="13.3343%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.05%)</title><rect x="13.0626%" y="149" width="0.0456%" height="15" fill="rgb(225,226,0)" fg:x="4298" fg:w="15"/><text x="13.3556%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.1082%" y="133" width="0.2492%" height="15" fill="rgb(232,194,27)" fg:x="4313" fg:w="82"/><text x="13.4012%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.50%)</title><rect x="13.1082%" y="149" width="0.5015%" height="15" fill="rgb(245,182,2)" fg:x="4313" fg:w="165"/><text x="13.4012%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="13.6097%" y="117" width="0.2492%" height="15" fill="rgb(218,93,43)" fg:x="4478" fg:w="82"/><text x="13.9027%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="13.6097%" y="133" width="0.3526%" height="15" fill="rgb(243,98,11)" fg:x="4478" fg:w="116"/><text x="13.9027%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.56%)</title><rect x="13.6097%" y="149" width="0.5592%" height="15" fill="rgb(231,75,50)" fg:x="4478" fg:w="184"/><text x="13.9027%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.1689%" y="149" width="0.2492%" height="15" fill="rgb(251,21,18)" fg:x="4662" fg:w="82"/><text x="14.4619%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="14.4181%" y="149" width="0.2462%" height="15" fill="rgb(219,83,39)" fg:x="4744" fg:w="81"/><text x="14.7111%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.6643%" y="149" width="0.2492%" height="15" fill="rgb(224,166,54)" fg:x="4825" fg:w="82"/><text x="14.9573%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="14.9135%" y="149" width="0.2492%" height="15" fill="rgb(228,188,33)" fg:x="4907" fg:w="82"/><text x="15.2065%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="15.1688%" y="149" width="0.2462%" height="15" fill="rgb(205,16,29)" fg:x="4991" fg:w="81"/><text x="15.4618%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.15%)</title><rect x="15.4150%" y="149" width="1.1549%" height="15" fill="rgb(252,16,38)" fg:x="5072" fg:w="380"/><text x="15.7080%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.15%)</title><rect x="16.5699%" y="149" width="1.1549%" height="15" fill="rgb(234,181,7)" fg:x="5452" fg:w="380"/><text x="16.8629%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,457 instructions, 19.62%)</title><rect x="0.8814%" y="165" width="19.6244%" height="15" fill="rgb(249,7,17)" fg:x="290" fg:w="6457"/><text x="1.1743%" y="175.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (335 instructions, 1.02%)</title><rect x="20.5057%" y="165" width="1.0181%" height="15" fill="rgb(254,175,27)" fg:x="6747" fg:w="335"/><text x="20.7987%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="21.5239%" y="149" width="0.0365%" height="15" fill="rgb(251,8,47)" fg:x="7082" fg:w="12"/><text x="21.8168%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.15%)</title><rect x="21.5239%" y="165" width="0.1520%" height="15" fill="rgb(220,128,19)" fg:x="7082" fg:w="50"/><text x="21.8168%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="21.6758%" y="165" width="0.2492%" height="15" fill="rgb(252,8,17)" fg:x="7132" fg:w="82"/><text x="21.9688%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="21.9251%" y="149" width="0.0365%" height="15" fill="rgb(254,168,36)" fg:x="7214" fg:w="12"/><text x="22.2180%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="21.9615%" y="133" width="0.1611%" height="15" fill="rgb(248,147,26)" fg:x="7226" fg:w="53"/><text x="22.2545%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="22.1226%" y="133" width="0.2675%" height="15" fill="rgb(207,36,33)" fg:x="7279" fg:w="88"/><text x="22.4156%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="22.3901%" y="133" width="0.4924%" height="15" fill="rgb(240,176,35)" fg:x="7367" fg:w="162"/><text x="22.6830%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="21.9615%" y="149" width="1.6412%" height="15" fill="rgb(235,26,12)" fg:x="7226" fg:w="540"/><text x="22.2545%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 2.35%)</title><rect x="21.9251%" y="165" width="2.3463%" height="15" fill="rgb(242,182,42)" fg:x="7214" fg:w="772"/><text x="22.2180%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="24.2713%" y="165" width="0.2492%" height="15" fill="rgb(250,144,28)" fg:x="7986" fg:w="82"/><text x="24.5643%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="24.5206%" y="149" width="0.0365%" height="15" fill="rgb(217,205,6)" fg:x="8068" fg:w="12"/><text x="24.8135%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="24.5570%" y="133" width="0.1611%" height="15" fill="rgb(209,156,54)" fg:x="8080" fg:w="53"/><text x="24.8500%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.27%)</title><rect x="24.7181%" y="133" width="0.2675%" height="15" fill="rgb(212,162,11)" fg:x="8133" fg:w="88"/><text x="25.0111%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.49%)</title><rect x="24.9856%" y="133" width="0.4924%" height="15" fill="rgb(235,210,16)" fg:x="8221" fg:w="162"/><text x="25.2785%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.64%)</title><rect x="24.5570%" y="149" width="1.6412%" height="15" fill="rgb(215,74,36)" fg:x="8080" fg:w="540"/><text x="24.8500%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.21%)</title><rect x="26.1982%" y="149" width="0.2067%" height="15" fill="rgb(223,122,11)" fg:x="8620" fg:w="68"/><text x="26.4912%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="26.4049%" y="133" width="0.2462%" height="15" fill="rgb(230,92,41)" fg:x="8688" fg:w="81"/><text x="26.6979%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.33%)</title><rect x="26.4049%" y="149" width="0.3282%" height="15" fill="rgb(212,127,40)" fg:x="8688" fg:w="108"/><text x="26.6979%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 2.77%)</title><rect x="24.5206%" y="165" width="2.7718%" height="15" fill="rgb(227,215,41)" fg:x="8068" fg:w="912"/><text x="24.8135%" y="175.50">ca..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.16%)</title><rect x="27.2923%" y="117" width="0.1611%" height="15" fill="rgb(224,175,9)" fg:x="8980" fg:w="53"/><text x="27.5853%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.24%)</title><rect x="27.2923%" y="133" width="0.2401%" height="15" fill="rgb(235,79,27)" fg:x="8980" fg:w="79"/><text x="27.5853%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.89%)</title><rect x="27.2923%" y="149" width="0.8875%" height="15" fill="rgb(250,224,2)" fg:x="8980" fg:w="292"/><text x="27.5853%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1118 (15 instructions, 0.05%)</title><rect x="28.1798%" y="149" width="0.0456%" height="15" fill="rgb(242,168,38)" fg:x="9272" fg:w="15"/><text x="28.4728%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.2254%" y="149" width="0.0334%" height="15" fill="rgb(236,212,28)" fg:x="9287" fg:w="11"/><text x="28.5184%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 1.59%)</title><rect x="27.2923%" y="165" width="1.5865%" height="15" fill="rgb(224,53,43)" fg:x="8980" fg:w="522"/><text x="27.5853%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.10%)</title><rect x="28.8788%" y="165" width="0.1033%" height="15" fill="rgb(238,128,28)" fg:x="9502" fg:w="34"/><text x="29.1718%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="28.9822%" y="149" width="0.3738%" height="15" fill="rgb(211,201,13)" fg:x="9536" fg:w="123"/><text x="29.2751%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.37%)</title><rect x="29.4380%" y="149" width="0.3738%" height="15" fill="rgb(229,146,54)" fg:x="9686" fg:w="123"/><text x="29.7310%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.91%)</title><rect x="28.9822%" y="165" width="0.9118%" height="15" fill="rgb(207,63,46)" fg:x="9536" fg:w="300"/><text x="29.2751%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.09%)</title><rect x="29.8939%" y="149" width="0.0851%" height="15" fill="rgb(205,178,17)" fg:x="9836" fg:w="28"/><text x="30.1869%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.29%)</title><rect x="29.8939%" y="165" width="0.2948%" height="15" fill="rgb(230,72,45)" fg:x="9836" fg:w="97"/><text x="30.1869%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1887%" y="165" width="0.0334%" height="15" fill="rgb(244,139,37)" fg:x="9933" fg:w="11"/><text x="30.4817%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.2222%" y="165" width="0.0334%" height="15" fill="rgb(241,141,41)" fg:x="9944" fg:w="11"/><text x="30.5151%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.2556%" y="165" width="0.0334%" height="15" fill="rgb(247,182,36)" fg:x="9955" fg:w="11"/><text x="30.5486%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.25%)</title><rect x="30.2890%" y="165" width="1.2461%" height="15" fill="rgb(211,156,11)" fg:x="9966" fg:w="410"/><text x="30.5820%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="31.5351%" y="133" width="0.0365%" height="15" fill="rgb(248,114,30)" fg:x="10376" fg:w="12"/><text x="31.8281%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.51%)</title><rect x="31.5716%" y="133" width="0.5106%" height="15" fill="rgb(220,135,36)" fg:x="10388" fg:w="168"/><text x="31.8646%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="32.0822%" y="101" width="0.1915%" height="15" fill="rgb(250,139,52)" fg:x="10556" fg:w="63"/><text x="32.3751%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 0.63%)</title><rect x="32.0822%" y="117" width="0.6322%" height="15" fill="rgb(216,171,4)" fg:x="10556" fg:w="208"/><text x="32.3751%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 0.71%)</title><rect x="32.0822%" y="133" width="0.7142%" height="15" fill="rgb(246,45,51)" fg:x="10556" fg:w="235"/><text x="32.3751%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="32.7964%" y="133" width="0.0334%" height="15" fill="rgb(228,91,36)" fg:x="10791" fg:w="11"/><text x="33.0894%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 1.42%)</title><rect x="31.5351%" y="149" width="1.4224%" height="15" fill="rgb(252,195,42)" fg:x="10376" fg:w="468"/><text x="31.8281%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (502 instructions, 1.53%)</title><rect x="31.5351%" y="165" width="1.5257%" height="15" fill="rgb(250,187,47)" fg:x="10376" fg:w="502"/><text x="31.8281%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="33.0608%" y="149" width="0.1672%" height="15" fill="rgb(220,5,7)" fg:x="10878" fg:w="55"/><text x="33.3538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.19%)</title><rect x="33.2280%" y="149" width="0.1915%" height="15" fill="rgb(251,0,48)" fg:x="10933" fg:w="63"/><text x="33.5209%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 0.60%)</title><rect x="33.0608%" y="165" width="0.6048%" height="15" fill="rgb(216,51,45)" fg:x="10878" fg:w="199"/><text x="33.3538%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,260 instructions, 34.22%)</title><rect x="0.6322%" y="181" width="34.2218%" height="15" fill="rgb(239,69,38)" fg:x="208" fg:w="11260"/><text x="0.9251%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (14 instructions, 0.04%)</title><rect x="34.8540%" y="181" width="0.0425%" height="15" fill="rgb(217,150,20)" fg:x="11468" fg:w="14"/><text x="35.1469%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="34.8965%" y="181" width="0.6078%" height="15" fill="rgb(213,31,42)" fg:x="11482" fg:w="200"/><text x="35.1895%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="35.5044%" y="181" width="0.6078%" height="15" fill="rgb(209,119,15)" fg:x="11682" fg:w="200"/><text x="35.7973%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.1122%" y="181" width="0.6078%" height="15" fill="rgb(251,19,25)" fg:x="11882" fg:w="200"/><text x="36.4052%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="36.7201%" y="181" width="0.6078%" height="15" fill="rgb(238,205,2)" fg:x="12082" fg:w="200"/><text x="37.0130%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.3279%" y="181" width="0.6078%" height="15" fill="rgb(223,95,5)" fg:x="12282" fg:w="200"/><text x="37.6209%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="37.9358%" y="181" width="0.6078%" height="15" fill="rgb(249,62,25)" fg:x="12482" fg:w="200"/><text x="38.2287%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="38.5436%" y="181" width="0.6078%" height="15" fill="rgb(214,77,19)" fg:x="12682" fg:w="200"/><text x="38.8366%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.1514%" y="181" width="0.6078%" height="15" fill="rgb(228,117,41)" fg:x="12882" fg:w="200"/><text x="39.4444%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="39.7593%" y="181" width="0.6078%" height="15" fill="rgb(209,32,6)" fg:x="13082" fg:w="200"/><text x="40.0523%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.3671%" y="181" width="0.6078%" height="15" fill="rgb(239,85,3)" fg:x="13282" fg:w="200"/><text x="40.6601%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="40.9750%" y="181" width="0.6078%" height="15" fill="rgb(228,136,17)" fg:x="13482" fg:w="200"/><text x="41.2680%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="41.5828%" y="181" width="0.6078%" height="15" fill="rgb(246,62,30)" fg:x="13682" fg:w="200"/><text x="41.8758%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.1907%" y="181" width="0.6078%" height="15" fill="rgb(216,77,14)" fg:x="13882" fg:w="200"/><text x="42.4837%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="42.7985%" y="181" width="0.6078%" height="15" fill="rgb(228,91,1)" fg:x="14082" fg:w="200"/><text x="43.0915%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="43.4064%" y="181" width="0.6078%" height="15" fill="rgb(216,158,42)" fg:x="14282" fg:w="200"/><text x="43.6993%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.0142%" y="181" width="0.6078%" height="15" fill="rgb(250,200,36)" fg:x="14482" fg:w="200"/><text x="44.3072%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="44.6221%" y="181" width="0.6078%" height="15" fill="rgb(249,222,7)" fg:x="14682" fg:w="200"/><text x="44.9150%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.2299%" y="181" width="0.6078%" height="15" fill="rgb(232,11,7)" fg:x="14882" fg:w="200"/><text x="45.5229%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="45.8378%" y="181" width="0.6078%" height="15" fill="rgb(228,123,11)" fg:x="15082" fg:w="200"/><text x="46.1307%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="46.4456%" y="181" width="0.6078%" height="15" fill="rgb(228,65,36)" fg:x="15282" fg:w="200"/><text x="46.7386%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.0535%" y="181" width="0.6078%" height="15" fill="rgb(223,150,4)" fg:x="15482" fg:w="200"/><text x="47.3464%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="47.6613%" y="181" width="0.6078%" height="15" fill="rgb(218,133,28)" fg:x="15682" fg:w="200"/><text x="47.9543%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.2692%" y="181" width="0.6078%" height="15" fill="rgb(235,209,35)" fg:x="15882" fg:w="200"/><text x="48.5621%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="48.8770%" y="181" width="0.6078%" height="15" fill="rgb(248,166,42)" fg:x="16082" fg:w="200"/><text x="49.1700%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="49.4848%" y="181" width="0.6078%" height="15" fill="rgb(235,229,21)" fg:x="16282" fg:w="200"/><text x="49.7778%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.0927%" y="181" width="0.6078%" height="15" fill="rgb(236,116,44)" fg:x="16482" fg:w="200"/><text x="50.3857%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="50.7005%" y="181" width="0.6078%" height="15" fill="rgb(242,170,10)" fg:x="16682" fg:w="200"/><text x="50.9935%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.3084%" y="181" width="0.6078%" height="15" fill="rgb(230,58,11)" fg:x="16882" fg:w="200"/><text x="51.6014%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="51.9162%" y="181" width="0.6078%" height="15" fill="rgb(208,47,21)" fg:x="17082" fg:w="200"/><text x="52.2092%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="52.5241%" y="181" width="0.6078%" height="15" fill="rgb(231,164,18)" fg:x="17282" fg:w="200"/><text x="52.8171%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.1319%" y="181" width="0.6078%" height="15" fill="rgb(240,114,32)" fg:x="17482" fg:w="200"/><text x="53.4249%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="53.7398%" y="181" width="0.6078%" height="15" fill="rgb(221,33,27)" fg:x="17682" fg:w="200"/><text x="54.0327%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.3476%" y="181" width="0.6078%" height="15" fill="rgb(232,4,6)" fg:x="17882" fg:w="200"/><text x="54.6406%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="54.9555%" y="181" width="0.6078%" height="15" fill="rgb(251,59,20)" fg:x="18082" fg:w="200"/><text x="55.2484%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="55.5633%" y="181" width="0.6078%" height="15" fill="rgb(220,212,25)" fg:x="18282" fg:w="200"/><text x="55.8563%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.1712%" y="181" width="0.6078%" height="15" fill="rgb(214,151,51)" fg:x="18482" fg:w="200"/><text x="56.4641%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="56.7790%" y="181" width="0.6078%" height="15" fill="rgb(243,37,54)" fg:x="18682" fg:w="200"/><text x="57.0720%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.3869%" y="181" width="0.6078%" height="15" fill="rgb(220,180,12)" fg:x="18882" fg:w="200"/><text x="57.6798%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="57.9947%" y="181" width="0.6078%" height="15" fill="rgb(205,146,40)" fg:x="19082" fg:w="200"/><text x="58.2877%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="58.6026%" y="181" width="0.6078%" height="15" fill="rgb(251,124,23)" fg:x="19282" fg:w="200"/><text x="58.8955%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.2104%" y="181" width="0.6078%" height="15" fill="rgb(253,187,3)" fg:x="19482" fg:w="200"/><text x="59.5034%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="59.8183%" y="181" width="0.6078%" height="15" fill="rgb(229,79,47)" fg:x="19682" fg:w="200"/><text x="60.1112%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="60.4261%" y="181" width="0.6078%" height="15" fill="rgb(227,228,30)" fg:x="19882" fg:w="200"/><text x="60.7191%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.0339%" y="181" width="0.6078%" height="15" fill="rgb(235,156,9)" fg:x="20082" fg:w="200"/><text x="61.3269%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="61.6418%" y="181" width="0.6078%" height="15" fill="rgb(253,20,15)" fg:x="20282" fg:w="200"/><text x="61.9348%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.2496%" y="181" width="0.6078%" height="15" fill="rgb(239,162,10)" fg:x="20482" fg:w="200"/><text x="62.5426%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="62.8575%" y="181" width="0.6078%" height="15" fill="rgb(239,63,2)" fg:x="20682" fg:w="200"/><text x="63.1505%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="63.4653%" y="181" width="0.6078%" height="15" fill="rgb(210,216,44)" fg:x="20882" fg:w="200"/><text x="63.7583%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.0732%" y="181" width="0.6078%" height="15" fill="rgb(225,89,3)" fg:x="21082" fg:w="200"/><text x="64.3662%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (200 instructions, 0.61%)</title><rect x="64.6810%" y="181" width="0.6078%" height="15" fill="rgb(245,51,38)" fg:x="21282" fg:w="200"/><text x="64.9740%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.04%)</title><rect x="65.2889%" y="149" width="0.0365%" height="15" fill="rgb(205,135,14)" fg:x="21482" fg:w="12"/><text x="65.5818%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.17%)</title><rect x="65.3254%" y="117" width="0.1672%" height="15" fill="rgb(216,212,48)" fg:x="21494" fg:w="55"/><text x="65.6183%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (137 instructions, 0.42%)</title><rect x="65.3254%" y="133" width="0.4164%" height="15" fill="rgb(243,48,39)" fg:x="21494" fg:w="137"/><text x="65.6183%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.50%)</title><rect x="65.3254%" y="149" width="0.4984%" height="15" fill="rgb(226,134,51)" fg:x="21494" fg:w="164"/><text x="65.6183%" y="159.50"></text></g><g><title>memset (136 instructions, 0.41%)</title><rect x="65.8238%" y="149" width="0.4133%" height="15" fill="rgb(220,76,1)" fg:x="21658" fg:w="136"/><text x="66.1168%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (470 instructions, 1.43%)</title><rect x="65.2889%" y="165" width="1.4284%" height="15" fill="rgb(217,108,13)" fg:x="21482" fg:w="470"/><text x="65.5818%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.25%)</title><rect x="66.7173%" y="117" width="0.2492%" height="15" fill="rgb(246,74,3)" fg:x="21952" fg:w="82"/><text x="67.0103%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.35%)</title><rect x="66.7173%" y="133" width="0.3526%" height="15" fill="rgb(231,18,30)" fg:x="21952" fg:w="116"/><text x="67.0103%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (181 instructions, 0.55%)</title><rect x="66.7173%" y="149" width="0.5501%" height="15" fill="rgb(207,97,49)" fg:x="21952" fg:w="181"/><text x="67.0103%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.2674%" y="149" width="0.0334%" height="15" fill="rgb(223,214,35)" fg:x="22133" fg:w="11"/><text x="67.5604%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="67.3009%" y="149" width="0.0334%" height="15" fill="rgb(236,139,41)" fg:x="22144" fg:w="11"/><text x="67.5938%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.09%)</title><rect x="67.3343%" y="149" width="0.0912%" height="15" fill="rgb(233,133,43)" fg:x="22155" fg:w="30"/><text x="67.6273%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 instructions, 0.02%)</title><rect x="67.4255%" y="149" width="0.0152%" height="15" fill="rgb(224,200,2)" fg:x="22185" fg:w="5"/><text x="67.7184%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (459 instructions, 1.40%)</title><rect x="66.7173%" y="165" width="1.3950%" height="15" fill="rgb(212,48,37)" fg:x="21952" fg:w="459"/><text x="67.0103%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="68.1123%" y="165" width="0.0152%" height="15" fill="rgb(253,74,45)" fg:x="22411" fg:w="5"/><text x="68.4053%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.17%)</title><rect x="68.1275%" y="165" width="0.1702%" height="15" fill="rgb(211,197,10)" fg:x="22416" fg:w="56"/><text x="68.4205%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,066 instructions, 3.24%)</title><rect x="65.2889%" y="181" width="3.2398%" height="15" fill="rgb(254,176,19)" fg:x="21482" fg:w="1066"/><text x="65.5818%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_get_2_::{{closure}} (32,378 instructions, 98.40%)</title><rect x="0.6322%" y="197" width="98.4044%" height="15" fill="rgb(225,155,25)" fg:x="208" fg:w="32378"/><text x="0.9251%" y="207.50">imrc_hashmap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="99.0366%" y="197" width="0.0365%" height="15" fill="rgb(235,117,44)" fg:x="32586" fg:w="12"/><text x="99.3295%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.25%)</title><rect x="99.0730%" y="197" width="0.2462%" height="15" fill="rgb(206,228,50)" fg:x="32598" fg:w="81"/><text x="99.3660%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.38%)</title><rect x="99.3192%" y="197" width="0.3829%" height="15" fill="rgb(242,20,25)" fg:x="32679" fg:w="126"/><text x="99.6122%" y="207.50"></text></g><g><title>all (32,903 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,147,44)" fg:x="0" fg:w="32903"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (32,903 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,15,48)" fg:x="0" fg:w="32903"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>