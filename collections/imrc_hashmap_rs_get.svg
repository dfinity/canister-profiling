<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="38020"><g><title>ic_cdk::setup (24 instructions, 0.06%)</title><rect x="0.0000%" y="197" width="0.0631%" height="15" fill="rgb(225,21,32)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (115 instructions, 0.30%)</title><rect x="0.0631%" y="197" width="0.3025%" height="15" fill="rgb(210,131,16)" fg:x="24" fg:w="115"/><text x="0.3561%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.21%)</title><rect x="0.3656%" y="197" width="0.2104%" height="15" fill="rgb(212,20,40)" fg:x="139" fg:w="80"/><text x="0.6586%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="0.5760%" y="165" width="0.2393%" height="15" fill="rgb(210,79,27)" fg:x="219" fg:w="91"/><text x="0.8690%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="0.8154%" y="149" width="0.2157%" height="15" fill="rgb(239,190,11)" fg:x="310" fg:w="82"/><text x="1.1083%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.0310%" y="133" width="0.0158%" height="15" fill="rgb(221,165,8)" fg:x="392" fg:w="6"/><text x="1.3240%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="1.0310%" y="149" width="1.1652%" height="15" fill="rgb(205,6,48)" fg:x="392" fg:w="443"/><text x="1.3240%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="2.1962%" y="149" width="0.2499%" height="15" fill="rgb(235,27,42)" fg:x="835" fg:w="95"/><text x="2.4892%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.4461%" y="149" width="0.1578%" height="15" fill="rgb(232,91,16)" fg:x="930" fg:w="60"/><text x="2.7390%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.6039%" y="149" width="0.1578%" height="15" fill="rgb(229,32,30)" fg:x="990" fg:w="60"/><text x="2.8969%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.7617%" y="149" width="0.1578%" height="15" fill="rgb(221,63,5)" fg:x="1050" fg:w="60"/><text x="3.0547%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.16%)</title><rect x="2.9195%" y="149" width="0.1578%" height="15" fill="rgb(245,123,40)" fg:x="1110" fg:w="60"/><text x="3.2125%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="3.0773%" y="149" width="0.2157%" height="15" fill="rgb(246,40,52)" fg:x="1170" fg:w="82"/><text x="3.3703%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="3.2930%" y="149" width="0.1841%" height="15" fill="rgb(251,9,36)" fg:x="1252" fg:w="70"/><text x="3.5860%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="3.4771%" y="133" width="0.0158%" height="15" fill="rgb(251,125,36)" fg:x="1322" fg:w="6"/><text x="3.7701%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="3.4771%" y="149" width="1.1652%" height="15" fill="rgb(213,207,27)" fg:x="1322" fg:w="443"/><text x="3.7701%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="4.6423%" y="149" width="0.0500%" height="15" fill="rgb(249,213,18)" fg:x="1765" fg:w="19"/><text x="4.9353%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="4.6923%" y="133" width="0.2393%" height="15" fill="rgb(230,10,47)" fg:x="1784" fg:w="91"/><text x="4.9852%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.18%)</title><rect x="4.9316%" y="101" width="0.1762%" height="15" fill="rgb(206,53,3)" fg:x="1875" fg:w="67"/><text x="5.2246%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.25%)</title><rect x="4.9316%" y="117" width="0.2525%" height="15" fill="rgb(208,197,33)" fg:x="1875" fg:w="96"/><text x="5.2246%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="5.1841%" y="69" width="0.0289%" height="15" fill="rgb(253,146,39)" fg:x="1971" fg:w="11"/><text x="5.4771%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="5.2130%" y="53" width="0.0921%" height="15" fill="rgb(244,170,0)" fg:x="1982" fg:w="35"/><text x="5.5060%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.17%)</title><rect x="5.2130%" y="69" width="0.1683%" height="15" fill="rgb(233,196,10)" fg:x="1982" fg:w="64"/><text x="5.5060%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.38%)</title><rect x="5.1841%" y="85" width="0.3787%" height="15" fill="rgb(233,28,0)" fg:x="1971" fg:w="144"/><text x="5.4771%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.55%)</title><rect x="5.1841%" y="101" width="0.5497%" height="15" fill="rgb(206,89,51)" fg:x="1971" fg:w="209"/><text x="5.4771%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.58%)</title><rect x="5.1841%" y="117" width="0.5760%" height="15" fill="rgb(230,160,33)" fg:x="1971" fg:w="219"/><text x="5.4771%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.20%)</title><rect x="4.9316%" y="133" width="1.2020%" height="15" fill="rgb(220,185,11)" fg:x="1875" fg:w="457"/><text x="5.2246%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (686 instructions, 1.80%)</title><rect x="4.6923%" y="149" width="1.8043%" height="15" fill="rgb(252,3,2)" fg:x="1784" fg:w="686"/><text x="4.9852%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="6.4966%" y="149" width="0.2499%" height="15" fill="rgb(247,171,49)" fg:x="2470" fg:w="95"/><text x="6.7895%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="6.7464%" y="149" width="0.1657%" height="15" fill="rgb(224,168,35)" fg:x="2565" fg:w="63"/><text x="7.0394%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="6.9122%" y="149" width="0.1999%" height="15" fill="rgb(206,53,22)" fg:x="2628" fg:w="76"/><text x="7.2051%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.18%)</title><rect x="7.1120%" y="149" width="0.1841%" height="15" fill="rgb(220,113,41)" fg:x="2704" fg:w="70"/><text x="7.4050%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="7.2962%" y="117" width="0.0158%" height="15" fill="rgb(225,204,46)" fg:x="2774" fg:w="6"/><text x="7.5891%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.17%)</title><rect x="7.2962%" y="133" width="1.1652%" height="15" fill="rgb(212,107,9)" fg:x="2774" fg:w="443"/><text x="7.5891%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.05%)</title><rect x="8.4613%" y="133" width="0.0500%" height="15" fill="rgb(222,175,33)" fg:x="3217" fg:w="19"/><text x="8.7543%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="8.5113%" y="117" width="0.2393%" height="15" fill="rgb(223,119,39)" fg:x="3236" fg:w="91"/><text x="8.8043%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.18%)</title><rect x="8.7507%" y="85" width="0.1762%" height="15" fill="rgb(208,223,52)" fg:x="3327" fg:w="67"/><text x="9.0436%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.25%)</title><rect x="8.7507%" y="101" width="0.2525%" height="15" fill="rgb(232,12,50)" fg:x="3327" fg:w="96"/><text x="9.0436%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.03%)</title><rect x="9.0032%" y="53" width="0.0289%" height="15" fill="rgb(240,195,24)" fg:x="3423" fg:w="11"/><text x="9.2961%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.09%)</title><rect x="9.0321%" y="37" width="0.0921%" height="15" fill="rgb(217,145,10)" fg:x="3434" fg:w="35"/><text x="9.3251%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.17%)</title><rect x="9.0321%" y="53" width="0.1683%" height="15" fill="rgb(216,67,22)" fg:x="3434" fg:w="64"/><text x="9.3251%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.38%)</title><rect x="9.0032%" y="69" width="0.3787%" height="15" fill="rgb(242,24,27)" fg:x="3423" fg:w="144"/><text x="9.2961%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.55%)</title><rect x="9.0032%" y="85" width="0.5497%" height="15" fill="rgb(236,110,43)" fg:x="3423" fg:w="209"/><text x="9.2961%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.58%)</title><rect x="9.0032%" y="101" width="0.5760%" height="15" fill="rgb(239,80,39)" fg:x="3423" fg:w="219"/><text x="9.2961%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.20%)</title><rect x="8.7507%" y="117" width="1.2020%" height="15" fill="rgb(226,85,15)" fg:x="3327" fg:w="457"/><text x="9.0436%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (686 instructions, 1.80%)</title><rect x="8.5113%" y="133" width="1.8043%" height="15" fill="rgb(250,161,43)" fg:x="3236" fg:w="686"/><text x="8.8043%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.25%)</title><rect x="10.3156%" y="133" width="0.2499%" height="15" fill="rgb(220,186,21)" fg:x="3922" fg:w="95"/><text x="10.6086%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="10.5655%" y="133" width="0.1657%" height="15" fill="rgb(249,178,36)" fg:x="4017" fg:w="63"/><text x="10.8585%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.22%)</title><rect x="10.7312%" y="117" width="0.2157%" height="15" fill="rgb(235,219,19)" fg:x="4080" fg:w="82"/><text x="11.0242%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.25%)</title><rect x="10.9469%" y="117" width="0.2499%" height="15" fill="rgb(228,199,29)" fg:x="4162" fg:w="95"/><text x="11.2398%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="11.1967%" y="117" width="0.1999%" height="15" fill="rgb(225,183,34)" fg:x="4257" fg:w="76"/><text x="11.4897%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.87%)</title><rect x="10.7312%" y="133" width="0.8680%" height="15" fill="rgb(254,130,22)" fg:x="4080" fg:w="330"/><text x="11.0242%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="11.5992%" y="133" width="0.2393%" height="15" fill="rgb(213,170,10)" fg:x="4410" fg:w="91"/><text x="11.8921%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,967 instructions, 5.17%)</title><rect x="7.2962%" y="149" width="5.1736%" height="15" fill="rgb(207,5,35)" fg:x="2774" fg:w="1967"/><text x="7.5891%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.20%)</title><rect x="12.4698%" y="149" width="0.1999%" height="15" fill="rgb(224,215,45)" fg:x="4741" fg:w="76"/><text x="12.7627%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.6696%" y="149" width="0.0395%" height="15" fill="rgb(244,193,16)" fg:x="4817" fg:w="15"/><text x="12.9626%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.7091%" y="149" width="0.0395%" height="15" fill="rgb(215,41,0)" fg:x="4832" fg:w="15"/><text x="13.0021%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.04%)</title><rect x="12.7486%" y="149" width="0.0395%" height="15" fill="rgb(251,95,41)" fg:x="4847" fg:w="15"/><text x="13.0415%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="12.7880%" y="149" width="0.0184%" height="15" fill="rgb(229,78,34)" fg:x="4862" fg:w="7"/><text x="13.0810%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="12.8064%" y="133" width="0.2393%" height="15" fill="rgb(238,11,24)" fg:x="4869" fg:w="91"/><text x="13.0994%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.49%)</title><rect x="12.8064%" y="149" width="0.4918%" height="15" fill="rgb(221,114,2)" fg:x="4869" fg:w="187"/><text x="13.0994%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.2983%" y="117" width="0.2393%" height="15" fill="rgb(231,88,16)" fg:x="5056" fg:w="91"/><text x="13.5912%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 instructions, 0.37%)</title><rect x="13.2983%" y="133" width="0.3656%" height="15" fill="rgb(227,127,37)" fg:x="5056" fg:w="139"/><text x="13.5912%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (224 instructions, 0.59%)</title><rect x="13.2983%" y="149" width="0.5892%" height="15" fill="rgb(232,133,17)" fg:x="5056" fg:w="224"/><text x="13.5912%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="13.8874%" y="149" width="0.2393%" height="15" fill="rgb(249,98,32)" fg:x="5280" fg:w="91"/><text x="14.1804%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.23%)</title><rect x="14.1268%" y="149" width="0.2341%" height="15" fill="rgb(233,173,47)" fg:x="5371" fg:w="89"/><text x="14.4197%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.3609%" y="149" width="0.2393%" height="15" fill="rgb(214,100,14)" fg:x="5460" fg:w="91"/><text x="14.6538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="14.6002%" y="149" width="0.2393%" height="15" fill="rgb(240,48,44)" fg:x="5551" fg:w="91"/><text x="14.8932%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.01%)</title><rect x="14.8396%" y="149" width="0.0105%" height="15" fill="rgb(227,101,13)" fg:x="5642" fg:w="4"/><text x="15.1325%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.23%)</title><rect x="14.8501%" y="149" width="0.2341%" height="15" fill="rgb(241,163,32)" fg:x="5646" fg:w="89"/><text x="15.1430%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.03%)</title><rect x="15.0842%" y="149" width="1.0310%" height="15" fill="rgb(205,152,29)" fg:x="5735" fg:w="392"/><text x="15.3771%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.03%)</title><rect x="16.1152%" y="149" width="1.0310%" height="15" fill="rgb(239,88,54)" fg:x="6127" fg:w="392"/><text x="16.4082%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.33%)</title><rect x="17.1462%" y="149" width="1.3256%" height="15" fill="rgb(218,54,32)" fg:x="6519" fg:w="504"/><text x="17.4392%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,922 instructions, 20.84%)</title><rect x="0.8154%" y="165" width="20.8364%" height="15" fill="rgb(245,130,44)" fg:x="310" fg:w="7922"/><text x="1.1083%" y="175.50">candid::de::IDLDeserialize::..</text></g><g><title>memcpy (344 instructions, 0.90%)</title><rect x="21.6518%" y="165" width="0.9048%" height="15" fill="rgb(231,138,11)" fg:x="8232" fg:w="344"/><text x="21.9447%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="22.5565%" y="149" width="0.0184%" height="15" fill="rgb(218,27,50)" fg:x="8576" fg:w="7"/><text x="22.8495%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.10%)</title><rect x="22.5565%" y="165" width="0.1026%" height="15" fill="rgb(227,40,31)" fg:x="8576" fg:w="39"/><text x="22.8495%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="22.6591%" y="165" width="0.2393%" height="15" fill="rgb(224,3,12)" fg:x="8615" fg:w="91"/><text x="22.9521%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="22.8985%" y="149" width="0.0184%" height="15" fill="rgb(241,182,24)" fg:x="8706" fg:w="7"/><text x="23.1914%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="22.9169%" y="133" width="0.1552%" height="15" fill="rgb(243,27,32)" fg:x="8713" fg:w="59"/><text x="23.2099%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.25%)</title><rect x="23.0721%" y="133" width="0.2472%" height="15" fill="rgb(250,144,34)" fg:x="8772" fg:w="94"/><text x="23.3650%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.46%)</title><rect x="23.3193%" y="133" width="0.4550%" height="15" fill="rgb(250,96,4)" fg:x="8866" fg:w="173"/><text x="23.6123%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.52%)</title><rect x="22.9169%" y="149" width="1.5229%" height="15" fill="rgb(216,188,10)" fg:x="8713" fg:w="579"/><text x="23.2099%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 2.10%)</title><rect x="22.8985%" y="165" width="2.0963%" height="15" fill="rgb(223,183,18)" fg:x="8706" fg:w="797"/><text x="23.1914%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="24.9947%" y="165" width="0.2393%" height="15" fill="rgb(224,158,47)" fg:x="9503" fg:w="91"/><text x="25.2877%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="25.2341%" y="149" width="0.0184%" height="15" fill="rgb(207,108,9)" fg:x="9594" fg:w="7"/><text x="25.5271%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="25.2525%" y="133" width="0.1552%" height="15" fill="rgb(223,58,11)" fg:x="9601" fg:w="59"/><text x="25.5455%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.25%)</title><rect x="25.4077%" y="133" width="0.2472%" height="15" fill="rgb(209,26,16)" fg:x="9660" fg:w="94"/><text x="25.7006%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.46%)</title><rect x="25.6549%" y="133" width="0.4550%" height="15" fill="rgb(233,43,27)" fg:x="9754" fg:w="173"/><text x="25.9479%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.52%)</title><rect x="25.2525%" y="149" width="1.5229%" height="15" fill="rgb(245,192,16)" fg:x="9601" fg:w="579"/><text x="25.5455%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.20%)</title><rect x="26.7754%" y="149" width="0.2025%" height="15" fill="rgb(254,67,46)" fg:x="10180" fg:w="77"/><text x="27.0684%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.23%)</title><rect x="26.9779%" y="133" width="0.2341%" height="15" fill="rgb(236,48,16)" fg:x="10257" fg:w="89"/><text x="27.2709%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.35%)</title><rect x="26.9779%" y="149" width="0.3498%" height="15" fill="rgb(237,169,28)" fg:x="10257" fg:w="133"/><text x="27.2709%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 2.56%)</title><rect x="25.2341%" y="165" width="2.5644%" height="15" fill="rgb(254,216,5)" fg:x="9594" fg:w="975"/><text x="25.5271%" y="175.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.16%)</title><rect x="27.7985%" y="117" width="0.1552%" height="15" fill="rgb(228,1,47)" fg:x="10569" fg:w="59"/><text x="28.0915%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.27%)</title><rect x="27.7985%" y="133" width="0.2683%" height="15" fill="rgb(220,213,44)" fg:x="10569" fg:w="102"/><text x="28.0915%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.85%)</title><rect x="27.7985%" y="149" width="0.8496%" height="15" fill="rgb(240,194,35)" fg:x="10569" fg:w="323"/><text x="28.0915%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.314 (34 instructions, 0.09%)</title><rect x="28.6481%" y="149" width="0.0894%" height="15" fill="rgb(250,155,34)" fg:x="10892" fg:w="34"/><text x="28.9410%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="28.7375%" y="149" width="0.0342%" height="15" fill="rgb(207,127,10)" fg:x="10926" fg:w="13"/><text x="29.0305%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 1.46%)</title><rect x="27.7985%" y="165" width="1.4598%" height="15" fill="rgb(254,81,12)" fg:x="10569" fg:w="555"/><text x="28.0915%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.13%)</title><rect x="29.2583%" y="165" width="0.1289%" height="15" fill="rgb(242,64,2)" fg:x="11124" fg:w="49"/><text x="29.5513%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="29.3872%" y="133" width="0.0710%" height="15" fill="rgb(250,103,5)" fg:x="11173" fg:w="27"/><text x="29.6801%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.37%)</title><rect x="29.3872%" y="149" width="0.3735%" height="15" fill="rgb(221,174,4)" fg:x="11173" fg:w="142"/><text x="29.6801%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="29.8764%" y="133" width="0.0710%" height="15" fill="rgb(215,190,25)" fg:x="11359" fg:w="27"/><text x="30.1693%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.37%)</title><rect x="29.8764%" y="149" width="0.3735%" height="15" fill="rgb(216,78,3)" fg:x="11359" fg:w="142"/><text x="30.1693%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 0.98%)</title><rect x="29.3872%" y="165" width="0.9784%" height="15" fill="rgb(251,4,39)" fg:x="11173" fg:w="372"/><text x="29.6801%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.09%)</title><rect x="30.3656%" y="149" width="0.0921%" height="15" fill="rgb(249,166,51)" fg:x="11545" fg:w="35"/><text x="30.6586%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1340 (34 instructions, 0.09%)</title><rect x="30.4577%" y="149" width="0.0894%" height="15" fill="rgb(252,82,21)" fg:x="11580" fg:w="34"/><text x="30.7506%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1340 (34 instructions, 0.09%)</title><rect x="30.5471%" y="149" width="0.0894%" height="15" fill="rgb(223,229,54)" fg:x="11614" fg:w="34"/><text x="30.8400%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.09%)</title><rect x="30.6365%" y="149" width="0.0868%" height="15" fill="rgb(224,84,46)" fg:x="11648" fg:w="33"/><text x="30.9295%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.66%)</title><rect x="30.3656%" y="165" width="0.6575%" height="15" fill="rgb(224,42,50)" fg:x="11545" fg:w="250"/><text x="30.6586%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="31.0231%" y="165" width="0.0342%" height="15" fill="rgb(219,45,25)" fg:x="11795" fg:w="13"/><text x="31.3161%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="31.0573%" y="165" width="0.0342%" height="15" fill="rgb(218,34,9)" fg:x="11808" fg:w="13"/><text x="31.3503%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="31.0915%" y="165" width="0.0342%" height="15" fill="rgb(227,215,29)" fg:x="11821" fg:w="13"/><text x="31.3845%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.11%)</title><rect x="31.1257%" y="165" width="0.1131%" height="15" fill="rgb(246,79,15)" fg:x="11834" fg:w="43"/><text x="31.4187%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="31.2388%" y="149" width="0.0184%" height="15" fill="rgb(211,216,44)" fg:x="11877" fg:w="7"/><text x="31.5318%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.2572%" y="133" width="0.0710%" height="15" fill="rgb(219,203,32)" fg:x="11884" fg:w="27"/><text x="31.5502%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.3282%" y="133" width="0.0710%" height="15" fill="rgb(205,38,25)" fg:x="11911" fg:w="27"/><text x="31.6212%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.52%)</title><rect x="31.2572%" y="149" width="0.5181%" height="15" fill="rgb(248,224,19)" fg:x="11884" fg:w="197"/><text x="31.5502%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.7754%" y="117" width="0.0710%" height="15" fill="rgb(247,187,51)" fg:x="12081" fg:w="27"/><text x="32.0684%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="31.8464%" y="117" width="0.0710%" height="15" fill="rgb(226,0,31)" fg:x="12108" fg:w="27"/><text x="32.1394%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.18%)</title><rect x="31.9174%" y="117" width="0.1789%" height="15" fill="rgb(236,215,20)" fg:x="12135" fg:w="68"/><text x="32.2104%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 0.64%)</title><rect x="31.7754%" y="133" width="0.6418%" height="15" fill="rgb(212,112,25)" fg:x="12081" fg:w="244"/><text x="32.0684%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (288 instructions, 0.76%)</title><rect x="31.7754%" y="149" width="0.7575%" height="15" fill="rgb(247,18,24)" fg:x="12081" fg:w="288"/><text x="32.0684%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="32.5329%" y="149" width="0.0342%" height="15" fill="rgb(208,83,31)" fg:x="12369" fg:w="13"/><text x="32.8258%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (565 instructions, 1.49%)</title><rect x="31.2388%" y="165" width="1.4861%" height="15" fill="rgb(223,155,28)" fg:x="11877" fg:w="565"/><text x="31.5318%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.18%)</title><rect x="32.7249%" y="149" width="0.1815%" height="15" fill="rgb(230,102,53)" fg:x="12442" fg:w="69"/><text x="33.0179%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.18%)</title><rect x="32.9064%" y="149" width="0.1789%" height="15" fill="rgb(239,143,12)" fg:x="12511" fg:w="68"/><text x="33.1993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.61%)</title><rect x="32.7249%" y="165" width="0.6076%" height="15" fill="rgb(246,52,41)" fg:x="12442" fg:w="231"/><text x="33.0179%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (14,023 instructions, 36.88%)</title><rect x="0.5760%" y="181" width="36.8832%" height="15" fill="rgb(246,148,41)" fg:x="219" fg:w="14023"/><text x="0.8690%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (19 instructions, 0.05%)</title><rect x="37.4592%" y="181" width="0.0500%" height="15" fill="rgb(218,166,38)" fg:x="14242" fg:w="19"/><text x="37.7522%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="37.5092%" y="181" width="0.5155%" height="15" fill="rgb(229,87,40)" fg:x="14261" fg:w="196"/><text x="37.8022%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="38.0247%" y="181" width="0.5155%" height="15" fill="rgb(210,75,22)" fg:x="14457" fg:w="196"/><text x="38.3177%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="38.5402%" y="181" width="0.5155%" height="15" fill="rgb(248,54,30)" fg:x="14653" fg:w="196"/><text x="38.8332%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="39.0558%" y="181" width="0.5155%" height="15" fill="rgb(248,58,45)" fg:x="14849" fg:w="196"/><text x="39.3487%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="39.5713%" y="181" width="0.5155%" height="15" fill="rgb(243,164,39)" fg:x="15045" fg:w="196"/><text x="39.8642%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="40.0868%" y="181" width="0.5155%" height="15" fill="rgb(211,117,43)" fg:x="15241" fg:w="196"/><text x="40.3798%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="40.6023%" y="181" width="0.5155%" height="15" fill="rgb(236,92,46)" fg:x="15437" fg:w="196"/><text x="40.8953%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="41.1178%" y="181" width="0.5155%" height="15" fill="rgb(229,82,24)" fg:x="15633" fg:w="196"/><text x="41.4108%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="41.6334%" y="181" width="0.5155%" height="15" fill="rgb(236,176,54)" fg:x="15829" fg:w="196"/><text x="41.9263%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="42.1489%" y="181" width="0.5155%" height="15" fill="rgb(213,111,13)" fg:x="16025" fg:w="196"/><text x="42.4418%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="42.6644%" y="181" width="0.5155%" height="15" fill="rgb(245,153,30)" fg:x="16221" fg:w="196"/><text x="42.9574%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="43.1799%" y="181" width="0.5155%" height="15" fill="rgb(228,72,34)" fg:x="16417" fg:w="196"/><text x="43.4729%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="43.6954%" y="181" width="0.5155%" height="15" fill="rgb(209,75,51)" fg:x="16613" fg:w="196"/><text x="43.9884%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="44.2109%" y="181" width="0.5155%" height="15" fill="rgb(229,169,13)" fg:x="16809" fg:w="196"/><text x="44.5039%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="44.7265%" y="181" width="0.5155%" height="15" fill="rgb(230,13,1)" fg:x="17005" fg:w="196"/><text x="45.0194%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="45.2420%" y="181" width="0.5155%" height="15" fill="rgb(243,66,21)" fg:x="17201" fg:w="196"/><text x="45.5349%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="45.7575%" y="181" width="0.5155%" height="15" fill="rgb(217,156,46)" fg:x="17397" fg:w="196"/><text x="46.0505%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="46.2730%" y="181" width="0.5155%" height="15" fill="rgb(228,82,46)" fg:x="17593" fg:w="196"/><text x="46.5660%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="46.7885%" y="181" width="0.5155%" height="15" fill="rgb(205,63,54)" fg:x="17789" fg:w="196"/><text x="47.0815%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="47.3041%" y="181" width="0.5155%" height="15" fill="rgb(241,70,44)" fg:x="17985" fg:w="196"/><text x="47.5970%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="47.8196%" y="181" width="0.5155%" height="15" fill="rgb(224,163,54)" fg:x="18181" fg:w="196"/><text x="48.1125%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="48.3351%" y="181" width="0.5155%" height="15" fill="rgb(205,68,1)" fg:x="18377" fg:w="196"/><text x="48.6281%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="48.8506%" y="181" width="0.5155%" height="15" fill="rgb(239,67,1)" fg:x="18573" fg:w="196"/><text x="49.1436%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="49.3661%" y="181" width="0.5155%" height="15" fill="rgb(234,196,9)" fg:x="18769" fg:w="196"/><text x="49.6591%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="49.8816%" y="181" width="0.5155%" height="15" fill="rgb(246,131,12)" fg:x="18965" fg:w="196"/><text x="50.1746%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="50.3972%" y="181" width="0.5155%" height="15" fill="rgb(214,2,41)" fg:x="19161" fg:w="196"/><text x="50.6901%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="50.9127%" y="181" width="0.5155%" height="15" fill="rgb(253,70,18)" fg:x="19357" fg:w="196"/><text x="51.2056%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="51.4282%" y="181" width="0.5155%" height="15" fill="rgb(250,4,25)" fg:x="19553" fg:w="196"/><text x="51.7212%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="51.9437%" y="181" width="0.5155%" height="15" fill="rgb(215,91,21)" fg:x="19749" fg:w="196"/><text x="52.2367%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="52.4592%" y="181" width="0.5155%" height="15" fill="rgb(212,94,45)" fg:x="19945" fg:w="196"/><text x="52.7522%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="52.9748%" y="181" width="0.5155%" height="15" fill="rgb(223,91,39)" fg:x="20141" fg:w="196"/><text x="53.2677%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="53.4903%" y="181" width="0.5155%" height="15" fill="rgb(234,11,16)" fg:x="20337" fg:w="196"/><text x="53.7832%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="54.0058%" y="181" width="0.5155%" height="15" fill="rgb(251,131,12)" fg:x="20533" fg:w="196"/><text x="54.2988%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="54.5213%" y="181" width="0.5155%" height="15" fill="rgb(205,4,51)" fg:x="20729" fg:w="196"/><text x="54.8143%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="55.0368%" y="181" width="0.5155%" height="15" fill="rgb(235,56,54)" fg:x="20925" fg:w="196"/><text x="55.3298%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="55.5523%" y="181" width="0.5155%" height="15" fill="rgb(205,146,46)" fg:x="21121" fg:w="196"/><text x="55.8453%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="56.0679%" y="181" width="0.5155%" height="15" fill="rgb(237,87,12)" fg:x="21317" fg:w="196"/><text x="56.3608%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="56.5834%" y="181" width="0.5155%" height="15" fill="rgb(246,48,40)" fg:x="21513" fg:w="196"/><text x="56.8763%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="57.0989%" y="181" width="0.5155%" height="15" fill="rgb(250,215,10)" fg:x="21709" fg:w="196"/><text x="57.3919%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="57.6144%" y="181" width="0.5155%" height="15" fill="rgb(228,75,19)" fg:x="21905" fg:w="196"/><text x="57.9074%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="58.1299%" y="181" width="0.5155%" height="15" fill="rgb(246,201,23)" fg:x="22101" fg:w="196"/><text x="58.4229%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="58.6454%" y="181" width="0.5155%" height="15" fill="rgb(210,9,52)" fg:x="22297" fg:w="196"/><text x="58.9384%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="59.1610%" y="181" width="0.5155%" height="15" fill="rgb(242,102,30)" fg:x="22493" fg:w="196"/><text x="59.4539%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="59.6765%" y="181" width="0.5155%" height="15" fill="rgb(230,66,29)" fg:x="22689" fg:w="196"/><text x="59.9695%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="60.1920%" y="181" width="0.5155%" height="15" fill="rgb(243,23,28)" fg:x="22885" fg:w="196"/><text x="60.4850%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="60.7075%" y="181" width="0.5155%" height="15" fill="rgb(212,219,35)" fg:x="23081" fg:w="196"/><text x="61.0005%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="61.2230%" y="181" width="0.5155%" height="15" fill="rgb(252,70,54)" fg:x="23277" fg:w="196"/><text x="61.5160%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="61.7386%" y="181" width="0.5155%" height="15" fill="rgb(205,197,47)" fg:x="23473" fg:w="196"/><text x="62.0315%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="62.2541%" y="181" width="0.5155%" height="15" fill="rgb(235,31,13)" fg:x="23669" fg:w="196"/><text x="62.5470%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (196 instructions, 0.52%)</title><rect x="62.7696%" y="181" width="0.5155%" height="15" fill="rgb(214,138,2)" fg:x="23865" fg:w="196"/><text x="63.0626%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.02%)</title><rect x="63.2851%" y="149" width="0.0184%" height="15" fill="rgb(226,178,31)" fg:x="24061" fg:w="7"/><text x="63.5781%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.18%)</title><rect x="63.3035%" y="117" width="0.1815%" height="15" fill="rgb(215,67,11)" fg:x="24068" fg:w="69"/><text x="63.5965%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (160 instructions, 0.42%)</title><rect x="63.3035%" y="133" width="0.4208%" height="15" fill="rgb(248,37,30)" fg:x="24068" fg:w="160"/><text x="63.5965%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (204 instructions, 0.54%)</title><rect x="63.3035%" y="149" width="0.5366%" height="15" fill="rgb(226,61,16)" fg:x="24068" fg:w="204"/><text x="63.5965%" y="159.50"></text></g><g><title>memset (152 instructions, 0.40%)</title><rect x="63.8401%" y="149" width="0.3998%" height="15" fill="rgb(245,72,51)" fg:x="24272" fg:w="152"/><text x="64.1331%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (537 instructions, 1.41%)</title><rect x="63.2851%" y="165" width="1.4124%" height="15" fill="rgb(228,162,21)" fg:x="24061" fg:w="537"/><text x="63.5781%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 1.36%)</title><rect x="64.6975%" y="149" width="1.3624%" height="15" fill="rgb(253,14,11)" fg:x="24598" fg:w="518"/><text x="64.9905%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.24%)</title><rect x="66.0600%" y="101" width="0.2393%" height="15" fill="rgb(249,127,36)" fg:x="25116" fg:w="91"/><text x="66.3529%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 instructions, 0.37%)</title><rect x="66.0600%" y="117" width="0.3656%" height="15" fill="rgb(212,182,20)" fg:x="25116" fg:w="139"/><text x="66.3529%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (221 instructions, 0.58%)</title><rect x="66.0600%" y="133" width="0.5813%" height="15" fill="rgb(251,1,9)" fg:x="25116" fg:w="221"/><text x="66.3529%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="66.6412%" y="133" width="0.0395%" height="15" fill="rgb(219,160,51)" fg:x="25337" fg:w="15"/><text x="66.9342%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.04%)</title><rect x="66.6807%" y="133" width="0.0395%" height="15" fill="rgb(253,107,23)" fg:x="25352" fg:w="15"/><text x="66.9737%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (439 instructions, 1.15%)</title><rect x="66.0600%" y="149" width="1.1547%" height="15" fill="rgb(232,160,4)" fg:x="25116" fg:w="439"/><text x="66.3529%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 1.36%)</title><rect x="67.2146%" y="149" width="1.3572%" height="15" fill="rgb(253,168,41)" fg:x="25555" fg:w="516"/><text x="67.5076%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 instructions, 0.02%)</title><rect x="68.5718%" y="149" width="0.0184%" height="15" fill="rgb(214,36,44)" fg:x="26071" fg:w="7"/><text x="68.8648%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,577 instructions, 4.15%)</title><rect x="64.6975%" y="165" width="4.1478%" height="15" fill="rgb(224,228,50)" fg:x="24598" fg:w="1577"/><text x="64.9905%" y="175.50">can..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.02%)</title><rect x="68.8453%" y="165" width="0.0184%" height="15" fill="rgb(242,127,10)" fg:x="26175" fg:w="7"/><text x="69.1383%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.17%)</title><rect x="68.8638%" y="165" width="0.1657%" height="15" fill="rgb(223,21,51)" fg:x="26182" fg:w="63"/><text x="69.1567%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,790 instructions, 7.34%)</title><rect x="63.2851%" y="181" width="7.3382%" height="15" fill="rgb(208,47,36)" fg:x="24061" fg:w="2790"/><text x="63.5781%" y="191.50">ic_cdk::..</text></g><g><title>imrc_hashmap::__canister_method_batch_get::{{closure}} (37,409 instructions, 98.39%)</title><rect x="0.5760%" y="197" width="98.3930%" height="15" fill="rgb(205,129,8)" fg:x="219" fg:w="37409"/><text x="0.8690%" y="207.50">imrc_hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.04%)</title><rect x="98.9690%" y="197" width="0.0368%" height="15" fill="rgb(217,120,31)" fg:x="37628" fg:w="14"/><text x="99.2619%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.07%)</title><rect x="99.2425%" y="181" width="0.0710%" height="15" fill="rgb(240,188,51)" fg:x="37732" fg:w="27"/><text x="99.5355%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (233 instructions, 0.61%)</title><rect x="99.0084%" y="197" width="0.6128%" height="15" fill="rgb(240,4,53)" fg:x="37643" fg:w="233"/><text x="99.3014%" y="207.50"></text></g><g><title>all (38,020 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,19,44)" fg:x="0" fg:w="38020"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (38,020 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,68,15)" fg:x="0" fg:w="38020"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>