<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="28503"><g><title>ic_cdk::setup (19 instructions, 0.07%)</title><rect x="0.0000%" y="197" width="0.0667%" height="15" fill="rgb(205,47,1)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.41%)</title><rect x="0.0667%" y="197" width="0.4105%" height="15" fill="rgb(230,61,53)" fg:x="19" fg:w="117"/><text x="0.3596%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.26%)</title><rect x="0.4771%" y="197" width="0.2561%" height="15" fill="rgb(209,183,23)" fg:x="136" fg:w="73"/><text x="0.7701%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="0.7333%" y="165" width="0.2877%" height="15" fill="rgb(248,88,9)" fg:x="209" fg:w="82"/><text x="1.0262%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="1.0209%" y="149" width="0.2491%" height="15" fill="rgb(221,70,19)" fg:x="291" fg:w="71"/><text x="1.3139%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.2700%" y="133" width="0.0140%" height="15" fill="rgb(218,151,52)" fg:x="362" fg:w="4"/><text x="1.5630%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.40%)</title><rect x="1.2700%" y="149" width="1.4034%" height="15" fill="rgb(228,180,19)" fg:x="362" fg:w="400"/><text x="1.5630%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="2.6734%" y="149" width="0.2982%" height="15" fill="rgb(208,23,43)" fg:x="762" fg:w="85"/><text x="2.9664%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.20%)</title><rect x="2.9716%" y="149" width="0.1965%" height="15" fill="rgb(215,128,43)" fg:x="847" fg:w="56"/><text x="3.2646%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.20%)</title><rect x="3.1681%" y="149" width="0.1965%" height="15" fill="rgb(233,171,21)" fg:x="903" fg:w="56"/><text x="3.4611%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.20%)</title><rect x="3.3646%" y="149" width="0.1965%" height="15" fill="rgb(214,214,36)" fg:x="959" fg:w="56"/><text x="3.6575%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.20%)</title><rect x="3.5610%" y="149" width="0.1965%" height="15" fill="rgb(217,220,30)" fg:x="1015" fg:w="56"/><text x="3.8540%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="3.7575%" y="149" width="0.2491%" height="15" fill="rgb(216,124,14)" fg:x="1071" fg:w="71"/><text x="4.0505%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.24%)</title><rect x="4.0066%" y="149" width="0.2421%" height="15" fill="rgb(245,192,13)" fg:x="1142" fg:w="69"/><text x="4.2996%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="4.2487%" y="133" width="0.0140%" height="15" fill="rgb(248,182,10)" fg:x="1211" fg:w="4"/><text x="4.5416%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.40%)</title><rect x="4.2487%" y="149" width="1.4034%" height="15" fill="rgb(217,168,3)" fg:x="1211" fg:w="400"/><text x="4.5416%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="5.6520%" y="149" width="0.0561%" height="15" fill="rgb(235,99,1)" fg:x="1611" fg:w="16"/><text x="5.9450%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="5.7082%" y="133" width="0.2877%" height="15" fill="rgb(240,129,0)" fg:x="1627" fg:w="82"/><text x="6.0011%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.21%)</title><rect x="5.9959%" y="101" width="0.2105%" height="15" fill="rgb(237,124,22)" fg:x="1709" fg:w="60"/><text x="6.2888%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.30%)</title><rect x="5.9959%" y="117" width="0.2982%" height="15" fill="rgb(233,79,48)" fg:x="1709" fg:w="85"/><text x="6.2888%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="6.2941%" y="69" width="0.0316%" height="15" fill="rgb(231,145,7)" fg:x="1794" fg:w="9"/><text x="6.5870%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.11%)</title><rect x="6.3256%" y="53" width="0.1053%" height="15" fill="rgb(229,77,30)" fg:x="1803" fg:w="30"/><text x="6.6186%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.19%)</title><rect x="6.3256%" y="69" width="0.1930%" height="15" fill="rgb(206,123,36)" fg:x="1803" fg:w="55"/><text x="6.6186%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.41%)</title><rect x="6.2941%" y="85" width="0.4140%" height="15" fill="rgb(250,17,8)" fg:x="1794" fg:w="118"/><text x="6.5870%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.60%)</title><rect x="6.2941%" y="101" width="0.5999%" height="15" fill="rgb(216,176,31)" fg:x="1794" fg:w="171"/><text x="6.5870%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.62%)</title><rect x="6.2941%" y="117" width="0.6175%" height="15" fill="rgb(245,136,50)" fg:x="1794" fg:w="176"/><text x="6.5870%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.31%)</title><rect x="5.9959%" y="133" width="1.3051%" height="15" fill="rgb(253,81,31)" fg:x="1709" fg:w="372"/><text x="6.2888%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 2.11%)</title><rect x="5.7082%" y="149" width="2.1050%" height="15" fill="rgb(224,120,10)" fg:x="1627" fg:w="600"/><text x="6.0011%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="7.8132%" y="149" width="0.2982%" height="15" fill="rgb(207,82,37)" fg:x="2227" fg:w="85"/><text x="8.1062%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="8.1114%" y="149" width="0.2000%" height="15" fill="rgb(231,69,18)" fg:x="2312" fg:w="57"/><text x="8.4044%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="8.3114%" y="149" width="0.2316%" height="15" fill="rgb(254,181,53)" fg:x="2369" fg:w="66"/><text x="8.6044%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.24%)</title><rect x="8.5430%" y="149" width="0.2421%" height="15" fill="rgb(220,114,50)" fg:x="2435" fg:w="69"/><text x="8.8359%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="8.7850%" y="117" width="0.0140%" height="15" fill="rgb(227,66,17)" fg:x="2504" fg:w="4"/><text x="9.0780%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.40%)</title><rect x="8.7850%" y="133" width="1.4034%" height="15" fill="rgb(215,160,0)" fg:x="2504" fg:w="400"/><text x="9.0780%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="10.1884%" y="133" width="0.0561%" height="15" fill="rgb(207,65,54)" fg:x="2904" fg:w="16"/><text x="10.4814%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="10.2445%" y="117" width="0.2877%" height="15" fill="rgb(216,157,45)" fg:x="2920" fg:w="82"/><text x="10.5375%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.21%)</title><rect x="10.5322%" y="85" width="0.2105%" height="15" fill="rgb(233,109,47)" fg:x="3002" fg:w="60"/><text x="10.8252%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.30%)</title><rect x="10.5322%" y="101" width="0.2982%" height="15" fill="rgb(212,226,18)" fg:x="3002" fg:w="85"/><text x="10.8252%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="10.8304%" y="53" width="0.0316%" height="15" fill="rgb(228,218,43)" fg:x="3087" fg:w="9"/><text x="11.1234%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.11%)</title><rect x="10.8620%" y="37" width="0.1053%" height="15" fill="rgb(248,129,9)" fg:x="3096" fg:w="30"/><text x="11.1550%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.19%)</title><rect x="10.8620%" y="53" width="0.1930%" height="15" fill="rgb(221,192,30)" fg:x="3096" fg:w="55"/><text x="11.1550%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.41%)</title><rect x="10.8304%" y="69" width="0.4140%" height="15" fill="rgb(207,126,12)" fg:x="3087" fg:w="118"/><text x="11.1234%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.60%)</title><rect x="10.8304%" y="85" width="0.5999%" height="15" fill="rgb(210,93,9)" fg:x="3087" fg:w="171"/><text x="11.1234%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.62%)</title><rect x="10.8304%" y="101" width="0.6175%" height="15" fill="rgb(250,36,10)" fg:x="3087" fg:w="176"/><text x="11.1234%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.31%)</title><rect x="10.5322%" y="117" width="1.3051%" height="15" fill="rgb(220,101,47)" fg:x="3002" fg:w="372"/><text x="10.8252%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 2.11%)</title><rect x="10.2445%" y="133" width="2.1050%" height="15" fill="rgb(212,82,7)" fg:x="2920" fg:w="600"/><text x="10.5375%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.30%)</title><rect x="12.3496%" y="133" width="0.2982%" height="15" fill="rgb(245,228,51)" fg:x="3520" fg:w="85"/><text x="12.6425%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="12.6478%" y="133" width="0.2000%" height="15" fill="rgb(206,124,31)" fg:x="3605" fg:w="57"/><text x="12.9408%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.25%)</title><rect x="12.8478%" y="117" width="0.2491%" height="15" fill="rgb(221,206,26)" fg:x="3662" fg:w="71"/><text x="13.1407%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.33%)</title><rect x="13.0969%" y="117" width="0.3333%" height="15" fill="rgb(210,57,4)" fg:x="3733" fg:w="95"/><text x="13.3898%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="13.4302%" y="117" width="0.2316%" height="15" fill="rgb(231,70,32)" fg:x="3828" fg:w="66"/><text x="13.7231%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.99%)</title><rect x="12.8478%" y="133" width="0.9929%" height="15" fill="rgb(232,173,16)" fg:x="3662" fg:w="283"/><text x="13.1407%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="13.8406%" y="133" width="0.2877%" height="15" fill="rgb(238,199,11)" fg:x="3945" fg:w="82"/><text x="14.1336%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,692 instructions, 5.94%)</title><rect x="8.7850%" y="149" width="5.9362%" height="15" fill="rgb(239,112,54)" fg:x="2504" fg:w="1692"/><text x="9.0780%" y="159.50">binrea..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.23%)</title><rect x="14.7213%" y="149" width="0.2316%" height="15" fill="rgb(238,179,24)" fg:x="4196" fg:w="66"/><text x="15.0142%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="14.9528%" y="149" width="0.0456%" height="15" fill="rgb(216,121,50)" fg:x="4262" fg:w="13"/><text x="15.2458%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="14.9984%" y="149" width="0.0456%" height="15" fill="rgb(223,192,10)" fg:x="4275" fg:w="13"/><text x="15.2914%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="15.0440%" y="149" width="0.0246%" height="15" fill="rgb(209,196,51)" fg:x="4288" fg:w="7"/><text x="15.3370%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.04%)</title><rect x="15.0686%" y="149" width="0.0421%" height="15" fill="rgb(247,209,28)" fg:x="4295" fg:w="12"/><text x="15.3616%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="15.1107%" y="133" width="0.2877%" height="15" fill="rgb(220,9,17)" fg:x="4307" fg:w="82"/><text x="15.4037%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.58%)</title><rect x="15.1107%" y="149" width="0.5789%" height="15" fill="rgb(207,165,42)" fg:x="4307" fg:w="165"/><text x="15.4037%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="15.6896%" y="117" width="0.2877%" height="15" fill="rgb(237,193,52)" fg:x="4472" fg:w="82"/><text x="15.9825%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.41%)</title><rect x="15.6896%" y="133" width="0.4105%" height="15" fill="rgb(212,173,29)" fg:x="4472" fg:w="117"/><text x="15.9825%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (189 instructions, 0.66%)</title><rect x="15.6896%" y="149" width="0.6631%" height="15" fill="rgb(247,85,41)" fg:x="4472" fg:w="189"/><text x="15.9825%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="16.3527%" y="149" width="0.2877%" height="15" fill="rgb(240,66,40)" fg:x="4661" fg:w="82"/><text x="16.6456%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="16.6404%" y="149" width="0.2842%" height="15" fill="rgb(252,25,38)" fg:x="4743" fg:w="81"/><text x="16.9333%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="16.9245%" y="149" width="0.2877%" height="15" fill="rgb(242,82,34)" fg:x="4824" fg:w="82"/><text x="17.2175%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="17.2122%" y="149" width="0.2877%" height="15" fill="rgb(237,213,8)" fg:x="4906" fg:w="82"/><text x="17.5052%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="17.5069%" y="149" width="0.2842%" height="15" fill="rgb(247,25,16)" fg:x="4990" fg:w="81"/><text x="17.7999%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.34%)</title><rect x="17.7911%" y="149" width="1.3367%" height="15" fill="rgb(235,218,38)" fg:x="5071" fg:w="381"/><text x="18.0841%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.34%)</title><rect x="19.1278%" y="149" width="1.3367%" height="15" fill="rgb(243,120,37)" fg:x="5452" fg:w="381"/><text x="19.4208%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,444 instructions, 22.61%)</title><rect x="1.0209%" y="165" width="22.6081%" height="15" fill="rgb(234,101,30)" fg:x="291" fg:w="6444"/><text x="1.3139%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.18%)</title><rect x="23.6291%" y="165" width="1.1788%" height="15" fill="rgb(247,188,29)" fg:x="6735" fg:w="336"/><text x="23.9221%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="24.8079%" y="133" width="0.0175%" height="15" fill="rgb(209,43,23)" fg:x="7071" fg:w="5"/><text x="25.1009%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.14%)</title><rect x="24.8079%" y="149" width="0.1368%" height="15" fill="rgb(246,109,40)" fg:x="7071" fg:w="39"/><text x="25.1009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="24.9447%" y="149" width="0.2877%" height="15" fill="rgb(250,51,46)" fg:x="7110" fg:w="82"/><text x="25.2377%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="25.2324%" y="133" width="0.0175%" height="15" fill="rgb(237,137,32)" fg:x="7192" fg:w="5"/><text x="25.5254%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="25.2500%" y="117" width="0.1859%" height="15" fill="rgb(216,125,20)" fg:x="7197" fg:w="53"/><text x="25.5429%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.31%)</title><rect x="25.4359%" y="117" width="0.3122%" height="15" fill="rgb(209,199,10)" fg:x="7250" fg:w="89"/><text x="25.7289%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.56%)</title><rect x="25.7482%" y="117" width="0.5649%" height="15" fill="rgb(235,74,4)" fg:x="7339" fg:w="161"/><text x="26.0411%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.89%)</title><rect x="25.2500%" y="133" width="1.8945%" height="15" fill="rgb(221,201,35)" fg:x="7197" fg:w="540"/><text x="25.5429%" y="143.50"></text></g><g><title>candid::types::internal::env_add (759 instructions, 2.66%)</title><rect x="25.2324%" y="149" width="2.6629%" height="15" fill="rgb(232,133,19)" fg:x="7192" fg:w="759"/><text x="25.5254%" y="159.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="27.8953%" y="149" width="0.2877%" height="15" fill="rgb(212,166,10)" fg:x="7951" fg:w="82"/><text x="28.1883%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="28.1830%" y="133" width="0.0175%" height="15" fill="rgb(216,175,41)" fg:x="8033" fg:w="5"/><text x="28.4760%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="28.2005%" y="117" width="0.1859%" height="15" fill="rgb(225,21,5)" fg:x="8038" fg:w="53"/><text x="28.4935%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.31%)</title><rect x="28.3865%" y="117" width="0.3122%" height="15" fill="rgb(235,104,3)" fg:x="8091" fg:w="89"/><text x="28.6795%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.56%)</title><rect x="28.6987%" y="117" width="0.5649%" height="15" fill="rgb(230,184,45)" fg:x="8180" fg:w="161"/><text x="28.9917%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.89%)</title><rect x="28.2005%" y="133" width="1.8945%" height="15" fill="rgb(233,21,46)" fg:x="8038" fg:w="540"/><text x="28.4935%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.24%)</title><rect x="30.0951%" y="133" width="0.2386%" height="15" fill="rgb(221,55,17)" fg:x="8578" fg:w="68"/><text x="30.3880%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="30.3336%" y="117" width="0.2842%" height="15" fill="rgb(239,130,24)" fg:x="8646" fg:w="81"/><text x="30.6266%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.39%)</title><rect x="30.3336%" y="133" width="0.3894%" height="15" fill="rgb(238,30,35)" fg:x="8646" fg:w="111"/><text x="30.6266%" y="143.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 3.13%)</title><rect x="28.1830%" y="149" width="3.1330%" height="15" fill="rgb(221,55,0)" fg:x="8033" fg:w="893"/><text x="28.4760%" y="159.50">ca..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.19%)</title><rect x="31.3160%" y="101" width="0.1859%" height="15" fill="rgb(225,226,5)" fg:x="8926" fg:w="53"/><text x="31.6090%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.28%)</title><rect x="31.3160%" y="117" width="0.2772%" height="15" fill="rgb(209,86,10)" fg:x="8926" fg:w="79"/><text x="31.6090%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.02%)</title><rect x="31.3160%" y="133" width="1.0245%" height="15" fill="rgb(205,133,0)" fg:x="8926" fg:w="292"/><text x="31.6090%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.258 (15 instructions, 0.05%)</title><rect x="32.3405%" y="133" width="0.0526%" height="15" fill="rgb(235,41,36)" fg:x="9218" fg:w="15"/><text x="32.6334%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="32.3931%" y="133" width="0.0386%" height="15" fill="rgb(216,103,31)" fg:x="9233" fg:w="11"/><text x="32.6861%" y="143.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 1.68%)</title><rect x="31.3160%" y="149" width="1.6805%" height="15" fill="rgb(206,117,52)" fg:x="8926" fg:w="479"/><text x="31.6090%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,441 instructions, 8.56%)</title><rect x="24.8079%" y="165" width="8.5640%" height="15" fill="rgb(231,55,2)" fg:x="7071" fg:w="2441"/><text x="25.1009%" y="175.50">candid::ty..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.12%)</title><rect x="33.3719%" y="149" width="0.1158%" height="15" fill="rgb(234,157,41)" fg:x="9512" fg:w="33"/><text x="33.6649%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.44%)</title><rect x="33.4877%" y="133" width="0.4350%" height="15" fill="rgb(240,32,45)" fg:x="9545" fg:w="124"/><text x="33.7807%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.44%)</title><rect x="34.0280%" y="133" width="0.4350%" height="15" fill="rgb(237,29,43)" fg:x="9699" fg:w="124"/><text x="34.3210%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 1.08%)</title><rect x="33.4877%" y="149" width="1.0806%" height="15" fill="rgb(219,187,27)" fg:x="9545" fg:w="308"/><text x="33.7807%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2060 (16 instructions, 0.06%)</title><rect x="34.5683%" y="133" width="0.0561%" height="15" fill="rgb(232,184,20)" fg:x="9853" fg:w="16"/><text x="34.8613%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2060 (16 instructions, 0.06%)</title><rect x="34.6244%" y="133" width="0.0561%" height="15" fill="rgb(206,148,45)" fg:x="9869" fg:w="16"/><text x="34.9174%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (121 instructions, 0.42%)</title><rect x="34.5683%" y="149" width="0.4245%" height="15" fill="rgb(212,1,38)" fg:x="9853" fg:w="121"/><text x="34.8613%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="34.9928%" y="149" width="0.0386%" height="15" fill="rgb(225,185,0)" fg:x="9974" fg:w="11"/><text x="35.2858%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="35.0314%" y="149" width="0.0386%" height="15" fill="rgb(245,1,20)" fg:x="9985" fg:w="11"/><text x="35.3244%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="35.0700%" y="149" width="0.0386%" height="15" fill="rgb(228,140,24)" fg:x="9996" fg:w="11"/><text x="35.3630%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (663 instructions, 2.33%)</title><rect x="33.3719%" y="165" width="2.3261%" height="15" fill="rgb(237,162,39)" fg:x="9512" fg:w="663"/><text x="33.6649%" y="175.50">c..</text></g><g><title>memcpy (411 instructions, 1.44%)</title><rect x="35.6980%" y="165" width="1.4420%" height="15" fill="rgb(244,150,48)" fg:x="10175" fg:w="411"/><text x="35.9910%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="37.1400%" y="149" width="0.0175%" height="15" fill="rgb(205,15,25)" fg:x="10586" fg:w="5"/><text x="37.4329%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (170 instructions, 0.60%)</title><rect x="37.1575%" y="149" width="0.5964%" height="15" fill="rgb(227,150,35)" fg:x="10591" fg:w="170"/><text x="37.4505%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.22%)</title><rect x="37.7539%" y="117" width="0.2210%" height="15" fill="rgb(229,143,43)" fg:x="10761" fg:w="63"/><text x="38.0469%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (211 instructions, 0.74%)</title><rect x="37.7539%" y="133" width="0.7403%" height="15" fill="rgb(240,196,54)" fg:x="10761" fg:w="211"/><text x="38.0469%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (241 instructions, 0.85%)</title><rect x="37.7539%" y="149" width="0.8455%" height="15" fill="rgb(253,45,1)" fg:x="10761" fg:w="241"/><text x="38.0469%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="38.5994%" y="149" width="0.0386%" height="15" fill="rgb(236,7,21)" fg:x="11002" fg:w="11"/><text x="38.8924%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (494 instructions, 1.73%)</title><rect x="37.1400%" y="165" width="1.7332%" height="15" fill="rgb(212,9,35)" fg:x="10586" fg:w="494"/><text x="37.4329%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.22%)</title><rect x="38.8731%" y="149" width="0.2210%" height="15" fill="rgb(250,224,43)" fg:x="11080" fg:w="63"/><text x="39.1661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.69%)</title><rect x="38.8731%" y="165" width="0.6912%" height="15" fill="rgb(247,120,39)" fg:x="11080" fg:w="197"/><text x="39.1661%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,224 instructions, 39.38%)</title><rect x="0.7333%" y="181" width="39.3783%" height="15" fill="rgb(222,21,15)" fg:x="209" fg:w="11224"/><text x="1.0262%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.07%)</title><rect x="40.1116%" y="181" width="0.0702%" height="15" fill="rgb(236,24,51)" fg:x="11433" fg:w="20"/><text x="40.4045%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="40.1817%" y="181" width="1.0701%" height="15" fill="rgb(247,98,52)" fg:x="11453" fg:w="305"/><text x="40.4747%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="41.2518%" y="181" width="0.9648%" height="15" fill="rgb(210,114,54)" fg:x="11758" fg:w="275"/><text x="41.5448%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="42.2166%" y="181" width="0.9648%" height="15" fill="rgb(210,4,30)" fg:x="12033" fg:w="275"/><text x="42.5096%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="43.1814%" y="181" width="1.0701%" height="15" fill="rgb(218,42,39)" fg:x="12308" fg:w="305"/><text x="43.4744%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="44.2515%" y="181" width="1.0701%" height="15" fill="rgb(233,142,48)" fg:x="12613" fg:w="305"/><text x="44.5445%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="45.3215%" y="181" width="0.9648%" height="15" fill="rgb(220,151,11)" fg:x="12918" fg:w="275"/><text x="45.6145%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="46.2864%" y="181" width="0.9648%" height="15" fill="rgb(242,117,4)" fg:x="13193" fg:w="275"/><text x="46.5793%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="47.2512%" y="181" width="0.9648%" height="15" fill="rgb(216,11,48)" fg:x="13468" fg:w="275"/><text x="47.5441%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="48.2160%" y="181" width="1.0701%" height="15" fill="rgb(243,221,39)" fg:x="13743" fg:w="305"/><text x="48.5089%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="49.2860%" y="181" width="1.0701%" height="15" fill="rgb(212,225,28)" fg:x="14048" fg:w="305"/><text x="49.5790%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="50.3561%" y="181" width="0.9648%" height="15" fill="rgb(245,142,19)" fg:x="14353" fg:w="275"/><text x="50.6491%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="51.3209%" y="181" width="0.9648%" height="15" fill="rgb(239,155,12)" fg:x="14628" fg:w="275"/><text x="51.6139%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="52.2857%" y="181" width="1.0701%" height="15" fill="rgb(249,130,32)" fg:x="14903" fg:w="305"/><text x="52.5787%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (316 instructions, 1.11%)</title><rect x="53.3558%" y="181" width="1.1087%" height="15" fill="rgb(252,26,13)" fg:x="15208" fg:w="316"/><text x="53.6488%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="54.4644%" y="181" width="0.9648%" height="15" fill="rgb(243,83,19)" fg:x="15524" fg:w="275"/><text x="54.7574%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="55.4293%" y="181" width="0.9648%" height="15" fill="rgb(221,28,3)" fg:x="15799" fg:w="275"/><text x="55.7222%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="56.3941%" y="181" width="0.9648%" height="15" fill="rgb(224,188,42)" fg:x="16074" fg:w="275"/><text x="56.6870%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="57.3589%" y="181" width="0.9648%" height="15" fill="rgb(236,18,52)" fg:x="16349" fg:w="275"/><text x="57.6518%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="58.3237%" y="181" width="0.9648%" height="15" fill="rgb(222,140,7)" fg:x="16624" fg:w="275"/><text x="58.6167%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="59.2885%" y="181" width="0.9648%" height="15" fill="rgb(245,48,13)" fg:x="16899" fg:w="275"/><text x="59.5815%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="60.2533%" y="181" width="1.0701%" height="15" fill="rgb(250,109,45)" fg:x="17174" fg:w="305"/><text x="60.5463%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="61.3234%" y="181" width="1.0701%" height="15" fill="rgb(207,185,52)" fg:x="17479" fg:w="305"/><text x="61.6163%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (316 instructions, 1.11%)</title><rect x="62.3934%" y="181" width="1.1087%" height="15" fill="rgb(229,87,16)" fg:x="17784" fg:w="316"/><text x="62.6864%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="63.5021%" y="181" width="1.0701%" height="15" fill="rgb(207,5,11)" fg:x="18100" fg:w="305"/><text x="63.7951%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="64.5722%" y="181" width="1.0701%" height="15" fill="rgb(207,80,1)" fg:x="18405" fg:w="305"/><text x="64.8651%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="65.6422%" y="181" width="0.9648%" height="15" fill="rgb(205,45,20)" fg:x="18710" fg:w="275"/><text x="65.9352%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="66.6070%" y="181" width="0.9648%" height="15" fill="rgb(205,191,35)" fg:x="18985" fg:w="275"/><text x="66.9000%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="67.5718%" y="181" width="0.9648%" height="15" fill="rgb(238,201,15)" fg:x="19260" fg:w="275"/><text x="67.8648%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="68.5366%" y="181" width="0.9648%" height="15" fill="rgb(212,24,14)" fg:x="19535" fg:w="275"/><text x="68.8296%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="69.5015%" y="181" width="0.9648%" height="15" fill="rgb(247,88,54)" fg:x="19810" fg:w="275"/><text x="69.7944%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="70.4663%" y="181" width="0.9648%" height="15" fill="rgb(247,45,14)" fg:x="20085" fg:w="275"/><text x="70.7592%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="71.4311%" y="181" width="1.0701%" height="15" fill="rgb(233,6,52)" fg:x="20360" fg:w="305"/><text x="71.7240%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="72.5011%" y="181" width="1.0701%" height="15" fill="rgb(247,206,26)" fg:x="20665" fg:w="305"/><text x="72.7941%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="73.5712%" y="181" width="0.9648%" height="15" fill="rgb(232,11,8)" fg:x="20970" fg:w="275"/><text x="73.8642%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="74.5360%" y="181" width="1.0701%" height="15" fill="rgb(218,100,45)" fg:x="21245" fg:w="305"/><text x="74.8290%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="75.6061%" y="181" width="1.0701%" height="15" fill="rgb(206,67,0)" fg:x="21550" fg:w="305"/><text x="75.8990%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="76.6761%" y="181" width="0.9648%" height="15" fill="rgb(207,182,16)" fg:x="21855" fg:w="275"/><text x="76.9691%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="77.6410%" y="181" width="1.0701%" height="15" fill="rgb(222,109,14)" fg:x="22130" fg:w="305"/><text x="77.9339%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (316 instructions, 1.11%)</title><rect x="78.7110%" y="181" width="1.1087%" height="15" fill="rgb(243,207,28)" fg:x="22435" fg:w="316"/><text x="79.0040%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="79.8197%" y="181" width="0.9648%" height="15" fill="rgb(212,153,38)" fg:x="22751" fg:w="275"/><text x="80.1126%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="80.7845%" y="181" width="0.9648%" height="15" fill="rgb(215,68,20)" fg:x="23026" fg:w="275"/><text x="81.0774%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="81.7493%" y="181" width="0.9648%" height="15" fill="rgb(207,37,13)" fg:x="23301" fg:w="275"/><text x="82.0423%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="82.7141%" y="181" width="0.9648%" height="15" fill="rgb(251,157,10)" fg:x="23576" fg:w="275"/><text x="83.0071%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="83.6789%" y="181" width="0.9648%" height="15" fill="rgb(209,217,20)" fg:x="23851" fg:w="275"/><text x="83.9719%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="84.6437%" y="181" width="1.0701%" height="15" fill="rgb(227,101,27)" fg:x="24126" fg:w="305"/><text x="84.9367%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="85.7138%" y="181" width="0.9648%" height="15" fill="rgb(220,120,10)" fg:x="24431" fg:w="275"/><text x="86.0068%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="86.6786%" y="181" width="0.9648%" height="15" fill="rgb(254,74,35)" fg:x="24706" fg:w="275"/><text x="86.9716%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (316 instructions, 1.11%)</title><rect x="87.6434%" y="181" width="1.1087%" height="15" fill="rgb(225,17,53)" fg:x="24981" fg:w="316"/><text x="87.9364%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (275 instructions, 0.96%)</title><rect x="88.7521%" y="181" width="0.9648%" height="15" fill="rgb(234,84,36)" fg:x="25297" fg:w="275"/><text x="89.0450%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (305 instructions, 1.07%)</title><rect x="89.7169%" y="181" width="1.0701%" height="15" fill="rgb(250,43,5)" fg:x="25572" fg:w="305"/><text x="90.0098%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="90.7869%" y="149" width="0.0175%" height="15" fill="rgb(250,199,37)" fg:x="25877" fg:w="5"/><text x="91.0799%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.47%)</title><rect x="90.8045%" y="133" width="0.4736%" height="15" fill="rgb(246,100,23)" fg:x="25882" fg:w="135"/><text x="91.0974%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.58%)</title><rect x="90.8045%" y="149" width="0.5789%" height="15" fill="rgb(233,14,53)" fg:x="25882" fg:w="165"/><text x="91.0974%" y="159.50"></text></g><g><title>memset (136 instructions, 0.48%)</title><rect x="91.3834%" y="149" width="0.4771%" height="15" fill="rgb(205,95,53)" fg:x="26047" fg:w="136"/><text x="91.6763%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.63%)</title><rect x="90.7869%" y="165" width="1.6279%" height="15" fill="rgb(238,110,48)" fg:x="25877" fg:w="464"/><text x="91.0799%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.11%)</title><rect x="92.4148%" y="149" width="0.1123%" height="15" fill="rgb(205,228,20)" fg:x="26341" fg:w="32"/><text x="92.7078%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.29%)</title><rect x="92.5271%" y="117" width="0.2877%" height="15" fill="rgb(235,24,17)" fg:x="26373" fg:w="82"/><text x="92.8201%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.41%)</title><rect x="92.5271%" y="133" width="0.4105%" height="15" fill="rgb(207,130,46)" fg:x="26373" fg:w="117"/><text x="92.8201%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (186 instructions, 0.65%)</title><rect x="92.5271%" y="149" width="0.6526%" height="15" fill="rgb(221,55,22)" fg:x="26373" fg:w="186"/><text x="92.8201%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="93.1797%" y="149" width="0.0386%" height="15" fill="rgb(218,141,53)" fg:x="26559" fg:w="11"/><text x="93.4726%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="93.2183%" y="149" width="0.0386%" height="15" fill="rgb(213,7,18)" fg:x="26570" fg:w="11"/><text x="93.5112%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.11%)</title><rect x="93.2569%" y="149" width="0.1053%" height="15" fill="rgb(229,76,38)" fg:x="26581" fg:w="30"/><text x="93.5498%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="93.3621%" y="149" width="0.0175%" height="15" fill="rgb(219,126,16)" fg:x="26611" fg:w="5"/><text x="93.6551%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (482 instructions, 1.69%)</title><rect x="92.4148%" y="165" width="1.6911%" height="15" fill="rgb(213,15,43)" fg:x="26341" fg:w="482"/><text x="92.7078%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="94.1059%" y="165" width="0.0175%" height="15" fill="rgb(247,42,15)" fg:x="26823" fg:w="5"/><text x="94.3989%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.20%)</title><rect x="94.1234%" y="165" width="0.2000%" height="15" fill="rgb(219,194,38)" fg:x="26828" fg:w="57"/><text x="94.4164%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,082 instructions, 3.80%)</title><rect x="90.7869%" y="181" width="3.7961%" height="15" fill="rgb(235,117,20)" fg:x="25877" fg:w="1082"/><text x="91.0799%" y="191.50">ic_..</text></g><g><title>imrc_hashmap::batch_get_5_::{{closure}} (27,971 instructions, 98.13%)</title><rect x="0.7333%" y="197" width="98.1335%" height="15" fill="rgb(229,123,27)" fg:x="209" fg:w="27971"/><text x="1.0262%" y="207.50">imrc_hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.04%)</title><rect x="98.8668%" y="197" width="0.0421%" height="15" fill="rgb(209,96,40)" fg:x="28180" fg:w="12"/><text x="99.1598%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.28%)</title><rect x="98.9089%" y="197" width="0.2842%" height="15" fill="rgb(236,211,11)" fg:x="28192" fg:w="81"/><text x="99.2019%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (127 instructions, 0.45%)</title><rect x="99.1931%" y="197" width="0.4456%" height="15" fill="rgb(235,80,4)" fg:x="28273" fg:w="127"/><text x="99.4860%" y="207.50"></text></g><g><title>all (28,503 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,65,54)" fg:x="0" fg:w="28503"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (28,503 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,78,33)" fg:x="0" fg:w="28503"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>