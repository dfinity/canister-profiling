<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="29764"><g><title>ic_cdk::setup (7 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0235%" height="15" fill="rgb(253,49,13)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (136 instructions, 0.46%)</title><rect x="0.0235%" y="165" width="0.4569%" height="15" fill="rgb(220,122,48)" fg:x="7" fg:w="136"/><text x="0.3165%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (146 instructions, 0.49%)</title><rect x="0.0235%" y="181" width="0.4905%" height="15" fill="rgb(253,11,35)" fg:x="7" fg:w="146"/><text x="0.3165%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.30%)</title><rect x="0.5241%" y="165" width="0.2990%" height="15" fill="rgb(205,85,45)" fg:x="156" fg:w="89"/><text x="0.8171%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.33%)</title><rect x="0.5241%" y="181" width="0.3326%" height="15" fill="rgb(238,43,51)" fg:x="156" fg:w="99"/><text x="0.8171%" y="191.50"></text></g><g><title>__rust_alloc (251 instructions, 0.84%)</title><rect x="0.0235%" y="197" width="0.8433%" height="15" fill="rgb(215,164,33)" fg:x="7" fg:w="251"/><text x="0.3165%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="0.8668%" y="133" width="0.3125%" height="15" fill="rgb(210,9,50)" fg:x="258" fg:w="93"/><text x="1.1598%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="0.8668%" y="149" width="0.3461%" height="15" fill="rgb(251,31,32)" fg:x="258" fg:w="103"/><text x="1.1598%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="0.8668%" y="165" width="0.3561%" height="15" fill="rgb(206,178,17)" fg:x="258" fg:w="106"/><text x="1.1598%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (165 instructions, 0.55%)</title><rect x="0.8668%" y="181" width="0.5544%" height="15" fill="rgb(214,201,36)" fg:x="258" fg:w="165"/><text x="1.1598%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.20%)</title><rect x="1.4212%" y="165" width="0.2049%" height="15" fill="rgb(225,136,7)" fg:x="423" fg:w="61"/><text x="1.7141%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.6261%" y="149" width="0.0134%" height="15" fill="rgb(221,40,21)" fg:x="484" fg:w="4"/><text x="1.9191%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.37%)</title><rect x="1.6261%" y="165" width="1.3674%" height="15" fill="rgb(230,167,10)" fg:x="484" fg:w="407"/><text x="1.9191%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.25%)</title><rect x="2.9935%" y="165" width="0.2486%" height="15" fill="rgb(239,107,44)" fg:x="891" fg:w="74"/><text x="3.2865%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.18%)</title><rect x="3.2422%" y="165" width="0.1814%" height="15" fill="rgb(218,212,52)" fg:x="965" fg:w="54"/><text x="3.5351%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.18%)</title><rect x="3.4236%" y="165" width="0.1814%" height="15" fill="rgb(229,68,51)" fg:x="1019" fg:w="54"/><text x="3.7166%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.18%)</title><rect x="3.6050%" y="165" width="0.1814%" height="15" fill="rgb(222,48,6)" fg:x="1073" fg:w="54"/><text x="3.8980%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.18%)</title><rect x="3.7865%" y="165" width="0.1814%" height="15" fill="rgb(245,84,47)" fg:x="1127" fg:w="54"/><text x="4.0794%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.20%)</title><rect x="3.9679%" y="165" width="0.2049%" height="15" fill="rgb(240,160,4)" fg:x="1181" fg:w="61"/><text x="4.2608%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.33%)</title><rect x="4.1728%" y="165" width="0.3259%" height="15" fill="rgb(235,159,27)" fg:x="1242" fg:w="97"/><text x="4.4658%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="4.4987%" y="149" width="0.0134%" height="15" fill="rgb(239,156,9)" fg:x="1339" fg:w="4"/><text x="4.7917%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.37%)</title><rect x="4.4987%" y="165" width="1.3674%" height="15" fill="rgb(211,108,29)" fg:x="1339" fg:w="407"/><text x="4.7917%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="5.8661%" y="165" width="0.0538%" height="15" fill="rgb(229,10,9)" fg:x="1746" fg:w="16"/><text x="6.1591%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="5.9199%" y="101" width="0.3125%" height="15" fill="rgb(223,24,23)" fg:x="1762" fg:w="93"/><text x="6.2129%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="5.9199%" y="117" width="0.3461%" height="15" fill="rgb(217,215,19)" fg:x="1762" fg:w="103"/><text x="6.2129%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="5.9199%" y="133" width="0.3561%" height="15" fill="rgb(247,209,44)" fg:x="1762" fg:w="106"/><text x="6.2129%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.20%)</title><rect x="6.2760%" y="101" width="0.2016%" height="15" fill="rgb(245,151,35)" fg:x="1868" fg:w="60"/><text x="6.5690%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.29%)</title><rect x="6.2760%" y="117" width="0.2856%" height="15" fill="rgb(213,75,41)" fg:x="1868" fg:w="85"/><text x="6.5690%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="6.5616%" y="69" width="0.0302%" height="15" fill="rgb(216,116,54)" fg:x="1953" fg:w="9"/><text x="6.8546%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.10%)</title><rect x="6.5919%" y="53" width="0.1008%" height="15" fill="rgb(226,108,33)" fg:x="1962" fg:w="30"/><text x="6.8848%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.18%)</title><rect x="6.5919%" y="69" width="0.1848%" height="15" fill="rgb(227,35,11)" fg:x="1962" fg:w="55"/><text x="6.8848%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.39%)</title><rect x="6.5616%" y="85" width="0.3897%" height="15" fill="rgb(248,205,11)" fg:x="1953" fg:w="116"/><text x="6.8546%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.57%)</title><rect x="6.5616%" y="101" width="0.5678%" height="15" fill="rgb(241,228,38)" fg:x="1953" fg:w="169"/><text x="6.8546%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.58%)</title><rect x="6.5616%" y="117" width="0.5846%" height="15" fill="rgb(205,89,41)" fg:x="1953" fg:w="174"/><text x="6.8546%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 1.23%)</title><rect x="6.2760%" y="133" width="1.2330%" height="15" fill="rgb(212,208,53)" fg:x="1868" fg:w="367"/><text x="6.5690%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (616 instructions, 2.07%)</title><rect x="5.9199%" y="149" width="2.0696%" height="15" fill="rgb(227,213,34)" fg:x="1762" fg:w="616"/><text x="6.2129%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.25%)</title><rect x="7.9895%" y="149" width="0.2486%" height="15" fill="rgb(213,57,0)" fg:x="2378" fg:w="74"/><text x="8.2825%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.18%)</title><rect x="8.2381%" y="149" width="0.1848%" height="15" fill="rgb(214,64,1)" fg:x="2452" fg:w="55"/><text x="8.5311%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (816 instructions, 2.74%)</title><rect x="5.9199%" y="165" width="2.7416%" height="15" fill="rgb(217,36,44)" fg:x="1762" fg:w="816"/><text x="6.2129%" y="175.50">b..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.19%)</title><rect x="8.6615%" y="165" width="0.1881%" height="15" fill="rgb(229,114,31)" fg:x="2578" fg:w="56"/><text x="8.9544%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.33%)</title><rect x="8.8496%" y="165" width="0.3259%" height="15" fill="rgb(210,93,23)" fg:x="2634" fg:w="97"/><text x="9.1426%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="9.1755%" y="133" width="0.0134%" height="15" fill="rgb(227,118,49)" fg:x="2731" fg:w="4"/><text x="9.4685%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.37%)</title><rect x="9.1755%" y="149" width="1.3674%" height="15" fill="rgb(208,115,45)" fg:x="2731" fg:w="407"/><text x="9.4685%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.05%)</title><rect x="10.5429%" y="149" width="0.0538%" height="15" fill="rgb(240,184,34)" fg:x="3138" fg:w="16"/><text x="10.8359%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="10.5967%" y="85" width="0.3125%" height="15" fill="rgb(207,93,43)" fg:x="3154" fg:w="93"/><text x="10.8897%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="10.5967%" y="101" width="0.3461%" height="15" fill="rgb(247,219,36)" fg:x="3154" fg:w="103"/><text x="10.8897%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="10.5967%" y="117" width="0.3561%" height="15" fill="rgb(218,119,17)" fg:x="3154" fg:w="106"/><text x="10.8897%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.20%)</title><rect x="10.9528%" y="85" width="0.2016%" height="15" fill="rgb(224,38,7)" fg:x="3260" fg:w="60"/><text x="11.2458%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.29%)</title><rect x="10.9528%" y="101" width="0.2856%" height="15" fill="rgb(246,183,49)" fg:x="3260" fg:w="85"/><text x="11.2458%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.03%)</title><rect x="11.2384%" y="53" width="0.0302%" height="15" fill="rgb(205,192,53)" fg:x="3345" fg:w="9"/><text x="11.5314%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.10%)</title><rect x="11.2686%" y="37" width="0.1008%" height="15" fill="rgb(249,13,17)" fg:x="3354" fg:w="30"/><text x="11.5616%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.18%)</title><rect x="11.2686%" y="53" width="0.1848%" height="15" fill="rgb(216,76,25)" fg:x="3354" fg:w="55"/><text x="11.5616%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.39%)</title><rect x="11.2384%" y="69" width="0.3897%" height="15" fill="rgb(251,97,18)" fg:x="3345" fg:w="116"/><text x="11.5314%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.57%)</title><rect x="11.2384%" y="85" width="0.5678%" height="15" fill="rgb(243,214,4)" fg:x="3345" fg:w="169"/><text x="11.5314%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.58%)</title><rect x="11.2384%" y="101" width="0.5846%" height="15" fill="rgb(208,203,46)" fg:x="3345" fg:w="174"/><text x="11.5314%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 1.23%)</title><rect x="10.9528%" y="117" width="1.2330%" height="15" fill="rgb(247,195,34)" fg:x="3260" fg:w="367"/><text x="11.2458%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (616 instructions, 2.07%)</title><rect x="10.5967%" y="133" width="2.0696%" height="15" fill="rgb(227,171,52)" fg:x="3154" fg:w="616"/><text x="10.8897%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.25%)</title><rect x="12.6663%" y="133" width="0.2486%" height="15" fill="rgb(230,1,40)" fg:x="3770" fg:w="74"/><text x="12.9593%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.18%)</title><rect x="12.9149%" y="133" width="0.1848%" height="15" fill="rgb(237,139,24)" fg:x="3844" fg:w="55"/><text x="13.2079%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (816 instructions, 2.74%)</title><rect x="10.5967%" y="149" width="2.7416%" height="15" fill="rgb(233,170,12)" fg:x="3154" fg:w="816"/><text x="10.8897%" y="159.50">b..</text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.20%)</title><rect x="13.3383%" y="133" width="0.2049%" height="15" fill="rgb(217,68,11)" fg:x="3970" fg:w="61"/><text x="13.6312%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.42%)</title><rect x="13.5432%" y="133" width="0.4233%" height="15" fill="rgb(219,156,1)" fg:x="4031" fg:w="126"/><text x="13.8362%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.19%)</title><rect x="13.9665%" y="133" width="0.1881%" height="15" fill="rgb(232,169,32)" fg:x="4157" fg:w="56"/><text x="14.2595%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 1.02%)</title><rect x="13.3383%" y="149" width="1.0247%" height="15" fill="rgb(206,158,21)" fg:x="3970" fg:w="305"/><text x="13.6312%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="14.3630%" y="117" width="0.3125%" height="15" fill="rgb(207,202,6)" fg:x="4275" fg:w="93"/><text x="14.6560%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="14.3630%" y="133" width="0.3461%" height="15" fill="rgb(247,27,50)" fg:x="4275" fg:w="103"/><text x="14.6560%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="14.3630%" y="149" width="0.3561%" height="15" fill="rgb(210,226,29)" fg:x="4275" fg:w="106"/><text x="14.6560%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,875 instructions, 6.30%)</title><rect x="9.1755%" y="165" width="6.2996%" height="15" fill="rgb(228,190,32)" fg:x="2731" fg:w="1875"/><text x="9.4685%" y="175.50">binread..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.19%)</title><rect x="15.4751%" y="165" width="0.1881%" height="15" fill="rgb(205,221,6)" fg:x="4606" fg:w="56"/><text x="15.7680%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="15.6632%" y="165" width="0.0437%" height="15" fill="rgb(245,193,36)" fg:x="4662" fg:w="13"/><text x="15.9562%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="15.7069%" y="165" width="0.0437%" height="15" fill="rgb(234,70,30)" fg:x="4675" fg:w="13"/><text x="15.9999%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.07%)</title><rect x="15.7506%" y="165" width="0.0739%" height="15" fill="rgb(216,71,44)" fg:x="4688" fg:w="22"/><text x="16.0435%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="15.8245%" y="117" width="0.3125%" height="15" fill="rgb(212,15,3)" fg:x="4710" fg:w="93"/><text x="16.1175%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="15.8245%" y="133" width="0.3461%" height="15" fill="rgb(241,76,22)" fg:x="4710" fg:w="103"/><text x="16.1175%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="15.8245%" y="149" width="0.3561%" height="15" fill="rgb(215,188,33)" fg:x="4710" fg:w="106"/><text x="16.1175%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (186 instructions, 0.62%)</title><rect x="15.8245%" y="165" width="0.6249%" height="15" fill="rgb(210,45,20)" fg:x="4710" fg:w="186"/><text x="16.1175%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="16.4494%" y="101" width="0.3125%" height="15" fill="rgb(218,133,52)" fg:x="4896" fg:w="93"/><text x="16.7424%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="16.4494%" y="117" width="0.3461%" height="15" fill="rgb(221,19,18)" fg:x="4896" fg:w="103"/><text x="16.7424%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="16.4494%" y="133" width="0.3561%" height="15" fill="rgb(246,174,14)" fg:x="4896" fg:w="106"/><text x="16.7424%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (136 instructions, 0.46%)</title><rect x="16.4494%" y="149" width="0.4569%" height="15" fill="rgb(241,224,25)" fg:x="4896" fg:w="136"/><text x="16.7424%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (204 instructions, 0.69%)</title><rect x="16.4494%" y="165" width="0.6854%" height="15" fill="rgb(250,125,6)" fg:x="4896" fg:w="204"/><text x="16.7424%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="17.1348%" y="133" width="0.3125%" height="15" fill="rgb(247,151,54)" fg:x="5100" fg:w="93"/><text x="17.4278%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="17.1348%" y="149" width="0.3461%" height="15" fill="rgb(206,175,9)" fg:x="5100" fg:w="103"/><text x="17.4278%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="17.1348%" y="165" width="0.3561%" height="15" fill="rgb(206,73,17)" fg:x="5100" fg:w="106"/><text x="17.4278%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.27%)</title><rect x="17.4909%" y="165" width="0.2721%" height="15" fill="rgb(251,108,1)" fg:x="5206" fg:w="81"/><text x="17.7839%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="17.7631%" y="133" width="0.3125%" height="15" fill="rgb(219,40,24)" fg:x="5287" fg:w="93"/><text x="18.0560%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="17.7631%" y="149" width="0.3461%" height="15" fill="rgb(223,89,6)" fg:x="5287" fg:w="103"/><text x="18.0560%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="18.1192%" y="133" width="0.3125%" height="15" fill="rgb(211,180,9)" fg:x="5393" fg:w="93"/><text x="18.4122%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="18.1192%" y="149" width="0.3461%" height="15" fill="rgb(222,136,14)" fg:x="5393" fg:w="103"/><text x="18.4122%" y="159.50"></text></g><g><title>__rust_alloc (212 instructions, 0.71%)</title><rect x="17.7631%" y="165" width="0.7123%" height="15" fill="rgb(227,123,48)" fg:x="5287" fg:w="212"/><text x="18.0560%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.05%)</title><rect x="18.4753%" y="165" width="0.0470%" height="15" fill="rgb(239,157,54)" fg:x="5499" fg:w="14"/><text x="18.7683%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.27%)</title><rect x="18.5224%" y="165" width="0.2721%" height="15" fill="rgb(249,78,22)" fg:x="5513" fg:w="81"/><text x="18.8153%" y="175.50"></text></g><g><title>memcpy (411 instructions, 1.38%)</title><rect x="18.7945%" y="165" width="1.3809%" height="15" fill="rgb(241,17,23)" fg:x="5594" fg:w="411"/><text x="19.0875%" y="175.50"></text></g><g><title>memcpy (366 instructions, 1.23%)</title><rect x="20.1754%" y="165" width="1.2297%" height="15" fill="rgb(235,30,9)" fg:x="6005" fg:w="366"/><text x="20.4683%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,263 instructions, 24.40%)</title><rect x="1.4212%" y="181" width="24.4020%" height="15" fill="rgb(231,82,9)" fg:x="423" fg:w="7263"/><text x="1.7141%" y="191.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (321 instructions, 1.08%)</title><rect x="25.8231%" y="181" width="1.0785%" height="15" fill="rgb(231,114,3)" fg:x="7686" fg:w="321"/><text x="26.1161%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.02%)</title><rect x="26.9016%" y="149" width="0.0202%" height="15" fill="rgb(248,53,4)" fg:x="8007" fg:w="6"/><text x="27.1946%" y="159.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.15%)</title><rect x="26.9016%" y="165" width="0.1512%" height="15" fill="rgb(239,71,2)" fg:x="8007" fg:w="45"/><text x="27.1946%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="27.0528%" y="117" width="0.3125%" height="15" fill="rgb(254,175,48)" fg:x="8052" fg:w="93"/><text x="27.3458%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="27.0528%" y="133" width="0.3461%" height="15" fill="rgb(242,10,52)" fg:x="8052" fg:w="103"/><text x="27.3458%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="27.0528%" y="149" width="0.3561%" height="15" fill="rgb(208,157,12)" fg:x="8052" fg:w="106"/><text x="27.3458%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (152 instructions, 0.51%)</title><rect x="27.0528%" y="165" width="0.5107%" height="15" fill="rgb(224,22,22)" fg:x="8052" fg:w="152"/><text x="27.3458%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="27.5635%" y="133" width="0.0168%" height="15" fill="rgb(215,224,30)" fg:x="8204" fg:w="5"/><text x="27.8565%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.18%)</title><rect x="27.5803%" y="117" width="0.1781%" height="15" fill="rgb(226,162,26)" fg:x="8209" fg:w="53"/><text x="27.8733%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.30%)</title><rect x="27.7584%" y="117" width="0.2990%" height="15" fill="rgb(208,34,38)" fg:x="8262" fg:w="89"/><text x="28.0513%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.54%)</title><rect x="28.0574%" y="117" width="0.5409%" height="15" fill="rgb(233,84,19)" fg:x="8351" fg:w="161"/><text x="28.3504%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.83%)</title><rect x="27.5803%" y="133" width="1.8344%" height="15" fill="rgb(208,24,37)" fg:x="8209" fg:w="546"/><text x="27.8733%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 2.67%)</title><rect x="27.5635%" y="149" width="2.6744%" height="15" fill="rgb(241,115,25)" fg:x="8204" fg:w="796"/><text x="27.8565%" y="159.50">s..</text></g><g><title>candid::types::internal::env_add (822 instructions, 2.76%)</title><rect x="27.5635%" y="165" width="2.7617%" height="15" fill="rgb(209,203,37)" fg:x="8204" fg:w="822"/><text x="27.8565%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="30.3252%" y="133" width="0.3125%" height="15" fill="rgb(234,217,10)" fg:x="9026" fg:w="93"/><text x="30.6182%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="30.3252%" y="149" width="0.3461%" height="15" fill="rgb(208,81,51)" fg:x="9026" fg:w="103"/><text x="30.6182%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="30.3252%" y="165" width="0.3561%" height="15" fill="rgb(206,222,49)" fg:x="9026" fg:w="106"/><text x="30.6182%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="30.6814%" y="133" width="0.0168%" height="15" fill="rgb(240,5,1)" fg:x="9132" fg:w="5"/><text x="30.9743%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.18%)</title><rect x="30.6982%" y="117" width="0.1781%" height="15" fill="rgb(213,177,46)" fg:x="9137" fg:w="53"/><text x="30.9911%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.30%)</title><rect x="30.8762%" y="117" width="0.2990%" height="15" fill="rgb(206,206,17)" fg:x="9190" fg:w="89"/><text x="31.1692%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.54%)</title><rect x="31.1752%" y="117" width="0.5409%" height="15" fill="rgb(248,70,12)" fg:x="9279" fg:w="161"/><text x="31.4682%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.83%)</title><rect x="30.6982%" y="133" width="1.8344%" height="15" fill="rgb(242,107,3)" fg:x="9137" fg:w="546"/><text x="30.9911%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.23%)</title><rect x="32.5326%" y="133" width="0.2285%" height="15" fill="rgb(239,128,24)" fg:x="9683" fg:w="68"/><text x="32.8256%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.27%)</title><rect x="32.7611%" y="117" width="0.2721%" height="15" fill="rgb(236,31,33)" fg:x="9751" fg:w="81"/><text x="33.0540%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.37%)</title><rect x="32.7611%" y="133" width="0.3729%" height="15" fill="rgb(213,109,33)" fg:x="9751" fg:w="111"/><text x="33.0540%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 3.04%)</title><rect x="30.6814%" y="149" width="3.0372%" height="15" fill="rgb(215,132,27)" fg:x="9132" fg:w="904"/><text x="30.9743%" y="159.50">st..</text></g><g><title>candid::types::internal::env_add (930 instructions, 3.12%)</title><rect x="30.6814%" y="165" width="3.1246%" height="15" fill="rgb(208,191,37)" fg:x="9132" fg:w="930"/><text x="30.9743%" y="175.50">ca..</text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.02%)</title><rect x="33.8059%" y="133" width="0.0168%" height="15" fill="rgb(220,8,38)" fg:x="10062" fg:w="5"/><text x="34.0989%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.18%)</title><rect x="33.8227%" y="101" width="0.1781%" height="15" fill="rgb(230,41,17)" fg:x="10067" fg:w="53"/><text x="34.1157%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.26%)</title><rect x="33.8227%" y="117" width="0.2621%" height="15" fill="rgb(248,218,40)" fg:x="10067" fg:w="78"/><text x="34.1157%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 1.01%)</title><rect x="33.8227%" y="133" width="1.0079%" height="15" fill="rgb(214,41,20)" fg:x="10067" fg:w="300"/><text x="34.1157%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.09%)</title><rect x="34.8307%" y="133" width="0.0907%" height="15" fill="rgb(229,93,11)" fg:x="10367" fg:w="27"/><text x="35.1236%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="34.9214%" y="133" width="0.0370%" height="15" fill="rgb(227,20,9)" fg:x="10394" fg:w="11"/><text x="35.2144%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 1.73%)</title><rect x="33.8059%" y="149" width="1.7303%" height="15" fill="rgb(213,126,43)" fg:x="10062" fg:w="515"/><text x="34.0989%" y="159.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 1.85%)</title><rect x="33.8059%" y="165" width="1.8546%" height="15" fill="rgb(243,21,38)" fg:x="10062" fg:w="552"/><text x="34.0989%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.12%)</title><rect x="35.6605%" y="165" width="0.1243%" height="15" fill="rgb(252,139,46)" fg:x="10614" fg:w="37"/><text x="35.9535%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.41%)</title><rect x="35.7848%" y="149" width="0.4133%" height="15" fill="rgb(210,85,21)" fg:x="10651" fg:w="123"/><text x="36.0778%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.41%)</title><rect x="36.2989%" y="149" width="0.4133%" height="15" fill="rgb(242,23,39)" fg:x="10804" fg:w="123"/><text x="36.5919%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 1.03%)</title><rect x="35.7848%" y="165" width="1.0281%" height="15" fill="rgb(226,6,23)" fg:x="10651" fg:w="306"/><text x="36.0778%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.09%)</title><rect x="36.8129%" y="149" width="0.0941%" height="15" fill="rgb(240,130,14)" fg:x="10957" fg:w="28"/><text x="37.1059%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.05%)</title><rect x="36.9070%" y="149" width="0.0538%" height="15" fill="rgb(251,221,11)" fg:x="10985" fg:w="16"/><text x="37.2000%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.05%)</title><rect x="36.9608%" y="149" width="0.0538%" height="15" fill="rgb(239,108,19)" fg:x="11001" fg:w="16"/><text x="37.2537%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (141 instructions, 0.47%)</title><rect x="36.8129%" y="165" width="0.4737%" height="15" fill="rgb(214,129,3)" fg:x="10957" fg:w="141"/><text x="37.1059%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="37.2867%" y="165" width="0.0370%" height="15" fill="rgb(243,221,35)" fg:x="11098" fg:w="11"/><text x="37.5796%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="37.3236%" y="165" width="0.0370%" height="15" fill="rgb(230,217,17)" fg:x="11109" fg:w="11"/><text x="37.6166%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="37.3606%" y="165" width="0.0370%" height="15" fill="rgb(221,190,24)" fg:x="11120" fg:w="11"/><text x="37.6535%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,402 instructions, 11.43%)</title><rect x="26.9016%" y="181" width="11.4299%" height="15" fill="rgb(210,97,51)" fg:x="8007" fg:w="3402"/><text x="27.1946%" y="191.50">candid::de::ID..</text></g><g><title>memcpy (411 instructions, 1.38%)</title><rect x="38.3315%" y="181" width="1.3809%" height="15" fill="rgb(239,90,6)" fg:x="11409" fg:w="411"/><text x="38.6245%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.07%)</title><rect x="39.7124%" y="165" width="0.0739%" height="15" fill="rgb(212,91,4)" fg:x="11820" fg:w="22"/><text x="40.0054%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.57%)</title><rect x="39.7863%" y="165" width="0.5678%" height="15" fill="rgb(208,154,23)" fg:x="11842" fg:w="169"/><text x="40.0793%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.24%)</title><rect x="40.3541%" y="133" width="0.2385%" height="15" fill="rgb(209,87,21)" fg:x="12011" fg:w="71"/><text x="40.6471%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 0.73%)</title><rect x="40.3541%" y="149" width="0.7257%" height="15" fill="rgb(247,31,6)" fg:x="12011" fg:w="216"/><text x="40.6471%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 0.83%)</title><rect x="40.3541%" y="165" width="0.8265%" height="15" fill="rgb(254,24,35)" fg:x="12011" fg:w="246"/><text x="40.6471%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="41.1806%" y="165" width="0.0370%" height="15" fill="rgb(235,91,0)" fg:x="12257" fg:w="11"/><text x="41.4736%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="41.2176%" y="165" width="0.0168%" height="15" fill="rgb(226,169,14)" fg:x="12268" fg:w="5"/><text x="41.5105%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (547 instructions, 1.84%)</title><rect x="39.7124%" y="181" width="1.8378%" height="15" fill="rgb(232,67,20)" fg:x="11820" fg:w="547"/><text x="40.0054%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.18%)</title><rect x="41.5502%" y="165" width="0.1814%" height="15" fill="rgb(216,17,3)" fg:x="12367" fg:w="54"/><text x="41.8432%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.24%)</title><rect x="41.7316%" y="165" width="0.2385%" height="15" fill="rgb(243,126,47)" fg:x="12421" fg:w="71"/><text x="42.0246%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.69%)</title><rect x="41.5502%" y="181" width="0.6888%" height="15" fill="rgb(221,127,29)" fg:x="12367" fg:w="205"/><text x="41.8432%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,427 instructions, 41.75%)</title><rect x="0.8668%" y="197" width="41.7518%" height="15" fill="rgb(236,187,37)" fg:x="258" fg:w="12427"/><text x="1.1598%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (6 instructions, 0.02%)</title><rect x="42.6186%" y="181" width="0.0202%" height="15" fill="rgb(240,58,6)" fg:x="12685" fg:w="6"/><text x="42.9116%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="42.6388%" y="181" width="0.9811%" height="15" fill="rgb(238,164,43)" fg:x="12691" fg:w="292"/><text x="42.9317%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="43.6198%" y="181" width="0.9172%" height="15" fill="rgb(206,67,12)" fg:x="12983" fg:w="273"/><text x="43.9128%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="44.5370%" y="181" width="0.9172%" height="15" fill="rgb(219,124,50)" fg:x="13256" fg:w="273"/><text x="44.8300%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="45.4542%" y="181" width="0.9811%" height="15" fill="rgb(249,126,35)" fg:x="13529" fg:w="292"/><text x="45.7472%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="46.4353%" y="181" width="0.9811%" height="15" fill="rgb(220,66,38)" fg:x="13821" fg:w="292"/><text x="46.7283%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="47.4163%" y="181" width="0.9172%" height="15" fill="rgb(227,84,53)" fg:x="14113" fg:w="273"/><text x="47.7093%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="48.3336%" y="181" width="0.9172%" height="15" fill="rgb(217,142,11)" fg:x="14386" fg:w="273"/><text x="48.6265%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="49.2508%" y="181" width="0.9172%" height="15" fill="rgb(223,35,17)" fg:x="14659" fg:w="273"/><text x="49.5437%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="50.1680%" y="181" width="0.9811%" height="15" fill="rgb(253,112,31)" fg:x="14932" fg:w="292"/><text x="50.4610%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="51.1490%" y="181" width="0.9811%" height="15" fill="rgb(249,75,8)" fg:x="15224" fg:w="292"/><text x="51.4420%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="52.1301%" y="181" width="0.9172%" height="15" fill="rgb(213,115,5)" fg:x="15516" fg:w="273"/><text x="52.4231%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="53.0473%" y="181" width="0.9172%" height="15" fill="rgb(213,147,8)" fg:x="15789" fg:w="273"/><text x="53.3403%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="53.9645%" y="181" width="0.9811%" height="15" fill="rgb(205,134,44)" fg:x="16062" fg:w="292"/><text x="54.2575%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (308 instructions, 1.03%)</title><rect x="54.9456%" y="181" width="1.0348%" height="15" fill="rgb(232,201,7)" fg:x="16354" fg:w="308"/><text x="55.2385%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="55.9804%" y="181" width="0.9172%" height="15" fill="rgb(229,215,48)" fg:x="16662" fg:w="273"/><text x="56.2733%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="56.8976%" y="181" width="0.9172%" height="15" fill="rgb(252,161,34)" fg:x="16935" fg:w="273"/><text x="57.1906%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="57.8148%" y="181" width="0.9172%" height="15" fill="rgb(236,227,9)" fg:x="17208" fg:w="273"/><text x="58.1078%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="58.7320%" y="181" width="0.9172%" height="15" fill="rgb(225,79,33)" fg:x="17481" fg:w="273"/><text x="59.0250%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="59.6492%" y="181" width="0.9172%" height="15" fill="rgb(232,187,26)" fg:x="17754" fg:w="273"/><text x="59.9422%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="60.5665%" y="181" width="0.9172%" height="15" fill="rgb(232,80,38)" fg:x="18027" fg:w="273"/><text x="60.8594%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="61.4837%" y="181" width="0.9811%" height="15" fill="rgb(223,179,52)" fg:x="18300" fg:w="292"/><text x="61.7766%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="62.4647%" y="181" width="0.9811%" height="15" fill="rgb(214,0,18)" fg:x="18592" fg:w="292"/><text x="62.7577%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (308 instructions, 1.03%)</title><rect x="63.4458%" y="181" width="1.0348%" height="15" fill="rgb(229,123,47)" fg:x="18884" fg:w="308"/><text x="63.7387%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="64.4806%" y="181" width="0.9811%" height="15" fill="rgb(238,219,42)" fg:x="19192" fg:w="292"/><text x="64.7735%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="65.4616%" y="181" width="0.9811%" height="15" fill="rgb(230,130,6)" fg:x="19484" fg:w="292"/><text x="65.7546%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="66.4427%" y="181" width="0.9172%" height="15" fill="rgb(212,22,50)" fg:x="19776" fg:w="273"/><text x="66.7357%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="67.3599%" y="181" width="0.9172%" height="15" fill="rgb(221,58,2)" fg:x="20049" fg:w="273"/><text x="67.6529%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="68.2771%" y="181" width="0.9172%" height="15" fill="rgb(238,78,39)" fg:x="20322" fg:w="273"/><text x="68.5701%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="69.1943%" y="181" width="0.9172%" height="15" fill="rgb(220,19,29)" fg:x="20595" fg:w="273"/><text x="69.4873%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="70.1115%" y="181" width="0.9172%" height="15" fill="rgb(230,119,34)" fg:x="20868" fg:w="273"/><text x="70.4045%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="71.0288%" y="181" width="0.9172%" height="15" fill="rgb(241,112,18)" fg:x="21141" fg:w="273"/><text x="71.3217%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="71.9460%" y="181" width="0.9811%" height="15" fill="rgb(208,163,48)" fg:x="21414" fg:w="292"/><text x="72.2389%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="72.9270%" y="181" width="0.9811%" height="15" fill="rgb(239,48,22)" fg:x="21706" fg:w="292"/><text x="73.2200%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="73.9081%" y="181" width="0.9172%" height="15" fill="rgb(215,59,45)" fg:x="21998" fg:w="273"/><text x="74.2010%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="74.8253%" y="181" width="0.9811%" height="15" fill="rgb(233,22,49)" fg:x="22271" fg:w="292"/><text x="75.1183%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="75.8063%" y="181" width="0.9811%" height="15" fill="rgb(233,89,54)" fg:x="22563" fg:w="292"/><text x="76.0993%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="76.7874%" y="181" width="0.9172%" height="15" fill="rgb(234,56,37)" fg:x="22855" fg:w="273"/><text x="77.0804%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="77.7046%" y="181" width="0.9811%" height="15" fill="rgb(216,116,22)" fg:x="23128" fg:w="292"/><text x="77.9976%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (308 instructions, 1.03%)</title><rect x="78.6857%" y="181" width="1.0348%" height="15" fill="rgb(224,137,3)" fg:x="23420" fg:w="308"/><text x="78.9786%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="79.7205%" y="181" width="0.9172%" height="15" fill="rgb(234,117,34)" fg:x="23728" fg:w="273"/><text x="80.0134%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="80.6377%" y="181" width="0.9172%" height="15" fill="rgb(215,98,53)" fg:x="24001" fg:w="273"/><text x="80.9307%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="81.5549%" y="181" width="0.9172%" height="15" fill="rgb(242,208,31)" fg:x="24274" fg:w="273"/><text x="81.8479%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="82.4721%" y="181" width="0.9172%" height="15" fill="rgb(215,194,2)" fg:x="24547" fg:w="273"/><text x="82.7651%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="83.3893%" y="181" width="0.9172%" height="15" fill="rgb(234,50,37)" fg:x="24820" fg:w="273"/><text x="83.6823%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="84.3065%" y="181" width="0.9811%" height="15" fill="rgb(232,189,31)" fg:x="25093" fg:w="292"/><text x="84.5995%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="85.2876%" y="181" width="0.9172%" height="15" fill="rgb(208,164,37)" fg:x="25385" fg:w="273"/><text x="85.5806%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="86.2048%" y="181" width="0.9172%" height="15" fill="rgb(221,217,47)" fg:x="25658" fg:w="273"/><text x="86.4978%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (308 instructions, 1.03%)</title><rect x="87.1220%" y="181" width="1.0348%" height="15" fill="rgb(231,192,1)" fg:x="25931" fg:w="308"/><text x="87.4150%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (273 instructions, 0.92%)</title><rect x="88.1568%" y="181" width="0.9172%" height="15" fill="rgb(212,47,7)" fg:x="26239" fg:w="273"/><text x="88.4498%" y="191.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::get (292 instructions, 0.98%)</title><rect x="89.0740%" y="181" width="0.9811%" height="15" fill="rgb(245,36,9)" fg:x="26512" fg:w="292"/><text x="89.3670%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15,535 instructions, 52.19%)</title><rect x="42.6186%" y="197" width="52.1939%" height="15" fill="rgb(227,177,31)" fg:x="12685" fg:w="15535"/><text x="42.9116%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="94.8125%" y="165" width="0.0168%" height="15" fill="rgb(233,113,8)" fg:x="28220" fg:w="5"/><text x="95.1055%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.18%)</title><rect x="94.8293%" y="133" width="0.1814%" height="15" fill="rgb(248,96,32)" fg:x="28225" fg:w="54"/><text x="95.1223%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.46%)</title><rect x="94.8293%" y="149" width="0.4569%" height="15" fill="rgb(224,191,18)" fg:x="28225" fg:w="136"/><text x="95.1223%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (166 instructions, 0.56%)</title><rect x="94.8293%" y="165" width="0.5577%" height="15" fill="rgb(207,147,44)" fg:x="28225" fg:w="166"/><text x="95.1223%" y="175.50"></text></g><g><title>memset (136 instructions, 0.46%)</title><rect x="95.3870%" y="165" width="0.4569%" height="15" fill="rgb(241,126,1)" fg:x="28391" fg:w="136"/><text x="95.6800%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.56%)</title><rect x="94.8125%" y="181" width="1.5589%" height="15" fill="rgb(215,163,8)" fg:x="28220" fg:w="464"/><text x="95.1055%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.26%)</title><rect x="96.3715%" y="165" width="0.2621%" height="15" fill="rgb(225,152,50)" fg:x="28684" fg:w="78"/><text x="96.6644%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.31%)</title><rect x="96.6335%" y="101" width="0.3125%" height="15" fill="rgb(208,186,14)" fg:x="28762" fg:w="93"/><text x="96.9265%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.35%)</title><rect x="96.6335%" y="117" width="0.3461%" height="15" fill="rgb(212,218,52)" fg:x="28762" fg:w="103"/><text x="96.9265%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.36%)</title><rect x="96.6335%" y="133" width="0.3561%" height="15" fill="rgb(220,8,20)" fg:x="28762" fg:w="106"/><text x="96.9265%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (136 instructions, 0.46%)</title><rect x="96.6335%" y="149" width="0.4569%" height="15" fill="rgb(218,151,47)" fg:x="28762" fg:w="136"/><text x="96.9265%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (201 instructions, 0.68%)</title><rect x="96.6335%" y="165" width="0.6753%" height="15" fill="rgb(221,204,23)" fg:x="28762" fg:w="201"/><text x="96.9265%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="97.3088%" y="165" width="0.0370%" height="15" fill="rgb(221,27,44)" fg:x="28963" fg:w="11"/><text x="97.6018%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="97.3458%" y="165" width="0.0370%" height="15" fill="rgb(212,223,49)" fg:x="28974" fg:w="11"/><text x="97.6388%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.26%)</title><rect x="97.3827%" y="165" width="0.2553%" height="15" fill="rgb(252,222,40)" fg:x="28985" fg:w="76"/><text x="97.6757%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.05%)</title><rect x="97.6381%" y="165" width="0.0470%" height="15" fill="rgb(240,38,19)" fg:x="29061" fg:w="14"/><text x="97.9311%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (673 instructions, 2.26%)</title><rect x="96.3715%" y="181" width="2.2611%" height="15" fill="rgb(223,151,20)" fg:x="28684" fg:w="673"/><text x="96.6644%" y="191.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="98.6326%" y="181" width="0.0168%" height="15" fill="rgb(210,38,16)" fg:x="29357" fg:w="5"/><text x="98.9255%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.18%)</title><rect x="98.6494%" y="181" width="0.1848%" height="15" fill="rgb(242,29,0)" fg:x="29362" fg:w="55"/><text x="98.9423%" y="191.50"></text></g><g><title>ic_cdk::api::call::reply (1,273 instructions, 4.28%)</title><rect x="94.8125%" y="197" width="4.2770%" height="15" fill="rgb(217,165,32)" fg:x="28220" fg:w="1273"/><text x="95.1055%" y="207.50">ic_c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.27%)</title><rect x="99.0895%" y="197" width="0.2721%" height="15" fill="rgb(221,72,23)" fg:x="29493" fg:w="81"/><text x="99.3825%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (127 instructions, 0.43%)</title><rect x="99.3616%" y="197" width="0.4267%" height="15" fill="rgb(230,16,22)" fg:x="29574" fg:w="127"/><text x="99.6546%" y="207.50"></text></g><g><title>all (29,764 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,95,3)" fg:x="0" fg:w="29764"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (29,764 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,126,43)" fg:x="0" fg:w="29764"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>