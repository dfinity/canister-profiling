<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18375"><g><title>ic_cdk::setup (24 instructions, 0.13%)</title><rect x="0.0000%" y="197" width="0.1306%" height="15" fill="rgb(245,98,2)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="0.1306%" y="197" width="0.4463%" height="15" fill="rgb(230,155,36)" fg:x="24" fg:w="82"/><text x="0.4236%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="0.5769%" y="197" width="0.4463%" height="15" fill="rgb(250,160,19)" fg:x="106" fg:w="82"/><text x="0.8698%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="1.0231%" y="165" width="0.4463%" height="15" fill="rgb(224,208,24)" fg:x="188" fg:w="82"/><text x="1.3161%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="1.4694%" y="149" width="0.4463%" height="15" fill="rgb(235,32,39)" fg:x="270" fg:w="82"/><text x="1.7624%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.9156%" y="133" width="0.0327%" height="15" fill="rgb(206,132,15)" fg:x="352" fg:w="6"/><text x="2.2086%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.41%)</title><rect x="1.9156%" y="149" width="2.4109%" height="15" fill="rgb(226,48,53)" fg:x="352" fg:w="443"/><text x="2.2086%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="4.3265%" y="149" width="0.5170%" height="15" fill="rgb(231,76,49)" fg:x="795" fg:w="95"/><text x="4.6195%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="4.8435%" y="149" width="0.3265%" height="15" fill="rgb(247,211,22)" fg:x="890" fg:w="60"/><text x="5.1365%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.1701%" y="149" width="0.3265%" height="15" fill="rgb(213,3,26)" fg:x="950" fg:w="60"/><text x="5.4630%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.4966%" y="149" width="0.3265%" height="15" fill="rgb(207,139,32)" fg:x="1010" fg:w="60"/><text x="5.7896%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.8231%" y="149" width="0.3265%" height="15" fill="rgb(231,206,33)" fg:x="1070" fg:w="60"/><text x="6.1161%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="6.1497%" y="149" width="0.4463%" height="15" fill="rgb(225,186,9)" fg:x="1130" fg:w="82"/><text x="6.4426%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.38%)</title><rect x="6.5959%" y="149" width="0.3810%" height="15" fill="rgb(241,166,8)" fg:x="1212" fg:w="70"/><text x="6.8889%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="6.9769%" y="133" width="0.0327%" height="15" fill="rgb(225,139,20)" fg:x="1282" fg:w="6"/><text x="7.2698%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.41%)</title><rect x="6.9769%" y="149" width="2.4109%" height="15" fill="rgb(234,98,16)" fg:x="1282" fg:w="443"/><text x="7.2698%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.10%)</title><rect x="9.3878%" y="149" width="0.1034%" height="15" fill="rgb(236,205,27)" fg:x="1725" fg:w="19"/><text x="9.6807%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="9.4912%" y="133" width="0.4463%" height="15" fill="rgb(207,227,16)" fg:x="1744" fg:w="82"/><text x="9.7841%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.36%)</title><rect x="9.9374%" y="101" width="0.3646%" height="15" fill="rgb(205,198,12)" fg:x="1826" fg:w="67"/><text x="10.2304%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.52%)</title><rect x="9.9374%" y="117" width="0.5224%" height="15" fill="rgb(248,45,38)" fg:x="1826" fg:w="96"/><text x="10.2304%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="10.4599%" y="69" width="0.0599%" height="15" fill="rgb(214,83,53)" fg:x="1922" fg:w="11"/><text x="10.7528%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.19%)</title><rect x="10.5197%" y="53" width="0.1905%" height="15" fill="rgb(237,116,23)" fg:x="1933" fg:w="35"/><text x="10.8127%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.35%)</title><rect x="10.5197%" y="69" width="0.3483%" height="15" fill="rgb(239,207,36)" fg:x="1933" fg:w="64"/><text x="10.8127%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.78%)</title><rect x="10.4599%" y="85" width="0.7837%" height="15" fill="rgb(243,107,50)" fg:x="1922" fg:w="144"/><text x="10.7528%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.14%)</title><rect x="10.4599%" y="101" width="1.1374%" height="15" fill="rgb(232,21,26)" fg:x="1922" fg:w="209"/><text x="10.7528%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.19%)</title><rect x="10.4599%" y="117" width="1.1918%" height="15" fill="rgb(233,28,1)" fg:x="1922" fg:w="219"/><text x="10.7528%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 2.49%)</title><rect x="9.9374%" y="133" width="2.4871%" height="15" fill="rgb(238,106,49)" fg:x="1826" fg:w="457"/><text x="10.2304%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.68%)</title><rect x="9.4912%" y="149" width="3.6844%" height="15" fill="rgb(243,174,28)" fg:x="1744" fg:w="677"/><text x="9.7841%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="13.1755%" y="149" width="0.5170%" height="15" fill="rgb(238,72,24)" fg:x="2421" fg:w="95"/><text x="13.4685%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="13.6925%" y="149" width="0.3265%" height="15" fill="rgb(235,228,34)" fg:x="2516" fg:w="60"/><text x="13.9855%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="14.0190%" y="149" width="0.4136%" height="15" fill="rgb(245,27,45)" fg:x="2576" fg:w="76"/><text x="14.3120%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.38%)</title><rect x="14.4327%" y="149" width="0.3810%" height="15" fill="rgb(208,214,45)" fg:x="2652" fg:w="70"/><text x="14.7256%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="14.8136%" y="117" width="0.0327%" height="15" fill="rgb(240,219,9)" fg:x="2722" fg:w="6"/><text x="15.1066%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.41%)</title><rect x="14.8136%" y="133" width="2.4109%" height="15" fill="rgb(231,66,18)" fg:x="2722" fg:w="443"/><text x="15.1066%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.10%)</title><rect x="17.2245%" y="133" width="0.1034%" height="15" fill="rgb(213,164,18)" fg:x="3165" fg:w="19"/><text x="17.5175%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="17.3279%" y="117" width="0.4463%" height="15" fill="rgb(236,158,45)" fg:x="3184" fg:w="82"/><text x="17.6209%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.36%)</title><rect x="17.7741%" y="85" width="0.3646%" height="15" fill="rgb(227,99,44)" fg:x="3266" fg:w="67"/><text x="18.0671%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.52%)</title><rect x="17.7741%" y="101" width="0.5224%" height="15" fill="rgb(206,43,46)" fg:x="3266" fg:w="96"/><text x="18.0671%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="18.2966%" y="53" width="0.0599%" height="15" fill="rgb(214,162,0)" fg:x="3362" fg:w="11"/><text x="18.5896%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.19%)</title><rect x="18.3565%" y="37" width="0.1905%" height="15" fill="rgb(227,140,43)" fg:x="3373" fg:w="35"/><text x="18.6494%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.35%)</title><rect x="18.3565%" y="53" width="0.3483%" height="15" fill="rgb(207,191,23)" fg:x="3373" fg:w="64"/><text x="18.6494%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.78%)</title><rect x="18.2966%" y="69" width="0.7837%" height="15" fill="rgb(219,199,39)" fg:x="3362" fg:w="144"/><text x="18.5896%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.14%)</title><rect x="18.2966%" y="85" width="1.1374%" height="15" fill="rgb(225,99,39)" fg:x="3362" fg:w="209"/><text x="18.5896%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.19%)</title><rect x="18.2966%" y="101" width="1.1918%" height="15" fill="rgb(232,176,41)" fg:x="3362" fg:w="219"/><text x="18.5896%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 2.49%)</title><rect x="17.7741%" y="117" width="2.4871%" height="15" fill="rgb(252,173,8)" fg:x="3266" fg:w="457"/><text x="18.0671%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.68%)</title><rect x="17.3279%" y="133" width="3.6844%" height="15" fill="rgb(222,39,14)" fg:x="3184" fg:w="677"/><text x="17.6209%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="21.0122%" y="133" width="0.5170%" height="15" fill="rgb(205,179,46)" fg:x="3861" fg:w="95"/><text x="21.3052%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="21.5293%" y="133" width="0.3265%" height="15" fill="rgb(233,198,54)" fg:x="3956" fg:w="60"/><text x="21.8222%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="21.8558%" y="117" width="0.4463%" height="15" fill="rgb(251,35,6)" fg:x="4016" fg:w="82"/><text x="22.1488%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.52%)</title><rect x="22.3020%" y="117" width="0.5170%" height="15" fill="rgb(241,173,16)" fg:x="4098" fg:w="95"/><text x="22.5950%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="22.8190%" y="117" width="0.4136%" height="15" fill="rgb(250,181,43)" fg:x="4193" fg:w="76"/><text x="23.1120%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.80%)</title><rect x="21.8558%" y="133" width="1.7959%" height="15" fill="rgb(205,220,34)" fg:x="4016" fg:w="330"/><text x="22.1488%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="23.6517%" y="133" width="0.4463%" height="15" fill="rgb(211,28,13)" fg:x="4346" fg:w="82"/><text x="23.9447%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 10.59%)</title><rect x="14.8136%" y="149" width="10.5905%" height="15" fill="rgb(239,70,14)" fg:x="2722" fg:w="1946"/><text x="15.1066%" y="159.50">binread::binr..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="25.4041%" y="149" width="0.4136%" height="15" fill="rgb(222,85,44)" fg:x="4668" fg:w="76"/><text x="25.6971%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.08%)</title><rect x="25.8177%" y="149" width="0.0816%" height="15" fill="rgb(250,128,42)" fg:x="4744" fg:w="15"/><text x="26.1107%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.08%)</title><rect x="25.8993%" y="149" width="0.0816%" height="15" fill="rgb(226,7,41)" fg:x="4759" fg:w="15"/><text x="26.1923%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.08%)</title><rect x="25.9810%" y="149" width="0.0816%" height="15" fill="rgb(213,221,46)" fg:x="4774" fg:w="15"/><text x="26.2739%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="26.0626%" y="149" width="0.0381%" height="15" fill="rgb(234,102,36)" fg:x="4789" fg:w="7"/><text x="26.3556%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="26.1007%" y="133" width="0.4463%" height="15" fill="rgb(208,91,22)" fg:x="4796" fg:w="82"/><text x="26.3936%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.97%)</title><rect x="26.1007%" y="149" width="0.9687%" height="15" fill="rgb(218,163,14)" fg:x="4796" fg:w="178"/><text x="26.3936%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="27.0694%" y="117" width="0.4463%" height="15" fill="rgb(208,218,3)" fg:x="4974" fg:w="82"/><text x="27.3624%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.71%)</title><rect x="27.0694%" y="133" width="0.7075%" height="15" fill="rgb(225,108,13)" fg:x="4974" fg:w="130"/><text x="27.3624%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 1.17%)</title><rect x="27.0694%" y="149" width="1.1701%" height="15" fill="rgb(215,142,21)" fg:x="4974" fg:w="215"/><text x="27.3624%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="28.2395%" y="149" width="0.4463%" height="15" fill="rgb(209,64,3)" fg:x="5189" fg:w="82"/><text x="28.5324%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="28.6857%" y="149" width="0.4844%" height="15" fill="rgb(232,49,12)" fg:x="5271" fg:w="89"/><text x="28.9787%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="29.1701%" y="149" width="0.4463%" height="15" fill="rgb(252,176,6)" fg:x="5360" fg:w="82"/><text x="29.4630%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="29.6163%" y="149" width="0.4463%" height="15" fill="rgb(234,37,11)" fg:x="5442" fg:w="82"/><text x="29.9093%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="30.0626%" y="149" width="0.0218%" height="15" fill="rgb(235,202,18)" fg:x="5524" fg:w="4"/><text x="30.3556%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="30.0844%" y="149" width="0.4844%" height="15" fill="rgb(217,170,8)" fg:x="5528" fg:w="89"/><text x="30.3773%" y="159.50"></text></g><g><title>memcpy (392 instructions, 2.13%)</title><rect x="30.5687%" y="149" width="2.1333%" height="15" fill="rgb(237,141,20)" fg:x="5617" fg:w="392"/><text x="30.8617%" y="159.50">m..</text></g><g><title>memcpy (392 instructions, 2.13%)</title><rect x="32.7020%" y="149" width="2.1333%" height="15" fill="rgb(251,89,14)" fg:x="6009" fg:w="392"/><text x="32.9950%" y="159.50">m..</text></g><g><title>memcpy (504 instructions, 2.74%)</title><rect x="34.8354%" y="149" width="2.7429%" height="15" fill="rgb(241,65,16)" fg:x="6401" fg:w="504"/><text x="35.1283%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 42.69%)</title><rect x="1.4694%" y="165" width="42.6884%" height="15" fill="rgb(244,51,22)" fg:x="270" fg:w="7844"/><text x="1.7624%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.87%)</title><rect x="44.1578%" y="165" width="1.8721%" height="15" fill="rgb(247,211,13)" fg:x="8114" fg:w="344"/><text x="44.4508%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="46.0299%" y="149" width="0.0381%" height="15" fill="rgb(205,9,24)" fg:x="8458" fg:w="7"/><text x="46.3229%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.21%)</title><rect x="46.0299%" y="165" width="0.2122%" height="15" fill="rgb(227,180,48)" fg:x="8458" fg:w="39"/><text x="46.3229%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="46.2422%" y="165" width="0.4463%" height="15" fill="rgb(216,184,6)" fg:x="8497" fg:w="82"/><text x="46.5351%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="46.6884%" y="149" width="0.0381%" height="15" fill="rgb(223,220,13)" fg:x="8579" fg:w="7"/><text x="46.9814%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="46.7265%" y="133" width="0.3211%" height="15" fill="rgb(215,91,5)" fg:x="8586" fg:w="59"/><text x="47.0195%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.51%)</title><rect x="47.0476%" y="133" width="0.5116%" height="15" fill="rgb(215,75,18)" fg:x="8645" fg:w="94"/><text x="47.3406%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.94%)</title><rect x="47.5592%" y="133" width="0.9415%" height="15" fill="rgb(221,72,44)" fg:x="8739" fg:w="173"/><text x="47.8522%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.15%)</title><rect x="46.7265%" y="149" width="3.1510%" height="15" fill="rgb(248,91,3)" fg:x="8586" fg:w="579"/><text x="47.0195%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (797 instructions, 4.34%)</title><rect x="46.6884%" y="165" width="4.3374%" height="15" fill="rgb(252,69,6)" fg:x="8579" fg:w="797"/><text x="46.9814%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="51.0259%" y="165" width="0.4463%" height="15" fill="rgb(244,52,40)" fg:x="9376" fg:w="82"/><text x="51.3188%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="51.4721%" y="149" width="0.0381%" height="15" fill="rgb(249,195,0)" fg:x="9458" fg:w="7"/><text x="51.7651%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="51.5102%" y="133" width="0.3211%" height="15" fill="rgb(249,129,20)" fg:x="9465" fg:w="59"/><text x="51.8032%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.51%)</title><rect x="51.8313%" y="133" width="0.5116%" height="15" fill="rgb(221,176,35)" fg:x="9524" fg:w="94"/><text x="52.1243%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.94%)</title><rect x="52.3429%" y="133" width="0.9415%" height="15" fill="rgb(221,26,1)" fg:x="9618" fg:w="173"/><text x="52.6358%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.15%)</title><rect x="51.5102%" y="149" width="3.1510%" height="15" fill="rgb(218,152,45)" fg:x="9465" fg:w="579"/><text x="51.8032%" y="159.50">co..</text></g><g><title>memcmp (77 instructions, 0.42%)</title><rect x="54.6612%" y="149" width="0.4190%" height="15" fill="rgb(205,6,54)" fg:x="10044" fg:w="77"/><text x="54.9542%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="55.0803%" y="133" width="0.4844%" height="15" fill="rgb(235,6,38)" fg:x="10121" fg:w="89"/><text x="55.3732%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.72%)</title><rect x="55.0803%" y="149" width="0.7238%" height="15" fill="rgb(228,220,17)" fg:x="10121" fg:w="133"/><text x="55.3732%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 5.31%)</title><rect x="51.4721%" y="165" width="5.3061%" height="15" fill="rgb(214,20,48)" fg:x="9458" fg:w="975"/><text x="51.7651%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="56.7782%" y="117" width="0.3211%" height="15" fill="rgb(215,133,16)" fg:x="10433" fg:w="59"/><text x="57.0712%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.56%)</title><rect x="56.7782%" y="133" width="0.5551%" height="15" fill="rgb(233,202,12)" fg:x="10433" fg:w="102"/><text x="57.0712%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.76%)</title><rect x="56.7782%" y="149" width="1.7578%" height="15" fill="rgb(241,11,13)" fg:x="10433" fg:w="323"/><text x="57.0712%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.302 (34 instructions, 0.19%)</title><rect x="58.5361%" y="149" width="0.1850%" height="15" fill="rgb(236,12,20)" fg:x="10756" fg:w="34"/><text x="58.8290%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="58.7211%" y="149" width="0.0707%" height="15" fill="rgb(220,62,33)" fg:x="10790" fg:w="13"/><text x="59.0141%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 3.02%)</title><rect x="56.7782%" y="165" width="3.0204%" height="15" fill="rgb(209,177,15)" fg:x="10433" fg:w="555"/><text x="57.0712%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.27%)</title><rect x="59.7986%" y="165" width="0.2667%" height="15" fill="rgb(212,160,34)" fg:x="10988" fg:w="49"/><text x="60.0916%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.45%)</title><rect x="60.0653%" y="149" width="0.4517%" height="15" fill="rgb(230,44,5)" fg:x="11037" fg:w="83"/><text x="60.3583%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.13%)</title><rect x="60.7565%" y="133" width="0.1252%" height="15" fill="rgb(239,186,32)" fg:x="11164" fg:w="23"/><text x="61.0494%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.75%)</title><rect x="60.7565%" y="149" width="0.7510%" height="15" fill="rgb(217,162,23)" fg:x="11164" fg:w="138"/><text x="61.0494%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.68%)</title><rect x="60.0653%" y="165" width="1.6816%" height="15" fill="rgb(212,25,25)" fg:x="11037" fg:w="309"/><text x="60.3583%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.19%)</title><rect x="61.7469%" y="149" width="0.1905%" height="15" fill="rgb(218,50,52)" fg:x="11346" fg:w="35"/><text x="62.0399%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1621 (34 instructions, 0.19%)</title><rect x="61.9374%" y="149" width="0.1850%" height="15" fill="rgb(213,165,25)" fg:x="11381" fg:w="34"/><text x="62.2304%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1621 (34 instructions, 0.19%)</title><rect x="62.1224%" y="149" width="0.1850%" height="15" fill="rgb(220,72,31)" fg:x="11415" fg:w="34"/><text x="62.4154%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.18%)</title><rect x="62.3075%" y="149" width="0.1796%" height="15" fill="rgb(235,153,28)" fg:x="11449" fg:w="33"/><text x="62.6005%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.36%)</title><rect x="61.7469%" y="165" width="1.3605%" height="15" fill="rgb(234,19,17)" fg:x="11346" fg:w="250"/><text x="62.0399%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="63.1075%" y="165" width="0.0707%" height="15" fill="rgb(248,53,0)" fg:x="11596" fg:w="13"/><text x="63.4005%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="63.1782%" y="165" width="0.0707%" height="15" fill="rgb(207,38,1)" fg:x="11609" fg:w="13"/><text x="63.4712%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="63.2490%" y="165" width="0.0707%" height="15" fill="rgb(225,32,21)" fg:x="11622" fg:w="13"/><text x="63.5419%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.23%)</title><rect x="63.3197%" y="165" width="0.2340%" height="15" fill="rgb(234,93,44)" fg:x="11635" fg:w="43"/><text x="63.6127%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="63.5537%" y="149" width="0.0381%" height="15" fill="rgb(208,29,8)" fg:x="11678" fg:w="7"/><text x="63.8467%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="63.5918%" y="133" width="0.1469%" height="15" fill="rgb(235,119,11)" fg:x="11685" fg:w="27"/><text x="63.8848%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="63.7388%" y="133" width="0.1469%" height="15" fill="rgb(249,125,44)" fg:x="11712" fg:w="27"/><text x="64.0317%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.07%)</title><rect x="63.5918%" y="149" width="1.0721%" height="15" fill="rgb(253,137,24)" fg:x="11685" fg:w="197"/><text x="63.8848%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="64.6639%" y="117" width="0.1469%" height="15" fill="rgb(212,102,28)" fg:x="11882" fg:w="27"/><text x="64.9569%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.77%)</title><rect x="64.6639%" y="133" width="0.7728%" height="15" fill="rgb(213,146,4)" fg:x="11882" fg:w="142"/><text x="64.9569%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 1.01%)</title><rect x="64.6639%" y="149" width="1.0122%" height="15" fill="rgb(234,98,15)" fg:x="11882" fg:w="186"/><text x="64.9569%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="65.6762%" y="149" width="0.0707%" height="15" fill="rgb(250,90,50)" fg:x="12068" fg:w="13"/><text x="65.9692%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="65.7469%" y="149" width="0.0381%" height="15" fill="rgb(219,182,45)" fg:x="12081" fg:w="7"/><text x="66.0399%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.56%)</title><rect x="63.5537%" y="165" width="2.5578%" height="15" fill="rgb(247,128,15)" fg:x="11678" fg:w="470"/><text x="63.8467%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="66.1116%" y="149" width="0.1469%" height="15" fill="rgb(224,73,28)" fg:x="12148" fg:w="27"/><text x="66.4045%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.77%)</title><rect x="66.1116%" y="165" width="0.7728%" height="15" fill="rgb(253,89,10)" fg:x="12148" fg:w="142"/><text x="66.4045%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,671 instructions, 74.40%)</title><rect x="1.0231%" y="181" width="74.4000%" height="15" fill="rgb(253,214,52)" fg:x="188" fg:w="13671"/><text x="1.3161%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="75.4231%" y="149" width="0.0381%" height="15" fill="rgb(223,100,3)" fg:x="13859" fg:w="7"/><text x="75.7161%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="75.4612%" y="117" width="0.1469%" height="15" fill="rgb(233,215,14)" fg:x="13866" fg:w="27"/><text x="75.7542%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.63%)</title><rect x="75.4612%" y="133" width="0.6259%" height="15" fill="rgb(221,224,3)" fg:x="13866" fg:w="115"/><text x="75.7542%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.87%)</title><rect x="75.4612%" y="149" width="0.8653%" height="15" fill="rgb(222,52,0)" fg:x="13866" fg:w="159"/><text x="75.7542%" y="159.50"></text></g><g><title>memset (152 instructions, 0.83%)</title><rect x="76.3265%" y="149" width="0.8272%" height="15" fill="rgb(225,57,22)" fg:x="14025" fg:w="152"/><text x="76.6195%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (492 instructions, 2.68%)</title><rect x="75.4231%" y="165" width="2.6776%" height="15" fill="rgb(205,187,19)" fg:x="13859" fg:w="492"/><text x="75.7161%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.82%)</title><rect x="78.1007%" y="149" width="2.8190%" height="15" fill="rgb(221,19,34)" fg:x="14351" fg:w="518"/><text x="78.3936%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.45%)</title><rect x="80.9197%" y="101" width="0.4463%" height="15" fill="rgb(232,91,25)" fg:x="14869" fg:w="82"/><text x="81.2127%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.71%)</title><rect x="80.9197%" y="117" width="0.7075%" height="15" fill="rgb(244,173,3)" fg:x="14869" fg:w="130"/><text x="81.2127%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 1.15%)</title><rect x="80.9197%" y="133" width="1.1537%" height="15" fill="rgb(208,192,46)" fg:x="14869" fg:w="212"/><text x="81.2127%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.08%)</title><rect x="82.0735%" y="133" width="0.0816%" height="15" fill="rgb(223,159,34)" fg:x="15081" fg:w="15"/><text x="82.3664%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.08%)</title><rect x="82.1551%" y="133" width="0.0816%" height="15" fill="rgb(248,67,4)" fg:x="15096" fg:w="15"/><text x="82.4481%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 2.34%)</title><rect x="80.9197%" y="149" width="2.3401%" height="15" fill="rgb(248,41,38)" fg:x="14869" fg:w="430"/><text x="81.2127%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.81%)</title><rect x="83.2599%" y="149" width="2.8082%" height="15" fill="rgb(244,214,27)" fg:x="15299" fg:w="516"/><text x="83.5528%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="86.0680%" y="149" width="0.0381%" height="15" fill="rgb(246,51,21)" fg:x="15815" fg:w="7"/><text x="86.3610%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 8.53%)</title><rect x="78.1007%" y="165" width="8.5333%" height="15" fill="rgb(240,150,2)" fg:x="14351" fg:w="1568"/><text x="78.3936%" y="175.50">candid::se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="86.6340%" y="165" width="0.0381%" height="15" fill="rgb(205,215,19)" fg:x="15919" fg:w="7"/><text x="86.9270%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="86.6721%" y="165" width="0.3265%" height="15" fill="rgb(213,31,6)" fg:x="15926" fg:w="60"/><text x="86.9651%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,731 instructions, 14.86%)</title><rect x="75.4231%" y="181" width="14.8626%" height="15" fill="rgb(229,108,41)" fg:x="13859" fg:w="2731"/><text x="75.7161%" y="191.50">ic_cdk::api::call::..</text></g><g><title>vector::__canister_method_batch_put::{{closure}} (17,824 instructions, 97.00%)</title><rect x="1.0231%" y="197" width="97.0014%" height="15" fill="rgb(242,128,12)" fg:x="188" fg:w="17824"/><text x="1.3161%" y="207.50">vector::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.08%)</title><rect x="98.0245%" y="197" width="0.0762%" height="15" fill="rgb(218,198,7)" fg:x="18012" fg:w="14"/><text x="98.3175%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="98.5905%" y="181" width="0.1469%" height="15" fill="rgb(238,228,21)" fg:x="18116" fg:w="27"/><text x="98.8834%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 1.11%)</title><rect x="98.1061%" y="197" width="1.1102%" height="15" fill="rgb(231,3,46)" fg:x="18027" fg:w="204"/><text x="98.3991%" y="207.50"></text></g><g><title>all (18,375 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,142,32)" fg:x="0" fg:w="18375"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (18,375 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,136,12)" fg:x="0" fg:w="18375"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>