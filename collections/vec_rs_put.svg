<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="17489"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="0.0000%" y="229" width="0.4689%" height="15" fill="rgb(249,39,24)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="0.4689%" y="229" width="0.4689%" height="15" fill="rgb(220,224,29)" fg:x="82" fg:w="82"/><text x="0.7618%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="0.9377%" y="181" width="0.4689%" height="15" fill="rgb(215,92,17)" fg:x="164" fg:w="82"/><text x="1.2307%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 6.51%)</title><rect x="0.9377%" y="197" width="6.5127%" height="15" fill="rgb(229,134,40)" fg:x="164" fg:w="1139"/><text x="1.2307%" y="207.50">ic_cdk:..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.29%)</title><rect x="7.4504%" y="165" width="0.2916%" height="15" fill="rgb(213,81,52)" fg:x="1303" fg:w="51"/><text x="7.7434%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="7.7420%" y="149" width="0.0343%" height="15" fill="rgb(244,131,38)" fg:x="1354" fg:w="6"/><text x="8.0350%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.50%)</title><rect x="7.7420%" y="165" width="2.4987%" height="15" fill="rgb(227,179,26)" fg:x="1354" fg:w="437"/><text x="8.0350%" y="175.50">c..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.37%)</title><rect x="10.2407%" y="165" width="0.3659%" height="15" fill="rgb(223,48,31)" fg:x="1791" fg:w="64"/><text x="10.5337%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.43%)</title><rect x="10.6067%" y="165" width="0.4346%" height="15" fill="rgb(211,33,54)" fg:x="1855" fg:w="76"/><text x="10.8996%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.43%)</title><rect x="11.0412%" y="165" width="0.4346%" height="15" fill="rgb(209,88,36)" fg:x="1931" fg:w="76"/><text x="11.3342%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.43%)</title><rect x="11.4758%" y="165" width="0.4346%" height="15" fill="rgb(247,224,1)" fg:x="2007" fg:w="76"/><text x="11.7688%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.43%)</title><rect x="11.9103%" y="165" width="0.4346%" height="15" fill="rgb(233,50,5)" fg:x="2083" fg:w="76"/><text x="12.2033%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.29%)</title><rect x="12.3449%" y="165" width="0.2916%" height="15" fill="rgb(221,51,46)" fg:x="2159" fg:w="51"/><text x="12.6379%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.54%)</title><rect x="12.6365%" y="165" width="0.5432%" height="15" fill="rgb(206,196,31)" fg:x="2210" fg:w="95"/><text x="12.9295%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="13.1797%" y="149" width="0.0343%" height="15" fill="rgb(230,141,38)" fg:x="2305" fg:w="6"/><text x="13.4727%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.50%)</title><rect x="13.1797%" y="165" width="2.4987%" height="15" fill="rgb(231,124,45)" fg:x="2305" fg:w="437"/><text x="13.4727%" y="175.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="15.6784%" y="165" width="0.1086%" height="15" fill="rgb(221,212,27)" fg:x="2742" fg:w="19"/><text x="15.9714%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="15.7871%" y="133" width="0.4689%" height="15" fill="rgb(231,55,33)" fg:x="2761" fg:w="82"/><text x="16.0800%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.38%)</title><rect x="16.2559%" y="101" width="0.3831%" height="15" fill="rgb(227,123,38)" fg:x="2843" fg:w="67"/><text x="16.5489%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.55%)</title><rect x="16.2559%" y="117" width="0.5489%" height="15" fill="rgb(212,155,8)" fg:x="2843" fg:w="96"/><text x="16.5489%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="16.8048%" y="69" width="0.0629%" height="15" fill="rgb(250,195,19)" fg:x="2939" fg:w="11"/><text x="17.0978%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="16.8677%" y="53" width="0.2001%" height="15" fill="rgb(233,58,22)" fg:x="2950" fg:w="35"/><text x="17.1607%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.37%)</title><rect x="16.8677%" y="69" width="0.3659%" height="15" fill="rgb(218,20,39)" fg:x="2950" fg:w="64"/><text x="17.1607%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.82%)</title><rect x="16.8048%" y="85" width="0.8234%" height="15" fill="rgb(224,36,22)" fg:x="2939" fg:w="144"/><text x="17.0978%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.20%)</title><rect x="16.8048%" y="101" width="1.2008%" height="15" fill="rgb(252,208,48)" fg:x="2939" fg:w="210"/><text x="17.0978%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.26%)</title><rect x="16.8048%" y="117" width="1.2579%" height="15" fill="rgb(233,58,24)" fg:x="2939" fg:w="220"/><text x="17.0978%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 2.57%)</title><rect x="16.2559%" y="133" width="2.5673%" height="15" fill="rgb(224,73,7)" fg:x="2843" fg:w="449"/><text x="16.5489%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.81%)</title><rect x="15.7871%" y="149" width="3.8138%" height="15" fill="rgb(222,13,11)" fg:x="2761" fg:w="667"/><text x="16.0800%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.37%)</title><rect x="19.6009%" y="149" width="0.3659%" height="15" fill="rgb(207,102,32)" fg:x="3428" fg:w="64"/><text x="19.8939%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.35%)</title><rect x="19.9668%" y="149" width="0.3488%" height="15" fill="rgb(242,50,12)" fg:x="3492" fg:w="61"/><text x="20.2598%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.16%)</title><rect x="15.7871%" y="165" width="5.1632%" height="15" fill="rgb(214,73,34)" fg:x="2761" fg:w="903"/><text x="16.0800%" y="175.50">binre..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.15%)</title><rect x="20.9503%" y="165" width="0.1544%" height="15" fill="rgb(246,133,38)" fg:x="3664" fg:w="27"/><text x="21.2433%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.26%)</title><rect x="21.1047%" y="165" width="0.2630%" height="15" fill="rgb(247,222,3)" fg:x="3691" fg:w="46"/><text x="21.3977%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.54%)</title><rect x="21.3677%" y="165" width="0.5432%" height="15" fill="rgb(213,173,22)" fg:x="3737" fg:w="95"/><text x="21.6607%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="21.9109%" y="133" width="0.0343%" height="15" fill="rgb(226,24,33)" fg:x="3832" fg:w="6"/><text x="22.2039%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.50%)</title><rect x="21.9109%" y="149" width="2.4987%" height="15" fill="rgb(233,201,40)" fg:x="3832" fg:w="437"/><text x="22.2039%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="24.4096%" y="149" width="0.1086%" height="15" fill="rgb(236,151,32)" fg:x="4269" fg:w="19"/><text x="24.7026%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="24.5183%" y="117" width="0.4689%" height="15" fill="rgb(242,162,0)" fg:x="4288" fg:w="82"/><text x="24.8112%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.38%)</title><rect x="24.9871%" y="85" width="0.3831%" height="15" fill="rgb(230,210,23)" fg:x="4370" fg:w="67"/><text x="25.2801%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.55%)</title><rect x="24.9871%" y="101" width="0.5489%" height="15" fill="rgb(227,202,47)" fg:x="4370" fg:w="96"/><text x="25.2801%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="25.5361%" y="53" width="0.0629%" height="15" fill="rgb(205,26,43)" fg:x="4466" fg:w="11"/><text x="25.8290%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.20%)</title><rect x="25.5989%" y="37" width="0.2001%" height="15" fill="rgb(247,34,12)" fg:x="4477" fg:w="35"/><text x="25.8919%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.37%)</title><rect x="25.5989%" y="53" width="0.3659%" height="15" fill="rgb(215,75,8)" fg:x="4477" fg:w="64"/><text x="25.8919%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.82%)</title><rect x="25.5361%" y="69" width="0.8234%" height="15" fill="rgb(219,125,27)" fg:x="4466" fg:w="144"/><text x="25.8290%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.20%)</title><rect x="25.5361%" y="85" width="1.2008%" height="15" fill="rgb(234,27,20)" fg:x="4466" fg:w="210"/><text x="25.8290%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.26%)</title><rect x="25.5361%" y="101" width="1.2579%" height="15" fill="rgb(229,162,10)" fg:x="4466" fg:w="220"/><text x="25.8290%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 2.57%)</title><rect x="24.9871%" y="117" width="2.5673%" height="15" fill="rgb(223,37,31)" fg:x="4370" fg:w="449"/><text x="25.2801%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.81%)</title><rect x="24.5183%" y="133" width="3.8138%" height="15" fill="rgb(234,150,25)" fg:x="4288" fg:w="667"/><text x="24.8112%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.37%)</title><rect x="28.3321%" y="133" width="0.3659%" height="15" fill="rgb(217,7,0)" fg:x="4955" fg:w="64"/><text x="28.6251%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.35%)</title><rect x="28.6980%" y="133" width="0.3488%" height="15" fill="rgb(215,102,15)" fg:x="5019" fg:w="61"/><text x="28.9910%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.16%)</title><rect x="24.5183%" y="149" width="5.1632%" height="15" fill="rgb(229,5,35)" fg:x="4288" fg:w="903"/><text x="24.8112%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.29%)</title><rect x="29.6815%" y="133" width="0.2916%" height="15" fill="rgb(214,11,6)" fg:x="5191" fg:w="51"/><text x="29.9745%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.67%)</title><rect x="29.9731%" y="133" width="0.6747%" height="15" fill="rgb(217,2,52)" fg:x="5242" fg:w="118"/><text x="30.2661%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.26%)</title><rect x="30.6478%" y="133" width="0.2630%" height="15" fill="rgb(236,109,9)" fg:x="5360" fg:w="46"/><text x="30.9408%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.62%)</title><rect x="29.6815%" y="149" width="1.6182%" height="15" fill="rgb(237,102,54)" fg:x="5191" fg:w="283"/><text x="29.9745%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="31.2997%" y="149" width="0.4689%" height="15" fill="rgb(252,78,14)" fg:x="5474" fg:w="82"/><text x="31.5926%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 10.92%)</title><rect x="21.9109%" y="165" width="10.9212%" height="15" fill="rgb(236,71,10)" fg:x="3832" fg:w="1910"/><text x="22.2039%" y="175.50">binread::binr..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.26%)</title><rect x="32.8321%" y="165" width="0.2630%" height="15" fill="rgb(246,65,9)" fg:x="5742" fg:w="46"/><text x="33.1250%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="33.0951%" y="165" width="0.0858%" height="15" fill="rgb(223,167,11)" fg:x="5788" fg:w="15"/><text x="33.3881%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="33.1809%" y="165" width="0.0457%" height="15" fill="rgb(217,50,29)" fg:x="5803" fg:w="8"/><text x="33.4738%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="33.2266%" y="149" width="0.4689%" height="15" fill="rgb(235,126,17)" fg:x="5811" fg:w="82"/><text x="33.5196%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 1.02%)</title><rect x="33.2266%" y="165" width="1.0178%" height="15" fill="rgb(252,34,52)" fg:x="5811" fg:w="178"/><text x="33.5196%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="34.2444%" y="133" width="0.4689%" height="15" fill="rgb(214,168,14)" fg:x="5989" fg:w="82"/><text x="34.5374%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.70%)</title><rect x="34.2444%" y="149" width="0.7033%" height="15" fill="rgb(213,34,29)" fg:x="5989" fg:w="123"/><text x="34.5374%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 1.20%)</title><rect x="34.2444%" y="165" width="1.2008%" height="15" fill="rgb(230,216,34)" fg:x="5989" fg:w="210"/><text x="34.5374%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="35.4451%" y="165" width="0.4689%" height="15" fill="rgb(222,157,29)" fg:x="6199" fg:w="82"/><text x="35.7381%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="35.9140%" y="165" width="0.5089%" height="15" fill="rgb(235,149,49)" fg:x="6281" fg:w="89"/><text x="36.2070%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="36.4229%" y="165" width="0.4689%" height="15" fill="rgb(242,156,34)" fg:x="6370" fg:w="82"/><text x="36.7159%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="36.8918%" y="165" width="0.4689%" height="15" fill="rgb(206,206,37)" fg:x="6452" fg:w="82"/><text x="37.1847%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="37.3606%" y="165" width="0.0286%" height="15" fill="rgb(214,62,32)" fg:x="6534" fg:w="5"/><text x="37.6536%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="37.3892%" y="165" width="0.5089%" height="15" fill="rgb(232,113,8)" fg:x="6539" fg:w="89"/><text x="37.6822%" y="175.50"></text></g><g><title>memcpy (392 instructions, 2.24%)</title><rect x="37.8981%" y="165" width="2.2414%" height="15" fill="rgb(223,73,10)" fg:x="6628" fg:w="392"/><text x="38.1911%" y="175.50">m..</text></g><g><title>memcpy (392 instructions, 2.24%)</title><rect x="40.1395%" y="165" width="2.2414%" height="15" fill="rgb(235,46,38)" fg:x="7020" fg:w="392"/><text x="40.4325%" y="175.50">m..</text></g><g><title>memcpy (504 instructions, 2.88%)</title><rect x="42.3809%" y="165" width="2.8818%" height="15" fill="rgb(216,158,28)" fg:x="7412" fg:w="504"/><text x="42.6739%" y="175.50">me..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 44.93%)</title><rect x="7.4504%" y="181" width="44.9254%" height="15" fill="rgb(232,137,0)" fg:x="1303" fg:w="7857"/><text x="7.7434%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 2.33%)</title><rect x="52.3758%" y="181" width="2.3329%" height="15" fill="rgb(233,93,8)" fg:x="9160" fg:w="408"/><text x="52.6687%" y="191.50">m..</text></g><g><title>memcpy (408 instructions, 2.33%)</title><rect x="54.7087%" y="181" width="2.3329%" height="15" fill="rgb(212,55,4)" fg:x="9568" fg:w="408"/><text x="55.0016%" y="191.50">m..</text></g><g><title>candid::types::internal::find_type (24 instructions, 0.14%)</title><rect x="57.0416%" y="181" width="0.1372%" height="15" fill="rgb(242,69,10)" fg:x="9976" fg:w="24"/><text x="57.3345%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="57.1788%" y="181" width="0.4689%" height="15" fill="rgb(252,111,43)" fg:x="10000" fg:w="82"/><text x="57.4718%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="57.6477%" y="165" width="0.4689%" height="15" fill="rgb(232,6,40)" fg:x="10082" fg:w="82"/><text x="57.9406%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.95%)</title><rect x="57.6477%" y="181" width="0.9492%" height="15" fill="rgb(216,222,11)" fg:x="10082" fg:w="166"/><text x="57.9406%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="58.5968%" y="181" width="0.4689%" height="15" fill="rgb(224,149,47)" fg:x="10248" fg:w="82"/><text x="58.8898%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.44%)</title><rect x="59.0657%" y="165" width="0.4403%" height="15" fill="rgb(246,104,10)" fg:x="10330" fg:w="77"/><text x="59.3587%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.51%)</title><rect x="59.5060%" y="149" width="0.5089%" height="15" fill="rgb(205,125,18)" fg:x="10407" fg:w="89"/><text x="59.7989%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.91%)</title><rect x="59.5060%" y="165" width="0.9149%" height="15" fill="rgb(238,29,15)" fg:x="10407" fg:w="160"/><text x="59.7989%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 2.38%)</title><rect x="59.0657%" y="181" width="2.3786%" height="15" fill="rgb(226,50,11)" fg:x="10330" fg:w="416"/><text x="59.3587%" y="191.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.28%)</title><rect x="61.4443%" y="165" width="0.2802%" height="15" fill="rgb(254,17,46)" fg:x="10746" fg:w="49"/><text x="61.7373%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="61.7245%" y="165" width="0.0801%" height="15" fill="rgb(241,111,5)" fg:x="10795" fg:w="14"/><text x="62.0175%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 1.14%)</title><rect x="61.4443%" y="181" width="1.1436%" height="15" fill="rgb(240,106,29)" fg:x="10746" fg:w="200"/><text x="61.7373%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.28%)</title><rect x="62.5879%" y="181" width="0.2802%" height="15" fill="rgb(251,3,17)" fg:x="10946" fg:w="49"/><text x="62.8809%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.47%)</title><rect x="62.8681%" y="165" width="0.4746%" height="15" fill="rgb(242,71,10)" fg:x="10995" fg:w="83"/><text x="63.1611%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.13%)</title><rect x="63.7486%" y="149" width="0.1315%" height="15" fill="rgb(213,14,5)" fg:x="11149" fg:w="23"/><text x="64.0416%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.79%)</title><rect x="63.7486%" y="165" width="0.7891%" height="15" fill="rgb(208,189,36)" fg:x="11149" fg:w="138"/><text x="64.0416%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 2.08%)</title><rect x="62.8681%" y="181" width="2.0756%" height="15" fill="rgb(211,46,1)" fg:x="10995" fg:w="363"/><text x="63.1611%" y="191.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.21%)</title><rect x="64.9437%" y="165" width="0.2116%" height="15" fill="rgb(233,117,31)" fg:x="11358" fg:w="37"/><text x="65.2366%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.19%)</title><rect x="65.1552%" y="165" width="0.1944%" height="15" fill="rgb(235,4,49)" fg:x="11395" fg:w="34"/><text x="65.4482%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.19%)</title><rect x="65.3496%" y="165" width="0.1944%" height="15" fill="rgb(207,26,9)" fg:x="11429" fg:w="34"/><text x="65.6426%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.18%)</title><rect x="65.5441%" y="165" width="0.1773%" height="15" fill="rgb(210,182,17)" fg:x="11463" fg:w="31"/><text x="65.8370%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.49%)</title><rect x="64.9437%" y="181" width="1.4924%" height="15" fill="rgb(206,209,39)" fg:x="11358" fg:w="261"/><text x="65.2366%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="66.4360%" y="181" width="0.0801%" height="15" fill="rgb(220,24,12)" fg:x="11619" fg:w="14"/><text x="66.7290%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="66.5161%" y="181" width="0.0801%" height="15" fill="rgb(207,207,31)" fg:x="11633" fg:w="14"/><text x="66.8091%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="66.5961%" y="181" width="0.0801%" height="15" fill="rgb(206,120,54)" fg:x="11647" fg:w="14"/><text x="66.8891%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.21%)</title><rect x="66.6762%" y="181" width="0.2116%" height="15" fill="rgb(243,225,40)" fg:x="11661" fg:w="37"/><text x="66.9692%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="66.8878%" y="165" width="0.0457%" height="15" fill="rgb(208,117,7)" fg:x="11698" fg:w="8"/><text x="67.1807%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="66.9335%" y="149" width="0.1544%" height="15" fill="rgb(217,161,3)" fg:x="11706" fg:w="27"/><text x="67.2265%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="67.0879%" y="149" width="0.1544%" height="15" fill="rgb(227,27,23)" fg:x="11733" fg:w="27"/><text x="67.3809%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.13%)</title><rect x="66.9335%" y="165" width="1.1264%" height="15" fill="rgb(240,144,28)" fg:x="11706" fg:w="197"/><text x="67.2265%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="68.0599%" y="133" width="0.1544%" height="15" fill="rgb(214,136,6)" fg:x="11903" fg:w="27"/><text x="68.3529%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.81%)</title><rect x="68.0599%" y="149" width="0.8119%" height="15" fill="rgb(208,188,51)" fg:x="11903" fg:w="142"/><text x="68.3529%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 1.22%)</title><rect x="68.0599%" y="165" width="1.2179%" height="15" fill="rgb(235,54,53)" fg:x="11903" fg:w="213"/><text x="68.3529%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="69.2778%" y="165" width="0.0801%" height="15" fill="rgb(253,120,0)" fg:x="12116" fg:w="14"/><text x="69.5708%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (521 instructions, 2.98%)</title><rect x="66.8878%" y="181" width="2.9790%" height="15" fill="rgb(246,91,48)" fg:x="11698" fg:w="521"/><text x="67.1807%" y="191.50">co..</text></g><g><title>candid::utils::decode_args_with_config_debug (11,348 instructions, 64.89%)</title><rect x="7.4504%" y="197" width="64.8865%" height="15" fill="rgb(224,100,4)" fg:x="1303" fg:w="11348"/><text x="7.7434%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="72.3369%" y="181" width="0.1544%" height="15" fill="rgb(225,135,18)" fg:x="12651" fg:w="27"/><text x="72.6299%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.81%)</title><rect x="72.3369%" y="197" width="0.8119%" height="15" fill="rgb(210,182,25)" fg:x="12651" fg:w="142"/><text x="72.6299%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,736 instructions, 72.82%)</title><rect x="0.9377%" y="213" width="72.8229%" height="15" fill="rgb(214,13,21)" fg:x="164" fg:w="12736"/><text x="1.2307%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.35%)</title><rect x="73.7606%" y="165" width="0.3488%" height="15" fill="rgb(232,25,11)" fg:x="12900" fg:w="61"/><text x="74.0536%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.75%)</title><rect x="73.7606%" y="181" width="0.7548%" height="15" fill="rgb(232,34,52)" fg:x="12900" fg:w="132"/><text x="74.0536%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="74.5154%" y="165" width="0.1544%" height="15" fill="rgb(224,214,28)" fg:x="13032" fg:w="27"/><text x="74.8084%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.66%)</title><rect x="74.5154%" y="181" width="0.6633%" height="15" fill="rgb(247,113,44)" fg:x="13032" fg:w="116"/><text x="74.8084%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 2.42%)</title><rect x="73.7606%" y="197" width="2.4244%" height="15" fill="rgb(213,53,53)" fg:x="12900" fg:w="424"/><text x="74.0536%" y="207.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.96%)</title><rect x="76.1850%" y="181" width="2.9619%" height="15" fill="rgb(225,110,25)" fg:x="13324" fg:w="518"/><text x="76.4780%" y="191.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.47%)</title><rect x="79.1469%" y="133" width="0.4689%" height="15" fill="rgb(246,204,4)" fg:x="13842" fg:w="82"/><text x="79.4399%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.70%)</title><rect x="79.1469%" y="149" width="0.7033%" height="15" fill="rgb(244,15,21)" fg:x="13842" fg:w="123"/><text x="79.4399%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 1.18%)</title><rect x="79.1469%" y="165" width="1.1779%" height="15" fill="rgb(218,172,47)" fg:x="13842" fg:w="206"/><text x="79.4399%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="80.3248%" y="165" width="0.0858%" height="15" fill="rgb(230,171,13)" fg:x="14048" fg:w="15"/><text x="80.6177%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="80.4105%" y="165" width="0.0858%" height="15" fill="rgb(234,120,41)" fg:x="14063" fg:w="15"/><text x="80.7035%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 2.45%)</title><rect x="79.1469%" y="181" width="2.4473%" height="15" fill="rgb(229,203,48)" fg:x="13842" fg:w="428"/><text x="79.4399%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.95%)</title><rect x="81.5941%" y="181" width="2.9504%" height="15" fill="rgb(205,197,39)" fg:x="14270" fg:w="516"/><text x="81.8871%" y="191.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="84.5446%" y="181" width="0.0400%" height="15" fill="rgb(217,29,32)" fg:x="14786" fg:w="7"/><text x="84.8375%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 8.84%)</title><rect x="76.1850%" y="197" width="8.8398%" height="15" fill="rgb(221,147,3)" fg:x="13324" fg:w="1546"/><text x="76.4780%" y="207.50">candid::se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="85.0249%" y="197" width="0.0457%" height="15" fill="rgb(250,55,0)" fg:x="14870" fg:w="8"/><text x="85.3178%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="85.0706%" y="197" width="0.0457%" height="15" fill="rgb(243,32,18)" fg:x="14878" fg:w="8"/><text x="85.3636%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.35%)</title><rect x="85.1164%" y="197" width="0.3488%" height="15" fill="rgb(234,96,42)" fg:x="14886" fg:w="61"/><text x="85.4093%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 15.32%)</title><rect x="73.7606%" y="213" width="15.3239%" height="15" fill="rgb(228,154,48)" fg:x="12900" fg:w="2680"/><text x="74.0536%" y="223.50">ic_cdk::api::call::r..</text></g><g><title>vector::__canister_method_batch_put::{{closure}} (16,891 instructions, 96.58%)</title><rect x="0.9377%" y="229" width="96.5807%" height="15" fill="rgb(208,27,7)" fg:x="164" fg:w="16891"/><text x="1.2307%" y="239.50">vector::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.09%)</title><rect x="97.5184%" y="229" width="0.0858%" height="15" fill="rgb(239,137,3)" fg:x="17055" fg:w="15"/><text x="97.8114%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="98.1188%" y="197" width="0.1544%" height="15" fill="rgb(243,168,49)" fg:x="17160" fg:w="27"/><text x="98.4118%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 1.17%)</title><rect x="97.6099%" y="213" width="1.1722%" height="15" fill="rgb(230,63,52)" fg:x="17071" fg:w="205"/><text x="97.9029%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 1.85%)</title><rect x="97.6042%" y="229" width="1.8469%" height="15" fill="rgb(227,125,39)" fg:x="17070" fg:w="323"/><text x="97.8972%" y="239.50"></text></g><g><title>all (17,489 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,59,3)" fg:x="0" fg:w="17489"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_put (17,489 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,120,33)" fg:x="0" fg:w="17489"/><text x="0.2930%" y="255.50">canister_update batch_put</text></g></svg></svg>