<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="25331"><g><title>ic_cdk::setup (19 instructions, 0.08%)</title><rect x="0.0000%" y="197" width="0.0750%" height="15" fill="rgb(212,34,26)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="0.0750%" y="197" width="0.3000%" height="15" fill="rgb(251,88,4)" fg:x="19" fg:w="76"/><text x="0.3680%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="0.3750%" y="197" width="0.3000%" height="15" fill="rgb(223,3,52)" fg:x="95" fg:w="76"/><text x="0.6680%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="0.6751%" y="165" width="0.3000%" height="15" fill="rgb(214,3,2)" fg:x="171" fg:w="76"/><text x="0.9680%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.27%)</title><rect x="0.9751%" y="149" width="0.2724%" height="15" fill="rgb(221,24,45)" fg:x="247" fg:w="69"/><text x="1.2681%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.2475%" y="133" width="0.0158%" height="15" fill="rgb(227,64,47)" fg:x="316" fg:w="4"/><text x="1.5405%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.60%)</title><rect x="1.2475%" y="149" width="1.6028%" height="15" fill="rgb(248,38,27)" fg:x="316" fg:w="406"/><text x="1.5405%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.32%)</title><rect x="2.8503%" y="149" width="0.3237%" height="15" fill="rgb(243,128,28)" fg:x="722" fg:w="82"/><text x="3.1432%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.21%)</title><rect x="3.1740%" y="149" width="0.2132%" height="15" fill="rgb(224,168,47)" fg:x="804" fg:w="54"/><text x="3.4669%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.21%)</title><rect x="3.3872%" y="149" width="0.2132%" height="15" fill="rgb(208,188,19)" fg:x="858" fg:w="54"/><text x="3.6801%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.21%)</title><rect x="3.6003%" y="149" width="0.2132%" height="15" fill="rgb(221,173,5)" fg:x="912" fg:w="54"/><text x="3.8933%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.21%)</title><rect x="3.8135%" y="149" width="0.2132%" height="15" fill="rgb(222,123,9)" fg:x="966" fg:w="54"/><text x="4.1065%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.27%)</title><rect x="4.0267%" y="149" width="0.2724%" height="15" fill="rgb(247,135,25)" fg:x="1020" fg:w="69"/><text x="4.3197%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.26%)</title><rect x="4.2991%" y="149" width="0.2566%" height="15" fill="rgb(253,187,17)" fg:x="1089" fg:w="65"/><text x="4.5920%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="4.5557%" y="133" width="0.0158%" height="15" fill="rgb(219,27,33)" fg:x="1154" fg:w="4"/><text x="4.8487%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.60%)</title><rect x="4.5557%" y="149" width="1.6028%" height="15" fill="rgb(249,139,26)" fg:x="1154" fg:w="406"/><text x="4.8487%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="6.1585%" y="149" width="0.0632%" height="15" fill="rgb(224,149,45)" fg:x="1560" fg:w="16"/><text x="6.4514%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="6.2216%" y="133" width="0.3000%" height="15" fill="rgb(250,25,7)" fg:x="1576" fg:w="76"/><text x="6.5146%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.24%)</title><rect x="6.5217%" y="101" width="0.2369%" height="15" fill="rgb(233,92,0)" fg:x="1652" fg:w="60"/><text x="6.8146%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.34%)</title><rect x="6.5217%" y="117" width="0.3356%" height="15" fill="rgb(229,183,34)" fg:x="1652" fg:w="85"/><text x="6.8146%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="6.8572%" y="69" width="0.0355%" height="15" fill="rgb(244,114,27)" fg:x="1737" fg:w="9"/><text x="7.1502%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.12%)</title><rect x="6.8927%" y="53" width="0.1184%" height="15" fill="rgb(233,116,6)" fg:x="1746" fg:w="30"/><text x="7.1857%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.22%)</title><rect x="6.8927%" y="69" width="0.2171%" height="15" fill="rgb(207,205,22)" fg:x="1746" fg:w="55"/><text x="7.1857%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.47%)</title><rect x="6.8572%" y="85" width="0.4658%" height="15" fill="rgb(250,115,34)" fg:x="1737" fg:w="118"/><text x="7.1502%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.68%)</title><rect x="6.8572%" y="101" width="0.6751%" height="15" fill="rgb(224,132,36)" fg:x="1737" fg:w="171"/><text x="7.1502%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.69%)</title><rect x="6.8572%" y="117" width="0.6948%" height="15" fill="rgb(210,227,15)" fg:x="1737" fg:w="176"/><text x="7.1502%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.47%)</title><rect x="6.5217%" y="133" width="1.4686%" height="15" fill="rgb(252,144,49)" fg:x="1652" fg:w="372"/><text x="6.8146%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.33%)</title><rect x="6.2216%" y="149" width="2.3252%" height="15" fill="rgb(223,58,6)" fg:x="1576" fg:w="589"/><text x="6.5146%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.32%)</title><rect x="8.5468%" y="149" width="0.3237%" height="15" fill="rgb(211,222,20)" fg:x="2165" fg:w="82"/><text x="8.8398%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.22%)</title><rect x="8.8706%" y="149" width="0.2171%" height="15" fill="rgb(220,50,9)" fg:x="2247" fg:w="55"/><text x="9.1635%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.25%)</title><rect x="9.0877%" y="149" width="0.2487%" height="15" fill="rgb(243,6,33)" fg:x="2302" fg:w="63"/><text x="9.3806%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.26%)</title><rect x="9.3364%" y="149" width="0.2566%" height="15" fill="rgb(233,122,14)" fg:x="2365" fg:w="65"/><text x="9.6294%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="9.5930%" y="117" width="0.0158%" height="15" fill="rgb(243,43,38)" fg:x="2430" fg:w="4"/><text x="9.8860%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.60%)</title><rect x="9.5930%" y="133" width="1.6028%" height="15" fill="rgb(247,6,52)" fg:x="2430" fg:w="406"/><text x="9.8860%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.06%)</title><rect x="11.1958%" y="133" width="0.0632%" height="15" fill="rgb(222,51,37)" fg:x="2836" fg:w="16"/><text x="11.4887%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="11.2589%" y="117" width="0.3000%" height="15" fill="rgb(214,117,19)" fg:x="2852" fg:w="76"/><text x="11.5519%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.24%)</title><rect x="11.5590%" y="85" width="0.2369%" height="15" fill="rgb(221,3,24)" fg:x="2928" fg:w="60"/><text x="11.8519%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.34%)</title><rect x="11.5590%" y="101" width="0.3356%" height="15" fill="rgb(238,74,36)" fg:x="2928" fg:w="85"/><text x="11.8519%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="11.8945%" y="53" width="0.0355%" height="15" fill="rgb(205,11,11)" fg:x="3013" fg:w="9"/><text x="12.1875%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.12%)</title><rect x="11.9300%" y="37" width="0.1184%" height="15" fill="rgb(252,178,39)" fg:x="3022" fg:w="30"/><text x="12.2230%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.22%)</title><rect x="11.9300%" y="53" width="0.2171%" height="15" fill="rgb(235,189,0)" fg:x="3022" fg:w="55"/><text x="12.2230%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.47%)</title><rect x="11.8945%" y="69" width="0.4658%" height="15" fill="rgb(242,151,41)" fg:x="3013" fg:w="118"/><text x="12.1875%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.68%)</title><rect x="11.8945%" y="85" width="0.6751%" height="15" fill="rgb(250,107,0)" fg:x="3013" fg:w="171"/><text x="12.1875%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.69%)</title><rect x="11.8945%" y="101" width="0.6948%" height="15" fill="rgb(236,80,19)" fg:x="3013" fg:w="176"/><text x="12.1875%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.47%)</title><rect x="11.5590%" y="117" width="1.4686%" height="15" fill="rgb(244,39,53)" fg:x="2928" fg:w="372"/><text x="11.8519%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.33%)</title><rect x="11.2589%" y="133" width="2.3252%" height="15" fill="rgb(217,86,38)" fg:x="2852" fg:w="589"/><text x="11.5519%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.32%)</title><rect x="13.5841%" y="133" width="0.3237%" height="15" fill="rgb(247,27,48)" fg:x="3441" fg:w="82"/><text x="13.8771%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.22%)</title><rect x="13.9079%" y="133" width="0.2171%" height="15" fill="rgb(213,202,38)" fg:x="3523" fg:w="55"/><text x="14.2008%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.27%)</title><rect x="14.1250%" y="117" width="0.2724%" height="15" fill="rgb(253,69,2)" fg:x="3578" fg:w="69"/><text x="14.4180%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.36%)</title><rect x="14.3974%" y="117" width="0.3592%" height="15" fill="rgb(210,132,46)" fg:x="3647" fg:w="91"/><text x="14.6903%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.25%)</title><rect x="14.7566%" y="117" width="0.2487%" height="15" fill="rgb(219,57,7)" fg:x="3738" fg:w="63"/><text x="15.0496%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.11%)</title><rect x="14.1250%" y="133" width="1.1133%" height="15" fill="rgb(235,202,21)" fg:x="3578" fg:w="282"/><text x="14.4180%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.31%)</title><rect x="15.2382%" y="133" width="0.3079%" height="15" fill="rgb(242,63,18)" fg:x="3860" fg:w="78"/><text x="15.5312%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 6.75%)</title><rect x="9.5930%" y="149" width="6.7546%" height="15" fill="rgb(214,155,20)" fg:x="2430" fg:w="1711"/><text x="9.8860%" y="159.50">binread..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.25%)</title><rect x="16.3476%" y="149" width="0.2487%" height="15" fill="rgb(228,122,32)" fg:x="4141" fg:w="63"/><text x="16.6405%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="16.5963%" y="149" width="0.0513%" height="15" fill="rgb(233,78,53)" fg:x="4204" fg:w="13"/><text x="16.8892%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.05%)</title><rect x="16.6476%" y="149" width="0.0513%" height="15" fill="rgb(236,61,4)" fg:x="4217" fg:w="13"/><text x="16.9406%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="16.6989%" y="149" width="0.0276%" height="15" fill="rgb(226,225,27)" fg:x="4230" fg:w="7"/><text x="16.9919%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.06%)</title><rect x="16.7265%" y="149" width="0.0592%" height="15" fill="rgb(235,198,14)" fg:x="4237" fg:w="15"/><text x="17.0195%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="16.7858%" y="133" width="0.3000%" height="15" fill="rgb(246,137,17)" fg:x="4252" fg:w="76"/><text x="17.0787%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.63%)</title><rect x="16.7858%" y="149" width="0.6277%" height="15" fill="rgb(215,116,33)" fg:x="4252" fg:w="159"/><text x="17.0787%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="17.4134%" y="117" width="0.3000%" height="15" fill="rgb(210,98,22)" fg:x="4411" fg:w="76"/><text x="17.7064%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.43%)</title><rect x="17.4134%" y="133" width="0.4343%" height="15" fill="rgb(231,224,7)" fg:x="4411" fg:w="110"/><text x="17.7064%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.70%)</title><rect x="17.4134%" y="149" width="0.7027%" height="15" fill="rgb(244,112,39)" fg:x="4411" fg:w="178"/><text x="17.7064%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="18.1161%" y="149" width="0.3000%" height="15" fill="rgb(247,178,3)" fg:x="4589" fg:w="76"/><text x="18.4091%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.32%)</title><rect x="18.4162%" y="149" width="0.3198%" height="15" fill="rgb(240,0,46)" fg:x="4665" fg:w="81"/><text x="18.7091%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="18.7359%" y="149" width="0.3000%" height="15" fill="rgb(248,18,21)" fg:x="4746" fg:w="76"/><text x="19.0289%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="19.0360%" y="149" width="0.3000%" height="15" fill="rgb(237,215,38)" fg:x="4822" fg:w="76"/><text x="19.3289%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.32%)</title><rect x="19.3439%" y="149" width="0.3198%" height="15" fill="rgb(241,83,27)" fg:x="4900" fg:w="81"/><text x="19.6369%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.58%)</title><rect x="19.6637%" y="149" width="1.5751%" height="15" fill="rgb(228,111,43)" fg:x="4981" fg:w="399"/><text x="19.9566%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.58%)</title><rect x="21.2388%" y="149" width="1.5751%" height="15" fill="rgb(232,127,15)" fg:x="5380" fg:w="399"/><text x="21.5318%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 25.50%)</title><rect x="0.9751%" y="165" width="25.4984%" height="15" fill="rgb(240,75,22)" fg:x="247" fg:w="6459"/><text x="1.2681%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 1.40%)</title><rect x="26.4735%" y="165" width="1.3975%" height="15" fill="rgb(225,13,41)" fg:x="6706" fg:w="354"/><text x="26.7665%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="27.8710%" y="149" width="0.0197%" height="15" fill="rgb(211,42,45)" fg:x="7060" fg:w="5"/><text x="28.1640%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.15%)</title><rect x="27.8710%" y="165" width="0.1540%" height="15" fill="rgb(225,0,32)" fg:x="7060" fg:w="39"/><text x="28.1640%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="28.0249%" y="165" width="0.3000%" height="15" fill="rgb(235,81,37)" fg:x="7099" fg:w="76"/><text x="28.3179%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="28.3250%" y="149" width="0.0197%" height="15" fill="rgb(224,0,14)" fg:x="7175" fg:w="5"/><text x="28.6179%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.21%)</title><rect x="28.3447%" y="133" width="0.2092%" height="15" fill="rgb(214,73,8)" fg:x="7180" fg:w="53"/><text x="28.6377%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.35%)</title><rect x="28.5539%" y="133" width="0.3474%" height="15" fill="rgb(234,174,40)" fg:x="7233" fg:w="88"/><text x="28.8469%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.64%)</title><rect x="28.9013%" y="133" width="0.6395%" height="15" fill="rgb(205,104,2)" fg:x="7321" fg:w="162"/><text x="29.1943%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.13%)</title><rect x="28.3447%" y="149" width="2.1318%" height="15" fill="rgb(241,47,9)" fg:x="7180" fg:w="540"/><text x="28.6377%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (749 instructions, 2.96%)</title><rect x="28.3250%" y="165" width="2.9569%" height="15" fill="rgb(220,51,11)" fg:x="7175" fg:w="749"/><text x="28.6179%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="31.2818%" y="165" width="0.3000%" height="15" fill="rgb(213,27,50)" fg:x="7924" fg:w="76"/><text x="31.5748%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="31.5819%" y="149" width="0.0197%" height="15" fill="rgb(217,104,45)" fg:x="8000" fg:w="5"/><text x="31.8748%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.21%)</title><rect x="31.6016%" y="133" width="0.2092%" height="15" fill="rgb(209,73,28)" fg:x="8005" fg:w="53"/><text x="31.8946%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.35%)</title><rect x="31.8108%" y="133" width="0.3474%" height="15" fill="rgb(208,227,27)" fg:x="8058" fg:w="88"/><text x="32.1038%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.64%)</title><rect x="32.1582%" y="133" width="0.6395%" height="15" fill="rgb(245,94,38)" fg:x="8146" fg:w="162"/><text x="32.4512%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.13%)</title><rect x="31.6016%" y="149" width="2.1318%" height="15" fill="rgb(216,160,10)" fg:x="8005" fg:w="540"/><text x="31.8946%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.27%)</title><rect x="33.7334%" y="149" width="0.2684%" height="15" fill="rgb(222,209,28)" fg:x="8545" fg:w="68"/><text x="34.0263%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.32%)</title><rect x="34.0018%" y="133" width="0.3198%" height="15" fill="rgb(242,201,36)" fg:x="8613" fg:w="81"/><text x="34.2948%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.43%)</title><rect x="34.0018%" y="149" width="0.4264%" height="15" fill="rgb(229,212,25)" fg:x="8613" fg:w="108"/><text x="34.2948%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 3.51%)</title><rect x="31.5819%" y="165" width="3.5135%" height="15" fill="rgb(251,111,11)" fg:x="8000" fg:w="890"/><text x="31.8748%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.21%)</title><rect x="35.0953%" y="117" width="0.2092%" height="15" fill="rgb(240,112,44)" fg:x="8890" fg:w="53"/><text x="35.3883%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.31%)</title><rect x="35.0953%" y="133" width="0.3079%" height="15" fill="rgb(242,229,11)" fg:x="8890" fg:w="78"/><text x="35.3883%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.16%)</title><rect x="35.0953%" y="149" width="1.1567%" height="15" fill="rgb(206,177,33)" fg:x="8890" fg:w="293"/><text x="35.3883%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1323 (15 instructions, 0.06%)</title><rect x="36.2520%" y="149" width="0.0592%" height="15" fill="rgb(233,44,1)" fg:x="9183" fg:w="15"/><text x="36.5450%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="36.3112%" y="149" width="0.0434%" height="15" fill="rgb(247,123,9)" fg:x="9198" fg:w="11"/><text x="36.6042%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.89%)</title><rect x="35.0953%" y="165" width="1.8870%" height="15" fill="rgb(245,168,35)" fg:x="8890" fg:w="478"/><text x="35.3883%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.19%)</title><rect x="36.9824%" y="165" width="0.1855%" height="15" fill="rgb(222,171,30)" fg:x="9368" fg:w="47"/><text x="37.2753%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.49%)</title><rect x="37.1679%" y="149" width="0.4856%" height="15" fill="rgb(253,214,51)" fg:x="9415" fg:w="123"/><text x="37.4609%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.49%)</title><rect x="37.7601%" y="149" width="0.4856%" height="15" fill="rgb(213,24,46)" fg:x="9565" fg:w="123"/><text x="38.0530%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.18%)</title><rect x="37.1679%" y="165" width="1.1843%" height="15" fill="rgb(209,51,29)" fg:x="9415" fg:w="300"/><text x="37.4609%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.11%)</title><rect x="38.3522%" y="149" width="0.1105%" height="15" fill="rgb(222,147,4)" fg:x="9715" fg:w="28"/><text x="38.6452%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2506 (15 instructions, 0.06%)</title><rect x="38.4628%" y="149" width="0.0592%" height="15" fill="rgb(218,224,27)" fg:x="9743" fg:w="15"/><text x="38.7557%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2506 (15 instructions, 0.06%)</title><rect x="38.5220%" y="149" width="0.0592%" height="15" fill="rgb(214,215,9)" fg:x="9758" fg:w="15"/><text x="38.8149%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.53%)</title><rect x="38.3522%" y="165" width="0.5329%" height="15" fill="rgb(245,210,48)" fg:x="9715" fg:w="135"/><text x="38.6452%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="38.8852%" y="165" width="0.0434%" height="15" fill="rgb(211,59,54)" fg:x="9850" fg:w="11"/><text x="39.1781%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="38.9286%" y="165" width="0.0434%" height="15" fill="rgb(209,118,46)" fg:x="9861" fg:w="11"/><text x="39.2216%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="38.9720%" y="165" width="0.0434%" height="15" fill="rgb(210,119,49)" fg:x="9872" fg:w="11"/><text x="39.2650%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.62%)</title><rect x="39.0154%" y="165" width="1.6186%" height="15" fill="rgb(230,96,27)" fg:x="9883" fg:w="410"/><text x="39.3084%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.05%)</title><rect x="40.6340%" y="133" width="0.0474%" height="15" fill="rgb(227,85,32)" fg:x="10293" fg:w="12"/><text x="40.9270%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.66%)</title><rect x="40.6814%" y="133" width="0.6632%" height="15" fill="rgb(252,215,53)" fg:x="10305" fg:w="168"/><text x="40.9743%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.38%)</title><rect x="41.3446%" y="101" width="0.3750%" height="15" fill="rgb(227,215,2)" fg:x="10473" fg:w="95"/><text x="41.6376%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.77%)</title><rect x="41.3446%" y="117" width="0.7698%" height="15" fill="rgb(207,34,3)" fg:x="10473" fg:w="195"/><text x="41.6376%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 0.88%)</title><rect x="41.3446%" y="133" width="0.8764%" height="15" fill="rgb(248,41,37)" fg:x="10473" fg:w="222"/><text x="41.6376%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.04%)</title><rect x="42.2210%" y="133" width="0.0434%" height="15" fill="rgb(218,52,16)" fg:x="10695" fg:w="11"/><text x="42.5140%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (453 instructions, 1.79%)</title><rect x="40.6340%" y="149" width="1.7883%" height="15" fill="rgb(231,109,23)" fg:x="10293" fg:w="453"/><text x="40.9270%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (491 instructions, 1.94%)</title><rect x="40.6340%" y="165" width="1.9383%" height="15" fill="rgb(250,11,45)" fg:x="10293" fg:w="491"/><text x="40.9270%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.21%)</title><rect x="42.5723%" y="149" width="0.2132%" height="15" fill="rgb(238,223,33)" fg:x="10784" fg:w="54"/><text x="42.8653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.38%)</title><rect x="42.7855%" y="149" width="0.3750%" height="15" fill="rgb(231,160,10)" fg:x="10838" fg:w="95"/><text x="43.0785%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.91%)</title><rect x="42.5723%" y="165" width="0.9080%" height="15" fill="rgb(226,103,41)" fg:x="10784" fg:w="230"/><text x="42.8653%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,236 instructions, 44.36%)</title><rect x="0.6751%" y="181" width="44.3567%" height="15" fill="rgb(213,66,35)" fg:x="171" fg:w="11236"/><text x="0.9680%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="45.0318%" y="149" width="0.0197%" height="15" fill="rgb(225,166,48)" fg:x="11407" fg:w="5"/><text x="45.3247%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.21%)</title><rect x="45.0515%" y="117" width="0.2132%" height="15" fill="rgb(226,49,1)" fg:x="11412" fg:w="54"/><text x="45.3445%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.53%)</title><rect x="45.0515%" y="133" width="0.5329%" height="15" fill="rgb(237,79,39)" fg:x="11412" fg:w="135"/><text x="45.3445%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.64%)</title><rect x="45.0515%" y="149" width="0.6395%" height="15" fill="rgb(253,10,29)" fg:x="11412" fg:w="162"/><text x="45.3445%" y="159.50"></text></g><g><title>memset (136 instructions, 0.54%)</title><rect x="45.6911%" y="149" width="0.5369%" height="15" fill="rgb(215,102,35)" fg:x="11574" fg:w="136"/><text x="45.9840%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 1.83%)</title><rect x="45.0318%" y="165" width="1.8278%" height="15" fill="rgb(248,183,2)" fg:x="11407" fg:w="463"/><text x="45.3247%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.13%)</title><rect x="46.8596%" y="149" width="0.1263%" height="15" fill="rgb(215,110,19)" fg:x="11870" fg:w="32"/><text x="47.1525%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.30%)</title><rect x="46.9859%" y="101" width="0.3000%" height="15" fill="rgb(224,76,19)" fg:x="11902" fg:w="76"/><text x="47.2789%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.43%)</title><rect x="46.9859%" y="117" width="0.4343%" height="15" fill="rgb(247,222,54)" fg:x="11902" fg:w="110"/><text x="47.2789%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.69%)</title><rect x="46.9859%" y="133" width="0.6909%" height="15" fill="rgb(230,123,45)" fg:x="11902" fg:w="175"/><text x="47.2789%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="47.6768%" y="133" width="0.0434%" height="15" fill="rgb(221,93,26)" fg:x="12077" fg:w="11"/><text x="47.9697%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.04%)</title><rect x="47.7202%" y="133" width="0.0434%" height="15" fill="rgb(212,129,43)" fg:x="12088" fg:w="11"/><text x="48.0132%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 1.42%)</title><rect x="46.9859%" y="149" width="1.4172%" height="15" fill="rgb(234,98,22)" fg:x="11902" fg:w="359"/><text x="47.2789%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.12%)</title><rect x="48.4031%" y="149" width="0.1184%" height="15" fill="rgb(214,63,14)" fg:x="12261" fg:w="30"/><text x="48.6961%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="48.5216%" y="149" width="0.0197%" height="15" fill="rgb(234,144,52)" fg:x="12291" fg:w="5"/><text x="48.8145%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 1.95%)</title><rect x="46.8596%" y="165" width="1.9502%" height="15" fill="rgb(220,153,23)" fg:x="11870" fg:w="494"/><text x="47.1525%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="48.8098%" y="165" width="0.0197%" height="15" fill="rgb(241,69,48)" fg:x="12364" fg:w="5"/><text x="49.1027%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.22%)</title><rect x="48.8295%" y="165" width="0.2171%" height="15" fill="rgb(209,149,36)" fg:x="12369" fg:w="55"/><text x="49.1225%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,091 instructions, 4.31%)</title><rect x="45.0318%" y="181" width="4.3070%" height="15" fill="rgb(212,139,38)" fg:x="11407" fg:w="1091"/><text x="45.3247%" y="191.50">ic_c..</text></g><g><title>vector::batch_put_6_::{{closure}} (24,869 instructions, 98.18%)</title><rect x="0.6751%" y="197" width="98.1761%" height="15" fill="rgb(247,198,15)" fg:x="171" fg:w="24869"/><text x="0.9680%" y="207.50">vector::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.05%)</title><rect x="98.8512%" y="197" width="0.0474%" height="15" fill="rgb(225,33,8)" fg:x="25040" fg:w="12"/><text x="99.1442%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.32%)</title><rect x="98.8986%" y="197" width="0.3198%" height="15" fill="rgb(240,90,28)" fg:x="25052" fg:w="81"/><text x="99.1916%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.39%)</title><rect x="99.2183%" y="197" width="0.3948%" height="15" fill="rgb(244,168,29)" fg:x="25133" fg:w="100"/><text x="99.5113%" y="207.50"></text></g><g><title>all (25,331 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,166,49)" fg:x="0" fg:w="25331"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (25,331 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,216,44)" fg:x="0" fg:w="25331"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>