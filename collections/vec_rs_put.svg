<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18421"><g><title>ic_cdk::setup (24 instructions, 0.13%)</title><rect x="0.0000%" y="197" width="0.1303%" height="15" fill="rgb(240,194,26)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="0.1303%" y="197" width="0.4506%" height="15" fill="rgb(225,191,3)" fg:x="24" fg:w="83"/><text x="0.4233%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="0.5809%" y="197" width="0.4506%" height="15" fill="rgb(252,26,53)" fg:x="107" fg:w="83"/><text x="0.8738%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="1.0314%" y="165" width="0.4506%" height="15" fill="rgb(254,175,23)" fg:x="190" fg:w="83"/><text x="1.3244%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="1.4820%" y="149" width="0.4451%" height="15" fill="rgb(225,126,18)" fg:x="273" fg:w="82"/><text x="1.7750%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.9271%" y="133" width="0.0326%" height="15" fill="rgb(221,73,54)" fg:x="355" fg:w="6"/><text x="2.2201%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.40%)</title><rect x="1.9271%" y="149" width="2.4049%" height="15" fill="rgb(233,45,17)" fg:x="355" fg:w="443"/><text x="2.2201%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="4.3320%" y="149" width="0.5157%" height="15" fill="rgb(247,1,34)" fg:x="798" fg:w="95"/><text x="4.6250%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="4.8477%" y="149" width="0.3257%" height="15" fill="rgb(205,221,16)" fg:x="893" fg:w="60"/><text x="5.1407%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.1734%" y="149" width="0.3257%" height="15" fill="rgb(222,160,32)" fg:x="953" fg:w="60"/><text x="5.4664%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.4992%" y="149" width="0.3257%" height="15" fill="rgb(206,79,34)" fg:x="1013" fg:w="60"/><text x="5.7921%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.33%)</title><rect x="5.8249%" y="149" width="0.3257%" height="15" fill="rgb(237,7,28)" fg:x="1073" fg:w="60"/><text x="6.1178%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="6.1506%" y="149" width="0.4451%" height="15" fill="rgb(228,17,29)" fg:x="1133" fg:w="82"/><text x="6.4436%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.38%)</title><rect x="6.5957%" y="149" width="0.3800%" height="15" fill="rgb(234,95,33)" fg:x="1215" fg:w="70"/><text x="6.8887%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="6.9757%" y="133" width="0.0326%" height="15" fill="rgb(210,88,51)" fg:x="1285" fg:w="6"/><text x="7.2687%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.40%)</title><rect x="6.9757%" y="149" width="2.4049%" height="15" fill="rgb(211,79,53)" fg:x="1285" fg:w="443"/><text x="7.2687%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.10%)</title><rect x="9.3806%" y="149" width="0.1031%" height="15" fill="rgb(224,219,30)" fg:x="1728" fg:w="19"/><text x="9.6736%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="9.4837%" y="133" width="0.4506%" height="15" fill="rgb(249,130,1)" fg:x="1747" fg:w="83"/><text x="9.7767%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.36%)</title><rect x="9.9343%" y="101" width="0.3637%" height="15" fill="rgb(253,133,12)" fg:x="1830" fg:w="67"/><text x="10.2273%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.52%)</title><rect x="9.9343%" y="117" width="0.5211%" height="15" fill="rgb(244,214,45)" fg:x="1830" fg:w="96"/><text x="10.2273%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="10.4555%" y="69" width="0.0597%" height="15" fill="rgb(244,141,37)" fg:x="1926" fg:w="11"/><text x="10.7484%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.19%)</title><rect x="10.5152%" y="53" width="0.1900%" height="15" fill="rgb(235,75,10)" fg:x="1937" fg:w="35"/><text x="10.8081%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.35%)</title><rect x="10.5152%" y="69" width="0.3474%" height="15" fill="rgb(244,205,9)" fg:x="1937" fg:w="64"/><text x="10.8081%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.78%)</title><rect x="10.4555%" y="85" width="0.7817%" height="15" fill="rgb(250,95,26)" fg:x="1926" fg:w="144"/><text x="10.7484%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.13%)</title><rect x="10.4555%" y="101" width="1.1346%" height="15" fill="rgb(220,98,29)" fg:x="1926" fg:w="209"/><text x="10.7484%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.19%)</title><rect x="10.4555%" y="117" width="1.1889%" height="15" fill="rgb(249,97,54)" fg:x="1926" fg:w="219"/><text x="10.7484%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 2.46%)</title><rect x="9.9343%" y="133" width="2.4591%" height="15" fill="rgb(253,78,23)" fg:x="1830" fg:w="453"/><text x="10.2273%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 3.66%)</title><rect x="9.4837%" y="149" width="3.6589%" height="15" fill="rgb(235,37,48)" fg:x="1747" fg:w="674"/><text x="9.7767%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="13.1426%" y="149" width="0.5157%" height="15" fill="rgb(221,10,54)" fg:x="2421" fg:w="95"/><text x="13.4356%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="13.6583%" y="149" width="0.3257%" height="15" fill="rgb(230,104,44)" fg:x="2516" fg:w="60"/><text x="13.9513%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="13.9840%" y="149" width="0.4126%" height="15" fill="rgb(243,46,11)" fg:x="2576" fg:w="76"/><text x="14.2770%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.38%)</title><rect x="14.3966%" y="149" width="0.3800%" height="15" fill="rgb(216,144,12)" fg:x="2652" fg:w="70"/><text x="14.6896%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="14.7766%" y="117" width="0.0326%" height="15" fill="rgb(223,110,10)" fg:x="2722" fg:w="6"/><text x="15.0696%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.40%)</title><rect x="14.7766%" y="133" width="2.4049%" height="15" fill="rgb(207,133,26)" fg:x="2722" fg:w="443"/><text x="15.0696%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.10%)</title><rect x="17.1815%" y="133" width="0.1031%" height="15" fill="rgb(221,34,2)" fg:x="3165" fg:w="19"/><text x="17.4744%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="17.2846%" y="117" width="0.4506%" height="15" fill="rgb(221,104,42)" fg:x="3184" fg:w="83"/><text x="17.5776%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.36%)</title><rect x="17.7352%" y="85" width="0.3637%" height="15" fill="rgb(254,15,49)" fg:x="3267" fg:w="67"/><text x="18.0282%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.52%)</title><rect x="17.7352%" y="101" width="0.5211%" height="15" fill="rgb(235,64,27)" fg:x="3267" fg:w="96"/><text x="18.0282%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.06%)</title><rect x="18.2563%" y="53" width="0.0597%" height="15" fill="rgb(219,104,9)" fg:x="3363" fg:w="11"/><text x="18.5493%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.19%)</title><rect x="18.3161%" y="37" width="0.1900%" height="15" fill="rgb(239,121,28)" fg:x="3374" fg:w="35"/><text x="18.6090%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.35%)</title><rect x="18.3161%" y="53" width="0.3474%" height="15" fill="rgb(211,148,11)" fg:x="3374" fg:w="64"/><text x="18.6090%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.78%)</title><rect x="18.2563%" y="69" width="0.7817%" height="15" fill="rgb(224,112,8)" fg:x="3363" fg:w="144"/><text x="18.5493%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.13%)</title><rect x="18.2563%" y="85" width="1.1346%" height="15" fill="rgb(225,110,11)" fg:x="3363" fg:w="209"/><text x="18.5493%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.19%)</title><rect x="18.2563%" y="101" width="1.1889%" height="15" fill="rgb(239,94,50)" fg:x="3363" fg:w="219"/><text x="18.5493%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 2.46%)</title><rect x="17.7352%" y="117" width="2.4591%" height="15" fill="rgb(217,104,4)" fg:x="3267" fg:w="453"/><text x="18.0282%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 3.66%)</title><rect x="17.2846%" y="133" width="3.6589%" height="15" fill="rgb(236,213,34)" fg:x="3184" fg:w="674"/><text x="17.5776%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.52%)</title><rect x="20.9435%" y="133" width="0.5157%" height="15" fill="rgb(230,30,32)" fg:x="3858" fg:w="95"/><text x="21.2365%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="21.4592%" y="133" width="0.3257%" height="15" fill="rgb(214,183,24)" fg:x="3953" fg:w="60"/><text x="21.7522%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.45%)</title><rect x="21.7849%" y="117" width="0.4451%" height="15" fill="rgb(244,15,24)" fg:x="4013" fg:w="82"/><text x="22.0779%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.52%)</title><rect x="22.2301%" y="117" width="0.5157%" height="15" fill="rgb(225,208,32)" fg:x="4095" fg:w="95"/><text x="22.5230%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="22.7458%" y="117" width="0.4126%" height="15" fill="rgb(237,194,1)" fg:x="4190" fg:w="76"/><text x="23.0387%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.79%)</title><rect x="21.7849%" y="133" width="1.7914%" height="15" fill="rgb(211,157,35)" fg:x="4013" fg:w="330"/><text x="22.0779%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="23.5764%" y="133" width="0.4506%" height="15" fill="rgb(216,119,40)" fg:x="4343" fg:w="83"/><text x="23.8693%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 10.57%)</title><rect x="14.7766%" y="149" width="10.5695%" height="15" fill="rgb(245,158,40)" fg:x="2722" fg:w="1947"/><text x="15.0696%" y="159.50">binread::binr..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.41%)</title><rect x="25.3461%" y="149" width="0.4126%" height="15" fill="rgb(231,225,18)" fg:x="4669" fg:w="76"/><text x="25.6390%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.08%)</title><rect x="25.7586%" y="149" width="0.0814%" height="15" fill="rgb(209,82,6)" fg:x="4745" fg:w="15"/><text x="26.0516%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.08%)</title><rect x="25.8401%" y="149" width="0.0814%" height="15" fill="rgb(231,168,11)" fg:x="4760" fg:w="15"/><text x="26.1330%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.05%)</title><rect x="25.9215%" y="149" width="0.0489%" height="15" fill="rgb(209,32,19)" fg:x="4775" fg:w="9"/><text x="26.2145%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.09%)</title><rect x="25.9704%" y="149" width="0.0869%" height="15" fill="rgb(245,14,16)" fg:x="4784" fg:w="16"/><text x="26.2633%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="26.0572%" y="133" width="0.4506%" height="15" fill="rgb(206,53,47)" fg:x="4800" fg:w="83"/><text x="26.3502%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.97%)</title><rect x="26.0572%" y="149" width="0.9717%" height="15" fill="rgb(252,87,48)" fg:x="4800" fg:w="179"/><text x="26.3502%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="27.0289%" y="117" width="0.4506%" height="15" fill="rgb(233,170,16)" fg:x="4979" fg:w="83"/><text x="27.3219%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.68%)</title><rect x="27.0289%" y="133" width="0.6840%" height="15" fill="rgb(206,97,36)" fg:x="4979" fg:w="126"/><text x="27.3219%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 1.15%)</title><rect x="27.0289%" y="149" width="1.1454%" height="15" fill="rgb(253,201,4)" fg:x="4979" fg:w="211"/><text x="27.3219%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="28.1744%" y="149" width="0.4506%" height="15" fill="rgb(211,2,44)" fg:x="5190" fg:w="83"/><text x="28.4673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="28.6249%" y="149" width="0.4831%" height="15" fill="rgb(211,106,30)" fg:x="5273" fg:w="89"/><text x="28.9179%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="29.1081%" y="149" width="0.4506%" height="15" fill="rgb(245,61,15)" fg:x="5362" fg:w="83"/><text x="29.4011%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="29.5587%" y="149" width="0.4506%" height="15" fill="rgb(218,34,34)" fg:x="5445" fg:w="83"/><text x="29.8516%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="30.0092%" y="149" width="0.0217%" height="15" fill="rgb(242,219,15)" fg:x="5528" fg:w="4"/><text x="30.3022%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="30.0309%" y="149" width="0.4831%" height="15" fill="rgb(207,209,6)" fg:x="5532" fg:w="89"/><text x="30.3239%" y="159.50"></text></g><g><title>memcpy (428 instructions, 2.32%)</title><rect x="30.5141%" y="149" width="2.3234%" height="15" fill="rgb(244,48,19)" fg:x="5621" fg:w="428"/><text x="30.8071%" y="159.50">m..</text></g><g><title>memcpy (428 instructions, 2.32%)</title><rect x="32.8375%" y="149" width="2.3234%" height="15" fill="rgb(222,25,47)" fg:x="6049" fg:w="428"/><text x="33.1305%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 40.13%)</title><rect x="1.4820%" y="165" width="40.1335%" height="15" fill="rgb(216,125,25)" fg:x="273" fg:w="7393"/><text x="1.7750%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 2.06%)</title><rect x="41.6155%" y="165" width="2.0629%" height="15" fill="rgb(242,199,45)" fg:x="7666" fg:w="380"/><text x="41.9085%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="43.6784%" y="149" width="0.0380%" height="15" fill="rgb(233,92,45)" fg:x="8046" fg:w="7"/><text x="43.9714%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.21%)</title><rect x="43.6784%" y="165" width="0.2117%" height="15" fill="rgb(229,70,51)" fg:x="8046" fg:w="39"/><text x="43.9714%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="43.8901%" y="165" width="0.4506%" height="15" fill="rgb(223,218,43)" fg:x="8085" fg:w="83"/><text x="44.1831%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="44.3407%" y="149" width="0.0380%" height="15" fill="rgb(208,215,14)" fg:x="8168" fg:w="7"/><text x="44.6337%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="44.3787%" y="133" width="0.3203%" height="15" fill="rgb(221,190,13)" fg:x="8175" fg:w="59"/><text x="44.6717%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.51%)</title><rect x="44.6990%" y="133" width="0.5103%" height="15" fill="rgb(207,6,26)" fg:x="8234" fg:w="94"/><text x="44.9920%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.94%)</title><rect x="45.2093%" y="133" width="0.9391%" height="15" fill="rgb(220,156,22)" fg:x="8328" fg:w="173"/><text x="45.5022%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.14%)</title><rect x="44.3787%" y="149" width="3.1432%" height="15" fill="rgb(239,34,53)" fg:x="8175" fg:w="579"/><text x="44.6717%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (798 instructions, 4.33%)</title><rect x="44.3407%" y="165" width="4.3320%" height="15" fill="rgb(251,202,37)" fg:x="8168" fg:w="798"/><text x="44.6337%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="48.6727%" y="165" width="0.4506%" height="15" fill="rgb(254,83,29)" fg:x="8966" fg:w="83"/><text x="48.9657%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="49.1233%" y="149" width="0.0380%" height="15" fill="rgb(217,26,49)" fg:x="9049" fg:w="7"/><text x="49.4163%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="49.1613%" y="133" width="0.3203%" height="15" fill="rgb(206,131,42)" fg:x="9056" fg:w="59"/><text x="49.4543%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.51%)</title><rect x="49.4816%" y="133" width="0.5103%" height="15" fill="rgb(229,144,32)" fg:x="9115" fg:w="94"/><text x="49.7745%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.94%)</title><rect x="49.9919%" y="133" width="0.9391%" height="15" fill="rgb(242,211,40)" fg:x="9209" fg:w="173"/><text x="50.2848%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 3.14%)</title><rect x="49.1613%" y="149" width="3.1432%" height="15" fill="rgb(235,206,17)" fg:x="9056" fg:w="579"/><text x="49.4543%" y="159.50">co..</text></g><g><title>memcmp (77 instructions, 0.42%)</title><rect x="52.3044%" y="149" width="0.4180%" height="15" fill="rgb(220,68,38)" fg:x="9635" fg:w="77"/><text x="52.5974%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.48%)</title><rect x="52.7224%" y="133" width="0.4831%" height="15" fill="rgb(216,8,30)" fg:x="9712" fg:w="89"/><text x="53.0154%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.67%)</title><rect x="52.7224%" y="149" width="0.6731%" height="15" fill="rgb(243,64,39)" fg:x="9712" fg:w="124"/><text x="53.0154%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 5.24%)</title><rect x="49.1233%" y="165" width="5.2386%" height="15" fill="rgb(241,1,24)" fg:x="9049" fg:w="965"/><text x="49.4163%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.32%)</title><rect x="54.3619%" y="117" width="0.3203%" height="15" fill="rgb(221,194,32)" fg:x="10014" fg:w="59"/><text x="54.6548%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.50%)</title><rect x="54.3619%" y="133" width="0.5049%" height="15" fill="rgb(206,132,2)" fg:x="10014" fg:w="93"/><text x="54.6548%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 1.72%)</title><rect x="54.3619%" y="149" width="1.7154%" height="15" fill="rgb(246,156,19)" fg:x="10014" fg:w="316"/><text x="54.6548%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.315 (18 instructions, 0.10%)</title><rect x="56.0773%" y="149" width="0.0977%" height="15" fill="rgb(205,87,1)" fg:x="10330" fg:w="18"/><text x="56.3703%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="56.1750%" y="149" width="0.0706%" height="15" fill="rgb(244,88,9)" fg:x="10348" fg:w="13"/><text x="56.4680%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 2.87%)</title><rect x="54.3619%" y="165" width="2.8717%" height="15" fill="rgb(254,67,22)" fg:x="10014" fg:w="529"/><text x="54.6548%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.29%)</title><rect x="57.2336%" y="165" width="0.2877%" height="15" fill="rgb(221,40,31)" fg:x="10543" fg:w="53"/><text x="57.5266%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="57.5213%" y="133" width="0.1466%" height="15" fill="rgb(248,97,6)" fg:x="10596" fg:w="27"/><text x="57.8143%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.77%)</title><rect x="57.5213%" y="149" width="0.7709%" height="15" fill="rgb(210,185,15)" fg:x="10596" fg:w="142"/><text x="57.8143%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="58.4822%" y="133" width="0.1466%" height="15" fill="rgb(213,167,41)" fg:x="10773" fg:w="27"/><text x="58.7751%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.77%)</title><rect x="58.4822%" y="149" width="0.7709%" height="15" fill="rgb(213,74,11)" fg:x="10773" fg:w="142"/><text x="58.7751%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 1.92%)</title><rect x="57.5213%" y="165" width="1.9217%" height="15" fill="rgb(250,160,29)" fg:x="10596" fg:w="354"/><text x="57.8143%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.18%)</title><rect x="59.4430%" y="149" width="0.1846%" height="15" fill="rgb(217,3,0)" fg:x="10950" fg:w="34"/><text x="59.7360%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1595 (18 instructions, 0.10%)</title><rect x="59.6276%" y="149" width="0.0977%" height="15" fill="rgb(219,180,3)" fg:x="10984" fg:w="18"/><text x="59.9206%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1595 (18 instructions, 0.10%)</title><rect x="59.7253%" y="149" width="0.0977%" height="15" fill="rgb(209,186,7)" fg:x="11002" fg:w="18"/><text x="60.0183%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.91%)</title><rect x="59.4430%" y="165" width="0.9066%" height="15" fill="rgb(215,92,52)" fg:x="10950" fg:w="167"/><text x="59.7360%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="60.3496%" y="165" width="0.0706%" height="15" fill="rgb(236,38,24)" fg:x="11117" fg:w="13"/><text x="60.6426%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="60.4202%" y="165" width="0.0706%" height="15" fill="rgb(236,27,45)" fg:x="11130" fg:w="13"/><text x="60.7131%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="60.4907%" y="165" width="0.0706%" height="15" fill="rgb(221,85,3)" fg:x="11143" fg:w="13"/><text x="60.7837%" y="175.50"></text></g><g><title>memcpy (440 instructions, 2.39%)</title><rect x="60.5613%" y="165" width="2.3886%" height="15" fill="rgb(244,21,41)" fg:x="11156" fg:w="440"/><text x="60.8543%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="62.9499%" y="133" width="0.0380%" height="15" fill="rgb(231,190,37)" fg:x="11596" fg:w="7"/><text x="63.2429%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="62.9879%" y="117" width="0.1466%" height="15" fill="rgb(221,186,32)" fg:x="11603" fg:w="27"/><text x="63.2809%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="63.1345%" y="117" width="0.1466%" height="15" fill="rgb(227,49,18)" fg:x="11630" fg:w="27"/><text x="63.4274%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.07%)</title><rect x="62.9879%" y="133" width="1.0694%" height="15" fill="rgb(215,127,45)" fg:x="11603" fg:w="197"/><text x="63.2809%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="64.0573%" y="101" width="0.1466%" height="15" fill="rgb(217,41,43)" fg:x="11800" fg:w="27"/><text x="64.3503%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.54%)</title><rect x="64.2039%" y="101" width="0.5374%" height="15" fill="rgb(221,194,39)" fg:x="11827" fg:w="99"/><text x="64.4969%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (220 instructions, 1.19%)</title><rect x="64.0573%" y="117" width="1.1943%" height="15" fill="rgb(244,150,23)" fg:x="11800" fg:w="220"/><text x="64.3503%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 instructions, 1.38%)</title><rect x="64.0573%" y="133" width="1.3843%" height="15" fill="rgb(246,7,50)" fg:x="11800" fg:w="255"/><text x="64.3503%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.07%)</title><rect x="65.4416%" y="133" width="0.0706%" height="15" fill="rgb(216,140,7)" fg:x="12055" fg:w="13"/><text x="65.7346%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (534 instructions, 2.90%)</title><rect x="62.9499%" y="149" width="2.8989%" height="15" fill="rgb(217,223,13)" fg:x="11596" fg:w="534"/><text x="63.2429%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (583 instructions, 3.16%)</title><rect x="62.9499%" y="165" width="3.1649%" height="15" fill="rgb(231,37,8)" fg:x="11596" fg:w="583"/><text x="63.2429%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.36%)</title><rect x="66.1148%" y="149" width="0.3637%" height="15" fill="rgb(211,131,14)" fg:x="12179" fg:w="67"/><text x="66.4077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.54%)</title><rect x="66.4785%" y="149" width="0.5374%" height="15" fill="rgb(252,137,31)" fg:x="12246" fg:w="99"/><text x="66.7714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (260 instructions, 1.41%)</title><rect x="66.1148%" y="165" width="1.4114%" height="15" fill="rgb(223,163,39)" fg:x="12179" fg:w="260"/><text x="66.4077%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,717 instructions, 74.46%)</title><rect x="1.0314%" y="181" width="74.4639%" height="15" fill="rgb(210,148,29)" fg:x="190" fg:w="13717"/><text x="1.3244%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.04%)</title><rect x="75.4954%" y="149" width="0.0380%" height="15" fill="rgb(205,201,0)" fg:x="13907" fg:w="7"/><text x="75.7883%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.36%)</title><rect x="75.5334%" y="117" width="0.3637%" height="15" fill="rgb(224,177,26)" fg:x="13914" fg:w="67"/><text x="75.8263%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (155 instructions, 0.84%)</title><rect x="75.5334%" y="133" width="0.8414%" height="15" fill="rgb(235,54,36)" fg:x="13914" fg:w="155"/><text x="75.8263%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 1.03%)</title><rect x="75.5334%" y="149" width="1.0314%" height="15" fill="rgb(228,4,8)" fg:x="13914" fg:w="190"/><text x="75.8263%" y="159.50"></text></g><g><title>memset (152 instructions, 0.83%)</title><rect x="76.5648%" y="149" width="0.8251%" height="15" fill="rgb(213,9,36)" fg:x="14104" fg:w="152"/><text x="76.8578%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (520 instructions, 2.82%)</title><rect x="75.4954%" y="165" width="2.8229%" height="15" fill="rgb(229,29,50)" fg:x="13907" fg:w="520"/><text x="75.7883%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.81%)</title><rect x="78.3182%" y="149" width="2.8120%" height="15" fill="rgb(214,209,6)" fg:x="14427" fg:w="518"/><text x="78.6112%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.45%)</title><rect x="81.1302%" y="101" width="0.4506%" height="15" fill="rgb(220,6,29)" fg:x="14945" fg:w="83"/><text x="81.4232%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.68%)</title><rect x="81.1302%" y="117" width="0.6840%" height="15" fill="rgb(219,208,51)" fg:x="14945" fg:w="126"/><text x="81.4232%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 1.13%)</title><rect x="81.1302%" y="133" width="1.1291%" height="15" fill="rgb(213,130,19)" fg:x="14945" fg:w="208"/><text x="81.4232%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.08%)</title><rect x="82.2594%" y="133" width="0.0814%" height="15" fill="rgb(217,196,50)" fg:x="15153" fg:w="15"/><text x="82.5523%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.08%)</title><rect x="82.3408%" y="133" width="0.0814%" height="15" fill="rgb(220,81,46)" fg:x="15168" fg:w="15"/><text x="82.6338%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 2.31%)</title><rect x="81.1302%" y="149" width="2.3126%" height="15" fill="rgb(233,143,7)" fg:x="14945" fg:w="426"/><text x="81.4232%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.80%)</title><rect x="83.4428%" y="149" width="2.8012%" height="15" fill="rgb(245,14,39)" fg:x="15371" fg:w="516"/><text x="83.7358%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="86.2440%" y="149" width="0.0380%" height="15" fill="rgb(232,154,50)" fg:x="15887" fg:w="7"/><text x="86.5369%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 8.47%)</title><rect x="78.3182%" y="165" width="8.4686%" height="15" fill="rgb(236,138,30)" fg:x="14427" fg:w="1560"/><text x="78.6112%" y="175.50">candid::se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="86.7868%" y="165" width="0.0380%" height="15" fill="rgb(222,28,16)" fg:x="15987" fg:w="7"/><text x="87.0798%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.33%)</title><rect x="86.8248%" y="165" width="0.3257%" height="15" fill="rgb(211,152,26)" fg:x="15994" fg:w="60"/><text x="87.1178%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,753 instructions, 14.94%)</title><rect x="75.4954%" y="181" width="14.9449%" height="15" fill="rgb(208,25,18)" fg:x="13907" fg:w="2753"/><text x="75.7883%" y="191.50">ic_cdk::api::call::..</text></g><g><title>vector::__canister_method_batch_put::{{closure}} (17,868 instructions, 97.00%)</title><rect x="1.0314%" y="197" width="96.9980%" height="15" fill="rgb(249,214,22)" fg:x="190" fg:w="17868"/><text x="1.3244%" y="207.50">vector::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.08%)</title><rect x="98.0294%" y="197" width="0.0760%" height="15" fill="rgb(209,37,50)" fg:x="18058" fg:w="14"/><text x="98.3224%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.15%)</title><rect x="98.5940%" y="181" width="0.1466%" height="15" fill="rgb(238,145,11)" fg:x="18162" fg:w="27"/><text x="98.8870%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 1.11%)</title><rect x="98.1109%" y="197" width="1.1074%" height="15" fill="rgb(208,161,17)" fg:x="18073" fg:w="204"/><text x="98.4038%" y="207.50"></text></g><g><title>all (18,421 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,151,53)" fg:x="0" fg:w="18421"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (18,421 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,86,40)" fg:x="0" fg:w="18421"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>