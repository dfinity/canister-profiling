<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="64886"><g><title>ic_cdk::setup (24 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0370%" height="15" fill="rgb(243,66,43)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.0370%" y="197" width="0.1279%" height="15" fill="rgb(244,110,52)" fg:x="24" fg:w="83"/><text x="0.3300%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.1649%" y="197" width="0.1279%" height="15" fill="rgb(216,11,18)" fg:x="107" fg:w="83"/><text x="0.4579%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.2928%" y="165" width="0.1279%" height="15" fill="rgb(237,129,3)" fg:x="190" fg:w="83"/><text x="0.5858%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="0.4207%" y="149" width="0.1264%" height="15" fill="rgb(250,214,47)" fg:x="273" fg:w="82"/><text x="0.7137%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="0.5471%" y="149" width="0.6827%" height="15" fill="rgb(229,125,45)" fg:x="355" fg:w="443"/><text x="0.8401%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="1.2298%" y="149" width="0.1464%" height="15" fill="rgb(247,14,54)" fg:x="798" fg:w="95"/><text x="1.5228%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.3763%" y="149" width="0.0925%" height="15" fill="rgb(241,120,29)" fg:x="893" fg:w="60"/><text x="1.6692%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.4687%" y="149" width="0.0925%" height="15" fill="rgb(224,21,5)" fg:x="953" fg:w="60"/><text x="1.7617%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.5612%" y="149" width="0.0925%" height="15" fill="rgb(244,135,16)" fg:x="1013" fg:w="60"/><text x="1.8542%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.6537%" y="149" width="0.0925%" height="15" fill="rgb(249,100,42)" fg:x="1073" fg:w="60"/><text x="1.9466%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="1.7461%" y="149" width="0.1264%" height="15" fill="rgb(232,86,6)" fg:x="1133" fg:w="82"/><text x="2.0391%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="1.8725%" y="149" width="0.1079%" height="15" fill="rgb(233,93,24)" fg:x="1215" fg:w="70"/><text x="2.1655%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="1.9804%" y="149" width="0.6827%" height="15" fill="rgb(254,154,30)" fg:x="1285" fg:w="443"/><text x="2.2734%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="2.6631%" y="149" width="0.0293%" height="15" fill="rgb(206,187,15)" fg:x="1728" fg:w="19"/><text x="2.9561%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="2.6924%" y="133" width="0.1279%" height="15" fill="rgb(207,226,26)" fg:x="1747" fg:w="83"/><text x="2.9854%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="2.8203%" y="101" width="0.1033%" height="15" fill="rgb(225,208,31)" fg:x="1830" fg:w="67"/><text x="3.1133%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="2.8203%" y="117" width="0.1480%" height="15" fill="rgb(238,127,20)" fg:x="1830" fg:w="96"/><text x="3.1133%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="2.9683%" y="69" width="0.0170%" height="15" fill="rgb(226,161,36)" fg:x="1926" fg:w="11"/><text x="3.2613%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="2.9852%" y="53" width="0.0539%" height="15" fill="rgb(205,161,19)" fg:x="1937" fg:w="35"/><text x="3.2782%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="2.9852%" y="69" width="0.0986%" height="15" fill="rgb(231,117,0)" fg:x="1937" fg:w="64"/><text x="3.2782%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.22%)</title><rect x="2.9683%" y="85" width="0.2219%" height="15" fill="rgb(229,102,51)" fg:x="1926" fg:w="144"/><text x="3.2613%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.32%)</title><rect x="2.9683%" y="101" width="0.3221%" height="15" fill="rgb(247,31,3)" fg:x="1926" fg:w="209"/><text x="3.2613%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.34%)</title><rect x="2.9683%" y="117" width="0.3375%" height="15" fill="rgb(216,105,1)" fg:x="1926" fg:w="219"/><text x="3.2613%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.70%)</title><rect x="2.8203%" y="133" width="0.6981%" height="15" fill="rgb(241,180,23)" fg:x="1830" fg:w="453"/><text x="3.1133%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.04%)</title><rect x="2.6924%" y="149" width="1.0387%" height="15" fill="rgb(246,219,25)" fg:x="1747" fg:w="674"/><text x="2.9854%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="3.7312%" y="149" width="0.1464%" height="15" fill="rgb(214,147,29)" fg:x="2421" fg:w="95"/><text x="4.0241%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="3.8776%" y="149" width="0.0925%" height="15" fill="rgb(249,125,24)" fg:x="2516" fg:w="60"/><text x="4.1705%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="3.9700%" y="149" width="0.1171%" height="15" fill="rgb(248,44,5)" fg:x="2576" fg:w="76"/><text x="4.2630%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="4.0872%" y="149" width="0.1079%" height="15" fill="rgb(232,165,18)" fg:x="2652" fg:w="70"/><text x="4.3801%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="4.1950%" y="133" width="0.6827%" height="15" fill="rgb(240,168,41)" fg:x="2722" fg:w="443"/><text x="4.4880%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="4.8778%" y="133" width="0.0293%" height="15" fill="rgb(227,184,40)" fg:x="3165" fg:w="19"/><text x="5.1708%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="4.9071%" y="117" width="0.1279%" height="15" fill="rgb(216,171,24)" fg:x="3184" fg:w="83"/><text x="5.2000%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="5.0350%" y="85" width="0.1033%" height="15" fill="rgb(219,68,19)" fg:x="3267" fg:w="67"/><text x="5.3280%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="5.0350%" y="101" width="0.1480%" height="15" fill="rgb(218,186,1)" fg:x="3267" fg:w="96"/><text x="5.3280%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="5.1829%" y="53" width="0.0170%" height="15" fill="rgb(243,183,23)" fg:x="3363" fg:w="11"/><text x="5.4759%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="5.1999%" y="37" width="0.0539%" height="15" fill="rgb(241,207,17)" fg:x="3374" fg:w="35"/><text x="5.4929%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="5.1999%" y="53" width="0.0986%" height="15" fill="rgb(229,123,23)" fg:x="3374" fg:w="64"/><text x="5.4929%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.22%)</title><rect x="5.1829%" y="69" width="0.2219%" height="15" fill="rgb(207,7,13)" fg:x="3363" fg:w="144"/><text x="5.4759%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.32%)</title><rect x="5.1829%" y="85" width="0.3221%" height="15" fill="rgb(229,203,10)" fg:x="3363" fg:w="209"/><text x="5.4759%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.34%)</title><rect x="5.1829%" y="101" width="0.3375%" height="15" fill="rgb(217,217,17)" fg:x="3363" fg:w="219"/><text x="5.4759%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.70%)</title><rect x="5.0350%" y="117" width="0.6981%" height="15" fill="rgb(233,6,38)" fg:x="3267" fg:w="453"/><text x="5.3280%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.04%)</title><rect x="4.9071%" y="133" width="1.0387%" height="15" fill="rgb(211,90,44)" fg:x="3184" fg:w="674"/><text x="5.2000%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="5.9458%" y="133" width="0.1464%" height="15" fill="rgb(220,98,7)" fg:x="3858" fg:w="95"/><text x="6.2388%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="6.0922%" y="133" width="0.0925%" height="15" fill="rgb(231,160,22)" fg:x="3953" fg:w="60"/><text x="6.3852%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="6.1847%" y="117" width="0.1264%" height="15" fill="rgb(227,43,11)" fg:x="4013" fg:w="82"/><text x="6.4777%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.15%)</title><rect x="6.3111%" y="117" width="0.1464%" height="15" fill="rgb(225,206,32)" fg:x="4095" fg:w="95"/><text x="6.6040%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="6.4575%" y="117" width="0.1171%" height="15" fill="rgb(224,73,51)" fg:x="4190" fg:w="76"/><text x="6.7504%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.51%)</title><rect x="6.1847%" y="133" width="0.5086%" height="15" fill="rgb(231,142,29)" fg:x="4013" fg:w="330"/><text x="6.4777%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="6.6933%" y="133" width="0.1279%" height="15" fill="rgb(235,161,22)" fg:x="4343" fg:w="83"/><text x="6.9862%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 3.00%)</title><rect x="4.1950%" y="149" width="3.0006%" height="15" fill="rgb(226,156,6)" fg:x="2722" fg:w="1947"/><text x="4.4880%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="7.1957%" y="149" width="0.1171%" height="15" fill="rgb(228,10,29)" fg:x="4669" fg:w="76"/><text x="7.4887%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3128%" y="149" width="0.0231%" height="15" fill="rgb(229,91,26)" fg:x="4745" fg:w="15"/><text x="7.6058%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3359%" y="149" width="0.0231%" height="15" fill="rgb(243,140,10)" fg:x="4760" fg:w="15"/><text x="7.6289%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.01%)</title><rect x="7.3591%" y="149" width="0.0139%" height="15" fill="rgb(224,152,48)" fg:x="4775" fg:w="9"/><text x="7.6520%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.02%)</title><rect x="7.3729%" y="149" width="0.0247%" height="15" fill="rgb(236,218,4)" fg:x="4784" fg:w="16"/><text x="7.6659%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (81 instructions, 0.12%)</title><rect x="7.3976%" y="133" width="0.1248%" height="15" fill="rgb(230,178,50)" fg:x="4800" fg:w="81"/><text x="7.6906%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (177 instructions, 0.27%)</title><rect x="7.3976%" y="149" width="0.2728%" height="15" fill="rgb(248,124,35)" fg:x="4800" fg:w="177"/><text x="7.6906%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="7.6704%" y="117" width="0.1402%" height="15" fill="rgb(247,5,53)" fg:x="4977" fg:w="91"/><text x="7.9633%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.21%)</title><rect x="7.6704%" y="133" width="0.2065%" height="15" fill="rgb(216,191,54)" fg:x="4977" fg:w="134"/><text x="7.9633%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (219 instructions, 0.34%)</title><rect x="7.6704%" y="149" width="0.3375%" height="15" fill="rgb(254,186,47)" fg:x="4977" fg:w="219"/><text x="7.9633%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.0079%" y="149" width="0.1402%" height="15" fill="rgb(247,151,30)" fg:x="5196" fg:w="91"/><text x="8.3009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="8.1481%" y="149" width="0.1372%" height="15" fill="rgb(212,74,33)" fg:x="5287" fg:w="89"/><text x="8.4411%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.2853%" y="149" width="0.1402%" height="15" fill="rgb(208,82,11)" fg:x="5376" fg:w="91"/><text x="8.5783%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.4255%" y="149" width="0.1402%" height="15" fill="rgb(233,14,43)" fg:x="5467" fg:w="91"/><text x="8.7185%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="8.5720%" y="149" width="0.1372%" height="15" fill="rgb(219,60,34)" fg:x="5562" fg:w="89"/><text x="8.8649%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.66%)</title><rect x="8.7091%" y="149" width="0.6596%" height="15" fill="rgb(222,100,15)" fg:x="5651" fg:w="428"/><text x="9.0021%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.66%)</title><rect x="9.3687%" y="149" width="0.6596%" height="15" fill="rgb(225,119,48)" fg:x="6079" fg:w="428"/><text x="9.6617%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,423 instructions, 11.44%)</title><rect x="0.4207%" y="165" width="11.4401%" height="15" fill="rgb(212,188,12)" fg:x="273" fg:w="7423"/><text x="0.7137%" y="175.50">candid::de::ID..</text></g><g><title>memcpy (380 instructions, 0.59%)</title><rect x="11.8608%" y="165" width="0.5856%" height="15" fill="rgb(216,66,50)" fg:x="7696" fg:w="380"/><text x="12.1538%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="12.4464%" y="149" width="0.0108%" height="15" fill="rgb(246,76,17)" fg:x="8076" fg:w="7"/><text x="12.7394%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="12.4464%" y="165" width="0.0601%" height="15" fill="rgb(253,102,10)" fg:x="8076" fg:w="39"/><text x="12.7394%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="12.5065%" y="165" width="0.1402%" height="15" fill="rgb(235,130,49)" fg:x="8115" fg:w="91"/><text x="12.7995%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="12.6468%" y="149" width="0.0108%" height="15" fill="rgb(241,27,31)" fg:x="8206" fg:w="7"/><text x="12.9398%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="12.6576%" y="133" width="0.0909%" height="15" fill="rgb(211,136,9)" fg:x="8213" fg:w="59"/><text x="12.9506%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="12.7485%" y="133" width="0.1449%" height="15" fill="rgb(253,170,51)" fg:x="8272" fg:w="94"/><text x="13.0415%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="12.8934%" y="133" width="0.2666%" height="15" fill="rgb(249,114,2)" fg:x="8366" fg:w="173"/><text x="13.1864%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="12.6576%" y="149" width="0.8923%" height="15" fill="rgb(221,123,32)" fg:x="8213" fg:w="579"/><text x="12.9506%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 1.23%)</title><rect x="12.6468%" y="165" width="1.2298%" height="15" fill="rgb(253,45,23)" fg:x="8206" fg:w="798"/><text x="12.9398%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="13.8766%" y="165" width="0.1402%" height="15" fill="rgb(238,220,1)" fg:x="9004" fg:w="91"/><text x="14.1696%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="14.0169%" y="149" width="0.0108%" height="15" fill="rgb(233,132,7)" fg:x="9095" fg:w="7"/><text x="14.3099%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="14.0277%" y="133" width="0.0909%" height="15" fill="rgb(205,14,34)" fg:x="9102" fg:w="59"/><text x="14.3206%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="14.1186%" y="133" width="0.1449%" height="15" fill="rgb(223,220,6)" fg:x="9161" fg:w="94"/><text x="14.4116%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="14.2635%" y="133" width="0.2666%" height="15" fill="rgb(244,55,5)" fg:x="9255" fg:w="173"/><text x="14.5564%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="14.0277%" y="149" width="0.8923%" height="15" fill="rgb(236,30,30)" fg:x="9102" fg:w="579"/><text x="14.3206%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.12%)</title><rect x="14.9200%" y="149" width="0.1187%" height="15" fill="rgb(234,29,38)" fg:x="9681" fg:w="77"/><text x="15.2130%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="15.0387%" y="133" width="0.1372%" height="15" fill="rgb(208,190,9)" fg:x="9758" fg:w="89"/><text x="15.3317%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.19%)</title><rect x="15.0387%" y="149" width="0.1911%" height="15" fill="rgb(253,84,15)" fg:x="9758" fg:w="124"/><text x="15.3317%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 1.49%)</title><rect x="14.0169%" y="165" width="1.4872%" height="15" fill="rgb(228,54,49)" fg:x="9095" fg:w="965"/><text x="14.3099%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="15.5041%" y="117" width="0.0909%" height="15" fill="rgb(239,2,44)" fg:x="10060" fg:w="59"/><text x="15.7971%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.14%)</title><rect x="15.5041%" y="133" width="0.1433%" height="15" fill="rgb(221,106,26)" fg:x="10060" fg:w="93"/><text x="15.7971%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.49%)</title><rect x="15.5041%" y="149" width="0.4870%" height="15" fill="rgb(250,215,14)" fg:x="10060" fg:w="316"/><text x="15.7971%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.653 (18 instructions, 0.03%)</title><rect x="15.9911%" y="149" width="0.0277%" height="15" fill="rgb(233,152,19)" fg:x="10376" fg:w="18"/><text x="16.2841%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="16.0189%" y="149" width="0.0200%" height="15" fill="rgb(219,58,54)" fg:x="10394" fg:w="13"/><text x="16.3118%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 0.82%)</title><rect x="15.5041%" y="165" width="0.8153%" height="15" fill="rgb(250,70,34)" fg:x="10060" fg:w="529"/><text x="15.7971%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.08%)</title><rect x="16.3194%" y="165" width="0.0817%" height="15" fill="rgb(215,106,42)" fg:x="10589" fg:w="53"/><text x="16.6124%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="16.4011%" y="133" width="0.0416%" height="15" fill="rgb(239,77,29)" fg:x="10642" fg:w="27"/><text x="16.6940%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.22%)</title><rect x="16.4011%" y="149" width="0.2188%" height="15" fill="rgb(232,68,30)" fg:x="10642" fg:w="142"/><text x="16.6940%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="16.6739%" y="133" width="0.0416%" height="15" fill="rgb(226,201,16)" fg:x="10819" fg:w="27"/><text x="16.9668%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.22%)</title><rect x="16.6739%" y="149" width="0.2188%" height="15" fill="rgb(224,56,41)" fg:x="10819" fg:w="142"/><text x="16.9668%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 0.55%)</title><rect x="16.4011%" y="165" width="0.5456%" height="15" fill="rgb(254,157,37)" fg:x="10642" fg:w="354"/><text x="16.6940%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.05%)</title><rect x="16.9466%" y="149" width="0.0524%" height="15" fill="rgb(240,54,6)" fg:x="10996" fg:w="34"/><text x="17.2396%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.03%)</title><rect x="16.9990%" y="149" width="0.0277%" height="15" fill="rgb(244,87,44)" fg:x="11030" fg:w="18"/><text x="17.2920%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.03%)</title><rect x="17.0268%" y="149" width="0.0277%" height="15" fill="rgb(242,96,12)" fg:x="11048" fg:w="18"/><text x="17.3198%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.26%)</title><rect x="16.9466%" y="165" width="0.2574%" height="15" fill="rgb(245,9,48)" fg:x="10996" fg:w="167"/><text x="17.2396%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2040%" y="165" width="0.0200%" height="15" fill="rgb(247,23,14)" fg:x="11163" fg:w="13"/><text x="17.4970%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2241%" y="165" width="0.0200%" height="15" fill="rgb(211,9,1)" fg:x="11176" fg:w="13"/><text x="17.5170%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2441%" y="165" width="0.0200%" height="15" fill="rgb(221,105,51)" fg:x="11189" fg:w="13"/><text x="17.5371%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.68%)</title><rect x="17.2641%" y="165" width="0.6781%" height="15" fill="rgb(235,101,7)" fg:x="11202" fg:w="440"/><text x="17.5571%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="17.9422%" y="133" width="0.0108%" height="15" fill="rgb(227,127,27)" fg:x="11642" fg:w="7"/><text x="18.2352%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="17.9530%" y="117" width="0.0416%" height="15" fill="rgb(218,37,2)" fg:x="11649" fg:w="27"/><text x="18.2460%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="17.9946%" y="117" width="0.0416%" height="15" fill="rgb(237,43,6)" fg:x="11676" fg:w="27"/><text x="18.2876%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.30%)</title><rect x="17.9530%" y="133" width="0.3036%" height="15" fill="rgb(253,29,20)" fg:x="11649" fg:w="197"/><text x="18.2460%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="18.2566%" y="117" width="0.1372%" height="15" fill="rgb(220,86,16)" fg:x="11846" fg:w="89"/><text x="18.5496%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.19%)</title><rect x="18.2566%" y="133" width="0.1911%" height="15" fill="rgb(213,153,26)" fg:x="11846" fg:w="124"/><text x="18.5496%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="18.4477%" y="133" width="0.0200%" height="15" fill="rgb(239,161,4)" fg:x="11970" fg:w="13"/><text x="18.7407%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (403 instructions, 0.62%)</title><rect x="17.9422%" y="149" width="0.6211%" height="15" fill="rgb(213,224,50)" fg:x="11642" fg:w="403"/><text x="18.2352%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (452 instructions, 0.70%)</title><rect x="17.9422%" y="165" width="0.6966%" height="15" fill="rgb(205,23,27)" fg:x="11642" fg:w="452"/><text x="18.2352%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="18.6388%" y="149" width="0.0416%" height="15" fill="rgb(253,170,0)" fg:x="12094" fg:w="27"/><text x="18.9318%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.22%)</title><rect x="18.6388%" y="165" width="0.2188%" height="15" fill="rgb(247,213,9)" fg:x="12094" fg:w="142"/><text x="18.9318%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,516 instructions, 20.83%)</title><rect x="0.2928%" y="181" width="20.8304%" height="15" fill="rgb(229,229,24)" fg:x="190" fg:w="13516"/><text x="0.5858%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="21.1232%" y="165" width="0.0108%" height="15" fill="rgb(237,41,13)" fg:x="13706" fg:w="7"/><text x="21.4162%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="21.1340%" y="133" width="0.0416%" height="15" fill="rgb(210,213,1)" fg:x="13713" fg:w="27"/><text x="21.4270%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (118 instructions, 0.18%)</title><rect x="21.1340%" y="149" width="0.1819%" height="15" fill="rgb(243,85,49)" fg:x="13713" fg:w="118"/><text x="21.4270%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (153 instructions, 0.24%)</title><rect x="21.1340%" y="165" width="0.2358%" height="15" fill="rgb(236,117,40)" fg:x="13713" fg:w="153"/><text x="21.4270%" y="175.50"></text></g><g><title>memset (152 instructions, 0.23%)</title><rect x="21.3698%" y="165" width="0.2343%" height="15" fill="rgb(212,78,14)" fg:x="13866" fg:w="152"/><text x="21.6628%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (483 instructions, 0.74%)</title><rect x="21.1232%" y="181" width="0.7444%" height="15" fill="rgb(215,88,16)" fg:x="13706" fg:w="483"/><text x="21.4162%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.80%)</title><rect x="21.8676%" y="165" width="0.7983%" height="15" fill="rgb(254,199,17)" fg:x="14189" fg:w="518"/><text x="22.1606%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (114 instructions, 0.18%)</title><rect x="22.6659%" y="117" width="0.1757%" height="15" fill="rgb(209,64,7)" fg:x="14707" fg:w="114"/><text x="22.9589%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (157 instructions, 0.24%)</title><rect x="22.6659%" y="133" width="0.2420%" height="15" fill="rgb(238,10,15)" fg:x="14707" fg:w="157"/><text x="22.9589%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (239 instructions, 0.37%)</title><rect x="22.6659%" y="149" width="0.3683%" height="15" fill="rgb(214,69,43)" fg:x="14707" fg:w="239"/><text x="22.9589%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.0342%" y="149" width="0.0231%" height="15" fill="rgb(242,81,43)" fg:x="14946" fg:w="15"/><text x="23.3272%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.0574%" y="149" width="0.0231%" height="15" fill="rgb(209,29,45)" fg:x="14961" fg:w="15"/><text x="23.3503%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (457 instructions, 0.70%)</title><rect x="22.6659%" y="165" width="0.7043%" height="15" fill="rgb(233,28,24)" fg:x="14707" fg:w="457"/><text x="22.9589%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.80%)</title><rect x="23.3702%" y="165" width="0.7952%" height="15" fill="rgb(247,43,51)" fg:x="15164" fg:w="516"/><text x="23.6632%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="24.1655%" y="165" width="0.0108%" height="15" fill="rgb(217,186,39)" fg:x="15680" fg:w="7"/><text x="24.4584%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,591 instructions, 2.45%)</title><rect x="21.8676%" y="181" width="2.4520%" height="15" fill="rgb(245,78,3)" fg:x="14189" fg:w="1591"/><text x="22.1606%" y="191.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.3196%" y="165" width="0.0108%" height="15" fill="rgb(208,227,24)" fg:x="15780" fg:w="7"/><text x="24.6125%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="24.3304%" y="165" width="0.0925%" height="15" fill="rgb(222,199,6)" fg:x="15787" fg:w="60"/><text x="24.6233%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (133 instructions, 0.20%)</title><rect x="24.3196%" y="181" width="0.2050%" height="15" fill="rgb(250,202,14)" fg:x="15780" fg:w="133"/><text x="24.6125%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_get::{{closure}} (64,251 instructions, 99.02%)</title><rect x="0.2928%" y="197" width="99.0214%" height="15" fill="rgb(221,208,28)" fg:x="190" fg:w="64251"/><text x="0.5858%" y="207.50">btreemap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.3142%" y="197" width="0.0216%" height="15" fill="rgb(240,132,27)" fg:x="64441" fg:w="14"/><text x="99.6072%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="99.4745%" y="181" width="0.0416%" height="15" fill="rgb(221,54,2)" fg:x="64545" fg:w="27"/><text x="99.7674%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="99.5161%" y="181" width="0.0416%" height="15" fill="rgb(215,32,13)" fg:x="64572" fg:w="27"/><text x="99.8090%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (286 instructions, 0.44%)</title><rect x="99.3373%" y="197" width="0.4408%" height="15" fill="rgb(218,87,10)" fg:x="64456" fg:w="286"/><text x="99.6303%" y="207.50"></text></g><g><title>all (64,886 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,225,5)" fg:x="0" fg:w="64886"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (64,886 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,191,19)" fg:x="0" fg:w="64886"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>