<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="65130"><g><title>ic_cdk::setup (24 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0368%" height="15" fill="rgb(209,199,11)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.0368%" y="197" width="0.1274%" height="15" fill="rgb(237,178,13)" fg:x="24" fg:w="83"/><text x="0.3298%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.1643%" y="197" width="0.1274%" height="15" fill="rgb(219,72,25)" fg:x="107" fg:w="83"/><text x="0.4573%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="0.2917%" y="165" width="0.1274%" height="15" fill="rgb(220,94,39)" fg:x="190" fg:w="83"/><text x="0.5847%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="0.4192%" y="149" width="0.1259%" height="15" fill="rgb(228,138,40)" fg:x="273" fg:w="82"/><text x="0.7121%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.68%)</title><rect x="0.5451%" y="149" width="0.6756%" height="15" fill="rgb(229,105,34)" fg:x="355" fg:w="440"/><text x="0.8380%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="1.2206%" y="149" width="0.1459%" height="15" fill="rgb(220,155,46)" fg:x="795" fg:w="95"/><text x="1.5136%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.3665%" y="149" width="0.0921%" height="15" fill="rgb(215,36,48)" fg:x="890" fg:w="60"/><text x="1.6595%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.4586%" y="149" width="0.0921%" height="15" fill="rgb(240,206,46)" fg:x="950" fg:w="60"/><text x="1.7516%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.5507%" y="149" width="0.0921%" height="15" fill="rgb(235,132,11)" fg:x="1010" fg:w="60"/><text x="1.8437%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.6429%" y="149" width="0.0921%" height="15" fill="rgb(223,57,37)" fg:x="1070" fg:w="60"/><text x="1.9358%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="1.7350%" y="149" width="0.1259%" height="15" fill="rgb(254,144,35)" fg:x="1130" fg:w="82"/><text x="2.0280%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="1.8609%" y="149" width="0.1075%" height="15" fill="rgb(241,101,3)" fg:x="1212" fg:w="70"/><text x="2.1539%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.68%)</title><rect x="1.9684%" y="149" width="0.6756%" height="15" fill="rgb(229,0,5)" fg:x="1282" fg:w="440"/><text x="2.2613%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="2.6439%" y="149" width="0.0292%" height="15" fill="rgb(222,76,15)" fg:x="1722" fg:w="19"/><text x="2.9369%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="2.6731%" y="133" width="0.1274%" height="15" fill="rgb(241,136,30)" fg:x="1741" fg:w="83"/><text x="2.9661%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="2.8006%" y="101" width="0.1029%" height="15" fill="rgb(244,58,0)" fg:x="1824" fg:w="67"/><text x="3.0935%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.15%)</title><rect x="2.8006%" y="117" width="0.1505%" height="15" fill="rgb(243,91,1)" fg:x="1824" fg:w="98"/><text x="3.0935%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="2.9510%" y="69" width="0.0169%" height="15" fill="rgb(214,134,33)" fg:x="1922" fg:w="11"/><text x="3.2440%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="2.9679%" y="53" width="0.0537%" height="15" fill="rgb(250,160,12)" fg:x="1933" fg:w="35"/><text x="3.2609%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.10%)</title><rect x="2.9679%" y="69" width="0.1013%" height="15" fill="rgb(212,102,13)" fg:x="1933" fg:w="66"/><text x="3.2609%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.23%)</title><rect x="2.9510%" y="85" width="0.2257%" height="15" fill="rgb(214,215,26)" fg:x="1922" fg:w="147"/><text x="3.2440%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.33%)</title><rect x="2.9510%" y="101" width="0.3255%" height="15" fill="rgb(208,37,45)" fg:x="1922" fg:w="212"/><text x="3.2440%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.34%)</title><rect x="2.9510%" y="117" width="0.3409%" height="15" fill="rgb(241,18,8)" fg:x="1922" fg:w="222"/><text x="3.2440%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.71%)</title><rect x="2.8006%" y="133" width="0.7078%" height="15" fill="rgb(242,179,12)" fg:x="1824" fg:w="461"/><text x="3.0935%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.06%)</title><rect x="2.6731%" y="149" width="1.0579%" height="15" fill="rgb(230,201,6)" fg:x="1741" fg:w="689"/><text x="2.9661%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="3.7310%" y="149" width="0.1459%" height="15" fill="rgb(244,35,22)" fg:x="2430" fg:w="95"/><text x="4.0240%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="3.8769%" y="149" width="0.0921%" height="15" fill="rgb(239,90,28)" fg:x="2525" fg:w="60"/><text x="4.1698%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="3.9690%" y="149" width="0.1167%" height="15" fill="rgb(225,84,10)" fg:x="2585" fg:w="76"/><text x="4.2620%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="4.0857%" y="149" width="0.1075%" height="15" fill="rgb(236,223,27)" fg:x="2661" fg:w="70"/><text x="4.3786%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.68%)</title><rect x="4.1932%" y="133" width="0.6756%" height="15" fill="rgb(251,43,18)" fg:x="2731" fg:w="440"/><text x="4.4861%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="4.8687%" y="133" width="0.0292%" height="15" fill="rgb(252,215,16)" fg:x="3171" fg:w="19"/><text x="5.1617%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.13%)</title><rect x="4.8979%" y="117" width="0.1274%" height="15" fill="rgb(247,86,1)" fg:x="3190" fg:w="83"/><text x="5.1909%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="5.0253%" y="85" width="0.1029%" height="15" fill="rgb(241,127,38)" fg:x="3273" fg:w="67"/><text x="5.3183%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.15%)</title><rect x="5.0253%" y="101" width="0.1505%" height="15" fill="rgb(227,24,5)" fg:x="3273" fg:w="98"/><text x="5.3183%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="5.1758%" y="53" width="0.0169%" height="15" fill="rgb(243,87,53)" fg:x="3371" fg:w="11"/><text x="5.4688%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="5.1927%" y="37" width="0.0537%" height="15" fill="rgb(233,53,34)" fg:x="3382" fg:w="35"/><text x="5.4857%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.10%)</title><rect x="5.1927%" y="53" width="0.1013%" height="15" fill="rgb(212,213,33)" fg:x="3382" fg:w="66"/><text x="5.4857%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.23%)</title><rect x="5.1758%" y="69" width="0.2257%" height="15" fill="rgb(210,114,9)" fg:x="3371" fg:w="147"/><text x="5.4688%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.33%)</title><rect x="5.1758%" y="85" width="0.3255%" height="15" fill="rgb(220,172,27)" fg:x="3371" fg:w="212"/><text x="5.4688%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.34%)</title><rect x="5.1758%" y="101" width="0.3409%" height="15" fill="rgb(223,43,37)" fg:x="3371" fg:w="222"/><text x="5.4688%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.71%)</title><rect x="5.0253%" y="117" width="0.7078%" height="15" fill="rgb(207,192,6)" fg:x="3273" fg:w="461"/><text x="5.3183%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.06%)</title><rect x="4.8979%" y="133" width="1.0579%" height="15" fill="rgb(238,161,52)" fg:x="3190" fg:w="689"/><text x="5.1909%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="5.9558%" y="133" width="0.1459%" height="15" fill="rgb(209,128,40)" fg:x="3879" fg:w="95"/><text x="6.2487%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="6.1016%" y="133" width="0.0921%" height="15" fill="rgb(205,86,12)" fg:x="3974" fg:w="60"/><text x="6.3946%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="6.1938%" y="117" width="0.1259%" height="15" fill="rgb(225,24,54)" fg:x="4034" fg:w="82"/><text x="6.4867%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.15%)</title><rect x="6.3197%" y="117" width="0.1459%" height="15" fill="rgb(243,114,16)" fg:x="4116" fg:w="95"/><text x="6.6126%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="6.4655%" y="117" width="0.1167%" height="15" fill="rgb(235,100,35)" fg:x="4211" fg:w="76"/><text x="6.7585%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.51%)</title><rect x="6.1938%" y="133" width="0.5067%" height="15" fill="rgb(226,90,20)" fg:x="4034" fg:w="330"/><text x="6.4867%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="6.7004%" y="133" width="0.1259%" height="15" fill="rgb(242,120,41)" fg:x="4364" fg:w="82"/><text x="6.9934%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 3.01%)</title><rect x="4.1932%" y="149" width="3.0094%" height="15" fill="rgb(219,106,51)" fg:x="2731" fg:w="1960"/><text x="4.4861%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="7.2025%" y="149" width="0.1167%" height="15" fill="rgb(243,66,43)" fg:x="4691" fg:w="76"/><text x="7.4955%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3192%" y="149" width="0.0230%" height="15" fill="rgb(244,110,52)" fg:x="4767" fg:w="15"/><text x="7.6122%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3422%" y="149" width="0.0230%" height="15" fill="rgb(216,11,18)" fg:x="4782" fg:w="15"/><text x="7.6352%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.01%)</title><rect x="7.3653%" y="149" width="0.0138%" height="15" fill="rgb(237,129,3)" fg:x="4797" fg:w="9"/><text x="7.6582%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.03%)</title><rect x="7.3791%" y="149" width="0.0276%" height="15" fill="rgb(250,214,47)" fg:x="4806" fg:w="18"/><text x="7.6721%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.12%)</title><rect x="7.4067%" y="133" width="0.1182%" height="15" fill="rgb(229,125,45)" fg:x="4824" fg:w="77"/><text x="7.6997%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (173 instructions, 0.27%)</title><rect x="7.4067%" y="149" width="0.2656%" height="15" fill="rgb(247,14,54)" fg:x="4824" fg:w="173"/><text x="7.6997%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="7.6723%" y="117" width="0.1397%" height="15" fill="rgb(241,120,29)" fg:x="4997" fg:w="91"/><text x="7.9653%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 instructions, 0.21%)</title><rect x="7.6723%" y="133" width="0.2057%" height="15" fill="rgb(224,21,5)" fg:x="4997" fg:w="134"/><text x="7.9653%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (216 instructions, 0.33%)</title><rect x="7.6723%" y="149" width="0.3316%" height="15" fill="rgb(244,135,16)" fg:x="4997" fg:w="216"/><text x="7.9653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.0040%" y="149" width="0.1397%" height="15" fill="rgb(249,100,42)" fg:x="5213" fg:w="91"/><text x="8.2970%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.13%)</title><rect x="8.1437%" y="149" width="0.1320%" height="15" fill="rgb(232,86,6)" fg:x="5304" fg:w="86"/><text x="8.4367%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.2758%" y="149" width="0.1397%" height="15" fill="rgb(233,93,24)" fg:x="5390" fg:w="91"/><text x="8.5687%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.4155%" y="149" width="0.1397%" height="15" fill="rgb(254,154,30)" fg:x="5481" fg:w="91"/><text x="8.7084%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.13%)</title><rect x="8.5613%" y="149" width="0.1320%" height="15" fill="rgb(206,187,15)" fg:x="5576" fg:w="86"/><text x="8.8543%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.66%)</title><rect x="8.6934%" y="149" width="0.6571%" height="15" fill="rgb(207,226,26)" fg:x="5662" fg:w="428"/><text x="8.9864%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.66%)</title><rect x="9.3505%" y="149" width="0.6571%" height="15" fill="rgb(225,208,31)" fg:x="6090" fg:w="428"/><text x="9.6435%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,391 instructions, 11.35%)</title><rect x="0.4192%" y="165" width="11.3481%" height="15" fill="rgb(238,127,20)" fg:x="273" fg:w="7391"/><text x="0.7121%" y="175.50">candid::de::ID..</text></g><g><title>memcpy (380 instructions, 0.58%)</title><rect x="11.7672%" y="165" width="0.5834%" height="15" fill="rgb(226,161,36)" fg:x="7664" fg:w="380"/><text x="12.0602%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="12.3507%" y="149" width="0.0215%" height="15" fill="rgb(205,161,19)" fg:x="8044" fg:w="14"/><text x="12.6437%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.10%)</title><rect x="12.3507%" y="165" width="0.0967%" height="15" fill="rgb(231,117,0)" fg:x="8044" fg:w="63"/><text x="12.6437%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="12.4474%" y="165" width="0.1397%" height="15" fill="rgb(229,102,51)" fg:x="8107" fg:w="91"/><text x="12.7404%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="12.5871%" y="149" width="0.0215%" height="15" fill="rgb(247,31,3)" fg:x="8198" fg:w="14"/><text x="12.8801%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="12.6086%" y="133" width="0.0906%" height="15" fill="rgb(216,105,1)" fg:x="8212" fg:w="59"/><text x="12.9016%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="12.6992%" y="133" width="0.1443%" height="15" fill="rgb(241,180,23)" fg:x="8271" fg:w="94"/><text x="12.9922%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="12.8435%" y="133" width="0.2656%" height="15" fill="rgb(246,219,25)" fg:x="8365" fg:w="173"/><text x="13.1365%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="12.6086%" y="149" width="0.8890%" height="15" fill="rgb(214,147,29)" fg:x="8212" fg:w="579"/><text x="12.9016%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 1.26%)</title><rect x="12.5871%" y="165" width="1.2606%" height="15" fill="rgb(249,125,24)" fg:x="8198" fg:w="821"/><text x="12.8801%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="13.8477%" y="165" width="0.1397%" height="15" fill="rgb(248,44,5)" fg:x="9019" fg:w="91"/><text x="14.1407%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="13.9874%" y="149" width="0.0215%" height="15" fill="rgb(232,165,18)" fg:x="9110" fg:w="14"/><text x="14.2804%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="14.0089%" y="133" width="0.0906%" height="15" fill="rgb(240,168,41)" fg:x="9124" fg:w="59"/><text x="14.3019%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="14.0995%" y="133" width="0.1443%" height="15" fill="rgb(227,184,40)" fg:x="9183" fg:w="94"/><text x="14.3925%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="14.2438%" y="133" width="0.2656%" height="15" fill="rgb(216,171,24)" fg:x="9277" fg:w="173"/><text x="14.5368%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="14.0089%" y="149" width="0.8890%" height="15" fill="rgb(219,68,19)" fg:x="9124" fg:w="579"/><text x="14.3019%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.12%)</title><rect x="14.8979%" y="149" width="0.1182%" height="15" fill="rgb(218,186,1)" fg:x="9703" fg:w="77"/><text x="15.1909%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.13%)</title><rect x="15.0161%" y="133" width="0.1320%" height="15" fill="rgb(243,183,23)" fg:x="9780" fg:w="86"/><text x="15.3091%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.19%)</title><rect x="15.0161%" y="149" width="0.1858%" height="15" fill="rgb(241,207,17)" fg:x="9780" fg:w="121"/><text x="15.3091%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.51%)</title><rect x="13.9874%" y="165" width="1.5139%" height="15" fill="rgb(229,123,23)" fg:x="9110" fg:w="986"/><text x="14.2804%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="15.5013%" y="117" width="0.0906%" height="15" fill="rgb(207,7,13)" fg:x="10096" fg:w="59"/><text x="15.7943%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.14%)</title><rect x="15.5013%" y="133" width="0.1443%" height="15" fill="rgb(229,203,10)" fg:x="10096" fg:w="94"/><text x="15.7943%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.48%)</title><rect x="15.5013%" y="149" width="0.4836%" height="15" fill="rgb(217,217,17)" fg:x="10096" fg:w="315"/><text x="15.7943%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.587 (18 instructions, 0.03%)</title><rect x="15.9850%" y="149" width="0.0276%" height="15" fill="rgb(233,6,38)" fg:x="10411" fg:w="18"/><text x="16.2779%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="16.0126%" y="149" width="0.0200%" height="15" fill="rgb(211,90,44)" fg:x="10429" fg:w="13"/><text x="16.3056%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.85%)</title><rect x="15.5013%" y="165" width="0.8460%" height="15" fill="rgb(220,98,7)" fg:x="10096" fg:w="551"/><text x="15.7943%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.08%)</title><rect x="16.3473%" y="165" width="0.0814%" height="15" fill="rgb(231,160,22)" fg:x="10647" fg:w="53"/><text x="16.6403%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.20%)</title><rect x="16.4287%" y="149" width="0.2027%" height="15" fill="rgb(227,43,11)" fg:x="10700" fg:w="132"/><text x="16.7216%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.20%)</title><rect x="16.6851%" y="149" width="0.2027%" height="15" fill="rgb(225,206,32)" fg:x="10867" fg:w="132"/><text x="16.9781%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.51%)</title><rect x="16.4287%" y="165" width="0.5128%" height="15" fill="rgb(224,73,51)" fg:x="10700" fg:w="334"/><text x="16.7216%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.05%)</title><rect x="16.9415%" y="149" width="0.0522%" height="15" fill="rgb(231,142,29)" fg:x="11034" fg:w="34"/><text x="17.2345%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.03%)</title><rect x="16.9937%" y="149" width="0.0276%" height="15" fill="rgb(235,161,22)" fg:x="11068" fg:w="18"/><text x="17.2867%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.03%)</title><rect x="17.0213%" y="149" width="0.0276%" height="15" fill="rgb(226,156,6)" fg:x="11086" fg:w="18"/><text x="17.3143%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.26%)</title><rect x="16.9415%" y="165" width="0.2595%" height="15" fill="rgb(228,10,29)" fg:x="11034" fg:w="169"/><text x="17.2345%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2010%" y="165" width="0.0200%" height="15" fill="rgb(229,91,26)" fg:x="11203" fg:w="13"/><text x="17.4940%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2209%" y="165" width="0.0200%" height="15" fill="rgb(243,140,10)" fg:x="11216" fg:w="13"/><text x="17.5139%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.2409%" y="165" width="0.0200%" height="15" fill="rgb(224,152,48)" fg:x="11229" fg:w="13"/><text x="17.5339%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.68%)</title><rect x="17.2609%" y="165" width="0.6756%" height="15" fill="rgb(236,218,4)" fg:x="11242" fg:w="440"/><text x="17.5538%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="17.9364%" y="133" width="0.0292%" height="15" fill="rgb(230,178,50)" fg:x="11682" fg:w="19"/><text x="18.2294%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.28%)</title><rect x="17.9656%" y="133" width="0.2779%" height="15" fill="rgb(248,124,35)" fg:x="11701" fg:w="181"/><text x="18.2586%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.13%)</title><rect x="18.2435%" y="117" width="0.1320%" height="15" fill="rgb(247,5,53)" fg:x="11882" fg:w="86"/><text x="18.5365%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.19%)</title><rect x="18.2435%" y="133" width="0.1858%" height="15" fill="rgb(216,191,54)" fg:x="11882" fg:w="121"/><text x="18.5365%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="18.4293%" y="133" width="0.0200%" height="15" fill="rgb(254,186,47)" fg:x="12003" fg:w="13"/><text x="18.7223%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (396 instructions, 0.61%)</title><rect x="17.9364%" y="149" width="0.6080%" height="15" fill="rgb(247,151,30)" fg:x="11682" fg:w="396"/><text x="18.2294%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (445 instructions, 0.68%)</title><rect x="17.9364%" y="165" width="0.6832%" height="15" fill="rgb(212,74,33)" fg:x="11682" fg:w="445"/><text x="18.2294%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.20%)</title><rect x="18.6197%" y="165" width="0.2027%" height="15" fill="rgb(208,82,11)" fg:x="12127" fg:w="132"/><text x="18.9127%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,537 instructions, 20.78%)</title><rect x="0.2917%" y="181" width="20.7846%" height="15" fill="rgb(233,14,43)" fg:x="190" fg:w="13537"/><text x="0.5847%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="21.0763%" y="149" width="0.0215%" height="15" fill="rgb(219,60,34)" fg:x="13727" fg:w="14"/><text x="21.3693%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (112 instructions, 0.17%)</title><rect x="21.0978%" y="133" width="0.1720%" height="15" fill="rgb(222,100,15)" fg:x="13741" fg:w="112"/><text x="21.3908%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147 instructions, 0.23%)</title><rect x="21.0978%" y="149" width="0.2257%" height="15" fill="rgb(225,119,48)" fg:x="13741" fg:w="147"/><text x="21.3908%" y="159.50"></text></g><g><title>memset (152 instructions, 0.23%)</title><rect x="21.3235%" y="149" width="0.2334%" height="15" fill="rgb(212,188,12)" fg:x="13888" fg:w="152"/><text x="21.6165%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (493 instructions, 0.76%)</title><rect x="21.0763%" y="165" width="0.7569%" height="15" fill="rgb(216,66,50)" fg:x="13727" fg:w="493"/><text x="21.3693%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.80%)</title><rect x="21.8333%" y="149" width="0.7953%" height="15" fill="rgb(246,76,17)" fg:x="14220" fg:w="518"/><text x="22.1262%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.19%)</title><rect x="22.6286%" y="101" width="0.1858%" height="15" fill="rgb(253,102,10)" fg:x="14738" fg:w="121"/><text x="22.9216%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.25%)</title><rect x="22.6286%" y="117" width="0.2518%" height="15" fill="rgb(235,130,49)" fg:x="14738" fg:w="164"/><text x="22.9216%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (243 instructions, 0.37%)</title><rect x="22.6286%" y="133" width="0.3731%" height="15" fill="rgb(241,27,31)" fg:x="14738" fg:w="243"/><text x="22.9216%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.0017%" y="133" width="0.0230%" height="15" fill="rgb(211,136,9)" fg:x="14981" fg:w="15"/><text x="23.2947%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.0247%" y="133" width="0.0230%" height="15" fill="rgb(253,170,51)" fg:x="14996" fg:w="15"/><text x="23.3177%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (461 instructions, 0.71%)</title><rect x="22.6286%" y="149" width="0.7078%" height="15" fill="rgb(249,114,2)" fg:x="14738" fg:w="461"/><text x="22.9216%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.79%)</title><rect x="23.3364%" y="149" width="0.7923%" height="15" fill="rgb(221,123,32)" fg:x="15199" fg:w="516"/><text x="23.6294%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="24.1287%" y="149" width="0.0107%" height="15" fill="rgb(253,45,23)" fg:x="15715" fg:w="7"/><text x="24.4216%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,595 instructions, 2.45%)</title><rect x="21.8333%" y="165" width="2.4489%" height="15" fill="rgb(238,220,1)" fg:x="14220" fg:w="1595"/><text x="22.1262%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="24.2914%" y="165" width="0.0921%" height="15" fill="rgb(233,132,7)" fg:x="15821" fg:w="60"/><text x="24.5844%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,760 instructions, 4.24%)</title><rect x="21.0763%" y="181" width="4.2377%" height="15" fill="rgb(205,14,34)" fg:x="13727" fg:w="2760"/><text x="21.3693%" y="191.50">ic_c..</text></g><g><title>btreemap::__canister_method_batch_get::{{closure}} (64,514 instructions, 99.05%)</title><rect x="0.2917%" y="197" width="99.0542%" height="15" fill="rgb(223,220,6)" fg:x="190" fg:w="64514"/><text x="0.5847%" y="207.50">btreemap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.3459%" y="197" width="0.0215%" height="15" fill="rgb(244,55,5)" fg:x="64704" fg:w="14"/><text x="99.6389%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.13%)</title><rect x="99.3690%" y="197" width="0.1320%" height="15" fill="rgb(236,30,30)" fg:x="64719" fg:w="86"/><text x="99.6619%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.28%)</title><rect x="99.5010%" y="197" width="0.2779%" height="15" fill="rgb(234,29,38)" fg:x="64805" fg:w="181"/><text x="99.7940%" y="207.50"></text></g><g><title>all (65,130 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,190,9)" fg:x="0" fg:w="65130"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (65,130 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,84,15)" fg:x="0" fg:w="65130"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>