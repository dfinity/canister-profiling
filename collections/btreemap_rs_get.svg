<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="59465"><g><title>ic_cdk::setup (7 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0118%" height="15" fill="rgb(250,89,3)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (136 instructions, 0.23%)</title><rect x="0.0118%" y="165" width="0.2287%" height="15" fill="rgb(237,120,42)" fg:x="7" fg:w="136"/><text x="0.3047%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (146 instructions, 0.25%)</title><rect x="0.0118%" y="181" width="0.2455%" height="15" fill="rgb(226,93,50)" fg:x="7" fg:w="146"/><text x="0.3047%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.15%)</title><rect x="0.2623%" y="165" width="0.1497%" height="15" fill="rgb(207,158,54)" fg:x="156" fg:w="89"/><text x="0.5553%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.17%)</title><rect x="0.2623%" y="181" width="0.1665%" height="15" fill="rgb(239,16,4)" fg:x="156" fg:w="99"/><text x="0.5553%" y="191.50"></text></g><g><title>__rust_alloc (251 instructions, 0.42%)</title><rect x="0.0118%" y="197" width="0.4221%" height="15" fill="rgb(250,45,38)" fg:x="7" fg:w="251"/><text x="0.3047%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="0.4339%" y="133" width="0.1564%" height="15" fill="rgb(254,197,13)" fg:x="258" fg:w="93"/><text x="0.7268%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="0.4339%" y="149" width="0.1732%" height="15" fill="rgb(236,19,43)" fg:x="258" fg:w="103"/><text x="0.7268%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="0.4339%" y="165" width="0.1783%" height="15" fill="rgb(229,223,54)" fg:x="258" fg:w="106"/><text x="0.7268%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (165 instructions, 0.28%)</title><rect x="0.4339%" y="181" width="0.2775%" height="15" fill="rgb(240,210,11)" fg:x="258" fg:w="165"/><text x="0.7268%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="0.7113%" y="165" width="0.1026%" height="15" fill="rgb(249,75,44)" fg:x="423" fg:w="61"/><text x="1.0043%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.68%)</title><rect x="0.8139%" y="165" width="0.6844%" height="15" fill="rgb(210,107,23)" fg:x="484" fg:w="407"/><text x="1.1069%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="1.4984%" y="165" width="0.1244%" height="15" fill="rgb(219,11,30)" fg:x="891" fg:w="74"/><text x="1.7913%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6228%" y="165" width="0.0908%" height="15" fill="rgb(227,97,10)" fg:x="965" fg:w="54"/><text x="1.9158%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.7136%" y="165" width="0.0908%" height="15" fill="rgb(236,51,48)" fg:x="1019" fg:w="54"/><text x="2.0066%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.8044%" y="165" width="0.0908%" height="15" fill="rgb(226,24,31)" fg:x="1073" fg:w="54"/><text x="2.0974%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.8952%" y="165" width="0.0908%" height="15" fill="rgb(235,22,50)" fg:x="1127" fg:w="54"/><text x="2.1882%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="1.9860%" y="165" width="0.1026%" height="15" fill="rgb(215,135,23)" fg:x="1181" fg:w="61"/><text x="2.2790%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.16%)</title><rect x="2.0886%" y="165" width="0.1631%" height="15" fill="rgb(242,5,17)" fg:x="1242" fg:w="97"/><text x="2.3816%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.68%)</title><rect x="2.2517%" y="165" width="0.6844%" height="15" fill="rgb(240,201,15)" fg:x="1339" fg:w="407"/><text x="2.5447%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9362%" y="165" width="0.0269%" height="15" fill="rgb(225,126,25)" fg:x="1746" fg:w="16"/><text x="3.2291%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="2.9631%" y="101" width="0.1564%" height="15" fill="rgb(218,108,46)" fg:x="1762" fg:w="93"/><text x="3.2561%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="2.9631%" y="117" width="0.1732%" height="15" fill="rgb(228,203,27)" fg:x="1762" fg:w="103"/><text x="3.2561%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="2.9631%" y="133" width="0.1783%" height="15" fill="rgb(225,19,16)" fg:x="1762" fg:w="106"/><text x="3.2561%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="3.1413%" y="101" width="0.1009%" height="15" fill="rgb(238,133,12)" fg:x="1868" fg:w="60"/><text x="3.4343%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="3.1413%" y="117" width="0.1429%" height="15" fill="rgb(236,224,41)" fg:x="1868" fg:w="85"/><text x="3.4343%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2843%" y="69" width="0.0151%" height="15" fill="rgb(252,185,5)" fg:x="1953" fg:w="9"/><text x="3.5773%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="3.2994%" y="53" width="0.0504%" height="15" fill="rgb(234,54,12)" fg:x="1962" fg:w="30"/><text x="3.5924%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="3.2994%" y="69" width="0.0925%" height="15" fill="rgb(233,139,9)" fg:x="1962" fg:w="55"/><text x="3.5924%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.20%)</title><rect x="3.2843%" y="85" width="0.1951%" height="15" fill="rgb(223,58,23)" fg:x="1953" fg:w="116"/><text x="3.5773%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.28%)</title><rect x="3.2843%" y="101" width="0.2842%" height="15" fill="rgb(227,189,7)" fg:x="1953" fg:w="169"/><text x="3.5773%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.29%)</title><rect x="3.2843%" y="117" width="0.2926%" height="15" fill="rgb(220,74,10)" fg:x="1953" fg:w="174"/><text x="3.5773%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 0.62%)</title><rect x="3.1413%" y="133" width="0.6172%" height="15" fill="rgb(253,70,24)" fg:x="1868" fg:w="367"/><text x="3.4343%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (616 instructions, 1.04%)</title><rect x="2.9631%" y="149" width="1.0359%" height="15" fill="rgb(235,157,2)" fg:x="1762" fg:w="616"/><text x="3.2561%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="3.9990%" y="149" width="0.1244%" height="15" fill="rgb(229,85,37)" fg:x="2378" fg:w="74"/><text x="4.2920%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="4.1234%" y="149" width="0.0925%" height="15" fill="rgb(239,52,37)" fg:x="2452" fg:w="55"/><text x="4.4164%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (816 instructions, 1.37%)</title><rect x="2.9631%" y="165" width="1.3722%" height="15" fill="rgb(228,19,12)" fg:x="1762" fg:w="816"/><text x="3.2561%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="4.3353%" y="165" width="0.0942%" height="15" fill="rgb(211,50,28)" fg:x="2578" fg:w="56"/><text x="4.6283%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.16%)</title><rect x="4.4295%" y="165" width="0.1631%" height="15" fill="rgb(236,157,20)" fg:x="2634" fg:w="97"/><text x="4.7225%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.68%)</title><rect x="4.5926%" y="149" width="0.6844%" height="15" fill="rgb(221,203,10)" fg:x="2731" fg:w="407"/><text x="4.8856%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.2771%" y="149" width="0.0269%" height="15" fill="rgb(215,156,28)" fg:x="3138" fg:w="16"/><text x="5.5700%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="5.3040%" y="85" width="0.1564%" height="15" fill="rgb(233,143,47)" fg:x="3154" fg:w="93"/><text x="5.5969%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="5.3040%" y="101" width="0.1732%" height="15" fill="rgb(216,133,22)" fg:x="3154" fg:w="103"/><text x="5.5969%" y="111.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="5.3040%" y="117" width="0.1783%" height="15" fill="rgb(241,46,18)" fg:x="3154" fg:w="106"/><text x="5.5969%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="5.4822%" y="85" width="0.1009%" height="15" fill="rgb(214,92,7)" fg:x="3260" fg:w="60"/><text x="5.7752%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="5.4822%" y="101" width="0.1429%" height="15" fill="rgb(240,26,47)" fg:x="3260" fg:w="85"/><text x="5.7752%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6252%" y="53" width="0.0151%" height="15" fill="rgb(218,27,39)" fg:x="3345" fg:w="9"/><text x="5.9181%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.6403%" y="37" width="0.0504%" height="15" fill="rgb(207,11,4)" fg:x="3354" fg:w="30"/><text x="5.9333%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="5.6403%" y="53" width="0.0925%" height="15" fill="rgb(238,185,25)" fg:x="3354" fg:w="55"/><text x="5.9333%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.20%)</title><rect x="5.6252%" y="69" width="0.1951%" height="15" fill="rgb(205,224,5)" fg:x="3345" fg:w="116"/><text x="5.9181%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.28%)</title><rect x="5.6252%" y="85" width="0.2842%" height="15" fill="rgb(224,222,16)" fg:x="3345" fg:w="169"/><text x="5.9181%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.29%)</title><rect x="5.6252%" y="101" width="0.2926%" height="15" fill="rgb(249,9,28)" fg:x="3345" fg:w="174"/><text x="5.9181%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 0.62%)</title><rect x="5.4822%" y="117" width="0.6172%" height="15" fill="rgb(211,170,50)" fg:x="3260" fg:w="367"/><text x="5.7752%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (616 instructions, 1.04%)</title><rect x="5.3040%" y="133" width="1.0359%" height="15" fill="rgb(232,103,47)" fg:x="3154" fg:w="616"/><text x="5.5969%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="6.3399%" y="133" width="0.1244%" height="15" fill="rgb(237,69,9)" fg:x="3770" fg:w="74"/><text x="6.6328%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="6.4643%" y="133" width="0.0925%" height="15" fill="rgb(223,2,35)" fg:x="3844" fg:w="55"/><text x="6.7573%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (816 instructions, 1.37%)</title><rect x="5.3040%" y="149" width="1.3722%" height="15" fill="rgb(207,90,4)" fg:x="3154" fg:w="816"/><text x="5.5969%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="6.6762%" y="133" width="0.1026%" height="15" fill="rgb(219,106,10)" fg:x="3970" fg:w="61"/><text x="6.9692%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.21%)</title><rect x="6.7788%" y="133" width="0.2119%" height="15" fill="rgb(218,56,18)" fg:x="4031" fg:w="126"/><text x="7.0717%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="6.9907%" y="133" width="0.0942%" height="15" fill="rgb(213,20,22)" fg:x="4157" fg:w="56"/><text x="7.2836%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 0.51%)</title><rect x="6.6762%" y="149" width="0.5129%" height="15" fill="rgb(242,119,53)" fg:x="3970" fg:w="305"/><text x="6.9692%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="7.1891%" y="117" width="0.1564%" height="15" fill="rgb(239,131,52)" fg:x="4275" fg:w="93"/><text x="7.4821%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="7.1891%" y="133" width="0.1732%" height="15" fill="rgb(251,162,26)" fg:x="4275" fg:w="103"/><text x="7.4821%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="7.1891%" y="149" width="0.1783%" height="15" fill="rgb(228,91,7)" fg:x="4275" fg:w="106"/><text x="7.4821%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,875 instructions, 3.15%)</title><rect x="4.5926%" y="165" width="3.1531%" height="15" fill="rgb(209,164,5)" fg:x="2731" fg:w="1875"/><text x="4.8856%" y="175.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="7.7457%" y="165" width="0.0942%" height="15" fill="rgb(253,116,11)" fg:x="4606" fg:w="56"/><text x="8.0387%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8399%" y="165" width="0.0219%" height="15" fill="rgb(242,49,29)" fg:x="4662" fg:w="13"/><text x="8.1329%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8618%" y="165" width="0.0219%" height="15" fill="rgb(220,138,17)" fg:x="4675" fg:w="13"/><text x="8.1547%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="7.8836%" y="165" width="0.0370%" height="15" fill="rgb(229,42,31)" fg:x="4688" fg:w="22"/><text x="8.1766%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="7.9206%" y="117" width="0.1564%" height="15" fill="rgb(252,197,25)" fg:x="4710" fg:w="93"/><text x="8.2136%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="7.9206%" y="133" width="0.1732%" height="15" fill="rgb(250,91,51)" fg:x="4710" fg:w="103"/><text x="8.2136%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="7.9206%" y="149" width="0.1783%" height="15" fill="rgb(253,77,0)" fg:x="4710" fg:w="106"/><text x="8.2136%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (186 instructions, 0.31%)</title><rect x="7.9206%" y="165" width="0.3128%" height="15" fill="rgb(210,193,27)" fg:x="4710" fg:w="186"/><text x="8.2136%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="8.2334%" y="101" width="0.1564%" height="15" fill="rgb(239,158,52)" fg:x="4896" fg:w="93"/><text x="8.5264%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.2334%" y="117" width="0.1732%" height="15" fill="rgb(220,129,44)" fg:x="4896" fg:w="103"/><text x="8.5264%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="8.2334%" y="133" width="0.1783%" height="15" fill="rgb(235,47,11)" fg:x="4896" fg:w="106"/><text x="8.5264%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (136 instructions, 0.23%)</title><rect x="8.2334%" y="149" width="0.2287%" height="15" fill="rgb(240,219,14)" fg:x="4896" fg:w="136"/><text x="8.5264%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (204 instructions, 0.34%)</title><rect x="8.2334%" y="165" width="0.3431%" height="15" fill="rgb(210,119,36)" fg:x="4896" fg:w="204"/><text x="8.5264%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="8.5765%" y="133" width="0.1564%" height="15" fill="rgb(252,125,12)" fg:x="5100" fg:w="93"/><text x="8.8694%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.5765%" y="149" width="0.1732%" height="15" fill="rgb(234,166,23)" fg:x="5100" fg:w="103"/><text x="8.8694%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="8.5765%" y="165" width="0.1783%" height="15" fill="rgb(208,110,44)" fg:x="5100" fg:w="106"/><text x="8.8694%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="8.7547%" y="165" width="0.1362%" height="15" fill="rgb(228,165,48)" fg:x="5206" fg:w="81"/><text x="9.0477%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="8.8909%" y="133" width="0.1564%" height="15" fill="rgb(222,24,30)" fg:x="5287" fg:w="93"/><text x="9.1839%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.8909%" y="149" width="0.1732%" height="15" fill="rgb(232,147,51)" fg:x="5287" fg:w="103"/><text x="9.1839%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="9.0692%" y="133" width="0.1564%" height="15" fill="rgb(254,128,21)" fg:x="5393" fg:w="93"/><text x="9.3622%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="9.0692%" y="149" width="0.1732%" height="15" fill="rgb(242,146,40)" fg:x="5393" fg:w="103"/><text x="9.3622%" y="159.50"></text></g><g><title>__rust_alloc (212 instructions, 0.36%)</title><rect x="8.8909%" y="165" width="0.3565%" height="15" fill="rgb(237,49,5)" fg:x="5287" fg:w="212"/><text x="9.1839%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.02%)</title><rect x="9.2475%" y="165" width="0.0235%" height="15" fill="rgb(242,162,28)" fg:x="5499" fg:w="14"/><text x="9.5404%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="9.2710%" y="165" width="0.1362%" height="15" fill="rgb(221,173,35)" fg:x="5513" fg:w="81"/><text x="9.5640%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.69%)</title><rect x="9.4072%" y="165" width="0.6912%" height="15" fill="rgb(216,221,7)" fg:x="5594" fg:w="411"/><text x="9.7002%" y="175.50"></text></g><g><title>memcpy (366 instructions, 0.62%)</title><rect x="10.0984%" y="165" width="0.6155%" height="15" fill="rgb(205,182,18)" fg:x="6005" fg:w="366"/><text x="10.3913%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,263 instructions, 12.21%)</title><rect x="0.7113%" y="181" width="12.2139%" height="15" fill="rgb(251,146,15)" fg:x="423" fg:w="7263"/><text x="1.0043%" y="191.50">candid::de::IDL..</text></g><g><title>memcpy (381 instructions, 0.64%)</title><rect x="12.9253%" y="181" width="0.6407%" height="15" fill="rgb(253,191,31)" fg:x="7686" fg:w="381"/><text x="13.2182%" y="191.50"></text></g><g><title>memcpy (381 instructions, 0.64%)</title><rect x="13.5660%" y="181" width="0.6407%" height="15" fill="rgb(250,67,7)" fg:x="8067" fg:w="381"/><text x="13.8589%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.01%)</title><rect x="14.2067%" y="149" width="0.0101%" height="15" fill="rgb(225,170,32)" fg:x="8448" fg:w="6"/><text x="14.4996%" y="159.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.08%)</title><rect x="14.2067%" y="165" width="0.0757%" height="15" fill="rgb(231,56,36)" fg:x="8448" fg:w="45"/><text x="14.4996%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="14.2824%" y="117" width="0.1564%" height="15" fill="rgb(245,23,21)" fg:x="8493" fg:w="93"/><text x="14.5753%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="14.2824%" y="133" width="0.1732%" height="15" fill="rgb(244,70,14)" fg:x="8493" fg:w="103"/><text x="14.5753%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="14.2824%" y="149" width="0.1783%" height="15" fill="rgb(209,156,0)" fg:x="8493" fg:w="106"/><text x="14.5753%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (152 instructions, 0.26%)</title><rect x="14.2824%" y="165" width="0.2556%" height="15" fill="rgb(243,84,21)" fg:x="8493" fg:w="152"/><text x="14.5753%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="14.5464%" y="117" width="0.0891%" height="15" fill="rgb(247,116,20)" fg:x="8650" fg:w="53"/><text x="14.8393%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="14.6355%" y="117" width="0.1497%" height="15" fill="rgb(244,78,4)" fg:x="8703" fg:w="89"/><text x="14.9285%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.27%)</title><rect x="14.7852%" y="117" width="0.2707%" height="15" fill="rgb(241,139,44)" fg:x="8792" fg:w="161"/><text x="15.0781%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 0.92%)</title><rect x="14.5464%" y="133" width="0.9182%" height="15" fill="rgb(233,183,7)" fg:x="8650" fg:w="546"/><text x="14.8393%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 1.34%)</title><rect x="14.5380%" y="149" width="1.3386%" height="15" fill="rgb(230,186,6)" fg:x="8645" fg:w="796"/><text x="14.8309%" y="159.50"></text></g><g><title>candid::types::internal::env_add (822 instructions, 1.38%)</title><rect x="14.5380%" y="165" width="1.3823%" height="15" fill="rgb(209,208,35)" fg:x="8645" fg:w="822"/><text x="14.8309%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="15.9203%" y="133" width="0.1564%" height="15" fill="rgb(217,111,4)" fg:x="9467" fg:w="93"/><text x="16.2133%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="15.9203%" y="149" width="0.1732%" height="15" fill="rgb(244,31,17)" fg:x="9467" fg:w="103"/><text x="16.2133%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="15.9203%" y="165" width="0.1783%" height="15" fill="rgb(222,138,7)" fg:x="9467" fg:w="106"/><text x="16.2133%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="16.1070%" y="117" width="0.0891%" height="15" fill="rgb(249,104,20)" fg:x="9578" fg:w="53"/><text x="16.3999%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="16.1961%" y="117" width="0.1497%" height="15" fill="rgb(238,11,20)" fg:x="9631" fg:w="89"/><text x="16.4891%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.27%)</title><rect x="16.3457%" y="117" width="0.2707%" height="15" fill="rgb(208,65,2)" fg:x="9720" fg:w="161"/><text x="16.6387%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 0.92%)</title><rect x="16.1070%" y="133" width="0.9182%" height="15" fill="rgb(216,226,22)" fg:x="9578" fg:w="546"/><text x="16.3999%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.11%)</title><rect x="17.0251%" y="133" width="0.1144%" height="15" fill="rgb(254,162,28)" fg:x="10124" fg:w="68"/><text x="17.3181%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="17.1395%" y="117" width="0.1362%" height="15" fill="rgb(247,160,33)" fg:x="10192" fg:w="81"/><text x="17.4325%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.19%)</title><rect x="17.1395%" y="133" width="0.1867%" height="15" fill="rgb(222,85,38)" fg:x="10192" fg:w="111"/><text x="17.4325%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 1.52%)</title><rect x="16.0985%" y="149" width="1.5202%" height="15" fill="rgb(216,35,6)" fg:x="9573" fg:w="904"/><text x="16.3915%" y="159.50"></text></g><g><title>candid::types::internal::env_add (930 instructions, 1.56%)</title><rect x="16.0985%" y="165" width="1.5639%" height="15" fill="rgb(221,10,3)" fg:x="9573" fg:w="930"/><text x="16.3915%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="17.6709%" y="101" width="0.0891%" height="15" fill="rgb(206,14,44)" fg:x="10508" fg:w="53"/><text x="17.9639%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.13%)</title><rect x="17.6709%" y="117" width="0.1312%" height="15" fill="rgb(234,113,35)" fg:x="10508" fg:w="78"/><text x="17.9639%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 0.50%)</title><rect x="17.6709%" y="133" width="0.5045%" height="15" fill="rgb(215,44,26)" fg:x="10508" fg:w="300"/><text x="17.9639%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.05%)</title><rect x="18.1754%" y="133" width="0.0454%" height="15" fill="rgb(243,49,10)" fg:x="10808" fg:w="27"/><text x="18.4684%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.2208%" y="133" width="0.0185%" height="15" fill="rgb(207,67,40)" fg:x="10835" fg:w="11"/><text x="18.5138%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 0.87%)</title><rect x="17.6625%" y="149" width="0.8661%" height="15" fill="rgb(245,135,52)" fg:x="10503" fg:w="515"/><text x="17.9555%" y="159.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 0.93%)</title><rect x="17.6625%" y="165" width="0.9283%" height="15" fill="rgb(254,70,18)" fg:x="10503" fg:w="552"/><text x="17.9555%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.06%)</title><rect x="18.5908%" y="165" width="0.0622%" height="15" fill="rgb(225,107,3)" fg:x="11055" fg:w="37"/><text x="18.8837%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.21%)</title><rect x="18.6530%" y="149" width="0.2068%" height="15" fill="rgb(253,9,15)" fg:x="11092" fg:w="123"/><text x="18.9460%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.21%)</title><rect x="18.9103%" y="149" width="0.2068%" height="15" fill="rgb(239,182,43)" fg:x="11245" fg:w="123"/><text x="19.2033%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 0.51%)</title><rect x="18.6530%" y="165" width="0.5146%" height="15" fill="rgb(224,113,10)" fg:x="11092" fg:w="306"/><text x="18.9460%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="19.1676%" y="149" width="0.0471%" height="15" fill="rgb(213,103,14)" fg:x="11398" fg:w="28"/><text x="19.4605%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="19.2147%" y="149" width="0.0252%" height="15" fill="rgb(242,38,36)" fg:x="11426" fg:w="15"/><text x="19.5076%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="19.2399%" y="149" width="0.0252%" height="15" fill="rgb(226,63,11)" fg:x="11441" fg:w="15"/><text x="19.5329%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (139 instructions, 0.23%)</title><rect x="19.1676%" y="165" width="0.2338%" height="15" fill="rgb(242,25,41)" fg:x="11398" fg:w="139"/><text x="19.4605%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.4013%" y="165" width="0.0185%" height="15" fill="rgb(226,124,31)" fg:x="11537" fg:w="11"/><text x="19.6943%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.4198%" y="165" width="0.0185%" height="15" fill="rgb(220,201,4)" fg:x="11548" fg:w="11"/><text x="19.7128%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.4383%" y="165" width="0.0185%" height="15" fill="rgb(254,122,37)" fg:x="11559" fg:w="11"/><text x="19.7313%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,400 instructions, 5.72%)</title><rect x="14.2067%" y="181" width="5.7176%" height="15" fill="rgb(218,197,53)" fg:x="8448" fg:w="3400"/><text x="14.4996%" y="191.50">candid..</text></g><g><title>memcpy (411 instructions, 0.69%)</title><rect x="19.9243%" y="181" width="0.6912%" height="15" fill="rgb(237,39,4)" fg:x="11848" fg:w="411"/><text x="20.2173%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="20.6155%" y="165" width="0.0370%" height="15" fill="rgb(252,121,0)" fg:x="12259" fg:w="22"/><text x="20.9085%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.28%)</title><rect x="20.6525%" y="165" width="0.2842%" height="15" fill="rgb(236,170,46)" fg:x="12281" fg:w="169"/><text x="20.9455%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.12%)</title><rect x="20.9367%" y="133" width="0.1194%" height="15" fill="rgb(236,223,36)" fg:x="12450" fg:w="71"/><text x="21.2297%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 0.36%)</title><rect x="20.9367%" y="149" width="0.3632%" height="15" fill="rgb(219,22,25)" fg:x="12450" fg:w="216"/><text x="21.2297%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 0.41%)</title><rect x="20.9367%" y="165" width="0.4137%" height="15" fill="rgb(253,125,51)" fg:x="12450" fg:w="246"/><text x="21.2297%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.3504%" y="165" width="0.0185%" height="15" fill="rgb(238,78,54)" fg:x="12696" fg:w="11"/><text x="21.6433%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (547 instructions, 0.92%)</title><rect x="20.6155%" y="181" width="0.9199%" height="15" fill="rgb(241,180,9)" fg:x="12259" fg:w="547"/><text x="20.9085%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.09%)</title><rect x="21.5354%" y="165" width="0.0908%" height="15" fill="rgb(235,77,23)" fg:x="12806" fg:w="54"/><text x="21.8283%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.12%)</title><rect x="21.6262%" y="165" width="0.1194%" height="15" fill="rgb(243,61,53)" fg:x="12860" fg:w="71"/><text x="21.9191%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.34%)</title><rect x="21.5354%" y="181" width="0.3447%" height="15" fill="rgb(241,120,33)" fg:x="12806" fg:w="205"/><text x="21.8283%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,885 instructions, 21.67%)</title><rect x="0.4339%" y="197" width="21.6682%" height="15" fill="rgb(206,73,38)" fg:x="258" fg:w="12885"/><text x="0.7268%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (13 instructions, 0.02%)</title><rect x="22.1021%" y="181" width="0.0219%" height="15" fill="rgb(212,149,18)" fg:x="13143" fg:w="13"/><text x="22.3950%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (44,781 instructions, 75.31%)</title><rect x="22.1021%" y="197" width="75.3065%" height="15" fill="rgb(251,96,6)" fg:x="13143" fg:w="44781"/><text x="22.3950%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.09%)</title><rect x="97.4170%" y="133" width="0.0908%" height="15" fill="rgb(242,228,28)" fg:x="57929" fg:w="54"/><text x="97.7099%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.23%)</title><rect x="97.4170%" y="149" width="0.2287%" height="15" fill="rgb(227,142,28)" fg:x="57929" fg:w="136"/><text x="97.7099%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (166 instructions, 0.28%)</title><rect x="97.4170%" y="165" width="0.2792%" height="15" fill="rgb(221,10,51)" fg:x="57929" fg:w="166"/><text x="97.7099%" y="175.50"></text></g><g><title>memset (136 instructions, 0.23%)</title><rect x="97.6961%" y="165" width="0.2287%" height="15" fill="rgb(207,142,46)" fg:x="58095" fg:w="136"/><text x="97.9891%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 0.78%)</title><rect x="97.4086%" y="181" width="0.7803%" height="15" fill="rgb(216,203,50)" fg:x="57924" fg:w="464"/><text x="97.7015%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.13%)</title><rect x="98.1889%" y="165" width="0.1312%" height="15" fill="rgb(231,194,34)" fg:x="58388" fg:w="78"/><text x="98.4818%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.16%)</title><rect x="98.3200%" y="101" width="0.1564%" height="15" fill="rgb(242,60,44)" fg:x="58466" fg:w="93"/><text x="98.6130%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="98.3200%" y="117" width="0.1732%" height="15" fill="rgb(246,197,41)" fg:x="58466" fg:w="103"/><text x="98.6130%" y="127.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="98.3200%" y="133" width="0.1783%" height="15" fill="rgb(213,39,0)" fg:x="58466" fg:w="106"/><text x="98.6130%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (136 instructions, 0.23%)</title><rect x="98.3200%" y="149" width="0.2287%" height="15" fill="rgb(223,176,33)" fg:x="58466" fg:w="136"/><text x="98.6130%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (201 instructions, 0.34%)</title><rect x="98.3200%" y="165" width="0.3380%" height="15" fill="rgb(249,146,36)" fg:x="58466" fg:w="201"/><text x="98.6130%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.6580%" y="165" width="0.0185%" height="15" fill="rgb(226,120,22)" fg:x="58667" fg:w="11"/><text x="98.9510%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.6765%" y="165" width="0.0185%" height="15" fill="rgb(212,215,20)" fg:x="58678" fg:w="11"/><text x="98.9695%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.13%)</title><rect x="98.6950%" y="165" width="0.1278%" height="15" fill="rgb(236,147,53)" fg:x="58689" fg:w="76"/><text x="98.9880%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.02%)</title><rect x="98.8228%" y="165" width="0.0235%" height="15" fill="rgb(230,96,28)" fg:x="58765" fg:w="14"/><text x="99.1158%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (673 instructions, 1.13%)</title><rect x="98.1889%" y="181" width="1.1318%" height="15" fill="rgb(240,127,22)" fg:x="58388" fg:w="673"/><text x="98.4818%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="99.3290%" y="181" width="0.0925%" height="15" fill="rgb(214,178,5)" fg:x="59066" fg:w="55"/><text x="99.6220%" y="191.50"></text></g><g><title>candid::utils::write_args (1,261 instructions, 2.12%)</title><rect x="97.4086%" y="197" width="2.1206%" height="15" fill="rgb(225,84,49)" fg:x="57924" fg:w="1261"/><text x="97.7015%" y="207.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="99.5291%" y="197" width="0.1362%" height="15" fill="rgb(205,171,50)" fg:x="59185" fg:w="81"/><text x="99.8221%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (127 instructions, 0.21%)</title><rect x="99.6653%" y="197" width="0.2136%" height="15" fill="rgb(218,67,40)" fg:x="59266" fg:w="127"/><text x="99.9583%" y="207.50"></text></g><g><title>all (59,465 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,121,26)" fg:x="0" fg:w="59465"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (59,465 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(254,224,27)" fg:x="0" fg:w="59465"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>