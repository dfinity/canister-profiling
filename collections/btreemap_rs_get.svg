<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="66814"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0284%" height="15" fill="rgb(214,222,38)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.0284%" y="197" width="0.1137%" height="15" fill="rgb(217,145,3)" fg:x="19" fg:w="76"/><text x="0.3214%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.1422%" y="197" width="0.1137%" height="15" fill="rgb(216,54,15)" fg:x="95" fg:w="76"/><text x="0.4352%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.2559%" y="165" width="0.1137%" height="15" fill="rgb(245,124,21)" fg:x="171" fg:w="76"/><text x="0.5489%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.11%)</title><rect x="0.3697%" y="149" width="0.1063%" height="15" fill="rgb(216,173,39)" fg:x="247" fg:w="71"/><text x="0.6627%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.60%)</title><rect x="0.4759%" y="149" width="0.5987%" height="15" fill="rgb(219,199,36)" fg:x="318" fg:w="400"/><text x="0.7689%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.13%)</title><rect x="1.0746%" y="149" width="0.1272%" height="15" fill="rgb(249,100,18)" fg:x="718" fg:w="85"/><text x="1.3676%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.2018%" y="149" width="0.0808%" height="15" fill="rgb(219,56,51)" fg:x="803" fg:w="54"/><text x="1.4948%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.2827%" y="149" width="0.0808%" height="15" fill="rgb(239,226,17)" fg:x="857" fg:w="54"/><text x="1.5756%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.3635%" y="149" width="0.0808%" height="15" fill="rgb(215,122,54)" fg:x="911" fg:w="54"/><text x="1.6565%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.4443%" y="149" width="0.0808%" height="15" fill="rgb(227,114,8)" fg:x="965" fg:w="54"/><text x="1.7373%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.11%)</title><rect x="1.5251%" y="149" width="0.1063%" height="15" fill="rgb(228,87,36)" fg:x="1019" fg:w="71"/><text x="1.8181%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.10%)</title><rect x="1.6314%" y="149" width="0.0973%" height="15" fill="rgb(246,119,30)" fg:x="1090" fg:w="65"/><text x="1.9244%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.60%)</title><rect x="1.7287%" y="149" width="0.5987%" height="15" fill="rgb(231,212,47)" fg:x="1155" fg:w="400"/><text x="2.0216%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="2.3274%" y="149" width="0.0239%" height="15" fill="rgb(234,127,38)" fg:x="1555" fg:w="16"/><text x="2.6203%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="2.3513%" y="133" width="0.1137%" height="15" fill="rgb(252,195,3)" fg:x="1571" fg:w="76"/><text x="2.6443%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.09%)</title><rect x="2.4651%" y="101" width="0.0898%" height="15" fill="rgb(205,21,37)" fg:x="1647" fg:w="60"/><text x="2.7580%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.13%)</title><rect x="2.4651%" y="117" width="0.1272%" height="15" fill="rgb(240,88,9)" fg:x="1647" fg:w="85"/><text x="2.7580%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.5923%" y="69" width="0.0135%" height="15" fill="rgb(240,59,11)" fg:x="1732" fg:w="9"/><text x="2.8852%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.6057%" y="53" width="0.0449%" height="15" fill="rgb(210,53,50)" fg:x="1741" fg:w="30"/><text x="2.8987%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.08%)</title><rect x="2.6057%" y="69" width="0.0823%" height="15" fill="rgb(222,0,8)" fg:x="1741" fg:w="55"/><text x="2.8987%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.18%)</title><rect x="2.5923%" y="85" width="0.1766%" height="15" fill="rgb(254,81,25)" fg:x="1732" fg:w="118"/><text x="2.8852%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.26%)</title><rect x="2.5923%" y="101" width="0.2559%" height="15" fill="rgb(214,19,51)" fg:x="1732" fg:w="171"/><text x="2.8852%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.26%)</title><rect x="2.5923%" y="117" width="0.2634%" height="15" fill="rgb(206,150,7)" fg:x="1732" fg:w="176"/><text x="2.8852%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.56%)</title><rect x="2.4651%" y="133" width="0.5568%" height="15" fill="rgb(209,26,52)" fg:x="1647" fg:w="372"/><text x="2.7580%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.89%)</title><rect x="2.3513%" y="149" width="0.8890%" height="15" fill="rgb(222,206,3)" fg:x="1571" fg:w="594"/><text x="2.6443%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.13%)</title><rect x="3.2403%" y="149" width="0.1272%" height="15" fill="rgb(218,190,40)" fg:x="2165" fg:w="85"/><text x="3.5333%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="3.3676%" y="149" width="0.0823%" height="15" fill="rgb(228,182,26)" fg:x="2250" fg:w="55"/><text x="3.6605%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.10%)</title><rect x="3.4499%" y="149" width="0.0988%" height="15" fill="rgb(226,180,9)" fg:x="2305" fg:w="66"/><text x="3.7428%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.10%)</title><rect x="3.5487%" y="149" width="0.0973%" height="15" fill="rgb(223,161,47)" fg:x="2371" fg:w="65"/><text x="3.8416%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.60%)</title><rect x="3.6459%" y="133" width="0.5987%" height="15" fill="rgb(217,120,5)" fg:x="2436" fg:w="400"/><text x="3.9389%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="4.2446%" y="133" width="0.0239%" height="15" fill="rgb(230,190,32)" fg:x="2836" fg:w="16"/><text x="4.5376%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="4.2686%" y="117" width="0.1137%" height="15" fill="rgb(210,67,35)" fg:x="2852" fg:w="76"/><text x="4.5615%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.09%)</title><rect x="4.3823%" y="85" width="0.0898%" height="15" fill="rgb(234,30,6)" fg:x="2928" fg:w="60"/><text x="4.6753%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.13%)</title><rect x="4.3823%" y="101" width="0.1272%" height="15" fill="rgb(253,87,1)" fg:x="2928" fg:w="85"/><text x="4.6753%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="4.5095%" y="53" width="0.0135%" height="15" fill="rgb(231,122,4)" fg:x="3013" fg:w="9"/><text x="4.8025%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="4.5230%" y="37" width="0.0449%" height="15" fill="rgb(227,185,9)" fg:x="3022" fg:w="30"/><text x="4.8160%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.08%)</title><rect x="4.5230%" y="53" width="0.0823%" height="15" fill="rgb(244,203,13)" fg:x="3022" fg:w="55"/><text x="4.8160%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.18%)</title><rect x="4.5095%" y="69" width="0.1766%" height="15" fill="rgb(243,92,33)" fg:x="3013" fg:w="118"/><text x="4.8025%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.26%)</title><rect x="4.5095%" y="85" width="0.2559%" height="15" fill="rgb(249,110,39)" fg:x="3013" fg:w="171"/><text x="4.8025%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.26%)</title><rect x="4.5095%" y="101" width="0.2634%" height="15" fill="rgb(231,176,32)" fg:x="3013" fg:w="176"/><text x="4.8025%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.56%)</title><rect x="4.3823%" y="117" width="0.5568%" height="15" fill="rgb(246,56,22)" fg:x="2928" fg:w="372"/><text x="4.6753%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.89%)</title><rect x="4.2686%" y="133" width="0.8890%" height="15" fill="rgb(216,50,31)" fg:x="2852" fg:w="594"/><text x="4.5615%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.13%)</title><rect x="5.1576%" y="133" width="0.1272%" height="15" fill="rgb(219,4,47)" fg:x="3446" fg:w="85"/><text x="5.4506%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="5.2848%" y="133" width="0.0823%" height="15" fill="rgb(209,16,15)" fg:x="3531" fg:w="55"/><text x="5.5778%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.11%)</title><rect x="5.3671%" y="117" width="0.1063%" height="15" fill="rgb(236,148,51)" fg:x="3586" fg:w="71"/><text x="5.6601%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.14%)</title><rect x="5.4734%" y="117" width="0.1362%" height="15" fill="rgb(214,88,47)" fg:x="3657" fg:w="91"/><text x="5.7664%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.10%)</title><rect x="5.6096%" y="117" width="0.0988%" height="15" fill="rgb(245,144,6)" fg:x="3748" fg:w="66"/><text x="5.9026%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.43%)</title><rect x="5.3671%" y="133" width="0.4296%" height="15" fill="rgb(245,135,7)" fg:x="3586" fg:w="287"/><text x="5.6601%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.12%)</title><rect x="5.7967%" y="133" width="0.1182%" height="15" fill="rgb(226,162,10)" fg:x="3873" fg:w="79"/><text x="6.0897%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,717 instructions, 2.57%)</title><rect x="3.6459%" y="149" width="2.5698%" height="15" fill="rgb(238,147,42)" fg:x="2436" fg:w="1717"/><text x="3.9389%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.10%)</title><rect x="6.2158%" y="149" width="0.0988%" height="15" fill="rgb(248,33,15)" fg:x="4153" fg:w="66"/><text x="6.5087%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.3145%" y="149" width="0.0195%" height="15" fill="rgb(210,85,26)" fg:x="4219" fg:w="13"/><text x="6.6075%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.3340%" y="149" width="0.0195%" height="15" fill="rgb(211,175,38)" fg:x="4232" fg:w="13"/><text x="6.6270%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="6.3535%" y="149" width="0.0105%" height="15" fill="rgb(231,63,27)" fg:x="4245" fg:w="7"/><text x="6.6464%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="6.3639%" y="149" width="0.0225%" height="15" fill="rgb(252,16,20)" fg:x="4252" fg:w="15"/><text x="6.6569%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.11%)</title><rect x="6.3864%" y="133" width="0.1093%" height="15" fill="rgb(253,97,51)" fg:x="4267" fg:w="73"/><text x="6.6794%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (156 instructions, 0.23%)</title><rect x="6.3864%" y="149" width="0.2335%" height="15" fill="rgb(246,83,45)" fg:x="4267" fg:w="156"/><text x="6.6794%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="6.6199%" y="117" width="0.1227%" height="15" fill="rgb(227,150,3)" fg:x="4423" fg:w="82"/><text x="6.9128%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.18%)</title><rect x="6.6199%" y="133" width="0.1751%" height="15" fill="rgb(238,96,26)" fg:x="4423" fg:w="117"/><text x="6.9128%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (185 instructions, 0.28%)</title><rect x="6.6199%" y="149" width="0.2769%" height="15" fill="rgb(226,63,36)" fg:x="4423" fg:w="185"/><text x="6.9128%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="6.8968%" y="149" width="0.1227%" height="15" fill="rgb(219,24,47)" fg:x="4608" fg:w="82"/><text x="7.1897%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="7.0195%" y="149" width="0.1212%" height="15" fill="rgb(237,184,5)" fg:x="4690" fg:w="81"/><text x="7.3125%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="7.1407%" y="149" width="0.1227%" height="15" fill="rgb(220,145,11)" fg:x="4771" fg:w="82"/><text x="7.4337%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="7.2634%" y="149" width="0.1227%" height="15" fill="rgb(254,168,14)" fg:x="4853" fg:w="82"/><text x="7.5564%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="7.3892%" y="149" width="0.1212%" height="15" fill="rgb(205,32,38)" fg:x="4937" fg:w="81"/><text x="7.6821%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.57%)</title><rect x="7.5104%" y="149" width="0.5702%" height="15" fill="rgb(211,65,47)" fg:x="5018" fg:w="381"/><text x="7.8034%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.57%)</title><rect x="8.0806%" y="149" width="0.5702%" height="15" fill="rgb(244,124,10)" fg:x="5399" fg:w="381"/><text x="8.3736%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 9.65%)</title><rect x="0.3697%" y="165" width="9.6507%" height="15" fill="rgb(219,3,28)" fg:x="247" fg:w="6448"/><text x="0.6627%" y="175.50">candid::de:..</text></g><g><title>memcpy (336 instructions, 0.50%)</title><rect x="10.0204%" y="165" width="0.5029%" height="15" fill="rgb(216,171,41)" fg:x="6695" fg:w="336"/><text x="10.3133%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="10.5232%" y="165" width="0.0584%" height="15" fill="rgb(233,226,19)" fg:x="7031" fg:w="39"/><text x="10.8162%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="10.5816%" y="165" width="0.1227%" height="15" fill="rgb(228,20,31)" fg:x="7070" fg:w="82"/><text x="10.8746%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="10.7118%" y="133" width="0.0793%" height="15" fill="rgb(227,127,18)" fg:x="7157" fg:w="53"/><text x="11.0048%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.13%)</title><rect x="10.7912%" y="133" width="0.1332%" height="15" fill="rgb(251,154,12)" fg:x="7210" fg:w="89"/><text x="11.0841%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.24%)</title><rect x="10.9244%" y="133" width="0.2410%" height="15" fill="rgb(233,164,39)" fg:x="7299" fg:w="161"/><text x="11.2173%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.81%)</title><rect x="10.7118%" y="149" width="0.8082%" height="15" fill="rgb(236,182,35)" fg:x="7157" fg:w="540"/><text x="11.0048%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.13%)</title><rect x="10.7043%" y="165" width="1.1300%" height="15" fill="rgb(216,9,40)" fg:x="7152" fg:w="755"/><text x="10.9973%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="11.8343%" y="165" width="0.1227%" height="15" fill="rgb(231,84,47)" fg:x="7907" fg:w="82"/><text x="12.1273%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="11.9646%" y="133" width="0.0793%" height="15" fill="rgb(236,141,11)" fg:x="7994" fg:w="53"/><text x="12.2575%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.13%)</title><rect x="12.0439%" y="133" width="0.1332%" height="15" fill="rgb(249,73,14)" fg:x="8047" fg:w="89"/><text x="12.3369%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.24%)</title><rect x="12.1771%" y="133" width="0.2410%" height="15" fill="rgb(235,14,46)" fg:x="8136" fg:w="161"/><text x="12.4701%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.81%)</title><rect x="11.9646%" y="149" width="0.8082%" height="15" fill="rgb(251,200,30)" fg:x="7994" fg:w="540"/><text x="12.2575%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.10%)</title><rect x="12.7728%" y="149" width="0.1018%" height="15" fill="rgb(223,116,43)" fg:x="8534" fg:w="68"/><text x="13.0657%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="12.8745%" y="133" width="0.1212%" height="15" fill="rgb(233,144,9)" fg:x="8602" fg:w="81"/><text x="13.1675%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.16%)</title><rect x="12.8745%" y="149" width="0.1616%" height="15" fill="rgb(243,80,30)" fg:x="8602" fg:w="108"/><text x="13.1675%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.33%)</title><rect x="11.9571%" y="165" width="1.3306%" height="15" fill="rgb(229,141,3)" fg:x="7989" fg:w="889"/><text x="12.2500%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="13.2876%" y="117" width="0.0793%" height="15" fill="rgb(249,29,10)" fg:x="8878" fg:w="53"/><text x="13.5806%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.12%)</title><rect x="13.2876%" y="133" width="0.1182%" height="15" fill="rgb(240,224,33)" fg:x="8878" fg:w="79"/><text x="13.5806%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.44%)</title><rect x="13.2876%" y="149" width="0.4370%" height="15" fill="rgb(235,100,0)" fg:x="8878" fg:w="292"/><text x="13.5806%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.310 (15 instructions, 0.02%)</title><rect x="13.7247%" y="149" width="0.0225%" height="15" fill="rgb(212,176,12)" fg:x="9170" fg:w="15"/><text x="14.0176%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="13.7471%" y="149" width="0.0165%" height="15" fill="rgb(236,137,41)" fg:x="9185" fg:w="11"/><text x="14.0401%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.72%)</title><rect x="13.2876%" y="165" width="0.7154%" height="15" fill="rgb(242,22,6)" fg:x="8878" fg:w="478"/><text x="13.5806%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.05%)</title><rect x="14.0031%" y="165" width="0.0494%" height="15" fill="rgb(228,168,40)" fg:x="9356" fg:w="33"/><text x="14.2960%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="14.0524%" y="149" width="0.1841%" height="15" fill="rgb(234,45,23)" fg:x="9389" fg:w="123"/><text x="14.3454%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="14.2769%" y="149" width="0.1841%" height="15" fill="rgb(225,70,49)" fg:x="9539" fg:w="123"/><text x="14.5699%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.45%)</title><rect x="14.0524%" y="165" width="0.4490%" height="15" fill="rgb(218,32,22)" fg:x="9389" fg:w="300"/><text x="14.3454%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.04%)</title><rect x="14.5015%" y="149" width="0.0419%" height="15" fill="rgb(243,139,4)" fg:x="9689" fg:w="28"/><text x="14.7944%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.15%)</title><rect x="14.5015%" y="165" width="0.1452%" height="15" fill="rgb(213,181,15)" fg:x="9689" fg:w="97"/><text x="14.7944%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.6466%" y="165" width="0.0165%" height="15" fill="rgb(211,110,4)" fg:x="9786" fg:w="11"/><text x="14.9396%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.6631%" y="165" width="0.0165%" height="15" fill="rgb(207,130,25)" fg:x="9797" fg:w="11"/><text x="14.9561%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.6796%" y="165" width="0.0165%" height="15" fill="rgb(207,100,30)" fg:x="9808" fg:w="11"/><text x="14.9725%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.62%)</title><rect x="14.6960%" y="165" width="0.6151%" height="15" fill="rgb(208,103,12)" fg:x="9819" fg:w="411"/><text x="14.9890%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="15.3112%" y="133" width="0.0180%" height="15" fill="rgb(223,185,53)" fg:x="10230" fg:w="12"/><text x="15.6041%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.25%)</title><rect x="15.3291%" y="133" width="0.2514%" height="15" fill="rgb(252,152,54)" fg:x="10242" fg:w="168"/><text x="15.6221%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="15.5806%" y="117" width="0.1212%" height="15" fill="rgb(239,137,12)" fg:x="10410" fg:w="81"/><text x="15.8735%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.16%)</title><rect x="15.5806%" y="133" width="0.1616%" height="15" fill="rgb(210,49,45)" fg:x="10410" fg:w="108"/><text x="15.8735%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="15.7422%" y="133" width="0.0165%" height="15" fill="rgb(223,80,45)" fg:x="10518" fg:w="11"/><text x="16.0352%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (341 instructions, 0.51%)</title><rect x="15.3112%" y="149" width="0.5104%" height="15" fill="rgb(214,198,53)" fg:x="10230" fg:w="341"/><text x="15.6041%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (375 instructions, 0.56%)</title><rect x="15.3112%" y="165" width="0.5613%" height="15" fill="rgb(211,105,52)" fg:x="10230" fg:w="375"/><text x="15.6041%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="15.8724%" y="165" width="0.1841%" height="15" fill="rgb(236,74,7)" fg:x="10605" fg:w="123"/><text x="16.1654%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,948 instructions, 16.39%)</title><rect x="0.2559%" y="181" width="16.3858%" height="15" fill="rgb(233,171,43)" fg:x="171" fg:w="10948"/><text x="0.5489%" y="191.50">ic_cdk::api::call::ar..</text></g><g><title>btreemap::MAP::__getit (9 instructions, 0.01%)</title><rect x="16.6417%" y="181" width="0.0135%" height="15" fill="rgb(249,104,17)" fg:x="11119" fg:w="9"/><text x="16.9347%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (102 instructions, 0.15%)</title><rect x="16.6627%" y="133" width="0.1527%" height="15" fill="rgb(254,203,22)" fg:x="11133" fg:w="102"/><text x="16.9556%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (129 instructions, 0.19%)</title><rect x="16.6627%" y="149" width="0.1931%" height="15" fill="rgb(226,117,22)" fg:x="11133" fg:w="129"/><text x="16.9556%" y="159.50"></text></g><g><title>memset (136 instructions, 0.20%)</title><rect x="16.8557%" y="149" width="0.2036%" height="15" fill="rgb(208,180,41)" fg:x="11262" fg:w="136"/><text x="17.1487%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (429 instructions, 0.64%)</title><rect x="16.6552%" y="165" width="0.6421%" height="15" fill="rgb(247,167,14)" fg:x="11128" fg:w="429"/><text x="16.9482%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.05%)</title><rect x="17.2973%" y="149" width="0.0479%" height="15" fill="rgb(246,194,10)" fg:x="11557" fg:w="32"/><text x="17.5902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.18%)</title><rect x="17.3452%" y="117" width="0.1766%" height="15" fill="rgb(228,2,21)" fg:x="11589" fg:w="118"/><text x="17.6381%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 instructions, 0.23%)</title><rect x="17.3452%" y="133" width="0.2290%" height="15" fill="rgb(221,17,1)" fg:x="11589" fg:w="153"/><text x="17.6381%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (218 instructions, 0.33%)</title><rect x="17.3452%" y="149" width="0.3263%" height="15" fill="rgb(216,92,52)" fg:x="11589" fg:w="218"/><text x="17.6381%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="17.6714%" y="149" width="0.0165%" height="15" fill="rgb(226,49,52)" fg:x="11807" fg:w="11"/><text x="17.9644%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="17.6879%" y="149" width="0.0165%" height="15" fill="rgb(229,130,54)" fg:x="11818" fg:w="11"/><text x="17.9809%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="17.7044%" y="149" width="0.0449%" height="15" fill="rgb(239,153,35)" fg:x="11829" fg:w="30"/><text x="17.9973%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (514 instructions, 0.77%)</title><rect x="17.2973%" y="165" width="0.7693%" height="15" fill="rgb(205,25,26)" fg:x="11557" fg:w="514"/><text x="17.5902%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="18.0741%" y="165" width="0.0823%" height="15" fill="rgb(247,225,4)" fg:x="12076" fg:w="55"/><text x="18.3670%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,077 instructions, 1.61%)</title><rect x="16.6552%" y="181" width="1.6119%" height="15" fill="rgb(214,87,30)" fg:x="11128" fg:w="1077"/><text x="16.9482%" y="191.50"></text></g><g><title>btreemap::batch_get_2_::{{closure}} (66,284 instructions, 99.21%)</title><rect x="0.2559%" y="197" width="99.2068%" height="15" fill="rgb(220,18,47)" fg:x="171" fg:w="66284"/><text x="0.5489%" y="207.50">btreemap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4627%" y="197" width="0.0180%" height="15" fill="rgb(232,183,18)" fg:x="66455" fg:w="12"/><text x="99.7557%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="99.4806%" y="197" width="0.1212%" height="15" fill="rgb(253,77,30)" fg:x="66467" fg:w="81"/><text x="99.7736%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.25%)</title><rect x="99.6019%" y="197" width="0.2514%" height="15" fill="rgb(241,160,8)" fg:x="66548" fg:w="168"/><text x="99.8948%" y="207.50"></text></g><g><title>all (66,814 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,84,42)" fg:x="0" fg:w="66814"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (66,814 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(248,219,41)" fg:x="0" fg:w="66814"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>