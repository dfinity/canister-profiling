<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="57181"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0332%" height="15" fill="rgb(228,52,30)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.13%)</title><rect x="0.0332%" y="197" width="0.1329%" height="15" fill="rgb(212,182,36)" fg:x="19" fg:w="76"/><text x="0.3262%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.13%)</title><rect x="0.1661%" y="197" width="0.1329%" height="15" fill="rgb(210,1,49)" fg:x="95" fg:w="76"/><text x="0.4591%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.13%)</title><rect x="0.2991%" y="165" width="0.1329%" height="15" fill="rgb(246,96,20)" fg:x="171" fg:w="76"/><text x="0.5920%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="0.4320%" y="149" width="0.1242%" height="15" fill="rgb(241,163,52)" fg:x="247" fg:w="71"/><text x="0.7249%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.70%)</title><rect x="0.5561%" y="149" width="0.7030%" height="15" fill="rgb(244,17,44)" fg:x="318" fg:w="402"/><text x="0.8491%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.15%)</title><rect x="1.2592%" y="149" width="0.1452%" height="15" fill="rgb(228,118,45)" fg:x="720" fg:w="83"/><text x="1.5521%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.4043%" y="149" width="0.0944%" height="15" fill="rgb(253,2,39)" fg:x="803" fg:w="54"/><text x="1.6973%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.4987%" y="149" width="0.0944%" height="15" fill="rgb(217,91,0)" fg:x="857" fg:w="54"/><text x="1.7917%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.5932%" y="149" width="0.0944%" height="15" fill="rgb(226,114,54)" fg:x="911" fg:w="54"/><text x="1.8862%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6876%" y="149" width="0.0944%" height="15" fill="rgb(252,195,42)" fg:x="965" fg:w="54"/><text x="1.9806%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="1.7821%" y="149" width="0.1242%" height="15" fill="rgb(242,71,29)" fg:x="1019" fg:w="71"/><text x="2.0750%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="1.9062%" y="149" width="0.1137%" height="15" fill="rgb(246,99,8)" fg:x="1090" fg:w="65"/><text x="2.1992%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.70%)</title><rect x="2.0199%" y="149" width="0.7030%" height="15" fill="rgb(236,18,38)" fg:x="1155" fg:w="402"/><text x="2.3129%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.7229%" y="149" width="0.0280%" height="15" fill="rgb(211,50,18)" fg:x="1557" fg:w="16"/><text x="3.0159%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.13%)</title><rect x="2.7509%" y="133" width="0.1329%" height="15" fill="rgb(218,65,34)" fg:x="1573" fg:w="76"/><text x="3.0439%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="2.8838%" y="101" width="0.1049%" height="15" fill="rgb(205,93,37)" fg:x="1649" fg:w="60"/><text x="3.1768%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.15%)</title><rect x="2.8838%" y="117" width="0.1487%" height="15" fill="rgb(247,64,27)" fg:x="1649" fg:w="85"/><text x="3.1768%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.0325%" y="69" width="0.0157%" height="15" fill="rgb(229,4,39)" fg:x="1734" fg:w="9"/><text x="3.3254%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="3.0482%" y="53" width="0.0525%" height="15" fill="rgb(246,81,27)" fg:x="1743" fg:w="30"/><text x="3.3412%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.0482%" y="69" width="0.0962%" height="15" fill="rgb(243,17,47)" fg:x="1743" fg:w="55"/><text x="3.3412%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.20%)</title><rect x="3.0325%" y="85" width="0.1994%" height="15" fill="rgb(222,3,26)" fg:x="1734" fg:w="114"/><text x="3.3254%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.29%)</title><rect x="3.0325%" y="101" width="0.2921%" height="15" fill="rgb(247,164,37)" fg:x="1734" fg:w="167"/><text x="3.3254%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.30%)</title><rect x="3.0325%" y="117" width="0.3008%" height="15" fill="rgb(228,36,52)" fg:x="1734" fg:w="172"/><text x="3.3254%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.64%)</title><rect x="2.8838%" y="133" width="0.6436%" height="15" fill="rgb(234,89,16)" fg:x="1649" fg:w="368"/><text x="3.1768%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.99%)</title><rect x="2.7509%" y="149" width="0.9881%" height="15" fill="rgb(233,207,14)" fg:x="1573" fg:w="565"/><text x="3.0439%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.15%)</title><rect x="3.7390%" y="149" width="0.1452%" height="15" fill="rgb(252,128,7)" fg:x="2138" fg:w="83"/><text x="4.0320%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="3.8842%" y="149" width="0.0962%" height="15" fill="rgb(206,81,39)" fg:x="2221" fg:w="55"/><text x="4.1771%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.11%)</title><rect x="3.9803%" y="149" width="0.1137%" height="15" fill="rgb(208,74,0)" fg:x="2276" fg:w="65"/><text x="4.2733%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="4.0940%" y="149" width="0.1137%" height="15" fill="rgb(233,139,28)" fg:x="2341" fg:w="65"/><text x="4.3870%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.70%)</title><rect x="4.2077%" y="133" width="0.7030%" height="15" fill="rgb(225,57,16)" fg:x="2406" fg:w="402"/><text x="4.5007%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="4.9107%" y="133" width="0.0280%" height="15" fill="rgb(220,10,33)" fg:x="2808" fg:w="16"/><text x="5.2037%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.13%)</title><rect x="4.9387%" y="117" width="0.1329%" height="15" fill="rgb(235,152,46)" fg:x="2824" fg:w="76"/><text x="5.2317%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="5.0716%" y="85" width="0.1049%" height="15" fill="rgb(231,89,33)" fg:x="2900" fg:w="60"/><text x="5.3646%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.15%)</title><rect x="5.0716%" y="101" width="0.1487%" height="15" fill="rgb(230,181,2)" fg:x="2900" fg:w="85"/><text x="5.3646%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.2203%" y="53" width="0.0157%" height="15" fill="rgb(251,211,35)" fg:x="2985" fg:w="9"/><text x="5.5132%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.2360%" y="37" width="0.0525%" height="15" fill="rgb(214,178,30)" fg:x="2994" fg:w="30"/><text x="5.5290%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.2360%" y="53" width="0.0962%" height="15" fill="rgb(217,123,0)" fg:x="2994" fg:w="55"/><text x="5.5290%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.20%)</title><rect x="5.2203%" y="69" width="0.1994%" height="15" fill="rgb(210,188,42)" fg:x="2985" fg:w="114"/><text x="5.5132%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.29%)</title><rect x="5.2203%" y="85" width="0.2921%" height="15" fill="rgb(226,178,35)" fg:x="2985" fg:w="167"/><text x="5.5132%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.30%)</title><rect x="5.2203%" y="101" width="0.3008%" height="15" fill="rgb(232,215,11)" fg:x="2985" fg:w="172"/><text x="5.5132%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.64%)</title><rect x="5.0716%" y="117" width="0.6436%" height="15" fill="rgb(254,122,19)" fg:x="2900" fg:w="368"/><text x="5.3646%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.99%)</title><rect x="4.9387%" y="133" width="0.9881%" height="15" fill="rgb(219,113,41)" fg:x="2824" fg:w="565"/><text x="5.2317%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.15%)</title><rect x="5.9268%" y="133" width="0.1452%" height="15" fill="rgb(247,126,25)" fg:x="3389" fg:w="83"/><text x="6.2198%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.0719%" y="133" width="0.0962%" height="15" fill="rgb(254,154,33)" fg:x="3472" fg:w="55"/><text x="6.3649%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="6.1681%" y="117" width="0.1242%" height="15" fill="rgb(228,76,18)" fg:x="3527" fg:w="71"/><text x="6.4611%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.16%)</title><rect x="6.2923%" y="117" width="0.1574%" height="15" fill="rgb(206,178,26)" fg:x="3598" fg:w="90"/><text x="6.5853%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.11%)</title><rect x="6.4497%" y="117" width="0.1137%" height="15" fill="rgb(211,143,18)" fg:x="3688" fg:w="65"/><text x="6.7427%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.50%)</title><rect x="6.1681%" y="133" width="0.4984%" height="15" fill="rgb(208,142,36)" fg:x="3527" fg:w="285"/><text x="6.4611%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.14%)</title><rect x="6.6666%" y="133" width="0.1364%" height="15" fill="rgb(247,15,23)" fg:x="3812" fg:w="78"/><text x="6.9595%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 2.95%)</title><rect x="4.2077%" y="149" width="2.9503%" height="15" fill="rgb(239,125,52)" fg:x="2406" fg:w="1687"/><text x="4.5007%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.11%)</title><rect x="7.1580%" y="149" width="0.1137%" height="15" fill="rgb(249,137,6)" fg:x="4093" fg:w="65"/><text x="7.4509%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.2716%" y="149" width="0.0227%" height="15" fill="rgb(229,185,53)" fg:x="4158" fg:w="13"/><text x="7.5646%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.2944%" y="149" width="0.0227%" height="15" fill="rgb(208,67,47)" fg:x="4171" fg:w="13"/><text x="7.5873%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.3171%" y="149" width="0.0122%" height="15" fill="rgb(208,95,14)" fg:x="4184" fg:w="7"/><text x="7.6101%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.3294%" y="149" width="0.0262%" height="15" fill="rgb(234,2,53)" fg:x="4191" fg:w="15"/><text x="7.6223%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.12%)</title><rect x="7.3556%" y="133" width="0.1242%" height="15" fill="rgb(234,130,48)" fg:x="4206" fg:w="71"/><text x="7.6486%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.27%)</title><rect x="7.3556%" y="149" width="0.2693%" height="15" fill="rgb(225,60,10)" fg:x="4206" fg:w="154"/><text x="7.6486%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="7.6249%" y="117" width="0.1434%" height="15" fill="rgb(219,7,37)" fg:x="4360" fg:w="82"/><text x="7.9179%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.20%)</title><rect x="7.6249%" y="133" width="0.2029%" height="15" fill="rgb(216,215,54)" fg:x="4360" fg:w="116"/><text x="7.9179%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (186 instructions, 0.33%)</title><rect x="7.6249%" y="149" width="0.3253%" height="15" fill="rgb(218,86,48)" fg:x="4360" fg:w="186"/><text x="7.9179%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="7.9502%" y="149" width="0.1434%" height="15" fill="rgb(208,143,21)" fg:x="4546" fg:w="82"/><text x="8.2432%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="8.0936%" y="149" width="0.1417%" height="15" fill="rgb(249,85,25)" fg:x="4628" fg:w="81"/><text x="8.3866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="8.2353%" y="149" width="0.1434%" height="15" fill="rgb(227,173,49)" fg:x="4709" fg:w="82"/><text x="8.5282%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="8.3787%" y="149" width="0.1434%" height="15" fill="rgb(245,94,51)" fg:x="4791" fg:w="82"/><text x="8.6716%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="8.5256%" y="149" width="0.1417%" height="15" fill="rgb(208,103,19)" fg:x="4875" fg:w="81"/><text x="8.8185%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.70%)</title><rect x="8.6672%" y="149" width="0.6978%" height="15" fill="rgb(223,121,24)" fg:x="4956" fg:w="399"/><text x="8.9602%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.70%)</title><rect x="9.3650%" y="149" width="0.6978%" height="15" fill="rgb(218,5,21)" fg:x="5355" fg:w="399"/><text x="9.6580%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,467 instructions, 11.31%)</title><rect x="0.4320%" y="165" width="11.3097%" height="15" fill="rgb(238,33,21)" fg:x="247" fg:w="6467"/><text x="0.7249%" y="175.50">candid::de::ID..</text></g><g><title>memcpy (354 instructions, 0.62%)</title><rect x="11.7417%" y="165" width="0.6191%" height="15" fill="rgb(236,95,40)" fg:x="6714" fg:w="354"/><text x="12.0346%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="12.3607%" y="149" width="0.0210%" height="15" fill="rgb(244,221,2)" fg:x="7068" fg:w="12"/><text x="12.6537%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.09%)</title><rect x="12.3607%" y="165" width="0.0874%" height="15" fill="rgb(218,125,39)" fg:x="7068" fg:w="50"/><text x="12.6537%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="12.4482%" y="165" width="0.1434%" height="15" fill="rgb(235,174,7)" fg:x="7118" fg:w="82"/><text x="12.7412%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="12.5916%" y="149" width="0.0210%" height="15" fill="rgb(230,42,25)" fg:x="7200" fg:w="12"/><text x="12.8846%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="12.6126%" y="133" width="0.0927%" height="15" fill="rgb(208,40,37)" fg:x="7212" fg:w="53"/><text x="12.9055%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.15%)</title><rect x="12.7053%" y="133" width="0.1539%" height="15" fill="rgb(210,222,2)" fg:x="7265" fg:w="88"/><text x="12.9982%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.28%)</title><rect x="12.8592%" y="133" width="0.2833%" height="15" fill="rgb(246,108,10)" fg:x="7353" fg:w="162"/><text x="13.1521%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.94%)</title><rect x="12.6126%" y="149" width="0.9444%" height="15" fill="rgb(244,120,17)" fg:x="7212" fg:w="540"/><text x="12.9055%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 1.33%)</title><rect x="12.5916%" y="165" width="1.3291%" height="15" fill="rgb(241,193,42)" fg:x="7200" fg:w="760"/><text x="12.8846%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="13.9207%" y="165" width="0.1434%" height="15" fill="rgb(235,126,39)" fg:x="7960" fg:w="82"/><text x="14.2137%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="14.0641%" y="149" width="0.0210%" height="15" fill="rgb(246,153,23)" fg:x="8042" fg:w="12"/><text x="14.3571%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="14.0851%" y="133" width="0.0927%" height="15" fill="rgb(224,25,26)" fg:x="8054" fg:w="53"/><text x="14.3781%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.15%)</title><rect x="14.1778%" y="133" width="0.1539%" height="15" fill="rgb(209,48,16)" fg:x="8107" fg:w="88"/><text x="14.4708%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.28%)</title><rect x="14.3317%" y="133" width="0.2833%" height="15" fill="rgb(222,25,31)" fg:x="8195" fg:w="162"/><text x="14.6247%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.94%)</title><rect x="14.0851%" y="149" width="0.9444%" height="15" fill="rgb(207,168,19)" fg:x="8054" fg:w="540"/><text x="14.3781%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.12%)</title><rect x="15.0295%" y="149" width="0.1189%" height="15" fill="rgb(208,148,42)" fg:x="8594" fg:w="68"/><text x="15.3224%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="15.1484%" y="133" width="0.1417%" height="15" fill="rgb(231,228,14)" fg:x="8662" fg:w="81"/><text x="15.4414%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.19%)</title><rect x="15.1484%" y="149" width="0.1889%" height="15" fill="rgb(218,96,41)" fg:x="8662" fg:w="108"/><text x="15.4414%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 1.57%)</title><rect x="14.0641%" y="165" width="1.5652%" height="15" fill="rgb(212,171,38)" fg:x="8042" fg:w="895"/><text x="14.3571%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="15.6293%" y="117" width="0.0927%" height="15" fill="rgb(248,99,7)" fg:x="8937" fg:w="53"/><text x="15.9223%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.14%)</title><rect x="15.6293%" y="133" width="0.1382%" height="15" fill="rgb(245,173,45)" fg:x="8937" fg:w="79"/><text x="15.9223%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.51%)</title><rect x="15.6293%" y="149" width="0.5107%" height="15" fill="rgb(233,100,13)" fg:x="8937" fg:w="292"/><text x="15.9223%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1116 (15 instructions, 0.03%)</title><rect x="16.1400%" y="149" width="0.0262%" height="15" fill="rgb(215,76,33)" fg:x="9229" fg:w="15"/><text x="16.4329%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.1662%" y="149" width="0.0192%" height="15" fill="rgb(243,177,40)" fg:x="9244" fg:w="11"/><text x="16.4592%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 0.87%)</title><rect x="15.6293%" y="165" width="0.8709%" height="15" fill="rgb(235,30,28)" fg:x="8937" fg:w="498"/><text x="15.9223%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.08%)</title><rect x="16.5002%" y="165" width="0.0787%" height="15" fill="rgb(250,0,38)" fg:x="9435" fg:w="45"/><text x="16.7932%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.22%)</title><rect x="16.5789%" y="149" width="0.2151%" height="15" fill="rgb(205,196,42)" fg:x="9480" fg:w="123"/><text x="16.8719%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.22%)</title><rect x="16.8413%" y="149" width="0.2151%" height="15" fill="rgb(210,182,34)" fg:x="9630" fg:w="123"/><text x="17.1342%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.52%)</title><rect x="16.5789%" y="165" width="0.5246%" height="15" fill="rgb(240,131,25)" fg:x="9480" fg:w="300"/><text x="16.8719%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="17.1036%" y="149" width="0.0490%" height="15" fill="rgb(209,197,31)" fg:x="9780" fg:w="28"/><text x="17.3966%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="17.1526%" y="149" width="0.0262%" height="15" fill="rgb(238,213,33)" fg:x="9808" fg:w="15"/><text x="17.4455%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="17.1788%" y="149" width="0.0262%" height="15" fill="rgb(206,66,51)" fg:x="9823" fg:w="15"/><text x="17.4718%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.24%)</title><rect x="17.1036%" y="165" width="0.2361%" height="15" fill="rgb(245,224,12)" fg:x="9780" fg:w="135"/><text x="17.3966%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3397%" y="165" width="0.0192%" height="15" fill="rgb(207,153,8)" fg:x="9915" fg:w="11"/><text x="17.6326%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3589%" y="165" width="0.0192%" height="15" fill="rgb(219,95,1)" fg:x="9926" fg:w="11"/><text x="17.6519%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3782%" y="165" width="0.0192%" height="15" fill="rgb(206,40,31)" fg:x="9937" fg:w="11"/><text x="17.6711%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.72%)</title><rect x="17.3974%" y="165" width="0.7170%" height="15" fill="rgb(229,136,40)" fg:x="9948" fg:w="410"/><text x="17.6904%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.03%)</title><rect x="18.1144%" y="133" width="0.0262%" height="15" fill="rgb(247,87,42)" fg:x="10358" fg:w="15"/><text x="18.4074%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.29%)</title><rect x="18.1406%" y="133" width="0.2938%" height="15" fill="rgb(225,43,39)" fg:x="10373" fg:w="168"/><text x="18.4336%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="18.4344%" y="117" width="0.1417%" height="15" fill="rgb(212,93,9)" fg:x="10541" fg:w="81"/><text x="18.7274%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.19%)</title><rect x="18.4344%" y="133" width="0.1889%" height="15" fill="rgb(228,56,6)" fg:x="10541" fg:w="108"/><text x="18.7274%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.6233%" y="133" width="0.0192%" height="15" fill="rgb(225,208,39)" fg:x="10649" fg:w="11"/><text x="18.9163%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (342 instructions, 0.60%)</title><rect x="18.1144%" y="149" width="0.5981%" height="15" fill="rgb(248,136,11)" fg:x="10358" fg:w="342"/><text x="18.4074%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (379 instructions, 0.66%)</title><rect x="18.1144%" y="165" width="0.6628%" height="15" fill="rgb(239,123,15)" fg:x="10358" fg:w="379"/><text x="18.4074%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.22%)</title><rect x="18.7772%" y="165" width="0.2151%" height="15" fill="rgb(210,107,46)" fg:x="10737" fg:w="123"/><text x="19.0702%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,071 instructions, 19.36%)</title><rect x="0.2991%" y="181" width="19.3613%" height="15" fill="rgb(244,41,40)" fg:x="171" fg:w="11071"/><text x="0.5920%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="19.6604%" y="149" width="0.0210%" height="15" fill="rgb(219,106,31)" fg:x="11242" fg:w="12"/><text x="19.9533%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (101 instructions, 0.18%)</title><rect x="19.6814%" y="133" width="0.1766%" height="15" fill="rgb(234,3,41)" fg:x="11254" fg:w="101"/><text x="19.9743%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (128 instructions, 0.22%)</title><rect x="19.6814%" y="149" width="0.2239%" height="15" fill="rgb(249,136,41)" fg:x="11254" fg:w="128"/><text x="19.9743%" y="159.50"></text></g><g><title>memset (136 instructions, 0.24%)</title><rect x="19.9052%" y="149" width="0.2378%" height="15" fill="rgb(238,3,26)" fg:x="11382" fg:w="136"/><text x="20.1982%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (434 instructions, 0.76%)</title><rect x="19.6604%" y="165" width="0.7590%" height="15" fill="rgb(220,148,39)" fg:x="11242" fg:w="434"/><text x="19.9533%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="20.4194%" y="149" width="0.0560%" height="15" fill="rgb(245,159,16)" fg:x="11676" fg:w="32"/><text x="20.7123%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.20%)</title><rect x="20.4753%" y="101" width="0.1976%" height="15" fill="rgb(213,142,51)" fg:x="11708" fg:w="113"/><text x="20.7683%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (147 instructions, 0.26%)</title><rect x="20.4753%" y="117" width="0.2571%" height="15" fill="rgb(248,159,44)" fg:x="11708" fg:w="147"/><text x="20.7683%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (214 instructions, 0.37%)</title><rect x="20.4753%" y="133" width="0.3743%" height="15" fill="rgb(229,165,47)" fg:x="11708" fg:w="214"/><text x="20.7683%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="20.8496%" y="133" width="0.0192%" height="15" fill="rgb(249,77,49)" fg:x="11922" fg:w="11"/><text x="21.1426%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="20.8688%" y="133" width="0.0192%" height="15" fill="rgb(217,27,38)" fg:x="11933" fg:w="11"/><text x="21.1618%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (398 instructions, 0.70%)</title><rect x="20.4753%" y="149" width="0.6960%" height="15" fill="rgb(234,146,23)" fg:x="11708" fg:w="398"/><text x="20.7683%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.05%)</title><rect x="21.1714%" y="149" width="0.0525%" height="15" fill="rgb(209,207,53)" fg:x="12106" fg:w="30"/><text x="21.4643%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (533 instructions, 0.93%)</title><rect x="20.4194%" y="165" width="0.9321%" height="15" fill="rgb(217,129,10)" fg:x="11676" fg:w="533"/><text x="20.7123%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="21.3585%" y="165" width="0.0962%" height="15" fill="rgb(232,83,7)" fg:x="12213" fg:w="55"/><text x="21.6515%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,100 instructions, 1.92%)</title><rect x="19.6604%" y="181" width="1.9237%" height="15" fill="rgb(237,74,26)" fg:x="11242" fg:w="1100"/><text x="19.9533%" y="191.50"></text></g><g><title>btreemap::batch_get_5_::{{closure}} (56,651 instructions, 99.07%)</title><rect x="0.2991%" y="197" width="99.0731%" height="15" fill="rgb(220,94,32)" fg:x="171" fg:w="56651"/><text x="0.5920%" y="207.50">btreemap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.3722%" y="197" width="0.0210%" height="15" fill="rgb(227,37,54)" fg:x="56822" fg:w="12"/><text x="99.6651%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="99.3932%" y="197" width="0.1417%" height="15" fill="rgb(240,11,39)" fg:x="56834" fg:w="81"/><text x="99.6861%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.29%)</title><rect x="99.5348%" y="197" width="0.2938%" height="15" fill="rgb(248,56,41)" fg:x="56915" fg:w="168"/><text x="99.8278%" y="207.50"></text></g><g><title>all (57,181 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(239,130,38)" fg:x="0" fg:w="57181"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (57,181 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,212,10)" fg:x="0" fg:w="57181"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>