<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="66889"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0284%" height="15" fill="rgb(250,65,28)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.0284%" y="197" width="0.1136%" height="15" fill="rgb(215,207,34)" fg:x="19" fg:w="76"/><text x="0.3214%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.1420%" y="197" width="0.1136%" height="15" fill="rgb(213,186,52)" fg:x="95" fg:w="76"/><text x="0.4350%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="0.2556%" y="165" width="0.1136%" height="15" fill="rgb(225,103,22)" fg:x="171" fg:w="76"/><text x="0.5486%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.10%)</title><rect x="0.3693%" y="149" width="0.1032%" height="15" fill="rgb(219,74,15)" fg:x="247" fg:w="69"/><text x="0.6622%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.61%)</title><rect x="0.4724%" y="149" width="0.6070%" height="15" fill="rgb(250,68,39)" fg:x="316" fg:w="406"/><text x="0.7654%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.12%)</title><rect x="1.0794%" y="149" width="0.1226%" height="15" fill="rgb(249,14,45)" fg:x="722" fg:w="82"/><text x="1.3724%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.2020%" y="149" width="0.0807%" height="15" fill="rgb(235,134,39)" fg:x="804" fg:w="54"/><text x="1.4950%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.2827%" y="149" width="0.0807%" height="15" fill="rgb(236,7,14)" fg:x="858" fg:w="54"/><text x="1.5757%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.3635%" y="149" width="0.0807%" height="15" fill="rgb(246,165,33)" fg:x="912" fg:w="54"/><text x="1.6564%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.08%)</title><rect x="1.4442%" y="149" width="0.0807%" height="15" fill="rgb(208,19,43)" fg:x="966" fg:w="54"/><text x="1.7372%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.10%)</title><rect x="1.5249%" y="149" width="0.1032%" height="15" fill="rgb(213,145,36)" fg:x="1020" fg:w="69"/><text x="1.8179%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.10%)</title><rect x="1.6281%" y="149" width="0.0972%" height="15" fill="rgb(229,87,0)" fg:x="1089" fg:w="65"/><text x="1.9210%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.61%)</title><rect x="1.7252%" y="149" width="0.6070%" height="15" fill="rgb(205,31,1)" fg:x="1154" fg:w="406"/><text x="2.0182%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="2.3322%" y="149" width="0.0239%" height="15" fill="rgb(213,173,43)" fg:x="1560" fg:w="16"/><text x="2.6252%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="2.3561%" y="133" width="0.1136%" height="15" fill="rgb(243,110,39)" fg:x="1576" fg:w="76"/><text x="2.6491%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.09%)</title><rect x="2.4698%" y="101" width="0.0897%" height="15" fill="rgb(216,123,18)" fg:x="1652" fg:w="60"/><text x="2.7627%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.13%)</title><rect x="2.4698%" y="117" width="0.1271%" height="15" fill="rgb(250,123,40)" fg:x="1652" fg:w="85"/><text x="2.7627%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.5968%" y="69" width="0.0135%" height="15" fill="rgb(214,49,39)" fg:x="1737" fg:w="9"/><text x="2.8898%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.6103%" y="53" width="0.0449%" height="15" fill="rgb(226,26,6)" fg:x="1746" fg:w="30"/><text x="2.9033%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.08%)</title><rect x="2.6103%" y="69" width="0.0822%" height="15" fill="rgb(240,196,42)" fg:x="1746" fg:w="55"/><text x="2.9033%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.18%)</title><rect x="2.5968%" y="85" width="0.1764%" height="15" fill="rgb(221,32,19)" fg:x="1737" fg:w="118"/><text x="2.8898%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.26%)</title><rect x="2.5968%" y="101" width="0.2556%" height="15" fill="rgb(208,8,4)" fg:x="1737" fg:w="171"/><text x="2.8898%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.26%)</title><rect x="2.5968%" y="117" width="0.2631%" height="15" fill="rgb(244,24,35)" fg:x="1737" fg:w="176"/><text x="2.8898%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.56%)</title><rect x="2.4698%" y="133" width="0.5561%" height="15" fill="rgb(217,67,4)" fg:x="1652" fg:w="372"/><text x="2.7627%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.88%)</title><rect x="2.3561%" y="149" width="0.8806%" height="15" fill="rgb(210,81,25)" fg:x="1576" fg:w="589"/><text x="2.6491%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.12%)</title><rect x="3.2367%" y="149" width="0.1226%" height="15" fill="rgb(228,46,28)" fg:x="2165" fg:w="82"/><text x="3.5297%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="3.3593%" y="149" width="0.0822%" height="15" fill="rgb(238,160,46)" fg:x="2247" fg:w="55"/><text x="3.6523%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.09%)</title><rect x="3.4415%" y="149" width="0.0942%" height="15" fill="rgb(222,178,29)" fg:x="2302" fg:w="63"/><text x="3.7345%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.10%)</title><rect x="3.5357%" y="149" width="0.0972%" height="15" fill="rgb(224,14,49)" fg:x="2365" fg:w="65"/><text x="3.8287%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.61%)</title><rect x="3.6329%" y="133" width="0.6070%" height="15" fill="rgb(219,162,16)" fg:x="2430" fg:w="406"/><text x="3.9259%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="4.2399%" y="133" width="0.0239%" height="15" fill="rgb(211,23,22)" fg:x="2836" fg:w="16"/><text x="4.5328%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.11%)</title><rect x="4.2638%" y="117" width="0.1136%" height="15" fill="rgb(228,138,0)" fg:x="2852" fg:w="76"/><text x="4.5567%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.09%)</title><rect x="4.3774%" y="85" width="0.0897%" height="15" fill="rgb(211,128,11)" fg:x="2928" fg:w="60"/><text x="4.6704%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.13%)</title><rect x="4.3774%" y="101" width="0.1271%" height="15" fill="rgb(241,91,48)" fg:x="2928" fg:w="85"/><text x="4.6704%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="4.5045%" y="53" width="0.0135%" height="15" fill="rgb(210,196,34)" fg:x="3013" fg:w="9"/><text x="4.7974%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="4.5179%" y="37" width="0.0449%" height="15" fill="rgb(214,17,3)" fg:x="3022" fg:w="30"/><text x="4.8109%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.08%)</title><rect x="4.5179%" y="53" width="0.0822%" height="15" fill="rgb(241,49,36)" fg:x="3022" fg:w="55"/><text x="4.8109%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.18%)</title><rect x="4.5045%" y="69" width="0.1764%" height="15" fill="rgb(250,35,29)" fg:x="3013" fg:w="118"/><text x="4.7974%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.26%)</title><rect x="4.5045%" y="85" width="0.2556%" height="15" fill="rgb(222,213,44)" fg:x="3013" fg:w="171"/><text x="4.7974%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.26%)</title><rect x="4.5045%" y="101" width="0.2631%" height="15" fill="rgb(211,75,24)" fg:x="3013" fg:w="176"/><text x="4.7974%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.56%)</title><rect x="4.3774%" y="117" width="0.5561%" height="15" fill="rgb(215,170,11)" fg:x="2928" fg:w="372"/><text x="4.6704%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.88%)</title><rect x="4.2638%" y="133" width="0.8806%" height="15" fill="rgb(219,62,42)" fg:x="2852" fg:w="589"/><text x="4.5567%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.12%)</title><rect x="5.1443%" y="133" width="0.1226%" height="15" fill="rgb(237,190,10)" fg:x="3441" fg:w="82"/><text x="5.4373%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="5.2669%" y="133" width="0.0822%" height="15" fill="rgb(222,207,14)" fg:x="3523" fg:w="55"/><text x="5.5599%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.10%)</title><rect x="5.3492%" y="117" width="0.1032%" height="15" fill="rgb(232,24,15)" fg:x="3578" fg:w="69"/><text x="5.6421%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.14%)</title><rect x="5.4523%" y="117" width="0.1360%" height="15" fill="rgb(217,193,7)" fg:x="3647" fg:w="91"/><text x="5.7453%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.09%)</title><rect x="5.5884%" y="117" width="0.0942%" height="15" fill="rgb(254,213,6)" fg:x="3738" fg:w="63"/><text x="5.8813%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.42%)</title><rect x="5.3492%" y="133" width="0.4216%" height="15" fill="rgb(228,163,11)" fg:x="3578" fg:w="282"/><text x="5.6421%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.12%)</title><rect x="5.7708%" y="133" width="0.1166%" height="15" fill="rgb(215,170,47)" fg:x="3860" fg:w="78"/><text x="6.0637%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 2.56%)</title><rect x="3.6329%" y="149" width="2.5580%" height="15" fill="rgb(231,200,18)" fg:x="2430" fg:w="1711"/><text x="3.9259%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.09%)</title><rect x="6.1909%" y="149" width="0.0942%" height="15" fill="rgb(211,142,27)" fg:x="4141" fg:w="63"/><text x="6.4838%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.2850%" y="149" width="0.0194%" height="15" fill="rgb(251,200,47)" fg:x="4204" fg:w="13"/><text x="6.5780%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.3045%" y="149" width="0.0194%" height="15" fill="rgb(222,211,47)" fg:x="4217" fg:w="13"/><text x="6.5974%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="6.3239%" y="149" width="0.0105%" height="15" fill="rgb(233,190,44)" fg:x="4230" fg:w="7"/><text x="6.6169%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="6.3344%" y="149" width="0.0224%" height="15" fill="rgb(209,108,18)" fg:x="4237" fg:w="15"/><text x="6.6273%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.11%)</title><rect x="6.3568%" y="133" width="0.1061%" height="15" fill="rgb(241,96,3)" fg:x="4252" fg:w="71"/><text x="6.6498%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.23%)</title><rect x="6.3568%" y="149" width="0.2302%" height="15" fill="rgb(207,46,9)" fg:x="4252" fg:w="154"/><text x="6.6498%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="6.5870%" y="117" width="0.1226%" height="15" fill="rgb(252,20,13)" fg:x="4406" fg:w="82"/><text x="6.8800%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 instructions, 0.17%)</title><rect x="6.5870%" y="133" width="0.1734%" height="15" fill="rgb(222,79,46)" fg:x="4406" fg:w="116"/><text x="6.8800%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 instructions, 0.28%)</title><rect x="6.5870%" y="149" width="0.2751%" height="15" fill="rgb(213,186,36)" fg:x="4406" fg:w="184"/><text x="6.8800%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="6.8621%" y="149" width="0.1226%" height="15" fill="rgb(243,41,25)" fg:x="4590" fg:w="82"/><text x="7.1551%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="6.9847%" y="149" width="0.1211%" height="15" fill="rgb(221,193,5)" fg:x="4672" fg:w="81"/><text x="7.2777%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="7.1058%" y="149" width="0.1226%" height="15" fill="rgb(239,144,36)" fg:x="4753" fg:w="82"/><text x="7.3988%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="7.2284%" y="149" width="0.1226%" height="15" fill="rgb(219,139,45)" fg:x="4835" fg:w="82"/><text x="7.5214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="7.3540%" y="149" width="0.1211%" height="15" fill="rgb(240,44,43)" fg:x="4919" fg:w="81"/><text x="7.6469%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.60%)</title><rect x="7.4751%" y="149" width="0.5965%" height="15" fill="rgb(207,182,16)" fg:x="5000" fg:w="399"/><text x="7.7680%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.60%)</title><rect x="8.0716%" y="149" width="0.5965%" height="15" fill="rgb(242,192,23)" fg:x="5399" fg:w="399"/><text x="8.3646%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,478 instructions, 9.68%)</title><rect x="0.3693%" y="165" width="9.6847%" height="15" fill="rgb(213,126,29)" fg:x="247" fg:w="6478"/><text x="0.6622%" y="175.50">candid::de::..</text></g><g><title>memcpy (354 instructions, 0.53%)</title><rect x="10.0540%" y="165" width="0.5292%" height="15" fill="rgb(229,25,3)" fg:x="6725" fg:w="354"/><text x="10.3469%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="10.5832%" y="165" width="0.0583%" height="15" fill="rgb(244,98,36)" fg:x="7079" fg:w="39"/><text x="10.8762%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="10.6415%" y="165" width="0.1226%" height="15" fill="rgb(227,173,48)" fg:x="7118" fg:w="82"/><text x="10.9345%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="10.7716%" y="133" width="0.0792%" height="15" fill="rgb(229,58,35)" fg:x="7205" fg:w="53"/><text x="11.0645%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.13%)</title><rect x="10.8508%" y="133" width="0.1316%" height="15" fill="rgb(243,163,44)" fg:x="7258" fg:w="88"/><text x="11.1438%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.24%)</title><rect x="10.9824%" y="133" width="0.2422%" height="15" fill="rgb(232,225,17)" fg:x="7346" fg:w="162"/><text x="11.2753%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.81%)</title><rect x="10.7716%" y="149" width="0.8073%" height="15" fill="rgb(214,188,2)" fg:x="7205" fg:w="540"/><text x="11.0645%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.12%)</title><rect x="10.7641%" y="165" width="1.1198%" height="15" fill="rgb(230,86,53)" fg:x="7200" fg:w="749"/><text x="11.0571%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.12%)</title><rect x="11.8839%" y="165" width="0.1226%" height="15" fill="rgb(239,142,22)" fg:x="7949" fg:w="82"/><text x="12.1768%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="12.0139%" y="133" width="0.0792%" height="15" fill="rgb(208,58,10)" fg:x="8036" fg:w="53"/><text x="12.3069%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.13%)</title><rect x="12.0932%" y="133" width="0.1316%" height="15" fill="rgb(236,80,17)" fg:x="8089" fg:w="88"/><text x="12.3861%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.24%)</title><rect x="12.2247%" y="133" width="0.2422%" height="15" fill="rgb(239,18,26)" fg:x="8177" fg:w="162"/><text x="12.5177%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.81%)</title><rect x="12.0139%" y="149" width="0.8073%" height="15" fill="rgb(212,168,18)" fg:x="8036" fg:w="540"/><text x="12.3069%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.10%)</title><rect x="12.8212%" y="149" width="0.1017%" height="15" fill="rgb(223,115,8)" fg:x="8576" fg:w="68"/><text x="13.1142%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="12.9229%" y="133" width="0.1211%" height="15" fill="rgb(214,77,14)" fg:x="8644" fg:w="81"/><text x="13.2159%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.16%)</title><rect x="12.9229%" y="149" width="0.1615%" height="15" fill="rgb(245,123,42)" fg:x="8644" fg:w="108"/><text x="13.2159%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.33%)</title><rect x="12.0065%" y="165" width="1.3306%" height="15" fill="rgb(246,100,32)" fg:x="8031" fg:w="890"/><text x="12.2994%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.08%)</title><rect x="13.3370%" y="117" width="0.0792%" height="15" fill="rgb(233,68,38)" fg:x="8921" fg:w="53"/><text x="13.6300%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.12%)</title><rect x="13.3370%" y="133" width="0.1166%" height="15" fill="rgb(235,74,41)" fg:x="8921" fg:w="78"/><text x="13.6300%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.44%)</title><rect x="13.3370%" y="149" width="0.4380%" height="15" fill="rgb(244,172,4)" fg:x="8921" fg:w="293"/><text x="13.6300%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1622 (15 instructions, 0.02%)</title><rect x="13.7751%" y="149" width="0.0224%" height="15" fill="rgb(253,84,52)" fg:x="9214" fg:w="15"/><text x="14.0680%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="13.7975%" y="149" width="0.0164%" height="15" fill="rgb(232,94,25)" fg:x="9229" fg:w="11"/><text x="14.0905%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.71%)</title><rect x="13.3370%" y="165" width="0.7146%" height="15" fill="rgb(214,77,47)" fg:x="8921" fg:w="478"/><text x="13.6300%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.07%)</title><rect x="14.0516%" y="165" width="0.0703%" height="15" fill="rgb(225,185,11)" fg:x="9399" fg:w="47"/><text x="14.3446%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="14.1219%" y="149" width="0.1839%" height="15" fill="rgb(214,105,38)" fg:x="9446" fg:w="123"/><text x="14.4149%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="14.3462%" y="149" width="0.1839%" height="15" fill="rgb(214,7,0)" fg:x="9596" fg:w="123"/><text x="14.6391%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.45%)</title><rect x="14.1219%" y="165" width="0.4485%" height="15" fill="rgb(252,37,12)" fg:x="9446" fg:w="300"/><text x="14.4149%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.04%)</title><rect x="14.5704%" y="149" width="0.0419%" height="15" fill="rgb(250,40,11)" fg:x="9746" fg:w="28"/><text x="14.8634%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="14.6123%" y="149" width="0.0239%" height="15" fill="rgb(238,101,44)" fg:x="9774" fg:w="16"/><text x="14.9052%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="14.6362%" y="149" width="0.0239%" height="15" fill="rgb(229,120,40)" fg:x="9790" fg:w="16"/><text x="14.9292%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (137 instructions, 0.20%)</title><rect x="14.5704%" y="165" width="0.2048%" height="15" fill="rgb(217,12,54)" fg:x="9746" fg:w="137"/><text x="14.8634%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.7752%" y="165" width="0.0164%" height="15" fill="rgb(236,141,34)" fg:x="9883" fg:w="11"/><text x="15.0682%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.7917%" y="165" width="0.0164%" height="15" fill="rgb(246,127,31)" fg:x="9894" fg:w="11"/><text x="15.0846%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="14.8081%" y="165" width="0.0164%" height="15" fill="rgb(248,192,14)" fg:x="9905" fg:w="11"/><text x="15.1011%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.61%)</title><rect x="14.8246%" y="165" width="0.6130%" height="15" fill="rgb(236,32,53)" fg:x="9916" fg:w="410"/><text x="15.1175%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="15.4375%" y="133" width="0.0179%" height="15" fill="rgb(243,182,40)" fg:x="10326" fg:w="12"/><text x="15.7305%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.25%)</title><rect x="15.4555%" y="133" width="0.2512%" height="15" fill="rgb(250,225,27)" fg:x="10338" fg:w="168"/><text x="15.7484%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="15.7066%" y="117" width="0.1211%" height="15" fill="rgb(234,67,14)" fg:x="10506" fg:w="81"/><text x="15.9996%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.16%)</title><rect x="15.7066%" y="133" width="0.1615%" height="15" fill="rgb(237,84,48)" fg:x="10506" fg:w="108"/><text x="15.9996%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="15.8681%" y="133" width="0.0164%" height="15" fill="rgb(250,175,18)" fg:x="10614" fg:w="11"/><text x="16.1610%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (339 instructions, 0.51%)</title><rect x="15.4375%" y="149" width="0.5068%" height="15" fill="rgb(247,162,26)" fg:x="10326" fg:w="339"/><text x="15.7305%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (377 instructions, 0.56%)</title><rect x="15.4375%" y="165" width="0.5636%" height="15" fill="rgb(221,87,25)" fg:x="10326" fg:w="377"/><text x="15.7305%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.18%)</title><rect x="16.0011%" y="165" width="0.1839%" height="15" fill="rgb(248,113,0)" fg:x="10703" fg:w="123"/><text x="16.2941%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,049 instructions, 16.52%)</title><rect x="0.2556%" y="181" width="16.5184%" height="15" fill="rgb(222,177,1)" fg:x="171" fg:w="11049"/><text x="0.5486%" y="191.50">ic_cdk::api::call::ar..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (101 instructions, 0.15%)</title><rect x="16.7815%" y="133" width="0.1510%" height="15" fill="rgb(251,84,5)" fg:x="11225" fg:w="101"/><text x="17.0745%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (128 instructions, 0.19%)</title><rect x="16.7815%" y="149" width="0.1914%" height="15" fill="rgb(223,130,51)" fg:x="11225" fg:w="128"/><text x="17.0745%" y="159.50"></text></g><g><title>memset (136 instructions, 0.20%)</title><rect x="16.9729%" y="149" width="0.2033%" height="15" fill="rgb(253,18,37)" fg:x="11353" fg:w="136"/><text x="17.2659%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (429 instructions, 0.64%)</title><rect x="16.7741%" y="165" width="0.6414%" height="15" fill="rgb(245,58,5)" fg:x="11220" fg:w="429"/><text x="17.0670%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.05%)</title><rect x="17.4154%" y="149" width="0.0478%" height="15" fill="rgb(235,151,35)" fg:x="11649" fg:w="32"/><text x="17.7084%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.18%)</title><rect x="17.4633%" y="101" width="0.1764%" height="15" fill="rgb(238,215,8)" fg:x="11681" fg:w="118"/><text x="17.7562%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.23%)</title><rect x="17.4633%" y="117" width="0.2272%" height="15" fill="rgb(254,195,4)" fg:x="11681" fg:w="152"/><text x="17.7562%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (217 instructions, 0.32%)</title><rect x="17.4633%" y="133" width="0.3244%" height="15" fill="rgb(245,85,48)" fg:x="11681" fg:w="217"/><text x="17.7562%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="17.7877%" y="133" width="0.0164%" height="15" fill="rgb(231,172,51)" fg:x="11898" fg:w="11"/><text x="18.0806%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="17.8041%" y="133" width="0.0164%" height="15" fill="rgb(237,152,16)" fg:x="11909" fg:w="11"/><text x="18.0971%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (401 instructions, 0.60%)</title><rect x="17.4633%" y="149" width="0.5995%" height="15" fill="rgb(230,51,21)" fg:x="11681" fg:w="401"/><text x="17.7562%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="18.0628%" y="149" width="0.0449%" height="15" fill="rgb(227,150,36)" fg:x="12082" fg:w="30"/><text x="18.3557%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (536 instructions, 0.80%)</title><rect x="17.4154%" y="165" width="0.8013%" height="15" fill="rgb(235,78,1)" fg:x="11649" fg:w="536"/><text x="17.7084%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.08%)</title><rect x="18.2242%" y="165" width="0.0822%" height="15" fill="rgb(211,86,7)" fg:x="12190" fg:w="55"/><text x="18.5172%" y="175.50"></text></g><g><title>candid::utils::write_args (1,089 instructions, 1.63%)</title><rect x="16.7741%" y="181" width="1.6281%" height="15" fill="rgb(206,44,27)" fg:x="11220" fg:w="1089"/><text x="17.0670%" y="191.50"></text></g><g><title>btreemap::batch_get_5_::{{closure}} (66,359 instructions, 99.21%)</title><rect x="0.2556%" y="197" width="99.2076%" height="15" fill="rgb(213,29,45)" fg:x="171" fg:w="66359"/><text x="0.5486%" y="207.50">btreemap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4633%" y="197" width="0.0179%" height="15" fill="rgb(249,129,44)" fg:x="66530" fg:w="12"/><text x="99.7563%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.12%)</title><rect x="99.4812%" y="197" width="0.1211%" height="15" fill="rgb(246,190,38)" fg:x="66542" fg:w="81"/><text x="99.7742%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.25%)</title><rect x="99.6023%" y="197" width="0.2512%" height="15" fill="rgb(243,165,44)" fg:x="66623" fg:w="168"/><text x="99.8953%" y="207.50"></text></g><g><title>all (66,889 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,3,46)" fg:x="0" fg:w="66889"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (66,889 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(239,112,27)" fg:x="0" fg:w="66889"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>