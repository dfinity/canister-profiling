<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="63656"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.0000%" y="229" width="0.1288%" height="15" fill="rgb(215,12,20)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.1288%" y="229" width="0.1288%" height="15" fill="rgb(222,224,47)" fg:x="82" fg:w="82"/><text x="0.4218%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.2576%" y="181" width="0.1288%" height="15" fill="rgb(206,23,5)" fg:x="164" fg:w="82"/><text x="0.5506%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 1.79%)</title><rect x="0.2576%" y="197" width="1.7893%" height="15" fill="rgb(246,93,7)" fg:x="164" fg:w="1139"/><text x="0.5506%" y="207.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.08%)</title><rect x="2.0469%" y="165" width="0.0801%" height="15" fill="rgb(248,39,47)" fg:x="1303" fg:w="51"/><text x="2.3399%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.69%)</title><rect x="2.1271%" y="165" width="0.6865%" height="15" fill="rgb(205,73,19)" fg:x="1354" fg:w="437"/><text x="2.4200%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.10%)</title><rect x="2.8136%" y="165" width="0.1005%" height="15" fill="rgb(250,53,20)" fg:x="1791" fg:w="64"/><text x="3.1065%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.12%)</title><rect x="2.9141%" y="165" width="0.1194%" height="15" fill="rgb(222,179,40)" fg:x="1855" fg:w="76"/><text x="3.2071%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.12%)</title><rect x="3.0335%" y="165" width="0.1194%" height="15" fill="rgb(229,66,8)" fg:x="1931" fg:w="76"/><text x="3.3265%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.12%)</title><rect x="3.1529%" y="165" width="0.1194%" height="15" fill="rgb(224,208,19)" fg:x="2007" fg:w="76"/><text x="3.4459%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.12%)</title><rect x="3.2723%" y="165" width="0.1194%" height="15" fill="rgb(225,133,6)" fg:x="2083" fg:w="76"/><text x="3.5652%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.08%)</title><rect x="3.3917%" y="165" width="0.0801%" height="15" fill="rgb(231,55,27)" fg:x="2159" fg:w="51"/><text x="3.6846%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.15%)</title><rect x="3.4718%" y="165" width="0.1492%" height="15" fill="rgb(226,131,18)" fg:x="2210" fg:w="95"/><text x="3.7648%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.69%)</title><rect x="3.6210%" y="165" width="0.6865%" height="15" fill="rgb(242,94,37)" fg:x="2305" fg:w="437"/><text x="3.9140%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="4.3075%" y="165" width="0.0298%" height="15" fill="rgb(233,207,44)" fg:x="2742" fg:w="19"/><text x="4.6005%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="4.3374%" y="133" width="0.1288%" height="15" fill="rgb(234,27,23)" fg:x="2761" fg:w="82"/><text x="4.6303%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.11%)</title><rect x="4.4662%" y="101" width="0.1053%" height="15" fill="rgb(253,9,25)" fg:x="2843" fg:w="67"/><text x="4.7592%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="4.4662%" y="117" width="0.1508%" height="15" fill="rgb(218,30,43)" fg:x="2843" fg:w="96"/><text x="4.7592%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="4.6170%" y="69" width="0.0173%" height="15" fill="rgb(234,163,35)" fg:x="2939" fg:w="11"/><text x="4.9100%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="4.6343%" y="53" width="0.0550%" height="15" fill="rgb(224,224,29)" fg:x="2950" fg:w="35"/><text x="4.9273%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="4.6343%" y="69" width="0.1005%" height="15" fill="rgb(239,24,54)" fg:x="2950" fg:w="64"/><text x="4.9273%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.23%)</title><rect x="4.6170%" y="85" width="0.2262%" height="15" fill="rgb(210,137,0)" fg:x="2939" fg:w="144"/><text x="4.9100%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.33%)</title><rect x="4.6170%" y="101" width="0.3299%" height="15" fill="rgb(216,180,0)" fg:x="2939" fg:w="210"/><text x="4.9100%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.35%)</title><rect x="4.6170%" y="117" width="0.3456%" height="15" fill="rgb(244,130,18)" fg:x="2939" fg:w="220"/><text x="4.9100%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 0.71%)</title><rect x="4.4662%" y="133" width="0.7054%" height="15" fill="rgb(219,6,22)" fg:x="2843" fg:w="449"/><text x="4.7592%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.05%)</title><rect x="4.3374%" y="149" width="1.0478%" height="15" fill="rgb(216,205,49)" fg:x="2761" fg:w="667"/><text x="4.6303%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.10%)</title><rect x="5.3852%" y="149" width="0.1005%" height="15" fill="rgb(241,25,26)" fg:x="3428" fg:w="64"/><text x="5.6782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="5.4857%" y="149" width="0.0958%" height="15" fill="rgb(221,170,43)" fg:x="3492" fg:w="61"/><text x="5.7787%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.42%)</title><rect x="4.3374%" y="165" width="1.4186%" height="15" fill="rgb(228,162,24)" fg:x="2761" fg:w="903"/><text x="4.6303%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.04%)</title><rect x="5.7559%" y="165" width="0.0424%" height="15" fill="rgb(236,87,32)" fg:x="3664" fg:w="27"/><text x="6.0489%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.07%)</title><rect x="5.7984%" y="165" width="0.0723%" height="15" fill="rgb(251,132,26)" fg:x="3691" fg:w="46"/><text x="6.0913%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.15%)</title><rect x="5.8706%" y="165" width="0.1492%" height="15" fill="rgb(253,38,47)" fg:x="3737" fg:w="95"/><text x="6.1636%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.69%)</title><rect x="6.0199%" y="149" width="0.6865%" height="15" fill="rgb(211,25,25)" fg:x="3832" fg:w="437"/><text x="6.3128%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="6.7064%" y="149" width="0.0298%" height="15" fill="rgb(246,198,6)" fg:x="4269" fg:w="19"/><text x="6.9993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="6.7362%" y="117" width="0.1288%" height="15" fill="rgb(251,119,37)" fg:x="4288" fg:w="82"/><text x="7.0292%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.11%)</title><rect x="6.8650%" y="85" width="0.1053%" height="15" fill="rgb(234,24,4)" fg:x="4370" fg:w="67"/><text x="7.1580%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="6.8650%" y="101" width="0.1508%" height="15" fill="rgb(228,79,10)" fg:x="4370" fg:w="96"/><text x="7.1580%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="7.0158%" y="53" width="0.0173%" height="15" fill="rgb(212,15,11)" fg:x="4466" fg:w="11"/><text x="7.3088%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="7.0331%" y="37" width="0.0550%" height="15" fill="rgb(234,178,13)" fg:x="4477" fg:w="35"/><text x="7.3261%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="7.0331%" y="53" width="0.1005%" height="15" fill="rgb(221,127,8)" fg:x="4477" fg:w="64"/><text x="7.3261%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.23%)</title><rect x="7.0158%" y="69" width="0.2262%" height="15" fill="rgb(208,32,36)" fg:x="4466" fg:w="144"/><text x="7.3088%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.33%)</title><rect x="7.0158%" y="85" width="0.3299%" height="15" fill="rgb(218,147,46)" fg:x="4466" fg:w="210"/><text x="7.3088%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.35%)</title><rect x="7.0158%" y="101" width="0.3456%" height="15" fill="rgb(217,189,34)" fg:x="4466" fg:w="220"/><text x="7.3088%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 0.71%)</title><rect x="6.8650%" y="117" width="0.7054%" height="15" fill="rgb(254,187,30)" fg:x="4370" fg:w="449"/><text x="7.1580%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.05%)</title><rect x="6.7362%" y="133" width="1.0478%" height="15" fill="rgb(246,218,16)" fg:x="4288" fg:w="667"/><text x="7.0292%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.10%)</title><rect x="7.7840%" y="133" width="0.1005%" height="15" fill="rgb(247,205,35)" fg:x="4955" fg:w="64"/><text x="8.0770%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="7.8846%" y="133" width="0.0958%" height="15" fill="rgb(222,181,13)" fg:x="5019" fg:w="61"/><text x="8.1775%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.42%)</title><rect x="6.7362%" y="149" width="1.4186%" height="15" fill="rgb(235,198,2)" fg:x="4288" fg:w="903"/><text x="7.0292%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.08%)</title><rect x="8.1548%" y="133" width="0.0801%" height="15" fill="rgb(229,49,41)" fg:x="5191" fg:w="51"/><text x="8.4477%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.19%)</title><rect x="8.2349%" y="133" width="0.1854%" height="15" fill="rgb(209,68,51)" fg:x="5242" fg:w="118"/><text x="8.5279%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.07%)</title><rect x="8.4203%" y="133" width="0.0723%" height="15" fill="rgb(231,28,12)" fg:x="5360" fg:w="46"/><text x="8.7132%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.44%)</title><rect x="8.1548%" y="149" width="0.4446%" height="15" fill="rgb(249,214,22)" fg:x="5191" fg:w="283"/><text x="8.4477%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="8.5993%" y="149" width="0.1288%" height="15" fill="rgb(254,140,40)" fg:x="5474" fg:w="82"/><text x="8.8923%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 3.00%)</title><rect x="6.0199%" y="165" width="3.0005%" height="15" fill="rgb(253,178,28)" fg:x="3832" fg:w="1910"/><text x="6.3128%" y="175.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.07%)</title><rect x="9.0204%" y="165" width="0.0723%" height="15" fill="rgb(247,93,23)" fg:x="5742" fg:w="46"/><text x="9.3133%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="9.0926%" y="165" width="0.0236%" height="15" fill="rgb(216,129,53)" fg:x="5788" fg:w="15"/><text x="9.3856%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.01%)</title><rect x="9.1162%" y="165" width="0.0126%" height="15" fill="rgb(250,30,48)" fg:x="5803" fg:w="8"/><text x="9.4092%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="9.1288%" y="149" width="0.1288%" height="15" fill="rgb(244,100,37)" fg:x="5811" fg:w="82"/><text x="9.4217%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.28%)</title><rect x="9.1288%" y="165" width="0.2796%" height="15" fill="rgb(238,122,20)" fg:x="5811" fg:w="178"/><text x="9.4217%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="9.4084%" y="133" width="0.1288%" height="15" fill="rgb(253,173,31)" fg:x="5989" fg:w="82"/><text x="9.7014%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.19%)</title><rect x="9.4084%" y="149" width="0.1932%" height="15" fill="rgb(224,59,5)" fg:x="5989" fg:w="123"/><text x="9.7014%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.33%)</title><rect x="9.4084%" y="165" width="0.3299%" height="15" fill="rgb(253,112,24)" fg:x="5989" fg:w="210"/><text x="9.7014%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="9.7383%" y="165" width="0.1288%" height="15" fill="rgb(244,96,50)" fg:x="6199" fg:w="82"/><text x="10.0312%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="9.8671%" y="165" width="0.1398%" height="15" fill="rgb(215,49,51)" fg:x="6281" fg:w="89"/><text x="10.1601%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="10.0069%" y="165" width="0.1288%" height="15" fill="rgb(206,163,43)" fg:x="6370" fg:w="82"/><text x="10.2999%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="10.1357%" y="165" width="0.1288%" height="15" fill="rgb(218,165,34)" fg:x="6452" fg:w="82"/><text x="10.4287%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="10.2724%" y="165" width="0.1398%" height="15" fill="rgb(236,77,15)" fg:x="6539" fg:w="89"/><text x="10.5654%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.62%)</title><rect x="10.4122%" y="165" width="0.6158%" height="15" fill="rgb(217,158,47)" fg:x="6628" fg:w="392"/><text x="10.7052%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.62%)</title><rect x="11.0280%" y="165" width="0.6158%" height="15" fill="rgb(224,57,31)" fg:x="7020" fg:w="392"/><text x="11.3210%" y="175.50"></text></g><g><title>memcpy (504 instructions, 0.79%)</title><rect x="11.6438%" y="165" width="0.7918%" height="15" fill="rgb(215,62,28)" fg:x="7412" fg:w="504"/><text x="11.9368%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 12.34%)</title><rect x="2.0469%" y="181" width="12.3429%" height="15" fill="rgb(227,21,13)" fg:x="1303" fg:w="7857"/><text x="2.3399%" y="191.50">candid::de::IDL..</text></g><g><title>memcpy (408 instructions, 0.64%)</title><rect x="14.3898%" y="181" width="0.6409%" height="15" fill="rgb(210,69,21)" fg:x="9160" fg:w="408"/><text x="14.6828%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.64%)</title><rect x="15.0308%" y="181" width="0.6409%" height="15" fill="rgb(213,11,48)" fg:x="9568" fg:w="408"/><text x="15.3238%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.04%)</title><rect x="15.6717%" y="181" width="0.0377%" height="15" fill="rgb(223,192,40)" fg:x="9976" fg:w="24"/><text x="15.9647%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="15.7094%" y="181" width="0.1288%" height="15" fill="rgb(238,32,39)" fg:x="10000" fg:w="82"/><text x="16.0024%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="15.8383%" y="165" width="0.1430%" height="15" fill="rgb(246,215,13)" fg:x="10082" fg:w="91"/><text x="16.1312%" y="175.50"></text></g><g><title>candid::types::internal::env_add (175 instructions, 0.27%)</title><rect x="15.8383%" y="181" width="0.2749%" height="15" fill="rgb(237,203,50)" fg:x="10082" fg:w="175"/><text x="16.1312%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="16.1132%" y="181" width="0.1430%" height="15" fill="rgb(253,79,53)" fg:x="10257" fg:w="91"/><text x="16.4061%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.12%)</title><rect x="16.2561%" y="165" width="0.1210%" height="15" fill="rgb(249,11,7)" fg:x="10348" fg:w="77"/><text x="16.5491%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="16.3771%" y="149" width="0.1398%" height="15" fill="rgb(215,76,42)" fg:x="10425" fg:w="89"/><text x="16.6701%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.25%)</title><rect x="16.3771%" y="165" width="0.2514%" height="15" fill="rgb(207,211,36)" fg:x="10425" fg:w="160"/><text x="16.6701%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 0.65%)</title><rect x="16.2561%" y="181" width="0.6535%" height="15" fill="rgb(226,201,25)" fg:x="10348" fg:w="416"/><text x="16.5491%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.08%)</title><rect x="16.9096%" y="165" width="0.0770%" height="15" fill="rgb(227,110,38)" fg:x="10764" fg:w="49"/><text x="17.2026%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="16.9866%" y="165" width="0.0220%" height="15" fill="rgb(238,70,54)" fg:x="10813" fg:w="14"/><text x="17.2796%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.31%)</title><rect x="16.9096%" y="181" width="0.3142%" height="15" fill="rgb(205,113,52)" fg:x="10764" fg:w="200"/><text x="17.2026%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.08%)</title><rect x="17.2238%" y="181" width="0.0770%" height="15" fill="rgb(215,30,37)" fg:x="10964" fg:w="49"/><text x="17.5168%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="17.3008%" y="165" width="0.0958%" height="15" fill="rgb(252,168,17)" fg:x="11013" fg:w="61"/><text x="17.5938%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="17.5082%" y="165" width="0.0958%" height="15" fill="rgb(230,179,35)" fg:x="11145" fg:w="61"/><text x="17.8011%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (264 instructions, 0.41%)</title><rect x="17.3008%" y="181" width="0.4147%" height="15" fill="rgb(251,195,40)" fg:x="11013" fg:w="264"/><text x="17.5938%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.06%)</title><rect x="17.7155%" y="165" width="0.0581%" height="15" fill="rgb(221,21,31)" fg:x="11277" fg:w="37"/><text x="18.0085%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.05%)</title><rect x="17.7737%" y="165" width="0.0534%" height="15" fill="rgb(235,212,17)" fg:x="11314" fg:w="34"/><text x="18.0666%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.05%)</title><rect x="17.8271%" y="165" width="0.0534%" height="15" fill="rgb(247,165,4)" fg:x="11348" fg:w="34"/><text x="18.1200%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.05%)</title><rect x="17.8805%" y="165" width="0.0487%" height="15" fill="rgb(222,48,9)" fg:x="11382" fg:w="31"/><text x="18.1735%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.41%)</title><rect x="17.7155%" y="181" width="0.4100%" height="15" fill="rgb(242,84,36)" fg:x="11277" fg:w="261"/><text x="18.0085%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="18.1255%" y="181" width="0.0220%" height="15" fill="rgb(209,12,51)" fg:x="11538" fg:w="14"/><text x="18.4185%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="18.1475%" y="181" width="0.0220%" height="15" fill="rgb(244,161,32)" fg:x="11552" fg:w="14"/><text x="18.4405%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="18.1695%" y="181" width="0.0220%" height="15" fill="rgb(243,182,16)" fg:x="11566" fg:w="14"/><text x="18.4625%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.06%)</title><rect x="18.1915%" y="181" width="0.0581%" height="15" fill="rgb(247,45,4)" fg:x="11580" fg:w="37"/><text x="18.4845%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.01%)</title><rect x="18.2497%" y="165" width="0.0126%" height="15" fill="rgb(226,176,25)" fg:x="11617" fg:w="8"/><text x="18.5426%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="18.2622%" y="149" width="0.0424%" height="15" fill="rgb(233,218,31)" fg:x="11625" fg:w="27"/><text x="18.5552%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.18%)</title><rect x="18.2622%" y="165" width="0.1822%" height="15" fill="rgb(236,58,49)" fg:x="11625" fg:w="116"/><text x="18.5552%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="18.4445%" y="149" width="0.0958%" height="15" fill="rgb(209,85,32)" fg:x="11741" fg:w="61"/><text x="18.7374%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.21%)</title><rect x="18.4445%" y="165" width="0.2074%" height="15" fill="rgb(248,123,2)" fg:x="11741" fg:w="132"/><text x="18.7374%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="18.6518%" y="165" width="0.0220%" height="15" fill="rgb(236,89,52)" fg:x="11873" fg:w="14"/><text x="18.9448%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="18.6738%" y="165" width="0.0110%" height="15" fill="rgb(235,103,42)" fg:x="11887" fg:w="7"/><text x="18.9668%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (367 instructions, 0.58%)</title><rect x="18.2497%" y="181" width="0.5765%" height="15" fill="rgb(229,91,45)" fg:x="11617" fg:w="367"/><text x="18.5426%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,113 instructions, 17.46%)</title><rect x="2.0469%" y="197" width="17.4579%" height="15" fill="rgb(210,45,21)" fg:x="1303" fg:w="11113"/><text x="2.3399%" y="207.50">candid::utils::decode_a..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="19.5048%" y="197" width="0.0958%" height="15" fill="rgb(235,168,5)" fg:x="12416" fg:w="61"/><text x="19.7978%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,420 instructions, 19.51%)</title><rect x="0.2576%" y="213" width="19.5111%" height="15" fill="rgb(250,90,32)" fg:x="164" fg:w="12420"/><text x="0.5506%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (62 instructions, 0.10%)</title><rect x="19.7688%" y="165" width="0.0974%" height="15" fill="rgb(248,101,15)" fg:x="12584" fg:w="62"/><text x="20.0617%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.21%)</title><rect x="19.7688%" y="181" width="0.2089%" height="15" fill="rgb(234,199,15)" fg:x="12584" fg:w="133"/><text x="20.0617%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (62 instructions, 0.10%)</title><rect x="19.9777%" y="181" width="0.0974%" height="15" fill="rgb(252,121,28)" fg:x="12717" fg:w="62"/><text x="20.2707%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (371 instructions, 0.58%)</title><rect x="19.7688%" y="197" width="0.5828%" height="15" fill="rgb(207,203,33)" fg:x="12584" fg:w="371"/><text x="20.0617%" y="207.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.81%)</title><rect x="20.3516%" y="181" width="0.8137%" height="15" fill="rgb(217,27,10)" fg:x="12955" fg:w="518"/><text x="20.6445%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="21.1653%" y="133" width="0.1288%" height="15" fill="rgb(239,214,12)" fg:x="13473" fg:w="82"/><text x="21.4583%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.19%)</title><rect x="21.1653%" y="149" width="0.1932%" height="15" fill="rgb(245,84,21)" fg:x="13473" fg:w="123"/><text x="21.4583%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.32%)</title><rect x="21.1653%" y="165" width="0.3236%" height="15" fill="rgb(235,175,47)" fg:x="13473" fg:w="206"/><text x="21.4583%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="21.4889%" y="165" width="0.0236%" height="15" fill="rgb(220,111,44)" fg:x="13679" fg:w="15"/><text x="21.7819%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="21.5125%" y="165" width="0.0236%" height="15" fill="rgb(220,217,8)" fg:x="13694" fg:w="15"/><text x="21.8055%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.67%)</title><rect x="21.1653%" y="181" width="0.6724%" height="15" fill="rgb(214,84,54)" fg:x="13473" fg:w="428"/><text x="21.4583%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.81%)</title><rect x="21.8377%" y="181" width="0.8106%" height="15" fill="rgb(252,28,9)" fg:x="13901" fg:w="516"/><text x="22.1307%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 instructions, 0.01%)</title><rect x="22.6483%" y="181" width="0.0110%" height="15" fill="rgb(235,116,40)" fg:x="14417" fg:w="7"/><text x="22.9413%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 2.43%)</title><rect x="20.3516%" y="197" width="2.4287%" height="15" fill="rgb(223,179,34)" fg:x="12955" fg:w="1546"/><text x="20.6445%" y="207.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.01%)</title><rect x="22.7803%" y="197" width="0.0126%" height="15" fill="rgb(243,35,52)" fg:x="14501" fg:w="8"/><text x="23.0732%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.01%)</title><rect x="22.7928%" y="197" width="0.0126%" height="15" fill="rgb(218,20,36)" fg:x="14509" fg:w="8"/><text x="23.0858%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.10%)</title><rect x="22.8054%" y="197" width="0.0958%" height="15" fill="rgb(251,219,52)" fg:x="14517" fg:w="61"/><text x="23.0984%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,625 instructions, 4.12%)</title><rect x="19.7688%" y="213" width="4.1237%" height="15" fill="rgb(216,89,24)" fg:x="12584" fg:w="2625"/><text x="20.0617%" y="223.50">ic_..</text></g><g><title>btreemap::__canister_method_batch_get::{{closure}} (63,058 instructions, 99.06%)</title><rect x="0.2576%" y="229" width="99.0606%" height="15" fill="rgb(252,16,8)" fg:x="164" fg:w="63058"/><text x="0.5506%" y="239.50">btreemap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.02%)</title><rect x="99.3182%" y="229" width="0.0236%" height="15" fill="rgb(217,10,45)" fg:x="63222" fg:w="15"/><text x="99.6112%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="99.4832%" y="197" width="0.0424%" height="15" fill="rgb(231,13,33)" fg:x="63327" fg:w="27"/><text x="99.7761%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.32%)</title><rect x="99.3433%" y="213" width="0.3220%" height="15" fill="rgb(240,141,46)" fg:x="63238" fg:w="205"/><text x="99.6363%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 0.51%)</title><rect x="99.3418%" y="229" width="0.5074%" height="15" fill="rgb(244,216,24)" fg:x="63237" fg:w="323"/><text x="99.6347%" y="239.50"></text></g><g><title>all (63,656 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(208,39,3)" fg:x="0" fg:w="63656"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_get (63,656 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,216,13)" fg:x="0" fg:w="63656"/><text x="0.2930%" y="255.50">canister_update batch_get</text></g></svg></svg>