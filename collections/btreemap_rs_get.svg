<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="59433"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0135%" height="15" fill="rgb(225,227,34)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0135%" y="181" width="0.0151%" height="15" fill="rgb(233,69,34)" fg:x="8" fg:w="9"/><text x="0.3064%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0286%" y="181" width="0.0151%" height="15" fill="rgb(205,59,22)" fg:x="17" fg:w="9"/><text x="0.3216%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::left_bits (8 instructions, 0.01%)</title><rect x="0.0437%" y="181" width="0.0135%" height="15" fill="rgb(239,103,39)" fg:x="26" fg:w="8"/><text x="0.3367%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0791%" y="181" width="0.0168%" height="15" fill="rgb(211,97,37)" fg:x="47" fg:w="10"/><text x="0.3720%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (168 instructions, 0.28%)</title><rect x="0.0135%" y="197" width="0.2827%" height="15" fill="rgb(219,5,51)" fg:x="8" fg:w="168"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (178 instructions, 0.30%)</title><rect x="0.0135%" y="213" width="0.2995%" height="15" fill="rgb(253,226,35)" fg:x="8" fg:w="178"/><text x="0.3064%" y="223.50"></text></g><g><title>__rdl_alloc (181 instructions, 0.30%)</title><rect x="0.0135%" y="229" width="0.3045%" height="15" fill="rgb(211,130,34)" fg:x="8" fg:w="181"/><text x="0.3064%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3281%" y="181" width="0.0151%" height="15" fill="rgb(232,196,43)" fg:x="195" fg:w="9"/><text x="0.6211%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3432%" y="181" width="0.0151%" height="15" fill="rgb(247,63,36)" fg:x="204" fg:w="9"/><text x="0.6362%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3584%" y="181" width="0.0151%" height="15" fill="rgb(251,30,13)" fg:x="213" fg:w="9"/><text x="0.6514%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="0.3735%" y="181" width="0.0236%" height="15" fill="rgb(251,46,31)" fg:x="222" fg:w="14"/><text x="0.6665%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.21%)</title><rect x="0.3281%" y="197" width="0.2086%" height="15" fill="rgb(253,167,6)" fg:x="195" fg:w="124"/><text x="0.6211%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.23%)</title><rect x="0.3281%" y="213" width="0.2255%" height="15" fill="rgb(254,111,22)" fg:x="195" fg:w="134"/><text x="0.6211%" y="223.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.23%)</title><rect x="0.3281%" y="229" width="0.2305%" height="15" fill="rgb(214,188,2)" fg:x="195" fg:w="137"/><text x="0.6211%" y="239.50"></text></g><g><title>__rust_alloc (330 instructions, 0.56%)</title><rect x="0.0135%" y="245" width="0.5552%" height="15" fill="rgb(215,229,1)" fg:x="8" fg:w="330"/><text x="0.3064%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5687%" y="245" width="0.0101%" height="15" fill="rgb(230,197,7)" fg:x="338" fg:w="6"/><text x="0.8617%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5788%" y="149" width="0.0151%" height="15" fill="rgb(206,181,44)" fg:x="344" fg:w="9"/><text x="0.8718%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5939%" y="149" width="0.0151%" height="15" fill="rgb(219,125,47)" fg:x="353" fg:w="9"/><text x="0.8869%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="0.5788%" y="165" width="0.2019%" height="15" fill="rgb(232,93,32)" fg:x="344" fg:w="120"/><text x="0.8718%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="0.5788%" y="181" width="0.2187%" height="15" fill="rgb(208,191,50)" fg:x="344" fg:w="130"/><text x="0.8718%" y="191.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="0.5788%" y="197" width="0.2238%" height="15" fill="rgb(254,60,3)" fg:x="344" fg:w="133"/><text x="0.8718%" y="207.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="0.5788%" y="213" width="0.2339%" height="15" fill="rgb(240,154,23)" fg:x="344" fg:w="139"/><text x="0.8718%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (197 instructions, 0.33%)</title><rect x="0.5788%" y="229" width="0.3315%" height="15" fill="rgb(212,189,44)" fg:x="344" fg:w="197"/><text x="0.8718%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.11%)</title><rect x="0.9120%" y="181" width="0.1060%" height="15" fill="rgb(228,155,46)" fg:x="542" fg:w="63"/><text x="1.2049%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.0180%" y="117" width="0.0101%" height="15" fill="rgb(213,52,33)" fg:x="605" fg:w="6"/><text x="1.3109%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.0180%" y="133" width="0.0168%" height="15" fill="rgb(236,214,15)" fg:x="605" fg:w="10"/><text x="1.3109%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="1.0180%" y="149" width="0.7286%" height="15" fill="rgb(244,108,11)" fg:x="605" fg:w="433"/><text x="1.3109%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.13%)</title><rect x="1.7465%" y="149" width="0.1279%" height="15" fill="rgb(205,95,33)" fg:x="1038" fg:w="76"/><text x="2.0395%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="1.8744%" y="149" width="0.0875%" height="15" fill="rgb(247,171,25)" fg:x="1114" fg:w="52"/><text x="2.1673%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="1.9619%" y="149" width="0.0875%" height="15" fill="rgb(232,94,29)" fg:x="1166" fg:w="52"/><text x="2.2548%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="2.0494%" y="149" width="0.0875%" height="15" fill="rgb(219,220,53)" fg:x="1218" fg:w="52"/><text x="2.3423%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="2.1369%" y="149" width="0.0875%" height="15" fill="rgb(229,15,10)" fg:x="1270" fg:w="52"/><text x="2.4298%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (859 instructions, 1.45%)</title><rect x="1.0180%" y="181" width="1.4453%" height="15" fill="rgb(227,117,16)" fg:x="605" fg:w="859"/><text x="1.3109%" y="191.50"></text></g><g><title> 4]&gt;::read_options (859 instructions, 1.45%)</title><rect x="1.0180%" y="165" width="1.4453%" height="15" fill="rgb(252,54,38)" fg:x="605" fg:w="859"/><text x="1.3109%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.11%)</title><rect x="2.4633%" y="181" width="0.1060%" height="15" fill="rgb(246,46,2)" fg:x="1464" fg:w="63"/><text x="2.7562%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.13%)</title><rect x="2.5693%" y="165" width="0.1296%" height="15" fill="rgb(239,219,6)" fg:x="1527" fg:w="77"/><text x="2.8622%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="2.5693%" y="181" width="0.1750%" height="15" fill="rgb(251,104,47)" fg:x="1527" fg:w="104"/><text x="2.8622%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="2.7443%" y="133" width="0.0101%" height="15" fill="rgb(228,78,26)" fg:x="1631" fg:w="6"/><text x="3.0372%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="2.7443%" y="149" width="0.0168%" height="15" fill="rgb(221,103,13)" fg:x="1631" fg:w="10"/><text x="3.0372%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="2.7443%" y="165" width="0.7286%" height="15" fill="rgb(232,114,25)" fg:x="1631" fg:w="433"/><text x="3.0372%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.4728%" y="149" width="0.0303%" height="15" fill="rgb(247,117,13)" fg:x="2064" fg:w="18"/><text x="3.7658%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.4728%" y="165" width="0.0370%" height="15" fill="rgb(239,8,29)" fg:x="2064" fg:w="22"/><text x="3.7658%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.5098%" y="69" width="0.0151%" height="15" fill="rgb(248,110,19)" fg:x="2086" fg:w="9"/><text x="3.8028%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.5250%" y="69" width="0.0151%" height="15" fill="rgb(226,2,6)" fg:x="2095" fg:w="9"/><text x="3.8179%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="3.5098%" y="85" width="0.2019%" height="15" fill="rgb(223,69,42)" fg:x="2086" fg:w="120"/><text x="3.8028%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="3.5098%" y="101" width="0.2187%" height="15" fill="rgb(217,182,27)" fg:x="2086" fg:w="130"/><text x="3.8028%" y="111.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="3.5098%" y="117" width="0.2238%" height="15" fill="rgb(245,89,31)" fg:x="2086" fg:w="133"/><text x="3.8028%" y="127.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="3.5098%" y="133" width="0.2339%" height="15" fill="rgb(241,47,3)" fg:x="2086" fg:w="139"/><text x="3.8028%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="3.7437%" y="85" width="0.1010%" height="15" fill="rgb(227,217,1)" fg:x="2225" fg:w="60"/><text x="4.0367%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.11%)</title><rect x="3.7437%" y="101" width="0.1077%" height="15" fill="rgb(206,126,5)" fg:x="2225" fg:w="64"/><text x="4.0367%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.15%)</title><rect x="3.7437%" y="117" width="0.1497%" height="15" fill="rgb(216,157,18)" fg:x="2225" fg:w="89"/><text x="4.0367%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="3.8935%" y="69" width="0.0168%" height="15" fill="rgb(254,12,4)" fg:x="2314" fg:w="10"/><text x="4.1864%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="3.9103%" y="37" width="0.0505%" height="15" fill="rgb(250,113,28)" fg:x="2324" fg:w="30"/><text x="4.2033%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="3.9103%" y="53" width="0.0572%" height="15" fill="rgb(252,47,28)" fg:x="2324" fg:w="34"/><text x="4.2033%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="3.9103%" y="69" width="0.0993%" height="15" fill="rgb(242,133,11)" fg:x="2324" fg:w="59"/><text x="4.2033%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.20%)</title><rect x="3.8935%" y="85" width="0.2002%" height="15" fill="rgb(228,63,40)" fg:x="2314" fg:w="119"/><text x="4.1864%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.29%)</title><rect x="3.8935%" y="101" width="0.2928%" height="15" fill="rgb(248,215,43)" fg:x="2314" fg:w="174"/><text x="4.1864%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.30%)</title><rect x="3.8935%" y="117" width="0.3012%" height="15" fill="rgb(229,95,9)" fg:x="2314" fg:w="179"/><text x="4.1864%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.64%)</title><rect x="3.7437%" y="133" width="0.6377%" height="15" fill="rgb(213,85,51)" fg:x="2225" fg:w="379"/><text x="4.0367%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (661 instructions, 1.11%)</title><rect x="3.5098%" y="149" width="1.1122%" height="15" fill="rgb(249,19,14)" fg:x="2086" fg:w="661"/><text x="3.8028%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.13%)</title><rect x="4.6220%" y="149" width="0.1279%" height="15" fill="rgb(239,213,38)" fg:x="2747" fg:w="76"/><text x="4.9150%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="4.7734%" y="101" width="0.0101%" height="15" fill="rgb(206,99,52)" fg:x="2837" fg:w="6"/><text x="5.0664%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="4.7499%" y="117" width="0.1144%" height="15" fill="rgb(242,114,3)" fg:x="2823" fg:w="68"/><text x="5.0429%" y="127.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="4.7499%" y="133" width="0.1178%" height="15" fill="rgb(217,134,23)" fg:x="2823" fg:w="70"/><text x="5.0429%" y="143.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="4.7499%" y="149" width="0.1262%" height="15" fill="rgb(222,137,0)" fg:x="2823" fg:w="75"/><text x="5.0429%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (883 instructions, 1.49%)</title><rect x="3.5098%" y="165" width="1.4857%" height="15" fill="rgb(232,67,40)" fg:x="2086" fg:w="883"/><text x="3.8028%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="4.9955%" y="165" width="0.0421%" height="15" fill="rgb(241,220,4)" fg:x="2969" fg:w="25"/><text x="5.2885%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,511 instructions, 2.54%)</title><rect x="2.7443%" y="181" width="2.5424%" height="15" fill="rgb(235,190,49)" fg:x="1631" fg:w="1511"/><text x="3.0372%" y="191.50">b..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.10%)</title><rect x="5.2866%" y="181" width="0.0976%" height="15" fill="rgb(234,36,6)" fg:x="3142" fg:w="58"/><text x="5.5796%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.13%)</title><rect x="5.3842%" y="165" width="0.1296%" height="15" fill="rgb(236,19,43)" fg:x="3200" fg:w="77"/><text x="5.6772%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="5.3842%" y="181" width="0.1750%" height="15" fill="rgb(241,62,45)" fg:x="3200" fg:w="104"/><text x="5.6772%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="5.5592%" y="133" width="0.0101%" height="15" fill="rgb(211,149,30)" fg:x="3304" fg:w="6"/><text x="5.8522%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="5.5592%" y="149" width="0.0168%" height="15" fill="rgb(230,214,22)" fg:x="3304" fg:w="10"/><text x="5.8522%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="5.5592%" y="165" width="0.7286%" height="15" fill="rgb(211,205,11)" fg:x="3304" fg:w="433"/><text x="5.8522%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="6.2878%" y="149" width="0.0303%" height="15" fill="rgb(252,188,37)" fg:x="3737" fg:w="18"/><text x="6.5807%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="6.2878%" y="165" width="0.0370%" height="15" fill="rgb(238,97,11)" fg:x="3737" fg:w="22"/><text x="6.5807%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="6.3248%" y="69" width="0.0151%" height="15" fill="rgb(234,114,17)" fg:x="3759" fg:w="9"/><text x="6.6177%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="6.3399%" y="69" width="0.0151%" height="15" fill="rgb(236,206,2)" fg:x="3768" fg:w="9"/><text x="6.6329%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="6.3248%" y="85" width="0.2019%" height="15" fill="rgb(240,202,0)" fg:x="3759" fg:w="120"/><text x="6.6177%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="6.3248%" y="101" width="0.2187%" height="15" fill="rgb(219,48,25)" fg:x="3759" fg:w="130"/><text x="6.6177%" y="111.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="6.3248%" y="117" width="0.2238%" height="15" fill="rgb(238,218,13)" fg:x="3759" fg:w="133"/><text x="6.6177%" y="127.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="6.3248%" y="133" width="0.2339%" height="15" fill="rgb(252,184,45)" fg:x="3759" fg:w="139"/><text x="6.6177%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="6.5586%" y="85" width="0.1010%" height="15" fill="rgb(236,153,30)" fg:x="3898" fg:w="60"/><text x="6.8516%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.11%)</title><rect x="6.5586%" y="101" width="0.1077%" height="15" fill="rgb(217,185,2)" fg:x="3898" fg:w="64"/><text x="6.8516%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.15%)</title><rect x="6.5586%" y="117" width="0.1497%" height="15" fill="rgb(209,157,50)" fg:x="3898" fg:w="89"/><text x="6.8516%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="6.7084%" y="69" width="0.0168%" height="15" fill="rgb(223,126,33)" fg:x="3987" fg:w="10"/><text x="7.0014%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="6.7252%" y="37" width="0.0505%" height="15" fill="rgb(225,206,51)" fg:x="3997" fg:w="30"/><text x="7.0182%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="6.7252%" y="53" width="0.0572%" height="15" fill="rgb(253,86,45)" fg:x="3997" fg:w="34"/><text x="7.0182%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="6.7252%" y="69" width="0.0993%" height="15" fill="rgb(233,176,20)" fg:x="3997" fg:w="59"/><text x="7.0182%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.20%)</title><rect x="6.7084%" y="85" width="0.2002%" height="15" fill="rgb(232,128,28)" fg:x="3987" fg:w="119"/><text x="7.0014%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.29%)</title><rect x="6.7084%" y="101" width="0.2928%" height="15" fill="rgb(217,198,32)" fg:x="3987" fg:w="174"/><text x="7.0014%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.30%)</title><rect x="6.7084%" y="117" width="0.3012%" height="15" fill="rgb(209,159,15)" fg:x="3987" fg:w="179"/><text x="7.0014%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.64%)</title><rect x="6.5586%" y="133" width="0.6377%" height="15" fill="rgb(251,43,15)" fg:x="3898" fg:w="379"/><text x="6.8516%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (661 instructions, 1.11%)</title><rect x="6.3248%" y="149" width="1.1122%" height="15" fill="rgb(250,19,13)" fg:x="3759" fg:w="661"/><text x="6.6177%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.13%)</title><rect x="7.4369%" y="149" width="0.1279%" height="15" fill="rgb(246,48,46)" fg:x="4420" fg:w="76"/><text x="7.7299%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="7.5884%" y="101" width="0.0101%" height="15" fill="rgb(217,16,25)" fg:x="4510" fg:w="6"/><text x="7.8813%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="7.5648%" y="117" width="0.1144%" height="15" fill="rgb(226,17,15)" fg:x="4496" fg:w="68"/><text x="7.8578%" y="127.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="7.5648%" y="133" width="0.1178%" height="15" fill="rgb(240,98,32)" fg:x="4496" fg:w="70"/><text x="7.8578%" y="143.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="7.5648%" y="149" width="0.1262%" height="15" fill="rgb(206,79,26)" fg:x="4496" fg:w="75"/><text x="7.8578%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (883 instructions, 1.49%)</title><rect x="6.3248%" y="165" width="1.4857%" height="15" fill="rgb(243,108,14)" fg:x="3759" fg:w="883"/><text x="6.6177%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.11%)</title><rect x="7.8105%" y="133" width="0.1060%" height="15" fill="rgb(253,41,54)" fg:x="4642" fg:w="63"/><text x="8.1034%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.19%)</title><rect x="7.9165%" y="117" width="0.1851%" height="15" fill="rgb(209,171,44)" fg:x="4705" fg:w="110"/><text x="8.2094%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.23%)</title><rect x="7.9165%" y="133" width="0.2305%" height="15" fill="rgb(246,2,33)" fg:x="4705" fg:w="137"/><text x="8.2094%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.10%)</title><rect x="8.1470%" y="133" width="0.0976%" height="15" fill="rgb(206,42,12)" fg:x="4842" fg:w="58"/><text x="8.4400%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (314 instructions, 0.53%)</title><rect x="7.8105%" y="149" width="0.5283%" height="15" fill="rgb(236,80,38)" fg:x="4642" fg:w="314"/><text x="8.1034%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="8.3388%" y="85" width="0.0151%" height="15" fill="rgb(211,20,23)" fg:x="4956" fg:w="9"/><text x="8.6318%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="8.3539%" y="85" width="0.0151%" height="15" fill="rgb(215,126,22)" fg:x="4965" fg:w="9"/><text x="8.6469%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="8.3388%" y="101" width="0.2019%" height="15" fill="rgb(252,18,50)" fg:x="4956" fg:w="120"/><text x="8.6318%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="8.3388%" y="117" width="0.2187%" height="15" fill="rgb(234,29,13)" fg:x="4956" fg:w="130"/><text x="8.6318%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="8.3388%" y="133" width="0.2238%" height="15" fill="rgb(230,116,36)" fg:x="4956" fg:w="133"/><text x="8.6318%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="8.3388%" y="149" width="0.2339%" height="15" fill="rgb(243,216,15)" fg:x="4956" fg:w="139"/><text x="8.6318%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (538 instructions, 0.91%)</title><rect x="7.8105%" y="165" width="0.9052%" height="15" fill="rgb(239,180,5)" fg:x="4642" fg:w="538"/><text x="8.1034%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,024 instructions, 3.41%)</title><rect x="5.5592%" y="181" width="3.4055%" height="15" fill="rgb(244,137,25)" fg:x="3304" fg:w="2024"/><text x="5.8522%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.10%)</title><rect x="8.9647%" y="181" width="0.0976%" height="15" fill="rgb(243,107,21)" fg:x="5328" fg:w="58"/><text x="9.2577%" y="191.50"></text></g><g><title>binread::BinRead::read (5,062 instructions, 8.52%)</title><rect x="0.9103%" y="197" width="8.5172%" height="15" fill="rgb(224,64,1)" fg:x="541" fg:w="5062"/><text x="1.2032%" y="207.50">binread::B..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.4274%" y="181" width="0.0236%" height="15" fill="rgb(254,68,54)" fg:x="5603" fg:w="14"/><text x="9.7204%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.4510%" y="165" width="0.0236%" height="15" fill="rgb(250,71,0)" fg:x="5617" fg:w="14"/><text x="9.7439%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="9.4745%" y="165" width="0.0421%" height="15" fill="rgb(212,213,14)" fg:x="5631" fg:w="25"/><text x="9.7675%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="9.5166%" y="165" width="0.0320%" height="15" fill="rgb(234,164,44)" fg:x="5656" fg:w="19"/><text x="9.8096%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (210 instructions, 0.35%)</title><rect x="9.4510%" y="181" width="0.3533%" height="15" fill="rgb(241,171,39)" fg:x="5617" fg:w="210"/><text x="9.7439%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.8043%" y="101" width="0.0151%" height="15" fill="rgb(240,17,52)" fg:x="5827" fg:w="9"/><text x="10.0973%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.8195%" y="101" width="0.0151%" height="15" fill="rgb(217,46,16)" fg:x="5836" fg:w="9"/><text x="10.1124%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="9.8043%" y="117" width="0.2019%" height="15" fill="rgb(245,34,29)" fg:x="5827" fg:w="120"/><text x="10.0973%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="9.8043%" y="133" width="0.2187%" height="15" fill="rgb(208,227,13)" fg:x="5827" fg:w="130"/><text x="10.0973%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="9.8043%" y="149" width="0.2238%" height="15" fill="rgb(237,42,3)" fg:x="5827" fg:w="133"/><text x="10.0973%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="9.8043%" y="165" width="0.2339%" height="15" fill="rgb(205,200,30)" fg:x="5827" fg:w="139"/><text x="10.0973%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (220 instructions, 0.37%)</title><rect x="9.8043%" y="181" width="0.3702%" height="15" fill="rgb(241,140,18)" fg:x="5827" fg:w="220"/><text x="10.0973%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.1745%" y="85" width="0.0151%" height="15" fill="rgb(207,141,39)" fg:x="6047" fg:w="9"/><text x="10.4675%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.1896%" y="85" width="0.0151%" height="15" fill="rgb(247,66,49)" fg:x="6056" fg:w="9"/><text x="10.4826%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="10.1745%" y="101" width="0.2019%" height="15" fill="rgb(238,193,30)" fg:x="6047" fg:w="120"/><text x="10.4675%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="10.1745%" y="117" width="0.2187%" height="15" fill="rgb(236,167,37)" fg:x="6047" fg:w="130"/><text x="10.4675%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="10.1745%" y="133" width="0.2238%" height="15" fill="rgb(246,3,2)" fg:x="6047" fg:w="133"/><text x="10.4675%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="10.1745%" y="149" width="0.2339%" height="15" fill="rgb(229,203,24)" fg:x="6047" fg:w="139"/><text x="10.4675%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 instructions, 0.29%)</title><rect x="10.1745%" y="165" width="0.2877%" height="15" fill="rgb(236,17,40)" fg:x="6047" fg:w="171"/><text x="10.4675%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (241 instructions, 0.41%)</title><rect x="10.1745%" y="181" width="0.4055%" height="15" fill="rgb(239,182,47)" fg:x="6047" fg:w="241"/><text x="10.4675%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (912 instructions, 1.53%)</title><rect x="9.4274%" y="197" width="1.5345%" height="15" fill="rgb(226,91,41)" fg:x="5603" fg:w="912"/><text x="9.7204%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9619%" y="117" width="0.0151%" height="15" fill="rgb(211,115,42)" fg:x="6515" fg:w="9"/><text x="11.2549%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9771%" y="117" width="0.0151%" height="15" fill="rgb(240,199,2)" fg:x="6524" fg:w="9"/><text x="11.2700%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="10.9619%" y="133" width="0.2019%" height="15" fill="rgb(215,207,36)" fg:x="6515" fg:w="120"/><text x="11.2549%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="10.9619%" y="149" width="0.2187%" height="15" fill="rgb(212,76,14)" fg:x="6515" fg:w="130"/><text x="11.2549%" y="159.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="10.9619%" y="165" width="0.2238%" height="15" fill="rgb(211,56,51)" fg:x="6515" fg:w="133"/><text x="11.2549%" y="175.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="10.9619%" y="181" width="0.2339%" height="15" fill="rgb(220,156,34)" fg:x="6515" fg:w="139"/><text x="11.2549%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="11.2194%" y="133" width="0.0101%" height="15" fill="rgb(215,148,33)" fg:x="6668" fg:w="6"/><text x="11.5123%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="11.2295%" y="133" width="0.0269%" height="15" fill="rgb(214,114,19)" fg:x="6674" fg:w="16"/><text x="11.5224%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="11.1958%" y="149" width="0.1649%" height="15" fill="rgb(250,197,5)" fg:x="6654" fg:w="98"/><text x="11.4888%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="11.1958%" y="165" width="0.1683%" height="15" fill="rgb(252,182,16)" fg:x="6654" fg:w="100"/><text x="11.4888%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="11.1958%" y="181" width="0.1767%" height="15" fill="rgb(253,184,43)" fg:x="6654" fg:w="105"/><text x="11.4888%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (358 instructions, 0.60%)</title><rect x="10.9619%" y="197" width="0.6024%" height="15" fill="rgb(235,106,8)" fg:x="6515" fg:w="358"/><text x="11.2549%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.5643%" y="133" width="0.0151%" height="15" fill="rgb(217,10,8)" fg:x="6873" fg:w="9"/><text x="11.8573%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.5794%" y="133" width="0.0151%" height="15" fill="rgb(212,176,13)" fg:x="6882" fg:w="9"/><text x="11.8724%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="11.5643%" y="149" width="0.2019%" height="15" fill="rgb(214,162,24)" fg:x="6873" fg:w="120"/><text x="11.8573%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="11.5643%" y="165" width="0.2187%" height="15" fill="rgb(248,11,51)" fg:x="6873" fg:w="130"/><text x="11.8573%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.5643%" y="181" width="0.2238%" height="15" fill="rgb(228,52,38)" fg:x="6873" fg:w="133"/><text x="11.8573%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.7982%" y="133" width="0.0151%" height="15" fill="rgb(205,23,33)" fg:x="7012" fg:w="9"/><text x="12.0911%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.8133%" y="133" width="0.0151%" height="15" fill="rgb(221,47,4)" fg:x="7021" fg:w="9"/><text x="12.1063%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="11.7982%" y="149" width="0.2019%" height="15" fill="rgb(206,160,11)" fg:x="7012" fg:w="120"/><text x="12.0911%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="11.7982%" y="165" width="0.2187%" height="15" fill="rgb(218,184,26)" fg:x="7012" fg:w="130"/><text x="12.0911%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.7982%" y="181" width="0.2238%" height="15" fill="rgb(225,39,11)" fg:x="7012" fg:w="133"/><text x="12.0911%" y="191.50"></text></g><g><title>__rust_alloc (278 instructions, 0.47%)</title><rect x="11.5643%" y="197" width="0.4678%" height="15" fill="rgb(254,43,9)" fg:x="6873" fg:w="278"/><text x="11.8573%" y="207.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (15 instructions, 0.03%)</title><rect x="12.0320%" y="197" width="0.0252%" height="15" fill="rgb(233,172,40)" fg:x="7151" fg:w="15"/><text x="12.3250%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.0808%" y="149" width="0.0101%" height="15" fill="rgb(246,185,32)" fg:x="7180" fg:w="6"/><text x="12.3738%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.0909%" y="149" width="0.0269%" height="15" fill="rgb(228,71,31)" fg:x="7186" fg:w="16"/><text x="12.3839%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="12.0573%" y="165" width="0.1649%" height="15" fill="rgb(226,96,40)" fg:x="7166" fg:w="98"/><text x="12.3502%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="12.0573%" y="181" width="0.1683%" height="15" fill="rgb(231,152,2)" fg:x="7166" fg:w="100"/><text x="12.3502%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="12.0573%" y="197" width="0.1767%" height="15" fill="rgb(247,123,41)" fg:x="7166" fg:w="105"/><text x="12.3502%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.69%)</title><rect x="12.2339%" y="165" width="0.6949%" height="15" fill="rgb(215,28,12)" fg:x="7271" fg:w="413"/><text x="12.5269%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.70%)</title><rect x="12.2339%" y="181" width="0.7016%" height="15" fill="rgb(249,17,1)" fg:x="7271" fg:w="417"/><text x="12.5269%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.74%)</title><rect x="12.2339%" y="197" width="0.7353%" height="15" fill="rgb(219,86,10)" fg:x="7271" fg:w="437"/><text x="12.5269%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.62%)</title><rect x="12.9692%" y="181" width="0.6192%" height="15" fill="rgb(237,98,39)" fg:x="7708" fg:w="368"/><text x="13.2622%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.63%)</title><rect x="12.9692%" y="197" width="0.6259%" height="15" fill="rgb(251,88,32)" fg:x="7708" fg:w="372"/><text x="13.2622%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,884 instructions, 13.27%)</title><rect x="0.9103%" y="213" width="13.2654%" height="15" fill="rgb(246,80,37)" fg:x="541" fg:w="7884"/><text x="1.2032%" y="223.50">candid::de::IDLDe..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.64%)</title><rect x="14.1756%" y="197" width="0.6444%" height="15" fill="rgb(241,108,46)" fg:x="8425" fg:w="383"/><text x="14.4686%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.64%)</title><rect x="14.8268%" y="197" width="0.6444%" height="15" fill="rgb(249,204,53)" fg:x="8812" fg:w="383"/><text x="15.1197%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.30%)</title><rect x="14.1756%" y="213" width="1.3023%" height="15" fill="rgb(224,200,32)" fg:x="8425" fg:w="774"/><text x="14.4686%" y="223.50"></text></g><g><title>candid::types::internal::find_type (38 instructions, 0.06%)</title><rect x="15.4779%" y="181" width="0.0639%" height="15" fill="rgb(237,208,7)" fg:x="9199" fg:w="38"/><text x="15.7709%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="15.5419%" y="101" width="0.0151%" height="15" fill="rgb(226,102,35)" fg:x="9237" fg:w="9"/><text x="15.8348%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="15.5570%" y="101" width="0.0151%" height="15" fill="rgb(254,52,8)" fg:x="9246" fg:w="9"/><text x="15.8500%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="15.5419%" y="117" width="0.2019%" height="15" fill="rgb(225,224,14)" fg:x="9237" fg:w="120"/><text x="15.8348%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="15.5419%" y="133" width="0.2187%" height="15" fill="rgb(241,126,20)" fg:x="9237" fg:w="130"/><text x="15.8348%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="15.5419%" y="149" width="0.2238%" height="15" fill="rgb(238,50,17)" fg:x="9237" fg:w="133"/><text x="15.8348%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="15.5419%" y="165" width="0.2339%" height="15" fill="rgb(217,130,9)" fg:x="9237" fg:w="139"/><text x="15.8348%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (184 instructions, 0.31%)</title><rect x="15.5419%" y="181" width="0.3096%" height="15" fill="rgb(214,36,35)" fg:x="9237" fg:w="184"/><text x="15.8348%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="15.8515%" y="133" width="0.0909%" height="15" fill="rgb(218,183,38)" fg:x="9421" fg:w="54"/><text x="16.1444%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="15.9423%" y="133" width="0.1514%" height="15" fill="rgb(215,94,28)" fg:x="9475" fg:w="90"/><text x="16.2353%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.27%)</title><rect x="16.0938%" y="133" width="0.2743%" height="15" fill="rgb(205,72,47)" fg:x="9565" fg:w="163"/><text x="16.3867%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.94%)</title><rect x="15.8515%" y="149" width="0.9355%" height="15" fill="rgb(205,213,8)" fg:x="9421" fg:w="556"/><text x="16.1444%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.17%)</title><rect x="16.7870%" y="149" width="0.1666%" height="15" fill="rgb(238,75,9)" fg:x="9977" fg:w="99"/><text x="17.0799%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (760 instructions, 1.28%)</title><rect x="15.8515%" y="165" width="1.2788%" height="15" fill="rgb(210,93,6)" fg:x="9421" fg:w="760"/><text x="16.1444%" y="175.50"></text></g><g><title>candid::types::internal::env_add (813 instructions, 1.37%)</title><rect x="15.8515%" y="181" width="1.3679%" height="15" fill="rgb(214,13,34)" fg:x="9421" fg:w="813"/><text x="16.1444%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.2194%" y="101" width="0.0151%" height="15" fill="rgb(248,204,22)" fg:x="10234" fg:w="9"/><text x="17.5124%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.2345%" y="101" width="0.0151%" height="15" fill="rgb(247,14,31)" fg:x="10243" fg:w="9"/><text x="17.5275%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="17.2194%" y="117" width="0.2019%" height="15" fill="rgb(229,108,34)" fg:x="10234" fg:w="120"/><text x="17.5124%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="17.2194%" y="133" width="0.2187%" height="15" fill="rgb(254,42,13)" fg:x="10234" fg:w="130"/><text x="17.5124%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="17.2194%" y="149" width="0.2238%" height="15" fill="rgb(253,165,23)" fg:x="10234" fg:w="133"/><text x="17.5124%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="17.2194%" y="165" width="0.2339%" height="15" fill="rgb(220,182,38)" fg:x="10234" fg:w="139"/><text x="17.5124%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (151 instructions, 0.25%)</title><rect x="17.2194%" y="181" width="0.2541%" height="15" fill="rgb(236,75,27)" fg:x="10234" fg:w="151"/><text x="17.5124%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="17.4735%" y="133" width="0.0909%" height="15" fill="rgb(242,189,25)" fg:x="10385" fg:w="54"/><text x="17.7664%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="17.5643%" y="133" width="0.1514%" height="15" fill="rgb(248,126,50)" fg:x="10439" fg:w="90"/><text x="17.8573%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.27%)</title><rect x="17.7157%" y="133" width="0.2743%" height="15" fill="rgb(248,24,43)" fg:x="10529" fg:w="163"/><text x="18.0087%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.94%)</title><rect x="17.4735%" y="149" width="0.9355%" height="15" fill="rgb(252,52,49)" fg:x="10385" fg:w="556"/><text x="17.7664%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.12%)</title><rect x="18.4090%" y="133" width="0.1245%" height="15" fill="rgb(236,81,34)" fg:x="10941" fg:w="74"/><text x="18.7019%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.13%)</title><rect x="18.4090%" y="149" width="0.1312%" height="15" fill="rgb(233,97,42)" fg:x="10941" fg:w="78"/><text x="18.7019%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (743 instructions, 1.25%)</title><rect x="17.4735%" y="165" width="1.2501%" height="15" fill="rgb(243,182,9)" fg:x="10385" fg:w="743"/><text x="17.7664%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="18.7472%" y="101" width="0.0101%" height="15" fill="rgb(213,163,24)" fg:x="11142" fg:w="6"/><text x="19.0401%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="18.7573%" y="101" width="0.0269%" height="15" fill="rgb(245,99,22)" fg:x="11148" fg:w="16"/><text x="19.0502%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="18.7236%" y="117" width="0.1649%" height="15" fill="rgb(222,21,34)" fg:x="11128" fg:w="98"/><text x="19.0166%" y="127.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="18.7236%" y="133" width="0.1683%" height="15" fill="rgb(219,196,23)" fg:x="11128" fg:w="100"/><text x="19.0166%" y="143.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="18.7236%" y="149" width="0.1767%" height="15" fill="rgb(209,64,29)" fg:x="11128" fg:w="105"/><text x="19.0166%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.23%)</title><rect x="18.7236%" y="165" width="0.2305%" height="15" fill="rgb(240,145,31)" fg:x="11128" fg:w="137"/><text x="19.0166%" y="175.50"></text></g><g><title>candid::types::internal::env_add (937 instructions, 1.58%)</title><rect x="17.4735%" y="181" width="1.5766%" height="15" fill="rgb(237,212,46)" fg:x="10385" fg:w="937"/><text x="17.7664%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="19.0500%" y="133" width="0.0909%" height="15" fill="rgb(244,71,37)" fg:x="11322" fg:w="54"/><text x="19.3430%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="19.0500%" y="149" width="0.1329%" height="15" fill="rgb(231,150,21)" fg:x="11322" fg:w="79"/><text x="19.3430%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.51%)</title><rect x="19.0500%" y="165" width="0.5098%" height="15" fill="rgb(206,218,43)" fg:x="11322" fg:w="303"/><text x="19.3430%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (35 instructions, 0.06%)</title><rect x="19.5598%" y="165" width="0.0589%" height="15" fill="rgb(247,11,2)" fg:x="11625" fg:w="35"/><text x="19.8528%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.6187%" y="165" width="0.0185%" height="15" fill="rgb(242,1,19)" fg:x="11660" fg:w="11"/><text x="19.9117%" y="175.50"></text></g><g><title>candid::types::internal::env_id (506 instructions, 0.85%)</title><rect x="19.0500%" y="181" width="0.8514%" height="15" fill="rgb(240,90,15)" fg:x="11322" fg:w="506"/><text x="19.3430%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,737 instructions, 4.61%)</title><rect x="15.4779%" y="197" width="4.6052%" height="15" fill="rgb(207,24,47)" fg:x="9199" fg:w="2737"/><text x="15.7709%" y="207.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.06%)</title><rect x="20.0831%" y="197" width="0.0639%" height="15" fill="rgb(205,224,36)" fg:x="11936" fg:w="38"/><text x="20.3761%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="20.1706%" y="133" width="0.0101%" height="15" fill="rgb(241,92,24)" fg:x="11988" fg:w="6"/><text x="20.4636%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="20.1874%" y="133" width="0.0168%" height="15" fill="rgb(214,194,22)" fg:x="11998" fg:w="10"/><text x="20.4804%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.24%)</title><rect x="20.1471%" y="149" width="0.2372%" height="15" fill="rgb(246,110,33)" fg:x="11974" fg:w="141"/><text x="20.4400%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.24%)</title><rect x="20.1471%" y="165" width="0.2406%" height="15" fill="rgb(235,145,44)" fg:x="11974" fg:w="143"/><text x="20.4400%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.25%)</title><rect x="20.1471%" y="181" width="0.2490%" height="15" fill="rgb(218,202,26)" fg:x="11974" fg:w="148"/><text x="20.4400%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="20.4735%" y="133" width="0.0101%" height="15" fill="rgb(210,139,45)" fg:x="12168" fg:w="6"/><text x="20.7664%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="20.4903%" y="133" width="0.0168%" height="15" fill="rgb(243,29,9)" fg:x="12178" fg:w="10"/><text x="20.7833%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.24%)</title><rect x="20.4499%" y="149" width="0.2372%" height="15" fill="rgb(230,65,27)" fg:x="12154" fg:w="141"/><text x="20.7429%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.24%)</title><rect x="20.4499%" y="165" width="0.2406%" height="15" fill="rgb(232,223,44)" fg:x="12154" fg:w="143"/><text x="20.7429%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.25%)</title><rect x="20.4499%" y="181" width="0.2490%" height="15" fill="rgb(243,2,19)" fg:x="12154" fg:w="148"/><text x="20.7429%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.61%)</title><rect x="20.1471%" y="197" width="0.6057%" height="15" fill="rgb(253,90,46)" fg:x="11974" fg:w="360"/><text x="20.4400%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="20.7528%" y="181" width="0.0471%" height="15" fill="rgb(242,171,31)" fg:x="12334" fg:w="28"/><text x="21.0457%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (25 instructions, 0.04%)</title><rect x="20.7999%" y="181" width="0.0421%" height="15" fill="rgb(224,72,39)" fg:x="12362" fg:w="25"/><text x="21.0929%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (25 instructions, 0.04%)</title><rect x="20.8420%" y="181" width="0.0421%" height="15" fill="rgb(254,202,11)" fg:x="12387" fg:w="25"/><text x="21.1349%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (159 instructions, 0.27%)</title><rect x="20.7528%" y="197" width="0.2675%" height="15" fill="rgb(217,12,43)" fg:x="12334" fg:w="159"/><text x="21.0457%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.0203%" y="197" width="0.0185%" height="15" fill="rgb(233,227,25)" fg:x="12493" fg:w="11"/><text x="21.3133%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.0388%" y="197" width="0.0185%" height="15" fill="rgb(209,177,47)" fg:x="12504" fg:w="11"/><text x="21.3318%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.0573%" y="197" width="0.0185%" height="15" fill="rgb(227,185,33)" fg:x="12515" fg:w="11"/><text x="21.3503%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,495 instructions, 5.88%)</title><rect x="15.4779%" y="213" width="5.8806%" height="15" fill="rgb(207,160,29)" fg:x="9199" fg:w="3495"/><text x="15.7709%" y="223.50">candid..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.69%)</title><rect x="21.3585%" y="197" width="0.6949%" height="15" fill="rgb(222,207,33)" fg:x="12694" fg:w="413"/><text x="21.6515%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.70%)</title><rect x="21.3585%" y="213" width="0.7016%" height="15" fill="rgb(253,43,22)" fg:x="12694" fg:w="417"/><text x="21.6515%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="22.0601%" y="197" width="0.0320%" height="15" fill="rgb(210,84,47)" fg:x="13111" fg:w="19"/><text x="22.3531%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.1291%" y="149" width="0.0101%" height="15" fill="rgb(229,188,37)" fg:x="13152" fg:w="6"/><text x="22.4221%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.1459%" y="149" width="0.0168%" height="15" fill="rgb(248,165,25)" fg:x="13162" fg:w="10"/><text x="22.4389%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.32%)</title><rect x="22.0921%" y="165" width="0.3247%" height="15" fill="rgb(235,13,15)" fg:x="13130" fg:w="193"/><text x="22.3851%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.33%)</title><rect x="22.0921%" y="181" width="0.3281%" height="15" fill="rgb(224,48,27)" fg:x="13130" fg:w="195"/><text x="22.3851%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.34%)</title><rect x="22.0921%" y="197" width="0.3365%" height="15" fill="rgb(207,183,15)" fg:x="13130" fg:w="200"/><text x="22.3851%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.4656%" y="133" width="0.0101%" height="15" fill="rgb(223,15,11)" fg:x="13352" fg:w="6"/><text x="22.7586%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.4825%" y="133" width="0.0168%" height="15" fill="rgb(229,103,14)" fg:x="13362" fg:w="10"/><text x="22.7754%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="22.4993%" y="133" width="0.1245%" height="15" fill="rgb(213,112,0)" fg:x="13372" fg:w="74"/><text x="22.7923%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.41%)</title><rect x="22.4286%" y="149" width="0.4089%" height="15" fill="rgb(241,112,53)" fg:x="13330" fg:w="243"/><text x="22.7216%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.41%)</title><rect x="22.4286%" y="165" width="0.4122%" height="15" fill="rgb(227,146,31)" fg:x="13330" fg:w="245"/><text x="22.7216%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.42%)</title><rect x="22.4286%" y="181" width="0.4206%" height="15" fill="rgb(211,223,13)" fg:x="13330" fg:w="250"/><text x="22.7216%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.47%)</title><rect x="22.4286%" y="197" width="0.4745%" height="15" fill="rgb(234,52,51)" fg:x="13330" fg:w="282"/><text x="22.7216%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.9031%" y="197" width="0.0185%" height="15" fill="rgb(238,93,5)" fg:x="13612" fg:w="11"/><text x="23.1961%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (614 instructions, 1.03%)</title><rect x="22.0601%" y="213" width="1.0331%" height="15" fill="rgb(217,29,29)" fg:x="13111" fg:w="614"/><text x="22.3531%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,287 instructions, 22.36%)</title><rect x="0.9103%" y="229" width="22.3563%" height="15" fill="rgb(252,132,5)" fg:x="541" fg:w="13287"/><text x="1.2032%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.2901%" y="181" width="0.0101%" height="15" fill="rgb(218,5,39)" fg:x="13842" fg:w="6"/><text x="23.5831%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="23.3069%" y="181" width="0.0942%" height="15" fill="rgb(221,186,13)" fg:x="13852" fg:w="56"/><text x="23.5999%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.4011%" y="181" width="0.0168%" height="15" fill="rgb(230,114,20)" fg:x="13908" fg:w="10"/><text x="23.6941%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="23.4180%" y="181" width="0.1245%" height="15" fill="rgb(239,140,13)" fg:x="13918" fg:w="74"/><text x="23.7109%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.38%)</title><rect x="23.2665%" y="197" width="0.3836%" height="15" fill="rgb(252,208,10)" fg:x="13828" fg:w="228"/><text x="23.5595%" y="207.50"></text></g><g><title>__rdl_dealloc (230 instructions, 0.39%)</title><rect x="23.2665%" y="213" width="0.3870%" height="15" fill="rgb(205,99,29)" fg:x="13828" fg:w="230"/><text x="23.5595%" y="223.50"></text></g><g><title>__rust_dealloc (235 instructions, 0.40%)</title><rect x="23.2665%" y="229" width="0.3954%" height="15" fill="rgb(208,200,7)" fg:x="13828" fg:w="235"/><text x="23.5595%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,760 instructions, 23.15%)</title><rect x="0.5788%" y="245" width="23.1521%" height="15" fill="rgb(215,229,32)" fg:x="344" fg:w="13760"/><text x="0.8718%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (15 instructions, 0.03%)</title><rect x="23.7309%" y="229" width="0.0252%" height="15" fill="rgb(246,120,10)" fg:x="14104" fg:w="15"/><text x="24.0239%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (43,565 instructions, 73.30%)</title><rect x="23.7309%" y="245" width="73.3010%" height="15" fill="rgb(251,223,22)" fg:x="14104" fg:w="43565"/><text x="24.0239%" y="255.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="97.0690%" y="133" width="0.0942%" height="15" fill="rgb(254,23,3)" fg:x="57691" fg:w="56"/><text x="97.3619%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="97.1632%" y="133" width="0.0101%" height="15" fill="rgb(244,160,34)" fg:x="57747" fg:w="6"/><text x="97.4562%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (157 instructions, 0.26%)</title><rect x="97.0320%" y="149" width="0.2642%" height="15" fill="rgb(240,36,29)" fg:x="57669" fg:w="157"/><text x="97.3249%" y="159.50"></text></g><g><title>__rdl_dealloc (159 instructions, 0.27%)</title><rect x="97.0320%" y="165" width="0.2675%" height="15" fill="rgb(253,98,17)" fg:x="57669" fg:w="159"/><text x="97.3249%" y="175.50"></text></g><g><title>__rust_dealloc (164 instructions, 0.28%)</title><rect x="97.0320%" y="181" width="0.2759%" height="15" fill="rgb(252,208,13)" fg:x="57669" fg:w="164"/><text x="97.3249%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (196 instructions, 0.33%)</title><rect x="97.0320%" y="197" width="0.3298%" height="15" fill="rgb(252,210,11)" fg:x="57669" fg:w="196"/><text x="97.3249%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.23%)</title><rect x="97.3617%" y="181" width="0.2271%" height="15" fill="rgb(213,102,11)" fg:x="57865" fg:w="135"/><text x="97.6547%" y="191.50"></text></g><g><title>memset (139 instructions, 0.23%)</title><rect x="97.3617%" y="197" width="0.2339%" height="15" fill="rgb(225,88,27)" fg:x="57865" fg:w="139"/><text x="97.6547%" y="207.50"></text></g><g><title>candid::types::internal::env_clear (437 instructions, 0.74%)</title><rect x="97.0320%" y="213" width="0.7353%" height="15" fill="rgb(213,30,21)" fg:x="57669" fg:w="437"/><text x="97.3249%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (501 instructions, 0.84%)</title><rect x="97.0320%" y="229" width="0.8430%" height="15" fill="rgb(208,135,32)" fg:x="57669" fg:w="501"/><text x="97.3249%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="97.8800%" y="197" width="0.0555%" height="15" fill="rgb(239,114,46)" fg:x="58173" fg:w="33"/><text x="98.1729%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.15%)</title><rect x="97.8800%" y="213" width="0.1481%" height="15" fill="rgb(209,154,39)" fg:x="58173" fg:w="88"/><text x="98.1729%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="98.0280%" y="101" width="0.0151%" height="15" fill="rgb(217,33,26)" fg:x="58261" fg:w="9"/><text x="98.3210%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="98.0432%" y="101" width="0.0151%" height="15" fill="rgb(243,209,7)" fg:x="58270" fg:w="9"/><text x="98.3361%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="98.0280%" y="117" width="0.2019%" height="15" fill="rgb(212,125,18)" fg:x="58261" fg:w="120"/><text x="98.3210%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="98.0280%" y="133" width="0.2187%" height="15" fill="rgb(217,140,38)" fg:x="58261" fg:w="130"/><text x="98.3210%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="98.0280%" y="149" width="0.2238%" height="15" fill="rgb(247,131,50)" fg:x="58261" fg:w="133"/><text x="98.3210%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="98.0280%" y="165" width="0.2339%" height="15" fill="rgb(211,142,47)" fg:x="58261" fg:w="139"/><text x="98.3210%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 instructions, 0.29%)</title><rect x="98.0280%" y="181" width="0.2877%" height="15" fill="rgb(215,28,7)" fg:x="58261" fg:w="171"/><text x="98.3210%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (238 instructions, 0.40%)</title><rect x="98.0280%" y="197" width="0.4005%" height="15" fill="rgb(238,108,30)" fg:x="58261" fg:w="238"/><text x="98.3210%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="98.4285%" y="197" width="0.0168%" height="15" fill="rgb(241,6,25)" fg:x="58499" fg:w="10"/><text x="98.7215%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4453%" y="181" width="0.0185%" height="15" fill="rgb(246,167,20)" fg:x="58509" fg:w="11"/><text x="98.7383%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4705%" y="181" width="0.0185%" height="15" fill="rgb(250,209,35)" fg:x="58524" fg:w="11"/><text x="98.7635%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="98.4453%" y="197" width="0.0505%" height="15" fill="rgb(214,195,19)" fg:x="58509" fg:w="30"/><text x="98.7383%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (480 instructions, 0.81%)</title><rect x="98.0280%" y="213" width="0.8076%" height="15" fill="rgb(239,73,24)" fg:x="58261" fg:w="480"/><text x="98.3210%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="98.8357%" y="213" width="0.0101%" height="15" fill="rgb(230,9,17)" fg:x="58741" fg:w="6"/><text x="99.1286%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.05%)</title><rect x="98.8458%" y="197" width="0.0522%" height="15" fill="rgb(225,19,10)" fg:x="58747" fg:w="31"/><text x="99.1387%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.14%)</title><rect x="98.8458%" y="213" width="0.1447%" height="15" fill="rgb(246,120,54)" fg:x="58747" fg:w="86"/><text x="99.1387%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="98.9905%" y="213" width="0.0101%" height="15" fill="rgb(245,114,27)" fg:x="58833" fg:w="6"/><text x="99.2834%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="99.0006%" y="213" width="0.0252%" height="15" fill="rgb(221,39,11)" fg:x="58839" fg:w="15"/><text x="99.2935%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (760 instructions, 1.28%)</title><rect x="97.8800%" y="229" width="1.2788%" height="15" fill="rgb(216,228,41)" fg:x="58173" fg:w="760"/><text x="98.1729%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.1907%" y="181" width="0.0101%" height="15" fill="rgb(228,76,30)" fg:x="58952" fg:w="6"/><text x="99.4837%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="99.1671%" y="197" width="0.1144%" height="15" fill="rgb(249,65,27)" fg:x="58938" fg:w="68"/><text x="99.4601%" y="207.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="99.1671%" y="213" width="0.1178%" height="15" fill="rgb(249,225,32)" fg:x="58938" fg:w="70"/><text x="99.4601%" y="223.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="99.1671%" y="229" width="0.1262%" height="15" fill="rgb(205,5,39)" fg:x="58938" fg:w="75"/><text x="99.4601%" y="239.50"></text></g><g><title>candid::utils::write_args (1,420 instructions, 2.39%)</title><rect x="97.0320%" y="245" width="2.3892%" height="15" fill="rgb(235,226,24)" fg:x="57669" fg:w="1420"/><text x="97.3249%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.4448%" y="197" width="0.0101%" height="15" fill="rgb(248,222,40)" fg:x="59103" fg:w="6"/><text x="99.7377%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.4548%" y="197" width="0.0269%" height="15" fill="rgb(240,120,54)" fg:x="59109" fg:w="16"/><text x="99.7478%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.4212%" y="213" width="0.1649%" height="15" fill="rgb(254,29,40)" fg:x="59089" fg:w="98"/><text x="99.7142%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="99.4212%" y="229" width="0.1683%" height="15" fill="rgb(246,225,15)" fg:x="59089" fg:w="100"/><text x="99.7142%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.6349%" y="197" width="0.0101%" height="15" fill="rgb(207,161,19)" fg:x="59216" fg:w="6"/><text x="99.9279%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.6450%" y="197" width="0.0269%" height="15" fill="rgb(226,142,17)" fg:x="59222" fg:w="16"/><text x="99.9379%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (150 instructions, 0.25%)</title><rect x="99.5979%" y="213" width="0.2524%" height="15" fill="rgb(222,14,39)" fg:x="59194" fg:w="150"/><text x="99.8908%" y="223.50"></text></g><g><title>__rdl_dealloc (152 instructions, 0.26%)</title><rect x="99.5979%" y="229" width="0.2558%" height="15" fill="rgb(243,107,11)" fg:x="59194" fg:w="152"/><text x="99.8908%" y="239.50"></text></g><g><title>__rust_dealloc (262 instructions, 0.44%)</title><rect x="99.4212%" y="245" width="0.4408%" height="15" fill="rgb(216,150,23)" fg:x="59089" fg:w="262"/><text x="99.7142%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (59,422 instructions, 99.98%)</title><rect x="0.0135%" y="261" width="99.9815%" height="15" fill="rgb(207,189,4)" fg:x="8" fg:w="59422"/><text x="0.3064%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (59,433 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,47,38)" fg:x="0" fg:w="59433"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_get (59,433 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(248,201,11)" fg:x="0" fg:w="59433"/><text x="0.2930%" y="287.50">canister_update batch_get</text></g></svg></svg>