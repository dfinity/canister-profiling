<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="57817"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0329%" height="15" fill="rgb(212,164,20)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.20%)</title><rect x="0.0329%" y="197" width="0.2041%" height="15" fill="rgb(215,171,31)" fg:x="19" fg:w="118"/><text x="0.3258%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.13%)</title><rect x="0.2370%" y="197" width="0.1263%" height="15" fill="rgb(211,24,25)" fg:x="137" fg:w="73"/><text x="0.5299%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="0.3632%" y="165" width="0.1418%" height="15" fill="rgb(235,78,39)" fg:x="210" fg:w="82"/><text x="0.6562%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="0.5050%" y="149" width="0.1228%" height="15" fill="rgb(217,113,40)" fg:x="292" fg:w="71"/><text x="0.7980%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.69%)</title><rect x="0.6278%" y="149" width="0.6918%" height="15" fill="rgb(208,6,43)" fg:x="363" fg:w="400"/><text x="0.9208%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.15%)</title><rect x="1.3197%" y="149" width="0.1470%" height="15" fill="rgb(246,56,52)" fg:x="763" fg:w="85"/><text x="1.6126%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.4667%" y="149" width="0.0934%" height="15" fill="rgb(246,145,42)" fg:x="848" fg:w="54"/><text x="1.7597%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.5601%" y="149" width="0.0934%" height="15" fill="rgb(230,5,29)" fg:x="902" fg:w="54"/><text x="1.8531%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6535%" y="149" width="0.0934%" height="15" fill="rgb(224,62,18)" fg:x="956" fg:w="54"/><text x="1.9465%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.7469%" y="149" width="0.0934%" height="15" fill="rgb(232,134,40)" fg:x="1010" fg:w="54"/><text x="2.0399%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="1.8403%" y="149" width="0.1228%" height="15" fill="rgb(246,14,11)" fg:x="1064" fg:w="71"/><text x="2.1333%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="1.9631%" y="149" width="0.1124%" height="15" fill="rgb(233,211,16)" fg:x="1135" fg:w="65"/><text x="2.2561%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.69%)</title><rect x="2.0755%" y="149" width="0.6918%" height="15" fill="rgb(215,16,26)" fg:x="1200" fg:w="400"/><text x="2.3685%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.7674%" y="149" width="0.0277%" height="15" fill="rgb(252,25,38)" fg:x="1600" fg:w="16"/><text x="3.0603%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="2.7950%" y="133" width="0.1418%" height="15" fill="rgb(244,80,25)" fg:x="1616" fg:w="82"/><text x="3.0880%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="2.9369%" y="101" width="0.1038%" height="15" fill="rgb(251,143,11)" fg:x="1698" fg:w="60"/><text x="3.2298%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.15%)</title><rect x="2.9369%" y="117" width="0.1470%" height="15" fill="rgb(223,11,45)" fg:x="1698" fg:w="85"/><text x="3.2298%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.0839%" y="69" width="0.0156%" height="15" fill="rgb(237,63,15)" fg:x="1783" fg:w="9"/><text x="3.3768%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="3.0994%" y="53" width="0.0519%" height="15" fill="rgb(226,11,43)" fg:x="1792" fg:w="30"/><text x="3.3924%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.0994%" y="69" width="0.0951%" height="15" fill="rgb(236,127,5)" fg:x="1792" fg:w="55"/><text x="3.3924%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.20%)</title><rect x="3.0839%" y="85" width="0.2041%" height="15" fill="rgb(211,225,3)" fg:x="1783" fg:w="118"/><text x="3.3768%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.30%)</title><rect x="3.0839%" y="101" width="0.2958%" height="15" fill="rgb(215,41,47)" fg:x="1783" fg:w="171"/><text x="3.3768%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.30%)</title><rect x="3.0839%" y="117" width="0.3044%" height="15" fill="rgb(230,93,19)" fg:x="1783" fg:w="176"/><text x="3.3768%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.64%)</title><rect x="2.9369%" y="133" width="0.6434%" height="15" fill="rgb(205,228,8)" fg:x="1698" fg:w="372"/><text x="3.2298%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 1.04%)</title><rect x="2.7950%" y="149" width="1.0378%" height="15" fill="rgb(236,13,30)" fg:x="1616" fg:w="600"/><text x="3.0880%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.15%)</title><rect x="3.8328%" y="149" width="0.1470%" height="15" fill="rgb(248,72,14)" fg:x="2216" fg:w="85"/><text x="4.1258%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.10%)</title><rect x="3.9798%" y="149" width="0.0986%" height="15" fill="rgb(248,70,35)" fg:x="2301" fg:w="57"/><text x="4.2728%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="4.0784%" y="149" width="0.1142%" height="15" fill="rgb(221,201,45)" fg:x="2358" fg:w="66"/><text x="4.3714%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="4.1925%" y="149" width="0.1124%" height="15" fill="rgb(247,37,7)" fg:x="2424" fg:w="65"/><text x="4.4855%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.69%)</title><rect x="4.3050%" y="133" width="0.6918%" height="15" fill="rgb(212,78,24)" fg:x="2489" fg:w="400"/><text x="4.5979%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="4.9968%" y="133" width="0.0277%" height="15" fill="rgb(243,189,21)" fg:x="2889" fg:w="16"/><text x="5.2898%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="5.0245%" y="117" width="0.1418%" height="15" fill="rgb(250,1,53)" fg:x="2905" fg:w="82"/><text x="5.3174%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="5.1663%" y="85" width="0.1038%" height="15" fill="rgb(224,161,13)" fg:x="2987" fg:w="60"/><text x="5.4593%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.15%)</title><rect x="5.1663%" y="101" width="0.1470%" height="15" fill="rgb(236,119,42)" fg:x="2987" fg:w="85"/><text x="5.4593%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.3133%" y="53" width="0.0156%" height="15" fill="rgb(237,216,7)" fg:x="3072" fg:w="9"/><text x="5.6063%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.3289%" y="37" width="0.0519%" height="15" fill="rgb(239,87,52)" fg:x="3081" fg:w="30"/><text x="5.6219%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.3289%" y="53" width="0.0951%" height="15" fill="rgb(213,48,34)" fg:x="3081" fg:w="55"/><text x="5.6219%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.20%)</title><rect x="5.3133%" y="69" width="0.2041%" height="15" fill="rgb(231,15,12)" fg:x="3072" fg:w="118"/><text x="5.6063%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.30%)</title><rect x="5.3133%" y="85" width="0.2958%" height="15" fill="rgb(236,184,23)" fg:x="3072" fg:w="171"/><text x="5.6063%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.30%)</title><rect x="5.3133%" y="101" width="0.3044%" height="15" fill="rgb(216,168,32)" fg:x="3072" fg:w="176"/><text x="5.6063%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.64%)</title><rect x="5.1663%" y="117" width="0.6434%" height="15" fill="rgb(230,5,37)" fg:x="2987" fg:w="372"/><text x="5.4593%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (600 instructions, 1.04%)</title><rect x="5.0245%" y="133" width="1.0378%" height="15" fill="rgb(219,8,26)" fg:x="2905" fg:w="600"/><text x="5.3174%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.15%)</title><rect x="6.0622%" y="133" width="0.1470%" height="15" fill="rgb(252,53,11)" fg:x="3505" fg:w="85"/><text x="6.3552%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.10%)</title><rect x="6.2092%" y="133" width="0.0986%" height="15" fill="rgb(253,6,48)" fg:x="3590" fg:w="57"/><text x="6.5022%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="6.3078%" y="117" width="0.1228%" height="15" fill="rgb(241,160,15)" fg:x="3647" fg:w="71"/><text x="6.6008%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.16%)</title><rect x="6.4306%" y="117" width="0.1574%" height="15" fill="rgb(234,22,23)" fg:x="3718" fg:w="91"/><text x="6.7236%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="6.5880%" y="117" width="0.1142%" height="15" fill="rgb(249,23,54)" fg:x="3809" fg:w="66"/><text x="6.8810%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.50%)</title><rect x="6.3078%" y="133" width="0.4964%" height="15" fill="rgb(236,9,0)" fg:x="3647" fg:w="287"/><text x="6.6008%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="6.8042%" y="133" width="0.1418%" height="15" fill="rgb(249,139,47)" fg:x="3934" fg:w="82"/><text x="7.0972%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,728 instructions, 2.99%)</title><rect x="4.3050%" y="149" width="2.9887%" height="15" fill="rgb(219,56,4)" fg:x="2489" fg:w="1728"/><text x="4.5979%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="7.2937%" y="149" width="0.1142%" height="15" fill="rgb(248,156,11)" fg:x="4217" fg:w="66"/><text x="7.5867%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.4079%" y="149" width="0.0225%" height="15" fill="rgb(205,9,50)" fg:x="4283" fg:w="13"/><text x="7.7008%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.4303%" y="149" width="0.0225%" height="15" fill="rgb(216,103,30)" fg:x="4296" fg:w="13"/><text x="7.7233%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.4528%" y="149" width="0.0121%" height="15" fill="rgb(233,201,49)" fg:x="4309" fg:w="7"/><text x="7.7458%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.4649%" y="149" width="0.0259%" height="15" fill="rgb(244,147,54)" fg:x="4316" fg:w="15"/><text x="7.7579%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="7.4909%" y="133" width="0.1418%" height="15" fill="rgb(240,197,0)" fg:x="4331" fg:w="82"/><text x="7.7838%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.29%)</title><rect x="7.4909%" y="149" width="0.2854%" height="15" fill="rgb(225,58,14)" fg:x="4331" fg:w="165"/><text x="7.7838%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="7.7763%" y="117" width="0.1418%" height="15" fill="rgb(240,26,15)" fg:x="4496" fg:w="82"/><text x="8.0692%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.20%)</title><rect x="7.7763%" y="133" width="0.2024%" height="15" fill="rgb(206,165,34)" fg:x="4496" fg:w="117"/><text x="8.0692%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (185 instructions, 0.32%)</title><rect x="7.7763%" y="149" width="0.3200%" height="15" fill="rgb(249,191,25)" fg:x="4496" fg:w="185"/><text x="8.0692%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="8.0962%" y="149" width="0.1418%" height="15" fill="rgb(207,16,25)" fg:x="4681" fg:w="82"/><text x="8.3892%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="8.2381%" y="149" width="0.1401%" height="15" fill="rgb(248,62,53)" fg:x="4763" fg:w="81"/><text x="8.5310%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="8.3782%" y="149" width="0.1418%" height="15" fill="rgb(228,184,34)" fg:x="4844" fg:w="82"/><text x="8.6711%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="8.5200%" y="149" width="0.1418%" height="15" fill="rgb(236,207,3)" fg:x="4926" fg:w="82"/><text x="8.8130%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="8.6653%" y="149" width="0.1401%" height="15" fill="rgb(211,164,7)" fg:x="5010" fg:w="81"/><text x="8.9582%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.66%)</title><rect x="8.8054%" y="149" width="0.6590%" height="15" fill="rgb(245,96,31)" fg:x="5091" fg:w="381"/><text x="9.0983%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.66%)</title><rect x="9.4643%" y="149" width="0.6590%" height="15" fill="rgb(206,225,42)" fg:x="5472" fg:w="381"/><text x="9.7573%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,476 instructions, 11.20%)</title><rect x="0.5050%" y="165" width="11.2009%" height="15" fill="rgb(224,55,48)" fg:x="292" fg:w="6476"/><text x="0.7980%" y="175.50">candid::de::ID..</text></g><g><title>memcpy (336 instructions, 0.58%)</title><rect x="11.7059%" y="165" width="0.5811%" height="15" fill="rgb(221,143,16)" fg:x="6768" fg:w="336"/><text x="11.9989%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="12.2870%" y="149" width="0.0675%" height="15" fill="rgb(205,62,48)" fg:x="7104" fg:w="39"/><text x="12.5800%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="12.3545%" y="149" width="0.1418%" height="15" fill="rgb(210,191,8)" fg:x="7143" fg:w="82"/><text x="12.6475%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="12.5050%" y="117" width="0.0917%" height="15" fill="rgb(252,128,31)" fg:x="7230" fg:w="53"/><text x="12.7979%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="12.5966%" y="117" width="0.1539%" height="15" fill="rgb(251,74,19)" fg:x="7283" fg:w="89"/><text x="12.8896%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.28%)</title><rect x="12.7506%" y="117" width="0.2785%" height="15" fill="rgb(234,225,24)" fg:x="7372" fg:w="161"/><text x="13.0435%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.93%)</title><rect x="12.5050%" y="133" width="0.9340%" height="15" fill="rgb(211,192,53)" fg:x="7230" fg:w="540"/><text x="12.7979%" y="143.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.31%)</title><rect x="12.4963%" y="149" width="1.3058%" height="15" fill="rgb(223,101,54)" fg:x="7225" fg:w="755"/><text x="12.7893%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="13.8022%" y="149" width="0.1418%" height="15" fill="rgb(215,52,51)" fg:x="7980" fg:w="82"/><text x="14.0951%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="13.9526%" y="117" width="0.0917%" height="15" fill="rgb(226,162,52)" fg:x="8067" fg:w="53"/><text x="14.2456%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="14.0443%" y="117" width="0.1539%" height="15" fill="rgb(221,132,3)" fg:x="8120" fg:w="89"/><text x="14.3373%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.28%)</title><rect x="14.1982%" y="117" width="0.2785%" height="15" fill="rgb(253,33,48)" fg:x="8209" fg:w="161"/><text x="14.4912%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.93%)</title><rect x="13.9526%" y="133" width="0.9340%" height="15" fill="rgb(219,173,5)" fg:x="8067" fg:w="540"/><text x="14.2456%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.12%)</title><rect x="14.8866%" y="133" width="0.1176%" height="15" fill="rgb(210,36,2)" fg:x="8607" fg:w="68"/><text x="15.1796%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="15.0042%" y="117" width="0.1401%" height="15" fill="rgb(239,18,50)" fg:x="8675" fg:w="81"/><text x="15.2972%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.19%)</title><rect x="15.0042%" y="133" width="0.1868%" height="15" fill="rgb(220,145,18)" fg:x="8675" fg:w="108"/><text x="15.2972%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.54%)</title><rect x="13.9440%" y="149" width="1.5376%" height="15" fill="rgb(229,227,49)" fg:x="8062" fg:w="889"/><text x="14.2370%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="15.4816%" y="101" width="0.0917%" height="15" fill="rgb(235,21,9)" fg:x="8951" fg:w="53"/><text x="15.7746%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.14%)</title><rect x="15.4816%" y="117" width="0.1366%" height="15" fill="rgb(223,141,39)" fg:x="8951" fg:w="79"/><text x="15.7746%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.51%)</title><rect x="15.4816%" y="133" width="0.5050%" height="15" fill="rgb(235,59,37)" fg:x="8951" fg:w="292"/><text x="15.7746%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.369 (15 instructions, 0.03%)</title><rect x="15.9866%" y="133" width="0.0259%" height="15" fill="rgb(206,65,7)" fg:x="9243" fg:w="15"/><text x="16.2796%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.0126%" y="133" width="0.0190%" height="15" fill="rgb(220,204,14)" fg:x="9258" fg:w="11"/><text x="16.3056%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.83%)</title><rect x="15.4816%" y="149" width="0.8267%" height="15" fill="rgb(222,31,27)" fg:x="8951" fg:w="478"/><text x="15.7746%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,432 instructions, 4.21%)</title><rect x="12.2870%" y="165" width="4.2064%" height="15" fill="rgb(224,123,12)" fg:x="7104" fg:w="2432"/><text x="12.5800%" y="175.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.06%)</title><rect x="16.4934%" y="149" width="0.0571%" height="15" fill="rgb(254,146,11)" fg:x="9536" fg:w="33"/><text x="16.7864%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.21%)</title><rect x="16.5505%" y="133" width="0.2127%" height="15" fill="rgb(244,219,2)" fg:x="9569" fg:w="123"/><text x="16.8435%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.21%)</title><rect x="16.8099%" y="133" width="0.2127%" height="15" fill="rgb(205,166,4)" fg:x="9719" fg:w="123"/><text x="17.1029%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.52%)</title><rect x="16.5505%" y="149" width="0.5189%" height="15" fill="rgb(246,15,21)" fg:x="9569" fg:w="300"/><text x="16.8435%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="17.0694%" y="133" width="0.0484%" height="15" fill="rgb(246,1,53)" fg:x="9869" fg:w="28"/><text x="17.3623%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="17.1178%" y="133" width="0.0259%" height="15" fill="rgb(208,36,27)" fg:x="9897" fg:w="15"/><text x="17.4108%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.03%)</title><rect x="17.1437%" y="133" width="0.0259%" height="15" fill="rgb(238,175,45)" fg:x="9912" fg:w="15"/><text x="17.4367%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.23%)</title><rect x="17.0694%" y="149" width="0.2300%" height="15" fill="rgb(224,24,19)" fg:x="9869" fg:w="133"/><text x="17.3623%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.2994%" y="149" width="0.0190%" height="15" fill="rgb(232,137,10)" fg:x="10002" fg:w="11"/><text x="17.5924%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3184%" y="149" width="0.0190%" height="15" fill="rgb(254,43,11)" fg:x="10013" fg:w="11"/><text x="17.6114%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.3375%" y="149" width="0.0190%" height="15" fill="rgb(240,77,12)" fg:x="10024" fg:w="11"/><text x="17.6304%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 1.15%)</title><rect x="16.4934%" y="165" width="1.1502%" height="15" fill="rgb(236,190,14)" fg:x="9536" fg:w="665"/><text x="16.7864%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.71%)</title><rect x="17.6436%" y="165" width="0.7109%" height="15" fill="rgb(250,93,10)" fg:x="10201" fg:w="411"/><text x="17.9366%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="18.3545%" y="133" width="0.0208%" height="15" fill="rgb(214,1,32)" fg:x="10612" fg:w="12"/><text x="18.6474%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.29%)</title><rect x="18.3752%" y="133" width="0.2906%" height="15" fill="rgb(240,67,37)" fg:x="10624" fg:w="168"/><text x="18.6682%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.11%)</title><rect x="18.6658%" y="101" width="0.1090%" height="15" fill="rgb(218,226,6)" fg:x="10792" fg:w="63"/><text x="18.9588%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.36%)</title><rect x="18.6658%" y="117" width="0.3615%" height="15" fill="rgb(230,165,46)" fg:x="10792" fg:w="209"/><text x="18.9588%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.41%)</title><rect x="18.6658%" y="133" width="0.4082%" height="15" fill="rgb(225,184,33)" fg:x="10792" fg:w="236"/><text x="18.9588%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.0740%" y="133" width="0.0190%" height="15" fill="rgb(214,37,13)" fg:x="11028" fg:w="11"/><text x="19.3669%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 0.81%)</title><rect x="18.3545%" y="149" width="0.8112%" height="15" fill="rgb(229,76,13)" fg:x="10612" fg:w="469"/><text x="18.6474%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 0.87%)</title><rect x="18.3545%" y="165" width="0.8700%" height="15" fill="rgb(215,188,51)" fg:x="10612" fg:w="503"/><text x="18.6474%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="19.2244%" y="149" width="0.0951%" height="15" fill="rgb(235,152,53)" fg:x="11115" fg:w="55"/><text x="19.5174%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.11%)</title><rect x="19.3196%" y="149" width="0.1090%" height="15" fill="rgb(217,11,33)" fg:x="11170" fg:w="63"/><text x="19.6125%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 0.35%)</title><rect x="19.2244%" y="165" width="0.3459%" height="15" fill="rgb(229,35,23)" fg:x="11115" fg:w="200"/><text x="19.5174%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,262 instructions, 19.48%)</title><rect x="0.3632%" y="181" width="19.4787%" height="15" fill="rgb(236,169,22)" fg:x="210" fg:w="11262"/><text x="0.6562%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (9 instructions, 0.02%)</title><rect x="19.8419%" y="181" width="0.0156%" height="15" fill="rgb(237,147,24)" fg:x="11472" fg:w="9"/><text x="20.1349%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="19.8661%" y="117" width="0.0951%" height="15" fill="rgb(221,107,38)" fg:x="11486" fg:w="55"/><text x="20.1591%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.24%)</title><rect x="19.8661%" y="133" width="0.2387%" height="15" fill="rgb(234,34,38)" fg:x="11486" fg:w="138"/><text x="20.1591%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.29%)</title><rect x="19.8661%" y="149" width="0.2854%" height="15" fill="rgb(244,9,7)" fg:x="11486" fg:w="165"/><text x="20.1591%" y="159.50"></text></g><g><title>memset (136 instructions, 0.24%)</title><rect x="20.1515%" y="149" width="0.2352%" height="15" fill="rgb(217,37,29)" fg:x="11651" fg:w="136"/><text x="20.4445%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (465 instructions, 0.80%)</title><rect x="19.8575%" y="165" width="0.8043%" height="15" fill="rgb(244,196,53)" fg:x="11481" fg:w="465"/><text x="20.1505%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="20.6617%" y="149" width="0.0553%" height="15" fill="rgb(242,164,16)" fg:x="11946" fg:w="32"/><text x="20.9547%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.14%)</title><rect x="20.7171%" y="117" width="0.1418%" height="15" fill="rgb(205,183,10)" fg:x="11978" fg:w="82"/><text x="21.0101%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 instructions, 0.20%)</title><rect x="20.7171%" y="133" width="0.2024%" height="15" fill="rgb(247,144,26)" fg:x="11978" fg:w="117"/><text x="21.0101%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (182 instructions, 0.31%)</title><rect x="20.7171%" y="149" width="0.3148%" height="15" fill="rgb(225,122,8)" fg:x="11978" fg:w="182"/><text x="21.0101%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="21.0319%" y="149" width="0.0190%" height="15" fill="rgb(243,94,22)" fg:x="12160" fg:w="11"/><text x="21.3248%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="21.0509%" y="149" width="0.0190%" height="15" fill="rgb(254,179,25)" fg:x="12171" fg:w="11"/><text x="21.3439%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.05%)</title><rect x="21.0699%" y="149" width="0.0519%" height="15" fill="rgb(218,32,6)" fg:x="12182" fg:w="30"/><text x="21.3629%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (478 instructions, 0.83%)</title><rect x="20.6617%" y="165" width="0.8267%" height="15" fill="rgb(229,91,41)" fg:x="11946" fg:w="478"/><text x="20.9547%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (24 instructions, 0.04%)</title><rect x="21.4885%" y="165" width="0.0415%" height="15" fill="rgb(208,112,18)" fg:x="12424" fg:w="24"/><text x="21.7815%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.10%)</title><rect x="21.5300%" y="165" width="0.0986%" height="15" fill="rgb(241,128,25)" fg:x="12448" fg:w="57"/><text x="21.8230%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,098 instructions, 1.90%)</title><rect x="19.8575%" y="181" width="1.8991%" height="15" fill="rgb(244,49,43)" fg:x="11481" fg:w="1098"/><text x="20.1505%" y="191.50"></text></g><g><title>btreemap::batch_get_5_::{{closure}} (57,290 instructions, 99.09%)</title><rect x="0.3632%" y="197" width="99.0885%" height="15" fill="rgb(220,70,51)" fg:x="210" fg:w="57290"/><text x="0.6562%" y="207.50">btreemap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4517%" y="197" width="0.0208%" height="15" fill="rgb(231,4,35)" fg:x="57500" fg:w="12"/><text x="99.7447%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.14%)</title><rect x="99.4725%" y="197" width="0.1401%" height="15" fill="rgb(222,155,37)" fg:x="57512" fg:w="81"/><text x="99.7654%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.22%)</title><rect x="99.6126%" y="197" width="0.2179%" height="15" fill="rgb(254,173,41)" fg:x="57593" fg:w="126"/><text x="99.9055%" y="207.50"></text></g><g><title>all (57,817 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,111,14)" fg:x="0" fg:w="57817"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (57,817 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(254,78,34)" fg:x="0" fg:w="57817"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>