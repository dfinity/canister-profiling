<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="59721"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0134%" height="15" fill="rgb(216,120,33)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0134%" y="181" width="0.0151%" height="15" fill="rgb(220,173,1)" fg:x="8" fg:w="9"/><text x="0.3064%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0285%" y="181" width="0.0151%" height="15" fill="rgb(220,182,43)" fg:x="17" fg:w="9"/><text x="0.3214%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::left_bits (8 instructions, 0.01%)</title><rect x="0.0435%" y="181" width="0.0134%" height="15" fill="rgb(249,157,51)" fg:x="26" fg:w="8"/><text x="0.3365%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0787%" y="181" width="0.0167%" height="15" fill="rgb(210,161,54)" fg:x="47" fg:w="10"/><text x="0.3717%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (168 instructions, 0.28%)</title><rect x="0.0134%" y="197" width="0.2813%" height="15" fill="rgb(227,121,31)" fg:x="8" fg:w="168"/><text x="0.3064%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (178 instructions, 0.30%)</title><rect x="0.0134%" y="213" width="0.2981%" height="15" fill="rgb(209,106,18)" fg:x="8" fg:w="178"/><text x="0.3064%" y="223.50"></text></g><g><title>__rdl_alloc (181 instructions, 0.30%)</title><rect x="0.0134%" y="229" width="0.3031%" height="15" fill="rgb(247,110,24)" fg:x="8" fg:w="181"/><text x="0.3064%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3265%" y="181" width="0.0151%" height="15" fill="rgb(243,97,29)" fg:x="195" fg:w="9"/><text x="0.6195%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3416%" y="181" width="0.0151%" height="15" fill="rgb(223,123,3)" fg:x="204" fg:w="9"/><text x="0.6346%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3567%" y="181" width="0.0151%" height="15" fill="rgb(224,35,50)" fg:x="213" fg:w="9"/><text x="0.6496%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="0.3717%" y="181" width="0.0234%" height="15" fill="rgb(232,29,5)" fg:x="222" fg:w="14"/><text x="0.6647%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.21%)</title><rect x="0.3265%" y="197" width="0.2076%" height="15" fill="rgb(252,52,13)" fg:x="195" fg:w="124"/><text x="0.6195%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.22%)</title><rect x="0.3265%" y="213" width="0.2244%" height="15" fill="rgb(230,2,17)" fg:x="195" fg:w="134"/><text x="0.6195%" y="223.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.23%)</title><rect x="0.3265%" y="229" width="0.2294%" height="15" fill="rgb(225,32,26)" fg:x="195" fg:w="137"/><text x="0.6195%" y="239.50"></text></g><g><title>__rust_alloc (330 instructions, 0.55%)</title><rect x="0.0134%" y="245" width="0.5526%" height="15" fill="rgb(241,173,19)" fg:x="8" fg:w="330"/><text x="0.3064%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5660%" y="245" width="0.0100%" height="15" fill="rgb(251,9,31)" fg:x="338" fg:w="6"/><text x="0.8589%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5760%" y="149" width="0.0151%" height="15" fill="rgb(244,150,20)" fg:x="344" fg:w="9"/><text x="0.8690%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5911%" y="149" width="0.0151%" height="15" fill="rgb(224,110,27)" fg:x="353" fg:w="9"/><text x="0.8841%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="0.5760%" y="165" width="0.2009%" height="15" fill="rgb(236,198,50)" fg:x="344" fg:w="120"/><text x="0.8690%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="0.5760%" y="181" width="0.2177%" height="15" fill="rgb(205,3,16)" fg:x="344" fg:w="130"/><text x="0.8690%" y="191.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="0.5760%" y="197" width="0.2227%" height="15" fill="rgb(235,89,16)" fg:x="344" fg:w="133"/><text x="0.8690%" y="207.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="0.5760%" y="213" width="0.2327%" height="15" fill="rgb(249,123,25)" fg:x="344" fg:w="139"/><text x="0.8690%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (199 instructions, 0.33%)</title><rect x="0.5760%" y="229" width="0.3332%" height="15" fill="rgb(237,11,1)" fg:x="344" fg:w="199"/><text x="0.8690%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="0.9109%" y="181" width="0.1222%" height="15" fill="rgb(230,51,27)" fg:x="544" fg:w="73"/><text x="1.2039%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.0331%" y="117" width="0.0100%" height="15" fill="rgb(209,33,22)" fg:x="617" fg:w="6"/><text x="1.3261%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.0331%" y="133" width="0.0167%" height="15" fill="rgb(221,69,29)" fg:x="617" fg:w="10"/><text x="1.3261%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="1.0331%" y="149" width="0.7250%" height="15" fill="rgb(216,69,13)" fg:x="617" fg:w="433"/><text x="1.3261%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.15%)</title><rect x="1.7582%" y="149" width="0.1457%" height="15" fill="rgb(245,170,41)" fg:x="1050" fg:w="87"/><text x="2.0511%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="1.9039%" y="149" width="0.0871%" height="15" fill="rgb(231,85,43)" fg:x="1137" fg:w="52"/><text x="2.1968%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="1.9909%" y="149" width="0.0871%" height="15" fill="rgb(234,63,50)" fg:x="1189" fg:w="52"/><text x="2.2839%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="2.0780%" y="149" width="0.0871%" height="15" fill="rgb(234,180,43)" fg:x="1241" fg:w="52"/><text x="2.3710%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.09%)</title><rect x="2.1651%" y="149" width="0.0871%" height="15" fill="rgb(217,42,1)" fg:x="1293" fg:w="52"/><text x="2.4580%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (880 instructions, 1.47%)</title><rect x="1.0331%" y="181" width="1.4735%" height="15" fill="rgb(220,214,13)" fg:x="617" fg:w="880"/><text x="1.3261%" y="191.50"></text></g><g><title> 4]&gt;::read_options (880 instructions, 1.47%)</title><rect x="1.0331%" y="165" width="1.4735%" height="15" fill="rgb(205,150,42)" fg:x="617" fg:w="880"/><text x="1.3261%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="2.5067%" y="181" width="0.1222%" height="15" fill="rgb(223,216,12)" fg:x="1497" fg:w="73"/><text x="2.7996%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.13%)</title><rect x="2.6289%" y="165" width="0.1289%" height="15" fill="rgb(211,14,38)" fg:x="1570" fg:w="77"/><text x="2.9219%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="2.6289%" y="181" width="0.1741%" height="15" fill="rgb(224,92,18)" fg:x="1570" fg:w="104"/><text x="2.9219%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="2.8030%" y="133" width="0.0100%" height="15" fill="rgb(209,192,4)" fg:x="1674" fg:w="6"/><text x="3.0960%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="2.8030%" y="149" width="0.0167%" height="15" fill="rgb(249,86,3)" fg:x="1674" fg:w="10"/><text x="3.0960%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="2.8030%" y="165" width="0.7250%" height="15" fill="rgb(219,201,31)" fg:x="1674" fg:w="433"/><text x="3.0960%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.5281%" y="149" width="0.0301%" height="15" fill="rgb(217,185,11)" fg:x="2107" fg:w="18"/><text x="3.8210%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.5281%" y="165" width="0.0368%" height="15" fill="rgb(238,114,4)" fg:x="2107" fg:w="22"/><text x="3.8210%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.5649%" y="69" width="0.0151%" height="15" fill="rgb(230,192,5)" fg:x="2129" fg:w="9"/><text x="3.8579%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.5800%" y="69" width="0.0151%" height="15" fill="rgb(248,47,21)" fg:x="2138" fg:w="9"/><text x="3.8729%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="3.5649%" y="85" width="0.2009%" height="15" fill="rgb(208,180,2)" fg:x="2129" fg:w="120"/><text x="3.8579%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="3.5649%" y="101" width="0.2177%" height="15" fill="rgb(250,206,24)" fg:x="2129" fg:w="130"/><text x="3.8579%" y="111.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="3.5649%" y="117" width="0.2227%" height="15" fill="rgb(210,219,0)" fg:x="2129" fg:w="133"/><text x="3.8579%" y="127.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="3.5649%" y="133" width="0.2327%" height="15" fill="rgb(232,118,28)" fg:x="2129" fg:w="139"/><text x="3.8579%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="3.7977%" y="85" width="0.1005%" height="15" fill="rgb(238,81,12)" fg:x="2268" fg:w="60"/><text x="4.0906%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.11%)</title><rect x="3.7977%" y="101" width="0.1072%" height="15" fill="rgb(237,173,22)" fg:x="2268" fg:w="64"/><text x="4.0906%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.15%)</title><rect x="3.7977%" y="117" width="0.1490%" height="15" fill="rgb(220,131,25)" fg:x="2268" fg:w="89"/><text x="4.0906%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="3.9467%" y="69" width="0.0167%" height="15" fill="rgb(223,203,44)" fg:x="2357" fg:w="10"/><text x="4.2397%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="3.9634%" y="37" width="0.0502%" height="15" fill="rgb(219,77,53)" fg:x="2367" fg:w="30"/><text x="4.2564%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="3.9634%" y="53" width="0.0569%" height="15" fill="rgb(234,62,37)" fg:x="2367" fg:w="34"/><text x="4.2564%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="3.9634%" y="69" width="0.0988%" height="15" fill="rgb(209,134,29)" fg:x="2367" fg:w="59"/><text x="4.2564%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.20%)</title><rect x="3.9467%" y="85" width="0.1993%" height="15" fill="rgb(218,37,34)" fg:x="2357" fg:w="119"/><text x="4.2397%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.29%)</title><rect x="3.9467%" y="101" width="0.2914%" height="15" fill="rgb(233,100,26)" fg:x="2357" fg:w="174"/><text x="4.2397%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.30%)</title><rect x="3.9467%" y="117" width="0.2997%" height="15" fill="rgb(251,172,34)" fg:x="2357" fg:w="179"/><text x="4.2397%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.63%)</title><rect x="3.7977%" y="133" width="0.6346%" height="15" fill="rgb(218,75,39)" fg:x="2268" fg:w="379"/><text x="4.0906%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (661 instructions, 1.11%)</title><rect x="3.5649%" y="149" width="1.1068%" height="15" fill="rgb(232,179,0)" fg:x="2129" fg:w="661"/><text x="3.8579%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.15%)</title><rect x="4.6717%" y="149" width="0.1457%" height="15" fill="rgb(235,188,16)" fg:x="2790" fg:w="87"/><text x="4.9647%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="4.8408%" y="101" width="0.0100%" height="15" fill="rgb(214,167,28)" fg:x="2891" fg:w="6"/><text x="5.1338%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="4.8174%" y="117" width="0.1139%" height="15" fill="rgb(233,161,44)" fg:x="2877" fg:w="68"/><text x="5.1104%" y="127.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="4.8174%" y="133" width="0.1172%" height="15" fill="rgb(244,183,7)" fg:x="2877" fg:w="70"/><text x="5.1104%" y="143.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="4.8174%" y="149" width="0.1256%" height="15" fill="rgb(219,35,17)" fg:x="2877" fg:w="75"/><text x="5.1104%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (894 instructions, 1.50%)</title><rect x="3.5649%" y="165" width="1.4970%" height="15" fill="rgb(251,221,19)" fg:x="2129" fg:w="894"/><text x="3.8579%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="5.0619%" y="165" width="0.0419%" height="15" fill="rgb(227,1,29)" fg:x="3023" fg:w="25"/><text x="5.3548%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,522 instructions, 2.55%)</title><rect x="2.8030%" y="181" width="2.5485%" height="15" fill="rgb(226,222,47)" fg:x="1674" fg:w="1522"/><text x="3.0960%" y="191.50">b..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="5.3516%" y="181" width="0.1139%" height="15" fill="rgb(233,123,3)" fg:x="3196" fg:w="68"/><text x="5.6445%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.13%)</title><rect x="5.4654%" y="165" width="0.1289%" height="15" fill="rgb(233,132,27)" fg:x="3264" fg:w="77"/><text x="5.7584%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="5.4654%" y="181" width="0.1741%" height="15" fill="rgb(219,167,19)" fg:x="3264" fg:w="104"/><text x="5.7584%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="5.6396%" y="133" width="0.0100%" height="15" fill="rgb(240,52,43)" fg:x="3368" fg:w="6"/><text x="5.9325%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="5.6396%" y="149" width="0.0167%" height="15" fill="rgb(231,218,14)" fg:x="3368" fg:w="10"/><text x="5.9325%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.73%)</title><rect x="5.6396%" y="165" width="0.7250%" height="15" fill="rgb(217,224,13)" fg:x="3368" fg:w="433"/><text x="5.9325%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="6.3646%" y="149" width="0.0301%" height="15" fill="rgb(223,177,9)" fg:x="3801" fg:w="18"/><text x="6.6576%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="6.3646%" y="165" width="0.0368%" height="15" fill="rgb(226,193,7)" fg:x="3801" fg:w="22"/><text x="6.6576%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="6.4014%" y="69" width="0.0151%" height="15" fill="rgb(246,159,5)" fg:x="3823" fg:w="9"/><text x="6.6944%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="6.4165%" y="69" width="0.0151%" height="15" fill="rgb(248,58,35)" fg:x="3832" fg:w="9"/><text x="6.7095%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="6.4014%" y="85" width="0.2009%" height="15" fill="rgb(253,189,38)" fg:x="3823" fg:w="120"/><text x="6.6944%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="6.4014%" y="101" width="0.2177%" height="15" fill="rgb(248,174,28)" fg:x="3823" fg:w="130"/><text x="6.6944%" y="111.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="6.4014%" y="117" width="0.2227%" height="15" fill="rgb(230,20,1)" fg:x="3823" fg:w="133"/><text x="6.6944%" y="127.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="6.4014%" y="133" width="0.2327%" height="15" fill="rgb(242,97,22)" fg:x="3823" fg:w="139"/><text x="6.6944%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="6.6342%" y="85" width="0.1005%" height="15" fill="rgb(249,210,17)" fg:x="3962" fg:w="60"/><text x="6.9272%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.11%)</title><rect x="6.6342%" y="101" width="0.1072%" height="15" fill="rgb(243,200,49)" fg:x="3962" fg:w="64"/><text x="6.9272%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.15%)</title><rect x="6.6342%" y="117" width="0.1490%" height="15" fill="rgb(246,208,52)" fg:x="3962" fg:w="89"/><text x="6.9272%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="6.7832%" y="69" width="0.0167%" height="15" fill="rgb(208,203,51)" fg:x="4051" fg:w="10"/><text x="7.0762%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="6.8000%" y="37" width="0.0502%" height="15" fill="rgb(239,136,53)" fg:x="4061" fg:w="30"/><text x="7.0929%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="6.8000%" y="53" width="0.0569%" height="15" fill="rgb(254,93,0)" fg:x="4061" fg:w="34"/><text x="7.0929%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="6.8000%" y="69" width="0.0988%" height="15" fill="rgb(220,106,0)" fg:x="4061" fg:w="59"/><text x="7.0929%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.20%)</title><rect x="6.7832%" y="85" width="0.1993%" height="15" fill="rgb(238,138,44)" fg:x="4051" fg:w="119"/><text x="7.0762%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.29%)</title><rect x="6.7832%" y="101" width="0.2914%" height="15" fill="rgb(215,225,0)" fg:x="4051" fg:w="174"/><text x="7.0762%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.30%)</title><rect x="6.7832%" y="117" width="0.2997%" height="15" fill="rgb(248,74,48)" fg:x="4051" fg:w="179"/><text x="7.0762%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.63%)</title><rect x="6.6342%" y="133" width="0.6346%" height="15" fill="rgb(206,208,39)" fg:x="3962" fg:w="379"/><text x="6.9272%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (661 instructions, 1.11%)</title><rect x="6.4014%" y="149" width="1.1068%" height="15" fill="rgb(222,7,37)" fg:x="3823" fg:w="661"/><text x="6.6944%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.15%)</title><rect x="7.5082%" y="149" width="0.1457%" height="15" fill="rgb(207,14,48)" fg:x="4484" fg:w="87"/><text x="7.8012%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="7.6774%" y="101" width="0.0100%" height="15" fill="rgb(241,191,18)" fg:x="4585" fg:w="6"/><text x="7.9703%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="7.6539%" y="117" width="0.1139%" height="15" fill="rgb(246,203,17)" fg:x="4571" fg:w="68"/><text x="7.9469%" y="127.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="7.6539%" y="133" width="0.1172%" height="15" fill="rgb(221,213,14)" fg:x="4571" fg:w="70"/><text x="7.9469%" y="143.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="7.6539%" y="149" width="0.1256%" height="15" fill="rgb(248,7,7)" fg:x="4571" fg:w="75"/><text x="7.9469%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (894 instructions, 1.50%)</title><rect x="6.4014%" y="165" width="1.4970%" height="15" fill="rgb(225,227,34)" fg:x="3823" fg:w="894"/><text x="6.6944%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="7.8984%" y="133" width="0.1222%" height="15" fill="rgb(233,69,34)" fg:x="4717" fg:w="73"/><text x="8.1914%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.18%)</title><rect x="8.0206%" y="117" width="0.1842%" height="15" fill="rgb(205,59,22)" fg:x="4790" fg:w="110"/><text x="8.3136%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.23%)</title><rect x="8.0206%" y="133" width="0.2294%" height="15" fill="rgb(239,103,39)" fg:x="4790" fg:w="137"/><text x="8.3136%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="8.2500%" y="133" width="0.1139%" height="15" fill="rgb(211,97,37)" fg:x="4927" fg:w="68"/><text x="8.5430%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (337 instructions, 0.56%)</title><rect x="7.8984%" y="149" width="0.5643%" height="15" fill="rgb(219,5,51)" fg:x="4717" fg:w="337"/><text x="8.1914%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="8.4627%" y="85" width="0.0151%" height="15" fill="rgb(253,226,35)" fg:x="5054" fg:w="9"/><text x="8.7557%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="8.4778%" y="85" width="0.0151%" height="15" fill="rgb(211,130,34)" fg:x="5063" fg:w="9"/><text x="8.7707%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="8.4627%" y="101" width="0.2009%" height="15" fill="rgb(232,196,43)" fg:x="5054" fg:w="120"/><text x="8.7557%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="8.4627%" y="117" width="0.2177%" height="15" fill="rgb(247,63,36)" fg:x="5054" fg:w="130"/><text x="8.7557%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="8.4627%" y="133" width="0.2227%" height="15" fill="rgb(251,30,13)" fg:x="5054" fg:w="133"/><text x="8.7557%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="8.4627%" y="149" width="0.2327%" height="15" fill="rgb(251,46,31)" fg:x="5054" fg:w="139"/><text x="8.7557%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (555 instructions, 0.93%)</title><rect x="7.8984%" y="165" width="0.9293%" height="15" fill="rgb(253,167,6)" fg:x="4717" fg:w="555"/><text x="8.1914%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,052 instructions, 3.44%)</title><rect x="5.6396%" y="181" width="3.4360%" height="15" fill="rgb(254,111,22)" fg:x="3368" fg:w="2052"/><text x="5.9325%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="9.0755%" y="181" width="0.1139%" height="15" fill="rgb(214,188,2)" fg:x="5420" fg:w="68"/><text x="9.3685%" y="191.50"></text></g><g><title>binread::BinRead::read (5,162 instructions, 8.64%)</title><rect x="0.9092%" y="197" width="8.6435%" height="15" fill="rgb(215,229,1)" fg:x="543" fg:w="5162"/><text x="1.2022%" y="207.50">binread::B..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.5528%" y="181" width="0.0234%" height="15" fill="rgb(230,197,7)" fg:x="5705" fg:w="14"/><text x="9.8457%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.5762%" y="165" width="0.0234%" height="15" fill="rgb(206,181,44)" fg:x="5719" fg:w="14"/><text x="9.8692%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 instructions, 0.11%)</title><rect x="9.5996%" y="165" width="0.1088%" height="15" fill="rgb(219,125,47)" fg:x="5733" fg:w="65"/><text x="9.8926%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="9.7085%" y="165" width="0.0318%" height="15" fill="rgb(232,93,32)" fg:x="5798" fg:w="19"/><text x="10.0014%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (250 instructions, 0.42%)</title><rect x="9.5762%" y="181" width="0.4186%" height="15" fill="rgb(208,191,50)" fg:x="5719" fg:w="250"/><text x="9.8692%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.9948%" y="101" width="0.0151%" height="15" fill="rgb(254,60,3)" fg:x="5969" fg:w="9"/><text x="10.2878%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.0099%" y="101" width="0.0151%" height="15" fill="rgb(240,154,23)" fg:x="5978" fg:w="9"/><text x="10.3028%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="9.9948%" y="117" width="0.2009%" height="15" fill="rgb(212,189,44)" fg:x="5969" fg:w="120"/><text x="10.2878%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="9.9948%" y="133" width="0.2177%" height="15" fill="rgb(228,155,46)" fg:x="5969" fg:w="130"/><text x="10.2878%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="9.9948%" y="149" width="0.2227%" height="15" fill="rgb(213,52,33)" fg:x="5969" fg:w="133"/><text x="10.2878%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="9.9948%" y="165" width="0.2327%" height="15" fill="rgb(236,214,15)" fg:x="5969" fg:w="139"/><text x="10.2878%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (220 instructions, 0.37%)</title><rect x="9.9948%" y="181" width="0.3684%" height="15" fill="rgb(244,108,11)" fg:x="5969" fg:w="220"/><text x="10.2878%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.3632%" y="85" width="0.0151%" height="15" fill="rgb(205,95,33)" fg:x="6189" fg:w="9"/><text x="10.6562%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.3783%" y="85" width="0.0151%" height="15" fill="rgb(247,171,25)" fg:x="6198" fg:w="9"/><text x="10.6712%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="10.3632%" y="101" width="0.2009%" height="15" fill="rgb(232,94,29)" fg:x="6189" fg:w="120"/><text x="10.6562%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="10.3632%" y="117" width="0.2177%" height="15" fill="rgb(219,220,53)" fg:x="6189" fg:w="130"/><text x="10.6562%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="10.3632%" y="133" width="0.2227%" height="15" fill="rgb(229,15,10)" fg:x="6189" fg:w="133"/><text x="10.6562%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="10.3632%" y="149" width="0.2327%" height="15" fill="rgb(227,117,16)" fg:x="6189" fg:w="139"/><text x="10.6562%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 instructions, 0.29%)</title><rect x="10.3632%" y="165" width="0.2863%" height="15" fill="rgb(252,54,38)" fg:x="6189" fg:w="171"/><text x="10.6562%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (241 instructions, 0.40%)</title><rect x="10.3632%" y="181" width="0.4035%" height="15" fill="rgb(246,46,2)" fg:x="6189" fg:w="241"/><text x="10.6562%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (952 instructions, 1.59%)</title><rect x="9.5528%" y="197" width="1.5941%" height="15" fill="rgb(239,219,6)" fg:x="5705" fg:w="952"/><text x="9.8457%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1468%" y="117" width="0.0151%" height="15" fill="rgb(251,104,47)" fg:x="6657" fg:w="9"/><text x="11.4398%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1619%" y="117" width="0.0151%" height="15" fill="rgb(228,78,26)" fg:x="6666" fg:w="9"/><text x="11.4549%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="11.1468%" y="133" width="0.2009%" height="15" fill="rgb(221,103,13)" fg:x="6657" fg:w="120"/><text x="11.4398%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="11.1468%" y="149" width="0.2177%" height="15" fill="rgb(232,114,25)" fg:x="6657" fg:w="130"/><text x="11.4398%" y="159.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.1468%" y="165" width="0.2227%" height="15" fill="rgb(247,117,13)" fg:x="6657" fg:w="133"/><text x="11.4398%" y="175.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="11.1468%" y="181" width="0.2327%" height="15" fill="rgb(239,8,29)" fg:x="6657" fg:w="139"/><text x="11.4398%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="11.4030%" y="133" width="0.0100%" height="15" fill="rgb(248,110,19)" fg:x="6810" fg:w="6"/><text x="11.6960%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="11.4131%" y="133" width="0.0268%" height="15" fill="rgb(226,2,6)" fg:x="6816" fg:w="16"/><text x="11.7060%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="11.3796%" y="149" width="0.1641%" height="15" fill="rgb(223,69,42)" fg:x="6796" fg:w="98"/><text x="11.6726%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="11.3796%" y="165" width="0.1674%" height="15" fill="rgb(217,182,27)" fg:x="6796" fg:w="100"/><text x="11.6726%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="11.3796%" y="181" width="0.1758%" height="15" fill="rgb(245,89,31)" fg:x="6796" fg:w="105"/><text x="11.6726%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (358 instructions, 0.60%)</title><rect x="11.1468%" y="197" width="0.5995%" height="15" fill="rgb(241,47,3)" fg:x="6657" fg:w="358"/><text x="11.4398%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.7463%" y="133" width="0.0151%" height="15" fill="rgb(227,217,1)" fg:x="7015" fg:w="9"/><text x="12.0393%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.7614%" y="133" width="0.0151%" height="15" fill="rgb(206,126,5)" fg:x="7024" fg:w="9"/><text x="12.0543%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="11.7463%" y="149" width="0.2009%" height="15" fill="rgb(216,157,18)" fg:x="7015" fg:w="120"/><text x="12.0393%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="11.7463%" y="165" width="0.2177%" height="15" fill="rgb(254,12,4)" fg:x="7015" fg:w="130"/><text x="12.0393%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.7463%" y="181" width="0.2227%" height="15" fill="rgb(250,113,28)" fg:x="7015" fg:w="133"/><text x="12.0393%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.9790%" y="133" width="0.0151%" height="15" fill="rgb(252,47,28)" fg:x="7154" fg:w="9"/><text x="12.2720%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.9941%" y="133" width="0.0151%" height="15" fill="rgb(242,133,11)" fg:x="7163" fg:w="9"/><text x="12.2871%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="11.9790%" y="149" width="0.2009%" height="15" fill="rgb(228,63,40)" fg:x="7154" fg:w="120"/><text x="12.2720%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="11.9790%" y="165" width="0.2177%" height="15" fill="rgb(248,215,43)" fg:x="7154" fg:w="130"/><text x="12.2720%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.9790%" y="181" width="0.2227%" height="15" fill="rgb(229,95,9)" fg:x="7154" fg:w="133"/><text x="12.2720%" y="191.50"></text></g><g><title>__rust_alloc (278 instructions, 0.47%)</title><rect x="11.7463%" y="197" width="0.4655%" height="15" fill="rgb(213,85,51)" fg:x="7015" fg:w="278"/><text x="12.0393%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.2352%" y="149" width="0.0100%" height="15" fill="rgb(249,19,14)" fg:x="7307" fg:w="6"/><text x="12.5282%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.2453%" y="149" width="0.0268%" height="15" fill="rgb(239,213,38)" fg:x="7313" fg:w="16"/><text x="12.5382%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="12.2118%" y="165" width="0.1641%" height="15" fill="rgb(206,99,52)" fg:x="7293" fg:w="98"/><text x="12.5048%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="12.2118%" y="181" width="0.1674%" height="15" fill="rgb(242,114,3)" fg:x="7293" fg:w="100"/><text x="12.5048%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="12.2118%" y="197" width="0.1758%" height="15" fill="rgb(217,134,23)" fg:x="7293" fg:w="105"/><text x="12.5048%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.69%)</title><rect x="12.3876%" y="165" width="0.6915%" height="15" fill="rgb(222,137,0)" fg:x="7398" fg:w="413"/><text x="12.6806%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.70%)</title><rect x="12.3876%" y="181" width="0.6982%" height="15" fill="rgb(232,67,40)" fg:x="7398" fg:w="417"/><text x="12.6806%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.73%)</title><rect x="12.3876%" y="197" width="0.7317%" height="15" fill="rgb(241,220,4)" fg:x="7398" fg:w="437"/><text x="12.6806%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.62%)</title><rect x="13.1193%" y="181" width="0.6162%" height="15" fill="rgb(235,190,49)" fg:x="7835" fg:w="368"/><text x="13.4123%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.62%)</title><rect x="13.1193%" y="197" width="0.6229%" height="15" fill="rgb(234,36,6)" fg:x="7835" fg:w="372"/><text x="13.4123%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (8,012 instructions, 13.42%)</title><rect x="0.9092%" y="213" width="13.4157%" height="15" fill="rgb(236,19,43)" fg:x="543" fg:w="8012"/><text x="1.2022%" y="223.50">candid::de::IDLDe..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.64%)</title><rect x="14.3249%" y="197" width="0.6413%" height="15" fill="rgb(241,62,45)" fg:x="8555" fg:w="383"/><text x="14.6179%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.64%)</title><rect x="14.9730%" y="197" width="0.6413%" height="15" fill="rgb(211,149,30)" fg:x="8942" fg:w="383"/><text x="15.2659%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.30%)</title><rect x="14.3249%" y="213" width="1.2960%" height="15" fill="rgb(230,214,22)" fg:x="8555" fg:w="774"/><text x="14.6179%" y="223.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="15.6210%" y="149" width="0.0134%" height="15" fill="rgb(211,205,11)" fg:x="9329" fg:w="8"/><text x="15.9139%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 instructions, 0.09%)</title><rect x="15.6210%" y="165" width="0.0904%" height="15" fill="rgb(252,188,37)" fg:x="9329" fg:w="54"/><text x="15.9139%" y="175.50"></text></g><g><title>candid::types::internal::find_type (73 instructions, 0.12%)</title><rect x="15.6210%" y="181" width="0.1222%" height="15" fill="rgb(238,97,11)" fg:x="9329" fg:w="73"/><text x="15.9139%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="15.7432%" y="101" width="0.0151%" height="15" fill="rgb(234,114,17)" fg:x="9402" fg:w="9"/><text x="16.0362%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="15.7583%" y="101" width="0.0151%" height="15" fill="rgb(236,206,2)" fg:x="9411" fg:w="9"/><text x="16.0512%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="15.7432%" y="117" width="0.2009%" height="15" fill="rgb(240,202,0)" fg:x="9402" fg:w="120"/><text x="16.0362%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="15.7432%" y="133" width="0.2177%" height="15" fill="rgb(219,48,25)" fg:x="9402" fg:w="130"/><text x="16.0362%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="15.7432%" y="149" width="0.2227%" height="15" fill="rgb(238,218,13)" fg:x="9402" fg:w="133"/><text x="16.0362%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="15.7432%" y="165" width="0.2327%" height="15" fill="rgb(252,184,45)" fg:x="9402" fg:w="139"/><text x="16.0362%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (184 instructions, 0.31%)</title><rect x="15.7432%" y="181" width="0.3081%" height="15" fill="rgb(236,153,30)" fg:x="9402" fg:w="184"/><text x="16.0362%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="16.0513%" y="149" width="0.0134%" height="15" fill="rgb(217,185,2)" fg:x="9586" fg:w="8"/><text x="16.3443%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="16.0647%" y="133" width="0.0904%" height="15" fill="rgb(209,157,50)" fg:x="9594" fg:w="54"/><text x="16.3577%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="16.1551%" y="133" width="0.1507%" height="15" fill="rgb(223,126,33)" fg:x="9648" fg:w="90"/><text x="16.4481%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.27%)</title><rect x="16.3058%" y="133" width="0.2729%" height="15" fill="rgb(225,206,51)" fg:x="9738" fg:w="163"/><text x="16.5988%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.93%)</title><rect x="16.0647%" y="149" width="0.9310%" height="15" fill="rgb(253,86,45)" fg:x="9594" fg:w="556"/><text x="16.3577%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.17%)</title><rect x="16.9957%" y="149" width="0.1658%" height="15" fill="rgb(233,176,20)" fg:x="10150" fg:w="99"/><text x="17.2887%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (826 instructions, 1.38%)</title><rect x="16.0513%" y="165" width="1.3831%" height="15" fill="rgb(232,128,28)" fg:x="9586" fg:w="826"/><text x="16.3443%" y="175.50"></text></g><g><title>candid::types::internal::env_add (853 instructions, 1.43%)</title><rect x="16.0513%" y="181" width="1.4283%" height="15" fill="rgb(217,198,32)" fg:x="9586" fg:w="853"/><text x="16.3443%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.4796%" y="101" width="0.0151%" height="15" fill="rgb(209,159,15)" fg:x="10439" fg:w="9"/><text x="17.7726%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.4947%" y="101" width="0.0151%" height="15" fill="rgb(251,43,15)" fg:x="10448" fg:w="9"/><text x="17.7877%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="17.4796%" y="117" width="0.2009%" height="15" fill="rgb(250,19,13)" fg:x="10439" fg:w="120"/><text x="17.7726%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="17.4796%" y="133" width="0.2177%" height="15" fill="rgb(246,48,46)" fg:x="10439" fg:w="130"/><text x="17.7726%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="17.4796%" y="149" width="0.2227%" height="15" fill="rgb(217,16,25)" fg:x="10439" fg:w="133"/><text x="17.7726%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="17.4796%" y="165" width="0.2327%" height="15" fill="rgb(226,17,15)" fg:x="10439" fg:w="139"/><text x="17.7726%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (151 instructions, 0.25%)</title><rect x="17.4796%" y="181" width="0.2528%" height="15" fill="rgb(240,98,32)" fg:x="10439" fg:w="151"/><text x="17.7726%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="17.7325%" y="149" width="0.0134%" height="15" fill="rgb(206,79,26)" fg:x="10590" fg:w="8"/><text x="18.0254%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="17.7459%" y="133" width="0.0904%" height="15" fill="rgb(243,108,14)" fg:x="10598" fg:w="54"/><text x="18.0388%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="17.8363%" y="133" width="0.1507%" height="15" fill="rgb(253,41,54)" fg:x="10652" fg:w="90"/><text x="18.1292%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.27%)</title><rect x="17.9870%" y="133" width="0.2729%" height="15" fill="rgb(209,171,44)" fg:x="10742" fg:w="163"/><text x="18.2799%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.93%)</title><rect x="17.7459%" y="149" width="0.9310%" height="15" fill="rgb(246,2,33)" fg:x="10598" fg:w="556"/><text x="18.0388%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.12%)</title><rect x="18.6768%" y="133" width="0.1239%" height="15" fill="rgb(206,42,12)" fg:x="11154" fg:w="74"/><text x="18.9698%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.13%)</title><rect x="18.6768%" y="149" width="0.1306%" height="15" fill="rgb(236,80,38)" fg:x="11154" fg:w="78"/><text x="18.9698%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="18.8309%" y="85" width="0.0100%" height="15" fill="rgb(211,20,23)" fg:x="11246" fg:w="6"/><text x="19.1239%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="18.8409%" y="85" width="0.0268%" height="15" fill="rgb(215,126,22)" fg:x="11252" fg:w="16"/><text x="19.1339%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="18.8075%" y="101" width="0.1641%" height="15" fill="rgb(252,18,50)" fg:x="11232" fg:w="98"/><text x="19.1004%" y="111.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="18.8075%" y="117" width="0.1674%" height="15" fill="rgb(234,29,13)" fg:x="11232" fg:w="100"/><text x="19.1004%" y="127.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.18%)</title><rect x="18.8075%" y="133" width="0.1758%" height="15" fill="rgb(230,116,36)" fg:x="11232" fg:w="105"/><text x="19.1004%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.23%)</title><rect x="18.8075%" y="149" width="0.2294%" height="15" fill="rgb(243,216,15)" fg:x="11232" fg:w="137"/><text x="19.1004%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (952 instructions, 1.59%)</title><rect x="17.7325%" y="165" width="1.5941%" height="15" fill="rgb(239,180,5)" fg:x="10590" fg:w="952"/><text x="18.0254%" y="175.50"></text></g><g><title>candid::types::internal::env_add (979 instructions, 1.64%)</title><rect x="17.7325%" y="181" width="1.6393%" height="15" fill="rgb(244,137,25)" fg:x="10590" fg:w="979"/><text x="18.0254%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (8 instructions, 0.01%)</title><rect x="19.3717%" y="149" width="0.0134%" height="15" fill="rgb(243,107,21)" fg:x="11569" fg:w="8"/><text x="19.6647%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="19.3851%" y="117" width="0.0904%" height="15" fill="rgb(224,64,1)" fg:x="11577" fg:w="54"/><text x="19.6781%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="19.3851%" y="133" width="0.1323%" height="15" fill="rgb(254,68,54)" fg:x="11577" fg:w="79"/><text x="19.6781%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.51%)</title><rect x="19.3851%" y="149" width="0.5074%" height="15" fill="rgb(250,71,0)" fg:x="11577" fg:w="303"/><text x="19.6781%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (18 instructions, 0.03%)</title><rect x="19.8925%" y="149" width="0.0301%" height="15" fill="rgb(212,213,14)" fg:x="11880" fg:w="18"/><text x="20.1855%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.9226%" y="149" width="0.0184%" height="15" fill="rgb(234,164,44)" fg:x="11898" fg:w="11"/><text x="20.2156%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (521 instructions, 0.87%)</title><rect x="19.3717%" y="165" width="0.8724%" height="15" fill="rgb(241,171,39)" fg:x="11569" fg:w="521"/><text x="19.6647%" y="175.50"></text></g><g><title>candid::types::internal::env_id (559 instructions, 0.94%)</title><rect x="19.3717%" y="181" width="0.9360%" height="15" fill="rgb(240,17,52)" fg:x="11569" fg:w="559"/><text x="19.6647%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,907 instructions, 4.87%)</title><rect x="15.6210%" y="197" width="4.8676%" height="15" fill="rgb(217,46,16)" fg:x="9329" fg:w="2907"/><text x="15.9139%" y="207.50">candi..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.06%)</title><rect x="20.4886%" y="197" width="0.0636%" height="15" fill="rgb(245,34,29)" fg:x="12236" fg:w="38"/><text x="20.7816%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="20.5757%" y="133" width="0.0100%" height="15" fill="rgb(208,227,13)" fg:x="12288" fg:w="6"/><text x="20.8686%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="20.5924%" y="133" width="0.0167%" height="15" fill="rgb(237,42,3)" fg:x="12298" fg:w="10"/><text x="20.8854%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.24%)</title><rect x="20.5522%" y="149" width="0.2361%" height="15" fill="rgb(205,200,30)" fg:x="12274" fg:w="141"/><text x="20.8452%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.24%)</title><rect x="20.5522%" y="165" width="0.2394%" height="15" fill="rgb(241,140,18)" fg:x="12274" fg:w="143"/><text x="20.8452%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.25%)</title><rect x="20.5522%" y="181" width="0.2478%" height="15" fill="rgb(207,141,39)" fg:x="12274" fg:w="148"/><text x="20.8452%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="20.8771%" y="133" width="0.0100%" height="15" fill="rgb(247,66,49)" fg:x="12468" fg:w="6"/><text x="21.1700%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="20.8938%" y="133" width="0.0167%" height="15" fill="rgb(238,193,30)" fg:x="12478" fg:w="10"/><text x="21.1868%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.24%)</title><rect x="20.8536%" y="149" width="0.2361%" height="15" fill="rgb(236,167,37)" fg:x="12454" fg:w="141"/><text x="21.1466%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.24%)</title><rect x="20.8536%" y="165" width="0.2394%" height="15" fill="rgb(246,3,2)" fg:x="12454" fg:w="143"/><text x="21.1466%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.25%)</title><rect x="20.8536%" y="181" width="0.2478%" height="15" fill="rgb(229,203,24)" fg:x="12454" fg:w="148"/><text x="21.1466%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.60%)</title><rect x="20.5522%" y="197" width="0.6028%" height="15" fill="rgb(236,17,40)" fg:x="12274" fg:w="360"/><text x="20.8452%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="21.1550%" y="181" width="0.0469%" height="15" fill="rgb(239,182,47)" fg:x="12634" fg:w="28"/><text x="21.4480%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.03%)</title><rect x="21.2019%" y="181" width="0.0268%" height="15" fill="rgb(226,91,41)" fg:x="12662" fg:w="16"/><text x="21.4949%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.03%)</title><rect x="21.2287%" y="181" width="0.0268%" height="15" fill="rgb(211,115,42)" fg:x="12678" fg:w="16"/><text x="21.5217%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (141 instructions, 0.24%)</title><rect x="21.1550%" y="197" width="0.2361%" height="15" fill="rgb(240,199,2)" fg:x="12634" fg:w="141"/><text x="21.4480%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.3911%" y="197" width="0.0184%" height="15" fill="rgb(215,207,36)" fg:x="12775" fg:w="11"/><text x="21.6841%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.4096%" y="197" width="0.0184%" height="15" fill="rgb(212,76,14)" fg:x="12786" fg:w="11"/><text x="21.7025%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.4280%" y="197" width="0.0184%" height="15" fill="rgb(211,56,51)" fg:x="12797" fg:w="11"/><text x="21.7209%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,651 instructions, 6.11%)</title><rect x="15.6210%" y="213" width="6.1134%" height="15" fill="rgb(220,156,34)" fg:x="9329" fg:w="3651"/><text x="15.9139%" y="223.50">candid..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.69%)</title><rect x="21.7344%" y="197" width="0.6915%" height="15" fill="rgb(215,148,33)" fg:x="12980" fg:w="413"/><text x="22.0274%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.70%)</title><rect x="21.7344%" y="213" width="0.6982%" height="15" fill="rgb(214,114,19)" fg:x="12980" fg:w="417"/><text x="22.0274%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="22.4326%" y="197" width="0.0318%" height="15" fill="rgb(250,197,5)" fg:x="13397" fg:w="19"/><text x="22.7256%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.5013%" y="149" width="0.0100%" height="15" fill="rgb(252,182,16)" fg:x="13438" fg:w="6"/><text x="22.7943%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.5180%" y="149" width="0.0167%" height="15" fill="rgb(253,184,43)" fg:x="13448" fg:w="10"/><text x="22.8110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.32%)</title><rect x="22.4645%" y="165" width="0.3232%" height="15" fill="rgb(235,106,8)" fg:x="13416" fg:w="193"/><text x="22.7574%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.33%)</title><rect x="22.4645%" y="181" width="0.3265%" height="15" fill="rgb(217,10,8)" fg:x="13416" fg:w="195"/><text x="22.7574%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.33%)</title><rect x="22.4645%" y="197" width="0.3349%" height="15" fill="rgb(212,176,13)" fg:x="13416" fg:w="200"/><text x="22.7574%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.8362%" y="133" width="0.0100%" height="15" fill="rgb(214,162,24)" fg:x="13638" fg:w="6"/><text x="23.1292%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.8529%" y="133" width="0.0167%" height="15" fill="rgb(248,11,51)" fg:x="13648" fg:w="10"/><text x="23.1459%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="22.8697%" y="133" width="0.1239%" height="15" fill="rgb(228,52,38)" fg:x="13658" fg:w="74"/><text x="23.1626%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.41%)</title><rect x="22.7994%" y="149" width="0.4069%" height="15" fill="rgb(205,23,33)" fg:x="13616" fg:w="243"/><text x="23.0923%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.41%)</title><rect x="22.7994%" y="165" width="0.4102%" height="15" fill="rgb(221,47,4)" fg:x="13616" fg:w="245"/><text x="23.0923%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.42%)</title><rect x="22.7994%" y="181" width="0.4186%" height="15" fill="rgb(206,160,11)" fg:x="13616" fg:w="250"/><text x="23.0923%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.47%)</title><rect x="22.7994%" y="197" width="0.4722%" height="15" fill="rgb(218,184,26)" fg:x="13616" fg:w="282"/><text x="23.0923%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.2715%" y="197" width="0.0184%" height="15" fill="rgb(225,39,11)" fg:x="13898" fg:w="11"/><text x="23.5645%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (614 instructions, 1.03%)</title><rect x="22.4326%" y="213" width="1.0281%" height="15" fill="rgb(254,43,9)" fg:x="13397" fg:w="614"/><text x="22.7256%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,571 instructions, 22.72%)</title><rect x="0.9092%" y="229" width="22.7240%" height="15" fill="rgb(233,172,40)" fg:x="543" fg:w="13571"/><text x="1.2022%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.6567%" y="181" width="0.0100%" height="15" fill="rgb(246,185,32)" fg:x="14128" fg:w="6"/><text x="23.9496%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="23.6734%" y="181" width="0.0938%" height="15" fill="rgb(228,71,31)" fg:x="14138" fg:w="56"/><text x="23.9664%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.7672%" y="181" width="0.0167%" height="15" fill="rgb(226,96,40)" fg:x="14194" fg:w="10"/><text x="24.0602%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="23.7839%" y="181" width="0.1239%" height="15" fill="rgb(231,152,2)" fg:x="14204" fg:w="74"/><text x="24.0769%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 0.38%)</title><rect x="23.6332%" y="197" width="0.3818%" height="15" fill="rgb(247,123,41)" fg:x="14114" fg:w="228"/><text x="23.9262%" y="207.50"></text></g><g><title>__rdl_dealloc (230 instructions, 0.39%)</title><rect x="23.6332%" y="213" width="0.3851%" height="15" fill="rgb(215,28,12)" fg:x="14114" fg:w="230"/><text x="23.9262%" y="223.50"></text></g><g><title>__rust_dealloc (235 instructions, 0.39%)</title><rect x="23.6332%" y="229" width="0.3935%" height="15" fill="rgb(249,17,1)" fg:x="14114" fg:w="235"/><text x="23.9262%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (14,046 instructions, 23.52%)</title><rect x="0.5760%" y="245" width="23.5194%" height="15" fill="rgb(219,86,10)" fg:x="344" fg:w="14046"/><text x="0.8690%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (15 instructions, 0.03%)</title><rect x="24.0954%" y="229" width="0.0251%" height="15" fill="rgb(237,98,39)" fg:x="14390" fg:w="15"/><text x="24.3883%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (43,565 instructions, 72.95%)</title><rect x="24.0954%" y="245" width="72.9475%" height="15" fill="rgb(251,88,32)" fg:x="14390" fg:w="43565"/><text x="24.3883%" y="255.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="97.0429%" y="213" width="0.0134%" height="15" fill="rgb(246,80,37)" fg:x="57955" fg:w="8"/><text x="97.3359%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="97.0931%" y="133" width="0.0938%" height="15" fill="rgb(241,108,46)" fg:x="57985" fg:w="56"/><text x="97.3861%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="97.1869%" y="133" width="0.0100%" height="15" fill="rgb(249,204,53)" fg:x="58041" fg:w="6"/><text x="97.4799%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (157 instructions, 0.26%)</title><rect x="97.0563%" y="149" width="0.2629%" height="15" fill="rgb(224,200,32)" fg:x="57963" fg:w="157"/><text x="97.3493%" y="159.50"></text></g><g><title>__rdl_dealloc (159 instructions, 0.27%)</title><rect x="97.0563%" y="165" width="0.2662%" height="15" fill="rgb(237,208,7)" fg:x="57963" fg:w="159"/><text x="97.3493%" y="175.50"></text></g><g><title>__rust_dealloc (164 instructions, 0.27%)</title><rect x="97.0563%" y="181" width="0.2746%" height="15" fill="rgb(226,102,35)" fg:x="57963" fg:w="164"/><text x="97.3493%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (196 instructions, 0.33%)</title><rect x="97.0563%" y="197" width="0.3282%" height="15" fill="rgb(254,52,8)" fg:x="57963" fg:w="196"/><text x="97.3493%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.23%)</title><rect x="97.3845%" y="181" width="0.2261%" height="15" fill="rgb(225,224,14)" fg:x="58159" fg:w="135"/><text x="97.6775%" y="191.50"></text></g><g><title>memset (139 instructions, 0.23%)</title><rect x="97.3845%" y="197" width="0.2327%" height="15" fill="rgb(241,126,20)" fg:x="58159" fg:w="139"/><text x="97.6775%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (410 instructions, 0.69%)</title><rect x="97.0563%" y="213" width="0.6865%" height="15" fill="rgb(238,50,17)" fg:x="57963" fg:w="410"/><text x="97.3493%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (503 instructions, 0.84%)</title><rect x="97.0429%" y="229" width="0.8422%" height="15" fill="rgb(217,130,9)" fg:x="57955" fg:w="503"/><text x="97.3359%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="97.8902%" y="197" width="0.0553%" height="15" fill="rgb(214,36,35)" fg:x="58461" fg:w="33"/><text x="98.1832%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.15%)</title><rect x="97.8902%" y="213" width="0.1474%" height="15" fill="rgb(218,183,38)" fg:x="58461" fg:w="88"/><text x="98.1832%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="98.0375%" y="101" width="0.0151%" height="15" fill="rgb(215,94,28)" fg:x="58549" fg:w="9"/><text x="98.3305%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="98.0526%" y="101" width="0.0151%" height="15" fill="rgb(205,72,47)" fg:x="58558" fg:w="9"/><text x="98.3456%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.20%)</title><rect x="98.0375%" y="117" width="0.2009%" height="15" fill="rgb(205,213,8)" fg:x="58549" fg:w="120"/><text x="98.3305%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.22%)</title><rect x="98.0375%" y="133" width="0.2177%" height="15" fill="rgb(238,75,9)" fg:x="58549" fg:w="130"/><text x="98.3305%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="98.0375%" y="149" width="0.2227%" height="15" fill="rgb(210,93,6)" fg:x="58549" fg:w="133"/><text x="98.3305%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.23%)</title><rect x="98.0375%" y="165" width="0.2327%" height="15" fill="rgb(214,13,34)" fg:x="58549" fg:w="139"/><text x="98.3305%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 instructions, 0.29%)</title><rect x="98.0375%" y="181" width="0.2863%" height="15" fill="rgb(248,204,22)" fg:x="58549" fg:w="171"/><text x="98.3305%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (238 instructions, 0.40%)</title><rect x="98.0375%" y="197" width="0.3985%" height="15" fill="rgb(247,14,31)" fg:x="58549" fg:w="238"/><text x="98.3305%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="98.4361%" y="197" width="0.0167%" height="15" fill="rgb(229,108,34)" fg:x="58787" fg:w="10"/><text x="98.7290%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4528%" y="181" width="0.0184%" height="15" fill="rgb(254,42,13)" fg:x="58797" fg:w="11"/><text x="98.7458%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4779%" y="181" width="0.0184%" height="15" fill="rgb(253,165,23)" fg:x="58812" fg:w="11"/><text x="98.7709%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="98.4528%" y="197" width="0.0502%" height="15" fill="rgb(220,182,38)" fg:x="58797" fg:w="30"/><text x="98.7458%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (480 instructions, 0.80%)</title><rect x="98.0375%" y="213" width="0.8037%" height="15" fill="rgb(236,75,27)" fg:x="58549" fg:w="480"/><text x="98.3305%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="98.8413%" y="213" width="0.0100%" height="15" fill="rgb(242,189,25)" fg:x="59029" fg:w="6"/><text x="99.1342%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.05%)</title><rect x="98.8513%" y="197" width="0.0519%" height="15" fill="rgb(248,126,50)" fg:x="59035" fg:w="31"/><text x="99.1443%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.14%)</title><rect x="98.8513%" y="213" width="0.1440%" height="15" fill="rgb(248,24,43)" fg:x="59035" fg:w="86"/><text x="99.1443%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="98.9953%" y="213" width="0.0100%" height="15" fill="rgb(252,52,49)" fg:x="59121" fg:w="6"/><text x="99.2883%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="99.0054%" y="213" width="0.0251%" height="15" fill="rgb(236,81,34)" fg:x="59127" fg:w="15"/><text x="99.2983%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (760 instructions, 1.27%)</title><rect x="97.8902%" y="229" width="1.2726%" height="15" fill="rgb(233,97,42)" fg:x="58461" fg:w="760"/><text x="98.1832%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.1946%" y="181" width="0.0100%" height="15" fill="rgb(243,182,9)" fg:x="59240" fg:w="6"/><text x="99.4876%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (68 instructions, 0.11%)</title><rect x="99.1711%" y="197" width="0.1139%" height="15" fill="rgb(213,163,24)" fg:x="59226" fg:w="68"/><text x="99.4641%" y="207.50"></text></g><g><title>__rdl_dealloc (70 instructions, 0.12%)</title><rect x="99.1711%" y="213" width="0.1172%" height="15" fill="rgb(245,99,22)" fg:x="59226" fg:w="70"/><text x="99.4641%" y="223.50"></text></g><g><title>__rust_dealloc (75 instructions, 0.13%)</title><rect x="99.1711%" y="229" width="0.1256%" height="15" fill="rgb(222,21,34)" fg:x="59226" fg:w="75"/><text x="99.4641%" y="239.50"></text></g><g><title>candid::utils::write_args (1,422 instructions, 2.38%)</title><rect x="97.0429%" y="245" width="2.3811%" height="15" fill="rgb(219,196,23)" fg:x="57955" fg:w="1422"/><text x="97.3359%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.4474%" y="197" width="0.0100%" height="15" fill="rgb(209,64,29)" fg:x="59391" fg:w="6"/><text x="99.7404%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.4575%" y="197" width="0.0268%" height="15" fill="rgb(240,145,31)" fg:x="59397" fg:w="16"/><text x="99.7504%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.4240%" y="213" width="0.1641%" height="15" fill="rgb(237,212,46)" fg:x="59377" fg:w="98"/><text x="99.7170%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.17%)</title><rect x="99.4240%" y="229" width="0.1674%" height="15" fill="rgb(244,71,37)" fg:x="59377" fg:w="100"/><text x="99.7170%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="99.6366%" y="197" width="0.0100%" height="15" fill="rgb(231,150,21)" fg:x="59504" fg:w="6"/><text x="99.9296%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.6467%" y="197" width="0.0268%" height="15" fill="rgb(206,218,43)" fg:x="59510" fg:w="16"/><text x="99.9397%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (150 instructions, 0.25%)</title><rect x="99.5998%" y="213" width="0.2512%" height="15" fill="rgb(247,11,2)" fg:x="59482" fg:w="150"/><text x="99.8928%" y="223.50"></text></g><g><title>__rdl_dealloc (152 instructions, 0.25%)</title><rect x="99.5998%" y="229" width="0.2545%" height="15" fill="rgb(242,1,19)" fg:x="59482" fg:w="152"/><text x="99.8928%" y="239.50"></text></g><g><title>__rust_dealloc (262 instructions, 0.44%)</title><rect x="99.4240%" y="245" width="0.4387%" height="15" fill="rgb(240,90,15)" fg:x="59377" fg:w="262"/><text x="99.7170%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (59,710 instructions, 99.98%)</title><rect x="0.0134%" y="261" width="99.9816%" height="15" fill="rgb(207,24,47)" fg:x="8" fg:w="59710"/><text x="0.3064%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (59,721 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,224,36)" fg:x="0" fg:w="59721"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_get (59,721 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,92,24)" fg:x="0" fg:w="59721"/><text x="0.2930%" y="287.50">canister_update batch_get</text></g></svg></svg>