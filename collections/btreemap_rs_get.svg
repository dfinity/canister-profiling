<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="64972"><g><title>ic_cdk::setup (24 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0369%" height="15" fill="rgb(228,162,24)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.0369%" y="197" width="0.1262%" height="15" fill="rgb(236,87,32)" fg:x="24" fg:w="82"/><text x="0.3299%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.1631%" y="197" width="0.1262%" height="15" fill="rgb(251,132,26)" fg:x="106" fg:w="82"/><text x="0.4561%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="0.2894%" y="165" width="0.1262%" height="15" fill="rgb(253,38,47)" fg:x="188" fg:w="82"/><text x="0.5823%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="0.4156%" y="149" width="0.1262%" height="15" fill="rgb(211,25,25)" fg:x="270" fg:w="82"/><text x="0.7085%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="0.5418%" y="149" width="0.6818%" height="15" fill="rgb(246,198,6)" fg:x="352" fg:w="443"/><text x="0.8347%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="1.2236%" y="149" width="0.1462%" height="15" fill="rgb(251,119,37)" fg:x="795" fg:w="95"/><text x="1.5166%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.3698%" y="149" width="0.0923%" height="15" fill="rgb(234,24,4)" fg:x="890" fg:w="60"/><text x="1.6628%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.4622%" y="149" width="0.0923%" height="15" fill="rgb(228,79,10)" fg:x="950" fg:w="60"/><text x="1.7551%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.5545%" y="149" width="0.0923%" height="15" fill="rgb(212,15,11)" fg:x="1010" fg:w="60"/><text x="1.8475%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.09%)</title><rect x="1.6469%" y="149" width="0.0923%" height="15" fill="rgb(234,178,13)" fg:x="1070" fg:w="60"/><text x="1.9398%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="1.7392%" y="149" width="0.1262%" height="15" fill="rgb(221,127,8)" fg:x="1130" fg:w="82"/><text x="2.0322%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="1.8654%" y="149" width="0.1077%" height="15" fill="rgb(208,32,36)" fg:x="1212" fg:w="70"/><text x="2.1584%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="1.9732%" y="149" width="0.6818%" height="15" fill="rgb(218,147,46)" fg:x="1282" fg:w="443"/><text x="2.2661%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="2.6550%" y="149" width="0.0292%" height="15" fill="rgb(217,189,34)" fg:x="1725" fg:w="19"/><text x="2.9480%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="2.6842%" y="133" width="0.1262%" height="15" fill="rgb(254,187,30)" fg:x="1744" fg:w="82"/><text x="2.9772%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="2.8104%" y="101" width="0.1031%" height="15" fill="rgb(246,218,16)" fg:x="1826" fg:w="67"/><text x="3.1034%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="2.8104%" y="117" width="0.1478%" height="15" fill="rgb(247,205,35)" fg:x="1826" fg:w="96"/><text x="3.1034%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="2.9582%" y="69" width="0.0169%" height="15" fill="rgb(222,181,13)" fg:x="1922" fg:w="11"/><text x="3.2512%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="2.9751%" y="53" width="0.0539%" height="15" fill="rgb(235,198,2)" fg:x="1933" fg:w="35"/><text x="3.2681%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="2.9751%" y="69" width="0.0985%" height="15" fill="rgb(229,49,41)" fg:x="1933" fg:w="64"/><text x="3.2681%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.22%)</title><rect x="2.9582%" y="85" width="0.2216%" height="15" fill="rgb(209,68,51)" fg:x="1922" fg:w="144"/><text x="3.2512%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.32%)</title><rect x="2.9582%" y="101" width="0.3217%" height="15" fill="rgb(231,28,12)" fg:x="1922" fg:w="209"/><text x="3.2512%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.34%)</title><rect x="2.9582%" y="117" width="0.3371%" height="15" fill="rgb(249,214,22)" fg:x="1922" fg:w="219"/><text x="3.2512%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.70%)</title><rect x="2.8104%" y="133" width="0.7034%" height="15" fill="rgb(254,140,40)" fg:x="1826" fg:w="457"/><text x="3.1034%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.04%)</title><rect x="2.6842%" y="149" width="1.0420%" height="15" fill="rgb(253,178,28)" fg:x="1744" fg:w="677"/><text x="2.9772%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="3.7262%" y="149" width="0.1462%" height="15" fill="rgb(247,93,23)" fg:x="2421" fg:w="95"/><text x="4.0192%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="3.8724%" y="149" width="0.0923%" height="15" fill="rgb(216,129,53)" fg:x="2516" fg:w="60"/><text x="4.1654%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="3.9648%" y="149" width="0.1170%" height="15" fill="rgb(250,30,48)" fg:x="2576" fg:w="76"/><text x="4.2578%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.11%)</title><rect x="4.0818%" y="149" width="0.1077%" height="15" fill="rgb(244,100,37)" fg:x="2652" fg:w="70"/><text x="4.3747%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.68%)</title><rect x="4.1895%" y="133" width="0.6818%" height="15" fill="rgb(238,122,20)" fg:x="2722" fg:w="443"/><text x="4.4825%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.03%)</title><rect x="4.8713%" y="133" width="0.0292%" height="15" fill="rgb(253,173,31)" fg:x="3165" fg:w="19"/><text x="5.1643%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="4.9006%" y="117" width="0.1262%" height="15" fill="rgb(224,59,5)" fg:x="3184" fg:w="82"/><text x="5.1935%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.10%)</title><rect x="5.0268%" y="85" width="0.1031%" height="15" fill="rgb(253,112,24)" fg:x="3266" fg:w="67"/><text x="5.3197%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.15%)</title><rect x="5.0268%" y="101" width="0.1478%" height="15" fill="rgb(244,96,50)" fg:x="3266" fg:w="96"/><text x="5.3197%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="5.1745%" y="53" width="0.0169%" height="15" fill="rgb(215,49,51)" fg:x="3362" fg:w="11"/><text x="5.4675%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.05%)</title><rect x="5.1915%" y="37" width="0.0539%" height="15" fill="rgb(206,163,43)" fg:x="3373" fg:w="35"/><text x="5.4844%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.10%)</title><rect x="5.1915%" y="53" width="0.0985%" height="15" fill="rgb(218,165,34)" fg:x="3373" fg:w="64"/><text x="5.4844%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.22%)</title><rect x="5.1745%" y="69" width="0.2216%" height="15" fill="rgb(236,77,15)" fg:x="3362" fg:w="144"/><text x="5.4675%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.32%)</title><rect x="5.1745%" y="85" width="0.3217%" height="15" fill="rgb(217,158,47)" fg:x="3362" fg:w="209"/><text x="5.4675%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.34%)</title><rect x="5.1745%" y="101" width="0.3371%" height="15" fill="rgb(224,57,31)" fg:x="3362" fg:w="219"/><text x="5.4675%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.70%)</title><rect x="5.0268%" y="117" width="0.7034%" height="15" fill="rgb(215,62,28)" fg:x="3266" fg:w="457"/><text x="5.3197%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.04%)</title><rect x="4.9006%" y="133" width="1.0420%" height="15" fill="rgb(227,21,13)" fg:x="3184" fg:w="677"/><text x="5.1935%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.15%)</title><rect x="5.9426%" y="133" width="0.1462%" height="15" fill="rgb(210,69,21)" fg:x="3861" fg:w="95"/><text x="6.2355%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="6.0888%" y="133" width="0.0923%" height="15" fill="rgb(213,11,48)" fg:x="3956" fg:w="60"/><text x="6.3817%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.13%)</title><rect x="6.1811%" y="117" width="0.1262%" height="15" fill="rgb(223,192,40)" fg:x="4016" fg:w="82"/><text x="6.4741%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.15%)</title><rect x="6.3073%" y="117" width="0.1462%" height="15" fill="rgb(238,32,39)" fg:x="4098" fg:w="95"/><text x="6.6003%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="6.4535%" y="117" width="0.1170%" height="15" fill="rgb(246,215,13)" fg:x="4193" fg:w="76"/><text x="6.7465%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.51%)</title><rect x="6.1811%" y="133" width="0.5079%" height="15" fill="rgb(237,203,50)" fg:x="4016" fg:w="330"/><text x="6.4741%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="6.6890%" y="133" width="0.1262%" height="15" fill="rgb(253,79,53)" fg:x="4346" fg:w="82"/><text x="6.9820%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 3.00%)</title><rect x="4.1895%" y="149" width="2.9951%" height="15" fill="rgb(249,11,7)" fg:x="2722" fg:w="1946"/><text x="4.4825%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.12%)</title><rect x="7.1846%" y="149" width="0.1170%" height="15" fill="rgb(215,76,42)" fg:x="4668" fg:w="76"/><text x="7.4776%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3016%" y="149" width="0.0231%" height="15" fill="rgb(207,211,36)" fg:x="4744" fg:w="15"/><text x="7.5946%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3247%" y="149" width="0.0231%" height="15" fill="rgb(226,201,25)" fg:x="4759" fg:w="15"/><text x="7.6177%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="7.3478%" y="149" width="0.0231%" height="15" fill="rgb(227,110,38)" fg:x="4774" fg:w="15"/><text x="7.6407%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="7.3709%" y="149" width="0.0108%" height="15" fill="rgb(238,70,54)" fg:x="4789" fg:w="7"/><text x="7.6638%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="7.3816%" y="133" width="0.1401%" height="15" fill="rgb(205,113,52)" fg:x="4796" fg:w="91"/><text x="7.6746%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (187 instructions, 0.29%)</title><rect x="7.3816%" y="149" width="0.2878%" height="15" fill="rgb(215,30,37)" fg:x="4796" fg:w="187"/><text x="7.6746%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.12%)</title><rect x="7.6695%" y="117" width="0.1231%" height="15" fill="rgb(252,168,17)" fg:x="4983" fg:w="80"/><text x="7.9624%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (128 instructions, 0.20%)</title><rect x="7.6695%" y="133" width="0.1970%" height="15" fill="rgb(230,179,35)" fg:x="4983" fg:w="128"/><text x="7.9624%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (213 instructions, 0.33%)</title><rect x="7.6695%" y="149" width="0.3278%" height="15" fill="rgb(251,195,40)" fg:x="4983" fg:w="213"/><text x="7.9624%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="7.9973%" y="149" width="0.1401%" height="15" fill="rgb(221,21,31)" fg:x="5196" fg:w="91"/><text x="8.2903%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="8.1374%" y="149" width="0.1370%" height="15" fill="rgb(235,212,17)" fg:x="5287" fg:w="89"/><text x="8.4303%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.2743%" y="149" width="0.1401%" height="15" fill="rgb(247,165,4)" fg:x="5376" fg:w="91"/><text x="8.5673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="8.4144%" y="149" width="0.1401%" height="15" fill="rgb(222,48,9)" fg:x="5467" fg:w="91"/><text x="8.7074%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="8.5606%" y="149" width="0.1370%" height="15" fill="rgb(242,84,36)" fg:x="5562" fg:w="89"/><text x="8.8536%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.60%)</title><rect x="8.6976%" y="149" width="0.6033%" height="15" fill="rgb(209,12,51)" fg:x="5651" fg:w="392"/><text x="8.9906%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.60%)</title><rect x="9.3009%" y="149" width="0.6033%" height="15" fill="rgb(244,161,32)" fg:x="6043" fg:w="392"/><text x="9.5939%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.78%)</title><rect x="9.9043%" y="149" width="0.7757%" height="15" fill="rgb(243,182,16)" fg:x="6435" fg:w="504"/><text x="10.1972%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,878 instructions, 12.13%)</title><rect x="0.4156%" y="165" width="12.1252%" height="15" fill="rgb(247,45,4)" fg:x="270" fg:w="7878"/><text x="0.7085%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (344 instructions, 0.53%)</title><rect x="12.5408%" y="165" width="0.5295%" height="15" fill="rgb(226,176,25)" fg:x="8148" fg:w="344"/><text x="12.8338%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="13.0702%" y="149" width="0.0108%" height="15" fill="rgb(233,218,31)" fg:x="8492" fg:w="7"/><text x="13.3632%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="13.0702%" y="165" width="0.0600%" height="15" fill="rgb(236,58,49)" fg:x="8492" fg:w="39"/><text x="13.3632%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="13.1303%" y="165" width="0.1262%" height="15" fill="rgb(209,85,32)" fg:x="8531" fg:w="82"/><text x="13.4232%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="13.2565%" y="149" width="0.0108%" height="15" fill="rgb(248,123,2)" fg:x="8613" fg:w="7"/><text x="13.5494%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="13.2673%" y="133" width="0.0908%" height="15" fill="rgb(236,89,52)" fg:x="8620" fg:w="59"/><text x="13.5602%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="13.3581%" y="133" width="0.1447%" height="15" fill="rgb(235,103,42)" fg:x="8679" fg:w="94"/><text x="13.6510%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="13.5027%" y="133" width="0.2663%" height="15" fill="rgb(229,91,45)" fg:x="8773" fg:w="173"/><text x="13.7957%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="13.2673%" y="149" width="0.8912%" height="15" fill="rgb(210,45,21)" fg:x="8620" fg:w="579"/><text x="13.5602%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 1.23%)</title><rect x="13.2565%" y="165" width="1.2267%" height="15" fill="rgb(235,168,5)" fg:x="8613" fg:w="797"/><text x="13.5494%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.14%)</title><rect x="14.4832%" y="165" width="0.1401%" height="15" fill="rgb(250,90,32)" fg:x="9410" fg:w="91"/><text x="14.7761%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="14.6232%" y="149" width="0.0108%" height="15" fill="rgb(248,101,15)" fg:x="9501" fg:w="7"/><text x="14.9162%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="14.6340%" y="133" width="0.0908%" height="15" fill="rgb(234,199,15)" fg:x="9508" fg:w="59"/><text x="14.9270%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.14%)</title><rect x="14.7248%" y="133" width="0.1447%" height="15" fill="rgb(252,121,28)" fg:x="9567" fg:w="94"/><text x="15.0178%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.27%)</title><rect x="14.8695%" y="133" width="0.2663%" height="15" fill="rgb(207,203,33)" fg:x="9661" fg:w="173"/><text x="15.1625%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.89%)</title><rect x="14.6340%" y="149" width="0.8912%" height="15" fill="rgb(217,27,10)" fg:x="9508" fg:w="579"/><text x="14.9270%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.12%)</title><rect x="15.5251%" y="149" width="0.1185%" height="15" fill="rgb(239,214,12)" fg:x="10087" fg:w="77"/><text x="15.8181%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.14%)</title><rect x="15.6437%" y="133" width="0.1370%" height="15" fill="rgb(245,84,21)" fg:x="10164" fg:w="89"/><text x="15.9366%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.20%)</title><rect x="15.6437%" y="149" width="0.2047%" height="15" fill="rgb(235,175,47)" fg:x="10164" fg:w="133"/><text x="15.9366%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 1.50%)</title><rect x="14.6232%" y="165" width="1.5006%" height="15" fill="rgb(220,111,44)" fg:x="9501" fg:w="975"/><text x="14.9162%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.09%)</title><rect x="16.1239%" y="117" width="0.0908%" height="15" fill="rgb(220,217,8)" fg:x="10476" fg:w="59"/><text x="16.4168%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.16%)</title><rect x="16.1239%" y="133" width="0.1570%" height="15" fill="rgb(214,84,54)" fg:x="10476" fg:w="102"/><text x="16.4168%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.50%)</title><rect x="16.1239%" y="149" width="0.4971%" height="15" fill="rgb(252,28,9)" fg:x="10476" fg:w="323"/><text x="16.4168%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.618 (34 instructions, 0.05%)</title><rect x="16.6210%" y="149" width="0.0523%" height="15" fill="rgb(235,116,40)" fg:x="10799" fg:w="34"/><text x="16.9140%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="16.6733%" y="149" width="0.0200%" height="15" fill="rgb(223,179,34)" fg:x="10833" fg:w="13"/><text x="16.9663%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 0.85%)</title><rect x="16.1239%" y="165" width="0.8542%" height="15" fill="rgb(243,35,52)" fg:x="10476" fg:w="555"/><text x="16.4168%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.08%)</title><rect x="16.9781%" y="165" width="0.0754%" height="15" fill="rgb(218,20,36)" fg:x="11031" fg:w="49"/><text x="17.2711%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.13%)</title><rect x="17.0535%" y="149" width="0.1277%" height="15" fill="rgb(251,219,52)" fg:x="11080" fg:w="83"/><text x="17.3465%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.04%)</title><rect x="17.2490%" y="133" width="0.0354%" height="15" fill="rgb(216,89,24)" fg:x="11207" fg:w="23"/><text x="17.5419%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.21%)</title><rect x="17.2490%" y="149" width="0.2124%" height="15" fill="rgb(252,16,8)" fg:x="11207" fg:w="138"/><text x="17.5419%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.48%)</title><rect x="17.0535%" y="165" width="0.4756%" height="15" fill="rgb(217,10,45)" fg:x="11080" fg:w="309"/><text x="17.3465%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.05%)</title><rect x="17.5291%" y="149" width="0.0539%" height="15" fill="rgb(231,13,33)" fg:x="11389" fg:w="35"/><text x="17.8221%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.05%)</title><rect x="17.5830%" y="149" width="0.0523%" height="15" fill="rgb(240,141,46)" fg:x="11424" fg:w="34"/><text x="17.8759%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.05%)</title><rect x="17.6353%" y="149" width="0.0523%" height="15" fill="rgb(244,216,24)" fg:x="11458" fg:w="34"/><text x="17.9283%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.05%)</title><rect x="17.6876%" y="149" width="0.0508%" height="15" fill="rgb(208,39,3)" fg:x="11492" fg:w="33"/><text x="17.9806%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.38%)</title><rect x="17.5291%" y="165" width="0.3848%" height="15" fill="rgb(250,216,13)" fg:x="11389" fg:w="250"/><text x="17.8221%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.9139%" y="165" width="0.0200%" height="15" fill="rgb(228,202,46)" fg:x="11639" fg:w="13"/><text x="18.2068%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.9339%" y="165" width="0.0200%" height="15" fill="rgb(230,71,36)" fg:x="11652" fg:w="13"/><text x="18.2268%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="17.9539%" y="165" width="0.0200%" height="15" fill="rgb(211,39,38)" fg:x="11665" fg:w="13"/><text x="18.2469%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.07%)</title><rect x="17.9739%" y="165" width="0.0662%" height="15" fill="rgb(252,167,29)" fg:x="11678" fg:w="43"/><text x="18.2669%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="18.0401%" y="149" width="0.0108%" height="15" fill="rgb(247,125,41)" fg:x="11721" fg:w="7"/><text x="18.3330%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="18.0509%" y="133" width="0.0416%" height="15" fill="rgb(211,115,18)" fg:x="11728" fg:w="27"/><text x="18.3438%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.22%)</title><rect x="18.0509%" y="149" width="0.2186%" height="15" fill="rgb(229,117,15)" fg:x="11728" fg:w="142"/><text x="18.3438%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="18.2694%" y="117" width="0.0416%" height="15" fill="rgb(216,14,0)" fg:x="11870" fg:w="27"/><text x="18.5624%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.22%)</title><rect x="18.2694%" y="133" width="0.2186%" height="15" fill="rgb(229,119,3)" fg:x="11870" fg:w="142"/><text x="18.5624%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.29%)</title><rect x="18.2694%" y="149" width="0.2863%" height="15" fill="rgb(226,8,42)" fg:x="11870" fg:w="186"/><text x="18.5624%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="18.5557%" y="149" width="0.0200%" height="15" fill="rgb(227,138,23)" fg:x="12056" fg:w="13"/><text x="18.8487%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="18.5757%" y="149" width="0.0108%" height="15" fill="rgb(226,104,4)" fg:x="12069" fg:w="7"/><text x="18.8687%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (415 instructions, 0.64%)</title><rect x="18.0401%" y="165" width="0.6387%" height="15" fill="rgb(210,29,27)" fg:x="11721" fg:w="415"/><text x="18.3330%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="18.6788%" y="149" width="0.0416%" height="15" fill="rgb(237,87,48)" fg:x="12136" fg:w="27"/><text x="18.9718%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.21%)</title><rect x="18.6788%" y="165" width="0.2093%" height="15" fill="rgb(242,132,5)" fg:x="12136" fg:w="136"/><text x="18.9718%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,653 instructions, 21.01%)</title><rect x="0.2894%" y="181" width="21.0137%" height="15" fill="rgb(254,0,33)" fg:x="188" fg:w="13653"/><text x="0.5823%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="21.3030%" y="165" width="0.0108%" height="15" fill="rgb(207,101,10)" fg:x="13841" fg:w="7"/><text x="21.5960%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="21.3138%" y="133" width="0.0416%" height="15" fill="rgb(252,15,36)" fg:x="13848" fg:w="27"/><text x="21.6068%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (118 instructions, 0.18%)</title><rect x="21.3138%" y="149" width="0.1816%" height="15" fill="rgb(231,107,16)" fg:x="13848" fg:w="118"/><text x="21.6068%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.25%)</title><rect x="21.3138%" y="165" width="0.2493%" height="15" fill="rgb(208,26,42)" fg:x="13848" fg:w="162"/><text x="21.6068%" y="175.50"></text></g><g><title>memset (152 instructions, 0.23%)</title><rect x="21.5631%" y="165" width="0.2339%" height="15" fill="rgb(224,55,30)" fg:x="14010" fg:w="152"/><text x="21.8561%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (495 instructions, 0.76%)</title><rect x="21.3030%" y="181" width="0.7619%" height="15" fill="rgb(210,203,3)" fg:x="13841" fg:w="495"/><text x="21.5960%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.80%)</title><rect x="22.0649%" y="165" width="0.7973%" height="15" fill="rgb(225,153,32)" fg:x="14336" fg:w="518"/><text x="22.3579%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (116 instructions, 0.18%)</title><rect x="22.8622%" y="117" width="0.1785%" height="15" fill="rgb(208,105,0)" fg:x="14854" fg:w="116"/><text x="23.1551%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.25%)</title><rect x="22.8622%" y="133" width="0.2524%" height="15" fill="rgb(230,105,2)" fg:x="14854" fg:w="164"/><text x="23.1551%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (246 instructions, 0.38%)</title><rect x="22.8622%" y="149" width="0.3786%" height="15" fill="rgb(243,128,6)" fg:x="14854" fg:w="246"/><text x="23.1551%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.2408%" y="149" width="0.0231%" height="15" fill="rgb(215,152,38)" fg:x="15100" fg:w="15"/><text x="23.5337%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="23.2639%" y="149" width="0.0231%" height="15" fill="rgb(235,108,8)" fg:x="15115" fg:w="15"/><text x="23.5568%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (464 instructions, 0.71%)</title><rect x="22.8622%" y="165" width="0.7142%" height="15" fill="rgb(246,78,25)" fg:x="14854" fg:w="464"/><text x="23.1551%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.79%)</title><rect x="23.5763%" y="165" width="0.7942%" height="15" fill="rgb(227,146,53)" fg:x="15318" fg:w="516"/><text x="23.8693%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="24.3705%" y="165" width="0.0108%" height="15" fill="rgb(221,13,25)" fg:x="15834" fg:w="7"/><text x="24.6635%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,602 instructions, 2.47%)</title><rect x="22.0649%" y="181" width="2.4657%" height="15" fill="rgb(233,206,9)" fg:x="14336" fg:w="1602"/><text x="22.3579%" y="191.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.5306%" y="165" width="0.0108%" height="15" fill="rgb(252,69,17)" fg:x="15938" fg:w="7"/><text x="24.8235%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.09%)</title><rect x="24.5413%" y="165" width="0.0923%" height="15" fill="rgb(233,167,22)" fg:x="15945" fg:w="60"/><text x="24.8343%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.20%)</title><rect x="24.5306%" y="181" width="0.2016%" height="15" fill="rgb(247,0,21)" fg:x="15938" fg:w="131"/><text x="24.8235%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_get::{{closure}} (64,421 instructions, 99.15%)</title><rect x="0.2894%" y="197" width="99.1519%" height="15" fill="rgb(253,145,14)" fg:x="188" fg:w="64421"/><text x="0.5823%" y="207.50">btreemap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.4413%" y="197" width="0.0215%" height="15" fill="rgb(220,197,31)" fg:x="64609" fg:w="14"/><text x="99.7343%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.04%)</title><rect x="99.6014%" y="181" width="0.0416%" height="15" fill="rgb(221,96,42)" fg:x="64713" fg:w="27"/><text x="99.8943%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.31%)</title><rect x="99.4644%" y="197" width="0.3140%" height="15" fill="rgb(217,7,50)" fg:x="64624" fg:w="204"/><text x="99.7574%" y="207.50"></text></g><g><title>all (64,972 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,171,37)" fg:x="0" fg:w="64972"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (64,972 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,187,43)" fg:x="0" fg:w="64972"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>