<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53607"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0354%" height="15" fill="rgb(234,154,40)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0354%" y="197" width="0.1418%" height="15" fill="rgb(236,27,11)" fg:x="19" fg:w="76"/><text x="0.3284%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1772%" y="197" width="0.1418%" height="15" fill="rgb(213,122,44)" fg:x="95" fg:w="76"/><text x="0.4702%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3190%" y="165" width="0.1418%" height="15" fill="rgb(213,171,20)" fg:x="171" fg:w="76"/><text x="0.6120%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="0.4608%" y="149" width="0.1287%" height="15" fill="rgb(250,105,23)" fg:x="247" fg:w="69"/><text x="0.7537%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="0.5895%" y="149" width="0.7574%" height="15" fill="rgb(241,226,43)" fg:x="316" fg:w="406"/><text x="0.8824%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="1.3468%" y="149" width="0.1530%" height="15" fill="rgb(230,133,43)" fg:x="722" fg:w="82"/><text x="1.6398%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.4998%" y="149" width="0.1007%" height="15" fill="rgb(240,20,25)" fg:x="804" fg:w="54"/><text x="1.7928%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6005%" y="149" width="0.1007%" height="15" fill="rgb(215,47,49)" fg:x="858" fg:w="54"/><text x="1.8935%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7013%" y="149" width="0.1007%" height="15" fill="rgb(231,201,7)" fg:x="912" fg:w="54"/><text x="1.9942%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8020%" y="149" width="0.1007%" height="15" fill="rgb(208,89,15)" fg:x="966" fg:w="54"/><text x="2.0950%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="1.9027%" y="149" width="0.1287%" height="15" fill="rgb(244,202,23)" fg:x="1020" fg:w="69"/><text x="2.1957%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0315%" y="149" width="0.1213%" height="15" fill="rgb(232,52,5)" fg:x="1089" fg:w="65"/><text x="2.3244%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="2.1527%" y="149" width="0.7574%" height="15" fill="rgb(251,12,32)" fg:x="1154" fg:w="406"/><text x="2.4457%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9101%" y="149" width="0.0298%" height="15" fill="rgb(219,152,43)" fg:x="1560" fg:w="16"/><text x="3.2030%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9399%" y="133" width="0.1418%" height="15" fill="rgb(224,96,21)" fg:x="1576" fg:w="76"/><text x="3.2329%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0817%" y="101" width="0.1119%" height="15" fill="rgb(215,205,39)" fg:x="1652" fg:w="60"/><text x="3.3747%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0817%" y="117" width="0.1586%" height="15" fill="rgb(247,73,50)" fg:x="1652" fg:w="85"/><text x="3.3747%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2402%" y="69" width="0.0168%" height="15" fill="rgb(244,139,53)" fg:x="1737" fg:w="9"/><text x="3.5332%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2570%" y="53" width="0.0560%" height="15" fill="rgb(246,50,42)" fg:x="1746" fg:w="30"/><text x="3.5500%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2570%" y="69" width="0.1026%" height="15" fill="rgb(230,91,13)" fg:x="1746" fg:w="55"/><text x="3.5500%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2402%" y="85" width="0.2201%" height="15" fill="rgb(226,154,24)" fg:x="1737" fg:w="118"/><text x="3.5332%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2402%" y="101" width="0.3190%" height="15" fill="rgb(230,151,46)" fg:x="1737" fg:w="171"/><text x="3.5332%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2402%" y="117" width="0.3283%" height="15" fill="rgb(252,123,0)" fg:x="1737" fg:w="176"/><text x="3.5332%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="3.0817%" y="133" width="0.6939%" height="15" fill="rgb(233,129,38)" fg:x="1652" fg:w="372"/><text x="3.3747%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="2.9399%" y="149" width="1.0987%" height="15" fill="rgb(233,155,0)" fg:x="1576" fg:w="589"/><text x="3.2329%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="4.0387%" y="149" width="0.1530%" height="15" fill="rgb(216,220,44)" fg:x="2165" fg:w="82"/><text x="4.3316%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.1916%" y="149" width="0.1026%" height="15" fill="rgb(216,24,17)" fg:x="2247" fg:w="55"/><text x="4.4846%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="4.2942%" y="149" width="0.1175%" height="15" fill="rgb(232,28,48)" fg:x="2302" fg:w="63"/><text x="4.5872%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4117%" y="149" width="0.1213%" height="15" fill="rgb(245,102,30)" fg:x="2365" fg:w="65"/><text x="4.7047%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="4.5330%" y="133" width="0.7574%" height="15" fill="rgb(248,146,5)" fg:x="2430" fg:w="406"/><text x="4.8260%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.2904%" y="133" width="0.0298%" height="15" fill="rgb(235,224,54)" fg:x="2836" fg:w="16"/><text x="5.5833%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3202%" y="117" width="0.1418%" height="15" fill="rgb(243,212,4)" fg:x="2852" fg:w="76"/><text x="5.6132%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4620%" y="85" width="0.1119%" height="15" fill="rgb(230,184,40)" fg:x="2928" fg:w="60"/><text x="5.7549%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4620%" y="101" width="0.1586%" height="15" fill="rgb(207,175,21)" fg:x="2928" fg:w="85"/><text x="5.7549%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6205%" y="53" width="0.0168%" height="15" fill="rgb(247,190,10)" fg:x="3013" fg:w="9"/><text x="5.9135%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6373%" y="37" width="0.0560%" height="15" fill="rgb(219,127,33)" fg:x="3022" fg:w="30"/><text x="5.9303%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6373%" y="53" width="0.1026%" height="15" fill="rgb(225,89,8)" fg:x="3022" fg:w="55"/><text x="5.9303%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6205%" y="69" width="0.2201%" height="15" fill="rgb(245,201,40)" fg:x="3013" fg:w="118"/><text x="5.9135%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6205%" y="85" width="0.3190%" height="15" fill="rgb(226,119,13)" fg:x="3013" fg:w="171"/><text x="5.9135%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6205%" y="101" width="0.3283%" height="15" fill="rgb(249,129,11)" fg:x="3013" fg:w="176"/><text x="5.9135%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="5.4620%" y="117" width="0.6939%" height="15" fill="rgb(207,111,20)" fg:x="2928" fg:w="372"/><text x="5.7549%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="5.3202%" y="133" width="1.0987%" height="15" fill="rgb(228,222,46)" fg:x="2852" fg:w="589"/><text x="5.6132%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="6.4189%" y="133" width="0.1530%" height="15" fill="rgb(223,70,37)" fg:x="3441" fg:w="82"/><text x="6.7119%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.5719%" y="133" width="0.1026%" height="15" fill="rgb(244,29,25)" fg:x="3523" fg:w="55"/><text x="6.8649%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="6.6745%" y="117" width="0.1287%" height="15" fill="rgb(207,117,43)" fg:x="3578" fg:w="69"/><text x="6.9675%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8032%" y="117" width="0.1698%" height="15" fill="rgb(244,92,40)" fg:x="3647" fg:w="91"/><text x="7.0962%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="6.9730%" y="117" width="0.1175%" height="15" fill="rgb(211,66,1)" fg:x="3738" fg:w="63"/><text x="7.2659%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.53%)</title><rect x="6.6745%" y="133" width="0.5261%" height="15" fill="rgb(239,206,51)" fg:x="3578" fg:w="282"/><text x="6.9675%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.2006%" y="133" width="0.1418%" height="15" fill="rgb(236,7,28)" fg:x="3860" fg:w="76"/><text x="7.4935%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 3.19%)</title><rect x="4.5330%" y="149" width="3.1880%" height="15" fill="rgb(210,17,43)" fg:x="2430" fg:w="1709"/><text x="4.8260%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.7210%" y="149" width="0.1175%" height="15" fill="rgb(248,163,24)" fg:x="4139" fg:w="63"/><text x="8.0140%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8385%" y="149" width="0.0243%" height="15" fill="rgb(224,215,30)" fg:x="4202" fg:w="13"/><text x="8.1315%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8628%" y="149" width="0.0243%" height="15" fill="rgb(246,207,23)" fg:x="4215" fg:w="13"/><text x="8.1557%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.8870%" y="149" width="0.0131%" height="15" fill="rgb(247,70,32)" fg:x="4228" fg:w="7"/><text x="8.1800%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9001%" y="149" width="0.0280%" height="15" fill="rgb(230,12,38)" fg:x="4235" fg:w="15"/><text x="8.1931%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9281%" y="133" width="0.1418%" height="15" fill="rgb(232,218,35)" fg:x="4250" fg:w="76"/><text x="8.2210%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9281%" y="149" width="0.2966%" height="15" fill="rgb(210,36,27)" fg:x="4250" fg:w="159"/><text x="8.2210%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2247%" y="117" width="0.1418%" height="15" fill="rgb(234,116,47)" fg:x="4409" fg:w="76"/><text x="8.5176%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="8.2247%" y="133" width="0.2052%" height="15" fill="rgb(205,143,24)" fg:x="4409" fg:w="110"/><text x="8.5176%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.33%)</title><rect x="8.2247%" y="149" width="0.3320%" height="15" fill="rgb(240,104,33)" fg:x="4409" fg:w="178"/><text x="8.5176%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.5567%" y="149" width="0.1418%" height="15" fill="rgb(235,115,37)" fg:x="4587" fg:w="76"/><text x="8.8497%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.6985%" y="149" width="0.1511%" height="15" fill="rgb(238,11,24)" fg:x="4663" fg:w="81"/><text x="8.9915%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8496%" y="149" width="0.1418%" height="15" fill="rgb(216,95,30)" fg:x="4744" fg:w="76"/><text x="9.1426%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.9914%" y="149" width="0.1418%" height="15" fill="rgb(227,3,40)" fg:x="4820" fg:w="76"/><text x="9.2843%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1369%" y="149" width="0.1511%" height="15" fill="rgb(253,135,43)" fg:x="4898" fg:w="81"/><text x="9.4298%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="9.2880%" y="149" width="0.7089%" height="15" fill="rgb(229,168,32)" fg:x="4979" fg:w="380"/><text x="9.5809%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.71%)</title><rect x="9.9968%" y="149" width="0.7089%" height="15" fill="rgb(250,8,18)" fg:x="5359" fg:w="380"/><text x="10.2898%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,407 instructions, 11.95%)</title><rect x="0.4608%" y="165" width="11.9518%" height="15" fill="rgb(220,18,38)" fg:x="247" fg:w="6407"/><text x="0.7537%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (335 instructions, 0.62%)</title><rect x="12.4126%" y="165" width="0.6249%" height="15" fill="rgb(218,174,43)" fg:x="6654" fg:w="335"/><text x="12.7055%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="13.0375%" y="149" width="0.0224%" height="15" fill="rgb(223,144,53)" fg:x="6989" fg:w="12"/><text x="13.3304%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.09%)</title><rect x="13.0375%" y="165" width="0.0933%" height="15" fill="rgb(221,99,52)" fg:x="6989" fg:w="50"/><text x="13.3304%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="13.1307%" y="165" width="0.1418%" height="15" fill="rgb(219,146,34)" fg:x="7039" fg:w="76"/><text x="13.4237%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="13.2725%" y="149" width="0.0224%" height="15" fill="rgb(219,218,5)" fg:x="7115" fg:w="12"/><text x="13.5655%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.2949%" y="133" width="0.0989%" height="15" fill="rgb(210,154,36)" fg:x="7127" fg:w="53"/><text x="13.5879%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="13.3938%" y="133" width="0.1642%" height="15" fill="rgb(207,183,3)" fg:x="7180" fg:w="88"/><text x="13.6867%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="13.5579%" y="133" width="0.3022%" height="15" fill="rgb(235,196,18)" fg:x="7268" fg:w="162"/><text x="13.8509%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.2949%" y="149" width="1.0073%" height="15" fill="rgb(231,162,23)" fg:x="7127" fg:w="540"/><text x="13.5879%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 1.44%)</title><rect x="13.2725%" y="165" width="1.4401%" height="15" fill="rgb(248,152,18)" fg:x="7115" fg:w="772"/><text x="13.5655%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="14.7126%" y="165" width="0.1418%" height="15" fill="rgb(217,14,27)" fg:x="7887" fg:w="76"/><text x="15.0056%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="14.8544%" y="149" width="0.0224%" height="15" fill="rgb(239,211,6)" fg:x="7963" fg:w="12"/><text x="15.1474%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="14.8768%" y="133" width="0.0989%" height="15" fill="rgb(220,223,47)" fg:x="7975" fg:w="53"/><text x="15.1698%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="14.9757%" y="133" width="0.1642%" height="15" fill="rgb(231,174,17)" fg:x="8028" fg:w="88"/><text x="15.2686%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="15.1398%" y="133" width="0.3022%" height="15" fill="rgb(224,53,54)" fg:x="8116" fg:w="162"/><text x="15.4328%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="14.8768%" y="149" width="1.0073%" height="15" fill="rgb(242,72,6)" fg:x="7975" fg:w="540"/><text x="15.1698%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="15.8841%" y="149" width="0.1268%" height="15" fill="rgb(253,221,16)" fg:x="8515" fg:w="68"/><text x="16.1771%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.0110%" y="133" width="0.1511%" height="15" fill="rgb(249,99,46)" fg:x="8583" fg:w="81"/><text x="16.3039%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.0110%" y="149" width="0.2015%" height="15" fill="rgb(208,35,42)" fg:x="8583" fg:w="108"/><text x="16.3039%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 1.70%)</title><rect x="14.8544%" y="165" width="1.7013%" height="15" fill="rgb(231,179,48)" fg:x="7963" fg:w="912"/><text x="15.1474%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.5557%" y="117" width="0.0989%" height="15" fill="rgb(250,111,30)" fg:x="8875" fg:w="53"/><text x="16.8486%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="16.5557%" y="133" width="0.1474%" height="15" fill="rgb(233,95,50)" fg:x="8875" fg:w="79"/><text x="16.8486%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.54%)</title><rect x="16.5557%" y="149" width="0.5447%" height="15" fill="rgb(233,171,33)" fg:x="8875" fg:w="292"/><text x="16.8486%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1086 (15 instructions, 0.03%)</title><rect x="17.1004%" y="149" width="0.0280%" height="15" fill="rgb(239,224,34)" fg:x="9167" fg:w="15"/><text x="17.3933%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.1284%" y="149" width="0.0205%" height="15" fill="rgb(242,53,20)" fg:x="9182" fg:w="11"/><text x="17.4213%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 0.97%)</title><rect x="16.5557%" y="165" width="0.9738%" height="15" fill="rgb(217,56,9)" fg:x="8875" fg:w="522"/><text x="16.8486%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.06%)</title><rect x="17.5294%" y="165" width="0.0634%" height="15" fill="rgb(234,56,26)" fg:x="9397" fg:w="34"/><text x="17.8224%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.5929%" y="149" width="0.2294%" height="15" fill="rgb(217,86,12)" fg:x="9431" fg:w="123"/><text x="17.8858%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.8727%" y="149" width="0.2294%" height="15" fill="rgb(208,60,29)" fg:x="9581" fg:w="123"/><text x="18.1656%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.5929%" y="165" width="0.5596%" height="15" fill="rgb(206,108,20)" fg:x="9431" fg:w="300"/><text x="17.8858%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.1525%" y="149" width="0.0522%" height="15" fill="rgb(236,227,43)" fg:x="9731" fg:w="28"/><text x="18.4454%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.18%)</title><rect x="18.1525%" y="165" width="0.1809%" height="15" fill="rgb(235,7,33)" fg:x="9731" fg:w="97"/><text x="18.4454%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.3334%" y="165" width="0.0205%" height="15" fill="rgb(247,34,17)" fg:x="9828" fg:w="11"/><text x="18.6264%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.3539%" y="165" width="0.0205%" height="15" fill="rgb(250,51,50)" fg:x="9839" fg:w="11"/><text x="18.6469%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.3745%" y="165" width="0.0205%" height="15" fill="rgb(223,91,52)" fg:x="9850" fg:w="11"/><text x="18.6674%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.76%)</title><rect x="18.3950%" y="165" width="0.7648%" height="15" fill="rgb(247,17,3)" fg:x="9861" fg:w="410"/><text x="18.6880%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.1598%" y="133" width="0.0224%" height="15" fill="rgb(210,210,53)" fg:x="10271" fg:w="12"/><text x="19.4528%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.31%)</title><rect x="19.1822%" y="133" width="0.3134%" height="15" fill="rgb(219,160,30)" fg:x="10283" fg:w="168"/><text x="19.4752%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="19.4956%" y="101" width="0.1772%" height="15" fill="rgb(251,226,37)" fg:x="10451" fg:w="95"/><text x="19.7886%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 0.45%)</title><rect x="19.4956%" y="117" width="0.4477%" height="15" fill="rgb(210,132,18)" fg:x="10451" fg:w="240"/><text x="19.7886%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 instructions, 0.50%)</title><rect x="19.4956%" y="133" width="0.4981%" height="15" fill="rgb(240,181,35)" fg:x="10451" fg:w="267"/><text x="19.7886%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.9937%" y="133" width="0.0205%" height="15" fill="rgb(206,146,46)" fg:x="10718" fg:w="11"/><text x="20.2866%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (500 instructions, 0.93%)</title><rect x="19.1598%" y="149" width="0.9327%" height="15" fill="rgb(215,166,18)" fg:x="10271" fg:w="500"/><text x="19.4528%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (534 instructions, 1.00%)</title><rect x="19.1598%" y="165" width="0.9961%" height="15" fill="rgb(233,179,15)" fg:x="10271" fg:w="534"/><text x="19.4528%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="20.1559%" y="149" width="0.1007%" height="15" fill="rgb(212,172,37)" fg:x="10805" fg:w="54"/><text x="20.4489%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="20.2567%" y="149" width="0.1772%" height="15" fill="rgb(250,229,15)" fg:x="10859" fg:w="95"/><text x="20.5497%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.43%)</title><rect x="20.1559%" y="165" width="0.4290%" height="15" fill="rgb(225,79,4)" fg:x="10805" fg:w="230"/><text x="20.4489%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,255 instructions, 21.00%)</title><rect x="0.3190%" y="181" width="20.9954%" height="15" fill="rgb(238,62,17)" fg:x="171" fg:w="11255"/><text x="0.6120%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="21.3144%" y="181" width="1.4923%" height="15" fill="rgb(211,229,48)" fg:x="11426" fg:w="800"/><text x="21.6073%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="22.8067%" y="181" width="1.5464%" height="15" fill="rgb(254,49,0)" fg:x="12226" fg:w="829"/><text x="23.0997%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="24.3532%" y="181" width="1.5464%" height="15" fill="rgb(210,24,9)" fg:x="13055" fg:w="829"/><text x="24.6461%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="25.8996%" y="181" width="1.4923%" height="15" fill="rgb(211,117,12)" fg:x="13884" fg:w="800"/><text x="26.1926%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="27.3919%" y="181" width="1.4923%" height="15" fill="rgb(222,136,34)" fg:x="14684" fg:w="800"/><text x="27.6849%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="28.8843%" y="181" width="1.5464%" height="15" fill="rgb(241,205,52)" fg:x="15484" fg:w="829"/><text x="29.1773%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="30.4307%" y="181" width="1.4923%" height="15" fill="rgb(233,5,21)" fg:x="16313" fg:w="800"/><text x="30.7237%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (887 instructions, 1.65%)</title><rect x="31.9231%" y="181" width="1.6546%" height="15" fill="rgb(212,14,16)" fg:x="17113" fg:w="887"/><text x="32.2160%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="33.5777%" y="181" width="1.4923%" height="15" fill="rgb(244,78,6)" fg:x="18000" fg:w="800"/><text x="33.8707%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="35.0700%" y="181" width="1.4923%" height="15" fill="rgb(254,120,39)" fg:x="18800" fg:w="800"/><text x="35.3630%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="36.5624%" y="181" width="1.5464%" height="15" fill="rgb(208,16,25)" fg:x="19600" fg:w="829"/><text x="36.8554%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="38.1088%" y="181" width="1.4923%" height="15" fill="rgb(243,6,40)" fg:x="20429" fg:w="800"/><text x="38.4018%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="39.6012%" y="181" width="1.4923%" height="15" fill="rgb(244,200,18)" fg:x="21229" fg:w="800"/><text x="39.8941%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="41.0935%" y="181" width="1.4923%" height="15" fill="rgb(253,129,45)" fg:x="22029" fg:w="800"/><text x="41.3865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="42.5859%" y="181" width="1.4923%" height="15" fill="rgb(242,10,33)" fg:x="22829" fg:w="800"/><text x="42.8788%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="44.0782%" y="181" width="1.4923%" height="15" fill="rgb(247,95,21)" fg:x="23629" fg:w="800"/><text x="44.3712%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="45.5705%" y="181" width="1.4923%" height="15" fill="rgb(248,159,5)" fg:x="24429" fg:w="800"/><text x="45.8635%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="47.0629%" y="181" width="1.4923%" height="15" fill="rgb(241,73,23)" fg:x="25229" fg:w="800"/><text x="47.3559%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="48.5552%" y="181" width="1.4923%" height="15" fill="rgb(226,98,27)" fg:x="26029" fg:w="800"/><text x="48.8482%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="50.0476%" y="181" width="1.5464%" height="15" fill="rgb(231,60,35)" fg:x="26829" fg:w="829"/><text x="50.3405%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="51.5940%" y="181" width="1.5464%" height="15" fill="rgb(209,147,11)" fg:x="27658" fg:w="829"/><text x="51.8870%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="53.1404%" y="181" width="1.5464%" height="15" fill="rgb(233,98,53)" fg:x="28487" fg:w="829"/><text x="53.4334%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (858 instructions, 1.60%)</title><rect x="54.6869%" y="181" width="1.6005%" height="15" fill="rgb(244,112,44)" fg:x="29316" fg:w="858"/><text x="54.9799%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="56.2874%" y="181" width="1.4923%" height="15" fill="rgb(224,10,52)" fg:x="30174" fg:w="800"/><text x="56.5804%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="57.7798%" y="181" width="1.5464%" height="15" fill="rgb(245,64,47)" fg:x="30974" fg:w="829"/><text x="58.0727%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="59.3262%" y="181" width="1.4923%" height="15" fill="rgb(220,159,40)" fg:x="31803" fg:w="800"/><text x="59.6192%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="60.8185%" y="181" width="1.4923%" height="15" fill="rgb(207,181,53)" fg:x="32603" fg:w="800"/><text x="61.1115%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="62.3109%" y="181" width="1.4923%" height="15" fill="rgb(237,155,50)" fg:x="33403" fg:w="800"/><text x="62.6039%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="63.8032%" y="181" width="1.4923%" height="15" fill="rgb(250,159,49)" fg:x="34203" fg:w="800"/><text x="64.0962%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="65.2956%" y="181" width="1.4923%" height="15" fill="rgb(236,188,8)" fg:x="35003" fg:w="800"/><text x="65.5885%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="66.7879%" y="181" width="1.5464%" height="15" fill="rgb(222,99,26)" fg:x="35803" fg:w="829"/><text x="67.0809%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="68.3344%" y="181" width="1.4923%" height="15" fill="rgb(237,180,25)" fg:x="36632" fg:w="800"/><text x="68.6273%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="69.8267%" y="181" width="1.4923%" height="15" fill="rgb(242,103,6)" fg:x="37432" fg:w="800"/><text x="70.1197%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="71.3190%" y="181" width="1.4923%" height="15" fill="rgb(245,41,17)" fg:x="38232" fg:w="800"/><text x="71.6120%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="72.8114%" y="181" width="1.4923%" height="15" fill="rgb(220,166,24)" fg:x="39032" fg:w="800"/><text x="73.1044%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="74.3037%" y="181" width="1.4923%" height="15" fill="rgb(216,91,46)" fg:x="39832" fg:w="800"/><text x="74.5967%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="75.7961%" y="181" width="1.5464%" height="15" fill="rgb(252,103,37)" fg:x="40632" fg:w="829"/><text x="76.0890%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="77.3425%" y="181" width="1.4923%" height="15" fill="rgb(207,169,29)" fg:x="41461" fg:w="800"/><text x="77.6355%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="78.8349%" y="181" width="1.4923%" height="15" fill="rgb(214,27,27)" fg:x="42261" fg:w="800"/><text x="79.1278%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="80.3272%" y="181" width="1.4923%" height="15" fill="rgb(231,106,47)" fg:x="43061" fg:w="800"/><text x="80.6202%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="81.8195%" y="181" width="1.5464%" height="15" fill="rgb(234,147,3)" fg:x="43861" fg:w="829"/><text x="82.1125%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="83.3660%" y="181" width="1.4923%" height="15" fill="rgb(239,158,20)" fg:x="44690" fg:w="800"/><text x="83.6589%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="84.8583%" y="181" width="1.4923%" height="15" fill="rgb(226,159,8)" fg:x="45490" fg:w="800"/><text x="85.1513%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="86.3507%" y="181" width="1.4923%" height="15" fill="rgb(230,194,33)" fg:x="46290" fg:w="800"/><text x="86.6436%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="87.8430%" y="181" width="1.4923%" height="15" fill="rgb(231,210,1)" fg:x="47090" fg:w="800"/><text x="88.1360%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="89.3353%" y="181" width="1.4923%" height="15" fill="rgb(237,50,24)" fg:x="47890" fg:w="800"/><text x="89.6283%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="90.8277%" y="181" width="1.4923%" height="15" fill="rgb(240,53,20)" fg:x="48690" fg:w="800"/><text x="91.1207%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="92.3200%" y="181" width="1.4923%" height="15" fill="rgb(235,59,1)" fg:x="49490" fg:w="800"/><text x="92.6130%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="93.8124%" y="181" width="1.4923%" height="15" fill="rgb(251,143,19)" fg:x="50290" fg:w="800"/><text x="94.1053%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="95.3047%" y="181" width="1.5464%" height="15" fill="rgb(235,53,43)" fg:x="51090" fg:w="829"/><text x="95.5977%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="96.8512%" y="149" width="0.0224%" height="15" fill="rgb(245,115,42)" fg:x="51919" fg:w="12"/><text x="97.1441%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="96.8735%" y="117" width="0.1007%" height="15" fill="rgb(233,180,6)" fg:x="51931" fg:w="54"/><text x="97.1665%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.25%)</title><rect x="96.8735%" y="133" width="0.2518%" height="15" fill="rgb(211,81,22)" fg:x="51931" fg:w="135"/><text x="97.1665%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.30%)</title><rect x="96.8735%" y="149" width="0.3022%" height="15" fill="rgb(251,152,4)" fg:x="51931" fg:w="162"/><text x="97.1665%" y="159.50"></text></g><g><title>memset (136 instructions, 0.25%)</title><rect x="97.1757%" y="149" width="0.2537%" height="15" fill="rgb(221,188,15)" fg:x="52093" fg:w="136"/><text x="97.4687%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 0.87%)</title><rect x="96.8512%" y="165" width="0.8730%" height="15" fill="rgb(248,22,45)" fg:x="51919" fg:w="468"/><text x="97.1441%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.7242%" y="117" width="0.1418%" height="15" fill="rgb(248,9,2)" fg:x="52387" fg:w="76"/><text x="98.0171%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="97.7242%" y="133" width="0.2052%" height="15" fill="rgb(253,183,15)" fg:x="52387" fg:w="110"/><text x="98.0171%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.33%)</title><rect x="97.7242%" y="149" width="0.3264%" height="15" fill="rgb(225,131,26)" fg:x="52387" fg:w="175"/><text x="98.0171%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0506%" y="149" width="0.0205%" height="15" fill="rgb(219,204,49)" fg:x="52562" fg:w="11"/><text x="98.3436%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0711%" y="149" width="0.0205%" height="15" fill="rgb(215,209,24)" fg:x="52573" fg:w="11"/><text x="98.3641%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (30 instructions, 0.06%)</title><rect x="98.0917%" y="149" width="0.0560%" height="15" fill="rgb(228,154,1)" fg:x="52584" fg:w="30"/><text x="98.3846%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (453 instructions, 0.85%)</title><rect x="97.7242%" y="165" width="0.8450%" height="15" fill="rgb(238,35,51)" fg:x="52387" fg:w="453"/><text x="98.0171%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.5785%" y="165" width="0.1026%" height="15" fill="rgb(231,124,54)" fg:x="52845" fg:w="55"/><text x="98.8715%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,057 instructions, 1.97%)</title><rect x="96.8512%" y="181" width="1.9718%" height="15" fill="rgb(247,214,30)" fg:x="51919" fg:w="1057"/><text x="97.1441%" y="191.50"></text></g><g><title>heap::batch_remove_4_::{{closure}} (53,145 instructions, 99.14%)</title><rect x="0.3190%" y="197" width="99.1382%" height="15" fill="rgb(209,42,25)" fg:x="171" fg:w="53145"/><text x="0.6120%" y="207.50">heap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4572%" y="197" width="0.0224%" height="15" fill="rgb(249,132,46)" fg:x="53316" fg:w="12"/><text x="99.7501%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="99.4795%" y="197" width="0.1511%" height="15" fill="rgb(225,87,9)" fg:x="53328" fg:w="81"/><text x="99.7725%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.19%)</title><rect x="99.6306%" y="197" width="0.1865%" height="15" fill="rgb(223,15,9)" fg:x="53409" fg:w="100"/><text x="99.9236%" y="207.50"></text></g><g><title>all (53,607 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,93,40)" fg:x="0" fg:w="53607"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (53,607 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,140,46)" fg:x="0" fg:w="53607"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>