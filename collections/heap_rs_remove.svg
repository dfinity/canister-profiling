<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="48114"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0499%" height="15" fill="rgb(224,168,9)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.0499%" y="197" width="0.1704%" height="15" fill="rgb(235,66,45)" fg:x="24" fg:w="82"/><text x="0.3429%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.2203%" y="197" width="0.1704%" height="15" fill="rgb(242,95,15)" fg:x="106" fg:w="82"/><text x="0.5133%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="0.3907%" y="165" width="0.1704%" height="15" fill="rgb(246,166,5)" fg:x="188" fg:w="82"/><text x="0.6837%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="0.5612%" y="149" width="0.1704%" height="15" fill="rgb(221,196,15)" fg:x="270" fg:w="82"/><text x="0.8541%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7316%" y="133" width="0.0125%" height="15" fill="rgb(237,61,39)" fg:x="352" fg:w="6"/><text x="1.0246%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="0.7316%" y="149" width="0.9207%" height="15" fill="rgb(233,94,39)" fg:x="352" fg:w="443"/><text x="1.0246%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="1.6523%" y="149" width="0.1974%" height="15" fill="rgb(230,132,32)" fg:x="795" fg:w="95"/><text x="1.9453%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8498%" y="149" width="0.1247%" height="15" fill="rgb(217,122,27)" fg:x="890" fg:w="60"/><text x="2.1427%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9745%" y="149" width="0.1247%" height="15" fill="rgb(250,151,32)" fg:x="950" fg:w="60"/><text x="2.2674%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0992%" y="149" width="0.1247%" height="15" fill="rgb(253,22,8)" fg:x="1010" fg:w="60"/><text x="2.3921%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.2239%" y="149" width="0.1247%" height="15" fill="rgb(227,15,11)" fg:x="1070" fg:w="60"/><text x="2.5169%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="2.3486%" y="149" width="0.1704%" height="15" fill="rgb(217,73,53)" fg:x="1130" fg:w="82"/><text x="2.6416%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.15%)</title><rect x="2.5190%" y="149" width="0.1455%" height="15" fill="rgb(249,102,22)" fg:x="1212" fg:w="70"/><text x="2.8120%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.6645%" y="133" width="0.0125%" height="15" fill="rgb(232,110,28)" fg:x="1282" fg:w="6"/><text x="2.9575%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="2.6645%" y="149" width="0.9207%" height="15" fill="rgb(251,43,50)" fg:x="1282" fg:w="443"/><text x="2.9575%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.5852%" y="149" width="0.0395%" height="15" fill="rgb(228,120,40)" fg:x="1725" fg:w="19"/><text x="3.8782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="3.6247%" y="133" width="0.1704%" height="15" fill="rgb(213,199,12)" fg:x="1744" fg:w="82"/><text x="3.9177%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="3.7952%" y="101" width="0.1393%" height="15" fill="rgb(238,41,53)" fg:x="1826" fg:w="67"/><text x="4.0881%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.20%)</title><rect x="3.7952%" y="117" width="0.1995%" height="15" fill="rgb(216,22,53)" fg:x="1826" fg:w="96"/><text x="4.0881%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.9947%" y="69" width="0.0229%" height="15" fill="rgb(226,66,17)" fg:x="1922" fg:w="11"/><text x="4.2876%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="4.0175%" y="53" width="0.0727%" height="15" fill="rgb(250,168,7)" fg:x="1933" fg:w="35"/><text x="4.3105%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="4.0175%" y="69" width="0.1330%" height="15" fill="rgb(247,64,16)" fg:x="1933" fg:w="64"/><text x="4.3105%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.30%)</title><rect x="3.9947%" y="85" width="0.2993%" height="15" fill="rgb(242,151,15)" fg:x="1922" fg:w="144"/><text x="4.2876%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.43%)</title><rect x="3.9947%" y="101" width="0.4344%" height="15" fill="rgb(250,27,23)" fg:x="1922" fg:w="209"/><text x="4.2876%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.46%)</title><rect x="3.9947%" y="117" width="0.4552%" height="15" fill="rgb(240,55,42)" fg:x="1922" fg:w="219"/><text x="4.2876%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.95%)</title><rect x="3.7952%" y="133" width="0.9498%" height="15" fill="rgb(231,113,48)" fg:x="1826" fg:w="457"/><text x="4.0881%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.41%)</title><rect x="3.6247%" y="149" width="1.4071%" height="15" fill="rgb(208,42,38)" fg:x="1744" fg:w="677"/><text x="3.9177%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="5.0318%" y="149" width="0.1974%" height="15" fill="rgb(242,196,1)" fg:x="2421" fg:w="95"/><text x="5.3248%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.2292%" y="149" width="0.1247%" height="15" fill="rgb(223,113,53)" fg:x="2516" fg:w="60"/><text x="5.5222%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="5.3540%" y="149" width="0.1580%" height="15" fill="rgb(253,202,41)" fg:x="2576" fg:w="76"/><text x="5.6469%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.15%)</title><rect x="5.5119%" y="149" width="0.1455%" height="15" fill="rgb(253,3,4)" fg:x="2652" fg:w="70"/><text x="5.8049%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.6574%" y="117" width="0.0125%" height="15" fill="rgb(243,68,47)" fg:x="2722" fg:w="6"/><text x="5.9504%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.92%)</title><rect x="5.6574%" y="133" width="0.9207%" height="15" fill="rgb(210,229,39)" fg:x="2722" fg:w="443"/><text x="5.9504%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.5781%" y="133" width="0.0395%" height="15" fill="rgb(207,219,24)" fg:x="3165" fg:w="19"/><text x="6.8711%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="6.6176%" y="117" width="0.1704%" height="15" fill="rgb(224,184,13)" fg:x="3184" fg:w="82"/><text x="6.9106%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.14%)</title><rect x="6.7880%" y="85" width="0.1393%" height="15" fill="rgb(248,203,39)" fg:x="3266" fg:w="67"/><text x="7.0810%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.20%)</title><rect x="6.7880%" y="101" width="0.1995%" height="15" fill="rgb(240,11,18)" fg:x="3266" fg:w="96"/><text x="7.0810%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.9876%" y="53" width="0.0229%" height="15" fill="rgb(225,152,37)" fg:x="3362" fg:w="11"/><text x="7.2805%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="7.0104%" y="37" width="0.0727%" height="15" fill="rgb(239,32,47)" fg:x="3373" fg:w="35"/><text x="7.3034%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="7.0104%" y="53" width="0.1330%" height="15" fill="rgb(205,50,18)" fg:x="3373" fg:w="64"/><text x="7.3034%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.30%)</title><rect x="6.9876%" y="69" width="0.2993%" height="15" fill="rgb(212,136,13)" fg:x="3362" fg:w="144"/><text x="7.2805%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.43%)</title><rect x="6.9876%" y="85" width="0.4344%" height="15" fill="rgb(229,150,11)" fg:x="3362" fg:w="209"/><text x="7.2805%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.46%)</title><rect x="6.9876%" y="101" width="0.4552%" height="15" fill="rgb(207,164,14)" fg:x="3362" fg:w="219"/><text x="7.2805%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.95%)</title><rect x="6.7880%" y="117" width="0.9498%" height="15" fill="rgb(231,162,50)" fg:x="3266" fg:w="457"/><text x="7.0810%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.41%)</title><rect x="6.6176%" y="133" width="1.4071%" height="15" fill="rgb(215,36,44)" fg:x="3184" fg:w="677"/><text x="6.9106%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.20%)</title><rect x="8.0247%" y="133" width="0.1974%" height="15" fill="rgb(234,203,49)" fg:x="3861" fg:w="95"/><text x="8.3177%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="8.2221%" y="133" width="0.1247%" height="15" fill="rgb(254,23,42)" fg:x="3956" fg:w="60"/><text x="8.5151%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.17%)</title><rect x="8.3468%" y="117" width="0.1704%" height="15" fill="rgb(231,74,49)" fg:x="4016" fg:w="82"/><text x="8.6398%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.20%)</title><rect x="8.5173%" y="117" width="0.1974%" height="15" fill="rgb(217,79,14)" fg:x="4098" fg:w="95"/><text x="8.8102%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="8.7147%" y="117" width="0.1580%" height="15" fill="rgb(239,165,46)" fg:x="4193" fg:w="76"/><text x="9.0077%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.69%)</title><rect x="8.3468%" y="133" width="0.6859%" height="15" fill="rgb(241,131,5)" fg:x="4016" fg:w="330"/><text x="8.6398%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="9.0327%" y="133" width="0.1704%" height="15" fill="rgb(251,142,39)" fg:x="4346" fg:w="82"/><text x="9.3257%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 4.06%)</title><rect x="5.6574%" y="149" width="4.0570%" height="15" fill="rgb(229,53,49)" fg:x="2722" fg:w="1952"/><text x="5.9504%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.16%)</title><rect x="9.7144%" y="149" width="0.1580%" height="15" fill="rgb(206,61,20)" fg:x="4674" fg:w="76"/><text x="10.0074%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.8724%" y="149" width="0.0312%" height="15" fill="rgb(227,144,0)" fg:x="4750" fg:w="15"/><text x="10.1654%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.9036%" y="149" width="0.0312%" height="15" fill="rgb(236,148,39)" fg:x="4765" fg:w="15"/><text x="10.1965%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.9347%" y="149" width="0.0312%" height="15" fill="rgb(245,60,32)" fg:x="4780" fg:w="15"/><text x="10.2277%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="9.9659%" y="149" width="0.0125%" height="15" fill="rgb(208,202,45)" fg:x="4795" fg:w="6"/><text x="10.2589%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="9.9784%" y="133" width="0.1704%" height="15" fill="rgb(254,57,28)" fg:x="4801" fg:w="82"/><text x="10.2714%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.37%)</title><rect x="9.9784%" y="149" width="0.3700%" height="15" fill="rgb(243,1,42)" fg:x="4801" fg:w="178"/><text x="10.2714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="10.3483%" y="117" width="0.1704%" height="15" fill="rgb(208,170,27)" fg:x="4979" fg:w="82"/><text x="10.6413%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.27%)</title><rect x="10.3483%" y="133" width="0.2702%" height="15" fill="rgb(214,5,16)" fg:x="4979" fg:w="130"/><text x="10.6413%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.45%)</title><rect x="10.3483%" y="149" width="0.4469%" height="15" fill="rgb(205,104,34)" fg:x="4979" fg:w="215"/><text x="10.6413%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="10.7952%" y="149" width="0.1704%" height="15" fill="rgb(208,48,14)" fg:x="5194" fg:w="82"/><text x="11.0882%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.9656%" y="149" width="0.1850%" height="15" fill="rgb(212,5,51)" fg:x="5276" fg:w="89"/><text x="11.2586%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="11.1506%" y="149" width="0.1704%" height="15" fill="rgb(249,23,21)" fg:x="5365" fg:w="82"/><text x="11.4436%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="11.3210%" y="149" width="0.1704%" height="15" fill="rgb(216,206,6)" fg:x="5447" fg:w="82"/><text x="11.6140%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.4998%" y="149" width="0.1850%" height="15" fill="rgb(222,130,12)" fg:x="5533" fg:w="89"/><text x="11.7927%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.81%)</title><rect x="11.6847%" y="149" width="0.8147%" height="15" fill="rgb(206,64,28)" fg:x="5622" fg:w="392"/><text x="11.9777%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.81%)</title><rect x="12.4995%" y="149" width="0.8147%" height="15" fill="rgb(205,152,9)" fg:x="6014" fg:w="392"/><text x="12.7924%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.05%)</title><rect x="13.3142%" y="149" width="1.0475%" height="15" fill="rgb(250,28,30)" fg:x="6406" fg:w="504"/><text x="13.6072%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 16.32%)</title><rect x="0.5612%" y="165" width="16.3237%" height="15" fill="rgb(231,182,31)" fg:x="270" fg:w="7854"/><text x="0.8541%" y="175.50">candid::de::IDLDeseri..</text></g><g><title>memcpy (344 instructions, 0.71%)</title><rect x="16.8849%" y="165" width="0.7150%" height="15" fill="rgb(209,228,49)" fg:x="8124" fg:w="344"/><text x="17.1779%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.05%)</title><rect x="17.5999%" y="165" width="0.0478%" height="15" fill="rgb(231,200,5)" fg:x="8468" fg:w="23"/><text x="17.8928%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="17.6477%" y="165" width="0.1704%" height="15" fill="rgb(205,120,31)" fg:x="8491" fg:w="82"/><text x="17.9406%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="17.8181%" y="149" width="0.1704%" height="15" fill="rgb(253,6,21)" fg:x="8573" fg:w="82"/><text x="18.1111%" y="159.50"></text></g><g><title>candid::types::internal::env_add (165 instructions, 0.34%)</title><rect x="17.8181%" y="165" width="0.3429%" height="15" fill="rgb(214,177,36)" fg:x="8573" fg:w="165"/><text x="18.1111%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="18.1610%" y="165" width="0.1704%" height="15" fill="rgb(244,177,30)" fg:x="8738" fg:w="82"/><text x="18.4540%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.16%)</title><rect x="18.3315%" y="149" width="0.1600%" height="15" fill="rgb(223,109,6)" fg:x="8820" fg:w="77"/><text x="18.6244%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="18.4915%" y="133" width="0.1850%" height="15" fill="rgb(213,22,20)" fg:x="8897" fg:w="89"/><text x="18.7845%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.28%)</title><rect x="18.4915%" y="149" width="0.2764%" height="15" fill="rgb(237,130,54)" fg:x="8897" fg:w="133"/><text x="18.7845%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 0.79%)</title><rect x="18.3315%" y="165" width="0.7939%" height="15" fill="rgb(221,157,31)" fg:x="8820" fg:w="382"/><text x="18.6244%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.11%)</title><rect x="19.1254%" y="149" width="0.1060%" height="15" fill="rgb(207,111,29)" fg:x="9202" fg:w="51"/><text x="19.4184%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="19.2314%" y="149" width="0.0270%" height="15" fill="rgb(242,75,18)" fg:x="9253" fg:w="13"/><text x="19.5244%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.41%)</title><rect x="19.1254%" y="165" width="0.4115%" height="15" fill="rgb(254,213,50)" fg:x="9202" fg:w="198"/><text x="19.4184%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="19.5369%" y="165" width="0.1018%" height="15" fill="rgb(253,79,23)" fg:x="9400" fg:w="49"/><text x="19.8299%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.17%)</title><rect x="19.6388%" y="149" width="0.1725%" height="15" fill="rgb(235,164,53)" fg:x="9449" fg:w="83"/><text x="19.9317%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="19.9027%" y="133" width="0.0478%" height="15" fill="rgb(242,59,40)" fg:x="9576" fg:w="23"/><text x="20.1957%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.29%)</title><rect x="19.9027%" y="149" width="0.2868%" height="15" fill="rgb(232,12,52)" fg:x="9576" fg:w="138"/><text x="20.1957%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.64%)</title><rect x="19.6388%" y="165" width="0.6422%" height="15" fill="rgb(244,113,37)" fg:x="9449" fg:w="309"/><text x="19.9317%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.07%)</title><rect x="20.2810%" y="149" width="0.0727%" height="15" fill="rgb(240,51,50)" fg:x="9758" fg:w="35"/><text x="20.5740%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1137 (34 instructions, 0.07%)</title><rect x="20.3537%" y="149" width="0.0707%" height="15" fill="rgb(253,226,23)" fg:x="9793" fg:w="34"/><text x="20.6467%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1137 (34 instructions, 0.07%)</title><rect x="20.4244%" y="149" width="0.0707%" height="15" fill="rgb(213,197,3)" fg:x="9827" fg:w="34"/><text x="20.7174%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.07%)</title><rect x="20.4951%" y="149" width="0.0686%" height="15" fill="rgb(243,83,4)" fg:x="9861" fg:w="33"/><text x="20.7880%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.52%)</title><rect x="20.2810%" y="165" width="0.5196%" height="15" fill="rgb(239,177,28)" fg:x="9758" fg:w="250"/><text x="20.5740%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.8006%" y="165" width="0.0270%" height="15" fill="rgb(237,192,34)" fg:x="10008" fg:w="13"/><text x="21.0936%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.8276%" y="165" width="0.0270%" height="15" fill="rgb(238,167,24)" fg:x="10021" fg:w="13"/><text x="21.1206%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.8546%" y="165" width="0.0270%" height="15" fill="rgb(224,93,16)" fg:x="10034" fg:w="13"/><text x="21.1476%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.09%)</title><rect x="20.8817%" y="165" width="0.0894%" height="15" fill="rgb(236,207,11)" fg:x="10047" fg:w="43"/><text x="21.1746%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="20.9710%" y="149" width="0.0145%" height="15" fill="rgb(226,109,10)" fg:x="10090" fg:w="7"/><text x="21.2640%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="20.9856%" y="133" width="0.0561%" height="15" fill="rgb(212,61,41)" fg:x="10097" fg:w="27"/><text x="21.2785%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.0417%" y="133" width="0.0561%" height="15" fill="rgb(207,128,8)" fg:x="10124" fg:w="27"/><text x="21.3347%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.41%)</title><rect x="20.9856%" y="149" width="0.4094%" height="15" fill="rgb(221,67,43)" fg:x="10097" fg:w="197"/><text x="21.2785%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.3950%" y="117" width="0.0561%" height="15" fill="rgb(226,66,21)" fg:x="10294" fg:w="27"/><text x="21.6880%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.30%)</title><rect x="21.3950%" y="133" width="0.2951%" height="15" fill="rgb(229,18,3)" fg:x="10294" fg:w="142"/><text x="21.6880%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.39%)</title><rect x="21.3950%" y="149" width="0.3866%" height="15" fill="rgb(245,76,6)" fg:x="10294" fg:w="186"/><text x="21.6880%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.7816%" y="149" width="0.0270%" height="15" fill="rgb(240,105,34)" fg:x="10480" fg:w="13"/><text x="22.0746%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="21.8086%" y="149" width="0.0145%" height="15" fill="rgb(234,136,0)" fg:x="10493" fg:w="7"/><text x="22.1016%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 0.98%)</title><rect x="20.9710%" y="165" width="0.9768%" height="15" fill="rgb(212,8,26)" fg:x="10090" fg:w="470"/><text x="21.2640%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="21.9479%" y="149" width="0.0561%" height="15" fill="rgb(241,62,23)" fg:x="10560" fg:w="27"/><text x="22.2408%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.30%)</title><rect x="21.9479%" y="165" width="0.2951%" height="15" fill="rgb(250,151,42)" fg:x="10560" fg:w="142"/><text x="22.2408%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,083 instructions, 25.11%)</title><rect x="0.3907%" y="181" width="25.1133%" height="15" fill="rgb(231,116,54)" fg:x="188" fg:w="12083"/><text x="0.6837%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="25.5040%" y="181" width="1.3302%" height="15" fill="rgb(244,61,21)" fg:x="12271" fg:w="640"/><text x="25.7970%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="26.8342%" y="181" width="1.3946%" height="15" fill="rgb(239,2,40)" fg:x="12911" fg:w="671"/><text x="27.1272%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="28.2288%" y="181" width="1.3946%" height="15" fill="rgb(215,102,48)" fg:x="13582" fg:w="671"/><text x="28.5218%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (764 instructions, 1.59%)</title><rect x="29.6234%" y="181" width="1.5879%" height="15" fill="rgb(222,117,31)" fg:x="14253" fg:w="764"/><text x="29.9164%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="31.2113%" y="181" width="1.3946%" height="15" fill="rgb(209,24,32)" fg:x="15017" fg:w="671"/><text x="31.5043%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="32.6059%" y="181" width="1.2533%" height="15" fill="rgb(239,102,35)" fg:x="15688" fg:w="603"/><text x="32.8989%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="33.8592%" y="181" width="1.3302%" height="15" fill="rgb(208,15,9)" fg:x="16291" fg:w="640"/><text x="34.1521%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="35.1893%" y="181" width="1.3946%" height="15" fill="rgb(236,134,34)" fg:x="16931" fg:w="671"/><text x="35.4823%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.32%)</title><rect x="36.5839%" y="181" width="1.3177%" height="15" fill="rgb(207,225,26)" fg:x="17602" fg:w="634"/><text x="36.8769%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="37.9017%" y="181" width="1.2533%" height="15" fill="rgb(216,201,41)" fg:x="18236" fg:w="603"/><text x="38.1946%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="39.1549%" y="181" width="1.3302%" height="15" fill="rgb(240,161,44)" fg:x="18839" fg:w="640"/><text x="39.4479%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="40.4851%" y="181" width="1.2533%" height="15" fill="rgb(222,26,26)" fg:x="19479" fg:w="603"/><text x="40.7781%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="41.7384%" y="181" width="1.3302%" height="15" fill="rgb(223,158,32)" fg:x="20082" fg:w="640"/><text x="42.0313%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="43.0685%" y="181" width="1.3302%" height="15" fill="rgb(210,61,39)" fg:x="20722" fg:w="640"/><text x="43.3615%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.45%)</title><rect x="44.3987%" y="181" width="1.4466%" height="15" fill="rgb(240,102,7)" fg:x="21362" fg:w="696"/><text x="44.6917%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="45.8453%" y="181" width="1.2533%" height="15" fill="rgb(229,55,0)" fg:x="22058" fg:w="603"/><text x="46.1383%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="47.0986%" y="181" width="1.3302%" height="15" fill="rgb(232,7,19)" fg:x="22661" fg:w="640"/><text x="47.3915%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="48.4287%" y="181" width="1.3302%" height="15" fill="rgb(213,218,8)" fg:x="23301" fg:w="640"/><text x="48.7217%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="49.7589%" y="181" width="1.3946%" height="15" fill="rgb(232,37,8)" fg:x="23941" fg:w="671"/><text x="50.0519%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="51.1535%" y="181" width="1.3946%" height="15" fill="rgb(241,213,53)" fg:x="24612" fg:w="671"/><text x="51.4465%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="52.5481%" y="181" width="1.2533%" height="15" fill="rgb(225,16,30)" fg:x="25283" fg:w="603"/><text x="52.8411%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.52%)</title><rect x="53.8014%" y="181" width="1.5235%" height="15" fill="rgb(246,104,32)" fg:x="25886" fg:w="733"/><text x="54.0944%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.45%)</title><rect x="55.3249%" y="181" width="1.4466%" height="15" fill="rgb(214,147,38)" fg:x="26619" fg:w="696"/><text x="55.6178%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="56.7714%" y="181" width="1.2533%" height="15" fill="rgb(236,51,37)" fg:x="27315" fg:w="603"/><text x="57.0644%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.32%)</title><rect x="58.0247%" y="181" width="1.3177%" height="15" fill="rgb(247,162,25)" fg:x="27918" fg:w="634"/><text x="58.3177%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="59.3424%" y="181" width="1.3302%" height="15" fill="rgb(223,180,33)" fg:x="28552" fg:w="640"/><text x="59.6354%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="60.6726%" y="181" width="1.2533%" height="15" fill="rgb(216,31,11)" fg:x="29192" fg:w="603"/><text x="60.9655%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="61.9258%" y="181" width="1.2533%" height="15" fill="rgb(231,120,19)" fg:x="29795" fg:w="603"/><text x="62.2188%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="63.1791%" y="181" width="1.2533%" height="15" fill="rgb(244,121,16)" fg:x="30398" fg:w="603"/><text x="63.4721%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="64.4324%" y="181" width="1.2533%" height="15" fill="rgb(243,136,41)" fg:x="31001" fg:w="603"/><text x="64.7254%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.25%)</title><rect x="65.6857%" y="181" width="1.2533%" height="15" fill="rgb(226,3,23)" fg:x="31604" fg:w="603"/><text x="65.9786%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="66.9389%" y="181" width="1.3946%" height="15" fill="rgb(218,185,37)" fg:x="32207" fg:w="671"/><text x="67.2319%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="68.3335%" y="181" width="1.3302%" height="15" fill="rgb(243,48,34)" fg:x="32878" fg:w="640"/><text x="68.6265%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="69.6637%" y="181" width="1.3302%" height="15" fill="rgb(235,11,33)" fg:x="33518" fg:w="640"/><text x="69.9567%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="70.9939%" y="181" width="1.3302%" height="15" fill="rgb(212,49,7)" fg:x="34158" fg:w="640"/><text x="71.2869%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="72.3241%" y="181" width="1.3302%" height="15" fill="rgb(249,56,51)" fg:x="34798" fg:w="640"/><text x="72.6170%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="73.6542%" y="181" width="1.3302%" height="15" fill="rgb(214,128,34)" fg:x="35438" fg:w="640"/><text x="73.9472%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="74.9844%" y="181" width="1.3946%" height="15" fill="rgb(212,28,38)" fg:x="36078" fg:w="671"/><text x="75.2774%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="76.3790%" y="181" width="1.3946%" height="15" fill="rgb(242,47,37)" fg:x="36749" fg:w="671"/><text x="76.6720%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="77.7736%" y="181" width="1.3302%" height="15" fill="rgb(250,5,11)" fg:x="37420" fg:w="640"/><text x="78.0666%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.39%)</title><rect x="79.1038%" y="181" width="1.3946%" height="15" fill="rgb(235,227,22)" fg:x="38060" fg:w="671"/><text x="79.3968%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.46%)</title><rect x="80.4984%" y="181" width="1.4590%" height="15" fill="rgb(228,52,18)" fg:x="38731" fg:w="702"/><text x="80.7914%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="81.9574%" y="181" width="1.3302%" height="15" fill="rgb(218,225,53)" fg:x="39433" fg:w="640"/><text x="82.2504%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="83.2876%" y="181" width="1.3302%" height="15" fill="rgb(221,13,36)" fg:x="40073" fg:w="640"/><text x="83.5806%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="84.6178%" y="181" width="1.3302%" height="15" fill="rgb(232,120,29)" fg:x="40713" fg:w="640"/><text x="84.9108%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="85.9480%" y="181" width="1.3302%" height="15" fill="rgb(213,0,31)" fg:x="41353" fg:w="640"/><text x="86.2409%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="87.2781%" y="181" width="1.3302%" height="15" fill="rgb(209,94,6)" fg:x="41993" fg:w="640"/><text x="87.5711%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.32%)</title><rect x="88.6083%" y="181" width="1.3177%" height="15" fill="rgb(236,162,26)" fg:x="42633" fg:w="634"/><text x="88.9013%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="89.9260%" y="181" width="1.3302%" height="15" fill="rgb(228,85,37)" fg:x="43267" fg:w="640"/><text x="90.2190%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.33%)</title><rect x="91.2562%" y="181" width="1.3302%" height="15" fill="rgb(238,109,22)" fg:x="43907" fg:w="640"/><text x="91.5492%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="92.5864%" y="133" width="0.1247%" height="15" fill="rgb(234,42,52)" fg:x="44547" fg:w="60"/><text x="92.8793%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.22%)</title><rect x="92.5864%" y="149" width="0.2162%" height="15" fill="rgb(238,164,50)" fg:x="44547" fg:w="104"/><text x="92.8793%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="92.8025%" y="133" width="0.0561%" height="15" fill="rgb(252,51,33)" fg:x="44651" fg:w="27"/><text x="93.0955%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.24%)</title><rect x="92.8025%" y="149" width="0.2390%" height="15" fill="rgb(222,90,33)" fg:x="44651" fg:w="115"/><text x="93.0955%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (343 instructions, 0.71%)</title><rect x="92.5864%" y="165" width="0.7129%" height="15" fill="rgb(243,103,5)" fg:x="44547" fg:w="343"/><text x="92.8793%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.08%)</title><rect x="93.2992%" y="149" width="1.0766%" height="15" fill="rgb(211,73,50)" fg:x="44890" fg:w="518"/><text x="93.5922%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.17%)</title><rect x="94.3759%" y="101" width="0.1704%" height="15" fill="rgb(240,80,54)" fg:x="45408" fg:w="82"/><text x="94.6688%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.27%)</title><rect x="94.3759%" y="117" width="0.2702%" height="15" fill="rgb(220,88,12)" fg:x="45408" fg:w="130"/><text x="94.6688%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.44%)</title><rect x="94.3759%" y="133" width="0.4406%" height="15" fill="rgb(217,49,47)" fg:x="45408" fg:w="212"/><text x="94.6688%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.8165%" y="133" width="0.0312%" height="15" fill="rgb(254,62,6)" fg:x="45620" fg:w="15"/><text x="95.1094%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.8477%" y="133" width="0.0312%" height="15" fill="rgb(216,135,17)" fg:x="45635" fg:w="15"/><text x="95.1406%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.89%)</title><rect x="94.3759%" y="149" width="0.8896%" height="15" fill="rgb(250,103,23)" fg:x="45408" fg:w="428"/><text x="94.6688%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.07%)</title><rect x="95.2654%" y="149" width="1.0725%" height="15" fill="rgb(225,194,46)" fg:x="45836" fg:w="516"/><text x="95.5584%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.3379%" y="149" width="0.0145%" height="15" fill="rgb(228,137,12)" fg:x="46352" fg:w="7"/><text x="96.6308%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 3.25%)</title><rect x="93.2992%" y="165" width="3.2548%" height="15" fill="rgb(221,118,0)" fg:x="44890" fg:w="1566"/><text x="93.5922%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.5540%" y="165" width="0.0145%" height="15" fill="rgb(232,201,19)" fg:x="46456" fg:w="7"/><text x="96.8470%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.5686%" y="165" width="0.0145%" height="15" fill="rgb(219,35,48)" fg:x="46463" fg:w="7"/><text x="96.8615%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.5831%" y="165" width="0.1247%" height="15" fill="rgb(221,137,12)" fg:x="46470" fg:w="60"/><text x="96.8761%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,587 instructions, 5.38%)</title><rect x="92.5864%" y="181" width="5.3768%" height="15" fill="rgb(216,112,52)" fg:x="44547" fg:w="2587"/><text x="92.8793%" y="191.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_remove::{{closure}} (47,563 instructions, 98.85%)</title><rect x="0.3907%" y="197" width="98.8548%" height="15" fill="rgb(238,117,33)" fg:x="188" fg:w="47563"/><text x="0.6837%" y="207.50">heap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.2455%" y="197" width="0.0291%" height="15" fill="rgb(221,110,54)" fg:x="47751" fg:w="14"/><text x="99.5385%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.06%)</title><rect x="99.4617%" y="181" width="0.0561%" height="15" fill="rgb(216,213,35)" fg:x="47855" fg:w="27"/><text x="99.7547%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.42%)</title><rect x="99.2767%" y="197" width="0.4240%" height="15" fill="rgb(215,218,11)" fg:x="47766" fg:w="204"/><text x="99.5697%" y="207.50"></text></g><g><title>all (48,114 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,197,28)" fg:x="0" fg:w="48114"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (48,114 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,92,38)" fg:x="0" fg:w="48114"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>