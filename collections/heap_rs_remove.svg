<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="49090"><g><title>ic_cdk::setup (7 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0143%" height="15" fill="rgb(219,220,26)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.0143%" y="165" width="0.1833%" height="15" fill="rgb(243,200,12)" fg:x="7" fg:w="90"/><text x="0.3072%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.0143%" y="181" width="0.2037%" height="15" fill="rgb(251,223,8)" fg:x="7" fg:w="100"/><text x="0.3072%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.2241%" y="165" width="0.1833%" height="15" fill="rgb(253,5,52)" fg:x="110" fg:w="90"/><text x="0.5170%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.2241%" y="181" width="0.2037%" height="15" fill="rgb(218,192,10)" fg:x="110" fg:w="100"/><text x="0.5170%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 0.42%)</title><rect x="0.0143%" y="197" width="0.4196%" height="15" fill="rgb(221,127,16)" fg:x="7" fg:w="206"/><text x="0.3072%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="0.4339%" y="133" width="0.1833%" height="15" fill="rgb(229,87,30)" fg:x="213" fg:w="90"/><text x="0.7269%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="0.4339%" y="149" width="0.2037%" height="15" fill="rgb(231,128,50)" fg:x="213" fg:w="100"/><text x="0.7269%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="0.4339%" y="165" width="0.2098%" height="15" fill="rgb(214,190,14)" fg:x="213" fg:w="103"/><text x="0.7269%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (162 instructions, 0.33%)</title><rect x="0.4339%" y="181" width="0.3300%" height="15" fill="rgb(229,179,37)" fg:x="213" fg:w="162"/><text x="0.7269%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="0.7639%" y="165" width="0.1243%" height="15" fill="rgb(253,12,33)" fg:x="375" fg:w="61"/><text x="1.0569%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="0.8882%" y="165" width="0.8291%" height="15" fill="rgb(224,11,54)" fg:x="436" fg:w="407"/><text x="1.1811%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="1.7173%" y="165" width="0.1507%" height="15" fill="rgb(207,45,27)" fg:x="843" fg:w="74"/><text x="2.0102%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="1.8680%" y="165" width="0.1100%" height="15" fill="rgb(238,100,10)" fg:x="917" fg:w="54"/><text x="2.1610%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="1.9780%" y="165" width="0.1100%" height="15" fill="rgb(244,129,28)" fg:x="971" fg:w="54"/><text x="2.2710%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="2.0880%" y="165" width="0.1100%" height="15" fill="rgb(233,43,39)" fg:x="1025" fg:w="54"/><text x="2.3810%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.11%)</title><rect x="2.1980%" y="165" width="0.1100%" height="15" fill="rgb(252,4,10)" fg:x="1079" fg:w="54"/><text x="2.4910%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="2.3080%" y="165" width="0.1243%" height="15" fill="rgb(235,226,10)" fg:x="1133" fg:w="61"/><text x="2.6010%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.20%)</title><rect x="2.4323%" y="165" width="0.1976%" height="15" fill="rgb(242,221,3)" fg:x="1194" fg:w="97"/><text x="2.7252%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="2.6299%" y="165" width="0.8291%" height="15" fill="rgb(236,161,39)" fg:x="1291" fg:w="407"/><text x="2.9228%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.4590%" y="165" width="0.0326%" height="15" fill="rgb(214,22,52)" fg:x="1698" fg:w="16"/><text x="3.7519%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="3.4915%" y="101" width="0.1833%" height="15" fill="rgb(238,99,53)" fg:x="1714" fg:w="90"/><text x="3.7845%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="3.4915%" y="117" width="0.2037%" height="15" fill="rgb(244,46,48)" fg:x="1714" fg:w="100"/><text x="3.7845%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="3.4915%" y="133" width="0.2098%" height="15" fill="rgb(227,37,4)" fg:x="1714" fg:w="103"/><text x="3.7845%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.12%)</title><rect x="3.7014%" y="101" width="0.1222%" height="15" fill="rgb(234,89,25)" fg:x="1817" fg:w="60"/><text x="3.9943%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.17%)</title><rect x="3.7014%" y="117" width="0.1732%" height="15" fill="rgb(232,35,11)" fg:x="1817" fg:w="85"/><text x="3.9943%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.8745%" y="69" width="0.0183%" height="15" fill="rgb(217,139,24)" fg:x="1902" fg:w="9"/><text x="4.1675%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.8928%" y="53" width="0.0611%" height="15" fill="rgb(241,141,45)" fg:x="1911" fg:w="30"/><text x="4.1858%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.11%)</title><rect x="3.8928%" y="69" width="0.1120%" height="15" fill="rgb(223,227,5)" fg:x="1911" fg:w="55"/><text x="4.1858%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.24%)</title><rect x="3.8745%" y="85" width="0.2363%" height="15" fill="rgb(207,125,4)" fg:x="1902" fg:w="116"/><text x="4.1675%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.34%)</title><rect x="3.8745%" y="101" width="0.3443%" height="15" fill="rgb(236,26,11)" fg:x="1902" fg:w="169"/><text x="4.1675%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.35%)</title><rect x="3.8745%" y="117" width="0.3545%" height="15" fill="rgb(208,30,34)" fg:x="1902" fg:w="174"/><text x="4.1675%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 0.75%)</title><rect x="3.7014%" y="133" width="0.7476%" height="15" fill="rgb(233,108,8)" fg:x="1817" fg:w="367"/><text x="3.9943%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.25%)</title><rect x="3.4915%" y="149" width="1.2487%" height="15" fill="rgb(241,216,50)" fg:x="1714" fg:w="613"/><text x="3.7845%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="4.7403%" y="149" width="0.1507%" height="15" fill="rgb(252,134,35)" fg:x="2327" fg:w="74"/><text x="5.0332%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="4.8910%" y="149" width="0.1100%" height="15" fill="rgb(219,114,36)" fg:x="2401" fg:w="54"/><text x="5.1840%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 1.65%)</title><rect x="3.4915%" y="165" width="1.6541%" height="15" fill="rgb(209,65,40)" fg:x="1714" fg:w="812"/><text x="3.7845%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="5.1457%" y="165" width="0.1141%" height="15" fill="rgb(245,93,26)" fg:x="2526" fg:w="56"/><text x="5.4386%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.20%)</title><rect x="5.2597%" y="165" width="0.1976%" height="15" fill="rgb(232,219,6)" fg:x="2582" fg:w="97"/><text x="5.5527%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.83%)</title><rect x="5.4573%" y="149" width="0.8291%" height="15" fill="rgb(227,50,18)" fg:x="2679" fg:w="407"/><text x="5.7503%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.2864%" y="149" width="0.0326%" height="15" fill="rgb(214,178,11)" fg:x="3086" fg:w="16"/><text x="6.5794%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="6.3190%" y="85" width="0.1833%" height="15" fill="rgb(248,67,13)" fg:x="3102" fg:w="90"/><text x="6.6120%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="6.3190%" y="101" width="0.2037%" height="15" fill="rgb(253,15,37)" fg:x="3102" fg:w="100"/><text x="6.6120%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="6.3190%" y="117" width="0.2098%" height="15" fill="rgb(236,37,13)" fg:x="3102" fg:w="103"/><text x="6.6120%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.12%)</title><rect x="6.5288%" y="85" width="0.1222%" height="15" fill="rgb(216,228,12)" fg:x="3205" fg:w="60"/><text x="6.8218%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.17%)</title><rect x="6.5288%" y="101" width="0.1732%" height="15" fill="rgb(248,67,26)" fg:x="3205" fg:w="85"/><text x="6.8218%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.7020%" y="53" width="0.0183%" height="15" fill="rgb(227,167,21)" fg:x="3290" fg:w="9"/><text x="6.9949%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="6.7203%" y="37" width="0.0611%" height="15" fill="rgb(212,23,51)" fg:x="3299" fg:w="30"/><text x="7.0133%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.11%)</title><rect x="6.7203%" y="53" width="0.1120%" height="15" fill="rgb(215,166,22)" fg:x="3299" fg:w="55"/><text x="7.0133%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.24%)</title><rect x="6.7020%" y="69" width="0.2363%" height="15" fill="rgb(242,226,22)" fg:x="3290" fg:w="116"/><text x="6.9949%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.34%)</title><rect x="6.7020%" y="85" width="0.3443%" height="15" fill="rgb(250,1,53)" fg:x="3290" fg:w="169"/><text x="6.9949%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.35%)</title><rect x="6.7020%" y="101" width="0.3545%" height="15" fill="rgb(227,150,26)" fg:x="3290" fg:w="174"/><text x="6.9949%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 0.75%)</title><rect x="6.5288%" y="117" width="0.7476%" height="15" fill="rgb(236,170,12)" fg:x="3205" fg:w="367"/><text x="6.8218%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.25%)</title><rect x="6.3190%" y="133" width="1.2487%" height="15" fill="rgb(221,35,20)" fg:x="3102" fg:w="613"/><text x="6.6120%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.15%)</title><rect x="7.5677%" y="133" width="0.1507%" height="15" fill="rgb(248,208,16)" fg:x="3715" fg:w="74"/><text x="7.8607%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="7.7185%" y="133" width="0.1100%" height="15" fill="rgb(235,50,9)" fg:x="3789" fg:w="54"/><text x="8.0114%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 1.65%)</title><rect x="6.3190%" y="149" width="1.6541%" height="15" fill="rgb(249,220,10)" fg:x="3102" fg:w="812"/><text x="6.6120%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.12%)</title><rect x="7.9731%" y="133" width="0.1243%" height="15" fill="rgb(223,33,7)" fg:x="3914" fg:w="61"/><text x="8.2661%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.26%)</title><rect x="8.0974%" y="133" width="0.2567%" height="15" fill="rgb(224,44,14)" fg:x="3975" fg:w="126"/><text x="8.3903%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="8.3540%" y="133" width="0.1141%" height="15" fill="rgb(236,174,34)" fg:x="4101" fg:w="56"/><text x="8.6470%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 0.62%)</title><rect x="7.9731%" y="149" width="0.6213%" height="15" fill="rgb(250,145,54)" fg:x="3914" fg:w="305"/><text x="8.2661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="8.5944%" y="117" width="0.1833%" height="15" fill="rgb(212,83,28)" fg:x="4219" fg:w="90"/><text x="8.8874%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="8.5944%" y="133" width="0.2037%" height="15" fill="rgb(224,10,16)" fg:x="4219" fg:w="100"/><text x="8.8874%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="8.5944%" y="149" width="0.2098%" height="15" fill="rgb(236,0,21)" fg:x="4219" fg:w="103"/><text x="8.8874%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,868 instructions, 3.81%)</title><rect x="5.4573%" y="165" width="3.8053%" height="15" fill="rgb(224,44,4)" fg:x="2679" fg:w="1868"/><text x="5.7503%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.11%)</title><rect x="9.2626%" y="165" width="0.1141%" height="15" fill="rgb(222,50,21)" fg:x="4547" fg:w="56"/><text x="9.5555%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.3767%" y="165" width="0.0265%" height="15" fill="rgb(205,68,44)" fg:x="4603" fg:w="13"/><text x="9.6696%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.4031%" y="165" width="0.0265%" height="15" fill="rgb(248,195,44)" fg:x="4616" fg:w="13"/><text x="9.6961%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="9.4296%" y="165" width="0.0448%" height="15" fill="rgb(250,83,18)" fg:x="4629" fg:w="22"/><text x="9.7226%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="9.4744%" y="117" width="0.1833%" height="15" fill="rgb(207,84,22)" fg:x="4651" fg:w="90"/><text x="9.7674%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="9.4744%" y="133" width="0.2037%" height="15" fill="rgb(241,44,30)" fg:x="4651" fg:w="100"/><text x="9.7674%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="9.4744%" y="149" width="0.2098%" height="15" fill="rgb(226,122,33)" fg:x="4651" fg:w="103"/><text x="9.7674%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (183 instructions, 0.37%)</title><rect x="9.4744%" y="165" width="0.3728%" height="15" fill="rgb(221,3,17)" fg:x="4651" fg:w="183"/><text x="9.7674%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="9.8472%" y="101" width="0.1833%" height="15" fill="rgb(236,43,14)" fg:x="4834" fg:w="90"/><text x="10.1402%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="9.8472%" y="117" width="0.2037%" height="15" fill="rgb(253,133,33)" fg:x="4834" fg:w="100"/><text x="10.1402%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="9.8472%" y="133" width="0.2098%" height="15" fill="rgb(214,83,3)" fg:x="4834" fg:w="103"/><text x="10.1402%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.27%)</title><rect x="9.8472%" y="149" width="0.2709%" height="15" fill="rgb(217,212,25)" fg:x="4834" fg:w="133"/><text x="10.1402%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (201 instructions, 0.41%)</title><rect x="9.8472%" y="165" width="0.4095%" height="15" fill="rgb(243,121,38)" fg:x="4834" fg:w="201"/><text x="10.1402%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.2567%" y="133" width="0.1833%" height="15" fill="rgb(231,114,33)" fg:x="5035" fg:w="90"/><text x="10.5496%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.2567%" y="149" width="0.2037%" height="15" fill="rgb(244,110,2)" fg:x="5035" fg:w="100"/><text x="10.5496%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="10.2567%" y="165" width="0.2098%" height="15" fill="rgb(233,8,39)" fg:x="5035" fg:w="103"/><text x="10.5496%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="10.4665%" y="165" width="0.1650%" height="15" fill="rgb(207,190,0)" fg:x="5138" fg:w="81"/><text x="10.7595%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.6315%" y="133" width="0.1833%" height="15" fill="rgb(250,72,37)" fg:x="5219" fg:w="90"/><text x="10.9245%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.6315%" y="149" width="0.2037%" height="15" fill="rgb(245,81,38)" fg:x="5219" fg:w="100"/><text x="10.9245%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="10.8413%" y="133" width="0.1833%" height="15" fill="rgb(239,123,40)" fg:x="5322" fg:w="90"/><text x="11.1343%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="10.8413%" y="149" width="0.2037%" height="15" fill="rgb(214,102,43)" fg:x="5322" fg:w="100"/><text x="11.1343%" y="159.50"></text></g><g><title>__rust_alloc (206 instructions, 0.42%)</title><rect x="10.6315%" y="165" width="0.4196%" height="15" fill="rgb(250,225,50)" fg:x="5219" fg:w="206"/><text x="10.9245%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.03%)</title><rect x="11.0511%" y="165" width="0.0285%" height="15" fill="rgb(242,173,23)" fg:x="5425" fg:w="14"/><text x="11.3441%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="11.0796%" y="165" width="0.1650%" height="15" fill="rgb(227,106,5)" fg:x="5439" fg:w="81"/><text x="11.3726%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.84%)</title><rect x="11.2447%" y="165" width="0.8372%" height="15" fill="rgb(226,196,27)" fg:x="5520" fg:w="411"/><text x="11.5376%" y="175.50"></text></g><g><title>memcpy (366 instructions, 0.75%)</title><rect x="12.0819%" y="165" width="0.7456%" height="15" fill="rgb(244,151,32)" fg:x="5931" fg:w="366"/><text x="12.3749%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,237 instructions, 14.74%)</title><rect x="0.7639%" y="181" width="14.7423%" height="15" fill="rgb(246,178,31)" fg:x="375" fg:w="7237"/><text x="1.0569%" y="191.50">candid::de::IDLDese..</text></g><g><title>memcpy (381 instructions, 0.78%)</title><rect x="15.5062%" y="181" width="0.7761%" height="15" fill="rgb(223,182,33)" fg:x="7612" fg:w="381"/><text x="15.7992%" y="191.50"></text></g><g><title>memcpy (381 instructions, 0.78%)</title><rect x="16.2823%" y="181" width="0.7761%" height="15" fill="rgb(237,43,26)" fg:x="7993" fg:w="381"/><text x="16.5753%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.01%)</title><rect x="17.0585%" y="165" width="0.0122%" height="15" fill="rgb(216,13,44)" fg:x="8374" fg:w="6"/><text x="17.3514%" y="175.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.09%)</title><rect x="17.0585%" y="181" width="0.0917%" height="15" fill="rgb(214,149,19)" fg:x="8374" fg:w="45"/><text x="17.3514%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="17.1501%" y="133" width="0.1833%" height="15" fill="rgb(240,141,37)" fg:x="8419" fg:w="90"/><text x="17.4431%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="17.1501%" y="149" width="0.2037%" height="15" fill="rgb(220,62,39)" fg:x="8419" fg:w="100"/><text x="17.4431%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="17.1501%" y="165" width="0.2098%" height="15" fill="rgb(235,190,39)" fg:x="8419" fg:w="103"/><text x="17.4431%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (149 instructions, 0.30%)</title><rect x="17.1501%" y="181" width="0.3035%" height="15" fill="rgb(230,22,40)" fg:x="8419" fg:w="149"/><text x="17.4431%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.4537%" y="149" width="0.0102%" height="15" fill="rgb(252,154,14)" fg:x="8568" fg:w="5"/><text x="17.7466%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="17.4638%" y="133" width="0.1080%" height="15" fill="rgb(218,224,12)" fg:x="8573" fg:w="53"/><text x="17.7568%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.18%)</title><rect x="17.5718%" y="133" width="0.1813%" height="15" fill="rgb(245,217,19)" fg:x="8626" fg:w="89"/><text x="17.8648%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.33%)</title><rect x="17.7531%" y="133" width="0.3280%" height="15" fill="rgb(248,144,45)" fg:x="8715" fg:w="161"/><text x="18.0461%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.11%)</title><rect x="17.4638%" y="149" width="1.1122%" height="15" fill="rgb(215,197,48)" fg:x="8573" fg:w="546"/><text x="17.7568%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 1.62%)</title><rect x="17.4537%" y="165" width="1.6215%" height="15" fill="rgb(230,193,50)" fg:x="8568" fg:w="796"/><text x="17.7466%" y="175.50"></text></g><g><title>candid::types::internal::env_add (822 instructions, 1.67%)</title><rect x="17.4537%" y="181" width="1.6745%" height="15" fill="rgb(246,177,44)" fg:x="8568" fg:w="822"/><text x="17.7466%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="19.1281%" y="149" width="0.1833%" height="15" fill="rgb(218,160,16)" fg:x="9390" fg:w="90"/><text x="19.4211%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="19.1281%" y="165" width="0.2037%" height="15" fill="rgb(206,116,25)" fg:x="9390" fg:w="100"/><text x="19.4211%" y="175.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="19.1281%" y="181" width="0.2098%" height="15" fill="rgb(244,121,4)" fg:x="9390" fg:w="103"/><text x="19.4211%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.3380%" y="149" width="0.0102%" height="15" fill="rgb(213,76,41)" fg:x="9493" fg:w="5"/><text x="19.6309%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="19.3481%" y="133" width="0.1080%" height="15" fill="rgb(210,188,13)" fg:x="9498" fg:w="53"/><text x="19.6411%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.18%)</title><rect x="19.4561%" y="133" width="0.1813%" height="15" fill="rgb(229,35,29)" fg:x="9551" fg:w="89"/><text x="19.7491%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.33%)</title><rect x="19.6374%" y="133" width="0.3280%" height="15" fill="rgb(248,35,32)" fg:x="9640" fg:w="161"/><text x="19.9304%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.11%)</title><rect x="19.3481%" y="149" width="1.1122%" height="15" fill="rgb(209,35,16)" fg:x="9498" fg:w="546"/><text x="19.6411%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.14%)</title><rect x="20.4604%" y="149" width="0.1385%" height="15" fill="rgb(214,228,11)" fg:x="10044" fg:w="68"/><text x="20.7533%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="20.5989%" y="133" width="0.1650%" height="15" fill="rgb(209,191,48)" fg:x="10112" fg:w="81"/><text x="20.8919%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.23%)</title><rect x="20.5989%" y="149" width="0.2261%" height="15" fill="rgb(211,199,48)" fg:x="10112" fg:w="111"/><text x="20.8919%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 1.84%)</title><rect x="19.3380%" y="165" width="1.8415%" height="15" fill="rgb(212,144,33)" fg:x="9493" fg:w="904"/><text x="19.6309%" y="175.50"></text></g><g><title>candid::types::internal::env_add (930 instructions, 1.89%)</title><rect x="19.3380%" y="181" width="1.8945%" height="15" fill="rgb(235,227,38)" fg:x="9493" fg:w="930"/><text x="19.6309%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.01%)</title><rect x="21.2324%" y="149" width="0.0102%" height="15" fill="rgb(248,40,21)" fg:x="10423" fg:w="5"/><text x="21.5254%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.11%)</title><rect x="21.2426%" y="117" width="0.1080%" height="15" fill="rgb(252,45,11)" fg:x="10428" fg:w="53"/><text x="21.5356%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.16%)</title><rect x="21.2426%" y="133" width="0.1589%" height="15" fill="rgb(220,198,9)" fg:x="10428" fg:w="78"/><text x="21.5356%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 0.61%)</title><rect x="21.2426%" y="149" width="0.6111%" height="15" fill="rgb(220,11,3)" fg:x="10428" fg:w="300"/><text x="21.5356%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.06%)</title><rect x="21.8537%" y="149" width="0.0550%" height="15" fill="rgb(205,193,34)" fg:x="10728" fg:w="27"/><text x="22.1467%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.9087%" y="149" width="0.0224%" height="15" fill="rgb(244,193,22)" fg:x="10755" fg:w="11"/><text x="22.2017%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 1.05%)</title><rect x="21.2324%" y="165" width="1.0491%" height="15" fill="rgb(221,199,33)" fg:x="10423" fg:w="515"/><text x="21.5254%" y="175.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 1.12%)</title><rect x="21.2324%" y="181" width="1.1245%" height="15" fill="rgb(206,132,42)" fg:x="10423" fg:w="552"/><text x="21.5254%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.08%)</title><rect x="22.3569%" y="181" width="0.0754%" height="15" fill="rgb(218,50,53)" fg:x="10975" fg:w="37"/><text x="22.6499%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.25%)</title><rect x="22.4323%" y="165" width="0.2506%" height="15" fill="rgb(207,3,2)" fg:x="11012" fg:w="123"/><text x="22.7252%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.25%)</title><rect x="22.7439%" y="165" width="0.2506%" height="15" fill="rgb(215,30,34)" fg:x="11165" fg:w="123"/><text x="23.0369%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 0.62%)</title><rect x="22.4323%" y="181" width="0.6233%" height="15" fill="rgb(208,13,7)" fg:x="11012" fg:w="306"/><text x="22.7252%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (104 instructions, 0.21%)</title><rect x="23.0556%" y="181" width="0.2119%" height="15" fill="rgb(221,186,47)" fg:x="11318" fg:w="104"/><text x="23.3486%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.2675%" y="181" width="0.0224%" height="15" fill="rgb(229,166,31)" fg:x="11422" fg:w="11"/><text x="23.5604%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.2899%" y="181" width="0.0224%" height="15" fill="rgb(207,44,26)" fg:x="11433" fg:w="11"/><text x="23.5828%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.3123%" y="181" width="0.0224%" height="15" fill="rgb(207,109,52)" fg:x="11444" fg:w="11"/><text x="23.6053%" y="191.50"></text></g><g><title>memcpy (411 instructions, 0.84%)</title><rect x="23.3347%" y="181" width="0.8372%" height="15" fill="rgb(209,16,1)" fg:x="11455" fg:w="411"/><text x="23.6277%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="24.1719%" y="165" width="0.0448%" height="15" fill="rgb(254,132,51)" fg:x="11866" fg:w="22"/><text x="24.4649%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.34%)</title><rect x="24.2167%" y="165" width="0.3443%" height="15" fill="rgb(213,66,21)" fg:x="11888" fg:w="169"/><text x="24.5097%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (103 instructions, 0.21%)</title><rect x="24.5610%" y="133" width="0.2098%" height="15" fill="rgb(231,97,39)" fg:x="12057" fg:w="103"/><text x="24.8540%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (248 instructions, 0.51%)</title><rect x="24.5610%" y="149" width="0.5052%" height="15" fill="rgb(229,44,35)" fg:x="12057" fg:w="248"/><text x="24.8540%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (278 instructions, 0.57%)</title><rect x="24.5610%" y="165" width="0.5663%" height="15" fill="rgb(218,19,27)" fg:x="12057" fg:w="278"/><text x="24.8540%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="25.1273%" y="165" width="0.0224%" height="15" fill="rgb(212,133,28)" fg:x="12335" fg:w="11"/><text x="25.4203%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="25.1497%" y="165" width="0.0102%" height="15" fill="rgb(249,0,38)" fg:x="12346" fg:w="5"/><text x="25.4427%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (579 instructions, 1.18%)</title><rect x="24.1719%" y="181" width="1.1795%" height="15" fill="rgb(223,150,49)" fg:x="11866" fg:w="579"/><text x="24.4649%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (53 instructions, 0.11%)</title><rect x="25.3514%" y="165" width="0.1080%" height="15" fill="rgb(232,2,45)" fg:x="12445" fg:w="53"/><text x="25.6444%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (103 instructions, 0.21%)</title><rect x="25.4594%" y="165" width="0.2098%" height="15" fill="rgb(254,176,14)" fg:x="12498" fg:w="103"/><text x="25.7523%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (236 instructions, 0.48%)</title><rect x="25.3514%" y="181" width="0.4807%" height="15" fill="rgb(212,184,35)" fg:x="12445" fg:w="236"/><text x="25.6444%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,875 instructions, 26.23%)</title><rect x="0.4339%" y="197" width="26.2273%" height="15" fill="rgb(224,97,28)" fg:x="213" fg:w="12875"/><text x="0.7269%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>heap::MAP::__getit (5 instructions, 0.01%)</title><rect x="26.6612%" y="197" width="0.0102%" height="15" fill="rgb(206,103,40)" fg:x="13088" fg:w="5"/><text x="26.9542%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="26.6714%" y="197" width="1.3587%" height="15" fill="rgb(214,29,51)" fg:x="13093" fg:w="667"/><text x="26.9644%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="28.0301%" y="197" width="1.2813%" height="15" fill="rgb(253,101,42)" fg:x="13760" fg:w="629"/><text x="28.3231%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="29.3115%" y="197" width="1.4178%" height="15" fill="rgb(252,122,4)" fg:x="14389" fg:w="696"/><text x="29.6044%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="30.7293%" y="197" width="1.3587%" height="15" fill="rgb(210,4,26)" fg:x="15085" fg:w="667"/><text x="31.0222%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="32.0880%" y="197" width="1.2813%" height="15" fill="rgb(248,188,35)" fg:x="15752" fg:w="629"/><text x="32.3810%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="33.3693%" y="197" width="1.4178%" height="15" fill="rgb(245,35,8)" fg:x="16381" fg:w="696"/><text x="33.6623%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="34.7871%" y="197" width="1.3587%" height="15" fill="rgb(237,84,1)" fg:x="17077" fg:w="667"/><text x="35.0801%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="36.1459%" y="197" width="1.3587%" height="15" fill="rgb(237,7,53)" fg:x="17744" fg:w="667"/><text x="36.4388%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="37.5046%" y="197" width="1.3587%" height="15" fill="rgb(230,32,7)" fg:x="18411" fg:w="667"/><text x="37.7976%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="38.8633%" y="197" width="1.4769%" height="15" fill="rgb(213,165,27)" fg:x="19078" fg:w="725"/><text x="39.1563%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="40.3402%" y="197" width="1.3587%" height="15" fill="rgb(213,201,50)" fg:x="19803" fg:w="667"/><text x="40.6332%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="41.6989%" y="197" width="1.3587%" height="15" fill="rgb(240,33,15)" fg:x="20470" fg:w="667"/><text x="41.9919%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="43.0576%" y="197" width="1.3587%" height="15" fill="rgb(241,84,36)" fg:x="21137" fg:w="667"/><text x="43.3506%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (754 instructions, 1.54%)</title><rect x="44.4164%" y="197" width="1.5360%" height="15" fill="rgb(250,168,36)" fg:x="21804" fg:w="754"/><text x="44.7093%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 instructions, 1.34%)</title><rect x="45.9523%" y="197" width="1.3404%" height="15" fill="rgb(251,169,2)" fg:x="22558" fg:w="658"/><text x="46.2453%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="47.2927%" y="197" width="1.4178%" height="15" fill="rgb(232,53,1)" fg:x="23216" fg:w="696"/><text x="47.5857%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="48.7105%" y="197" width="1.3587%" height="15" fill="rgb(220,90,15)" fg:x="23912" fg:w="667"/><text x="49.0035%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 instructions, 1.34%)</title><rect x="50.0693%" y="197" width="1.3404%" height="15" fill="rgb(250,5,1)" fg:x="24579" fg:w="658"/><text x="50.3622%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 instructions, 1.34%)</title><rect x="51.4097%" y="197" width="1.3404%" height="15" fill="rgb(208,199,8)" fg:x="25237" fg:w="658"/><text x="51.7026%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="52.7501%" y="197" width="1.3587%" height="15" fill="rgb(235,156,21)" fg:x="25895" fg:w="667"/><text x="53.0430%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="54.1088%" y="197" width="1.3587%" height="15" fill="rgb(231,129,30)" fg:x="26562" fg:w="667"/><text x="54.4017%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="55.4675%" y="197" width="1.4178%" height="15" fill="rgb(212,71,33)" fg:x="27229" fg:w="696"/><text x="55.7605%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="56.8853%" y="197" width="1.2813%" height="15" fill="rgb(213,155,27)" fg:x="27925" fg:w="629"/><text x="57.1783%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="58.1666%" y="197" width="1.4769%" height="15" fill="rgb(211,131,29)" fg:x="28554" fg:w="725"/><text x="58.4596%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="59.6435%" y="197" width="1.3587%" height="15" fill="rgb(212,4,22)" fg:x="29279" fg:w="667"/><text x="59.9365%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="61.0022%" y="197" width="1.4178%" height="15" fill="rgb(221,54,5)" fg:x="29946" fg:w="696"/><text x="61.2952%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="62.4200%" y="197" width="1.3587%" height="15" fill="rgb(208,78,13)" fg:x="30642" fg:w="667"/><text x="62.7130%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="63.7788%" y="197" width="1.4178%" height="15" fill="rgb(211,89,30)" fg:x="31309" fg:w="696"/><text x="64.0717%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="65.1966%" y="197" width="1.3587%" height="15" fill="rgb(239,122,14)" fg:x="32005" fg:w="667"/><text x="65.4895%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="66.5553%" y="197" width="1.2813%" height="15" fill="rgb(228,62,31)" fg:x="32672" fg:w="629"/><text x="66.8483%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="67.8366%" y="197" width="1.4178%" height="15" fill="rgb(236,35,39)" fg:x="33301" fg:w="696"/><text x="68.1296%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="69.2544%" y="197" width="1.3587%" height="15" fill="rgb(240,152,2)" fg:x="33997" fg:w="667"/><text x="69.5474%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="70.6132%" y="197" width="1.3587%" height="15" fill="rgb(253,28,35)" fg:x="34664" fg:w="667"/><text x="70.9061%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="71.9719%" y="197" width="1.2813%" height="15" fill="rgb(252,216,16)" fg:x="35331" fg:w="629"/><text x="72.2649%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="73.2532%" y="197" width="1.4178%" height="15" fill="rgb(209,59,3)" fg:x="35960" fg:w="696"/><text x="73.5462%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="74.6710%" y="197" width="1.4178%" height="15" fill="rgb(216,55,53)" fg:x="36656" fg:w="696"/><text x="74.9640%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="76.0888%" y="197" width="1.2813%" height="15" fill="rgb(245,134,45)" fg:x="37352" fg:w="629"/><text x="76.3818%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="77.3701%" y="197" width="1.4769%" height="15" fill="rgb(222,222,25)" fg:x="37981" fg:w="725"/><text x="77.6631%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="78.8470%" y="197" width="1.2813%" height="15" fill="rgb(232,43,34)" fg:x="38706" fg:w="629"/><text x="79.1400%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (754 instructions, 1.54%)</title><rect x="80.1283%" y="197" width="1.5360%" height="15" fill="rgb(221,193,19)" fg:x="39335" fg:w="754"/><text x="80.4213%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (629 instructions, 1.28%)</title><rect x="81.6643%" y="197" width="1.2813%" height="15" fill="rgb(206,99,48)" fg:x="40089" fg:w="629"/><text x="81.9573%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (754 instructions, 1.54%)</title><rect x="82.9456%" y="197" width="1.5360%" height="15" fill="rgb(245,204,10)" fg:x="40718" fg:w="754"/><text x="83.2386%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="84.4816%" y="197" width="1.4769%" height="15" fill="rgb(234,176,12)" fg:x="41472" fg:w="725"/><text x="84.7745%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (754 instructions, 1.54%)</title><rect x="85.9584%" y="197" width="1.5360%" height="15" fill="rgb(244,0,35)" fg:x="42197" fg:w="754"/><text x="86.2514%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (696 instructions, 1.42%)</title><rect x="87.4944%" y="197" width="1.4178%" height="15" fill="rgb(227,22,54)" fg:x="42951" fg:w="696"/><text x="87.7874%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="88.9122%" y="197" width="1.3587%" height="15" fill="rgb(232,199,0)" fg:x="43647" fg:w="667"/><text x="89.2052%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (725 instructions, 1.48%)</title><rect x="90.2709%" y="197" width="1.4769%" height="15" fill="rgb(243,163,10)" fg:x="44314" fg:w="725"/><text x="90.5639%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (687 instructions, 1.40%)</title><rect x="91.7478%" y="197" width="1.3995%" height="15" fill="rgb(246,5,34)" fg:x="45039" fg:w="687"/><text x="92.0408%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="93.1473%" y="197" width="1.3587%" height="15" fill="rgb(207,157,39)" fg:x="45726" fg:w="667"/><text x="93.4402%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (667 instructions, 1.36%)</title><rect x="94.5060%" y="197" width="1.3587%" height="15" fill="rgb(206,44,10)" fg:x="46393" fg:w="667"/><text x="94.7990%" y="207.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="95.8647%" y="165" width="0.0102%" height="15" fill="rgb(232,27,44)" fg:x="47060" fg:w="5"/><text x="96.1577%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (53 instructions, 0.11%)</title><rect x="95.8749%" y="133" width="0.1080%" height="15" fill="rgb(212,159,36)" fg:x="47065" fg:w="53"/><text x="96.1679%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (134 instructions, 0.27%)</title><rect x="95.8749%" y="149" width="0.2730%" height="15" fill="rgb(226,119,10)" fg:x="47065" fg:w="134"/><text x="96.1679%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.33%)</title><rect x="95.8749%" y="165" width="0.3341%" height="15" fill="rgb(219,31,14)" fg:x="47065" fg:w="164"/><text x="96.1679%" y="175.50"></text></g><g><title>memset (136 instructions, 0.28%)</title><rect x="96.2090%" y="165" width="0.2770%" height="15" fill="rgb(240,193,34)" fg:x="47229" fg:w="136"/><text x="96.5020%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 0.94%)</title><rect x="95.8647%" y="181" width="0.9411%" height="15" fill="rgb(233,226,2)" fg:x="47060" fg:w="462"/><text x="96.1577%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.16%)</title><rect x="96.8059%" y="165" width="0.1589%" height="15" fill="rgb(249,149,16)" fg:x="47522" fg:w="78"/><text x="97.0988%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.18%)</title><rect x="96.9648%" y="101" width="0.1833%" height="15" fill="rgb(214,65,17)" fg:x="47600" fg:w="90"/><text x="97.2577%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.20%)</title><rect x="96.9648%" y="117" width="0.2037%" height="15" fill="rgb(209,141,30)" fg:x="47600" fg:w="100"/><text x="97.2577%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.21%)</title><rect x="96.9648%" y="133" width="0.2098%" height="15" fill="rgb(246,128,16)" fg:x="47600" fg:w="103"/><text x="97.2577%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.27%)</title><rect x="96.9648%" y="149" width="0.2709%" height="15" fill="rgb(210,169,45)" fg:x="47600" fg:w="133"/><text x="97.2577%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 0.40%)</title><rect x="96.9648%" y="165" width="0.4033%" height="15" fill="rgb(232,64,42)" fg:x="47600" fg:w="198"/><text x="97.2577%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.3681%" y="165" width="0.0224%" height="15" fill="rgb(238,118,51)" fg:x="47798" fg:w="11"/><text x="97.6611%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.3905%" y="165" width="0.0224%" height="15" fill="rgb(205,223,2)" fg:x="47809" fg:w="11"/><text x="97.6835%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.15%)</title><rect x="97.4129%" y="165" width="0.1548%" height="15" fill="rgb(247,43,5)" fg:x="47820" fg:w="76"/><text x="97.7059%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.03%)</title><rect x="97.5677%" y="165" width="0.0285%" height="15" fill="rgb(214,13,1)" fg:x="47896" fg:w="14"/><text x="97.8607%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (670 instructions, 1.36%)</title><rect x="96.8059%" y="181" width="1.3648%" height="15" fill="rgb(247,123,27)" fg:x="47522" fg:w="670"/><text x="97.0988%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.1707%" y="181" width="0.0102%" height="15" fill="rgb(249,18,34)" fg:x="48192" fg:w="5"/><text x="98.4637%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.11%)</title><rect x="98.1809%" y="181" width="0.1100%" height="15" fill="rgb(214,20,25)" fg:x="48197" fg:w="54"/><text x="98.4739%" y="191.50"></text></g><g><title>candid::utils::write_args (1,255 instructions, 2.56%)</title><rect x="95.8647%" y="197" width="2.5565%" height="15" fill="rgb(254,48,15)" fg:x="47060" fg:w="1255"/><text x="96.1577%" y="207.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.17%)</title><rect x="98.4213%" y="197" width="0.1650%" height="15" fill="rgb(230,15,28)" fg:x="48315" fg:w="81"/><text x="98.7142%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.20%)</title><rect x="98.5863%" y="197" width="0.2037%" height="15" fill="rgb(238,161,16)" fg:x="48396" fg:w="100"/><text x="98.8792%" y="207.50"></text></g><g><title>all (49,090 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,133,25)" fg:x="0" fg:w="49090"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (49,090 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,208,3)" fg:x="0" fg:w="49090"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>