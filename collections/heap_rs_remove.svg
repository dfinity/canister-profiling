<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="49894"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0481%" height="15" fill="rgb(228,52,18)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0481%" y="197" width="0.1664%" height="15" fill="rgb(218,225,53)" fg:x="24" fg:w="83"/><text x="0.3411%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2145%" y="197" width="0.1664%" height="15" fill="rgb(221,13,36)" fg:x="107" fg:w="83"/><text x="0.5074%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3808%" y="165" width="0.1664%" height="15" fill="rgb(232,120,29)" fg:x="190" fg:w="83"/><text x="0.6738%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5472%" y="149" width="0.1643%" height="15" fill="rgb(213,0,31)" fg:x="273" fg:w="82"/><text x="0.8401%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7115%" y="133" width="0.0120%" height="15" fill="rgb(209,94,6)" fg:x="355" fg:w="6"/><text x="1.0045%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="0.7115%" y="149" width="0.8879%" height="15" fill="rgb(236,162,26)" fg:x="355" fg:w="443"/><text x="1.0045%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5994%" y="149" width="0.1904%" height="15" fill="rgb(228,85,37)" fg:x="798" fg:w="95"/><text x="1.8924%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7898%" y="149" width="0.1203%" height="15" fill="rgb(238,109,22)" fg:x="893" fg:w="60"/><text x="2.0828%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9100%" y="149" width="0.1203%" height="15" fill="rgb(234,42,52)" fg:x="953" fg:w="60"/><text x="2.2030%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0303%" y="149" width="0.1203%" height="15" fill="rgb(238,164,50)" fg:x="1013" fg:w="60"/><text x="2.3233%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1506%" y="149" width="0.1203%" height="15" fill="rgb(252,51,33)" fg:x="1073" fg:w="60"/><text x="2.4435%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2708%" y="149" width="0.1643%" height="15" fill="rgb(222,90,33)" fg:x="1133" fg:w="82"/><text x="2.5638%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4352%" y="149" width="0.1403%" height="15" fill="rgb(243,103,5)" fg:x="1215" fg:w="70"/><text x="2.7281%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5755%" y="133" width="0.0120%" height="15" fill="rgb(211,73,50)" fg:x="1285" fg:w="6"/><text x="2.8684%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="2.5755%" y="149" width="0.8879%" height="15" fill="rgb(240,80,54)" fg:x="1285" fg:w="443"/><text x="2.8684%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4633%" y="149" width="0.0381%" height="15" fill="rgb(220,88,12)" fg:x="1728" fg:w="19"/><text x="3.7563%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.5014%" y="133" width="0.1664%" height="15" fill="rgb(217,49,47)" fg:x="1747" fg:w="83"/><text x="3.7944%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6678%" y="101" width="0.1343%" height="15" fill="rgb(254,62,6)" fg:x="1830" fg:w="67"/><text x="3.9607%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="3.6678%" y="117" width="0.1924%" height="15" fill="rgb(216,135,17)" fg:x="1830" fg:w="96"/><text x="3.9607%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8602%" y="69" width="0.0220%" height="15" fill="rgb(250,103,23)" fg:x="1926" fg:w="11"/><text x="4.1532%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8822%" y="53" width="0.0701%" height="15" fill="rgb(225,194,46)" fg:x="1937" fg:w="35"/><text x="4.1752%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="3.8822%" y="69" width="0.1283%" height="15" fill="rgb(228,137,12)" fg:x="1937" fg:w="64"/><text x="4.1752%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="3.8602%" y="85" width="0.2886%" height="15" fill="rgb(221,118,0)" fg:x="1926" fg:w="144"/><text x="4.1532%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="3.8602%" y="101" width="0.4189%" height="15" fill="rgb(232,201,19)" fg:x="1926" fg:w="209"/><text x="4.1532%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="3.8602%" y="117" width="0.4389%" height="15" fill="rgb(219,35,48)" fg:x="1926" fg:w="219"/><text x="4.1532%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.91%)</title><rect x="3.6678%" y="133" width="0.9079%" height="15" fill="rgb(221,137,12)" fg:x="1830" fg:w="453"/><text x="3.9607%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.35%)</title><rect x="3.5014%" y="149" width="1.3509%" height="15" fill="rgb(216,112,52)" fg:x="1747" fg:w="674"/><text x="3.7944%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8523%" y="149" width="0.1904%" height="15" fill="rgb(238,117,33)" fg:x="2421" fg:w="95"/><text x="5.1453%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0427%" y="149" width="0.1203%" height="15" fill="rgb(221,110,54)" fg:x="2516" fg:w="60"/><text x="5.3357%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1629%" y="149" width="0.1523%" height="15" fill="rgb(216,213,35)" fg:x="2576" fg:w="76"/><text x="5.4559%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3153%" y="149" width="0.1403%" height="15" fill="rgb(215,218,11)" fg:x="2652" fg:w="70"/><text x="5.6082%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4556%" y="117" width="0.0120%" height="15" fill="rgb(209,197,28)" fg:x="2722" fg:w="6"/><text x="5.7485%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="5.4556%" y="133" width="0.8879%" height="15" fill="rgb(217,92,38)" fg:x="2722" fg:w="443"/><text x="5.7485%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3434%" y="133" width="0.0381%" height="15" fill="rgb(253,62,14)" fg:x="3165" fg:w="19"/><text x="6.6364%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3815%" y="117" width="0.1664%" height="15" fill="rgb(248,7,31)" fg:x="3184" fg:w="83"/><text x="6.6745%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5479%" y="85" width="0.1343%" height="15" fill="rgb(254,108,5)" fg:x="3267" fg:w="67"/><text x="6.8409%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="6.5479%" y="101" width="0.1924%" height="15" fill="rgb(250,146,34)" fg:x="3267" fg:w="96"/><text x="6.8409%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7403%" y="53" width="0.0220%" height="15" fill="rgb(238,168,20)" fg:x="3363" fg:w="11"/><text x="7.0333%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7623%" y="37" width="0.0701%" height="15" fill="rgb(205,117,16)" fg:x="3374" fg:w="35"/><text x="7.0553%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="6.7623%" y="53" width="0.1283%" height="15" fill="rgb(216,46,17)" fg:x="3374" fg:w="64"/><text x="7.0553%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="6.7403%" y="69" width="0.2886%" height="15" fill="rgb(237,155,50)" fg:x="3363" fg:w="144"/><text x="7.0333%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="6.7403%" y="85" width="0.4189%" height="15" fill="rgb(247,0,53)" fg:x="3363" fg:w="209"/><text x="7.0333%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="6.7403%" y="101" width="0.4389%" height="15" fill="rgb(215,205,54)" fg:x="3363" fg:w="219"/><text x="7.0333%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.91%)</title><rect x="6.5479%" y="117" width="0.9079%" height="15" fill="rgb(226,205,40)" fg:x="3267" fg:w="453"/><text x="6.8409%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 1.35%)</title><rect x="6.3815%" y="133" width="1.3509%" height="15" fill="rgb(218,176,32)" fg:x="3184" fg:w="674"/><text x="6.6745%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7324%" y="133" width="0.1904%" height="15" fill="rgb(244,158,36)" fg:x="3858" fg:w="95"/><text x="8.0254%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9228%" y="133" width="0.1203%" height="15" fill="rgb(227,192,30)" fg:x="3953" fg:w="60"/><text x="8.2158%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0431%" y="117" width="0.1643%" height="15" fill="rgb(220,171,6)" fg:x="4013" fg:w="82"/><text x="8.3360%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2074%" y="117" width="0.1904%" height="15" fill="rgb(244,138,42)" fg:x="4095" fg:w="95"/><text x="8.5004%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.3978%" y="117" width="0.1523%" height="15" fill="rgb(227,110,44)" fg:x="4190" fg:w="76"/><text x="8.6908%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0431%" y="133" width="0.6614%" height="15" fill="rgb(218,56,8)" fg:x="4013" fg:w="330"/><text x="8.3360%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="8.7045%" y="133" width="0.1664%" height="15" fill="rgb(220,29,10)" fg:x="4343" fg:w="83"/><text x="8.9974%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 3.90%)</title><rect x="5.4556%" y="149" width="3.9023%" height="15" fill="rgb(247,118,33)" fg:x="2722" fg:w="1947"/><text x="5.7485%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3578%" y="149" width="0.1523%" height="15" fill="rgb(220,203,53)" fg:x="4669" fg:w="76"/><text x="9.6508%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5102%" y="149" width="0.0301%" height="15" fill="rgb(223,160,40)" fg:x="4745" fg:w="15"/><text x="9.8031%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5402%" y="149" width="0.0301%" height="15" fill="rgb(251,56,2)" fg:x="4760" fg:w="15"/><text x="9.8332%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5703%" y="149" width="0.0180%" height="15" fill="rgb(225,39,24)" fg:x="4775" fg:w="9"/><text x="9.8633%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.03%)</title><rect x="9.5883%" y="149" width="0.0321%" height="15" fill="rgb(246,122,39)" fg:x="4784" fg:w="16"/><text x="9.8813%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6204%" y="133" width="0.1664%" height="15" fill="rgb(234,167,52)" fg:x="4800" fg:w="83"/><text x="9.9134%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6204%" y="149" width="0.3588%" height="15" fill="rgb(238,204,37)" fg:x="4800" fg:w="179"/><text x="9.9134%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9792%" y="117" width="0.1664%" height="15" fill="rgb(240,41,0)" fg:x="4979" fg:w="83"/><text x="10.2721%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9792%" y="133" width="0.2525%" height="15" fill="rgb(221,77,13)" fg:x="4979" fg:w="126"/><text x="10.2721%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.42%)</title><rect x="9.9792%" y="149" width="0.4229%" height="15" fill="rgb(211,188,41)" fg:x="4979" fg:w="211"/><text x="10.2721%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.4021%" y="149" width="0.1664%" height="15" fill="rgb(240,147,27)" fg:x="5190" fg:w="83"/><text x="10.6950%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.5684%" y="149" width="0.1784%" height="15" fill="rgb(222,47,39)" fg:x="5273" fg:w="89"/><text x="10.8614%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7468%" y="149" width="0.1664%" height="15" fill="rgb(236,15,3)" fg:x="5362" fg:w="83"/><text x="11.0398%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9131%" y="149" width="0.1664%" height="15" fill="rgb(239,169,41)" fg:x="5445" fg:w="83"/><text x="11.2061%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.0875%" y="149" width="0.1784%" height="15" fill="rgb(252,203,7)" fg:x="5532" fg:w="89"/><text x="11.3805%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="11.2659%" y="149" width="0.8578%" height="15" fill="rgb(234,147,43)" fg:x="5621" fg:w="428"/><text x="11.5589%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="12.1237%" y="149" width="0.8578%" height="15" fill="rgb(248,123,18)" fg:x="6049" fg:w="428"/><text x="12.4167%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 14.82%)</title><rect x="0.5472%" y="165" width="14.8174%" height="15" fill="rgb(253,86,3)" fg:x="273" fg:w="7393"/><text x="0.8401%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.3646%" y="165" width="0.7616%" height="15" fill="rgb(229,211,51)" fg:x="7666" fg:w="380"/><text x="15.6575%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.1262%" y="149" width="0.0140%" height="15" fill="rgb(253,37,45)" fg:x="8046" fg:w="7"/><text x="16.4192%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="16.1262%" y="165" width="0.0782%" height="15" fill="rgb(211,209,43)" fg:x="8046" fg:w="39"/><text x="16.4192%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="16.2044%" y="165" width="0.1664%" height="15" fill="rgb(251,143,44)" fg:x="8085" fg:w="83"/><text x="16.4973%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.3707%" y="149" width="0.0140%" height="15" fill="rgb(253,150,37)" fg:x="8168" fg:w="7"/><text x="16.6637%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.3847%" y="133" width="0.1183%" height="15" fill="rgb(232,154,34)" fg:x="8175" fg:w="59"/><text x="16.6777%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.5030%" y="133" width="0.1884%" height="15" fill="rgb(239,53,25)" fg:x="8234" fg:w="94"/><text x="16.7960%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.6914%" y="133" width="0.3467%" height="15" fill="rgb(215,196,13)" fg:x="8328" fg:w="173"/><text x="16.9844%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.3847%" y="149" width="1.1605%" height="15" fill="rgb(254,24,4)" fg:x="8175" fg:w="579"/><text x="16.6777%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 1.60%)</title><rect x="16.3707%" y="165" width="1.5994%" height="15" fill="rgb(224,138,30)" fg:x="8168" fg:w="798"/><text x="16.6637%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="17.9701%" y="165" width="0.1664%" height="15" fill="rgb(231,15,0)" fg:x="8966" fg:w="83"/><text x="18.2631%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="18.1364%" y="149" width="0.0140%" height="15" fill="rgb(230,88,44)" fg:x="9049" fg:w="7"/><text x="18.4294%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.1505%" y="133" width="0.1183%" height="15" fill="rgb(223,40,41)" fg:x="9056" fg:w="59"/><text x="18.4434%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.2687%" y="133" width="0.1884%" height="15" fill="rgb(209,175,7)" fg:x="9115" fg:w="94"/><text x="18.5617%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.4571%" y="133" width="0.3467%" height="15" fill="rgb(248,33,42)" fg:x="9209" fg:w="173"/><text x="18.7501%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.1505%" y="149" width="1.1605%" height="15" fill="rgb(247,122,5)" fg:x="9056" fg:w="579"/><text x="18.4434%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.3109%" y="149" width="0.1543%" height="15" fill="rgb(227,170,50)" fg:x="9635" fg:w="77"/><text x="19.6039%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="19.4653%" y="133" width="0.1784%" height="15" fill="rgb(220,175,6)" fg:x="9712" fg:w="89"/><text x="19.7582%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.25%)</title><rect x="19.4653%" y="149" width="0.2485%" height="15" fill="rgb(247,135,50)" fg:x="9712" fg:w="124"/><text x="19.7582%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 1.93%)</title><rect x="18.1364%" y="165" width="1.9341%" height="15" fill="rgb(230,119,34)" fg:x="9049" fg:w="965"/><text x="18.4294%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.0705%" y="117" width="0.1183%" height="15" fill="rgb(215,142,2)" fg:x="10014" fg:w="59"/><text x="20.3635%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.19%)</title><rect x="20.0705%" y="133" width="0.1864%" height="15" fill="rgb(254,206,16)" fg:x="10014" fg:w="93"/><text x="20.3635%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.63%)</title><rect x="20.0705%" y="149" width="0.6333%" height="15" fill="rgb(245,72,17)" fg:x="10014" fg:w="316"/><text x="20.3635%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.324 (18 instructions, 0.04%)</title><rect x="20.7039%" y="149" width="0.0361%" height="15" fill="rgb(228,144,51)" fg:x="10330" fg:w="18"/><text x="20.9969%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.7400%" y="149" width="0.0261%" height="15" fill="rgb(214,140,44)" fg:x="10348" fg:w="13"/><text x="21.0329%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 1.06%)</title><rect x="20.0705%" y="165" width="1.0602%" height="15" fill="rgb(234,144,33)" fg:x="10014" fg:w="529"/><text x="20.3635%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.1308%" y="165" width="0.1062%" height="15" fill="rgb(205,78,49)" fg:x="10543" fg:w="53"/><text x="21.4238%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="21.2370%" y="133" width="0.0541%" height="15" fill="rgb(211,167,19)" fg:x="10596" fg:w="27"/><text x="21.5300%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="21.2370%" y="149" width="0.2846%" height="15" fill="rgb(221,19,50)" fg:x="10596" fg:w="142"/><text x="21.5300%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="21.5918%" y="133" width="0.0541%" height="15" fill="rgb(243,57,12)" fg:x="10773" fg:w="27"/><text x="21.8847%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="21.5918%" y="149" width="0.2846%" height="15" fill="rgb(209,54,22)" fg:x="10773" fg:w="142"/><text x="21.8847%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 0.71%)</title><rect x="21.2370%" y="165" width="0.7095%" height="15" fill="rgb(221,22,14)" fg:x="10596" fg:w="354"/><text x="21.5300%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="21.9465%" y="149" width="0.0681%" height="15" fill="rgb(234,218,45)" fg:x="10950" fg:w="34"/><text x="22.2395%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.04%)</title><rect x="22.0147%" y="149" width="0.0361%" height="15" fill="rgb(244,225,8)" fg:x="10984" fg:w="18"/><text x="22.3076%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.04%)</title><rect x="22.0507%" y="149" width="0.0361%" height="15" fill="rgb(209,162,28)" fg:x="11002" fg:w="18"/><text x="22.3437%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.33%)</title><rect x="21.9465%" y="165" width="0.3347%" height="15" fill="rgb(253,179,39)" fg:x="10950" fg:w="167"/><text x="22.2395%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.2812%" y="165" width="0.0261%" height="15" fill="rgb(240,33,28)" fg:x="11117" fg:w="13"/><text x="22.5742%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3073%" y="165" width="0.0261%" height="15" fill="rgb(252,225,11)" fg:x="11130" fg:w="13"/><text x="22.6003%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3333%" y="165" width="0.0261%" height="15" fill="rgb(217,215,54)" fg:x="11143" fg:w="13"/><text x="22.6263%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.3594%" y="165" width="0.8819%" height="15" fill="rgb(229,145,53)" fg:x="11156" fg:w="440"/><text x="22.6524%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="23.2413%" y="133" width="0.0140%" height="15" fill="rgb(221,228,19)" fg:x="11596" fg:w="7"/><text x="23.5342%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.2553%" y="117" width="0.0541%" height="15" fill="rgb(205,14,21)" fg:x="11603" fg:w="27"/><text x="23.5483%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.3094%" y="117" width="0.0541%" height="15" fill="rgb(247,48,14)" fg:x="11630" fg:w="27"/><text x="23.6024%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.39%)</title><rect x="23.2553%" y="133" width="0.3948%" height="15" fill="rgb(218,42,32)" fg:x="11603" fg:w="197"/><text x="23.5483%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.6501%" y="101" width="0.0541%" height="15" fill="rgb(241,31,47)" fg:x="11800" fg:w="27"/><text x="23.9431%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.20%)</title><rect x="23.7043%" y="101" width="0.1984%" height="15" fill="rgb(226,114,53)" fg:x="11827" fg:w="99"/><text x="23.9972%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (220 instructions, 0.44%)</title><rect x="23.6501%" y="117" width="0.4409%" height="15" fill="rgb(249,110,40)" fg:x="11800" fg:w="220"/><text x="23.9431%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 instructions, 0.51%)</title><rect x="23.6501%" y="133" width="0.5111%" height="15" fill="rgb(210,213,27)" fg:x="11800" fg:w="255"/><text x="23.9431%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.1612%" y="133" width="0.0261%" height="15" fill="rgb(222,78,52)" fg:x="12055" fg:w="13"/><text x="24.4542%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (534 instructions, 1.07%)</title><rect x="23.2413%" y="149" width="1.0703%" height="15" fill="rgb(222,112,9)" fg:x="11596" fg:w="534"/><text x="23.5342%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (583 instructions, 1.17%)</title><rect x="23.2413%" y="165" width="1.1685%" height="15" fill="rgb(251,199,3)" fg:x="11596" fg:w="583"/><text x="23.5342%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.13%)</title><rect x="24.4097%" y="149" width="0.1343%" height="15" fill="rgb(216,104,5)" fg:x="12179" fg:w="67"/><text x="24.7027%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.20%)</title><rect x="24.5440%" y="149" width="0.1984%" height="15" fill="rgb(217,161,17)" fg:x="12246" fg:w="99"/><text x="24.8370%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (260 instructions, 0.52%)</title><rect x="24.4097%" y="165" width="0.5211%" height="15" fill="rgb(243,180,6)" fg:x="12179" fg:w="260"/><text x="24.7027%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,719 instructions, 27.50%)</title><rect x="0.3808%" y="181" width="27.4963%" height="15" fill="rgb(220,148,15)" fg:x="190" fg:w="13719"/><text x="0.6738%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="27.8771%" y="181" width="1.2827%" height="15" fill="rgb(233,13,5)" fg:x="13909" fg:w="640"/><text x="28.1701%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="29.1598%" y="181" width="1.3449%" height="15" fill="rgb(244,73,41)" fg:x="14549" fg:w="671"/><text x="29.4528%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="30.5047%" y="181" width="1.3449%" height="15" fill="rgb(250,82,34)" fg:x="15220" fg:w="671"/><text x="30.7976%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (764 instructions, 1.53%)</title><rect x="31.8495%" y="181" width="1.5312%" height="15" fill="rgb(212,126,36)" fg:x="15891" fg:w="764"/><text x="32.1425%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="33.3808%" y="181" width="1.3449%" height="15" fill="rgb(221,117,27)" fg:x="16655" fg:w="671"/><text x="33.6737%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="34.7256%" y="181" width="1.2086%" height="15" fill="rgb(248,174,43)" fg:x="17326" fg:w="603"/><text x="35.0186%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="35.9342%" y="181" width="1.2827%" height="15" fill="rgb(214,133,31)" fg:x="17929" fg:w="640"/><text x="36.2271%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="37.2169%" y="181" width="1.3449%" height="15" fill="rgb(207,134,6)" fg:x="18569" fg:w="671"/><text x="37.5099%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="38.5618%" y="181" width="1.2707%" height="15" fill="rgb(247,58,40)" fg:x="19240" fg:w="634"/><text x="38.8547%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="39.8324%" y="181" width="1.2086%" height="15" fill="rgb(212,97,22)" fg:x="19874" fg:w="603"/><text x="40.1254%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="41.0410%" y="181" width="1.2827%" height="15" fill="rgb(245,71,44)" fg:x="20477" fg:w="640"/><text x="41.3340%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="42.3237%" y="181" width="1.2086%" height="15" fill="rgb(214,67,17)" fg:x="21117" fg:w="603"/><text x="42.6167%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="43.5323%" y="181" width="1.2827%" height="15" fill="rgb(222,30,26)" fg:x="21720" fg:w="640"/><text x="43.8253%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="44.8150%" y="181" width="1.2827%" height="15" fill="rgb(206,85,42)" fg:x="22360" fg:w="640"/><text x="45.1080%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.39%)</title><rect x="46.0977%" y="181" width="1.3950%" height="15" fill="rgb(238,55,25)" fg:x="23000" fg:w="696"/><text x="46.3907%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="47.4927%" y="181" width="1.2086%" height="15" fill="rgb(215,196,38)" fg:x="23696" fg:w="603"/><text x="47.7857%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="48.7012%" y="181" width="1.2827%" height="15" fill="rgb(247,223,46)" fg:x="24299" fg:w="640"/><text x="48.9942%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="49.9840%" y="181" width="1.2827%" height="15" fill="rgb(206,59,35)" fg:x="24939" fg:w="640"/><text x="50.2769%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="51.2667%" y="181" width="1.3449%" height="15" fill="rgb(232,167,12)" fg:x="25579" fg:w="671"/><text x="51.5597%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="52.6115%" y="181" width="1.3449%" height="15" fill="rgb(243,183,14)" fg:x="26250" fg:w="671"/><text x="52.9045%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="53.9564%" y="181" width="1.2086%" height="15" fill="rgb(223,17,13)" fg:x="26921" fg:w="603"/><text x="54.2494%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.47%)</title><rect x="55.1649%" y="181" width="1.4691%" height="15" fill="rgb(238,120,5)" fg:x="27524" fg:w="733"/><text x="55.4579%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.39%)</title><rect x="56.6341%" y="181" width="1.3950%" height="15" fill="rgb(238,133,10)" fg:x="28257" fg:w="696"/><text x="56.9270%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="58.0290%" y="181" width="1.2086%" height="15" fill="rgb(207,32,44)" fg:x="28953" fg:w="603"/><text x="58.3220%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="59.2376%" y="181" width="1.2707%" height="15" fill="rgb(219,116,6)" fg:x="29556" fg:w="634"/><text x="59.5306%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="60.5083%" y="181" width="1.2827%" height="15" fill="rgb(209,43,26)" fg:x="30190" fg:w="640"/><text x="60.8012%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="61.7910%" y="181" width="1.2086%" height="15" fill="rgb(225,101,38)" fg:x="30830" fg:w="603"/><text x="62.0840%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="62.9996%" y="181" width="1.2086%" height="15" fill="rgb(241,87,15)" fg:x="31433" fg:w="603"/><text x="63.2925%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="64.2081%" y="181" width="1.2086%" height="15" fill="rgb(223,63,12)" fg:x="32036" fg:w="603"/><text x="64.5011%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="65.4167%" y="181" width="1.2086%" height="15" fill="rgb(216,94,12)" fg:x="32639" fg:w="603"/><text x="65.7097%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="66.6252%" y="181" width="1.2086%" height="15" fill="rgb(216,0,18)" fg:x="33242" fg:w="603"/><text x="66.9182%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="67.8338%" y="181" width="1.3449%" height="15" fill="rgb(246,193,41)" fg:x="33845" fg:w="671"/><text x="68.1268%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="69.1787%" y="181" width="1.2827%" height="15" fill="rgb(213,213,29)" fg:x="34516" fg:w="640"/><text x="69.4716%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="70.4614%" y="181" width="1.2827%" height="15" fill="rgb(234,219,14)" fg:x="35156" fg:w="640"/><text x="70.7543%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="71.7441%" y="181" width="1.2827%" height="15" fill="rgb(231,204,54)" fg:x="35796" fg:w="640"/><text x="72.0371%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="73.0268%" y="181" width="1.2827%" height="15" fill="rgb(232,88,3)" fg:x="36436" fg:w="640"/><text x="73.3198%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="74.3095%" y="181" width="1.2827%" height="15" fill="rgb(245,86,49)" fg:x="37076" fg:w="640"/><text x="74.6025%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="75.5923%" y="181" width="1.3449%" height="15" fill="rgb(221,187,51)" fg:x="37716" fg:w="671"/><text x="75.8852%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="76.9371%" y="181" width="1.3449%" height="15" fill="rgb(219,137,35)" fg:x="38387" fg:w="671"/><text x="77.2301%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="78.2820%" y="181" width="1.2827%" height="15" fill="rgb(219,34,27)" fg:x="39058" fg:w="640"/><text x="78.5749%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.34%)</title><rect x="79.5647%" y="181" width="1.3449%" height="15" fill="rgb(228,150,19)" fg:x="39698" fg:w="671"/><text x="79.8576%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.41%)</title><rect x="80.9095%" y="181" width="1.4070%" height="15" fill="rgb(243,74,7)" fg:x="40369" fg:w="702"/><text x="81.2025%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="82.3165%" y="181" width="1.2827%" height="15" fill="rgb(222,140,20)" fg:x="41071" fg:w="640"/><text x="82.6095%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="83.5992%" y="181" width="1.2827%" height="15" fill="rgb(217,178,27)" fg:x="41711" fg:w="640"/><text x="83.8922%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="84.8819%" y="181" width="1.2827%" height="15" fill="rgb(231,117,12)" fg:x="42351" fg:w="640"/><text x="85.1749%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="86.1647%" y="181" width="1.2827%" height="15" fill="rgb(236,26,4)" fg:x="42991" fg:w="640"/><text x="86.4576%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="87.4474%" y="181" width="1.2827%" height="15" fill="rgb(224,147,5)" fg:x="43631" fg:w="640"/><text x="87.7404%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="88.7301%" y="181" width="1.2707%" height="15" fill="rgb(216,90,6)" fg:x="44271" fg:w="634"/><text x="89.0231%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="90.0008%" y="181" width="1.2827%" height="15" fill="rgb(241,44,31)" fg:x="44905" fg:w="640"/><text x="90.2938%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="91.2835%" y="181" width="1.2827%" height="15" fill="rgb(235,56,2)" fg:x="45545" fg:w="640"/><text x="91.5765%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="92.5662%" y="149" width="0.0140%" height="15" fill="rgb(249,221,40)" fg:x="46185" fg:w="7"/><text x="92.8592%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.13%)</title><rect x="92.5803%" y="117" width="0.1343%" height="15" fill="rgb(233,118,51)" fg:x="46192" fg:w="67"/><text x="92.8732%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (155 instructions, 0.31%)</title><rect x="92.5803%" y="133" width="0.3107%" height="15" fill="rgb(213,86,9)" fg:x="46192" fg:w="155"/><text x="92.8732%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.38%)</title><rect x="92.5803%" y="149" width="0.3808%" height="15" fill="rgb(207,219,11)" fg:x="46192" fg:w="190"/><text x="92.8732%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.9611%" y="149" width="0.3046%" height="15" fill="rgb(224,74,31)" fg:x="46382" fg:w="152"/><text x="93.2540%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (520 instructions, 1.04%)</title><rect x="92.5662%" y="165" width="1.0422%" height="15" fill="rgb(235,22,31)" fg:x="46185" fg:w="520"/><text x="92.8592%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.6084%" y="149" width="1.0382%" height="15" fill="rgb(210,131,47)" fg:x="46705" fg:w="518"/><text x="93.9014%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.6467%" y="101" width="0.1664%" height="15" fill="rgb(253,56,19)" fg:x="47223" fg:w="83"/><text x="94.9396%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.6467%" y="117" width="0.2525%" height="15" fill="rgb(211,123,36)" fg:x="47223" fg:w="126"/><text x="94.9396%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.42%)</title><rect x="94.6467%" y="133" width="0.4169%" height="15" fill="rgb(239,21,49)" fg:x="47223" fg:w="208"/><text x="94.9396%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0635%" y="133" width="0.0301%" height="15" fill="rgb(249,102,52)" fg:x="47431" fg:w="15"/><text x="95.3565%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0936%" y="133" width="0.0301%" height="15" fill="rgb(217,101,36)" fg:x="47446" fg:w="15"/><text x="95.3866%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 0.85%)</title><rect x="94.6467%" y="149" width="0.8538%" height="15" fill="rgb(215,104,24)" fg:x="47223" fg:w="426"/><text x="94.9396%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.5005%" y="149" width="1.0342%" height="15" fill="rgb(219,78,26)" fg:x="47649" fg:w="516"/><text x="95.7934%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.5347%" y="149" width="0.0140%" height="15" fill="rgb(251,36,4)" fg:x="48165" fg:w="7"/><text x="96.8276%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 3.13%)</title><rect x="93.6084%" y="165" width="3.1266%" height="15" fill="rgb(207,138,26)" fg:x="46705" fg:w="1560"/><text x="93.9014%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.7351%" y="165" width="0.0140%" height="15" fill="rgb(212,70,11)" fg:x="48265" fg:w="7"/><text x="97.0280%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.7491%" y="165" width="0.1203%" height="15" fill="rgb(221,228,7)" fg:x="48272" fg:w="60"/><text x="97.0421%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,753 instructions, 5.52%)</title><rect x="92.5662%" y="181" width="5.5177%" height="15" fill="rgb(242,24,40)" fg:x="46185" fg:w="2753"/><text x="92.8592%" y="191.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_remove::{{closure}} (49,341 instructions, 98.89%)</title><rect x="0.3808%" y="197" width="98.8917%" height="15" fill="rgb(242,35,0)" fg:x="190" fg:w="49341"/><text x="0.6738%" y="207.50">heap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.2725%" y="197" width="0.0281%" height="15" fill="rgb(231,21,5)" fg:x="49531" fg:w="14"/><text x="99.5654%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.4809%" y="181" width="0.0541%" height="15" fill="rgb(215,41,3)" fg:x="49635" fg:w="27"/><text x="99.7739%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.41%)</title><rect x="99.3025%" y="197" width="0.4089%" height="15" fill="rgb(235,227,33)" fg:x="49546" fg:w="204"/><text x="99.5955%" y="207.50"></text></g><g><title>all (49,894 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(218,9,30)" fg:x="0" fg:w="49894"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (49,894 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,141,17)" fg:x="0" fg:w="49894"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>