<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="53420"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0150%" height="15" fill="rgb(241,128,38)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0150%" y="181" width="0.0168%" height="15" fill="rgb(232,169,46)" fg:x="8" fg:w="9"/><text x="0.3079%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0318%" y="181" width="0.0168%" height="15" fill="rgb(232,37,0)" fg:x="17" fg:w="9"/><text x="0.3248%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0487%" y="181" width="0.0168%" height="15" fill="rgb(224,88,46)" fg:x="26" fg:w="9"/><text x="0.3416%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0711%" y="181" width="0.0187%" height="15" fill="rgb(220,211,32)" fg:x="38" fg:w="10"/><text x="0.3641%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.0150%" y="197" width="0.2471%" height="15" fill="rgb(237,0,22)" fg:x="8" fg:w="132"/><text x="0.3079%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.0150%" y="213" width="0.2658%" height="15" fill="rgb(236,46,4)" fg:x="8" fg:w="142"/><text x="0.3079%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.0150%" y="229" width="0.2714%" height="15" fill="rgb(220,39,23)" fg:x="8" fg:w="145"/><text x="0.3079%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.2976%" y="181" width="0.0168%" height="15" fill="rgb(209,213,49)" fg:x="159" fg:w="9"/><text x="0.5906%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3145%" y="181" width="0.0168%" height="15" fill="rgb(220,133,29)" fg:x="168" fg:w="9"/><text x="0.6075%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3313%" y="181" width="0.0168%" height="15" fill="rgb(222,5,41)" fg:x="177" fg:w="9"/><text x="0.6243%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3538%" y="181" width="0.0187%" height="15" fill="rgb(215,140,2)" fg:x="189" fg:w="10"/><text x="0.6468%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.2976%" y="197" width="0.2471%" height="15" fill="rgb(215,38,18)" fg:x="159" fg:w="132"/><text x="0.5906%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.2976%" y="213" width="0.2658%" height="15" fill="rgb(248,143,11)" fg:x="159" fg:w="142"/><text x="0.5906%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.2976%" y="229" width="0.2714%" height="15" fill="rgb(211,192,12)" fg:x="159" fg:w="145"/><text x="0.5906%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.57%)</title><rect x="0.0150%" y="245" width="0.5653%" height="15" fill="rgb(247,125,19)" fg:x="8" fg:w="302"/><text x="0.3079%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5803%" y="245" width="0.0112%" height="15" fill="rgb(242,79,9)" fg:x="310" fg:w="6"/><text x="0.8733%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5915%" y="149" width="0.0168%" height="15" fill="rgb(205,213,38)" fg:x="316" fg:w="9"/><text x="0.8845%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6084%" y="149" width="0.0168%" height="15" fill="rgb(242,176,19)" fg:x="325" fg:w="9"/><text x="0.9014%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6252%" y="149" width="0.0168%" height="15" fill="rgb(231,197,14)" fg:x="334" fg:w="9"/><text x="0.9182%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.6477%" y="149" width="0.0187%" height="15" fill="rgb(247,179,29)" fg:x="346" fg:w="10"/><text x="0.9407%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.5915%" y="165" width="0.2471%" height="15" fill="rgb(230,42,21)" fg:x="316" fg:w="132"/><text x="0.8845%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="0.5915%" y="181" width="0.2658%" height="15" fill="rgb(207,221,4)" fg:x="316" fg:w="142"/><text x="0.8845%" y="191.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.5915%" y="197" width="0.2714%" height="15" fill="rgb(249,205,32)" fg:x="316" fg:w="145"/><text x="0.8845%" y="207.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="0.5915%" y="213" width="0.2827%" height="15" fill="rgb(251,4,51)" fg:x="316" fg:w="151"/><text x="0.8845%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (209 instructions, 0.39%)</title><rect x="0.5915%" y="229" width="0.3912%" height="15" fill="rgb(228,138,4)" fg:x="316" fg:w="209"/><text x="0.8845%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="0.9846%" y="181" width="0.1179%" height="15" fill="rgb(214,161,10)" fg:x="526" fg:w="63"/><text x="1.2776%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.1026%" y="117" width="0.0112%" height="15" fill="rgb(247,200,26)" fg:x="589" fg:w="6"/><text x="1.3956%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.1026%" y="133" width="0.0187%" height="15" fill="rgb(252,134,14)" fg:x="589" fg:w="10"/><text x="1.3956%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="1.1026%" y="149" width="0.8106%" height="15" fill="rgb(211,95,47)" fg:x="589" fg:w="433"/><text x="1.3956%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="1.9131%" y="149" width="0.1423%" height="15" fill="rgb(230,61,34)" fg:x="1022" fg:w="76"/><text x="2.2061%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.0554%" y="149" width="0.0973%" height="15" fill="rgb(253,175,39)" fg:x="1098" fg:w="52"/><text x="2.3484%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.1528%" y="149" width="0.0973%" height="15" fill="rgb(213,196,52)" fg:x="1150" fg:w="52"/><text x="2.4457%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.2501%" y="149" width="0.0973%" height="15" fill="rgb(253,47,41)" fg:x="1202" fg:w="52"/><text x="2.5431%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.3474%" y="149" width="0.0973%" height="15" fill="rgb(242,69,10)" fg:x="1254" fg:w="52"/><text x="2.6404%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (859 instructions, 1.61%)</title><rect x="1.1026%" y="181" width="1.6080%" height="15" fill="rgb(253,130,24)" fg:x="589" fg:w="859"/><text x="1.3956%" y="191.50"></text></g><g><title> 4]&gt;::read_options (859 instructions, 1.61%)</title><rect x="1.1026%" y="165" width="1.6080%" height="15" fill="rgb(221,48,22)" fg:x="589" fg:w="859"/><text x="1.3956%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="2.7106%" y="181" width="0.1179%" height="15" fill="rgb(215,210,7)" fg:x="1448" fg:w="63"/><text x="3.0036%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="2.8285%" y="165" width="0.1441%" height="15" fill="rgb(244,7,21)" fg:x="1511" fg:w="77"/><text x="3.1215%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="2.8285%" y="181" width="0.1947%" height="15" fill="rgb(253,56,38)" fg:x="1511" fg:w="104"/><text x="3.1215%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="3.0232%" y="133" width="0.0112%" height="15" fill="rgb(249,69,54)" fg:x="1615" fg:w="6"/><text x="3.3162%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="3.0232%" y="149" width="0.0187%" height="15" fill="rgb(211,95,15)" fg:x="1615" fg:w="10"/><text x="3.3162%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="3.0232%" y="165" width="0.8106%" height="15" fill="rgb(218,73,7)" fg:x="1615" fg:w="433"/><text x="3.3162%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.8338%" y="149" width="0.0337%" height="15" fill="rgb(212,124,7)" fg:x="2048" fg:w="18"/><text x="4.1267%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.8338%" y="165" width="0.0412%" height="15" fill="rgb(244,162,29)" fg:x="2048" fg:w="22"/><text x="4.1267%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.8750%" y="69" width="0.0168%" height="15" fill="rgb(226,23,6)" fg:x="2070" fg:w="9"/><text x="4.1679%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.8918%" y="69" width="0.0168%" height="15" fill="rgb(214,19,23)" fg:x="2079" fg:w="9"/><text x="4.1848%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9086%" y="69" width="0.0168%" height="15" fill="rgb(234,62,29)" fg:x="2088" fg:w="9"/><text x="4.2016%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="3.9311%" y="69" width="0.0187%" height="15" fill="rgb(208,113,48)" fg:x="2100" fg:w="10"/><text x="4.2241%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="3.8750%" y="85" width="0.2471%" height="15" fill="rgb(251,169,10)" fg:x="2070" fg:w="132"/><text x="4.1679%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="3.8750%" y="101" width="0.2658%" height="15" fill="rgb(249,110,26)" fg:x="2070" fg:w="142"/><text x="4.1679%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="3.8750%" y="117" width="0.2714%" height="15" fill="rgb(211,127,54)" fg:x="2070" fg:w="145"/><text x="4.1679%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="3.8750%" y="133" width="0.2827%" height="15" fill="rgb(223,130,30)" fg:x="2070" fg:w="151"/><text x="4.1679%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="4.1576%" y="85" width="0.1123%" height="15" fill="rgb(233,172,27)" fg:x="2221" fg:w="60"/><text x="4.4506%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="4.1576%" y="101" width="0.1198%" height="15" fill="rgb(223,181,50)" fg:x="2221" fg:w="64"/><text x="4.4506%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="4.1576%" y="117" width="0.1666%" height="15" fill="rgb(229,97,25)" fg:x="2221" fg:w="89"/><text x="4.4506%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="4.3242%" y="69" width="0.0187%" height="15" fill="rgb(229,182,53)" fg:x="2310" fg:w="10"/><text x="4.6172%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="4.3429%" y="37" width="0.0562%" height="15" fill="rgb(236,124,24)" fg:x="2320" fg:w="30"/><text x="4.6359%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="4.3429%" y="53" width="0.0636%" height="15" fill="rgb(205,155,21)" fg:x="2320" fg:w="34"/><text x="4.6359%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="4.3429%" y="69" width="0.1104%" height="15" fill="rgb(220,133,48)" fg:x="2320" fg:w="59"/><text x="4.6359%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="4.3242%" y="85" width="0.2228%" height="15" fill="rgb(244,64,54)" fg:x="2310" fg:w="119"/><text x="4.6172%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.33%)</title><rect x="4.3242%" y="101" width="0.3257%" height="15" fill="rgb(209,88,54)" fg:x="2310" fg:w="174"/><text x="4.6172%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.34%)</title><rect x="4.3242%" y="117" width="0.3351%" height="15" fill="rgb(242,211,27)" fg:x="2310" fg:w="179"/><text x="4.6172%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="4.1576%" y="133" width="0.7095%" height="15" fill="rgb(230,48,25)" fg:x="2221" fg:w="379"/><text x="4.4506%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="3.8750%" y="149" width="1.2598%" height="15" fill="rgb(218,227,9)" fg:x="2070" fg:w="673"/><text x="4.1679%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="5.1348%" y="149" width="0.1423%" height="15" fill="rgb(224,213,36)" fg:x="2743" fg:w="76"/><text x="5.4277%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="5.3033%" y="101" width="0.0112%" height="15" fill="rgb(221,223,20)" fg:x="2833" fg:w="6"/><text x="5.5962%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="5.3145%" y="101" width="0.0187%" height="15" fill="rgb(215,148,27)" fg:x="2839" fg:w="10"/><text x="5.6075%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="5.2770%" y="117" width="0.1310%" height="15" fill="rgb(243,105,38)" fg:x="2819" fg:w="70"/><text x="5.5700%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="5.2770%" y="133" width="0.1348%" height="15" fill="rgb(212,163,23)" fg:x="2819" fg:w="72"/><text x="5.5700%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="5.2770%" y="149" width="0.1441%" height="15" fill="rgb(223,193,46)" fg:x="2819" fg:w="77"/><text x="5.5700%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 1.68%)</title><rect x="3.8750%" y="165" width="1.6791%" height="15" fill="rgb(243,205,38)" fg:x="2070" fg:w="897"/><text x="4.1679%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="5.5541%" y="165" width="0.0468%" height="15" fill="rgb(222,24,26)" fg:x="2967" fg:w="25"/><text x="5.8471%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,525 instructions, 2.85%)</title><rect x="3.0232%" y="181" width="2.8547%" height="15" fill="rgb(241,198,51)" fg:x="1615" fg:w="1525"/><text x="3.3162%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="5.8779%" y="181" width="0.1086%" height="15" fill="rgb(249,183,36)" fg:x="3140" fg:w="58"/><text x="6.1709%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="5.9865%" y="165" width="0.1441%" height="15" fill="rgb(226,126,50)" fg:x="3198" fg:w="77"/><text x="6.2795%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="5.9865%" y="181" width="0.1947%" height="15" fill="rgb(236,80,31)" fg:x="3198" fg:w="104"/><text x="6.2795%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="6.1812%" y="133" width="0.0112%" height="15" fill="rgb(229,63,41)" fg:x="3302" fg:w="6"/><text x="6.4742%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="6.1812%" y="149" width="0.0187%" height="15" fill="rgb(228,150,33)" fg:x="3302" fg:w="10"/><text x="6.4742%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="6.1812%" y="165" width="0.8106%" height="15" fill="rgb(215,220,5)" fg:x="3302" fg:w="433"/><text x="6.4742%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="6.9918%" y="149" width="0.0337%" height="15" fill="rgb(220,142,36)" fg:x="3735" fg:w="18"/><text x="7.2847%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="6.9918%" y="165" width="0.0412%" height="15" fill="rgb(216,212,25)" fg:x="3735" fg:w="22"/><text x="7.2847%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0329%" y="69" width="0.0168%" height="15" fill="rgb(245,102,17)" fg:x="3757" fg:w="9"/><text x="7.3259%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0498%" y="69" width="0.0168%" height="15" fill="rgb(219,148,47)" fg:x="3766" fg:w="9"/><text x="7.3428%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.0666%" y="69" width="0.0168%" height="15" fill="rgb(244,26,5)" fg:x="3775" fg:w="9"/><text x="7.3596%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.0891%" y="69" width="0.0187%" height="15" fill="rgb(250,99,15)" fg:x="3787" fg:w="10"/><text x="7.3821%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="7.0329%" y="85" width="0.2471%" height="15" fill="rgb(208,47,24)" fg:x="3757" fg:w="132"/><text x="7.3259%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="7.0329%" y="101" width="0.2658%" height="15" fill="rgb(214,73,15)" fg:x="3757" fg:w="142"/><text x="7.3259%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="7.0329%" y="117" width="0.2714%" height="15" fill="rgb(212,12,11)" fg:x="3757" fg:w="145"/><text x="7.3259%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="7.0329%" y="133" width="0.2827%" height="15" fill="rgb(226,18,19)" fg:x="3757" fg:w="151"/><text x="7.3259%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="7.3156%" y="85" width="0.1123%" height="15" fill="rgb(233,165,21)" fg:x="3908" fg:w="60"/><text x="7.6086%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="7.3156%" y="101" width="0.1198%" height="15" fill="rgb(229,55,26)" fg:x="3908" fg:w="64"/><text x="7.6086%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="7.3156%" y="117" width="0.1666%" height="15" fill="rgb(214,70,20)" fg:x="3908" fg:w="89"/><text x="7.6086%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="7.4822%" y="69" width="0.0187%" height="15" fill="rgb(248,163,46)" fg:x="3997" fg:w="10"/><text x="7.7752%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="7.5009%" y="37" width="0.0562%" height="15" fill="rgb(215,150,9)" fg:x="4007" fg:w="30"/><text x="7.7939%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="7.5009%" y="53" width="0.0636%" height="15" fill="rgb(229,25,47)" fg:x="4007" fg:w="34"/><text x="7.7939%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="7.5009%" y="69" width="0.1104%" height="15" fill="rgb(211,118,9)" fg:x="4007" fg:w="59"/><text x="7.7939%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="7.4822%" y="85" width="0.2228%" height="15" fill="rgb(207,175,50)" fg:x="3997" fg:w="119"/><text x="7.7752%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.33%)</title><rect x="7.4822%" y="101" width="0.3257%" height="15" fill="rgb(242,92,34)" fg:x="3997" fg:w="174"/><text x="7.7752%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.34%)</title><rect x="7.4822%" y="117" width="0.3351%" height="15" fill="rgb(254,202,1)" fg:x="3997" fg:w="179"/><text x="7.7752%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="7.3156%" y="133" width="0.7095%" height="15" fill="rgb(251,226,30)" fg:x="3908" fg:w="379"/><text x="7.6086%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.26%)</title><rect x="7.0329%" y="149" width="1.2598%" height="15" fill="rgb(237,39,1)" fg:x="3757" fg:w="673"/><text x="7.3259%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.14%)</title><rect x="8.2928%" y="149" width="0.1423%" height="15" fill="rgb(206,73,18)" fg:x="4430" fg:w="76"/><text x="8.5857%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="8.4613%" y="101" width="0.0112%" height="15" fill="rgb(233,39,2)" fg:x="4520" fg:w="6"/><text x="8.7542%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="8.4725%" y="101" width="0.0187%" height="15" fill="rgb(234,95,37)" fg:x="4526" fg:w="10"/><text x="8.7655%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="8.4350%" y="117" width="0.1310%" height="15" fill="rgb(209,26,25)" fg:x="4506" fg:w="70"/><text x="8.7280%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="8.4350%" y="133" width="0.1348%" height="15" fill="rgb(206,102,35)" fg:x="4506" fg:w="72"/><text x="8.7280%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="8.4350%" y="149" width="0.1441%" height="15" fill="rgb(220,171,24)" fg:x="4506" fg:w="77"/><text x="8.7280%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 1.68%)</title><rect x="7.0329%" y="165" width="1.6791%" height="15" fill="rgb(209,156,46)" fg:x="3757" fg:w="897"/><text x="7.3259%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.12%)</title><rect x="8.7121%" y="133" width="0.1179%" height="15" fill="rgb(231,49,41)" fg:x="4654" fg:w="63"/><text x="9.0051%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.21%)</title><rect x="8.8300%" y="117" width="0.2059%" height="15" fill="rgb(237,61,26)" fg:x="4717" fg:w="110"/><text x="9.1230%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.26%)</title><rect x="8.8300%" y="133" width="0.2565%" height="15" fill="rgb(248,118,26)" fg:x="4717" fg:w="137"/><text x="9.1230%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="9.0865%" y="133" width="0.1086%" height="15" fill="rgb(249,92,2)" fg:x="4854" fg:w="58"/><text x="9.3795%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (314 instructions, 0.59%)</title><rect x="8.7121%" y="149" width="0.5878%" height="15" fill="rgb(243,171,33)" fg:x="4654" fg:w="314"/><text x="9.0051%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.2999%" y="85" width="0.0168%" height="15" fill="rgb(214,21,17)" fg:x="4968" fg:w="9"/><text x="9.5929%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.3167%" y="85" width="0.0168%" height="15" fill="rgb(229,3,47)" fg:x="4977" fg:w="9"/><text x="9.6097%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.3336%" y="85" width="0.0168%" height="15" fill="rgb(219,66,23)" fg:x="4986" fg:w="9"/><text x="9.6266%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="9.3560%" y="85" width="0.0187%" height="15" fill="rgb(210,152,31)" fg:x="4998" fg:w="10"/><text x="9.6490%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="9.2999%" y="101" width="0.2471%" height="15" fill="rgb(220,195,32)" fg:x="4968" fg:w="132"/><text x="9.5929%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="9.2999%" y="117" width="0.2658%" height="15" fill="rgb(254,43,8)" fg:x="4968" fg:w="142"/><text x="9.5929%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="9.2999%" y="133" width="0.2714%" height="15" fill="rgb(232,18,25)" fg:x="4968" fg:w="145"/><text x="9.5929%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="9.2999%" y="149" width="0.2827%" height="15" fill="rgb(252,154,42)" fg:x="4968" fg:w="151"/><text x="9.5929%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (550 instructions, 1.03%)</title><rect x="8.7121%" y="165" width="1.0296%" height="15" fill="rgb(217,45,19)" fg:x="4654" fg:w="550"/><text x="9.0051%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,050 instructions, 3.84%)</title><rect x="6.1812%" y="181" width="3.8375%" height="15" fill="rgb(253,166,47)" fg:x="3302" fg:w="2050"/><text x="6.4742%" y="191.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.11%)</title><rect x="10.0187%" y="181" width="0.1086%" height="15" fill="rgb(247,37,15)" fg:x="5352" fg:w="58"/><text x="10.3117%" y="191.50"></text></g><g><title>binread::BinRead::read (5,102 instructions, 9.55%)</title><rect x="0.9828%" y="197" width="9.5507%" height="15" fill="rgb(240,228,28)" fg:x="525" fg:w="5102"/><text x="1.2757%" y="207.50">binread::Bi..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.5335%" y="181" width="0.0262%" height="15" fill="rgb(247,18,43)" fg:x="5627" fg:w="14"/><text x="10.8265%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.5597%" y="165" width="0.0262%" height="15" fill="rgb(225,179,2)" fg:x="5641" fg:w="14"/><text x="10.8527%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="10.5859%" y="165" width="0.0468%" height="15" fill="rgb(242,104,51)" fg:x="5655" fg:w="25"/><text x="10.8789%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="10.6327%" y="165" width="0.0356%" height="15" fill="rgb(228,38,3)" fg:x="5680" fg:w="19"/><text x="10.9257%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (210 instructions, 0.39%)</title><rect x="10.5597%" y="181" width="0.3931%" height="15" fill="rgb(239,224,48)" fg:x="5641" fg:w="210"/><text x="10.8527%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9528%" y="101" width="0.0168%" height="15" fill="rgb(249,156,8)" fg:x="5851" fg:w="9"/><text x="11.2458%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9697%" y="101" width="0.0168%" height="15" fill="rgb(248,160,48)" fg:x="5860" fg:w="9"/><text x="11.2626%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="10.9865%" y="101" width="0.0168%" height="15" fill="rgb(216,136,27)" fg:x="5869" fg:w="9"/><text x="11.2795%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.0090%" y="101" width="0.0187%" height="15" fill="rgb(229,39,24)" fg:x="5881" fg:w="10"/><text x="11.3020%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="10.9528%" y="117" width="0.2471%" height="15" fill="rgb(206,221,30)" fg:x="5851" fg:w="132"/><text x="11.2458%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="10.9528%" y="133" width="0.2658%" height="15" fill="rgb(251,157,8)" fg:x="5851" fg:w="142"/><text x="11.2458%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="10.9528%" y="149" width="0.2714%" height="15" fill="rgb(234,146,41)" fg:x="5851" fg:w="145"/><text x="11.2458%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="10.9528%" y="165" width="0.2827%" height="15" fill="rgb(247,150,16)" fg:x="5851" fg:w="151"/><text x="11.2458%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (232 instructions, 0.43%)</title><rect x="10.9528%" y="181" width="0.4343%" height="15" fill="rgb(207,188,24)" fg:x="5851" fg:w="232"/><text x="11.2458%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.3871%" y="85" width="0.0168%" height="15" fill="rgb(241,98,8)" fg:x="6083" fg:w="9"/><text x="11.6801%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.4040%" y="85" width="0.0168%" height="15" fill="rgb(245,205,22)" fg:x="6092" fg:w="9"/><text x="11.6969%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.4208%" y="85" width="0.0168%" height="15" fill="rgb(216,208,1)" fg:x="6101" fg:w="9"/><text x="11.7138%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.4433%" y="85" width="0.0187%" height="15" fill="rgb(205,183,39)" fg:x="6113" fg:w="10"/><text x="11.7362%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.3871%" y="101" width="0.2471%" height="15" fill="rgb(217,9,17)" fg:x="6083" fg:w="132"/><text x="11.6801%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="11.3871%" y="117" width="0.2658%" height="15" fill="rgb(212,208,1)" fg:x="6083" fg:w="142"/><text x="11.6801%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.3871%" y="133" width="0.2714%" height="15" fill="rgb(244,45,7)" fg:x="6083" fg:w="145"/><text x="11.6801%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.3871%" y="149" width="0.2827%" height="15" fill="rgb(252,187,50)" fg:x="6083" fg:w="151"/><text x="11.6801%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="11.3871%" y="165" width="0.3426%" height="15" fill="rgb(212,174,52)" fg:x="6083" fg:w="183"/><text x="11.6801%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (253 instructions, 0.47%)</title><rect x="11.3871%" y="181" width="0.4736%" height="15" fill="rgb(216,112,28)" fg:x="6083" fg:w="253"/><text x="11.6801%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (936 instructions, 1.75%)</title><rect x="10.5335%" y="197" width="1.7522%" height="15" fill="rgb(214,175,32)" fg:x="5627" fg:w="936"/><text x="10.8265%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.2857%" y="117" width="0.0168%" height="15" fill="rgb(246,60,30)" fg:x="6563" fg:w="9"/><text x="12.5786%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.3025%" y="117" width="0.0168%" height="15" fill="rgb(228,196,39)" fg:x="6572" fg:w="9"/><text x="12.5955%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.3194%" y="117" width="0.0168%" height="15" fill="rgb(245,101,11)" fg:x="6581" fg:w="9"/><text x="12.6123%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="12.3418%" y="117" width="0.0187%" height="15" fill="rgb(216,2,14)" fg:x="6593" fg:w="10"/><text x="12.6348%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="12.2857%" y="133" width="0.2471%" height="15" fill="rgb(252,229,37)" fg:x="6563" fg:w="132"/><text x="12.5786%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="12.2857%" y="149" width="0.2658%" height="15" fill="rgb(247,88,43)" fg:x="6563" fg:w="142"/><text x="12.5786%" y="159.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="12.2857%" y="165" width="0.2714%" height="15" fill="rgb(231,99,52)" fg:x="6563" fg:w="145"/><text x="12.5786%" y="175.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="12.2857%" y="181" width="0.2827%" height="15" fill="rgb(229,122,49)" fg:x="6563" fg:w="151"/><text x="12.5786%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.5945%" y="133" width="0.0112%" height="15" fill="rgb(253,141,9)" fg:x="6728" fg:w="6"/><text x="12.8875%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.6058%" y="133" width="0.0300%" height="15" fill="rgb(250,13,25)" fg:x="6734" fg:w="16"/><text x="12.8987%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="12.5683%" y="149" width="0.1835%" height="15" fill="rgb(235,150,17)" fg:x="6714" fg:w="98"/><text x="12.8613%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="12.5683%" y="165" width="0.1872%" height="15" fill="rgb(247,9,20)" fg:x="6714" fg:w="100"/><text x="12.8613%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="12.5683%" y="181" width="0.1966%" height="15" fill="rgb(236,96,39)" fg:x="6714" fg:w="105"/><text x="12.8613%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (370 instructions, 0.69%)</title><rect x="12.2857%" y="197" width="0.6926%" height="15" fill="rgb(254,101,30)" fg:x="6563" fg:w="370"/><text x="12.5786%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.9783%" y="133" width="0.0168%" height="15" fill="rgb(225,111,36)" fg:x="6933" fg:w="9"/><text x="13.2713%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.9951%" y="133" width="0.0168%" height="15" fill="rgb(238,115,35)" fg:x="6942" fg:w="9"/><text x="13.2881%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.0120%" y="133" width="0.0168%" height="15" fill="rgb(211,65,53)" fg:x="6951" fg:w="9"/><text x="13.3049%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.0344%" y="133" width="0.0187%" height="15" fill="rgb(208,168,40)" fg:x="6963" fg:w="10"/><text x="13.3274%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="12.9783%" y="149" width="0.2471%" height="15" fill="rgb(210,102,33)" fg:x="6933" fg:w="132"/><text x="13.2713%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="12.9783%" y="165" width="0.2658%" height="15" fill="rgb(238,224,11)" fg:x="6933" fg:w="142"/><text x="13.2713%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="12.9783%" y="181" width="0.2714%" height="15" fill="rgb(212,94,13)" fg:x="6933" fg:w="145"/><text x="13.2713%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2610%" y="133" width="0.0168%" height="15" fill="rgb(237,24,19)" fg:x="7084" fg:w="9"/><text x="13.5539%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2778%" y="133" width="0.0168%" height="15" fill="rgb(214,161,25)" fg:x="7093" fg:w="9"/><text x="13.5708%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.2946%" y="133" width="0.0168%" height="15" fill="rgb(227,216,29)" fg:x="7102" fg:w="9"/><text x="13.5876%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.3171%" y="133" width="0.0187%" height="15" fill="rgb(215,180,53)" fg:x="7114" fg:w="10"/><text x="13.6101%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.2610%" y="149" width="0.2471%" height="15" fill="rgb(224,202,48)" fg:x="7084" fg:w="132"/><text x="13.5539%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="13.2610%" y="165" width="0.2658%" height="15" fill="rgb(238,143,48)" fg:x="7084" fg:w="142"/><text x="13.5539%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.2610%" y="181" width="0.2714%" height="15" fill="rgb(223,55,51)" fg:x="7084" fg:w="145"/><text x="13.5539%" y="191.50"></text></g><g><title>__rust_alloc (302 instructions, 0.57%)</title><rect x="12.9783%" y="197" width="0.5653%" height="15" fill="rgb(221,190,2)" fg:x="6933" fg:w="302"/><text x="13.2713%" y="207.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (15 instructions, 0.03%)</title><rect x="13.5436%" y="197" width="0.0281%" height="15" fill="rgb(212,22,43)" fg:x="7235" fg:w="15"/><text x="13.8366%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="13.5979%" y="149" width="0.0112%" height="15" fill="rgb(251,201,54)" fg:x="7264" fg:w="6"/><text x="13.8909%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="13.6091%" y="149" width="0.0300%" height="15" fill="rgb(215,112,25)" fg:x="7270" fg:w="16"/><text x="13.9021%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="13.5717%" y="165" width="0.1835%" height="15" fill="rgb(235,74,17)" fg:x="7250" fg:w="98"/><text x="13.8647%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="13.5717%" y="181" width="0.1872%" height="15" fill="rgb(216,127,34)" fg:x="7250" fg:w="100"/><text x="13.8647%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="13.5717%" y="197" width="0.1966%" height="15" fill="rgb(224,150,51)" fg:x="7250" fg:w="105"/><text x="13.8647%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="13.7683%" y="165" width="0.7731%" height="15" fill="rgb(212,75,53)" fg:x="7355" fg:w="413"/><text x="14.0612%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="13.7683%" y="181" width="0.7806%" height="15" fill="rgb(247,166,25)" fg:x="7355" fg:w="417"/><text x="14.0612%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.82%)</title><rect x="13.7683%" y="197" width="0.8180%" height="15" fill="rgb(248,99,0)" fg:x="7355" fg:w="437"/><text x="14.0612%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.69%)</title><rect x="14.5863%" y="181" width="0.6889%" height="15" fill="rgb(205,163,23)" fg:x="7792" fg:w="368"/><text x="14.8793%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.70%)</title><rect x="14.5863%" y="197" width="0.6964%" height="15" fill="rgb(205,211,13)" fg:x="7792" fg:w="372"/><text x="14.8793%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,984 instructions, 14.95%)</title><rect x="0.9828%" y="213" width="14.9457%" height="15" fill="rgb(206,198,5)" fg:x="525" fg:w="7984"/><text x="1.2757%" y="223.50">candid::de::IDLDese..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="15.9285%" y="197" width="0.7170%" height="15" fill="rgb(250,20,48)" fg:x="8509" fg:w="383"/><text x="16.2215%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.72%)</title><rect x="16.6529%" y="197" width="0.7170%" height="15" fill="rgb(207,8,44)" fg:x="8896" fg:w="383"/><text x="16.9459%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.45%)</title><rect x="15.9285%" y="213" width="1.4489%" height="15" fill="rgb(234,52,14)" fg:x="8509" fg:w="774"/><text x="16.2215%" y="223.50"></text></g><g><title>candid::types::internal::find_type (38 instructions, 0.07%)</title><rect x="17.3774%" y="181" width="0.0711%" height="15" fill="rgb(254,179,48)" fg:x="9283" fg:w="38"/><text x="17.6704%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.4485%" y="101" width="0.0168%" height="15" fill="rgb(214,142,5)" fg:x="9321" fg:w="9"/><text x="17.7415%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.4654%" y="101" width="0.0168%" height="15" fill="rgb(211,36,7)" fg:x="9330" fg:w="9"/><text x="17.7583%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.4822%" y="101" width="0.0168%" height="15" fill="rgb(231,223,25)" fg:x="9339" fg:w="9"/><text x="17.7752%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="17.5047%" y="101" width="0.0187%" height="15" fill="rgb(225,171,54)" fg:x="9351" fg:w="10"/><text x="17.7976%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="17.4485%" y="117" width="0.2471%" height="15" fill="rgb(250,162,12)" fg:x="9321" fg:w="132"/><text x="17.7415%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="17.4485%" y="133" width="0.2658%" height="15" fill="rgb(241,95,18)" fg:x="9321" fg:w="142"/><text x="17.7415%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="17.4485%" y="149" width="0.2714%" height="15" fill="rgb(251,72,16)" fg:x="9321" fg:w="145"/><text x="17.7415%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="17.4485%" y="165" width="0.2827%" height="15" fill="rgb(210,190,42)" fg:x="9321" fg:w="151"/><text x="17.7415%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (196 instructions, 0.37%)</title><rect x="17.4485%" y="181" width="0.3669%" height="15" fill="rgb(221,117,44)" fg:x="9321" fg:w="196"/><text x="17.7415%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="17.8154%" y="133" width="0.1011%" height="15" fill="rgb(239,0,50)" fg:x="9517" fg:w="54"/><text x="18.1084%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="17.9165%" y="133" width="0.1685%" height="15" fill="rgb(241,161,41)" fg:x="9571" fg:w="90"/><text x="18.2095%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.31%)</title><rect x="18.0850%" y="133" width="0.3051%" height="15" fill="rgb(214,56,49)" fg:x="9661" fg:w="163"/><text x="18.3780%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="17.8154%" y="149" width="1.0408%" height="15" fill="rgb(208,229,42)" fg:x="9517" fg:w="556"/><text x="18.1084%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.19%)</title><rect x="18.8562%" y="149" width="0.1853%" height="15" fill="rgb(222,42,23)" fg:x="10073" fg:w="99"/><text x="19.1492%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (760 instructions, 1.42%)</title><rect x="17.8154%" y="165" width="1.4227%" height="15" fill="rgb(241,88,54)" fg:x="9517" fg:w="760"/><text x="18.1084%" y="175.50"></text></g><g><title>candid::types::internal::env_add (813 instructions, 1.52%)</title><rect x="17.8154%" y="181" width="1.5219%" height="15" fill="rgb(252,220,33)" fg:x="9517" fg:w="813"/><text x="18.1084%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.3373%" y="101" width="0.0168%" height="15" fill="rgb(252,229,14)" fg:x="10330" fg:w="9"/><text x="19.6303%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.3542%" y="101" width="0.0168%" height="15" fill="rgb(238,44,35)" fg:x="10339" fg:w="9"/><text x="19.6471%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.3710%" y="101" width="0.0168%" height="15" fill="rgb(230,51,19)" fg:x="10348" fg:w="9"/><text x="19.6640%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.3935%" y="101" width="0.0187%" height="15" fill="rgb(221,53,52)" fg:x="10360" fg:w="10"/><text x="19.6865%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="19.3373%" y="117" width="0.2471%" height="15" fill="rgb(224,183,48)" fg:x="10330" fg:w="132"/><text x="19.6303%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="19.3373%" y="133" width="0.2658%" height="15" fill="rgb(215,91,27)" fg:x="10330" fg:w="142"/><text x="19.6303%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="19.3373%" y="149" width="0.2714%" height="15" fill="rgb(230,169,8)" fg:x="10330" fg:w="145"/><text x="19.6303%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="19.3373%" y="165" width="0.2827%" height="15" fill="rgb(205,121,30)" fg:x="10330" fg:w="151"/><text x="19.6303%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (163 instructions, 0.31%)</title><rect x="19.3373%" y="181" width="0.3051%" height="15" fill="rgb(243,69,51)" fg:x="10330" fg:w="163"/><text x="19.6303%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="19.6425%" y="133" width="0.1011%" height="15" fill="rgb(233,155,32)" fg:x="10493" fg:w="54"/><text x="19.9354%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="19.7435%" y="133" width="0.1685%" height="15" fill="rgb(252,188,18)" fg:x="10547" fg:w="90"/><text x="20.0365%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.31%)</title><rect x="19.9120%" y="133" width="0.3051%" height="15" fill="rgb(206,90,41)" fg:x="10637" fg:w="163"/><text x="20.2050%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.04%)</title><rect x="19.6425%" y="149" width="1.0408%" height="15" fill="rgb(236,98,13)" fg:x="10493" fg:w="556"/><text x="19.9354%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.14%)</title><rect x="20.6833%" y="133" width="0.1385%" height="15" fill="rgb(254,52,52)" fg:x="11049" fg:w="74"/><text x="20.9762%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.15%)</title><rect x="20.6833%" y="149" width="0.1460%" height="15" fill="rgb(211,64,22)" fg:x="11049" fg:w="78"/><text x="20.9762%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (743 instructions, 1.39%)</title><rect x="19.6425%" y="165" width="1.3909%" height="15" fill="rgb(241,212,17)" fg:x="10493" fg:w="743"/><text x="19.9354%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="21.0595%" y="101" width="0.0112%" height="15" fill="rgb(240,162,6)" fg:x="11250" fg:w="6"/><text x="21.3525%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="21.0708%" y="101" width="0.0300%" height="15" fill="rgb(210,38,37)" fg:x="11256" fg:w="16"/><text x="21.3637%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="21.0333%" y="117" width="0.1835%" height="15" fill="rgb(248,128,25)" fg:x="11236" fg:w="98"/><text x="21.3263%" y="127.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="21.0333%" y="133" width="0.1872%" height="15" fill="rgb(227,29,38)" fg:x="11236" fg:w="100"/><text x="21.3263%" y="143.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="21.0333%" y="149" width="0.1966%" height="15" fill="rgb(221,71,46)" fg:x="11236" fg:w="105"/><text x="21.3263%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.26%)</title><rect x="21.0333%" y="165" width="0.2565%" height="15" fill="rgb(228,93,53)" fg:x="11236" fg:w="137"/><text x="21.3263%" y="175.50"></text></g><g><title>candid::types::internal::env_add (937 instructions, 1.75%)</title><rect x="19.6425%" y="181" width="1.7540%" height="15" fill="rgb(209,182,47)" fg:x="10493" fg:w="937"/><text x="19.9354%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="21.3965%" y="133" width="0.1011%" height="15" fill="rgb(253,115,26)" fg:x="11430" fg:w="54"/><text x="21.6894%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="21.3965%" y="149" width="0.1479%" height="15" fill="rgb(206,183,47)" fg:x="11430" fg:w="79"/><text x="21.6894%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.57%)</title><rect x="21.3965%" y="165" width="0.5672%" height="15" fill="rgb(231,218,0)" fg:x="11430" fg:w="303"/><text x="21.6894%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (35 instructions, 0.07%)</title><rect x="21.9637%" y="165" width="0.0655%" height="15" fill="rgb(249,25,34)" fg:x="11733" fg:w="35"/><text x="22.2567%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.0292%" y="165" width="0.0206%" height="15" fill="rgb(222,129,34)" fg:x="11768" fg:w="11"/><text x="22.3222%" y="175.50"></text></g><g><title>candid::types::internal::env_id (506 instructions, 0.95%)</title><rect x="21.3965%" y="181" width="0.9472%" height="15" fill="rgb(249,135,13)" fg:x="11430" fg:w="506"/><text x="21.6894%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,761 instructions, 5.17%)</title><rect x="17.3774%" y="197" width="5.1685%" height="15" fill="rgb(224,166,14)" fg:x="9283" fg:w="2761"/><text x="17.6704%" y="207.50">candi..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.07%)</title><rect x="22.5459%" y="197" width="0.0711%" height="15" fill="rgb(237,213,32)" fg:x="12044" fg:w="38"/><text x="22.8388%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.6432%" y="133" width="0.0112%" height="15" fill="rgb(217,154,11)" fg:x="12096" fg:w="6"/><text x="22.9362%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.6619%" y="133" width="0.0187%" height="15" fill="rgb(215,53,20)" fg:x="12106" fg:w="10"/><text x="22.9549%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="22.6170%" y="149" width="0.2639%" height="15" fill="rgb(247,126,4)" fg:x="12082" fg:w="141"/><text x="22.9100%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="22.6170%" y="165" width="0.2677%" height="15" fill="rgb(223,51,13)" fg:x="12082" fg:w="143"/><text x="22.9100%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="22.6170%" y="181" width="0.2770%" height="15" fill="rgb(245,41,0)" fg:x="12082" fg:w="148"/><text x="22.9100%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="22.9802%" y="133" width="0.0112%" height="15" fill="rgb(241,209,23)" fg:x="12276" fg:w="6"/><text x="23.2731%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="22.9989%" y="133" width="0.0187%" height="15" fill="rgb(244,112,2)" fg:x="12286" fg:w="10"/><text x="23.2918%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="22.9539%" y="149" width="0.2639%" height="15" fill="rgb(236,112,3)" fg:x="12262" fg:w="141"/><text x="23.2469%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="22.9539%" y="165" width="0.2677%" height="15" fill="rgb(252,179,6)" fg:x="12262" fg:w="143"/><text x="23.2469%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="22.9539%" y="181" width="0.2770%" height="15" fill="rgb(223,135,9)" fg:x="12262" fg:w="148"/><text x="23.2469%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.67%)</title><rect x="22.6170%" y="197" width="0.6739%" height="15" fill="rgb(224,14,51)" fg:x="12082" fg:w="360"/><text x="22.9100%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="23.2909%" y="181" width="0.0524%" height="15" fill="rgb(238,127,20)" fg:x="12442" fg:w="28"/><text x="23.5839%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (105 instructions, 0.20%)</title><rect x="23.2909%" y="197" width="0.1966%" height="15" fill="rgb(232,221,54)" fg:x="12442" fg:w="105"/><text x="23.5839%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.4875%" y="197" width="0.0206%" height="15" fill="rgb(254,4,48)" fg:x="12547" fg:w="11"/><text x="23.7804%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5080%" y="197" width="0.0206%" height="15" fill="rgb(213,177,40)" fg:x="12558" fg:w="11"/><text x="23.8010%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.5286%" y="197" width="0.0206%" height="15" fill="rgb(206,223,19)" fg:x="12569" fg:w="11"/><text x="23.8216%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,465 instructions, 6.49%)</title><rect x="17.3774%" y="213" width="6.4863%" height="15" fill="rgb(207,9,6)" fg:x="9283" fg:w="3465"/><text x="17.6704%" y="223.50">candid:..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="23.8637%" y="197" width="0.7731%" height="15" fill="rgb(247,75,7)" fg:x="12748" fg:w="413"/><text x="24.1567%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="23.8637%" y="213" width="0.7806%" height="15" fill="rgb(230,49,37)" fg:x="12748" fg:w="417"/><text x="24.1567%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="24.6443%" y="197" width="0.0356%" height="15" fill="rgb(211,225,40)" fg:x="13165" fg:w="19"/><text x="24.9373%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="24.7211%" y="149" width="0.0112%" height="15" fill="rgb(244,118,17)" fg:x="13206" fg:w="6"/><text x="25.0140%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="24.7398%" y="149" width="0.0187%" height="15" fill="rgb(248,38,31)" fg:x="13216" fg:w="10"/><text x="25.0328%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.36%)</title><rect x="24.6799%" y="165" width="0.3613%" height="15" fill="rgb(216,229,52)" fg:x="13184" fg:w="193"/><text x="24.9729%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.37%)</title><rect x="24.6799%" y="181" width="0.3650%" height="15" fill="rgb(244,187,12)" fg:x="13184" fg:w="195"/><text x="24.9729%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.37%)</title><rect x="24.6799%" y="197" width="0.3744%" height="15" fill="rgb(231,104,36)" fg:x="13184" fg:w="200"/><text x="24.9729%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.0955%" y="133" width="0.0112%" height="15" fill="rgb(241,93,12)" fg:x="13406" fg:w="6"/><text x="25.3884%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.1142%" y="133" width="0.0187%" height="15" fill="rgb(234,229,11)" fg:x="13416" fg:w="10"/><text x="25.4072%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::leftshift_for_tree_index (10 instructions, 0.02%)</title><rect x="25.1348%" y="117" width="0.0187%" height="15" fill="rgb(234,108,46)" fg:x="13427" fg:w="10"/><text x="25.4277%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (113 instructions, 0.21%)</title><rect x="25.1329%" y="133" width="0.2115%" height="15" fill="rgb(248,81,2)" fg:x="13426" fg:w="113"/><text x="25.4259%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (282 instructions, 0.53%)</title><rect x="25.0543%" y="149" width="0.5279%" height="15" fill="rgb(216,91,37)" fg:x="13384" fg:w="282"/><text x="25.3473%" y="159.50"></text></g><g><title>__rdl_dealloc (284 instructions, 0.53%)</title><rect x="25.0543%" y="165" width="0.5316%" height="15" fill="rgb(240,108,48)" fg:x="13384" fg:w="284"/><text x="25.3473%" y="175.50"></text></g><g><title>__rust_dealloc (289 instructions, 0.54%)</title><rect x="25.0543%" y="181" width="0.5410%" height="15" fill="rgb(235,201,43)" fg:x="13384" fg:w="289"/><text x="25.3473%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (321 instructions, 0.60%)</title><rect x="25.0543%" y="197" width="0.6009%" height="15" fill="rgb(207,62,39)" fg:x="13384" fg:w="321"/><text x="25.3473%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="25.6552%" y="197" width="0.0206%" height="15" fill="rgb(252,68,15)" fg:x="13705" fg:w="11"/><text x="25.9482%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (653 instructions, 1.22%)</title><rect x="24.6443%" y="213" width="1.2224%" height="15" fill="rgb(215,117,27)" fg:x="13165" fg:w="653"/><text x="24.9373%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,396 instructions, 25.08%)</title><rect x="0.9828%" y="229" width="25.0768%" height="15" fill="rgb(208,134,19)" fg:x="525" fg:w="13396"/><text x="1.2757%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="26.0857%" y="181" width="0.0112%" height="15" fill="rgb(246,209,6)" fg:x="13935" fg:w="6"/><text x="26.3787%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="26.1045%" y="181" width="0.1030%" height="15" fill="rgb(211,8,28)" fg:x="13945" fg:w="55"/><text x="26.3974%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="26.2074%" y="181" width="0.0187%" height="15" fill="rgb(233,62,4)" fg:x="14000" fg:w="10"/><text x="26.5004%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::leftshift_for_tree_index (10 instructions, 0.02%)</title><rect x="26.2280%" y="165" width="0.0187%" height="15" fill="rgb(247,187,9)" fg:x="14011" fg:w="10"/><text x="26.5210%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (113 instructions, 0.21%)</title><rect x="26.2261%" y="181" width="0.2115%" height="15" fill="rgb(225,202,45)" fg:x="14010" fg:w="113"/><text x="26.5191%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (266 instructions, 0.50%)</title><rect x="26.0595%" y="197" width="0.4979%" height="15" fill="rgb(254,160,32)" fg:x="13921" fg:w="266"/><text x="26.3525%" y="207.50"></text></g><g><title>__rdl_dealloc (268 instructions, 0.50%)</title><rect x="26.0595%" y="213" width="0.5017%" height="15" fill="rgb(241,141,46)" fg:x="13921" fg:w="268"/><text x="26.3525%" y="223.50"></text></g><g><title>__rust_dealloc (273 instructions, 0.51%)</title><rect x="26.0595%" y="229" width="0.5110%" height="15" fill="rgb(252,84,12)" fg:x="13921" fg:w="273"/><text x="26.3525%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,919 instructions, 26.06%)</title><rect x="0.5915%" y="245" width="26.0558%" height="15" fill="rgb(250,18,30)" fg:x="316" fg:w="13919"/><text x="0.8845%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="26.6473%" y="245" width="1.3609%" height="15" fill="rgb(212,117,4)" fg:x="14235" fg:w="727"/><text x="26.9403%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="28.0082%" y="245" width="1.2823%" height="15" fill="rgb(224,149,53)" fg:x="14962" fg:w="685"/><text x="28.3012%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="29.2905%" y="245" width="1.4152%" height="15" fill="rgb(217,131,54)" fg:x="15647" fg:w="756"/><text x="29.5835%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="30.7057%" y="245" width="1.3609%" height="15" fill="rgb(212,89,28)" fg:x="16403" fg:w="727"/><text x="30.9987%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="32.0666%" y="245" width="1.2823%" height="15" fill="rgb(219,181,35)" fg:x="17130" fg:w="685"/><text x="32.3596%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="33.3489%" y="245" width="1.4152%" height="15" fill="rgb(225,117,18)" fg:x="17815" fg:w="756"/><text x="33.6419%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="34.7641%" y="245" width="1.3609%" height="15" fill="rgb(238,102,30)" fg:x="18571" fg:w="727"/><text x="35.0571%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="36.1250%" y="245" width="1.3609%" height="15" fill="rgb(247,179,54)" fg:x="19298" fg:w="727"/><text x="36.4180%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="37.4860%" y="245" width="1.3609%" height="15" fill="rgb(236,140,7)" fg:x="20025" fg:w="727"/><text x="37.7789%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="38.8469%" y="245" width="1.4695%" height="15" fill="rgb(210,180,16)" fg:x="20752" fg:w="785"/><text x="39.1398%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="40.3164%" y="245" width="1.3609%" height="15" fill="rgb(245,110,3)" fg:x="21537" fg:w="727"/><text x="40.6093%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="41.6773%" y="245" width="1.3609%" height="15" fill="rgb(247,0,20)" fg:x="22264" fg:w="727"/><text x="41.9702%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="43.0382%" y="245" width="1.3609%" height="15" fill="rgb(214,128,38)" fg:x="22991" fg:w="727"/><text x="43.3312%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.52%)</title><rect x="44.3991%" y="245" width="1.5238%" height="15" fill="rgb(244,88,52)" fg:x="23718" fg:w="814"/><text x="44.6921%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.34%)</title><rect x="45.9229%" y="245" width="1.3366%" height="15" fill="rgb(242,108,10)" fg:x="24532" fg:w="714"/><text x="46.2158%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="47.2595%" y="245" width="1.4152%" height="15" fill="rgb(225,62,23)" fg:x="25246" fg:w="756"/><text x="47.5524%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="48.6747%" y="245" width="1.3609%" height="15" fill="rgb(247,94,48)" fg:x="26002" fg:w="727"/><text x="48.9676%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.34%)</title><rect x="50.0356%" y="245" width="1.3366%" height="15" fill="rgb(235,82,49)" fg:x="26729" fg:w="714"/><text x="50.3285%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.34%)</title><rect x="51.3721%" y="245" width="1.3366%" height="15" fill="rgb(234,129,26)" fg:x="27443" fg:w="714"/><text x="51.6651%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="52.7087%" y="245" width="1.3609%" height="15" fill="rgb(214,152,27)" fg:x="28157" fg:w="727"/><text x="53.0017%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="54.0696%" y="245" width="1.3609%" height="15" fill="rgb(227,103,4)" fg:x="28884" fg:w="727"/><text x="54.3626%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="55.4306%" y="245" width="1.4152%" height="15" fill="rgb(210,226,5)" fg:x="29611" fg:w="756"/><text x="55.7235%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="56.8458%" y="245" width="1.2823%" height="15" fill="rgb(221,42,42)" fg:x="30367" fg:w="685"/><text x="57.1387%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="58.1280%" y="245" width="1.4695%" height="15" fill="rgb(251,57,43)" fg:x="31052" fg:w="785"/><text x="58.4210%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="59.5975%" y="245" width="1.3609%" height="15" fill="rgb(248,165,14)" fg:x="31837" fg:w="727"/><text x="59.8905%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="60.9584%" y="245" width="1.4152%" height="15" fill="rgb(212,199,47)" fg:x="32564" fg:w="756"/><text x="61.2514%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="62.3736%" y="245" width="1.3609%" height="15" fill="rgb(219,183,40)" fg:x="33320" fg:w="727"/><text x="62.6666%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="63.7346%" y="245" width="1.4152%" height="15" fill="rgb(251,221,17)" fg:x="34047" fg:w="756"/><text x="64.0275%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="65.1498%" y="245" width="1.3609%" height="15" fill="rgb(231,195,35)" fg:x="34803" fg:w="727"/><text x="65.4427%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="66.5107%" y="245" width="1.2823%" height="15" fill="rgb(238,95,48)" fg:x="35530" fg:w="685"/><text x="66.8036%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="67.7930%" y="245" width="1.4152%" height="15" fill="rgb(210,129,15)" fg:x="36215" fg:w="756"/><text x="68.0859%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="69.2082%" y="245" width="1.3609%" height="15" fill="rgb(211,79,18)" fg:x="36971" fg:w="727"/><text x="69.5011%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="70.5691%" y="245" width="1.3609%" height="15" fill="rgb(245,8,31)" fg:x="37698" fg:w="727"/><text x="70.8620%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="71.9300%" y="245" width="1.2823%" height="15" fill="rgb(246,113,24)" fg:x="38425" fg:w="685"/><text x="72.2230%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="73.2123%" y="245" width="1.4152%" height="15" fill="rgb(211,66,48)" fg:x="39110" fg:w="756"/><text x="73.5052%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="74.6275%" y="245" width="1.4152%" height="15" fill="rgb(210,213,7)" fg:x="39866" fg:w="756"/><text x="74.9204%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="76.0427%" y="245" width="1.2823%" height="15" fill="rgb(227,119,25)" fg:x="40622" fg:w="685"/><text x="76.3356%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="77.3250%" y="245" width="1.4695%" height="15" fill="rgb(209,168,45)" fg:x="41307" fg:w="785"/><text x="77.6179%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="78.7945%" y="245" width="1.2823%" height="15" fill="rgb(208,127,50)" fg:x="42092" fg:w="685"/><text x="79.0874%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.52%)</title><rect x="80.0768%" y="245" width="1.5238%" height="15" fill="rgb(218,81,12)" fg:x="42777" fg:w="814"/><text x="80.3697%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.28%)</title><rect x="81.6005%" y="245" width="1.2823%" height="15" fill="rgb(235,49,39)" fg:x="43591" fg:w="685"/><text x="81.8935%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.52%)</title><rect x="82.8828%" y="245" width="1.5238%" height="15" fill="rgb(233,29,3)" fg:x="44276" fg:w="814"/><text x="83.1758%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="84.4066%" y="245" width="1.4695%" height="15" fill="rgb(233,127,5)" fg:x="45090" fg:w="785"/><text x="84.6996%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.52%)</title><rect x="85.8761%" y="245" width="1.5238%" height="15" fill="rgb(218,104,13)" fg:x="45875" fg:w="814"/><text x="86.1690%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.42%)</title><rect x="87.3999%" y="245" width="1.4152%" height="15" fill="rgb(236,91,17)" fg:x="46689" fg:w="756"/><text x="87.6928%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="88.8151%" y="245" width="1.3609%" height="15" fill="rgb(252,50,23)" fg:x="47445" fg:w="727"/><text x="89.1080%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.47%)</title><rect x="90.1760%" y="245" width="1.4695%" height="15" fill="rgb(239,19,13)" fg:x="48172" fg:w="785"/><text x="90.4689%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (743 instructions, 1.39%)</title><rect x="91.6455%" y="245" width="1.3909%" height="15" fill="rgb(222,141,12)" fg:x="48957" fg:w="743"/><text x="91.9384%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="93.0363%" y="245" width="1.3609%" height="15" fill="rgb(253,70,50)" fg:x="49700" fg:w="727"/><text x="93.3293%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.36%)</title><rect x="94.3972%" y="245" width="1.3609%" height="15" fill="rgb(214,140,50)" fg:x="50427" fg:w="727"/><text x="94.6902%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="95.7993%" y="133" width="0.1030%" height="15" fill="rgb(205,5,50)" fg:x="51176" fg:w="55"/><text x="96.0923%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="95.9023%" y="133" width="0.0112%" height="15" fill="rgb(238,109,2)" fg:x="51231" fg:w="6"/><text x="96.1953%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="95.9135%" y="133" width="0.0187%" height="15" fill="rgb(222,181,26)" fg:x="51237" fg:w="10"/><text x="96.2065%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (158 instructions, 0.30%)</title><rect x="95.7581%" y="149" width="0.2958%" height="15" fill="rgb(248,69,13)" fg:x="51154" fg:w="158"/><text x="96.0511%" y="159.50"></text></g><g><title>__rdl_dealloc (160 instructions, 0.30%)</title><rect x="95.7581%" y="165" width="0.2995%" height="15" fill="rgb(232,158,18)" fg:x="51154" fg:w="160"/><text x="96.0511%" y="175.50"></text></g><g><title>__rust_dealloc (165 instructions, 0.31%)</title><rect x="95.7581%" y="181" width="0.3089%" height="15" fill="rgb(245,29,54)" fg:x="51154" fg:w="165"/><text x="96.0511%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (197 instructions, 0.37%)</title><rect x="95.7581%" y="197" width="0.3688%" height="15" fill="rgb(241,45,41)" fg:x="51154" fg:w="197"/><text x="96.0511%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.25%)</title><rect x="96.1269%" y="181" width="0.2527%" height="15" fill="rgb(214,13,6)" fg:x="51351" fg:w="135"/><text x="96.4199%" y="191.50"></text></g><g><title>memset (139 instructions, 0.26%)</title><rect x="96.1269%" y="197" width="0.2602%" height="15" fill="rgb(247,186,44)" fg:x="51351" fg:w="139"/><text x="96.4199%" y="207.50"></text></g><g><title>candid::types::internal::env_clear (438 instructions, 0.82%)</title><rect x="95.7581%" y="213" width="0.8199%" height="15" fill="rgb(213,90,16)" fg:x="51154" fg:w="438"/><text x="96.0511%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (502 instructions, 0.94%)</title><rect x="95.7581%" y="229" width="0.9397%" height="15" fill="rgb(248,164,22)" fg:x="51154" fg:w="502"/><text x="96.0511%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="96.7035%" y="197" width="0.0618%" height="15" fill="rgb(251,86,19)" fg:x="51659" fg:w="33"/><text x="96.9965%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.16%)</title><rect x="96.7035%" y="213" width="0.1647%" height="15" fill="rgb(206,102,45)" fg:x="51659" fg:w="88"/><text x="96.9965%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.8682%" y="101" width="0.0168%" height="15" fill="rgb(241,50,28)" fg:x="51747" fg:w="9"/><text x="97.1612%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.8851%" y="101" width="0.0168%" height="15" fill="rgb(206,38,53)" fg:x="51756" fg:w="9"/><text x="97.1780%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.9019%" y="101" width="0.0168%" height="15" fill="rgb(218,42,34)" fg:x="51765" fg:w="9"/><text x="97.1949%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="96.9244%" y="101" width="0.0187%" height="15" fill="rgb(245,155,33)" fg:x="51777" fg:w="10"/><text x="97.2173%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="96.8682%" y="117" width="0.2471%" height="15" fill="rgb(253,136,5)" fg:x="51747" fg:w="132"/><text x="97.1612%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.27%)</title><rect x="96.8682%" y="133" width="0.2658%" height="15" fill="rgb(225,57,48)" fg:x="51747" fg:w="142"/><text x="97.1612%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="96.8682%" y="149" width="0.2714%" height="15" fill="rgb(251,102,3)" fg:x="51747" fg:w="145"/><text x="97.1612%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="96.8682%" y="165" width="0.2827%" height="15" fill="rgb(246,133,27)" fg:x="51747" fg:w="151"/><text x="97.1612%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="96.8682%" y="181" width="0.3426%" height="15" fill="rgb(229,175,28)" fg:x="51747" fg:w="183"/><text x="97.1612%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 instructions, 0.47%)</title><rect x="96.8682%" y="197" width="0.4680%" height="15" fill="rgb(231,219,9)" fg:x="51747" fg:w="250"/><text x="97.1612%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="97.3362%" y="197" width="0.0187%" height="15" fill="rgb(216,47,2)" fg:x="51997" fg:w="10"/><text x="97.6292%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.3549%" y="181" width="0.0206%" height="15" fill="rgb(220,205,1)" fg:x="52007" fg:w="11"/><text x="97.6479%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.3830%" y="181" width="0.0206%" height="15" fill="rgb(207,194,52)" fg:x="52022" fg:w="11"/><text x="97.6760%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="97.3549%" y="197" width="0.0562%" height="15" fill="rgb(246,107,44)" fg:x="52007" fg:w="30"/><text x="97.6479%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (492 instructions, 0.92%)</title><rect x="96.8682%" y="213" width="0.9210%" height="15" fill="rgb(245,93,50)" fg:x="51747" fg:w="492"/><text x="97.1612%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="97.7892%" y="213" width="0.0112%" height="15" fill="rgb(216,194,27)" fg:x="52239" fg:w="6"/><text x="98.0822%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.06%)</title><rect x="97.8004%" y="197" width="0.0580%" height="15" fill="rgb(252,84,7)" fg:x="52245" fg:w="31"/><text x="98.0934%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.16%)</title><rect x="97.8004%" y="213" width="0.1610%" height="15" fill="rgb(205,181,27)" fg:x="52245" fg:w="86"/><text x="98.0934%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="97.9614%" y="213" width="0.0112%" height="15" fill="rgb(207,79,10)" fg:x="52331" fg:w="6"/><text x="98.2544%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="97.9727%" y="213" width="0.0281%" height="15" fill="rgb(216,74,47)" fg:x="52337" fg:w="15"/><text x="98.2656%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (772 instructions, 1.45%)</title><rect x="96.7035%" y="229" width="1.4452%" height="15" fill="rgb(246,55,32)" fg:x="51659" fg:w="772"/><text x="96.9965%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.1842%" y="181" width="0.0112%" height="15" fill="rgb(218,195,1)" fg:x="52450" fg:w="6"/><text x="98.4772%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.1954%" y="181" width="0.0187%" height="15" fill="rgb(224,102,7)" fg:x="52456" fg:w="10"/><text x="98.4884%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="98.1580%" y="197" width="0.1310%" height="15" fill="rgb(214,195,4)" fg:x="52436" fg:w="70"/><text x="98.4510%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="98.1580%" y="213" width="0.1348%" height="15" fill="rgb(239,30,0)" fg:x="52436" fg:w="72"/><text x="98.4510%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="98.1580%" y="229" width="0.1441%" height="15" fill="rgb(231,175,9)" fg:x="52436" fg:w="77"/><text x="98.4510%" y="239.50"></text></g><g><title>candid::utils::write_args (1,435 instructions, 2.69%)</title><rect x="95.7581%" y="245" width="2.6863%" height="15" fill="rgb(245,174,0)" fg:x="51154" fg:w="1435"/><text x="96.0511%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.4706%" y="197" width="0.0112%" height="15" fill="rgb(240,58,30)" fg:x="52603" fg:w="6"/><text x="98.7636%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="98.4818%" y="197" width="0.0300%" height="15" fill="rgb(233,166,15)" fg:x="52609" fg:w="16"/><text x="98.7748%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="98.4444%" y="213" width="0.1835%" height="15" fill="rgb(233,82,52)" fg:x="52589" fg:w="98"/><text x="98.7374%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="98.4444%" y="229" width="0.1872%" height="15" fill="rgb(234,200,37)" fg:x="52589" fg:w="100"/><text x="98.7374%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.6821%" y="197" width="0.0112%" height="15" fill="rgb(222,177,52)" fg:x="52716" fg:w="6"/><text x="98.9751%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.6934%" y="197" width="0.0187%" height="15" fill="rgb(237,156,44)" fg:x="52722" fg:w="10"/><text x="98.9863%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (122 instructions, 0.23%)</title><rect x="98.6410%" y="213" width="0.2284%" height="15" fill="rgb(208,90,36)" fg:x="52694" fg:w="122"/><text x="98.9339%" y="223.50"></text></g><g><title>__rdl_dealloc (124 instructions, 0.23%)</title><rect x="98.6410%" y="229" width="0.2321%" height="15" fill="rgb(224,39,44)" fg:x="52694" fg:w="124"/><text x="98.9339%" y="239.50"></text></g><g><title>__rust_dealloc (234 instructions, 0.44%)</title><rect x="98.4444%" y="245" width="0.4380%" height="15" fill="rgb(247,191,53)" fg:x="52589" fg:w="234"/><text x="98.7374%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (53,409 instructions, 99.98%)</title><rect x="0.0150%" y="261" width="99.9794%" height="15" fill="rgb(212,196,39)" fg:x="8" fg:w="53409"/><text x="0.3079%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (53,420 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(207,17,21)" fg:x="0" fg:w="53420"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_remove (53,420 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,7,10)" fg:x="0" fg:w="53420"/><text x="0.2930%" y="287.50">canister_update batch_remove</text></g></svg></svg>