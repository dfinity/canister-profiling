<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="50045"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0480%" height="15" fill="rgb(213,156,16)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0480%" y="197" width="0.1659%" height="15" fill="rgb(223,194,1)" fg:x="24" fg:w="83"/><text x="0.3409%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2138%" y="197" width="0.1659%" height="15" fill="rgb(215,122,54)" fg:x="107" fg:w="83"/><text x="0.5068%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3797%" y="165" width="0.1659%" height="15" fill="rgb(229,193,30)" fg:x="190" fg:w="83"/><text x="0.6726%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5455%" y="149" width="0.1639%" height="15" fill="rgb(231,104,52)" fg:x="273" fg:w="82"/><text x="0.8385%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7094%" y="133" width="0.0120%" height="15" fill="rgb(229,147,38)" fg:x="355" fg:w="6"/><text x="1.0023%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="0.7094%" y="149" width="0.8792%" height="15" fill="rgb(209,40,24)" fg:x="355" fg:w="440"/><text x="1.0023%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5886%" y="149" width="0.1898%" height="15" fill="rgb(227,29,53)" fg:x="795" fg:w="95"/><text x="1.8815%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7784%" y="149" width="0.1199%" height="15" fill="rgb(243,115,0)" fg:x="890" fg:w="60"/><text x="2.0714%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8983%" y="149" width="0.1199%" height="15" fill="rgb(218,150,37)" fg:x="950" fg:w="60"/><text x="2.1913%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0182%" y="149" width="0.1199%" height="15" fill="rgb(213,229,29)" fg:x="1010" fg:w="60"/><text x="2.3112%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1381%" y="149" width="0.1199%" height="15" fill="rgb(226,140,46)" fg:x="1070" fg:w="60"/><text x="2.4310%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2580%" y="149" width="0.1639%" height="15" fill="rgb(239,86,18)" fg:x="1130" fg:w="82"/><text x="2.5509%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4218%" y="149" width="0.1399%" height="15" fill="rgb(206,170,52)" fg:x="1212" fg:w="70"/><text x="2.7148%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5617%" y="133" width="0.0120%" height="15" fill="rgb(232,8,49)" fg:x="1282" fg:w="6"/><text x="2.8547%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="2.5617%" y="149" width="0.8792%" height="15" fill="rgb(217,176,46)" fg:x="1282" fg:w="440"/><text x="2.8547%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4409%" y="149" width="0.0380%" height="15" fill="rgb(233,158,37)" fg:x="1722" fg:w="19"/><text x="3.7339%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.4789%" y="133" width="0.1659%" height="15" fill="rgb(237,195,14)" fg:x="1741" fg:w="83"/><text x="3.7718%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6447%" y="101" width="0.1339%" height="15" fill="rgb(222,19,19)" fg:x="1824" fg:w="67"/><text x="3.9377%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="3.6447%" y="117" width="0.1958%" height="15" fill="rgb(232,75,35)" fg:x="1824" fg:w="98"/><text x="3.9377%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8405%" y="69" width="0.0220%" height="15" fill="rgb(206,164,44)" fg:x="1922" fg:w="11"/><text x="4.1335%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8625%" y="53" width="0.0699%" height="15" fill="rgb(213,4,43)" fg:x="1933" fg:w="35"/><text x="4.1555%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="3.8625%" y="69" width="0.1319%" height="15" fill="rgb(247,153,35)" fg:x="1933" fg:w="66"/><text x="4.1555%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="3.8405%" y="85" width="0.2937%" height="15" fill="rgb(237,224,36)" fg:x="1922" fg:w="147"/><text x="4.1335%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="3.8405%" y="101" width="0.4236%" height="15" fill="rgb(246,71,36)" fg:x="1922" fg:w="212"/><text x="4.1335%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="3.8405%" y="117" width="0.4436%" height="15" fill="rgb(211,31,46)" fg:x="1922" fg:w="222"/><text x="4.1335%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="3.6447%" y="133" width="0.9212%" height="15" fill="rgb(242,62,21)" fg:x="1824" fg:w="461"/><text x="3.9377%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="3.4789%" y="149" width="1.3768%" height="15" fill="rgb(249,213,20)" fg:x="1741" fg:w="689"/><text x="3.7718%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8556%" y="149" width="0.1898%" height="15" fill="rgb(229,196,24)" fg:x="2430" fg:w="95"/><text x="5.1486%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0455%" y="149" width="0.1199%" height="15" fill="rgb(245,208,10)" fg:x="2525" fg:w="60"/><text x="5.3384%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1654%" y="149" width="0.1519%" height="15" fill="rgb(214,56,20)" fg:x="2585" fg:w="76"/><text x="5.4583%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3172%" y="149" width="0.1399%" height="15" fill="rgb(242,90,48)" fg:x="2661" fg:w="70"/><text x="5.6102%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4571%" y="117" width="0.0120%" height="15" fill="rgb(221,139,29)" fg:x="2731" fg:w="6"/><text x="5.7501%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="5.4571%" y="133" width="0.8792%" height="15" fill="rgb(229,104,35)" fg:x="2731" fg:w="440"/><text x="5.7501%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3363%" y="133" width="0.0380%" height="15" fill="rgb(224,114,36)" fg:x="3171" fg:w="19"/><text x="6.6293%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3743%" y="117" width="0.1659%" height="15" fill="rgb(251,92,18)" fg:x="3190" fg:w="83"/><text x="6.6672%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5401%" y="85" width="0.1339%" height="15" fill="rgb(214,221,19)" fg:x="3273" fg:w="67"/><text x="6.8331%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="6.5401%" y="101" width="0.1958%" height="15" fill="rgb(235,161,23)" fg:x="3273" fg:w="98"/><text x="6.8331%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7359%" y="53" width="0.0220%" height="15" fill="rgb(220,56,24)" fg:x="3371" fg:w="11"/><text x="7.0289%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7579%" y="37" width="0.0699%" height="15" fill="rgb(248,84,30)" fg:x="3382" fg:w="35"/><text x="7.0509%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="6.7579%" y="53" width="0.1319%" height="15" fill="rgb(218,128,10)" fg:x="3382" fg:w="66"/><text x="7.0509%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="6.7359%" y="69" width="0.2937%" height="15" fill="rgb(205,168,35)" fg:x="3371" fg:w="147"/><text x="7.0289%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="6.7359%" y="85" width="0.4236%" height="15" fill="rgb(212,209,0)" fg:x="3371" fg:w="212"/><text x="7.0289%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="6.7359%" y="101" width="0.4436%" height="15" fill="rgb(253,218,44)" fg:x="3371" fg:w="222"/><text x="7.0289%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="6.5401%" y="117" width="0.9212%" height="15" fill="rgb(223,65,42)" fg:x="3273" fg:w="461"/><text x="6.8331%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="6.3743%" y="133" width="1.3768%" height="15" fill="rgb(244,229,50)" fg:x="3190" fg:w="689"/><text x="6.6672%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7510%" y="133" width="0.1898%" height="15" fill="rgb(245,84,26)" fg:x="3879" fg:w="95"/><text x="8.0440%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9409%" y="133" width="0.1199%" height="15" fill="rgb(214,199,38)" fg:x="3974" fg:w="60"/><text x="8.2338%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0607%" y="117" width="0.1639%" height="15" fill="rgb(250,80,42)" fg:x="4034" fg:w="82"/><text x="8.3537%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2246%" y="117" width="0.1898%" height="15" fill="rgb(221,103,33)" fg:x="4116" fg:w="95"/><text x="8.5176%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.4144%" y="117" width="0.1519%" height="15" fill="rgb(247,187,37)" fg:x="4211" fg:w="76"/><text x="8.7074%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0607%" y="133" width="0.6594%" height="15" fill="rgb(243,200,6)" fg:x="4034" fg:w="330"/><text x="8.3537%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7202%" y="133" width="0.1639%" height="15" fill="rgb(254,186,51)" fg:x="4364" fg:w="82"/><text x="9.0131%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 3.92%)</title><rect x="5.4571%" y="149" width="3.9165%" height="15" fill="rgb(223,196,50)" fg:x="2731" fg:w="1960"/><text x="5.7501%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3736%" y="149" width="0.1519%" height="15" fill="rgb(213,64,45)" fg:x="4691" fg:w="76"/><text x="9.6665%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5254%" y="149" width="0.0300%" height="15" fill="rgb(206,128,41)" fg:x="4767" fg:w="15"/><text x="9.8184%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5554%" y="149" width="0.0300%" height="15" fill="rgb(220,30,34)" fg:x="4782" fg:w="15"/><text x="9.8484%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5854%" y="149" width="0.0180%" height="15" fill="rgb(228,215,1)" fg:x="4797" fg:w="9"/><text x="9.8783%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.04%)</title><rect x="9.6034%" y="149" width="0.0360%" height="15" fill="rgb(240,176,14)" fg:x="4806" fg:w="18"/><text x="9.8963%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6393%" y="133" width="0.1659%" height="15" fill="rgb(218,122,29)" fg:x="4824" fg:w="83"/><text x="9.9323%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6393%" y="149" width="0.3577%" height="15" fill="rgb(221,95,46)" fg:x="4824" fg:w="179"/><text x="9.9323%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9970%" y="117" width="0.1659%" height="15" fill="rgb(227,100,37)" fg:x="5003" fg:w="83"/><text x="10.2900%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9970%" y="133" width="0.2518%" height="15" fill="rgb(231,209,6)" fg:x="5003" fg:w="126"/><text x="10.2900%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.42%)</title><rect x="9.9970%" y="149" width="0.4156%" height="15" fill="rgb(208,103,37)" fg:x="5003" fg:w="208"/><text x="10.2900%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.4126%" y="149" width="0.1659%" height="15" fill="rgb(251,197,36)" fg:x="5211" fg:w="83"/><text x="10.7056%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="10.5785%" y="149" width="0.1718%" height="15" fill="rgb(254,104,13)" fg:x="5294" fg:w="86"/><text x="10.8714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7503%" y="149" width="0.1659%" height="15" fill="rgb(248,196,46)" fg:x="5380" fg:w="83"/><text x="11.0433%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9162%" y="149" width="0.1659%" height="15" fill="rgb(235,56,41)" fg:x="5463" fg:w="83"/><text x="11.2091%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="11.0900%" y="149" width="0.1718%" height="15" fill="rgb(241,41,3)" fg:x="5550" fg:w="86"/><text x="11.3830%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="11.2619%" y="149" width="0.8552%" height="15" fill="rgb(250,131,6)" fg:x="5636" fg:w="428"/><text x="11.5548%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="12.1171%" y="149" width="0.8552%" height="15" fill="rgb(228,136,54)" fg:x="6064" fg:w="428"/><text x="12.4101%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,366 instructions, 14.72%)</title><rect x="0.5455%" y="165" width="14.7188%" height="15" fill="rgb(243,164,8)" fg:x="273" fg:w="7366"/><text x="0.8385%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.2643%" y="165" width="0.7593%" height="15" fill="rgb(223,100,14)" fg:x="7639" fg:w="380"/><text x="15.5572%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.0236%" y="149" width="0.0280%" height="15" fill="rgb(210,61,36)" fg:x="8019" fg:w="14"/><text x="16.3165%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.13%)</title><rect x="16.0236%" y="165" width="0.1259%" height="15" fill="rgb(218,149,45)" fg:x="8019" fg:w="63"/><text x="16.3165%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="16.1495%" y="165" width="0.1659%" height="15" fill="rgb(209,15,0)" fg:x="8082" fg:w="83"/><text x="16.4424%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.3153%" y="149" width="0.0280%" height="15" fill="rgb(226,214,37)" fg:x="8165" fg:w="14"/><text x="16.6083%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.3433%" y="133" width="0.1179%" height="15" fill="rgb(232,57,16)" fg:x="8179" fg:w="59"/><text x="16.6363%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.4612%" y="133" width="0.1878%" height="15" fill="rgb(205,152,15)" fg:x="8238" fg:w="94"/><text x="16.7542%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.6490%" y="133" width="0.3457%" height="15" fill="rgb(229,160,18)" fg:x="8332" fg:w="173"/><text x="16.9420%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.3433%" y="149" width="1.1570%" height="15" fill="rgb(252,12,50)" fg:x="8179" fg:w="579"/><text x="16.6363%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 1.64%)</title><rect x="16.3153%" y="165" width="1.6405%" height="15" fill="rgb(228,192,16)" fg:x="8165" fg:w="821"/><text x="16.6083%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="17.9558%" y="165" width="0.1659%" height="15" fill="rgb(243,32,50)" fg:x="8986" fg:w="83"/><text x="18.2488%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="18.1217%" y="149" width="0.0280%" height="15" fill="rgb(206,29,13)" fg:x="9069" fg:w="14"/><text x="18.4147%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.1497%" y="133" width="0.1179%" height="15" fill="rgb(226,187,20)" fg:x="9083" fg:w="59"/><text x="18.4426%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.2676%" y="133" width="0.1878%" height="15" fill="rgb(220,76,10)" fg:x="9142" fg:w="94"/><text x="18.5605%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.4554%" y="133" width="0.3457%" height="15" fill="rgb(226,28,7)" fg:x="9236" fg:w="173"/><text x="18.7484%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.1497%" y="149" width="1.1570%" height="15" fill="rgb(240,3,50)" fg:x="9083" fg:w="579"/><text x="18.4426%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.3066%" y="149" width="0.1539%" height="15" fill="rgb(242,134,19)" fg:x="9662" fg:w="77"/><text x="19.5996%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="19.4605%" y="133" width="0.1718%" height="15" fill="rgb(226,224,45)" fg:x="9739" fg:w="86"/><text x="19.7535%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.24%)</title><rect x="19.4605%" y="149" width="0.2418%" height="15" fill="rgb(209,114,20)" fg:x="9739" fg:w="121"/><text x="19.7535%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.97%)</title><rect x="18.1217%" y="165" width="1.9702%" height="15" fill="rgb(236,34,10)" fg:x="9069" fg:w="986"/><text x="18.4147%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.0919%" y="117" width="0.1179%" height="15" fill="rgb(224,66,37)" fg:x="10055" fg:w="59"/><text x="20.3849%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="20.0919%" y="133" width="0.1878%" height="15" fill="rgb(232,105,49)" fg:x="10055" fg:w="94"/><text x="20.3849%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.63%)</title><rect x="20.0919%" y="149" width="0.6294%" height="15" fill="rgb(254,182,8)" fg:x="10055" fg:w="315"/><text x="20.3849%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.852 (18 instructions, 0.04%)</title><rect x="20.7214%" y="149" width="0.0360%" height="15" fill="rgb(250,122,0)" fg:x="10370" fg:w="18"/><text x="21.0143%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.7573%" y="149" width="0.0260%" height="15" fill="rgb(224,60,33)" fg:x="10388" fg:w="13"/><text x="21.0503%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.10%)</title><rect x="20.0919%" y="165" width="1.1010%" height="15" fill="rgb(210,100,23)" fg:x="10055" fg:w="551"/><text x="20.3849%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.1929%" y="165" width="0.1059%" height="15" fill="rgb(237,137,4)" fg:x="10606" fg:w="53"/><text x="21.4859%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.2988%" y="149" width="0.2638%" height="15" fill="rgb(228,155,21)" fg:x="10659" fg:w="132"/><text x="21.5918%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.6325%" y="149" width="0.2638%" height="15" fill="rgb(215,75,45)" fg:x="10826" fg:w="132"/><text x="21.9255%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.67%)</title><rect x="21.2988%" y="165" width="0.6674%" height="15" fill="rgb(207,29,24)" fg:x="10659" fg:w="334"/><text x="21.5918%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="21.9662%" y="149" width="0.0679%" height="15" fill="rgb(246,207,11)" fg:x="10993" fg:w="34"/><text x="22.2592%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (18 instructions, 0.04%)</title><rect x="22.0342%" y="149" width="0.0360%" height="15" fill="rgb(249,177,48)" fg:x="11027" fg:w="18"/><text x="22.3271%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (18 instructions, 0.04%)</title><rect x="22.0701%" y="149" width="0.0360%" height="15" fill="rgb(251,148,8)" fg:x="11045" fg:w="18"/><text x="22.3631%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.34%)</title><rect x="21.9662%" y="165" width="0.3377%" height="15" fill="rgb(219,170,51)" fg:x="10993" fg:w="169"/><text x="22.2592%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3039%" y="165" width="0.0260%" height="15" fill="rgb(238,69,53)" fg:x="11162" fg:w="13"/><text x="22.5969%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3299%" y="165" width="0.0260%" height="15" fill="rgb(216,15,36)" fg:x="11175" fg:w="13"/><text x="22.6229%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3559%" y="165" width="0.0260%" height="15" fill="rgb(221,176,22)" fg:x="11188" fg:w="13"/><text x="22.6488%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.3819%" y="165" width="0.8792%" height="15" fill="rgb(208,34,37)" fg:x="11201" fg:w="440"/><text x="22.6748%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="23.2611%" y="133" width="0.0380%" height="15" fill="rgb(207,193,25)" fg:x="11641" fg:w="19"/><text x="23.5540%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.2990%" y="133" width="0.3617%" height="15" fill="rgb(239,186,31)" fg:x="11660" fg:w="181"/><text x="23.5920%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.20%)</title><rect x="23.6607%" y="101" width="0.1998%" height="15" fill="rgb(205,150,37)" fg:x="11841" fg:w="100"/><text x="23.9537%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (214 instructions, 0.43%)</title><rect x="23.6607%" y="117" width="0.4276%" height="15" fill="rgb(214,85,20)" fg:x="11841" fg:w="214"/><text x="23.9537%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 instructions, 0.50%)</title><rect x="23.6607%" y="133" width="0.4976%" height="15" fill="rgb(210,83,9)" fg:x="11841" fg:w="249"/><text x="23.9537%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.1583%" y="133" width="0.0260%" height="15" fill="rgb(235,31,45)" fg:x="12090" fg:w="13"/><text x="24.4512%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (524 instructions, 1.05%)</title><rect x="23.2611%" y="149" width="1.0471%" height="15" fill="rgb(247,40,48)" fg:x="11641" fg:w="524"/><text x="23.5540%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (573 instructions, 1.14%)</title><rect x="23.2611%" y="165" width="1.1450%" height="15" fill="rgb(233,95,38)" fg:x="11641" fg:w="573"/><text x="23.5540%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="24.4060%" y="149" width="0.1239%" height="15" fill="rgb(207,5,8)" fg:x="12214" fg:w="62"/><text x="24.6990%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.20%)</title><rect x="24.5299%" y="149" width="0.1998%" height="15" fill="rgb(247,226,53)" fg:x="12276" fg:w="100"/><text x="24.8229%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (261 instructions, 0.52%)</title><rect x="24.4060%" y="165" width="0.5215%" height="15" fill="rgb(207,99,18)" fg:x="12214" fg:w="261"/><text x="24.6990%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,753 instructions, 27.48%)</title><rect x="0.3797%" y="181" width="27.4813%" height="15" fill="rgb(219,132,18)" fg:x="190" fg:w="13753"/><text x="0.6726%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="27.8609%" y="181" width="1.2828%" height="15" fill="rgb(216,30,19)" fg:x="13943" fg:w="642"/><text x="28.1539%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="29.1438%" y="181" width="1.3448%" height="15" fill="rgb(205,72,27)" fg:x="14585" fg:w="673"/><text x="29.4367%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="30.4886%" y="181" width="1.3448%" height="15" fill="rgb(214,4,3)" fg:x="15258" fg:w="673"/><text x="30.7815%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (766 instructions, 1.53%)</title><rect x="31.8333%" y="181" width="1.5306%" height="15" fill="rgb(233,199,3)" fg:x="15931" fg:w="766"/><text x="32.1263%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="33.3640%" y="181" width="1.3448%" height="15" fill="rgb(212,41,18)" fg:x="16697" fg:w="673"/><text x="33.6569%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="34.7088%" y="181" width="1.2089%" height="15" fill="rgb(236,120,7)" fg:x="17370" fg:w="605"/><text x="35.0017%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="35.9177%" y="181" width="1.2828%" height="15" fill="rgb(220,36,2)" fg:x="17975" fg:w="642"/><text x="36.2106%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="37.2005%" y="181" width="1.3448%" height="15" fill="rgb(249,119,52)" fg:x="18617" fg:w="673"/><text x="37.4935%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="38.5453%" y="181" width="1.2709%" height="15" fill="rgb(244,30,53)" fg:x="19290" fg:w="636"/><text x="38.8383%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="39.8162%" y="181" width="1.2089%" height="15" fill="rgb(209,105,3)" fg:x="19926" fg:w="605"/><text x="40.1091%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="41.0251%" y="181" width="1.2828%" height="15" fill="rgb(217,188,15)" fg:x="20531" fg:w="642"/><text x="41.3180%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="42.3079%" y="181" width="1.2089%" height="15" fill="rgb(205,160,47)" fg:x="21173" fg:w="605"/><text x="42.6009%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="43.5168%" y="181" width="1.2828%" height="15" fill="rgb(250,103,12)" fg:x="21778" fg:w="642"/><text x="43.8098%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="44.7997%" y="181" width="1.2828%" height="15" fill="rgb(209,49,10)" fg:x="22420" fg:w="642"/><text x="45.0926%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (698 instructions, 1.39%)</title><rect x="46.0825%" y="181" width="1.3947%" height="15" fill="rgb(212,191,48)" fg:x="23062" fg:w="698"/><text x="46.3755%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="47.4773%" y="181" width="1.2089%" height="15" fill="rgb(230,204,6)" fg:x="23760" fg:w="605"/><text x="47.7702%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="48.6862%" y="181" width="1.2828%" height="15" fill="rgb(210,1,3)" fg:x="24365" fg:w="642"/><text x="48.9792%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="49.9690%" y="181" width="1.2828%" height="15" fill="rgb(232,99,40)" fg:x="25007" fg:w="642"/><text x="50.2620%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="51.2519%" y="181" width="1.3448%" height="15" fill="rgb(209,25,47)" fg:x="25649" fg:w="673"/><text x="51.5448%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="52.5967%" y="181" width="1.3448%" height="15" fill="rgb(211,43,29)" fg:x="26322" fg:w="673"/><text x="52.8896%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="53.9415%" y="181" width="1.2089%" height="15" fill="rgb(205,68,49)" fg:x="26995" fg:w="605"/><text x="54.2344%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.47%)</title><rect x="55.1504%" y="181" width="1.4687%" height="15" fill="rgb(216,151,17)" fg:x="27600" fg:w="735"/><text x="55.4433%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (698 instructions, 1.39%)</title><rect x="56.6190%" y="181" width="1.3947%" height="15" fill="rgb(218,74,44)" fg:x="28335" fg:w="698"/><text x="56.9120%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="58.0138%" y="181" width="1.2089%" height="15" fill="rgb(226,176,0)" fg:x="29033" fg:w="605"/><text x="58.3068%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="59.2227%" y="181" width="1.2709%" height="15" fill="rgb(212,173,32)" fg:x="29638" fg:w="636"/><text x="59.5157%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="60.4936%" y="181" width="1.2828%" height="15" fill="rgb(208,121,39)" fg:x="30274" fg:w="642"/><text x="60.7865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="61.7764%" y="181" width="1.2089%" height="15" fill="rgb(249,126,31)" fg:x="30916" fg:w="605"/><text x="62.0694%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="62.9853%" y="181" width="1.2089%" height="15" fill="rgb(235,182,32)" fg:x="31521" fg:w="605"/><text x="63.2783%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="64.1942%" y="181" width="1.2089%" height="15" fill="rgb(237,13,1)" fg:x="32126" fg:w="605"/><text x="64.4872%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="65.4031%" y="181" width="1.2089%" height="15" fill="rgb(248,169,54)" fg:x="32731" fg:w="605"/><text x="65.6961%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="66.6120%" y="181" width="1.2089%" height="15" fill="rgb(210,185,5)" fg:x="33336" fg:w="605"/><text x="66.9050%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="67.8210%" y="181" width="1.3448%" height="15" fill="rgb(231,193,21)" fg:x="33941" fg:w="673"/><text x="68.1139%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="69.1658%" y="181" width="1.2828%" height="15" fill="rgb(211,194,8)" fg:x="34614" fg:w="642"/><text x="69.4587%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="70.4486%" y="181" width="1.2828%" height="15" fill="rgb(244,67,26)" fg:x="35256" fg:w="642"/><text x="70.7416%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="71.7314%" y="181" width="1.2828%" height="15" fill="rgb(205,197,16)" fg:x="35898" fg:w="642"/><text x="72.0244%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="73.0143%" y="181" width="1.2828%" height="15" fill="rgb(249,144,31)" fg:x="36540" fg:w="642"/><text x="73.3073%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="74.2971%" y="181" width="1.2828%" height="15" fill="rgb(218,14,35)" fg:x="37182" fg:w="642"/><text x="74.5901%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="75.5800%" y="181" width="1.3448%" height="15" fill="rgb(217,33,0)" fg:x="37824" fg:w="673"/><text x="75.8729%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="76.9248%" y="181" width="1.3448%" height="15" fill="rgb(211,52,40)" fg:x="38497" fg:w="673"/><text x="77.2177%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="78.2696%" y="181" width="1.2828%" height="15" fill="rgb(244,83,1)" fg:x="39170" fg:w="642"/><text x="78.5625%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="79.5524%" y="181" width="1.3448%" height="15" fill="rgb(223,134,51)" fg:x="39812" fg:w="673"/><text x="79.8454%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (704 instructions, 1.41%)</title><rect x="80.8972%" y="181" width="1.4067%" height="15" fill="rgb(216,146,3)" fg:x="40485" fg:w="704"/><text x="81.1902%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="82.3039%" y="181" width="1.2828%" height="15" fill="rgb(248,58,37)" fg:x="41189" fg:w="642"/><text x="82.5969%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="83.5868%" y="181" width="1.2828%" height="15" fill="rgb(244,89,39)" fg:x="41831" fg:w="642"/><text x="83.8797%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="84.8696%" y="181" width="1.2828%" height="15" fill="rgb(244,51,48)" fg:x="42473" fg:w="642"/><text x="85.1626%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="86.1525%" y="181" width="1.2828%" height="15" fill="rgb(236,179,30)" fg:x="43115" fg:w="642"/><text x="86.4454%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="87.4353%" y="181" width="1.2828%" height="15" fill="rgb(237,135,15)" fg:x="43757" fg:w="642"/><text x="87.7283%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="88.7182%" y="181" width="1.2709%" height="15" fill="rgb(233,10,40)" fg:x="44399" fg:w="636"/><text x="89.0111%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="89.9890%" y="181" width="1.2828%" height="15" fill="rgb(205,143,4)" fg:x="45035" fg:w="642"/><text x="90.2820%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="91.2719%" y="181" width="1.2828%" height="15" fill="rgb(218,107,9)" fg:x="45677" fg:w="642"/><text x="91.5648%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="92.5547%" y="149" width="0.0280%" height="15" fill="rgb(245,156,11)" fg:x="46319" fg:w="14"/><text x="92.8477%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="92.5827%" y="117" width="0.1239%" height="15" fill="rgb(220,221,16)" fg:x="46333" fg:w="62"/><text x="92.8756%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (156 instructions, 0.31%)</title><rect x="92.5827%" y="133" width="0.3117%" height="15" fill="rgb(222,94,30)" fg:x="46333" fg:w="156"/><text x="92.8756%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 0.38%)</title><rect x="92.5827%" y="149" width="0.3817%" height="15" fill="rgb(243,51,40)" fg:x="46333" fg:w="191"/><text x="92.8756%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.9643%" y="149" width="0.3037%" height="15" fill="rgb(230,131,51)" fg:x="46524" fg:w="152"/><text x="93.2573%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (537 instructions, 1.07%)</title><rect x="92.5547%" y="165" width="1.0730%" height="15" fill="rgb(250,132,7)" fg:x="46319" fg:w="537"/><text x="92.8477%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.6277%" y="149" width="1.0351%" height="15" fill="rgb(239,171,24)" fg:x="46856" fg:w="518"/><text x="93.9207%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.6628%" y="101" width="0.1659%" height="15" fill="rgb(218,185,14)" fg:x="47374" fg:w="83"/><text x="94.9558%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.6628%" y="117" width="0.2518%" height="15" fill="rgb(206,155,53)" fg:x="47374" fg:w="126"/><text x="94.9558%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.41%)</title><rect x="94.6628%" y="133" width="0.4096%" height="15" fill="rgb(251,96,50)" fg:x="47374" fg:w="205"/><text x="94.9558%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0724%" y="133" width="0.0300%" height="15" fill="rgb(216,223,25)" fg:x="47579" fg:w="15"/><text x="95.3654%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.1024%" y="133" width="0.0300%" height="15" fill="rgb(248,160,10)" fg:x="47594" fg:w="15"/><text x="95.3954%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.85%)</title><rect x="94.6628%" y="149" width="0.8452%" height="15" fill="rgb(234,82,21)" fg:x="47374" fg:w="423"/><text x="94.9558%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.5080%" y="149" width="1.0311%" height="15" fill="rgb(218,229,41)" fg:x="47797" fg:w="516"/><text x="95.8010%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.5391%" y="149" width="0.0140%" height="15" fill="rgb(217,80,46)" fg:x="48313" fg:w="7"/><text x="96.8321%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 3.11%)</title><rect x="93.6277%" y="165" width="3.1112%" height="15" fill="rgb(205,179,28)" fg:x="46856" fg:w="1557"/><text x="93.9207%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="96.7389%" y="165" width="0.0120%" height="15" fill="rgb(208,28,39)" fg:x="48413" fg:w="6"/><text x="97.0319%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.7509%" y="165" width="0.1199%" height="15" fill="rgb(236,67,46)" fg:x="48419" fg:w="60"/><text x="97.0439%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,766 instructions, 5.53%)</title><rect x="92.5547%" y="181" width="5.5270%" height="15" fill="rgb(241,178,27)" fg:x="46319" fg:w="2766"/><text x="92.8477%" y="191.50">ic_cd..</text></g><g><title>heap::batch_remove_7_::{{closure}} (49,501 instructions, 98.91%)</title><rect x="0.3797%" y="197" width="98.9130%" height="15" fill="rgb(242,65,8)" fg:x="190" fg:w="49501"/><text x="0.6726%" y="207.50">heap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.2926%" y="197" width="0.0280%" height="15" fill="rgb(222,124,32)" fg:x="49691" fg:w="14"/><text x="99.5856%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="99.3226%" y="197" width="0.1718%" height="15" fill="rgb(223,133,36)" fg:x="49706" fg:w="86"/><text x="99.6156%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.22%)</title><rect x="99.4945%" y="197" width="0.2178%" height="15" fill="rgb(238,25,35)" fg:x="49792" fg:w="109"/><text x="99.7874%" y="207.50"></text></g><g><title>all (50,045 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,144,44)" fg:x="0" fg:w="50045"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (50,045 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(208,61,2)" fg:x="0" fg:w="50045"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>