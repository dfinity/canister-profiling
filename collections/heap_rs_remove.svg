<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="46075"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0412%" height="15" fill="rgb(253,138,26)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="0.0412%" y="197" width="0.1649%" height="15" fill="rgb(233,61,26)" fg:x="19" fg:w="76"/><text x="0.3342%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="0.2062%" y="197" width="0.1649%" height="15" fill="rgb(244,135,31)" fg:x="95" fg:w="76"/><text x="0.4992%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="0.3711%" y="165" width="0.1649%" height="15" fill="rgb(245,203,14)" fg:x="171" fg:w="76"/><text x="0.6641%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="0.5361%" y="149" width="0.1541%" height="15" fill="rgb(227,38,45)" fg:x="247" fg:w="71"/><text x="0.8291%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="0.6902%" y="149" width="0.8681%" height="15" fill="rgb(251,1,18)" fg:x="318" fg:w="400"/><text x="0.9831%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="1.5583%" y="149" width="0.1845%" height="15" fill="rgb(244,187,24)" fg:x="718" fg:w="85"/><text x="1.8513%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.7428%" y="149" width="0.1172%" height="15" fill="rgb(210,7,52)" fg:x="803" fg:w="54"/><text x="2.0358%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8600%" y="149" width="0.1172%" height="15" fill="rgb(211,137,4)" fg:x="857" fg:w="54"/><text x="2.1530%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9772%" y="149" width="0.1172%" height="15" fill="rgb(245,12,14)" fg:x="911" fg:w="54"/><text x="2.2702%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.0944%" y="149" width="0.1172%" height="15" fill="rgb(231,63,0)" fg:x="965" fg:w="54"/><text x="2.3874%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="2.2116%" y="149" width="0.1541%" height="15" fill="rgb(243,113,20)" fg:x="1019" fg:w="71"/><text x="2.5046%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="2.3657%" y="149" width="0.1411%" height="15" fill="rgb(244,174,28)" fg:x="1090" fg:w="65"/><text x="2.6587%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="2.5068%" y="149" width="0.8681%" height="15" fill="rgb(218,99,26)" fg:x="1155" fg:w="400"/><text x="2.7998%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.3749%" y="149" width="0.0347%" height="15" fill="rgb(215,215,37)" fg:x="1555" fg:w="16"/><text x="3.6679%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="3.4097%" y="133" width="0.1649%" height="15" fill="rgb(234,146,39)" fg:x="1571" fg:w="76"/><text x="3.7026%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="3.5746%" y="101" width="0.1302%" height="15" fill="rgb(212,103,41)" fg:x="1647" fg:w="60"/><text x="3.8676%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.18%)</title><rect x="3.5746%" y="117" width="0.1845%" height="15" fill="rgb(222,139,22)" fg:x="1647" fg:w="85"/><text x="3.8676%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.7591%" y="69" width="0.0195%" height="15" fill="rgb(248,165,14)" fg:x="1732" fg:w="9"/><text x="4.0521%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.7786%" y="53" width="0.0651%" height="15" fill="rgb(246,160,7)" fg:x="1741" fg:w="30"/><text x="4.0716%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.7786%" y="69" width="0.1194%" height="15" fill="rgb(234,166,29)" fg:x="1741" fg:w="55"/><text x="4.0716%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="3.7591%" y="85" width="0.2561%" height="15" fill="rgb(238,42,4)" fg:x="1732" fg:w="118"/><text x="4.0521%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="3.7591%" y="101" width="0.3711%" height="15" fill="rgb(206,182,36)" fg:x="1732" fg:w="171"/><text x="4.0521%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="3.7591%" y="117" width="0.3820%" height="15" fill="rgb(220,188,27)" fg:x="1732" fg:w="176"/><text x="4.0521%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="3.5746%" y="133" width="0.8074%" height="15" fill="rgb(236,40,21)" fg:x="1647" fg:w="372"/><text x="3.8676%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="3.4097%" y="149" width="1.2892%" height="15" fill="rgb(212,101,48)" fg:x="1571" fg:w="594"/><text x="3.7026%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="4.6989%" y="149" width="0.1845%" height="15" fill="rgb(207,175,48)" fg:x="2165" fg:w="85"/><text x="4.9918%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="4.8833%" y="149" width="0.1194%" height="15" fill="rgb(209,225,13)" fg:x="2250" fg:w="55"/><text x="5.1763%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="5.0027%" y="149" width="0.1432%" height="15" fill="rgb(233,176,17)" fg:x="2305" fg:w="66"/><text x="5.2957%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="5.1460%" y="149" width="0.1411%" height="15" fill="rgb(250,119,22)" fg:x="2371" fg:w="65"/><text x="5.4389%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.87%)</title><rect x="5.2870%" y="133" width="0.8681%" height="15" fill="rgb(210,93,28)" fg:x="2436" fg:w="400"/><text x="5.5800%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.1552%" y="133" width="0.0347%" height="15" fill="rgb(207,157,40)" fg:x="2836" fg:w="16"/><text x="6.4482%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="6.1899%" y="117" width="0.1649%" height="15" fill="rgb(237,131,50)" fg:x="2852" fg:w="76"/><text x="6.4829%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="6.3549%" y="85" width="0.1302%" height="15" fill="rgb(233,155,46)" fg:x="2928" fg:w="60"/><text x="6.6478%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.18%)</title><rect x="6.3549%" y="101" width="0.1845%" height="15" fill="rgb(213,4,15)" fg:x="2928" fg:w="85"/><text x="6.6478%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.5393%" y="53" width="0.0195%" height="15" fill="rgb(253,142,10)" fg:x="3013" fg:w="9"/><text x="6.8323%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.5589%" y="37" width="0.0651%" height="15" fill="rgb(209,83,28)" fg:x="3022" fg:w="30"/><text x="6.8518%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.5589%" y="53" width="0.1194%" height="15" fill="rgb(238,10,33)" fg:x="3022" fg:w="55"/><text x="6.8518%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="6.5393%" y="69" width="0.2561%" height="15" fill="rgb(211,107,26)" fg:x="3013" fg:w="118"/><text x="6.8323%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="6.5393%" y="85" width="0.3711%" height="15" fill="rgb(242,90,23)" fg:x="3013" fg:w="171"/><text x="6.8323%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="6.5393%" y="101" width="0.3820%" height="15" fill="rgb(237,175,41)" fg:x="3013" fg:w="176"/><text x="6.8323%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="6.3549%" y="117" width="0.8074%" height="15" fill="rgb(208,1,44)" fg:x="2928" fg:w="372"/><text x="6.6478%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.29%)</title><rect x="6.1899%" y="133" width="1.2892%" height="15" fill="rgb(214,40,47)" fg:x="2852" fg:w="594"/><text x="6.4829%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.18%)</title><rect x="7.4791%" y="133" width="0.1845%" height="15" fill="rgb(209,214,41)" fg:x="3446" fg:w="85"/><text x="7.7721%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.6636%" y="133" width="0.1194%" height="15" fill="rgb(238,87,40)" fg:x="3531" fg:w="55"/><text x="7.9566%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.15%)</title><rect x="7.7830%" y="117" width="0.1541%" height="15" fill="rgb(242,203,4)" fg:x="3586" fg:w="71"/><text x="8.0759%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.20%)</title><rect x="7.9371%" y="117" width="0.1975%" height="15" fill="rgb(206,228,8)" fg:x="3657" fg:w="91"/><text x="8.2300%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="8.1346%" y="117" width="0.1432%" height="15" fill="rgb(221,146,3)" fg:x="3748" fg:w="66"/><text x="8.4275%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.62%)</title><rect x="7.7830%" y="133" width="0.6229%" height="15" fill="rgb(224,18,49)" fg:x="3586" fg:w="287"/><text x="8.0759%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="8.4059%" y="133" width="0.1649%" height="15" fill="rgb(219,137,28)" fg:x="3873" fg:w="76"/><text x="8.6988%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 3.72%)</title><rect x="5.2870%" y="149" width="3.7200%" height="15" fill="rgb(209,160,54)" fg:x="2436" fg:w="1714"/><text x="5.5800%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.14%)</title><rect x="9.0071%" y="149" width="0.1432%" height="15" fill="rgb(252,96,48)" fg:x="4150" fg:w="66"/><text x="9.3000%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1503%" y="149" width="0.0282%" height="15" fill="rgb(225,206,6)" fg:x="4216" fg:w="13"/><text x="9.4433%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1785%" y="149" width="0.0282%" height="15" fill="rgb(251,31,37)" fg:x="4229" fg:w="13"/><text x="9.4715%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.2067%" y="149" width="0.0152%" height="15" fill="rgb(249,104,50)" fg:x="4242" fg:w="7"/><text x="9.4997%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.2219%" y="149" width="0.0326%" height="15" fill="rgb(243,98,2)" fg:x="4249" fg:w="15"/><text x="9.5149%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="9.2545%" y="133" width="0.1649%" height="15" fill="rgb(235,96,18)" fg:x="4264" fg:w="76"/><text x="9.5474%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.35%)</title><rect x="9.2545%" y="149" width="0.3451%" height="15" fill="rgb(215,200,19)" fg:x="4264" fg:w="159"/><text x="9.5474%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="9.5996%" y="117" width="0.1649%" height="15" fill="rgb(233,100,25)" fg:x="4423" fg:w="76"/><text x="9.8925%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="9.5996%" y="133" width="0.2496%" height="15" fill="rgb(220,134,6)" fg:x="4423" fg:w="115"/><text x="9.8925%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 instructions, 0.40%)</title><rect x="9.5996%" y="149" width="0.3972%" height="15" fill="rgb(238,80,4)" fg:x="4423" fg:w="183"/><text x="9.8925%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="9.9967%" y="149" width="0.1649%" height="15" fill="rgb(253,148,50)" fg:x="4606" fg:w="76"/><text x="10.2897%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.1617%" y="149" width="0.1758%" height="15" fill="rgb(233,169,36)" fg:x="4682" fg:w="81"/><text x="10.4547%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="10.3375%" y="149" width="0.1649%" height="15" fill="rgb(231,40,30)" fg:x="4763" fg:w="76"/><text x="10.6305%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="10.5024%" y="149" width="0.1649%" height="15" fill="rgb(218,11,22)" fg:x="4839" fg:w="76"/><text x="10.7954%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.6717%" y="149" width="0.1758%" height="15" fill="rgb(230,64,33)" fg:x="4917" fg:w="81"/><text x="10.9647%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="10.8475%" y="149" width="0.8269%" height="15" fill="rgb(230,229,34)" fg:x="4998" fg:w="381"/><text x="11.1405%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.83%)</title><rect x="11.6744%" y="149" width="0.8269%" height="15" fill="rgb(228,153,17)" fg:x="5379" fg:w="381"/><text x="11.9674%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,428 instructions, 13.95%)</title><rect x="0.5361%" y="165" width="13.9512%" height="15" fill="rgb(237,117,35)" fg:x="247" fg:w="6428"/><text x="0.8291%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (336 instructions, 0.73%)</title><rect x="14.4872%" y="165" width="0.7292%" height="15" fill="rgb(205,98,33)" fg:x="6675" fg:w="336"/><text x="14.7802%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.2165%" y="149" width="0.0109%" height="15" fill="rgb(237,38,28)" fg:x="7011" fg:w="5"/><text x="15.5095%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="15.2165%" y="165" width="0.0846%" height="15" fill="rgb(230,135,34)" fg:x="7011" fg:w="39"/><text x="15.5095%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="15.3011%" y="165" width="0.1649%" height="15" fill="rgb(248,154,44)" fg:x="7050" fg:w="76"/><text x="15.5941%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.4661%" y="149" width="0.0109%" height="15" fill="rgb(243,129,14)" fg:x="7126" fg:w="5"/><text x="15.7591%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="15.4769%" y="133" width="0.1150%" height="15" fill="rgb(211,163,20)" fg:x="7131" fg:w="53"/><text x="15.7699%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="15.5920%" y="133" width="0.1932%" height="15" fill="rgb(230,177,28)" fg:x="7184" fg:w="89"/><text x="15.8849%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="15.7851%" y="133" width="0.3494%" height="15" fill="rgb(241,207,21)" fg:x="7273" fg:w="161"/><text x="16.0781%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.17%)</title><rect x="15.4769%" y="149" width="1.1720%" height="15" fill="rgb(247,217,10)" fg:x="7131" fg:w="540"/><text x="15.7699%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.64%)</title><rect x="15.4661%" y="165" width="1.6386%" height="15" fill="rgb(216,24,52)" fg:x="7126" fg:w="755"/><text x="15.7591%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="17.1047%" y="165" width="0.1649%" height="15" fill="rgb(212,115,46)" fg:x="7881" fg:w="76"/><text x="17.3977%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.2697%" y="149" width="0.0109%" height="15" fill="rgb(239,37,17)" fg:x="7957" fg:w="5"/><text x="17.5626%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="17.2805%" y="133" width="0.1150%" height="15" fill="rgb(229,152,31)" fg:x="7962" fg:w="53"/><text x="17.5735%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.19%)</title><rect x="17.3956%" y="133" width="0.1932%" height="15" fill="rgb(213,181,16)" fg:x="8015" fg:w="89"/><text x="17.6885%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.35%)</title><rect x="17.5887%" y="133" width="0.3494%" height="15" fill="rgb(206,123,30)" fg:x="8104" fg:w="161"/><text x="17.8817%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.17%)</title><rect x="17.2805%" y="149" width="1.1720%" height="15" fill="rgb(218,77,23)" fg:x="7962" fg:w="540"/><text x="17.5735%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="18.4525%" y="149" width="0.1476%" height="15" fill="rgb(243,228,17)" fg:x="8502" fg:w="68"/><text x="18.7455%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="18.6001%" y="133" width="0.1758%" height="15" fill="rgb(240,17,39)" fg:x="8570" fg:w="81"/><text x="18.8931%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.23%)</title><rect x="18.6001%" y="149" width="0.2344%" height="15" fill="rgb(205,49,16)" fg:x="8570" fg:w="108"/><text x="18.8931%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.93%)</title><rect x="17.2697%" y="165" width="1.9295%" height="15" fill="rgb(217,63,17)" fg:x="7957" fg:w="889"/><text x="17.5626%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="19.1991%" y="117" width="0.1150%" height="15" fill="rgb(206,30,39)" fg:x="8846" fg:w="53"/><text x="19.4921%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.17%)</title><rect x="19.1991%" y="133" width="0.1715%" height="15" fill="rgb(218,182,21)" fg:x="8846" fg:w="79"/><text x="19.4921%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.63%)</title><rect x="19.1991%" y="149" width="0.6337%" height="15" fill="rgb(214,104,34)" fg:x="8846" fg:w="292"/><text x="19.4921%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.03%)</title><rect x="19.8329%" y="149" width="0.0326%" height="15" fill="rgb(207,33,24)" fg:x="9138" fg:w="15"/><text x="20.1258%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.8654%" y="149" width="0.0239%" height="15" fill="rgb(250,116,8)" fg:x="9153" fg:w="11"/><text x="20.1584%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.04%)</title><rect x="19.1991%" y="165" width="1.0374%" height="15" fill="rgb(209,213,31)" fg:x="8846" fg:w="478"/><text x="19.4921%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.07%)</title><rect x="20.2366%" y="165" width="0.0716%" height="15" fill="rgb(254,81,38)" fg:x="9324" fg:w="33"/><text x="20.5295%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.3082%" y="149" width="0.2670%" height="15" fill="rgb(241,215,37)" fg:x="9357" fg:w="123"/><text x="20.6012%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.6337%" y="149" width="0.2670%" height="15" fill="rgb(239,113,42)" fg:x="9507" fg:w="123"/><text x="20.9267%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.65%)</title><rect x="20.3082%" y="165" width="0.6511%" height="15" fill="rgb(209,131,11)" fg:x="9357" fg:w="300"/><text x="20.6012%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="20.9593%" y="149" width="0.0608%" height="15" fill="rgb(253,151,40)" fg:x="9657" fg:w="28"/><text x="21.2523%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.21%)</title><rect x="20.9593%" y="165" width="0.2105%" height="15" fill="rgb(217,86,47)" fg:x="9657" fg:w="97"/><text x="21.2523%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.1698%" y="165" width="0.0239%" height="15" fill="rgb(216,181,17)" fg:x="9754" fg:w="11"/><text x="21.4628%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.1937%" y="165" width="0.0239%" height="15" fill="rgb(221,123,12)" fg:x="9765" fg:w="11"/><text x="21.4867%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.2176%" y="165" width="0.0239%" height="15" fill="rgb(236,47,33)" fg:x="9776" fg:w="11"/><text x="21.5105%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.89%)</title><rect x="21.2415%" y="165" width="0.8920%" height="15" fill="rgb(218,61,3)" fg:x="9787" fg:w="411"/><text x="21.5344%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="22.1335%" y="133" width="0.0260%" height="15" fill="rgb(249,102,46)" fg:x="10198" fg:w="12"/><text x="22.4264%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.36%)</title><rect x="22.1595%" y="133" width="0.3646%" height="15" fill="rgb(218,32,49)" fg:x="10210" fg:w="168"/><text x="22.4525%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="22.5241%" y="101" width="0.2062%" height="15" fill="rgb(220,159,51)" fg:x="10378" fg:w="95"/><text x="22.8171%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (241 instructions, 0.52%)</title><rect x="22.5241%" y="117" width="0.5231%" height="15" fill="rgb(207,150,13)" fg:x="10378" fg:w="241"/><text x="22.8171%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (268 instructions, 0.58%)</title><rect x="22.5241%" y="133" width="0.5817%" height="15" fill="rgb(249,101,31)" fg:x="10378" fg:w="268"/><text x="22.8171%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.1058%" y="133" width="0.0239%" height="15" fill="rgb(217,97,0)" fg:x="10646" fg:w="11"/><text x="23.3988%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (501 instructions, 1.09%)</title><rect x="22.1335%" y="149" width="1.0874%" height="15" fill="rgb(216,198,49)" fg:x="10198" fg:w="501"/><text x="22.4264%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 1.16%)</title><rect x="22.1335%" y="165" width="1.1612%" height="15" fill="rgb(254,136,27)" fg:x="10198" fg:w="535"/><text x="22.4264%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="23.2946%" y="149" width="0.1172%" height="15" fill="rgb(244,35,45)" fg:x="10733" fg:w="54"/><text x="23.5876%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="23.4118%" y="149" width="0.2062%" height="15" fill="rgb(212,45,5)" fg:x="10787" fg:w="95"/><text x="23.7048%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.50%)</title><rect x="23.2946%" y="165" width="0.5014%" height="15" fill="rgb(238,175,21)" fg:x="10733" fg:w="231"/><text x="23.5876%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,184 instructions, 24.27%)</title><rect x="0.3711%" y="181" width="24.2735%" height="15" fill="rgb(248,77,31)" fg:x="171" fg:w="11184"/><text x="0.6641%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="24.6446%" y="181" width="1.4064%" height="15" fill="rgb(230,20,28)" fg:x="11355" fg:w="648"/><text x="24.9376%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="26.0510%" y="181" width="1.3239%" height="15" fill="rgb(246,183,3)" fg:x="12003" fg:w="610"/><text x="26.3440%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="27.3749%" y="181" width="1.4693%" height="15" fill="rgb(225,3,5)" fg:x="12613" fg:w="677"/><text x="27.6679%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="28.8443%" y="181" width="1.4064%" height="15" fill="rgb(228,1,34)" fg:x="13290" fg:w="648"/><text x="29.1372%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="30.2507%" y="181" width="1.3239%" height="15" fill="rgb(238,23,15)" fg:x="13938" fg:w="610"/><text x="30.5436%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="31.5746%" y="181" width="1.4693%" height="15" fill="rgb(233,217,12)" fg:x="14548" fg:w="677"/><text x="31.8676%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="33.0440%" y="181" width="1.4064%" height="15" fill="rgb(231,11,45)" fg:x="15225" fg:w="648"/><text x="33.3369%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="34.4504%" y="181" width="1.4064%" height="15" fill="rgb(210,66,2)" fg:x="15873" fg:w="648"/><text x="34.7433%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="35.8568%" y="181" width="1.4064%" height="15" fill="rgb(235,2,31)" fg:x="16521" fg:w="648"/><text x="36.1497%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.53%)</title><rect x="37.2632%" y="181" width="1.5323%" height="15" fill="rgb(243,102,11)" fg:x="17169" fg:w="706"/><text x="37.5561%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="38.7954%" y="181" width="1.4064%" height="15" fill="rgb(208,227,36)" fg:x="17875" fg:w="648"/><text x="39.0884%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="40.2018%" y="181" width="1.4064%" height="15" fill="rgb(229,40,32)" fg:x="18523" fg:w="648"/><text x="40.4948%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="41.6082%" y="181" width="1.4064%" height="15" fill="rgb(236,179,53)" fg:x="19171" fg:w="648"/><text x="41.9012%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (735 instructions, 1.60%)</title><rect x="43.0147%" y="181" width="1.5952%" height="15" fill="rgb(244,124,24)" fg:x="19819" fg:w="735"/><text x="43.3076%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (639 instructions, 1.39%)</title><rect x="44.6099%" y="181" width="1.3869%" height="15" fill="rgb(244,100,27)" fg:x="20554" fg:w="639"/><text x="44.9028%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="45.9967%" y="181" width="1.4693%" height="15" fill="rgb(242,91,13)" fg:x="21193" fg:w="677"/><text x="46.2897%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="47.4661%" y="181" width="1.4064%" height="15" fill="rgb(219,157,11)" fg:x="21870" fg:w="648"/><text x="47.7591%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (639 instructions, 1.39%)</title><rect x="48.8725%" y="181" width="1.3869%" height="15" fill="rgb(242,180,35)" fg:x="22518" fg:w="639"/><text x="49.1655%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (639 instructions, 1.39%)</title><rect x="50.2594%" y="181" width="1.3869%" height="15" fill="rgb(215,34,15)" fg:x="23157" fg:w="639"/><text x="50.5523%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="51.6462%" y="181" width="1.4064%" height="15" fill="rgb(216,90,52)" fg:x="23796" fg:w="648"/><text x="51.9392%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="53.0526%" y="181" width="1.4064%" height="15" fill="rgb(229,58,34)" fg:x="24444" fg:w="648"/><text x="53.3456%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="54.4590%" y="181" width="1.4693%" height="15" fill="rgb(210,133,43)" fg:x="25092" fg:w="677"/><text x="54.7520%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="55.9284%" y="181" width="1.3239%" height="15" fill="rgb(251,208,20)" fg:x="25769" fg:w="610"/><text x="56.2213%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.53%)</title><rect x="57.2523%" y="181" width="1.5323%" height="15" fill="rgb(238,55,32)" fg:x="26379" fg:w="706"/><text x="57.5453%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="58.7846%" y="181" width="1.4064%" height="15" fill="rgb(229,180,35)" fg:x="27085" fg:w="648"/><text x="59.0776%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="60.1910%" y="181" width="1.4693%" height="15" fill="rgb(213,23,48)" fg:x="27733" fg:w="677"/><text x="60.4840%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="61.6603%" y="181" width="1.4064%" height="15" fill="rgb(230,103,23)" fg:x="28410" fg:w="648"/><text x="61.9533%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="63.0667%" y="181" width="1.4693%" height="15" fill="rgb(219,88,47)" fg:x="29058" fg:w="677"/><text x="63.3597%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="64.5361%" y="181" width="1.4064%" height="15" fill="rgb(252,196,39)" fg:x="29735" fg:w="648"/><text x="64.8291%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="65.9425%" y="181" width="1.3239%" height="15" fill="rgb(235,205,30)" fg:x="30383" fg:w="610"/><text x="66.2355%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="67.2664%" y="181" width="1.4693%" height="15" fill="rgb(244,35,13)" fg:x="30993" fg:w="677"/><text x="67.5594%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="68.7358%" y="181" width="1.4064%" height="15" fill="rgb(214,229,54)" fg:x="31670" fg:w="648"/><text x="69.0287%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="70.1422%" y="181" width="1.4064%" height="15" fill="rgb(214,213,18)" fg:x="32318" fg:w="648"/><text x="70.4351%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="71.5486%" y="181" width="1.3239%" height="15" fill="rgb(237,25,18)" fg:x="32966" fg:w="610"/><text x="71.8415%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="72.8725%" y="181" width="1.4693%" height="15" fill="rgb(252,200,40)" fg:x="33576" fg:w="677"/><text x="73.1655%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="74.3418%" y="181" width="1.4693%" height="15" fill="rgb(247,75,28)" fg:x="34253" fg:w="677"/><text x="74.6348%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="75.8112%" y="181" width="1.3239%" height="15" fill="rgb(221,154,44)" fg:x="34930" fg:w="610"/><text x="76.1041%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.53%)</title><rect x="77.1351%" y="181" width="1.5323%" height="15" fill="rgb(246,213,44)" fg:x="35540" fg:w="706"/><text x="77.4281%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="78.6674%" y="181" width="1.3239%" height="15" fill="rgb(252,224,1)" fg:x="36246" fg:w="610"/><text x="78.9604%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (735 instructions, 1.60%)</title><rect x="79.9913%" y="181" width="1.5952%" height="15" fill="rgb(207,222,17)" fg:x="36856" fg:w="735"/><text x="80.2843%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (610 instructions, 1.32%)</title><rect x="81.5865%" y="181" width="1.3239%" height="15" fill="rgb(231,151,14)" fg:x="37591" fg:w="610"/><text x="81.8795%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (735 instructions, 1.60%)</title><rect x="82.9105%" y="181" width="1.5952%" height="15" fill="rgb(208,106,50)" fg:x="38201" fg:w="735"/><text x="83.2034%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.53%)</title><rect x="84.5057%" y="181" width="1.5323%" height="15" fill="rgb(238,225,46)" fg:x="38936" fg:w="706"/><text x="84.7987%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (735 instructions, 1.60%)</title><rect x="86.0380%" y="181" width="1.5952%" height="15" fill="rgb(248,217,20)" fg:x="39642" fg:w="735"/><text x="86.3310%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (677 instructions, 1.47%)</title><rect x="87.6332%" y="181" width="1.4693%" height="15" fill="rgb(244,27,2)" fg:x="40377" fg:w="677"/><text x="87.9262%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="89.1026%" y="181" width="1.4064%" height="15" fill="rgb(248,204,0)" fg:x="41054" fg:w="648"/><text x="89.3955%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (706 instructions, 1.53%)</title><rect x="90.5090%" y="181" width="1.5323%" height="15" fill="rgb(229,229,16)" fg:x="41702" fg:w="706"/><text x="90.8019%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (668 instructions, 1.45%)</title><rect x="92.0412%" y="181" width="1.4498%" height="15" fill="rgb(212,119,50)" fg:x="42408" fg:w="668"/><text x="92.3342%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="93.4910%" y="181" width="1.4064%" height="15" fill="rgb(210,229,30)" fg:x="43076" fg:w="648"/><text x="93.7840%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (648 instructions, 1.41%)</title><rect x="94.8974%" y="181" width="1.4064%" height="15" fill="rgb(245,185,17)" fg:x="43724" fg:w="648"/><text x="95.1904%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="96.3039%" y="149" width="0.0109%" height="15" fill="rgb(213,33,6)" fg:x="44372" fg:w="5"/><text x="96.5968%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="96.3147%" y="117" width="0.1172%" height="15" fill="rgb(224,35,46)" fg:x="44377" fg:w="54"/><text x="96.6077%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.29%)</title><rect x="96.3147%" y="133" width="0.2930%" height="15" fill="rgb(205,113,22)" fg:x="44377" fg:w="135"/><text x="96.6077%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.35%)</title><rect x="96.3147%" y="149" width="0.3516%" height="15" fill="rgb(242,113,28)" fg:x="44377" fg:w="162"/><text x="96.6077%" y="159.50"></text></g><g><title>memset (136 instructions, 0.30%)</title><rect x="96.6663%" y="149" width="0.2952%" height="15" fill="rgb(226,17,3)" fg:x="44539" fg:w="136"/><text x="96.9593%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 1.00%)</title><rect x="96.3039%" y="165" width="1.0027%" height="15" fill="rgb(242,185,31)" fg:x="44372" fg:w="462"/><text x="96.5968%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="97.3066%" y="149" width="0.0695%" height="15" fill="rgb(251,161,16)" fg:x="44834" fg:w="32"/><text x="97.5995%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.16%)</title><rect x="97.3760%" y="117" width="0.1649%" height="15" fill="rgb(251,160,12)" fg:x="44866" fg:w="76"/><text x="97.6690%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.25%)</title><rect x="97.3760%" y="133" width="0.2496%" height="15" fill="rgb(221,206,23)" fg:x="44866" fg:w="115"/><text x="97.6690%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (180 instructions, 0.39%)</title><rect x="97.3760%" y="149" width="0.3907%" height="15" fill="rgb(229,131,30)" fg:x="44866" fg:w="180"/><text x="97.6690%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7667%" y="149" width="0.0239%" height="15" fill="rgb(243,35,37)" fg:x="45046" fg:w="11"/><text x="98.0597%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7906%" y="149" width="0.0239%" height="15" fill="rgb(251,43,2)" fg:x="45057" fg:w="11"/><text x="98.0835%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="97.8144%" y="149" width="0.0651%" height="15" fill="rgb(232,99,38)" fg:x="45068" fg:w="30"/><text x="98.1074%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="97.8795%" y="149" width="0.0109%" height="15" fill="rgb(213,123,34)" fg:x="45098" fg:w="5"/><text x="98.1725%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (476 instructions, 1.03%)</title><rect x="97.3066%" y="165" width="1.0331%" height="15" fill="rgb(242,203,39)" fg:x="44834" fg:w="476"/><text x="97.5995%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.3397%" y="165" width="0.0109%" height="15" fill="rgb(223,137,10)" fg:x="45310" fg:w="5"/><text x="98.6326%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="98.3505%" y="165" width="0.1194%" height="15" fill="rgb(214,211,34)" fg:x="45315" fg:w="55"/><text x="98.6435%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,072 instructions, 2.33%)</title><rect x="96.3039%" y="181" width="2.3266%" height="15" fill="rgb(230,131,36)" fg:x="44372" fg:w="1072"/><text x="96.5968%" y="191.50">i..</text></g><g><title>heap::batch_remove_4_::{{closure}} (45,613 instructions, 99.00%)</title><rect x="0.3711%" y="197" width="98.9973%" height="15" fill="rgb(254,115,49)" fg:x="171" fg:w="45613"/><text x="0.6641%" y="207.50">heap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.3684%" y="197" width="0.0260%" height="15" fill="rgb(226,58,8)" fg:x="45784" fg:w="12"/><text x="99.6614%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="99.3945%" y="197" width="0.1758%" height="15" fill="rgb(220,193,5)" fg:x="45796" fg:w="81"/><text x="99.6874%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.22%)</title><rect x="99.5703%" y="197" width="0.2170%" height="15" fill="rgb(247,55,37)" fg:x="45877" fg:w="100"/><text x="99.8632%" y="207.50"></text></g><g><title>all (46,075 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,12,26)" fg:x="0" fg:w="46075"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (46,075 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,1,33)" fg:x="0" fg:w="46075"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>