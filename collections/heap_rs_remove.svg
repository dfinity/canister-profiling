<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="50044"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0480%" height="15" fill="rgb(220,57,45)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.0480%" y="197" width="0.1659%" height="15" fill="rgb(247,92,2)" fg:x="24" fg:w="83"/><text x="0.3409%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.2138%" y="197" width="0.1659%" height="15" fill="rgb(248,101,36)" fg:x="107" fg:w="83"/><text x="0.5068%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="0.3797%" y="165" width="0.1659%" height="15" fill="rgb(220,181,22)" fg:x="190" fg:w="83"/><text x="0.6726%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5455%" y="149" width="0.1639%" height="15" fill="rgb(239,27,28)" fg:x="273" fg:w="82"/><text x="0.8385%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7094%" y="133" width="0.0120%" height="15" fill="rgb(228,189,10)" fg:x="355" fg:w="6"/><text x="1.0023%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="0.7094%" y="149" width="0.8792%" height="15" fill="rgb(247,37,53)" fg:x="355" fg:w="440"/><text x="1.0023%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5886%" y="149" width="0.1898%" height="15" fill="rgb(209,163,15)" fg:x="795" fg:w="95"/><text x="1.8816%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7784%" y="149" width="0.1199%" height="15" fill="rgb(212,10,52)" fg:x="890" fg:w="60"/><text x="2.0714%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.8983%" y="149" width="0.1199%" height="15" fill="rgb(251,125,9)" fg:x="950" fg:w="60"/><text x="2.1913%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0182%" y="149" width="0.1199%" height="15" fill="rgb(215,104,39)" fg:x="1010" fg:w="60"/><text x="2.3112%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1381%" y="149" width="0.1199%" height="15" fill="rgb(251,83,28)" fg:x="1070" fg:w="60"/><text x="2.4311%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2580%" y="149" width="0.1639%" height="15" fill="rgb(236,186,5)" fg:x="1130" fg:w="82"/><text x="2.5510%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4219%" y="149" width="0.1399%" height="15" fill="rgb(251,27,23)" fg:x="1212" fg:w="70"/><text x="2.7148%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5617%" y="133" width="0.0120%" height="15" fill="rgb(243,196,54)" fg:x="1282" fg:w="6"/><text x="2.8547%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="2.5617%" y="149" width="0.8792%" height="15" fill="rgb(207,219,37)" fg:x="1282" fg:w="440"/><text x="2.8547%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4410%" y="149" width="0.0380%" height="15" fill="rgb(227,217,15)" fg:x="1722" fg:w="19"/><text x="3.7339%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="3.4789%" y="133" width="0.1659%" height="15" fill="rgb(249,3,28)" fg:x="1741" fg:w="83"/><text x="3.7719%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6448%" y="101" width="0.1339%" height="15" fill="rgb(248,166,37)" fg:x="1824" fg:w="67"/><text x="3.9378%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="3.6448%" y="117" width="0.1958%" height="15" fill="rgb(226,149,7)" fg:x="1824" fg:w="98"/><text x="3.9378%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8406%" y="69" width="0.0220%" height="15" fill="rgb(230,54,43)" fg:x="1922" fg:w="11"/><text x="4.1336%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8626%" y="53" width="0.0699%" height="15" fill="rgb(244,125,3)" fg:x="1933" fg:w="35"/><text x="4.1556%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="3.8626%" y="69" width="0.1319%" height="15" fill="rgb(245,69,16)" fg:x="1933" fg:w="66"/><text x="4.1556%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="3.8406%" y="85" width="0.2937%" height="15" fill="rgb(239,48,38)" fg:x="1922" fg:w="147"/><text x="4.1336%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="3.8406%" y="101" width="0.4236%" height="15" fill="rgb(248,79,49)" fg:x="1922" fg:w="212"/><text x="4.1336%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="3.8406%" y="117" width="0.4436%" height="15" fill="rgb(223,169,33)" fg:x="1922" fg:w="222"/><text x="4.1336%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="3.6448%" y="133" width="0.9212%" height="15" fill="rgb(252,150,38)" fg:x="1824" fg:w="461"/><text x="3.9378%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="3.4789%" y="149" width="1.3768%" height="15" fill="rgb(217,2,17)" fg:x="1741" fg:w="689"/><text x="3.7719%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8557%" y="149" width="0.1898%" height="15" fill="rgb(222,167,5)" fg:x="2430" fg:w="95"/><text x="5.1487%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0456%" y="149" width="0.1199%" height="15" fill="rgb(222,186,7)" fg:x="2525" fg:w="60"/><text x="5.3385%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1655%" y="149" width="0.1519%" height="15" fill="rgb(207,31,33)" fg:x="2585" fg:w="76"/><text x="5.4584%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3173%" y="149" width="0.1399%" height="15" fill="rgb(226,65,38)" fg:x="2661" fg:w="70"/><text x="5.6103%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4572%" y="117" width="0.0120%" height="15" fill="rgb(218,49,47)" fg:x="2731" fg:w="6"/><text x="5.7502%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.88%)</title><rect x="5.4572%" y="133" width="0.8792%" height="15" fill="rgb(213,143,6)" fg:x="2731" fg:w="440"/><text x="5.7502%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3364%" y="133" width="0.0380%" height="15" fill="rgb(240,141,4)" fg:x="3171" fg:w="19"/><text x="6.6294%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="6.3744%" y="117" width="0.1659%" height="15" fill="rgb(220,226,19)" fg:x="3190" fg:w="83"/><text x="6.6674%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5402%" y="85" width="0.1339%" height="15" fill="rgb(230,101,17)" fg:x="3273" fg:w="67"/><text x="6.8332%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.20%)</title><rect x="6.5402%" y="101" width="0.1958%" height="15" fill="rgb(245,81,4)" fg:x="3273" fg:w="98"/><text x="6.8332%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7361%" y="53" width="0.0220%" height="15" fill="rgb(208,192,46)" fg:x="3371" fg:w="11"/><text x="7.0290%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7581%" y="37" width="0.0699%" height="15" fill="rgb(217,222,0)" fg:x="3382" fg:w="35"/><text x="7.0510%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.13%)</title><rect x="6.7581%" y="53" width="0.1319%" height="15" fill="rgb(249,22,45)" fg:x="3382" fg:w="66"/><text x="7.0510%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.29%)</title><rect x="6.7361%" y="69" width="0.2937%" height="15" fill="rgb(214,130,20)" fg:x="3371" fg:w="147"/><text x="7.0290%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.42%)</title><rect x="6.7361%" y="85" width="0.4236%" height="15" fill="rgb(234,191,34)" fg:x="3371" fg:w="212"/><text x="7.0290%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.44%)</title><rect x="6.7361%" y="101" width="0.4436%" height="15" fill="rgb(227,0,32)" fg:x="3371" fg:w="222"/><text x="7.0290%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.92%)</title><rect x="6.5402%" y="117" width="0.9212%" height="15" fill="rgb(212,45,5)" fg:x="3273" fg:w="461"/><text x="6.8332%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 1.38%)</title><rect x="6.3744%" y="133" width="1.3768%" height="15" fill="rgb(209,17,18)" fg:x="3190" fg:w="689"/><text x="6.6674%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7512%" y="133" width="0.1898%" height="15" fill="rgb(212,95,51)" fg:x="3879" fg:w="95"/><text x="8.0441%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9410%" y="133" width="0.1199%" height="15" fill="rgb(232,119,24)" fg:x="3974" fg:w="60"/><text x="8.2340%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0609%" y="117" width="0.1639%" height="15" fill="rgb(207,24,40)" fg:x="4034" fg:w="82"/><text x="8.3539%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2248%" y="117" width="0.1898%" height="15" fill="rgb(231,9,11)" fg:x="4116" fg:w="95"/><text x="8.5177%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.4146%" y="117" width="0.1519%" height="15" fill="rgb(223,106,43)" fg:x="4211" fg:w="76"/><text x="8.7076%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0609%" y="133" width="0.6594%" height="15" fill="rgb(253,95,43)" fg:x="4034" fg:w="330"/><text x="8.3539%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7203%" y="133" width="0.1639%" height="15" fill="rgb(230,23,48)" fg:x="4364" fg:w="82"/><text x="9.0133%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 3.92%)</title><rect x="5.4572%" y="149" width="3.9166%" height="15" fill="rgb(215,102,34)" fg:x="2731" fg:w="1960"/><text x="5.7502%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3738%" y="149" width="0.1519%" height="15" fill="rgb(216,93,28)" fg:x="4691" fg:w="76"/><text x="9.6667%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5256%" y="149" width="0.0300%" height="15" fill="rgb(224,214,6)" fg:x="4767" fg:w="15"/><text x="9.8186%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5556%" y="149" width="0.0300%" height="15" fill="rgb(240,228,50)" fg:x="4782" fg:w="15"/><text x="9.8486%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.02%)</title><rect x="9.5856%" y="149" width="0.0180%" height="15" fill="rgb(236,173,22)" fg:x="4797" fg:w="9"/><text x="9.8785%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.04%)</title><rect x="9.6035%" y="149" width="0.0360%" height="15" fill="rgb(233,197,16)" fg:x="4806" fg:w="18"/><text x="9.8965%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.6395%" y="133" width="0.1659%" height="15" fill="rgb(213,53,23)" fg:x="4824" fg:w="83"/><text x="9.9325%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.36%)</title><rect x="9.6395%" y="149" width="0.3577%" height="15" fill="rgb(221,164,33)" fg:x="4824" fg:w="179"/><text x="9.9325%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="9.9972%" y="117" width="0.1659%" height="15" fill="rgb(238,220,43)" fg:x="5003" fg:w="83"/><text x="10.2902%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="9.9972%" y="133" width="0.2518%" height="15" fill="rgb(233,1,14)" fg:x="5003" fg:w="126"/><text x="10.2902%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.42%)</title><rect x="9.9972%" y="149" width="0.4156%" height="15" fill="rgb(211,90,53)" fg:x="5003" fg:w="208"/><text x="10.2902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.4128%" y="149" width="0.1659%" height="15" fill="rgb(235,91,53)" fg:x="5211" fg:w="83"/><text x="10.7058%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="10.5787%" y="149" width="0.1718%" height="15" fill="rgb(220,68,2)" fg:x="5294" fg:w="86"/><text x="10.8717%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.7505%" y="149" width="0.1659%" height="15" fill="rgb(216,105,49)" fg:x="5380" fg:w="83"/><text x="11.0435%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="10.9164%" y="149" width="0.1659%" height="15" fill="rgb(236,72,45)" fg:x="5463" fg:w="83"/><text x="11.2094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="11.0902%" y="149" width="0.1718%" height="15" fill="rgb(237,155,48)" fg:x="5550" fg:w="86"/><text x="11.3832%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="11.2621%" y="149" width="0.8552%" height="15" fill="rgb(236,212,47)" fg:x="5636" fg:w="428"/><text x="11.5551%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.86%)</title><rect x="12.1173%" y="149" width="0.8552%" height="15" fill="rgb(225,187,0)" fg:x="6064" fg:w="428"/><text x="12.4103%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,365 instructions, 14.72%)</title><rect x="0.5455%" y="165" width="14.7170%" height="15" fill="rgb(253,124,23)" fg:x="273" fg:w="7365"/><text x="0.8385%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (380 instructions, 0.76%)</title><rect x="15.2626%" y="165" width="0.7593%" height="15" fill="rgb(237,10,5)" fg:x="7638" fg:w="380"/><text x="15.5555%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.0219%" y="149" width="0.0280%" height="15" fill="rgb(229,78,53)" fg:x="8018" fg:w="14"/><text x="16.3149%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.13%)</title><rect x="16.0219%" y="165" width="0.1259%" height="15" fill="rgb(249,206,39)" fg:x="8018" fg:w="63"/><text x="16.3149%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="16.1478%" y="165" width="0.1659%" height="15" fill="rgb(207,89,31)" fg:x="8081" fg:w="83"/><text x="16.4408%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="16.3136%" y="149" width="0.0280%" height="15" fill="rgb(240,53,9)" fg:x="8164" fg:w="14"/><text x="16.6066%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="16.3416%" y="133" width="0.1179%" height="15" fill="rgb(215,123,20)" fg:x="8178" fg:w="59"/><text x="16.6346%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="16.4595%" y="133" width="0.1878%" height="15" fill="rgb(253,12,27)" fg:x="8237" fg:w="94"/><text x="16.7525%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="16.6474%" y="133" width="0.3457%" height="15" fill="rgb(239,208,31)" fg:x="8331" fg:w="173"/><text x="16.9403%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="16.3416%" y="149" width="1.1570%" height="15" fill="rgb(223,80,47)" fg:x="8178" fg:w="579"/><text x="16.6346%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 1.64%)</title><rect x="16.3136%" y="165" width="1.6406%" height="15" fill="rgb(212,87,29)" fg:x="8164" fg:w="821"/><text x="16.6066%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="17.9542%" y="165" width="0.1659%" height="15" fill="rgb(242,201,42)" fg:x="8985" fg:w="83"/><text x="18.2472%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="18.1201%" y="149" width="0.0280%" height="15" fill="rgb(247,187,49)" fg:x="9068" fg:w="14"/><text x="18.4130%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.1480%" y="133" width="0.1179%" height="15" fill="rgb(212,184,44)" fg:x="9082" fg:w="59"/><text x="18.4410%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="18.2659%" y="133" width="0.1878%" height="15" fill="rgb(221,184,21)" fg:x="9141" fg:w="94"/><text x="18.5589%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="18.4538%" y="133" width="0.3457%" height="15" fill="rgb(233,100,41)" fg:x="9235" fg:w="173"/><text x="18.7467%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.1480%" y="149" width="1.1570%" height="15" fill="rgb(216,213,15)" fg:x="9082" fg:w="579"/><text x="18.4410%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="19.3050%" y="149" width="0.1539%" height="15" fill="rgb(207,196,53)" fg:x="9661" fg:w="77"/><text x="19.5980%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="19.4589%" y="133" width="0.1718%" height="15" fill="rgb(207,135,38)" fg:x="9738" fg:w="86"/><text x="19.7518%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.24%)</title><rect x="19.4589%" y="149" width="0.2418%" height="15" fill="rgb(207,2,23)" fg:x="9738" fg:w="121"/><text x="19.7518%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 1.97%)</title><rect x="18.1201%" y="165" width="1.9703%" height="15" fill="rgb(206,5,48)" fg:x="9068" fg:w="986"/><text x="18.4130%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.0903%" y="117" width="0.1179%" height="15" fill="rgb(249,156,50)" fg:x="10054" fg:w="59"/><text x="20.3833%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.19%)</title><rect x="20.0903%" y="133" width="0.1878%" height="15" fill="rgb(224,81,15)" fg:x="10054" fg:w="94"/><text x="20.3833%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.63%)</title><rect x="20.0903%" y="149" width="0.6294%" height="15" fill="rgb(239,73,49)" fg:x="10054" fg:w="315"/><text x="20.3833%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.323 (18 instructions, 0.04%)</title><rect x="20.7198%" y="149" width="0.0360%" height="15" fill="rgb(217,98,3)" fg:x="10369" fg:w="18"/><text x="21.0127%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="20.7557%" y="149" width="0.0260%" height="15" fill="rgb(232,56,50)" fg:x="10387" fg:w="13"/><text x="21.0487%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 1.10%)</title><rect x="20.0903%" y="165" width="1.1010%" height="15" fill="rgb(239,156,16)" fg:x="10054" fg:w="551"/><text x="20.3833%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.11%)</title><rect x="21.1914%" y="165" width="0.1059%" height="15" fill="rgb(205,221,24)" fg:x="10605" fg:w="53"/><text x="21.4843%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.2973%" y="149" width="0.2638%" height="15" fill="rgb(244,35,41)" fg:x="10658" fg:w="132"/><text x="21.5902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.26%)</title><rect x="21.6310%" y="149" width="0.2638%" height="15" fill="rgb(232,32,0)" fg:x="10825" fg:w="132"/><text x="21.9239%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 0.67%)</title><rect x="21.2973%" y="165" width="0.6674%" height="15" fill="rgb(246,192,14)" fg:x="10658" fg:w="334"/><text x="21.5902%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.07%)</title><rect x="21.9647%" y="149" width="0.0679%" height="15" fill="rgb(243,34,44)" fg:x="10992" fg:w="34"/><text x="22.2576%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1353 (18 instructions, 0.04%)</title><rect x="22.0326%" y="149" width="0.0360%" height="15" fill="rgb(212,75,9)" fg:x="11026" fg:w="18"/><text x="22.3256%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1353 (18 instructions, 0.04%)</title><rect x="22.0686%" y="149" width="0.0360%" height="15" fill="rgb(206,193,49)" fg:x="11044" fg:w="18"/><text x="22.3615%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.34%)</title><rect x="21.9647%" y="165" width="0.3377%" height="15" fill="rgb(240,68,33)" fg:x="10992" fg:w="169"/><text x="22.2576%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3024%" y="165" width="0.0260%" height="15" fill="rgb(220,40,16)" fg:x="11161" fg:w="13"/><text x="22.5953%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3284%" y="165" width="0.0260%" height="15" fill="rgb(242,8,35)" fg:x="11174" fg:w="13"/><text x="22.6213%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="22.3543%" y="165" width="0.0260%" height="15" fill="rgb(254,158,27)" fg:x="11187" fg:w="13"/><text x="22.6473%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.88%)</title><rect x="22.3803%" y="165" width="0.8792%" height="15" fill="rgb(240,161,50)" fg:x="11200" fg:w="440"/><text x="22.6733%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="23.2595%" y="133" width="0.0380%" height="15" fill="rgb(222,43,0)" fg:x="11640" fg:w="19"/><text x="23.5525%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.36%)</title><rect x="23.2975%" y="133" width="0.3617%" height="15" fill="rgb(228,110,45)" fg:x="11659" fg:w="181"/><text x="23.5905%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.20%)</title><rect x="23.6592%" y="101" width="0.1998%" height="15" fill="rgb(209,220,52)" fg:x="11840" fg:w="100"/><text x="23.9521%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (214 instructions, 0.43%)</title><rect x="23.6592%" y="117" width="0.4276%" height="15" fill="rgb(232,152,18)" fg:x="11840" fg:w="214"/><text x="23.9521%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 instructions, 0.50%)</title><rect x="23.6592%" y="133" width="0.4976%" height="15" fill="rgb(221,81,8)" fg:x="11840" fg:w="249"/><text x="23.9521%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.1567%" y="133" width="0.0260%" height="15" fill="rgb(237,79,43)" fg:x="12089" fg:w="13"/><text x="24.4497%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (524 instructions, 1.05%)</title><rect x="23.2595%" y="149" width="1.0471%" height="15" fill="rgb(214,74,54)" fg:x="11640" fg:w="524"/><text x="23.5525%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (573 instructions, 1.14%)</title><rect x="23.2595%" y="165" width="1.1450%" height="15" fill="rgb(240,208,48)" fg:x="11640" fg:w="573"/><text x="23.5525%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="24.4045%" y="149" width="0.1239%" height="15" fill="rgb(226,113,50)" fg:x="12213" fg:w="62"/><text x="24.6975%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.20%)</title><rect x="24.5284%" y="149" width="0.1998%" height="15" fill="rgb(230,185,8)" fg:x="12275" fg:w="100"/><text x="24.8214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (261 instructions, 0.52%)</title><rect x="24.4045%" y="165" width="0.5215%" height="15" fill="rgb(219,153,35)" fg:x="12213" fg:w="261"/><text x="24.6975%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,752 instructions, 27.48%)</title><rect x="0.3797%" y="181" width="27.4798%" height="15" fill="rgb(244,83,14)" fg:x="190" fg:w="13752"/><text x="0.6726%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="27.8595%" y="181" width="1.2829%" height="15" fill="rgb(230,105,2)" fg:x="13942" fg:w="642"/><text x="28.1525%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="29.1424%" y="181" width="1.3448%" height="15" fill="rgb(224,117,50)" fg:x="14584" fg:w="673"/><text x="29.4353%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="30.4872%" y="181" width="1.3448%" height="15" fill="rgb(232,172,17)" fg:x="15257" fg:w="673"/><text x="30.7801%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (766 instructions, 1.53%)</title><rect x="31.8320%" y="181" width="1.5307%" height="15" fill="rgb(214,175,23)" fg:x="15930" fg:w="766"/><text x="32.1250%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="33.3626%" y="181" width="1.3448%" height="15" fill="rgb(226,82,11)" fg:x="16696" fg:w="673"/><text x="33.6556%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="34.7075%" y="181" width="1.2089%" height="15" fill="rgb(208,138,38)" fg:x="17369" fg:w="605"/><text x="35.0004%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="35.9164%" y="181" width="1.2829%" height="15" fill="rgb(211,104,22)" fg:x="17974" fg:w="642"/><text x="36.2094%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="37.1993%" y="181" width="1.3448%" height="15" fill="rgb(205,107,3)" fg:x="18616" fg:w="673"/><text x="37.4922%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="38.5441%" y="181" width="1.2709%" height="15" fill="rgb(235,15,10)" fg:x="19289" fg:w="636"/><text x="38.8370%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="39.8150%" y="181" width="1.2089%" height="15" fill="rgb(246,188,16)" fg:x="19925" fg:w="605"/><text x="40.1079%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="41.0239%" y="181" width="1.2829%" height="15" fill="rgb(229,35,2)" fg:x="20530" fg:w="642"/><text x="41.3169%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="42.3068%" y="181" width="1.2089%" height="15" fill="rgb(228,175,43)" fg:x="21172" fg:w="605"/><text x="42.5997%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="43.5157%" y="181" width="1.2829%" height="15" fill="rgb(217,13,25)" fg:x="21777" fg:w="642"/><text x="43.8087%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="44.7986%" y="181" width="1.2829%" height="15" fill="rgb(227,203,23)" fg:x="22419" fg:w="642"/><text x="45.0915%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (698 instructions, 1.39%)</title><rect x="46.0814%" y="181" width="1.3948%" height="15" fill="rgb(232,116,44)" fg:x="23061" fg:w="698"/><text x="46.3744%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="47.4762%" y="181" width="1.2089%" height="15" fill="rgb(222,156,3)" fg:x="23759" fg:w="605"/><text x="47.7692%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="48.6852%" y="181" width="1.2829%" height="15" fill="rgb(225,55,43)" fg:x="24364" fg:w="642"/><text x="48.9781%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="49.9680%" y="181" width="1.2829%" height="15" fill="rgb(250,6,10)" fg:x="25006" fg:w="642"/><text x="50.2610%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="51.2509%" y="181" width="1.3448%" height="15" fill="rgb(229,113,35)" fg:x="25648" fg:w="673"/><text x="51.5439%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="52.5957%" y="181" width="1.3448%" height="15" fill="rgb(228,13,43)" fg:x="26321" fg:w="673"/><text x="52.8887%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="53.9405%" y="181" width="1.2089%" height="15" fill="rgb(233,90,23)" fg:x="26994" fg:w="605"/><text x="54.2335%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.47%)</title><rect x="55.1495%" y="181" width="1.4687%" height="15" fill="rgb(218,0,30)" fg:x="27599" fg:w="735"/><text x="55.4424%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (698 instructions, 1.39%)</title><rect x="56.6182%" y="181" width="1.3948%" height="15" fill="rgb(235,24,8)" fg:x="28334" fg:w="698"/><text x="56.9111%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="58.0129%" y="181" width="1.2089%" height="15" fill="rgb(223,82,39)" fg:x="29032" fg:w="605"/><text x="58.3059%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="59.2219%" y="181" width="1.2709%" height="15" fill="rgb(220,115,16)" fg:x="29637" fg:w="636"/><text x="59.5149%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="60.4928%" y="181" width="1.2829%" height="15" fill="rgb(211,6,34)" fg:x="30273" fg:w="642"/><text x="60.7857%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="61.7756%" y="181" width="1.2089%" height="15" fill="rgb(224,128,6)" fg:x="30915" fg:w="605"/><text x="62.0686%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="62.9846%" y="181" width="1.2089%" height="15" fill="rgb(253,215,4)" fg:x="31520" fg:w="605"/><text x="63.2775%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="64.1935%" y="181" width="1.2089%" height="15" fill="rgb(243,118,35)" fg:x="32125" fg:w="605"/><text x="64.4865%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="65.4024%" y="181" width="1.2089%" height="15" fill="rgb(249,49,42)" fg:x="32730" fg:w="605"/><text x="65.6954%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (605 instructions, 1.21%)</title><rect x="66.6114%" y="181" width="1.2089%" height="15" fill="rgb(210,166,25)" fg:x="33335" fg:w="605"/><text x="66.9044%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="67.8203%" y="181" width="1.3448%" height="15" fill="rgb(228,23,30)" fg:x="33940" fg:w="673"/><text x="68.1133%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="69.1651%" y="181" width="1.2829%" height="15" fill="rgb(208,88,20)" fg:x="34613" fg:w="642"/><text x="69.4581%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="70.4480%" y="181" width="1.2829%" height="15" fill="rgb(219,176,4)" fg:x="35255" fg:w="642"/><text x="70.7410%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="71.7309%" y="181" width="1.2829%" height="15" fill="rgb(230,188,52)" fg:x="35897" fg:w="642"/><text x="72.0238%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="73.0137%" y="181" width="1.2829%" height="15" fill="rgb(233,135,23)" fg:x="36539" fg:w="642"/><text x="73.3067%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="74.2966%" y="181" width="1.2829%" height="15" fill="rgb(235,195,14)" fg:x="37181" fg:w="642"/><text x="74.5896%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="75.5795%" y="181" width="1.3448%" height="15" fill="rgb(231,178,25)" fg:x="37823" fg:w="673"/><text x="75.8725%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="76.9243%" y="181" width="1.3448%" height="15" fill="rgb(244,190,47)" fg:x="38496" fg:w="673"/><text x="77.2173%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="78.2691%" y="181" width="1.2829%" height="15" fill="rgb(237,177,49)" fg:x="39169" fg:w="642"/><text x="78.5621%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (673 instructions, 1.34%)</title><rect x="79.5520%" y="181" width="1.3448%" height="15" fill="rgb(207,142,49)" fg:x="39811" fg:w="673"/><text x="79.8450%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (704 instructions, 1.41%)</title><rect x="80.8968%" y="181" width="1.4068%" height="15" fill="rgb(252,39,31)" fg:x="40484" fg:w="704"/><text x="81.1898%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="82.3036%" y="181" width="1.2829%" height="15" fill="rgb(216,27,16)" fg:x="41188" fg:w="642"/><text x="82.5965%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="83.5864%" y="181" width="1.2829%" height="15" fill="rgb(216,18,46)" fg:x="41830" fg:w="642"/><text x="83.8794%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="84.8693%" y="181" width="1.2829%" height="15" fill="rgb(243,202,13)" fg:x="42472" fg:w="642"/><text x="85.1623%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="86.1522%" y="181" width="1.2829%" height="15" fill="rgb(228,203,41)" fg:x="43114" fg:w="642"/><text x="86.4452%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="87.4351%" y="181" width="1.2829%" height="15" fill="rgb(226,26,27)" fg:x="43756" fg:w="642"/><text x="87.7280%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (636 instructions, 1.27%)</title><rect x="88.7179%" y="181" width="1.2709%" height="15" fill="rgb(209,224,26)" fg:x="44398" fg:w="636"/><text x="89.0109%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="89.9888%" y="181" width="1.2829%" height="15" fill="rgb(221,15,2)" fg:x="45034" fg:w="642"/><text x="90.2818%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (642 instructions, 1.28%)</title><rect x="91.2717%" y="181" width="1.2829%" height="15" fill="rgb(229,58,21)" fg:x="45676" fg:w="642"/><text x="91.5646%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.03%)</title><rect x="92.5546%" y="149" width="0.0280%" height="15" fill="rgb(207,91,51)" fg:x="46318" fg:w="14"/><text x="92.8475%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.12%)</title><rect x="92.5825%" y="117" width="0.1239%" height="15" fill="rgb(225,140,13)" fg:x="46332" fg:w="62"/><text x="92.8755%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (156 instructions, 0.31%)</title><rect x="92.5825%" y="133" width="0.3117%" height="15" fill="rgb(227,71,27)" fg:x="46332" fg:w="156"/><text x="92.8755%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 0.38%)</title><rect x="92.5825%" y="149" width="0.3817%" height="15" fill="rgb(213,43,9)" fg:x="46332" fg:w="191"/><text x="92.8755%" y="159.50"></text></g><g><title>memset (152 instructions, 0.30%)</title><rect x="92.9642%" y="149" width="0.3037%" height="15" fill="rgb(207,75,36)" fg:x="46523" fg:w="152"/><text x="93.2572%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (537 instructions, 1.07%)</title><rect x="92.5546%" y="165" width="1.0731%" height="15" fill="rgb(225,29,24)" fg:x="46318" fg:w="537"/><text x="92.8475%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.6276%" y="149" width="1.0351%" height="15" fill="rgb(211,204,22)" fg:x="46855" fg:w="518"/><text x="93.9206%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.17%)</title><rect x="94.6627%" y="101" width="0.1659%" height="15" fill="rgb(245,4,30)" fg:x="47373" fg:w="83"/><text x="94.9557%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.25%)</title><rect x="94.6627%" y="117" width="0.2518%" height="15" fill="rgb(250,211,37)" fg:x="47373" fg:w="126"/><text x="94.9557%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.41%)</title><rect x="94.6627%" y="133" width="0.4096%" height="15" fill="rgb(235,95,29)" fg:x="47373" fg:w="205"/><text x="94.9557%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0723%" y="133" width="0.0300%" height="15" fill="rgb(229,213,52)" fg:x="47578" fg:w="15"/><text x="95.3653%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.1023%" y="133" width="0.0300%" height="15" fill="rgb(235,123,22)" fg:x="47593" fg:w="15"/><text x="95.3953%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.85%)</title><rect x="94.6627%" y="149" width="0.8453%" height="15" fill="rgb(236,59,15)" fg:x="47373" fg:w="423"/><text x="94.9557%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.03%)</title><rect x="95.5080%" y="149" width="1.0311%" height="15" fill="rgb(213,148,52)" fg:x="47796" fg:w="516"/><text x="95.8009%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.5390%" y="149" width="0.0140%" height="15" fill="rgb(224,142,33)" fg:x="48312" fg:w="7"/><text x="96.8320%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 3.11%)</title><rect x="93.6276%" y="165" width="3.1113%" height="15" fill="rgb(231,168,14)" fg:x="46855" fg:w="1557"/><text x="93.9206%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.01%)</title><rect x="96.7389%" y="165" width="0.0120%" height="15" fill="rgb(224,79,4)" fg:x="48412" fg:w="6"/><text x="97.0318%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.7509%" y="165" width="0.1199%" height="15" fill="rgb(244,189,15)" fg:x="48418" fg:w="60"/><text x="97.0438%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,766 instructions, 5.53%)</title><rect x="92.5546%" y="181" width="5.5271%" height="15" fill="rgb(234,68,28)" fg:x="46318" fg:w="2766"/><text x="92.8475%" y="191.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_remove::{{closure}} (49,500 instructions, 98.91%)</title><rect x="0.3797%" y="197" width="98.9130%" height="15" fill="rgb(250,184,15)" fg:x="190" fg:w="49500"/><text x="0.6726%" y="207.50">heap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.2926%" y="197" width="0.0280%" height="15" fill="rgb(233,177,50)" fg:x="49690" fg:w="14"/><text x="99.5856%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.17%)</title><rect x="99.3226%" y="197" width="0.1718%" height="15" fill="rgb(253,166,28)" fg:x="49705" fg:w="86"/><text x="99.6156%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.22%)</title><rect x="99.4944%" y="197" width="0.2178%" height="15" fill="rgb(227,3,31)" fg:x="49791" fg:w="109"/><text x="99.7874%" y="207.50"></text></g><g><title>all (50,044 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,127,44)" fg:x="0" fg:w="50044"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (50,044 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,32,51)" fg:x="0" fg:w="50044"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>