<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="49834"><g><title>ic_cdk::setup (24 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0482%" height="15" fill="rgb(254,198,37)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.0482%" y="197" width="0.1645%" height="15" fill="rgb(252,23,38)" fg:x="24" fg:w="82"/><text x="0.3411%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.2127%" y="197" width="0.1645%" height="15" fill="rgb(231,186,8)" fg:x="106" fg:w="82"/><text x="0.5057%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.3773%" y="165" width="0.1645%" height="15" fill="rgb(254,170,29)" fg:x="188" fg:w="82"/><text x="0.6702%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="0.5418%" y="149" width="0.1645%" height="15" fill="rgb(248,89,15)" fg:x="270" fg:w="82"/><text x="0.8348%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="0.7063%" y="133" width="0.0120%" height="15" fill="rgb(215,175,39)" fg:x="352" fg:w="6"/><text x="0.9993%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="0.7063%" y="149" width="0.8890%" height="15" fill="rgb(237,164,28)" fg:x="352" fg:w="443"/><text x="0.9993%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="1.5953%" y="149" width="0.1906%" height="15" fill="rgb(222,161,46)" fg:x="795" fg:w="95"/><text x="1.8883%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.7859%" y="149" width="0.1204%" height="15" fill="rgb(232,198,26)" fg:x="890" fg:w="60"/><text x="2.0789%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="1.9063%" y="149" width="0.1204%" height="15" fill="rgb(215,116,37)" fg:x="950" fg:w="60"/><text x="2.1993%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.0267%" y="149" width="0.1204%" height="15" fill="rgb(239,40,50)" fg:x="1010" fg:w="60"/><text x="2.3197%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.12%)</title><rect x="2.1471%" y="149" width="0.1204%" height="15" fill="rgb(222,79,43)" fg:x="1070" fg:w="60"/><text x="2.4401%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="2.2675%" y="149" width="0.1645%" height="15" fill="rgb(227,90,14)" fg:x="1130" fg:w="82"/><text x="2.5605%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="2.4321%" y="149" width="0.1405%" height="15" fill="rgb(239,73,49)" fg:x="1212" fg:w="70"/><text x="2.7250%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.5725%" y="133" width="0.0120%" height="15" fill="rgb(214,35,54)" fg:x="1282" fg:w="6"/><text x="2.8655%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="2.5725%" y="149" width="0.8890%" height="15" fill="rgb(232,143,7)" fg:x="1282" fg:w="443"/><text x="2.8655%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="3.4615%" y="149" width="0.0381%" height="15" fill="rgb(229,133,11)" fg:x="1725" fg:w="19"/><text x="3.7545%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="3.4996%" y="133" width="0.1645%" height="15" fill="rgb(220,96,37)" fg:x="1744" fg:w="82"/><text x="3.7926%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="3.6642%" y="101" width="0.1344%" height="15" fill="rgb(228,51,28)" fg:x="1826" fg:w="67"/><text x="3.9571%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="3.6642%" y="117" width="0.1926%" height="15" fill="rgb(248,66,13)" fg:x="1826" fg:w="96"/><text x="3.9571%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="3.8568%" y="69" width="0.0221%" height="15" fill="rgb(232,173,13)" fg:x="1922" fg:w="11"/><text x="4.1498%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="3.8789%" y="53" width="0.0702%" height="15" fill="rgb(218,98,53)" fg:x="1933" fg:w="35"/><text x="4.1718%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="3.8789%" y="69" width="0.1284%" height="15" fill="rgb(245,80,41)" fg:x="1933" fg:w="64"/><text x="4.1718%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="3.8568%" y="85" width="0.2890%" height="15" fill="rgb(221,204,5)" fg:x="1922" fg:w="144"/><text x="4.1498%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="3.8568%" y="101" width="0.4194%" height="15" fill="rgb(238,151,33)" fg:x="1922" fg:w="209"/><text x="4.1498%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="3.8568%" y="117" width="0.4395%" height="15" fill="rgb(239,84,0)" fg:x="1922" fg:w="219"/><text x="4.1498%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.92%)</title><rect x="3.6642%" y="133" width="0.9170%" height="15" fill="rgb(229,190,29)" fg:x="1826" fg:w="457"/><text x="3.9571%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.36%)</title><rect x="3.4996%" y="149" width="1.3585%" height="15" fill="rgb(251,13,28)" fg:x="1744" fg:w="677"/><text x="3.7926%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="4.8581%" y="149" width="0.1906%" height="15" fill="rgb(218,37,39)" fg:x="2421" fg:w="95"/><text x="5.1511%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="5.0488%" y="149" width="0.1204%" height="15" fill="rgb(227,209,24)" fg:x="2516" fg:w="60"/><text x="5.3417%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="5.1692%" y="149" width="0.1525%" height="15" fill="rgb(214,207,46)" fg:x="2576" fg:w="76"/><text x="5.4621%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.14%)</title><rect x="5.3217%" y="149" width="0.1405%" height="15" fill="rgb(240,174,47)" fg:x="2652" fg:w="70"/><text x="5.6146%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="5.4621%" y="117" width="0.0120%" height="15" fill="rgb(209,178,18)" fg:x="2722" fg:w="6"/><text x="5.7551%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.89%)</title><rect x="5.4621%" y="133" width="0.8890%" height="15" fill="rgb(229,81,39)" fg:x="2722" fg:w="443"/><text x="5.7551%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="6.3511%" y="133" width="0.0381%" height="15" fill="rgb(250,160,24)" fg:x="3165" fg:w="19"/><text x="6.6441%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="6.3892%" y="117" width="0.1645%" height="15" fill="rgb(246,34,4)" fg:x="3184" fg:w="82"/><text x="6.6822%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="6.5538%" y="85" width="0.1344%" height="15" fill="rgb(245,62,18)" fg:x="3266" fg:w="67"/><text x="6.8467%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="6.5538%" y="101" width="0.1926%" height="15" fill="rgb(215,89,4)" fg:x="3266" fg:w="96"/><text x="6.8467%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="6.7464%" y="53" width="0.0221%" height="15" fill="rgb(221,114,25)" fg:x="3362" fg:w="11"/><text x="7.0394%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="6.7685%" y="37" width="0.0702%" height="15" fill="rgb(235,72,2)" fg:x="3373" fg:w="35"/><text x="7.0614%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="6.7685%" y="53" width="0.1284%" height="15" fill="rgb(214,68,45)" fg:x="3373" fg:w="64"/><text x="7.0614%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="6.7464%" y="69" width="0.2890%" height="15" fill="rgb(254,125,4)" fg:x="3362" fg:w="144"/><text x="7.0394%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.42%)</title><rect x="6.7464%" y="85" width="0.4194%" height="15" fill="rgb(218,129,38)" fg:x="3362" fg:w="209"/><text x="7.0394%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.44%)</title><rect x="6.7464%" y="101" width="0.4395%" height="15" fill="rgb(236,43,19)" fg:x="3362" fg:w="219"/><text x="7.0394%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.92%)</title><rect x="6.5538%" y="117" width="0.9170%" height="15" fill="rgb(227,67,37)" fg:x="3266" fg:w="457"/><text x="6.8467%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 1.36%)</title><rect x="6.3892%" y="133" width="1.3585%" height="15" fill="rgb(247,162,6)" fg:x="3184" fg:w="677"/><text x="6.6822%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.19%)</title><rect x="7.7477%" y="133" width="0.1906%" height="15" fill="rgb(243,218,34)" fg:x="3861" fg:w="95"/><text x="8.0407%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="7.9384%" y="133" width="0.1204%" height="15" fill="rgb(239,126,33)" fg:x="3956" fg:w="60"/><text x="8.2313%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.16%)</title><rect x="8.0588%" y="117" width="0.1645%" height="15" fill="rgb(250,100,27)" fg:x="4016" fg:w="82"/><text x="8.3517%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.19%)</title><rect x="8.2233%" y="117" width="0.1906%" height="15" fill="rgb(205,193,51)" fg:x="4098" fg:w="95"/><text x="8.5163%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="8.4139%" y="117" width="0.1525%" height="15" fill="rgb(233,176,13)" fg:x="4193" fg:w="76"/><text x="8.7069%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.66%)</title><rect x="8.0588%" y="133" width="0.6622%" height="15" fill="rgb(205,20,16)" fg:x="4016" fg:w="330"/><text x="8.3517%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.7210%" y="133" width="0.1645%" height="15" fill="rgb(238,87,54)" fg:x="4346" fg:w="82"/><text x="9.0139%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 3.90%)</title><rect x="5.4621%" y="149" width="3.9050%" height="15" fill="rgb(225,212,25)" fg:x="2722" fg:w="1946"/><text x="5.7551%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.15%)</title><rect x="9.3671%" y="149" width="0.1525%" height="15" fill="rgb(230,166,31)" fg:x="4668" fg:w="76"/><text x="9.6601%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5196%" y="149" width="0.0301%" height="15" fill="rgb(221,99,41)" fg:x="4744" fg:w="15"/><text x="9.8126%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5497%" y="149" width="0.0301%" height="15" fill="rgb(247,27,27)" fg:x="4759" fg:w="15"/><text x="9.8427%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="9.5798%" y="149" width="0.0301%" height="15" fill="rgb(236,152,52)" fg:x="4774" fg:w="15"/><text x="9.8728%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="9.6099%" y="149" width="0.0140%" height="15" fill="rgb(238,181,23)" fg:x="4789" fg:w="7"/><text x="9.9029%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="9.6240%" y="133" width="0.1645%" height="15" fill="rgb(243,48,38)" fg:x="4796" fg:w="82"/><text x="9.9169%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.36%)</title><rect x="9.6240%" y="149" width="0.3572%" height="15" fill="rgb(228,170,44)" fg:x="4796" fg:w="178"/><text x="9.9169%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="9.9811%" y="117" width="0.1645%" height="15" fill="rgb(218,227,10)" fg:x="4974" fg:w="82"/><text x="10.2741%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.26%)</title><rect x="9.9811%" y="133" width="0.2609%" height="15" fill="rgb(207,205,1)" fg:x="4974" fg:w="130"/><text x="10.2741%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.43%)</title><rect x="9.9811%" y="149" width="0.4314%" height="15" fill="rgb(244,120,43)" fg:x="4974" fg:w="215"/><text x="10.2741%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.4126%" y="149" width="0.1645%" height="15" fill="rgb(225,17,39)" fg:x="5189" fg:w="82"/><text x="10.7055%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="10.5771%" y="149" width="0.1786%" height="15" fill="rgb(224,113,26)" fg:x="5271" fg:w="89"/><text x="10.8701%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.7557%" y="149" width="0.1645%" height="15" fill="rgb(240,141,15)" fg:x="5360" fg:w="82"/><text x="11.0487%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.9203%" y="149" width="0.1645%" height="15" fill="rgb(240,48,32)" fg:x="5442" fg:w="82"/><text x="11.2132%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="11.0928%" y="149" width="0.1786%" height="15" fill="rgb(212,5,15)" fg:x="5528" fg:w="89"/><text x="11.3858%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.79%)</title><rect x="11.2714%" y="149" width="0.7866%" height="15" fill="rgb(228,160,34)" fg:x="5617" fg:w="392"/><text x="11.5644%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.79%)</title><rect x="12.0580%" y="149" width="0.7866%" height="15" fill="rgb(234,14,18)" fg:x="6009" fg:w="392"/><text x="12.3510%" y="159.50"></text></g><g><title>memcpy (504 instructions, 1.01%)</title><rect x="12.8446%" y="149" width="1.0114%" height="15" fill="rgb(253,133,7)" fg:x="6401" fg:w="504"/><text x="13.1376%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 15.74%)</title><rect x="0.5418%" y="165" width="15.7403%" height="15" fill="rgb(224,153,35)" fg:x="270" fg:w="7844"/><text x="0.8348%" y="175.50">candid::de::IDLDeser..</text></g><g><title>memcpy (344 instructions, 0.69%)</title><rect x="16.2821%" y="165" width="0.6903%" height="15" fill="rgb(221,138,43)" fg:x="8114" fg:w="344"/><text x="16.5750%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="16.9723%" y="149" width="0.0140%" height="15" fill="rgb(236,197,1)" fg:x="8458" fg:w="7"/><text x="17.2653%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.08%)</title><rect x="16.9723%" y="165" width="0.0783%" height="15" fill="rgb(235,163,8)" fg:x="8458" fg:w="39"/><text x="17.2653%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="17.0506%" y="165" width="0.1645%" height="15" fill="rgb(208,93,54)" fg:x="8497" fg:w="82"/><text x="17.3436%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="17.2152%" y="149" width="0.0140%" height="15" fill="rgb(230,165,16)" fg:x="8579" fg:w="7"/><text x="17.5081%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="17.2292%" y="133" width="0.1184%" height="15" fill="rgb(234,201,14)" fg:x="8586" fg:w="59"/><text x="17.5222%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="17.3476%" y="133" width="0.1886%" height="15" fill="rgb(229,177,11)" fg:x="8645" fg:w="94"/><text x="17.6406%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="17.5362%" y="133" width="0.3472%" height="15" fill="rgb(251,225,2)" fg:x="8739" fg:w="173"/><text x="17.8292%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="17.2292%" y="149" width="1.1619%" height="15" fill="rgb(213,157,6)" fg:x="8586" fg:w="579"/><text x="17.5222%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 1.60%)</title><rect x="17.2152%" y="165" width="1.5993%" height="15" fill="rgb(218,177,50)" fg:x="8579" fg:w="797"/><text x="17.5081%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="18.8145%" y="165" width="0.1645%" height="15" fill="rgb(224,14,45)" fg:x="9376" fg:w="82"/><text x="19.1074%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="18.9790%" y="149" width="0.0140%" height="15" fill="rgb(220,55,44)" fg:x="9458" fg:w="7"/><text x="19.2720%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="18.9931%" y="133" width="0.1184%" height="15" fill="rgb(254,45,26)" fg:x="9465" fg:w="59"/><text x="19.2860%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.19%)</title><rect x="19.1115%" y="133" width="0.1886%" height="15" fill="rgb(227,107,43)" fg:x="9524" fg:w="94"/><text x="19.4044%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.35%)</title><rect x="19.3001%" y="133" width="0.3472%" height="15" fill="rgb(210,68,44)" fg:x="9618" fg:w="173"/><text x="19.5930%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 1.16%)</title><rect x="18.9931%" y="149" width="1.1619%" height="15" fill="rgb(223,193,40)" fg:x="9465" fg:w="579"/><text x="19.2860%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="20.1549%" y="149" width="0.1545%" height="15" fill="rgb(244,10,46)" fg:x="10044" fg:w="77"/><text x="20.4479%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="20.3094%" y="133" width="0.1786%" height="15" fill="rgb(207,157,16)" fg:x="10121" fg:w="89"/><text x="20.6024%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.27%)</title><rect x="20.3094%" y="149" width="0.2669%" height="15" fill="rgb(252,189,48)" fg:x="10121" fg:w="133"/><text x="20.6024%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 1.96%)</title><rect x="18.9790%" y="165" width="1.9565%" height="15" fill="rgb(218,6,2)" fg:x="9458" fg:w="975"/><text x="19.2720%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.12%)</title><rect x="20.9355%" y="117" width="0.1184%" height="15" fill="rgb(239,185,54)" fg:x="10433" fg:w="59"/><text x="21.2285%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.20%)</title><rect x="20.9355%" y="133" width="0.2047%" height="15" fill="rgb(209,135,10)" fg:x="10433" fg:w="102"/><text x="21.2285%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.65%)</title><rect x="20.9355%" y="149" width="0.6482%" height="15" fill="rgb(244,218,17)" fg:x="10433" fg:w="323"/><text x="21.2285%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.307 (34 instructions, 0.07%)</title><rect x="21.5837%" y="149" width="0.0682%" height="15" fill="rgb(238,212,50)" fg:x="10756" fg:w="34"/><text x="21.8766%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="21.6519%" y="149" width="0.0261%" height="15" fill="rgb(234,97,40)" fg:x="10790" fg:w="13"/><text x="21.9449%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 1.11%)</title><rect x="20.9355%" y="165" width="1.1137%" height="15" fill="rgb(247,137,8)" fg:x="10433" fg:w="555"/><text x="21.2285%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="22.0492%" y="165" width="0.0983%" height="15" fill="rgb(235,82,14)" fg:x="10988" fg:w="49"/><text x="22.3422%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.17%)</title><rect x="22.1475%" y="149" width="0.1666%" height="15" fill="rgb(210,48,29)" fg:x="11037" fg:w="83"/><text x="22.4405%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="22.4024%" y="133" width="0.0462%" height="15" fill="rgb(216,129,40)" fg:x="11164" fg:w="23"/><text x="22.6953%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.28%)</title><rect x="22.4024%" y="149" width="0.2769%" height="15" fill="rgb(214,11,22)" fg:x="11164" fg:w="138"/><text x="22.6953%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.62%)</title><rect x="22.1475%" y="165" width="0.6201%" height="15" fill="rgb(235,29,17)" fg:x="11037" fg:w="309"/><text x="22.4405%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.07%)</title><rect x="22.7676%" y="149" width="0.0702%" height="15" fill="rgb(254,42,30)" fg:x="11346" fg:w="35"/><text x="23.0606%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.07%)</title><rect x="22.8378%" y="149" width="0.0682%" height="15" fill="rgb(253,110,48)" fg:x="11381" fg:w="34"/><text x="23.1308%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.07%)</title><rect x="22.9060%" y="149" width="0.0682%" height="15" fill="rgb(218,54,33)" fg:x="11415" fg:w="34"/><text x="23.1990%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.07%)</title><rect x="22.9743%" y="149" width="0.0662%" height="15" fill="rgb(224,100,29)" fg:x="11449" fg:w="33"/><text x="23.2672%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.50%)</title><rect x="22.7676%" y="165" width="0.5017%" height="15" fill="rgb(248,138,54)" fg:x="11346" fg:w="250"/><text x="23.0606%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.2693%" y="165" width="0.0261%" height="15" fill="rgb(205,124,23)" fg:x="11596" fg:w="13"/><text x="23.5622%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.2953%" y="165" width="0.0261%" height="15" fill="rgb(218,33,54)" fg:x="11609" fg:w="13"/><text x="23.5883%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="23.3214%" y="165" width="0.0261%" height="15" fill="rgb(222,211,9)" fg:x="11622" fg:w="13"/><text x="23.6144%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.09%)</title><rect x="23.3475%" y="165" width="0.0863%" height="15" fill="rgb(242,150,11)" fg:x="11635" fg:w="43"/><text x="23.6405%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="23.4338%" y="149" width="0.0140%" height="15" fill="rgb(237,199,48)" fg:x="11678" fg:w="7"/><text x="23.7268%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.4478%" y="133" width="0.0542%" height="15" fill="rgb(210,219,41)" fg:x="11685" fg:w="27"/><text x="23.7408%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.5020%" y="133" width="0.0542%" height="15" fill="rgb(240,220,41)" fg:x="11712" fg:w="27"/><text x="23.7950%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.40%)</title><rect x="23.4478%" y="149" width="0.3953%" height="15" fill="rgb(244,49,18)" fg:x="11685" fg:w="197"/><text x="23.7408%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.8432%" y="117" width="0.0542%" height="15" fill="rgb(226,59,33)" fg:x="11882" fg:w="27"/><text x="24.1361%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="23.8432%" y="133" width="0.2849%" height="15" fill="rgb(248,56,39)" fg:x="11882" fg:w="142"/><text x="24.1361%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.37%)</title><rect x="23.8432%" y="149" width="0.3732%" height="15" fill="rgb(245,204,31)" fg:x="11882" fg:w="186"/><text x="24.1361%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.03%)</title><rect x="24.2164%" y="149" width="0.0261%" height="15" fill="rgb(209,42,15)" fg:x="12068" fg:w="13"/><text x="24.5094%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.2425%" y="149" width="0.0140%" height="15" fill="rgb(254,114,35)" fg:x="12081" fg:w="7"/><text x="24.5355%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 0.94%)</title><rect x="23.4338%" y="165" width="0.9431%" height="15" fill="rgb(237,55,26)" fg:x="11678" fg:w="470"/><text x="23.7268%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="24.3769%" y="149" width="0.0542%" height="15" fill="rgb(219,61,2)" fg:x="12148" fg:w="27"/><text x="24.6699%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="24.3769%" y="165" width="0.2849%" height="15" fill="rgb(236,76,13)" fg:x="12148" fg:w="142"/><text x="24.6699%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,671 instructions, 27.43%)</title><rect x="0.3773%" y="181" width="27.4331%" height="15" fill="rgb(218,137,11)" fg:x="188" fg:w="13671"/><text x="0.6702%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="27.8103%" y="181" width="1.2843%" height="15" fill="rgb(206,151,2)" fg:x="13859" fg:w="640"/><text x="28.1033%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="29.0946%" y="181" width="1.3465%" height="15" fill="rgb(209,207,50)" fg:x="14499" fg:w="671"/><text x="29.3876%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="30.4411%" y="181" width="1.3465%" height="15" fill="rgb(206,94,20)" fg:x="15170" fg:w="671"/><text x="30.7340%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (764 instructions, 1.53%)</title><rect x="31.7875%" y="181" width="1.5331%" height="15" fill="rgb(250,25,46)" fg:x="15841" fg:w="764"/><text x="32.0805%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="33.3206%" y="181" width="1.3465%" height="15" fill="rgb(223,186,46)" fg:x="16605" fg:w="671"/><text x="33.6136%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="34.6671%" y="181" width="1.2100%" height="15" fill="rgb(227,166,12)" fg:x="17276" fg:w="603"/><text x="34.9601%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="35.8771%" y="181" width="1.2843%" height="15" fill="rgb(244,107,40)" fg:x="17879" fg:w="640"/><text x="36.1701%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="37.1614%" y="181" width="1.3465%" height="15" fill="rgb(252,107,23)" fg:x="18519" fg:w="671"/><text x="37.4543%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="38.5078%" y="181" width="1.2722%" height="15" fill="rgb(253,50,24)" fg:x="19190" fg:w="634"/><text x="38.8008%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="39.7801%" y="181" width="1.2100%" height="15" fill="rgb(218,83,23)" fg:x="19824" fg:w="603"/><text x="40.0730%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="40.9901%" y="181" width="1.2843%" height="15" fill="rgb(244,23,53)" fg:x="20427" fg:w="640"/><text x="41.2831%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="42.2744%" y="181" width="1.2100%" height="15" fill="rgb(253,69,51)" fg:x="21067" fg:w="603"/><text x="42.5673%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="43.4844%" y="181" width="1.2843%" height="15" fill="rgb(252,215,44)" fg:x="21670" fg:w="640"/><text x="43.7773%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="44.7686%" y="181" width="1.2843%" height="15" fill="rgb(226,95,50)" fg:x="22310" fg:w="640"/><text x="45.0616%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.40%)</title><rect x="46.0529%" y="181" width="1.3966%" height="15" fill="rgb(213,161,19)" fg:x="22950" fg:w="696"/><text x="46.3459%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="47.4495%" y="181" width="1.2100%" height="15" fill="rgb(241,29,27)" fg:x="23646" fg:w="603"/><text x="47.7425%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="48.6595%" y="181" width="1.2843%" height="15" fill="rgb(229,44,53)" fg:x="24249" fg:w="640"/><text x="48.9525%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="49.9438%" y="181" width="1.2843%" height="15" fill="rgb(248,226,15)" fg:x="24889" fg:w="640"/><text x="50.2368%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="51.2281%" y="181" width="1.3465%" height="15" fill="rgb(219,68,21)" fg:x="25529" fg:w="671"/><text x="51.5210%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="52.5745%" y="181" width="1.3465%" height="15" fill="rgb(215,16,11)" fg:x="26200" fg:w="671"/><text x="52.8675%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="53.9210%" y="181" width="1.2100%" height="15" fill="rgb(243,198,43)" fg:x="26871" fg:w="603"/><text x="54.2140%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (733 instructions, 1.47%)</title><rect x="55.1310%" y="181" width="1.4709%" height="15" fill="rgb(242,174,16)" fg:x="27474" fg:w="733"/><text x="55.4240%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (696 instructions, 1.40%)</title><rect x="56.6019%" y="181" width="1.3966%" height="15" fill="rgb(239,1,9)" fg:x="28207" fg:w="696"/><text x="56.8949%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="57.9986%" y="181" width="1.2100%" height="15" fill="rgb(224,142,16)" fg:x="28903" fg:w="603"/><text x="58.2915%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="59.2086%" y="181" width="1.2722%" height="15" fill="rgb(218,178,9)" fg:x="29506" fg:w="634"/><text x="59.5015%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="60.4808%" y="181" width="1.2843%" height="15" fill="rgb(235,116,5)" fg:x="30140" fg:w="640"/><text x="60.7738%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="61.7651%" y="181" width="1.2100%" height="15" fill="rgb(243,3,8)" fg:x="30780" fg:w="603"/><text x="62.0580%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="62.9751%" y="181" width="1.2100%" height="15" fill="rgb(245,120,35)" fg:x="31383" fg:w="603"/><text x="63.2680%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="64.1851%" y="181" width="1.2100%" height="15" fill="rgb(247,225,51)" fg:x="31986" fg:w="603"/><text x="64.4781%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="65.3951%" y="181" width="1.2100%" height="15" fill="rgb(218,78,34)" fg:x="32589" fg:w="603"/><text x="65.6881%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (603 instructions, 1.21%)</title><rect x="66.6051%" y="181" width="1.2100%" height="15" fill="rgb(206,130,0)" fg:x="33192" fg:w="603"/><text x="66.8981%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="67.8151%" y="181" width="1.3465%" height="15" fill="rgb(224,191,45)" fg:x="33795" fg:w="671"/><text x="68.1081%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="69.1616%" y="181" width="1.2843%" height="15" fill="rgb(251,161,12)" fg:x="34466" fg:w="640"/><text x="69.4546%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="70.4459%" y="181" width="1.2843%" height="15" fill="rgb(247,225,6)" fg:x="35106" fg:w="640"/><text x="70.7388%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="71.7301%" y="181" width="1.2843%" height="15" fill="rgb(214,178,3)" fg:x="35746" fg:w="640"/><text x="72.0231%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="73.0144%" y="181" width="1.2843%" height="15" fill="rgb(228,124,5)" fg:x="36386" fg:w="640"/><text x="73.3074%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="74.2987%" y="181" width="1.2843%" height="15" fill="rgb(249,34,13)" fg:x="37026" fg:w="640"/><text x="74.5916%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="75.5829%" y="181" width="1.3465%" height="15" fill="rgb(219,228,10)" fg:x="37666" fg:w="671"/><text x="75.8759%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="76.9294%" y="181" width="1.3465%" height="15" fill="rgb(227,149,10)" fg:x="38337" fg:w="671"/><text x="77.2224%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="78.2759%" y="181" width="1.2843%" height="15" fill="rgb(213,191,0)" fg:x="39008" fg:w="640"/><text x="78.5688%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (671 instructions, 1.35%)</title><rect x="79.5601%" y="181" width="1.3465%" height="15" fill="rgb(208,106,32)" fg:x="39648" fg:w="671"/><text x="79.8531%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (702 instructions, 1.41%)</title><rect x="80.9066%" y="181" width="1.4087%" height="15" fill="rgb(245,207,25)" fg:x="40319" fg:w="702"/><text x="81.1996%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="82.3153%" y="181" width="1.2843%" height="15" fill="rgb(214,66,24)" fg:x="41021" fg:w="640"/><text x="82.6083%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="83.5996%" y="181" width="1.2843%" height="15" fill="rgb(237,14,40)" fg:x="41661" fg:w="640"/><text x="83.8925%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="84.8838%" y="181" width="1.2843%" height="15" fill="rgb(232,15,35)" fg:x="42301" fg:w="640"/><text x="85.1768%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="86.1681%" y="181" width="1.2843%" height="15" fill="rgb(237,119,46)" fg:x="42941" fg:w="640"/><text x="86.4610%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="87.4523%" y="181" width="1.2843%" height="15" fill="rgb(218,186,53)" fg:x="43581" fg:w="640"/><text x="87.7453%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (634 instructions, 1.27%)</title><rect x="88.7366%" y="181" width="1.2722%" height="15" fill="rgb(226,118,25)" fg:x="44221" fg:w="634"/><text x="89.0296%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="90.0088%" y="181" width="1.2843%" height="15" fill="rgb(241,212,17)" fg:x="44855" fg:w="640"/><text x="90.3018%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (640 instructions, 1.28%)</title><rect x="91.2931%" y="181" width="1.2843%" height="15" fill="rgb(232,15,39)" fg:x="45495" fg:w="640"/><text x="91.5861%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.01%)</title><rect x="92.5774%" y="165" width="0.0140%" height="15" fill="rgb(240,75,17)" fg:x="46135" fg:w="7"/><text x="92.8703%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="92.5914%" y="133" width="0.0542%" height="15" fill="rgb(245,182,14)" fg:x="46142" fg:w="27"/><text x="92.8844%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.23%)</title><rect x="92.5914%" y="149" width="0.2308%" height="15" fill="rgb(205,228,34)" fg:x="46142" fg:w="115"/><text x="92.8844%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.32%)</title><rect x="92.5914%" y="165" width="0.3191%" height="15" fill="rgb(247,102,26)" fg:x="46142" fg:w="159"/><text x="92.8844%" y="175.50"></text></g><g><title>memset (152 instructions, 0.31%)</title><rect x="92.9105%" y="165" width="0.3050%" height="15" fill="rgb(234,196,42)" fg:x="46301" fg:w="152"/><text x="93.2034%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (492 instructions, 0.99%)</title><rect x="92.5774%" y="181" width="0.9873%" height="15" fill="rgb(244,185,21)" fg:x="46135" fg:w="492"/><text x="92.8703%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.04%)</title><rect x="93.5646%" y="165" width="1.0395%" height="15" fill="rgb(206,111,12)" fg:x="46627" fg:w="518"/><text x="93.8576%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="94.6041%" y="117" width="0.1645%" height="15" fill="rgb(227,228,24)" fg:x="47145" fg:w="82"/><text x="94.8971%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.26%)</title><rect x="94.6041%" y="133" width="0.2609%" height="15" fill="rgb(217,172,42)" fg:x="47145" fg:w="130"/><text x="94.8971%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.43%)</title><rect x="94.6041%" y="149" width="0.4254%" height="15" fill="rgb(222,100,36)" fg:x="47145" fg:w="212"/><text x="94.8971%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0295%" y="149" width="0.0301%" height="15" fill="rgb(243,127,47)" fg:x="47357" fg:w="15"/><text x="95.3225%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="95.0596%" y="149" width="0.0301%" height="15" fill="rgb(238,31,22)" fg:x="47372" fg:w="15"/><text x="95.3526%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 0.86%)</title><rect x="94.6041%" y="165" width="0.8629%" height="15" fill="rgb(236,203,32)" fg:x="47145" fg:w="430"/><text x="94.8971%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.04%)</title><rect x="95.4670%" y="165" width="1.0354%" height="15" fill="rgb(233,62,25)" fg:x="47575" fg:w="516"/><text x="95.7599%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.5024%" y="165" width="0.0140%" height="15" fill="rgb(241,16,44)" fg:x="48091" fg:w="7"/><text x="96.7954%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 3.15%)</title><rect x="93.5646%" y="181" width="3.1464%" height="15" fill="rgb(247,181,50)" fg:x="46627" fg:w="1568"/><text x="93.8576%" y="191.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="96.7111%" y="165" width="0.0140%" height="15" fill="rgb(236,91,8)" fg:x="48195" fg:w="7"/><text x="97.0040%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.12%)</title><rect x="96.7251%" y="165" width="0.1204%" height="15" fill="rgb(216,97,25)" fg:x="48202" fg:w="60"/><text x="97.0181%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.26%)</title><rect x="96.7111%" y="181" width="0.2629%" height="15" fill="rgb(222,37,24)" fg:x="48195" fg:w="131"/><text x="97.0040%" y="191.50"></text></g><g><title>heap::__canister_method_batch_remove::{{closure}} (49,283 instructions, 98.89%)</title><rect x="0.3773%" y="197" width="98.8943%" height="15" fill="rgb(229,106,9)" fg:x="188" fg:w="49283"/><text x="0.6702%" y="207.50">heap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.03%)</title><rect x="99.2716%" y="197" width="0.0281%" height="15" fill="rgb(253,144,28)" fg:x="49471" fg:w="14"/><text x="99.5646%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.4803%" y="181" width="0.0542%" height="15" fill="rgb(223,168,9)" fg:x="49575" fg:w="27"/><text x="99.7732%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.41%)</title><rect x="99.3017%" y="197" width="0.4094%" height="15" fill="rgb(224,161,13)" fg:x="49486" fg:w="204"/><text x="99.5947%" y="207.50"></text></g><g><title>all (49,834 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,127,18)" fg:x="0" fg:w="49834"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (49,834 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,51,14)" fg:x="0" fg:w="49834"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>