<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="50383"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.0000%" y="229" width="0.1628%" height="15" fill="rgb(210,41,20)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.1628%" y="229" width="0.1628%" height="15" fill="rgb(220,156,45)" fg:x="82" fg:w="82"/><text x="0.4557%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="0.3255%" y="181" width="0.1628%" height="15" fill="rgb(253,57,12)" fg:x="164" fg:w="82"/><text x="0.6185%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 2.26%)</title><rect x="0.3255%" y="197" width="2.2607%" height="15" fill="rgb(252,15,37)" fg:x="164" fg:w="1139"/><text x="0.6185%" y="207.50">i..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="2.5862%" y="165" width="0.1012%" height="15" fill="rgb(205,42,40)" fg:x="1303" fg:w="51"/><text x="2.8792%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="2.6874%" y="149" width="0.0119%" height="15" fill="rgb(224,126,39)" fg:x="1354" fg:w="6"/><text x="2.9804%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.87%)</title><rect x="2.6874%" y="165" width="0.8674%" height="15" fill="rgb(222,176,26)" fg:x="1354" fg:w="437"/><text x="2.9804%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="3.5548%" y="165" width="0.1270%" height="15" fill="rgb(250,190,6)" fg:x="1791" fg:w="64"/><text x="3.8477%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.6818%" y="165" width="0.1508%" height="15" fill="rgb(248,48,21)" fg:x="1855" fg:w="76"/><text x="3.9748%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.8326%" y="165" width="0.1508%" height="15" fill="rgb(242,170,48)" fg:x="1931" fg:w="76"/><text x="4.1256%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="3.9835%" y="165" width="0.1508%" height="15" fill="rgb(209,74,43)" fg:x="2007" fg:w="76"/><text x="4.2765%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.15%)</title><rect x="4.1343%" y="165" width="0.1508%" height="15" fill="rgb(224,187,23)" fg:x="2083" fg:w="76"/><text x="4.4273%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="4.2852%" y="165" width="0.1012%" height="15" fill="rgb(233,91,18)" fg:x="2159" fg:w="51"/><text x="4.5781%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.19%)</title><rect x="4.3864%" y="165" width="0.1886%" height="15" fill="rgb(254,19,21)" fg:x="2210" fg:w="95"/><text x="4.6794%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="4.5750%" y="149" width="0.0119%" height="15" fill="rgb(240,96,42)" fg:x="2305" fg:w="6"/><text x="4.8679%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.87%)</title><rect x="4.5750%" y="165" width="0.8674%" height="15" fill="rgb(213,135,34)" fg:x="2305" fg:w="437"/><text x="4.8679%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="5.4423%" y="165" width="0.0377%" height="15" fill="rgb(229,24,17)" fg:x="2742" fg:w="19"/><text x="5.7353%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="5.4800%" y="133" width="0.1628%" height="15" fill="rgb(220,132,18)" fg:x="2761" fg:w="82"/><text x="5.7730%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="5.6428%" y="101" width="0.1330%" height="15" fill="rgb(253,70,24)" fg:x="2843" fg:w="67"/><text x="5.9357%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="5.6428%" y="117" width="0.1905%" height="15" fill="rgb(254,211,26)" fg:x="2843" fg:w="96"/><text x="5.9357%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="5.8333%" y="69" width="0.0218%" height="15" fill="rgb(209,208,54)" fg:x="2939" fg:w="11"/><text x="6.1263%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="5.8551%" y="53" width="0.0695%" height="15" fill="rgb(218,154,4)" fg:x="2950" fg:w="35"/><text x="6.1481%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="5.8551%" y="69" width="0.1270%" height="15" fill="rgb(214,22,2)" fg:x="2950" fg:w="64"/><text x="6.1481%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="5.8333%" y="85" width="0.2858%" height="15" fill="rgb(240,10,32)" fg:x="2939" fg:w="144"/><text x="6.1263%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.42%)</title><rect x="5.8333%" y="101" width="0.4168%" height="15" fill="rgb(221,199,1)" fg:x="2939" fg:w="210"/><text x="6.1263%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.44%)</title><rect x="5.8333%" y="117" width="0.4367%" height="15" fill="rgb(225,8,47)" fg:x="2939" fg:w="220"/><text x="6.1263%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 0.89%)</title><rect x="5.6428%" y="133" width="0.8912%" height="15" fill="rgb(233,66,48)" fg:x="2843" fg:w="449"/><text x="5.9357%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.32%)</title><rect x="5.4800%" y="149" width="1.3239%" height="15" fill="rgb(217,75,27)" fg:x="2761" fg:w="667"/><text x="5.7730%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="6.8039%" y="149" width="0.1270%" height="15" fill="rgb(236,202,26)" fg:x="3428" fg:w="64"/><text x="7.0969%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="6.9309%" y="149" width="0.1211%" height="15" fill="rgb(245,5,34)" fg:x="3492" fg:w="61"/><text x="7.2239%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.79%)</title><rect x="5.4800%" y="165" width="1.7923%" height="15" fill="rgb(218,11,36)" fg:x="2761" fg:w="903"/><text x="5.7730%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.05%)</title><rect x="7.2723%" y="165" width="0.0536%" height="15" fill="rgb(206,97,25)" fg:x="3664" fg:w="27"/><text x="7.5653%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="7.3259%" y="165" width="0.0913%" height="15" fill="rgb(244,40,17)" fg:x="3691" fg:w="46"/><text x="7.6189%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.19%)</title><rect x="7.4172%" y="165" width="0.1886%" height="15" fill="rgb(210,134,8)" fg:x="3737" fg:w="95"/><text x="7.7102%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.01%)</title><rect x="7.6057%" y="133" width="0.0119%" height="15" fill="rgb(214,85,39)" fg:x="3832" fg:w="6"/><text x="7.8987%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.87%)</title><rect x="7.6057%" y="149" width="0.8674%" height="15" fill="rgb(210,219,21)" fg:x="3832" fg:w="437"/><text x="7.8987%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.04%)</title><rect x="8.4731%" y="149" width="0.0377%" height="15" fill="rgb(243,41,18)" fg:x="4269" fg:w="19"/><text x="8.7661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="8.5108%" y="117" width="0.1628%" height="15" fill="rgb(216,52,23)" fg:x="4288" fg:w="82"/><text x="8.8038%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.13%)</title><rect x="8.6736%" y="85" width="0.1330%" height="15" fill="rgb(254,206,33)" fg:x="4370" fg:w="67"/><text x="8.9665%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.19%)</title><rect x="8.6736%" y="101" width="0.1905%" height="15" fill="rgb(209,63,50)" fg:x="4370" fg:w="96"/><text x="8.9665%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.02%)</title><rect x="8.8641%" y="53" width="0.0218%" height="15" fill="rgb(225,165,23)" fg:x="4466" fg:w="11"/><text x="9.1571%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.07%)</title><rect x="8.8859%" y="37" width="0.0695%" height="15" fill="rgb(235,19,7)" fg:x="4477" fg:w="35"/><text x="9.1789%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.13%)</title><rect x="8.8859%" y="53" width="0.1270%" height="15" fill="rgb(224,20,54)" fg:x="4477" fg:w="64"/><text x="9.1789%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.29%)</title><rect x="8.8641%" y="69" width="0.2858%" height="15" fill="rgb(207,2,27)" fg:x="4466" fg:w="144"/><text x="9.1571%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.42%)</title><rect x="8.8641%" y="85" width="0.4168%" height="15" fill="rgb(229,205,42)" fg:x="4466" fg:w="210"/><text x="9.1571%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.44%)</title><rect x="8.8641%" y="101" width="0.4367%" height="15" fill="rgb(215,111,35)" fg:x="4466" fg:w="220"/><text x="9.1571%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 0.89%)</title><rect x="8.6736%" y="117" width="0.8912%" height="15" fill="rgb(250,211,45)" fg:x="4370" fg:w="449"/><text x="8.9665%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 1.32%)</title><rect x="8.5108%" y="133" width="1.3239%" height="15" fill="rgb(240,177,45)" fg:x="4288" fg:w="667"/><text x="8.8038%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.13%)</title><rect x="9.8347%" y="133" width="0.1270%" height="15" fill="rgb(238,141,0)" fg:x="4955" fg:w="64"/><text x="10.1276%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="9.9617%" y="133" width="0.1211%" height="15" fill="rgb(246,194,41)" fg:x="5019" fg:w="61"/><text x="10.2547%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.79%)</title><rect x="8.5108%" y="149" width="1.7923%" height="15" fill="rgb(216,0,3)" fg:x="4288" fg:w="903"/><text x="8.8038%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.10%)</title><rect x="10.3031%" y="133" width="0.1012%" height="15" fill="rgb(250,123,14)" fg:x="5191" fg:w="51"/><text x="10.5960%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.23%)</title><rect x="10.4043%" y="133" width="0.2342%" height="15" fill="rgb(250,39,48)" fg:x="5242" fg:w="118"/><text x="10.6973%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="10.6385%" y="133" width="0.0913%" height="15" fill="rgb(238,91,50)" fg:x="5360" fg:w="46"/><text x="10.9315%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.56%)</title><rect x="10.3031%" y="149" width="0.5617%" height="15" fill="rgb(245,76,14)" fg:x="5191" fg:w="283"/><text x="10.5960%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="10.8648%" y="149" width="0.1628%" height="15" fill="rgb(222,109,39)" fg:x="5474" fg:w="82"/><text x="11.1577%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 3.79%)</title><rect x="7.6057%" y="165" width="3.7910%" height="15" fill="rgb(223,188,48)" fg:x="3832" fg:w="1910"/><text x="7.8987%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.09%)</title><rect x="11.3967%" y="165" width="0.0913%" height="15" fill="rgb(219,229,16)" fg:x="5742" fg:w="46"/><text x="11.6897%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.03%)</title><rect x="11.4880%" y="165" width="0.0298%" height="15" fill="rgb(244,142,29)" fg:x="5788" fg:w="15"/><text x="11.7810%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="11.5178%" y="165" width="0.0159%" height="15" fill="rgb(242,172,16)" fg:x="5803" fg:w="8"/><text x="11.8107%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="11.5337%" y="149" width="0.1628%" height="15" fill="rgb(248,135,29)" fg:x="5811" fg:w="82"/><text x="11.8266%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.35%)</title><rect x="11.5337%" y="165" width="0.3533%" height="15" fill="rgb(232,209,28)" fg:x="5811" fg:w="178"/><text x="11.8266%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="11.8869%" y="133" width="0.1628%" height="15" fill="rgb(237,52,43)" fg:x="5989" fg:w="82"/><text x="12.1799%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.24%)</title><rect x="11.8869%" y="149" width="0.2441%" height="15" fill="rgb(253,38,38)" fg:x="5989" fg:w="123"/><text x="12.1799%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.42%)</title><rect x="11.8869%" y="165" width="0.4168%" height="15" fill="rgb(213,212,21)" fg:x="5989" fg:w="210"/><text x="12.1799%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.3038%" y="165" width="0.1628%" height="15" fill="rgb(224,109,22)" fg:x="6199" fg:w="82"/><text x="12.5967%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="12.4665%" y="165" width="0.1766%" height="15" fill="rgb(253,67,19)" fg:x="6281" fg:w="89"/><text x="12.7595%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.6432%" y="165" width="0.1628%" height="15" fill="rgb(223,2,27)" fg:x="6370" fg:w="82"/><text x="12.9361%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="12.8059%" y="165" width="0.1628%" height="15" fill="rgb(210,158,42)" fg:x="6452" fg:w="82"/><text x="13.0989%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="12.9786%" y="165" width="0.1766%" height="15" fill="rgb(254,43,53)" fg:x="6539" fg:w="89"/><text x="13.2716%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.78%)</title><rect x="13.1552%" y="165" width="0.7780%" height="15" fill="rgb(249,53,21)" fg:x="6628" fg:w="392"/><text x="13.4482%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.78%)</title><rect x="13.9333%" y="165" width="0.7780%" height="15" fill="rgb(248,62,28)" fg:x="7020" fg:w="392"/><text x="14.2262%" y="175.50"></text></g><g><title>memcpy (504 instructions, 1.00%)</title><rect x="14.7113%" y="165" width="1.0003%" height="15" fill="rgb(231,20,31)" fg:x="7412" fg:w="504"/><text x="15.0043%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 15.59%)</title><rect x="2.5862%" y="181" width="15.5945%" height="15" fill="rgb(216,217,52)" fg:x="1303" fg:w="7857"/><text x="2.8792%" y="191.50">candid::de::IDLDeser..</text></g><g><title>memcpy (408 instructions, 0.81%)</title><rect x="18.1807%" y="181" width="0.8098%" height="15" fill="rgb(247,193,51)" fg:x="9160" fg:w="408"/><text x="18.4737%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.81%)</title><rect x="18.9905%" y="181" width="0.8098%" height="15" fill="rgb(218,208,21)" fg:x="9568" fg:w="408"/><text x="19.2835%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.05%)</title><rect x="19.8003%" y="181" width="0.0476%" height="15" fill="rgb(217,211,3)" fg:x="9976" fg:w="24"/><text x="20.0933%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="19.8480%" y="181" width="0.1628%" height="15" fill="rgb(248,146,54)" fg:x="10000" fg:w="82"/><text x="20.1409%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="20.0107%" y="165" width="0.1628%" height="15" fill="rgb(207,62,42)" fg:x="10082" fg:w="82"/><text x="20.3037%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.33%)</title><rect x="20.0107%" y="181" width="0.3295%" height="15" fill="rgb(244,118,45)" fg:x="10082" fg:w="166"/><text x="20.3037%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="20.3402%" y="181" width="0.1628%" height="15" fill="rgb(253,201,23)" fg:x="10248" fg:w="82"/><text x="20.6332%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.15%)</title><rect x="20.5029%" y="165" width="0.1528%" height="15" fill="rgb(233,110,21)" fg:x="10330" fg:w="77"/><text x="20.7959%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.18%)</title><rect x="20.6558%" y="149" width="0.1766%" height="15" fill="rgb(248,107,13)" fg:x="10407" fg:w="89"/><text x="20.9487%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.32%)</title><rect x="20.6558%" y="165" width="0.3176%" height="15" fill="rgb(212,113,53)" fg:x="10407" fg:w="160"/><text x="20.9487%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 0.83%)</title><rect x="20.5029%" y="181" width="0.8257%" height="15" fill="rgb(219,10,20)" fg:x="10330" fg:w="416"/><text x="20.7959%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.10%)</title><rect x="21.3286%" y="165" width="0.0973%" height="15" fill="rgb(250,162,28)" fg:x="10746" fg:w="49"/><text x="21.6216%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="21.4259%" y="165" width="0.0278%" height="15" fill="rgb(254,68,22)" fg:x="10795" fg:w="14"/><text x="21.7188%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.40%)</title><rect x="21.3286%" y="181" width="0.3970%" height="15" fill="rgb(218,91,16)" fg:x="10746" fg:w="200"/><text x="21.6216%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.10%)</title><rect x="21.7256%" y="181" width="0.0973%" height="15" fill="rgb(234,179,26)" fg:x="10946" fg:w="49"/><text x="22.0186%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.16%)</title><rect x="21.8228%" y="165" width="0.1647%" height="15" fill="rgb(236,182,47)" fg:x="10995" fg:w="83"/><text x="22.1158%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.05%)</title><rect x="22.1285%" y="149" width="0.0457%" height="15" fill="rgb(234,138,11)" fg:x="11149" fg:w="23"/><text x="22.4215%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.27%)</title><rect x="22.1285%" y="165" width="0.2739%" height="15" fill="rgb(234,52,25)" fg:x="11149" fg:w="138"/><text x="22.4215%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 0.72%)</title><rect x="21.8228%" y="181" width="0.7205%" height="15" fill="rgb(208,156,20)" fg:x="10995" fg:w="363"/><text x="22.1158%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.07%)</title><rect x="22.5433%" y="165" width="0.0734%" height="15" fill="rgb(243,0,26)" fg:x="11358" fg:w="37"/><text x="22.8363%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.07%)</title><rect x="22.6168%" y="165" width="0.0675%" height="15" fill="rgb(224,105,24)" fg:x="11395" fg:w="34"/><text x="22.9097%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.07%)</title><rect x="22.6842%" y="165" width="0.0675%" height="15" fill="rgb(227,13,27)" fg:x="11429" fg:w="34"/><text x="22.9772%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.06%)</title><rect x="22.7517%" y="165" width="0.0615%" height="15" fill="rgb(212,137,3)" fg:x="11463" fg:w="31"/><text x="23.0447%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.52%)</title><rect x="22.5433%" y="181" width="0.5180%" height="15" fill="rgb(214,53,17)" fg:x="11358" fg:w="261"/><text x="22.8363%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.0614%" y="181" width="0.0278%" height="15" fill="rgb(207,66,43)" fg:x="11619" fg:w="14"/><text x="23.3543%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.0891%" y="181" width="0.0278%" height="15" fill="rgb(215,197,37)" fg:x="11633" fg:w="14"/><text x="23.3821%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="23.1169%" y="181" width="0.0278%" height="15" fill="rgb(244,146,51)" fg:x="11647" fg:w="14"/><text x="23.4099%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.07%)</title><rect x="23.1447%" y="181" width="0.0734%" height="15" fill="rgb(242,123,48)" fg:x="11661" fg:w="37"/><text x="23.4377%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="23.2181%" y="165" width="0.0159%" height="15" fill="rgb(210,41,44)" fg:x="11698" fg:w="8"/><text x="23.5111%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.2340%" y="149" width="0.0536%" height="15" fill="rgb(243,192,31)" fg:x="11706" fg:w="27"/><text x="23.5270%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.2876%" y="149" width="0.0536%" height="15" fill="rgb(216,87,51)" fg:x="11733" fg:w="27"/><text x="23.5806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.39%)</title><rect x="23.2340%" y="165" width="0.3910%" height="15" fill="rgb(210,23,4)" fg:x="11706" fg:w="197"/><text x="23.5270%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="23.6250%" y="133" width="0.0536%" height="15" fill="rgb(226,21,52)" fg:x="11903" fg:w="27"/><text x="23.9180%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="23.6250%" y="149" width="0.2818%" height="15" fill="rgb(223,189,19)" fg:x="11903" fg:w="142"/><text x="23.9180%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.42%)</title><rect x="23.6250%" y="165" width="0.4228%" height="15" fill="rgb(237,182,48)" fg:x="11903" fg:w="213"/><text x="23.9180%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.03%)</title><rect x="24.0478%" y="165" width="0.0278%" height="15" fill="rgb(242,98,10)" fg:x="12116" fg:w="14"/><text x="24.3408%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.01%)</title><rect x="24.0756%" y="165" width="0.0139%" height="15" fill="rgb(232,22,8)" fg:x="12130" fg:w="7"/><text x="24.3685%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (529 instructions, 1.05%)</title><rect x="23.2181%" y="181" width="1.0500%" height="15" fill="rgb(214,88,41)" fg:x="11698" fg:w="529"/><text x="23.5111%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,356 instructions, 22.54%)</title><rect x="2.5862%" y="197" width="22.5393%" height="15" fill="rgb(236,62,21)" fg:x="1303" fg:w="11356"/><text x="2.8792%" y="207.50">candid::utils::decode_args_wit..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="25.1255%" y="181" width="0.0536%" height="15" fill="rgb(219,195,24)" fg:x="12659" fg:w="27"/><text x="25.4185%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.28%)</title><rect x="25.1255%" y="197" width="0.2818%" height="15" fill="rgb(229,193,32)" fg:x="12659" fg:w="142"/><text x="25.4185%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,744 instructions, 25.29%)</title><rect x="0.3255%" y="213" width="25.2942%" height="15" fill="rgb(222,89,9)" fg:x="164" fg:w="12744"/><text x="0.6185%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="25.6198%" y="213" width="1.3298%" height="15" fill="rgb(250,88,17)" fg:x="12908" fg:w="670"/><text x="25.9127%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="26.9496%" y="213" width="1.3913%" height="15" fill="rgb(244,96,12)" fg:x="13578" fg:w="701"/><text x="27.2425%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="28.3409%" y="213" width="1.3913%" height="15" fill="rgb(209,75,28)" fg:x="14279" fg:w="701"/><text x="28.6339%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (794 instructions, 1.58%)</title><rect x="29.7323%" y="213" width="1.5759%" height="15" fill="rgb(230,180,28)" fg:x="14980" fg:w="794"/><text x="30.0252%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="31.3082%" y="213" width="1.3913%" height="15" fill="rgb(248,227,20)" fg:x="15774" fg:w="701"/><text x="31.6011%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="32.6995%" y="213" width="1.2524%" height="15" fill="rgb(222,136,13)" fg:x="16475" fg:w="631"/><text x="32.9925%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="33.9519%" y="213" width="1.3298%" height="15" fill="rgb(238,91,18)" fg:x="17106" fg:w="670"/><text x="34.2449%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="35.2817%" y="213" width="1.3913%" height="15" fill="rgb(205,197,1)" fg:x="17776" fg:w="701"/><text x="35.5747%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="36.6731%" y="213" width="1.3139%" height="15" fill="rgb(253,218,37)" fg:x="18477" fg:w="662"/><text x="36.9661%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="37.9870%" y="213" width="1.2524%" height="15" fill="rgb(252,97,41)" fg:x="19139" fg:w="631"/><text x="38.2800%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="39.2394%" y="213" width="1.3298%" height="15" fill="rgb(208,196,20)" fg:x="19770" fg:w="670"/><text x="39.5324%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="40.5692%" y="213" width="1.2524%" height="15" fill="rgb(241,67,5)" fg:x="20440" fg:w="631"/><text x="40.8622%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="41.8216%" y="213" width="1.3298%" height="15" fill="rgb(213,99,49)" fg:x="21071" fg:w="670"/><text x="42.1146%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="43.1515%" y="213" width="1.3298%" height="15" fill="rgb(215,123,6)" fg:x="21741" fg:w="670"/><text x="43.4444%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (724 instructions, 1.44%)</title><rect x="44.4813%" y="213" width="1.4370%" height="15" fill="rgb(236,10,11)" fg:x="22411" fg:w="724"/><text x="44.7742%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="45.9183%" y="213" width="1.2524%" height="15" fill="rgb(229,128,27)" fg:x="23135" fg:w="631"/><text x="46.2112%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="47.1707%" y="213" width="1.3298%" height="15" fill="rgb(239,214,20)" fg:x="23766" fg:w="670"/><text x="47.4636%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="48.5005%" y="213" width="1.3298%" height="15" fill="rgb(213,44,23)" fg:x="24436" fg:w="670"/><text x="48.7935%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="49.8303%" y="213" width="1.3913%" height="15" fill="rgb(231,133,43)" fg:x="25106" fg:w="701"/><text x="50.1233%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="51.2216%" y="213" width="1.3913%" height="15" fill="rgb(251,125,8)" fg:x="25807" fg:w="701"/><text x="51.5146%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="52.6130%" y="213" width="1.2524%" height="15" fill="rgb(218,100,36)" fg:x="26508" fg:w="631"/><text x="52.9060%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (763 instructions, 1.51%)</title><rect x="53.8654%" y="213" width="1.5144%" height="15" fill="rgb(252,199,25)" fg:x="27139" fg:w="763"/><text x="54.1584%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (724 instructions, 1.44%)</title><rect x="55.3798%" y="213" width="1.4370%" height="15" fill="rgb(245,144,46)" fg:x="27902" fg:w="724"/><text x="55.6728%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="56.8168%" y="213" width="1.2524%" height="15" fill="rgb(220,168,32)" fg:x="28626" fg:w="631"/><text x="57.1098%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="58.0692%" y="213" width="1.3139%" height="15" fill="rgb(233,42,26)" fg:x="29257" fg:w="662"/><text x="58.3622%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="59.3831%" y="213" width="1.3298%" height="15" fill="rgb(215,56,22)" fg:x="29919" fg:w="670"/><text x="59.6761%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="60.7129%" y="213" width="1.2524%" height="15" fill="rgb(249,51,0)" fg:x="30589" fg:w="631"/><text x="61.0059%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="61.9653%" y="213" width="1.2524%" height="15" fill="rgb(254,118,9)" fg:x="31220" fg:w="631"/><text x="62.2583%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="63.2178%" y="213" width="1.2524%" height="15" fill="rgb(248,78,19)" fg:x="31851" fg:w="631"/><text x="63.5107%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="64.4702%" y="213" width="1.2524%" height="15" fill="rgb(225,65,28)" fg:x="32482" fg:w="631"/><text x="64.7631%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (631 instructions, 1.25%)</title><rect x="65.7226%" y="213" width="1.2524%" height="15" fill="rgb(246,93,27)" fg:x="33113" fg:w="631"/><text x="66.0155%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="66.9750%" y="213" width="1.3913%" height="15" fill="rgb(219,96,9)" fg:x="33744" fg:w="701"/><text x="67.2679%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="68.3663%" y="213" width="1.3298%" height="15" fill="rgb(224,224,13)" fg:x="34445" fg:w="670"/><text x="68.6593%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="69.6961%" y="213" width="1.3298%" height="15" fill="rgb(229,140,33)" fg:x="35115" fg:w="670"/><text x="69.9891%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="71.0259%" y="213" width="1.3298%" height="15" fill="rgb(253,36,47)" fg:x="35785" fg:w="670"/><text x="71.3189%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="72.3558%" y="213" width="1.3298%" height="15" fill="rgb(207,69,27)" fg:x="36455" fg:w="670"/><text x="72.6487%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="73.6856%" y="213" width="1.3298%" height="15" fill="rgb(214,93,54)" fg:x="37125" fg:w="670"/><text x="73.9785%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="75.0154%" y="213" width="1.3913%" height="15" fill="rgb(227,175,18)" fg:x="37795" fg:w="701"/><text x="75.3084%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="76.4067%" y="213" width="1.3913%" height="15" fill="rgb(242,162,30)" fg:x="38496" fg:w="701"/><text x="76.6997%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="77.7981%" y="213" width="1.3298%" height="15" fill="rgb(214,104,7)" fg:x="39197" fg:w="670"/><text x="78.0910%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (701 instructions, 1.39%)</title><rect x="79.1279%" y="213" width="1.3913%" height="15" fill="rgb(223,218,35)" fg:x="39867" fg:w="701"/><text x="79.4208%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (732 instructions, 1.45%)</title><rect x="80.5192%" y="213" width="1.4529%" height="15" fill="rgb(208,152,52)" fg:x="40568" fg:w="732"/><text x="80.8122%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="81.9721%" y="213" width="1.3298%" height="15" fill="rgb(239,171,25)" fg:x="41300" fg:w="670"/><text x="82.2651%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="83.3019%" y="213" width="1.3298%" height="15" fill="rgb(242,29,54)" fg:x="41970" fg:w="670"/><text x="83.5949%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="84.6317%" y="213" width="1.3298%" height="15" fill="rgb(216,54,46)" fg:x="42640" fg:w="670"/><text x="84.9247%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="85.9615%" y="213" width="1.3298%" height="15" fill="rgb(207,127,21)" fg:x="43310" fg:w="670"/><text x="86.2545%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="87.2913%" y="213" width="1.3298%" height="15" fill="rgb(251,180,38)" fg:x="43980" fg:w="670"/><text x="87.5843%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (662 instructions, 1.31%)</title><rect x="88.6212%" y="213" width="1.3139%" height="15" fill="rgb(251,143,47)" fg:x="44650" fg:w="662"/><text x="88.9141%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="89.9351%" y="213" width="1.3298%" height="15" fill="rgb(206,33,39)" fg:x="45312" fg:w="670"/><text x="90.2281%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.33%)</title><rect x="91.2649%" y="213" width="1.3298%" height="15" fill="rgb(229,22,37)" fg:x="45982" fg:w="670"/><text x="91.5579%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="92.5947%" y="165" width="0.1211%" height="15" fill="rgb(205,91,53)" fg:x="46652" fg:w="61"/><text x="92.8877%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.26%)</title><rect x="92.5947%" y="181" width="0.2620%" height="15" fill="rgb(209,54,16)" fg:x="46652" fg:w="132"/><text x="92.8877%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="92.8567%" y="165" width="0.0536%" height="15" fill="rgb(251,227,18)" fg:x="46784" fg:w="27"/><text x="93.1497%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.23%)</title><rect x="92.8567%" y="181" width="0.2302%" height="15" fill="rgb(253,170,46)" fg:x="46784" fg:w="116"/><text x="93.1497%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 0.84%)</title><rect x="92.5947%" y="197" width="0.8416%" height="15" fill="rgb(224,191,41)" fg:x="46652" fg:w="424"/><text x="92.8877%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 1.03%)</title><rect x="93.4363%" y="181" width="1.0281%" height="15" fill="rgb(215,14,20)" fg:x="47076" fg:w="518"/><text x="93.7292%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.16%)</title><rect x="94.4644%" y="133" width="0.1628%" height="15" fill="rgb(238,176,28)" fg:x="47594" fg:w="82"/><text x="94.7574%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.24%)</title><rect x="94.4644%" y="149" width="0.2441%" height="15" fill="rgb(234,215,12)" fg:x="47594" fg:w="123"/><text x="94.7574%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.41%)</title><rect x="94.4644%" y="165" width="0.4089%" height="15" fill="rgb(211,38,28)" fg:x="47594" fg:w="206"/><text x="94.7574%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.8733%" y="165" width="0.0298%" height="15" fill="rgb(245,179,50)" fg:x="47800" fg:w="15"/><text x="95.1662%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.03%)</title><rect x="94.9030%" y="165" width="0.0298%" height="15" fill="rgb(244,161,48)" fg:x="47815" fg:w="15"/><text x="95.1960%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.85%)</title><rect x="94.4644%" y="181" width="0.8495%" height="15" fill="rgb(220,167,42)" fg:x="47594" fg:w="428"/><text x="94.7574%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 1.02%)</title><rect x="95.3139%" y="181" width="1.0242%" height="15" fill="rgb(205,129,30)" fg:x="48022" fg:w="516"/><text x="95.6069%" y="191.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.01%)</title><rect x="96.3381%" y="181" width="0.0139%" height="15" fill="rgb(235,98,36)" fg:x="48538" fg:w="7"/><text x="96.6310%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 3.07%)</title><rect x="93.4363%" y="197" width="3.0685%" height="15" fill="rgb(224,228,50)" fg:x="47076" fg:w="1546"/><text x="93.7292%" y="207.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="96.5048%" y="197" width="0.0159%" height="15" fill="rgb(209,24,5)" fg:x="48622" fg:w="8"/><text x="96.7977%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.02%)</title><rect x="96.5207%" y="197" width="0.0159%" height="15" fill="rgb(210,221,43)" fg:x="48630" fg:w="8"/><text x="96.8136%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.12%)</title><rect x="96.5365%" y="197" width="0.1211%" height="15" fill="rgb(221,152,47)" fg:x="48638" fg:w="61"/><text x="96.8295%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 5.32%)</title><rect x="92.5947%" y="213" width="5.3193%" height="15" fill="rgb(254,205,8)" fg:x="46652" fg:w="2680"/><text x="92.8877%" y="223.50">ic_cd..</text></g><g><title>heap::__canister_method_batch_remove::{{closure}} (49,785 instructions, 98.81%)</title><rect x="0.3255%" y="229" width="98.8131%" height="15" fill="rgb(242,130,15)" fg:x="164" fg:w="49785"/><text x="0.6185%" y="239.50">heap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.03%)</title><rect x="99.1386%" y="229" width="0.0298%" height="15" fill="rgb(210,80,33)" fg:x="49949" fg:w="15"/><text x="99.4316%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.05%)</title><rect x="99.3470%" y="197" width="0.0536%" height="15" fill="rgb(212,126,10)" fg:x="50054" fg:w="27"/><text x="99.6400%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.41%)</title><rect x="99.1704%" y="213" width="0.4069%" height="15" fill="rgb(246,185,14)" fg:x="49965" fg:w="205"/><text x="99.4633%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 0.64%)</title><rect x="99.1684%" y="229" width="0.6411%" height="15" fill="rgb(232,218,38)" fg:x="49964" fg:w="323"/><text x="99.4613%" y="239.50"></text></g><g><title>all (50,383 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,165,32)" fg:x="0" fg:w="50383"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_remove (50,383 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,19,30)" fg:x="0" fg:w="50383"/><text x="0.2930%" y="255.50">canister_update batch_remove</text></g></svg></svg>