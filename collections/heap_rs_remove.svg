<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="53738"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0149%" height="15" fill="rgb(218,202,40)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0149%" y="181" width="0.0167%" height="15" fill="rgb(231,190,9)" fg:x="8" fg:w="9"/><text x="0.3079%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0316%" y="181" width="0.0167%" height="15" fill="rgb(240,177,21)" fg:x="17" fg:w="9"/><text x="0.3246%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.0484%" y="181" width="0.0167%" height="15" fill="rgb(239,8,38)" fg:x="26" fg:w="9"/><text x="0.3414%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0707%" y="181" width="0.0186%" height="15" fill="rgb(217,106,25)" fg:x="38" fg:w="10"/><text x="0.3637%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.0149%" y="197" width="0.2456%" height="15" fill="rgb(218,126,50)" fg:x="8" fg:w="132"/><text x="0.3079%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="0.0149%" y="213" width="0.2642%" height="15" fill="rgb(243,26,45)" fg:x="8" fg:w="142"/><text x="0.3079%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.0149%" y="229" width="0.2698%" height="15" fill="rgb(218,110,12)" fg:x="8" fg:w="145"/><text x="0.3079%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.2959%" y="181" width="0.0167%" height="15" fill="rgb(211,119,25)" fg:x="159" fg:w="9"/><text x="0.5888%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3126%" y="181" width="0.0167%" height="15" fill="rgb(205,219,16)" fg:x="168" fg:w="9"/><text x="0.6056%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.3294%" y="181" width="0.0167%" height="15" fill="rgb(248,5,17)" fg:x="177" fg:w="9"/><text x="0.6223%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3517%" y="181" width="0.0186%" height="15" fill="rgb(243,42,11)" fg:x="189" fg:w="10"/><text x="0.6447%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.2959%" y="197" width="0.2456%" height="15" fill="rgb(244,85,6)" fg:x="159" fg:w="132"/><text x="0.5888%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="0.2959%" y="213" width="0.2642%" height="15" fill="rgb(253,71,18)" fg:x="159" fg:w="142"/><text x="0.5888%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.2959%" y="229" width="0.2698%" height="15" fill="rgb(239,140,19)" fg:x="159" fg:w="145"/><text x="0.5888%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.56%)</title><rect x="0.0149%" y="245" width="0.5620%" height="15" fill="rgb(227,133,43)" fg:x="8" fg:w="302"/><text x="0.3079%" y="255.50"></text></g><g><title>ic_cdk::futures::waker::waker (6 instructions, 0.01%)</title><rect x="0.5769%" y="245" width="0.0112%" height="15" fill="rgb(219,173,54)" fg:x="310" fg:w="6"/><text x="0.8698%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.5880%" y="149" width="0.0167%" height="15" fill="rgb(242,48,8)" fg:x="316" fg:w="9"/><text x="0.8810%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6048%" y="149" width="0.0167%" height="15" fill="rgb(249,81,21)" fg:x="325" fg:w="9"/><text x="0.8978%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="0.6215%" y="149" width="0.0167%" height="15" fill="rgb(224,154,54)" fg:x="334" fg:w="9"/><text x="0.9145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.6439%" y="149" width="0.0186%" height="15" fill="rgb(210,203,25)" fg:x="346" fg:w="10"/><text x="0.9368%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="0.5880%" y="165" width="0.2456%" height="15" fill="rgb(206,182,32)" fg:x="316" fg:w="132"/><text x="0.8810%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="0.5880%" y="181" width="0.2642%" height="15" fill="rgb(217,169,23)" fg:x="316" fg:w="142"/><text x="0.8810%" y="191.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="0.5880%" y="197" width="0.2698%" height="15" fill="rgb(208,108,25)" fg:x="316" fg:w="145"/><text x="0.8810%" y="207.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="0.5880%" y="213" width="0.2810%" height="15" fill="rgb(219,154,51)" fg:x="316" fg:w="151"/><text x="0.8810%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (211 instructions, 0.39%)</title><rect x="0.5880%" y="229" width="0.3926%" height="15" fill="rgb(221,94,53)" fg:x="316" fg:w="211"/><text x="0.8810%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="0.9825%" y="181" width="0.1358%" height="15" fill="rgb(217,28,37)" fg:x="528" fg:w="73"/><text x="1.2755%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="1.1184%" y="117" width="0.0112%" height="15" fill="rgb(241,31,51)" fg:x="601" fg:w="6"/><text x="1.4114%" y="127.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="1.1184%" y="133" width="0.0186%" height="15" fill="rgb(247,66,3)" fg:x="601" fg:w="10"/><text x="1.4114%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="1.1184%" y="149" width="0.8058%" height="15" fill="rgb(217,64,0)" fg:x="601" fg:w="433"/><text x="1.4114%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="1.9242%" y="149" width="0.1619%" height="15" fill="rgb(212,88,54)" fg:x="1034" fg:w="87"/><text x="2.2171%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.0860%" y="149" width="0.0968%" height="15" fill="rgb(248,85,37)" fg:x="1121" fg:w="52"/><text x="2.3790%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.1828%" y="149" width="0.0968%" height="15" fill="rgb(209,225,14)" fg:x="1173" fg:w="52"/><text x="2.4758%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.2796%" y="149" width="0.0968%" height="15" fill="rgb(211,10,37)" fg:x="1225" fg:w="52"/><text x="2.5725%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.10%)</title><rect x="2.3763%" y="149" width="0.0968%" height="15" fill="rgb(228,28,7)" fg:x="1277" fg:w="52"/><text x="2.6693%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (880 instructions, 1.64%)</title><rect x="1.1184%" y="181" width="1.6376%" height="15" fill="rgb(245,17,17)" fg:x="601" fg:w="880"/><text x="1.4114%" y="191.50"></text></g><g><title> 4]&gt;::read_options (880 instructions, 1.64%)</title><rect x="1.1184%" y="165" width="1.6376%" height="15" fill="rgb(254,115,3)" fg:x="601" fg:w="880"/><text x="1.4114%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="2.7560%" y="181" width="0.1358%" height="15" fill="rgb(239,150,15)" fg:x="1481" fg:w="73"/><text x="3.0489%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="2.8918%" y="165" width="0.1433%" height="15" fill="rgb(223,89,19)" fg:x="1554" fg:w="77"/><text x="3.1848%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="2.8918%" y="181" width="0.1935%" height="15" fill="rgb(245,86,45)" fg:x="1554" fg:w="104"/><text x="3.1848%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="3.0853%" y="133" width="0.0112%" height="15" fill="rgb(246,93,35)" fg:x="1658" fg:w="6"/><text x="3.3783%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="3.0853%" y="149" width="0.0186%" height="15" fill="rgb(240,158,54)" fg:x="1658" fg:w="10"/><text x="3.3783%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="3.0853%" y="165" width="0.8058%" height="15" fill="rgb(213,149,10)" fg:x="1658" fg:w="433"/><text x="3.3783%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.8911%" y="149" width="0.0335%" height="15" fill="rgb(250,206,2)" fg:x="2091" fg:w="18"/><text x="4.1841%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.8911%" y="165" width="0.0409%" height="15" fill="rgb(231,1,8)" fg:x="2091" fg:w="22"/><text x="4.1841%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9320%" y="69" width="0.0167%" height="15" fill="rgb(231,129,48)" fg:x="2113" fg:w="9"/><text x="4.2250%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9488%" y="69" width="0.0167%" height="15" fill="rgb(217,44,41)" fg:x="2122" fg:w="9"/><text x="4.2418%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="3.9655%" y="69" width="0.0167%" height="15" fill="rgb(243,0,41)" fg:x="2131" fg:w="9"/><text x="4.2585%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="3.9879%" y="69" width="0.0186%" height="15" fill="rgb(250,125,10)" fg:x="2143" fg:w="10"/><text x="4.2808%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="3.9320%" y="85" width="0.2456%" height="15" fill="rgb(209,187,11)" fg:x="2113" fg:w="132"/><text x="4.2250%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="3.9320%" y="101" width="0.2642%" height="15" fill="rgb(251,70,27)" fg:x="2113" fg:w="142"/><text x="4.2250%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="3.9320%" y="117" width="0.2698%" height="15" fill="rgb(246,223,36)" fg:x="2113" fg:w="145"/><text x="4.2250%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="3.9320%" y="133" width="0.2810%" height="15" fill="rgb(246,160,26)" fg:x="2113" fg:w="151"/><text x="4.2250%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="4.2130%" y="85" width="0.1117%" height="15" fill="rgb(235,166,36)" fg:x="2264" fg:w="60"/><text x="4.5060%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="4.2130%" y="101" width="0.1191%" height="15" fill="rgb(211,17,17)" fg:x="2264" fg:w="64"/><text x="4.5060%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="4.2130%" y="117" width="0.1656%" height="15" fill="rgb(228,80,30)" fg:x="2264" fg:w="89"/><text x="4.5060%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="4.3787%" y="69" width="0.0186%" height="15" fill="rgb(245,152,22)" fg:x="2353" fg:w="10"/><text x="4.6716%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="4.3973%" y="37" width="0.0558%" height="15" fill="rgb(246,216,27)" fg:x="2363" fg:w="30"/><text x="4.6902%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="4.3973%" y="53" width="0.0633%" height="15" fill="rgb(247,34,34)" fg:x="2363" fg:w="34"/><text x="4.6902%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="4.3973%" y="69" width="0.1098%" height="15" fill="rgb(241,128,38)" fg:x="2363" fg:w="59"/><text x="4.6902%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="4.3787%" y="85" width="0.2214%" height="15" fill="rgb(232,169,46)" fg:x="2353" fg:w="119"/><text x="4.6716%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.32%)</title><rect x="4.3787%" y="101" width="0.3238%" height="15" fill="rgb(232,37,0)" fg:x="2353" fg:w="174"/><text x="4.6716%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.33%)</title><rect x="4.3787%" y="117" width="0.3331%" height="15" fill="rgb(224,88,46)" fg:x="2353" fg:w="179"/><text x="4.6716%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="4.2130%" y="133" width="0.7053%" height="15" fill="rgb(220,211,32)" fg:x="2264" fg:w="379"/><text x="4.5060%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.25%)</title><rect x="3.9320%" y="149" width="1.2524%" height="15" fill="rgb(237,0,22)" fg:x="2113" fg:w="673"/><text x="4.2250%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="5.1844%" y="149" width="0.1619%" height="15" fill="rgb(236,46,4)" fg:x="2786" fg:w="87"/><text x="5.4774%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="5.3724%" y="101" width="0.0112%" height="15" fill="rgb(220,39,23)" fg:x="2887" fg:w="6"/><text x="5.6653%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="5.3835%" y="101" width="0.0186%" height="15" fill="rgb(209,213,49)" fg:x="2893" fg:w="10"/><text x="5.6765%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="5.3463%" y="117" width="0.1303%" height="15" fill="rgb(220,133,29)" fg:x="2873" fg:w="70"/><text x="5.6393%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="5.3463%" y="133" width="0.1340%" height="15" fill="rgb(222,5,41)" fg:x="2873" fg:w="72"/><text x="5.6393%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="5.3463%" y="149" width="0.1433%" height="15" fill="rgb(215,140,2)" fg:x="2873" fg:w="77"/><text x="5.6393%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (908 instructions, 1.69%)</title><rect x="3.9320%" y="165" width="1.6897%" height="15" fill="rgb(215,38,18)" fg:x="2113" fg:w="908"/><text x="4.2250%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.05%)</title><rect x="5.6217%" y="165" width="0.0465%" height="15" fill="rgb(248,143,11)" fg:x="3021" fg:w="25"/><text x="5.9147%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,536 instructions, 2.86%)</title><rect x="3.0853%" y="181" width="2.8583%" height="15" fill="rgb(211,192,12)" fg:x="1658" fg:w="1536"/><text x="3.3783%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="5.9437%" y="181" width="0.1265%" height="15" fill="rgb(247,125,19)" fg:x="3194" fg:w="68"/><text x="6.2366%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.14%)</title><rect x="6.0702%" y="165" width="0.1433%" height="15" fill="rgb(242,79,9)" fg:x="3262" fg:w="77"/><text x="6.3632%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.19%)</title><rect x="6.0702%" y="181" width="0.1935%" height="15" fill="rgb(205,213,38)" fg:x="3262" fg:w="104"/><text x="6.3632%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcmp (6 instructions, 0.01%)</title><rect x="6.2637%" y="133" width="0.0112%" height="15" fill="rgb(242,176,19)" fg:x="3366" fg:w="6"/><text x="6.5567%" y="143.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="6.2637%" y="149" width="0.0186%" height="15" fill="rgb(231,197,14)" fg:x="3366" fg:w="10"/><text x="6.5567%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.81%)</title><rect x="6.2637%" y="165" width="0.8058%" height="15" fill="rgb(247,179,29)" fg:x="3366" fg:w="433"/><text x="6.5567%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="7.0695%" y="149" width="0.0335%" height="15" fill="rgb(230,42,21)" fg:x="3799" fg:w="18"/><text x="7.3625%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="7.0695%" y="165" width="0.0409%" height="15" fill="rgb(207,221,4)" fg:x="3799" fg:w="22"/><text x="7.3625%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1104%" y="69" width="0.0167%" height="15" fill="rgb(249,205,32)" fg:x="3821" fg:w="9"/><text x="7.4034%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1272%" y="69" width="0.0167%" height="15" fill="rgb(251,4,51)" fg:x="3830" fg:w="9"/><text x="7.4201%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="7.1439%" y="69" width="0.0167%" height="15" fill="rgb(228,138,4)" fg:x="3839" fg:w="9"/><text x="7.4369%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.1663%" y="69" width="0.0186%" height="15" fill="rgb(214,161,10)" fg:x="3851" fg:w="10"/><text x="7.4592%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="7.1104%" y="85" width="0.2456%" height="15" fill="rgb(247,200,26)" fg:x="3821" fg:w="132"/><text x="7.4034%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="7.1104%" y="101" width="0.2642%" height="15" fill="rgb(252,134,14)" fg:x="3821" fg:w="142"/><text x="7.4034%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="7.1104%" y="117" width="0.2698%" height="15" fill="rgb(211,95,47)" fg:x="3821" fg:w="145"/><text x="7.4034%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="7.1104%" y="133" width="0.2810%" height="15" fill="rgb(230,61,34)" fg:x="3821" fg:w="151"/><text x="7.4034%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.11%)</title><rect x="7.3914%" y="85" width="0.1117%" height="15" fill="rgb(253,175,39)" fg:x="3972" fg:w="60"/><text x="7.6844%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.12%)</title><rect x="7.3914%" y="101" width="0.1191%" height="15" fill="rgb(213,196,52)" fg:x="3972" fg:w="64"/><text x="7.6844%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.17%)</title><rect x="7.3914%" y="117" width="0.1656%" height="15" fill="rgb(253,47,41)" fg:x="3972" fg:w="89"/><text x="7.6844%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="7.5570%" y="69" width="0.0186%" height="15" fill="rgb(242,69,10)" fg:x="4061" fg:w="10"/><text x="7.8500%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.06%)</title><rect x="7.5756%" y="37" width="0.0558%" height="15" fill="rgb(253,130,24)" fg:x="4071" fg:w="30"/><text x="7.8686%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="7.5756%" y="53" width="0.0633%" height="15" fill="rgb(221,48,22)" fg:x="4071" fg:w="34"/><text x="7.8686%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.11%)</title><rect x="7.5756%" y="69" width="0.1098%" height="15" fill="rgb(215,210,7)" fg:x="4071" fg:w="59"/><text x="7.8686%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.22%)</title><rect x="7.5570%" y="85" width="0.2214%" height="15" fill="rgb(244,7,21)" fg:x="4061" fg:w="119"/><text x="7.8500%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.32%)</title><rect x="7.5570%" y="101" width="0.3238%" height="15" fill="rgb(253,56,38)" fg:x="4061" fg:w="174"/><text x="7.8500%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.33%)</title><rect x="7.5570%" y="117" width="0.3331%" height="15" fill="rgb(249,69,54)" fg:x="4061" fg:w="179"/><text x="7.8500%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.71%)</title><rect x="7.3914%" y="133" width="0.7053%" height="15" fill="rgb(211,95,15)" fg:x="3972" fg:w="379"/><text x="7.6844%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.25%)</title><rect x="7.1104%" y="149" width="1.2524%" height="15" fill="rgb(218,73,7)" fg:x="3821" fg:w="673"/><text x="7.4034%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.16%)</title><rect x="8.3628%" y="149" width="0.1619%" height="15" fill="rgb(212,124,7)" fg:x="4494" fg:w="87"/><text x="8.6558%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="8.5507%" y="101" width="0.0112%" height="15" fill="rgb(244,162,29)" fg:x="4595" fg:w="6"/><text x="8.8437%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="8.5619%" y="101" width="0.0186%" height="15" fill="rgb(226,23,6)" fg:x="4601" fg:w="10"/><text x="8.8549%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="8.5247%" y="117" width="0.1303%" height="15" fill="rgb(214,19,23)" fg:x="4581" fg:w="70"/><text x="8.8177%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="8.5247%" y="133" width="0.1340%" height="15" fill="rgb(234,62,29)" fg:x="4581" fg:w="72"/><text x="8.8177%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="8.5247%" y="149" width="0.1433%" height="15" fill="rgb(208,113,48)" fg:x="4581" fg:w="77"/><text x="8.8177%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (908 instructions, 1.69%)</title><rect x="7.1104%" y="165" width="1.6897%" height="15" fill="rgb(251,169,10)" fg:x="3821" fg:w="908"/><text x="7.4034%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.14%)</title><rect x="8.8001%" y="133" width="0.1358%" height="15" fill="rgb(249,110,26)" fg:x="4729" fg:w="73"/><text x="9.0931%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.20%)</title><rect x="8.9359%" y="117" width="0.2047%" height="15" fill="rgb(211,127,54)" fg:x="4802" fg:w="110"/><text x="9.2289%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.25%)</title><rect x="8.9359%" y="133" width="0.2549%" height="15" fill="rgb(223,130,30)" fg:x="4802" fg:w="137"/><text x="9.2289%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="9.1909%" y="133" width="0.1265%" height="15" fill="rgb(233,172,27)" fg:x="4939" fg:w="68"/><text x="9.4839%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (337 instructions, 0.63%)</title><rect x="8.8001%" y="149" width="0.6271%" height="15" fill="rgb(223,181,50)" fg:x="4729" fg:w="337"/><text x="9.0931%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4272%" y="85" width="0.0167%" height="15" fill="rgb(229,97,25)" fg:x="5066" fg:w="9"/><text x="9.7202%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4440%" y="85" width="0.0167%" height="15" fill="rgb(229,182,53)" fg:x="5075" fg:w="9"/><text x="9.7369%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="9.4607%" y="85" width="0.0167%" height="15" fill="rgb(236,124,24)" fg:x="5084" fg:w="9"/><text x="9.7537%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="9.4830%" y="85" width="0.0186%" height="15" fill="rgb(205,155,21)" fg:x="5096" fg:w="10"/><text x="9.7760%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="9.4272%" y="101" width="0.2456%" height="15" fill="rgb(220,133,48)" fg:x="5066" fg:w="132"/><text x="9.7202%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="9.4272%" y="117" width="0.2642%" height="15" fill="rgb(244,64,54)" fg:x="5066" fg:w="142"/><text x="9.7202%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="9.4272%" y="133" width="0.2698%" height="15" fill="rgb(209,88,54)" fg:x="5066" fg:w="145"/><text x="9.7202%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="9.4272%" y="149" width="0.2810%" height="15" fill="rgb(242,211,27)" fg:x="5066" fg:w="151"/><text x="9.7202%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (567 instructions, 1.06%)</title><rect x="8.8001%" y="165" width="1.0551%" height="15" fill="rgb(230,48,25)" fg:x="4729" fg:w="567"/><text x="9.0931%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,078 instructions, 3.87%)</title><rect x="6.2637%" y="181" width="3.8669%" height="15" fill="rgb(218,227,9)" fg:x="3366" fg:w="2078"/><text x="6.5567%" y="191.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.13%)</title><rect x="10.1306%" y="181" width="0.1265%" height="15" fill="rgb(224,213,36)" fg:x="5444" fg:w="68"/><text x="10.4236%" y="191.50"></text></g><g><title>binread::BinRead::read (5,202 instructions, 9.68%)</title><rect x="0.9807%" y="197" width="9.6803%" height="15" fill="rgb(221,223,20)" fg:x="527" fg:w="5202"/><text x="1.2737%" y="207.50">binread::Bin..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.6610%" y="181" width="0.0261%" height="15" fill="rgb(215,148,27)" fg:x="5729" fg:w="14"/><text x="10.9540%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.03%)</title><rect x="10.6870%" y="165" width="0.0261%" height="15" fill="rgb(243,105,38)" fg:x="5743" fg:w="14"/><text x="10.9800%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 instructions, 0.12%)</title><rect x="10.7131%" y="165" width="0.1210%" height="15" fill="rgb(212,163,23)" fg:x="5757" fg:w="65"/><text x="11.0061%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="10.8340%" y="165" width="0.0354%" height="15" fill="rgb(223,193,46)" fg:x="5822" fg:w="19"/><text x="11.1270%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (250 instructions, 0.47%)</title><rect x="10.6870%" y="181" width="0.4652%" height="15" fill="rgb(243,205,38)" fg:x="5743" fg:w="250"/><text x="10.9800%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1523%" y="101" width="0.0167%" height="15" fill="rgb(222,24,26)" fg:x="5993" fg:w="9"/><text x="11.4452%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1690%" y="101" width="0.0167%" height="15" fill="rgb(241,198,51)" fg:x="6002" fg:w="9"/><text x="11.4620%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.1858%" y="101" width="0.0167%" height="15" fill="rgb(249,183,36)" fg:x="6011" fg:w="9"/><text x="11.4787%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.2081%" y="101" width="0.0186%" height="15" fill="rgb(226,126,50)" fg:x="6023" fg:w="10"/><text x="11.5011%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.1523%" y="117" width="0.2456%" height="15" fill="rgb(236,80,31)" fg:x="5993" fg:w="132"/><text x="11.4452%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="11.1523%" y="133" width="0.2642%" height="15" fill="rgb(229,63,41)" fg:x="5993" fg:w="142"/><text x="11.4452%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.1523%" y="149" width="0.2698%" height="15" fill="rgb(228,150,33)" fg:x="5993" fg:w="145"/><text x="11.4452%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.1523%" y="165" width="0.2810%" height="15" fill="rgb(215,220,5)" fg:x="5993" fg:w="151"/><text x="11.4452%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (232 instructions, 0.43%)</title><rect x="11.1523%" y="181" width="0.4317%" height="15" fill="rgb(220,142,36)" fg:x="5993" fg:w="232"/><text x="11.4452%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.5840%" y="85" width="0.0167%" height="15" fill="rgb(216,212,25)" fg:x="6225" fg:w="9"/><text x="11.8770%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.6007%" y="85" width="0.0167%" height="15" fill="rgb(245,102,17)" fg:x="6234" fg:w="9"/><text x="11.8937%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="11.6175%" y="85" width="0.0167%" height="15" fill="rgb(219,148,47)" fg:x="6243" fg:w="9"/><text x="11.9104%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="11.6398%" y="85" width="0.0186%" height="15" fill="rgb(244,26,5)" fg:x="6255" fg:w="10"/><text x="11.9328%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="11.5840%" y="101" width="0.2456%" height="15" fill="rgb(250,99,15)" fg:x="6225" fg:w="132"/><text x="11.8770%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="11.5840%" y="117" width="0.2642%" height="15" fill="rgb(208,47,24)" fg:x="6225" fg:w="142"/><text x="11.8770%" y="127.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="11.5840%" y="133" width="0.2698%" height="15" fill="rgb(214,73,15)" fg:x="6225" fg:w="145"/><text x="11.8770%" y="143.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="11.5840%" y="149" width="0.2810%" height="15" fill="rgb(212,12,11)" fg:x="6225" fg:w="151"/><text x="11.8770%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="11.5840%" y="165" width="0.3405%" height="15" fill="rgb(226,18,19)" fg:x="6225" fg:w="183"/><text x="11.8770%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (253 instructions, 0.47%)</title><rect x="11.5840%" y="181" width="0.4708%" height="15" fill="rgb(233,165,21)" fg:x="6225" fg:w="253"/><text x="11.8770%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (976 instructions, 1.82%)</title><rect x="10.6610%" y="197" width="1.8162%" height="15" fill="rgb(229,55,26)" fg:x="5729" fg:w="976"/><text x="10.9540%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.4772%" y="117" width="0.0167%" height="15" fill="rgb(214,70,20)" fg:x="6705" fg:w="9"/><text x="12.7702%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.4940%" y="117" width="0.0167%" height="15" fill="rgb(248,163,46)" fg:x="6714" fg:w="9"/><text x="12.7869%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="12.5107%" y="117" width="0.0167%" height="15" fill="rgb(215,150,9)" fg:x="6723" fg:w="9"/><text x="12.8037%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="12.5330%" y="117" width="0.0186%" height="15" fill="rgb(229,25,47)" fg:x="6735" fg:w="10"/><text x="12.8260%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="12.4772%" y="133" width="0.2456%" height="15" fill="rgb(211,118,9)" fg:x="6705" fg:w="132"/><text x="12.7702%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="12.4772%" y="149" width="0.2642%" height="15" fill="rgb(207,175,50)" fg:x="6705" fg:w="142"/><text x="12.7702%" y="159.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="12.4772%" y="165" width="0.2698%" height="15" fill="rgb(242,92,34)" fg:x="6705" fg:w="145"/><text x="12.7702%" y="175.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="12.4772%" y="181" width="0.2810%" height="15" fill="rgb(254,202,1)" fg:x="6705" fg:w="151"/><text x="12.7702%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="12.7842%" y="133" width="0.0112%" height="15" fill="rgb(251,226,30)" fg:x="6870" fg:w="6"/><text x="13.0772%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="12.7954%" y="133" width="0.0298%" height="15" fill="rgb(237,39,1)" fg:x="6876" fg:w="16"/><text x="13.0884%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="12.7582%" y="149" width="0.1824%" height="15" fill="rgb(206,73,18)" fg:x="6856" fg:w="98"/><text x="13.0512%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="12.7582%" y="165" width="0.1861%" height="15" fill="rgb(233,39,2)" fg:x="6856" fg:w="100"/><text x="13.0512%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="12.7582%" y="181" width="0.1954%" height="15" fill="rgb(234,95,37)" fg:x="6856" fg:w="105"/><text x="13.0512%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (370 instructions, 0.69%)</title><rect x="12.4772%" y="197" width="0.6885%" height="15" fill="rgb(209,26,25)" fg:x="6705" fg:w="370"/><text x="12.7702%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.1657%" y="133" width="0.0167%" height="15" fill="rgb(206,102,35)" fg:x="7075" fg:w="9"/><text x="13.4587%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.1825%" y="133" width="0.0167%" height="15" fill="rgb(220,171,24)" fg:x="7084" fg:w="9"/><text x="13.4754%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.1992%" y="133" width="0.0167%" height="15" fill="rgb(209,156,46)" fg:x="7093" fg:w="9"/><text x="13.4922%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.2216%" y="133" width="0.0186%" height="15" fill="rgb(231,49,41)" fg:x="7105" fg:w="10"/><text x="13.5145%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.1657%" y="149" width="0.2456%" height="15" fill="rgb(237,61,26)" fg:x="7075" fg:w="132"/><text x="13.4587%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="13.1657%" y="165" width="0.2642%" height="15" fill="rgb(248,118,26)" fg:x="7075" fg:w="142"/><text x="13.4587%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.1657%" y="181" width="0.2698%" height="15" fill="rgb(249,92,2)" fg:x="7075" fg:w="145"/><text x="13.4587%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.4467%" y="133" width="0.0167%" height="15" fill="rgb(243,171,33)" fg:x="7226" fg:w="9"/><text x="13.7397%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.4635%" y="133" width="0.0167%" height="15" fill="rgb(214,21,17)" fg:x="7235" fg:w="9"/><text x="13.7564%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="13.4802%" y="133" width="0.0167%" height="15" fill="rgb(229,3,47)" fg:x="7244" fg:w="9"/><text x="13.7732%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="13.5025%" y="133" width="0.0186%" height="15" fill="rgb(219,66,23)" fg:x="7256" fg:w="10"/><text x="13.7955%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="13.4467%" y="149" width="0.2456%" height="15" fill="rgb(210,152,31)" fg:x="7226" fg:w="132"/><text x="13.7397%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="13.4467%" y="165" width="0.2642%" height="15" fill="rgb(220,195,32)" fg:x="7226" fg:w="142"/><text x="13.7397%" y="175.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="13.4467%" y="181" width="0.2698%" height="15" fill="rgb(254,43,8)" fg:x="7226" fg:w="145"/><text x="13.7397%" y="191.50"></text></g><g><title>__rust_alloc (302 instructions, 0.56%)</title><rect x="13.1657%" y="197" width="0.5620%" height="15" fill="rgb(232,18,25)" fg:x="7075" fg:w="302"/><text x="13.4587%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="13.7538%" y="149" width="0.0112%" height="15" fill="rgb(252,154,42)" fg:x="7391" fg:w="6"/><text x="14.0467%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="13.7649%" y="149" width="0.0298%" height="15" fill="rgb(217,45,19)" fg:x="7397" fg:w="16"/><text x="14.0579%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="13.7277%" y="165" width="0.1824%" height="15" fill="rgb(253,166,47)" fg:x="7377" fg:w="98"/><text x="14.0207%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="13.7277%" y="181" width="0.1861%" height="15" fill="rgb(247,37,15)" fg:x="7377" fg:w="100"/><text x="14.0207%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="13.7277%" y="197" width="0.1954%" height="15" fill="rgb(240,228,28)" fg:x="7377" fg:w="105"/><text x="14.0207%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="13.9231%" y="165" width="0.7685%" height="15" fill="rgb(247,18,43)" fg:x="7482" fg:w="413"/><text x="14.2161%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="13.9231%" y="181" width="0.7760%" height="15" fill="rgb(225,179,2)" fg:x="7482" fg:w="417"/><text x="14.2161%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.81%)</title><rect x="13.9231%" y="197" width="0.8132%" height="15" fill="rgb(242,104,51)" fg:x="7482" fg:w="437"/><text x="14.2161%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.68%)</title><rect x="14.7363%" y="181" width="0.6848%" height="15" fill="rgb(228,38,3)" fg:x="7919" fg:w="368"/><text x="15.0293%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.69%)</title><rect x="14.7363%" y="197" width="0.6922%" height="15" fill="rgb(239,224,48)" fg:x="7919" fg:w="372"/><text x="15.0293%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (8,112 instructions, 15.10%)</title><rect x="0.9807%" y="213" width="15.0955%" height="15" fill="rgb(249,156,8)" fg:x="527" fg:w="8112"/><text x="1.2737%" y="223.50">candid::de::IDLDese..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.71%)</title><rect x="16.0761%" y="197" width="0.7127%" height="15" fill="rgb(248,160,48)" fg:x="8639" fg:w="383"/><text x="16.3691%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.71%)</title><rect x="16.7963%" y="197" width="0.7127%" height="15" fill="rgb(216,136,27)" fg:x="9026" fg:w="383"/><text x="17.0893%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.44%)</title><rect x="16.0761%" y="213" width="1.4403%" height="15" fill="rgb(229,39,24)" fg:x="8639" fg:w="774"/><text x="16.3691%" y="223.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="17.5165%" y="149" width="0.0149%" height="15" fill="rgb(206,221,30)" fg:x="9413" fg:w="8"/><text x="17.8094%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 instructions, 0.10%)</title><rect x="17.5165%" y="165" width="0.1005%" height="15" fill="rgb(251,157,8)" fg:x="9413" fg:w="54"/><text x="17.8094%" y="175.50"></text></g><g><title>candid::types::internal::find_type (73 instructions, 0.14%)</title><rect x="17.5165%" y="181" width="0.1358%" height="15" fill="rgb(234,146,41)" fg:x="9413" fg:w="73"/><text x="17.8094%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.6523%" y="101" width="0.0167%" height="15" fill="rgb(247,150,16)" fg:x="9486" fg:w="9"/><text x="17.9453%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.6691%" y="101" width="0.0167%" height="15" fill="rgb(207,188,24)" fg:x="9495" fg:w="9"/><text x="17.9620%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="17.6858%" y="101" width="0.0167%" height="15" fill="rgb(241,98,8)" fg:x="9504" fg:w="9"/><text x="17.9788%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="17.7081%" y="101" width="0.0186%" height="15" fill="rgb(245,205,22)" fg:x="9516" fg:w="10"/><text x="18.0011%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="17.6523%" y="117" width="0.2456%" height="15" fill="rgb(216,208,1)" fg:x="9486" fg:w="132"/><text x="17.9453%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="17.6523%" y="133" width="0.2642%" height="15" fill="rgb(205,183,39)" fg:x="9486" fg:w="142"/><text x="17.9453%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="17.6523%" y="149" width="0.2698%" height="15" fill="rgb(217,9,17)" fg:x="9486" fg:w="145"/><text x="17.9453%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="17.6523%" y="165" width="0.2810%" height="15" fill="rgb(212,208,1)" fg:x="9486" fg:w="151"/><text x="17.9453%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (196 instructions, 0.36%)</title><rect x="17.6523%" y="181" width="0.3647%" height="15" fill="rgb(244,45,7)" fg:x="9486" fg:w="196"/><text x="17.9453%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="18.0170%" y="149" width="0.0149%" height="15" fill="rgb(252,187,50)" fg:x="9682" fg:w="8"/><text x="18.3100%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="18.0319%" y="133" width="0.1005%" height="15" fill="rgb(212,174,52)" fg:x="9690" fg:w="54"/><text x="18.3249%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="18.1324%" y="133" width="0.1675%" height="15" fill="rgb(216,112,28)" fg:x="9744" fg:w="90"/><text x="18.4254%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.30%)</title><rect x="18.2999%" y="133" width="0.3033%" height="15" fill="rgb(214,175,32)" fg:x="9834" fg:w="163"/><text x="18.5929%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.03%)</title><rect x="18.0319%" y="149" width="1.0346%" height="15" fill="rgb(246,60,30)" fg:x="9690" fg:w="556"/><text x="18.3249%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.18%)</title><rect x="19.0666%" y="149" width="0.1842%" height="15" fill="rgb(228,196,39)" fg:x="10246" fg:w="99"/><text x="19.3596%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (826 instructions, 1.54%)</title><rect x="18.0170%" y="165" width="1.5371%" height="15" fill="rgb(245,101,11)" fg:x="9682" fg:w="826"/><text x="18.3100%" y="175.50"></text></g><g><title>candid::types::internal::env_add (853 instructions, 1.59%)</title><rect x="18.0170%" y="181" width="1.5873%" height="15" fill="rgb(216,2,14)" fg:x="9682" fg:w="853"/><text x="18.3100%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.6044%" y="101" width="0.0167%" height="15" fill="rgb(252,229,37)" fg:x="10535" fg:w="9"/><text x="19.8973%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.6211%" y="101" width="0.0167%" height="15" fill="rgb(247,88,43)" fg:x="10544" fg:w="9"/><text x="19.9141%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="19.6379%" y="101" width="0.0167%" height="15" fill="rgb(231,99,52)" fg:x="10553" fg:w="9"/><text x="19.9308%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.6602%" y="101" width="0.0186%" height="15" fill="rgb(229,122,49)" fg:x="10565" fg:w="10"/><text x="19.9532%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="19.6044%" y="117" width="0.2456%" height="15" fill="rgb(253,141,9)" fg:x="10535" fg:w="132"/><text x="19.8973%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="19.6044%" y="133" width="0.2642%" height="15" fill="rgb(250,13,25)" fg:x="10535" fg:w="142"/><text x="19.8973%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="19.6044%" y="149" width="0.2698%" height="15" fill="rgb(235,150,17)" fg:x="10535" fg:w="145"/><text x="19.8973%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="19.6044%" y="165" width="0.2810%" height="15" fill="rgb(247,9,20)" fg:x="10535" fg:w="151"/><text x="19.8973%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (163 instructions, 0.30%)</title><rect x="19.6044%" y="181" width="0.3033%" height="15" fill="rgb(236,96,39)" fg:x="10535" fg:w="163"/><text x="19.8973%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="19.9077%" y="149" width="0.0149%" height="15" fill="rgb(254,101,30)" fg:x="10698" fg:w="8"/><text x="20.2007%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="19.9226%" y="133" width="0.1005%" height="15" fill="rgb(225,111,36)" fg:x="10706" fg:w="54"/><text x="20.2156%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.17%)</title><rect x="20.0231%" y="133" width="0.1675%" height="15" fill="rgb(238,115,35)" fg:x="10760" fg:w="90"/><text x="20.3160%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.30%)</title><rect x="20.1906%" y="133" width="0.3033%" height="15" fill="rgb(211,65,53)" fg:x="10850" fg:w="163"/><text x="20.4835%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 1.03%)</title><rect x="19.9226%" y="149" width="1.0346%" height="15" fill="rgb(208,168,40)" fg:x="10706" fg:w="556"/><text x="20.2156%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.14%)</title><rect x="20.9572%" y="133" width="0.1377%" height="15" fill="rgb(210,102,33)" fg:x="11262" fg:w="74"/><text x="21.2502%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.15%)</title><rect x="20.9572%" y="149" width="0.1451%" height="15" fill="rgb(238,224,11)" fg:x="11262" fg:w="78"/><text x="21.2502%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="21.1284%" y="85" width="0.0112%" height="15" fill="rgb(212,94,13)" fg:x="11354" fg:w="6"/><text x="21.4214%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="21.1396%" y="85" width="0.0298%" height="15" fill="rgb(237,24,19)" fg:x="11360" fg:w="16"/><text x="21.4326%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="21.1024%" y="101" width="0.1824%" height="15" fill="rgb(214,161,25)" fg:x="11340" fg:w="98"/><text x="21.3954%" y="111.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="21.1024%" y="117" width="0.1861%" height="15" fill="rgb(227,216,29)" fg:x="11340" fg:w="100"/><text x="21.3954%" y="127.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.20%)</title><rect x="21.1024%" y="133" width="0.1954%" height="15" fill="rgb(215,180,53)" fg:x="11340" fg:w="105"/><text x="21.3954%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.25%)</title><rect x="21.1024%" y="149" width="0.2549%" height="15" fill="rgb(224,202,48)" fg:x="11340" fg:w="137"/><text x="21.3954%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (952 instructions, 1.77%)</title><rect x="19.9077%" y="165" width="1.7716%" height="15" fill="rgb(238,143,48)" fg:x="10698" fg:w="952"/><text x="20.2007%" y="175.50"></text></g><g><title>candid::types::internal::env_add (979 instructions, 1.82%)</title><rect x="19.9077%" y="181" width="1.8218%" height="15" fill="rgb(223,55,51)" fg:x="10698" fg:w="979"/><text x="20.2007%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (8 instructions, 0.01%)</title><rect x="21.7295%" y="149" width="0.0149%" height="15" fill="rgb(221,190,2)" fg:x="11677" fg:w="8"/><text x="22.0225%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.10%)</title><rect x="21.7444%" y="117" width="0.1005%" height="15" fill="rgb(212,22,43)" fg:x="11685" fg:w="54"/><text x="22.0374%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="21.7444%" y="133" width="0.1470%" height="15" fill="rgb(251,201,54)" fg:x="11685" fg:w="79"/><text x="22.0374%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.56%)</title><rect x="21.7444%" y="149" width="0.5638%" height="15" fill="rgb(215,112,25)" fg:x="11685" fg:w="303"/><text x="22.0374%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (18 instructions, 0.03%)</title><rect x="22.3082%" y="149" width="0.0335%" height="15" fill="rgb(235,74,17)" fg:x="11988" fg:w="18"/><text x="22.6012%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.3417%" y="149" width="0.0205%" height="15" fill="rgb(216,127,34)" fg:x="12006" fg:w="11"/><text x="22.6347%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (521 instructions, 0.97%)</title><rect x="21.7295%" y="165" width="0.9695%" height="15" fill="rgb(224,150,51)" fg:x="11677" fg:w="521"/><text x="22.0225%" y="175.50"></text></g><g><title>candid::types::internal::env_id (559 instructions, 1.04%)</title><rect x="21.7295%" y="181" width="1.0402%" height="15" fill="rgb(212,75,53)" fg:x="11677" fg:w="559"/><text x="22.0225%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,931 instructions, 5.45%)</title><rect x="17.5165%" y="197" width="5.4542%" height="15" fill="rgb(247,166,25)" fg:x="9413" fg:w="2931"/><text x="17.8094%" y="207.50">candi..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.07%)</title><rect x="22.9707%" y="197" width="0.0707%" height="15" fill="rgb(248,99,0)" fg:x="12344" fg:w="38"/><text x="23.2637%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.0675%" y="133" width="0.0112%" height="15" fill="rgb(205,163,23)" fg:x="12396" fg:w="6"/><text x="23.3604%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.0861%" y="133" width="0.0186%" height="15" fill="rgb(205,211,13)" fg:x="12406" fg:w="10"/><text x="23.3791%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="23.0414%" y="149" width="0.2624%" height="15" fill="rgb(206,198,5)" fg:x="12382" fg:w="141"/><text x="23.3344%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="23.0414%" y="165" width="0.2661%" height="15" fill="rgb(250,20,48)" fg:x="12382" fg:w="143"/><text x="23.3344%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="23.0414%" y="181" width="0.2754%" height="15" fill="rgb(207,8,44)" fg:x="12382" fg:w="148"/><text x="23.3344%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="23.4024%" y="133" width="0.0112%" height="15" fill="rgb(234,52,14)" fg:x="12576" fg:w="6"/><text x="23.6954%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="23.4210%" y="133" width="0.0186%" height="15" fill="rgb(254,179,48)" fg:x="12586" fg:w="10"/><text x="23.7140%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.26%)</title><rect x="23.3764%" y="149" width="0.2624%" height="15" fill="rgb(214,142,5)" fg:x="12562" fg:w="141"/><text x="23.6694%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.27%)</title><rect x="23.3764%" y="165" width="0.2661%" height="15" fill="rgb(211,36,7)" fg:x="12562" fg:w="143"/><text x="23.6694%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.28%)</title><rect x="23.3764%" y="181" width="0.2754%" height="15" fill="rgb(231,223,25)" fg:x="12562" fg:w="148"/><text x="23.6694%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.67%)</title><rect x="23.0414%" y="197" width="0.6699%" height="15" fill="rgb(225,171,54)" fg:x="12382" fg:w="360"/><text x="23.3344%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="23.7113%" y="181" width="0.0521%" height="15" fill="rgb(250,162,12)" fg:x="12742" fg:w="28"/><text x="24.0043%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (105 instructions, 0.20%)</title><rect x="23.7113%" y="197" width="0.1954%" height="15" fill="rgb(241,95,18)" fg:x="12742" fg:w="105"/><text x="24.0043%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.9067%" y="197" width="0.0205%" height="15" fill="rgb(251,72,16)" fg:x="12847" fg:w="11"/><text x="24.1997%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.9272%" y="197" width="0.0205%" height="15" fill="rgb(210,190,42)" fg:x="12858" fg:w="11"/><text x="24.2202%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.9477%" y="197" width="0.0205%" height="15" fill="rgb(221,117,44)" fg:x="12869" fg:w="11"/><text x="24.2406%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,639 instructions, 6.77%)</title><rect x="17.5165%" y="213" width="6.7717%" height="15" fill="rgb(239,0,50)" fg:x="9413" fg:w="3639"/><text x="17.8094%" y="223.50">candid:..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.77%)</title><rect x="24.2882%" y="197" width="0.7685%" height="15" fill="rgb(241,161,41)" fg:x="13052" fg:w="413"/><text x="24.5812%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.78%)</title><rect x="24.2882%" y="213" width="0.7760%" height="15" fill="rgb(214,56,49)" fg:x="13052" fg:w="417"/><text x="24.5812%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.04%)</title><rect x="25.0642%" y="197" width="0.0354%" height="15" fill="rgb(208,229,42)" fg:x="13469" fg:w="19"/><text x="25.3572%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.1405%" y="149" width="0.0112%" height="15" fill="rgb(222,42,23)" fg:x="13510" fg:w="6"/><text x="25.4335%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.1591%" y="149" width="0.0186%" height="15" fill="rgb(241,88,54)" fg:x="13520" fg:w="10"/><text x="25.4521%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.36%)</title><rect x="25.0996%" y="165" width="0.3591%" height="15" fill="rgb(252,220,33)" fg:x="13488" fg:w="193"/><text x="25.3925%" y="175.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.36%)</title><rect x="25.0996%" y="181" width="0.3629%" height="15" fill="rgb(252,229,14)" fg:x="13488" fg:w="195"/><text x="25.3925%" y="191.50"></text></g><g><title>__rust_dealloc (200 instructions, 0.37%)</title><rect x="25.0996%" y="197" width="0.3722%" height="15" fill="rgb(238,44,35)" fg:x="13488" fg:w="200"/><text x="25.3925%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="25.5127%" y="133" width="0.0112%" height="15" fill="rgb(230,51,19)" fg:x="13710" fg:w="6"/><text x="25.8056%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="25.5313%" y="133" width="0.0186%" height="15" fill="rgb(221,53,52)" fg:x="13720" fg:w="10"/><text x="25.8243%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::leftshift_for_tree_index (10 instructions, 0.02%)</title><rect x="25.5518%" y="117" width="0.0186%" height="15" fill="rgb(224,183,48)" fg:x="13731" fg:w="10"/><text x="25.8447%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (113 instructions, 0.21%)</title><rect x="25.5499%" y="133" width="0.2103%" height="15" fill="rgb(215,91,27)" fg:x="13730" fg:w="113"/><text x="25.8429%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (282 instructions, 0.52%)</title><rect x="25.4717%" y="149" width="0.5248%" height="15" fill="rgb(230,169,8)" fg:x="13688" fg:w="282"/><text x="25.7647%" y="159.50"></text></g><g><title>__rdl_dealloc (284 instructions, 0.53%)</title><rect x="25.4717%" y="165" width="0.5285%" height="15" fill="rgb(205,121,30)" fg:x="13688" fg:w="284"/><text x="25.7647%" y="175.50"></text></g><g><title>__rust_dealloc (289 instructions, 0.54%)</title><rect x="25.4717%" y="181" width="0.5378%" height="15" fill="rgb(243,69,51)" fg:x="13688" fg:w="289"/><text x="25.7647%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (321 instructions, 0.60%)</title><rect x="25.4717%" y="197" width="0.5973%" height="15" fill="rgb(233,155,32)" fg:x="13688" fg:w="321"/><text x="25.7647%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="26.0691%" y="197" width="0.0205%" height="15" fill="rgb(252,188,18)" fg:x="14009" fg:w="11"/><text x="26.3620%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (653 instructions, 1.22%)</title><rect x="25.0642%" y="213" width="1.2152%" height="15" fill="rgb(206,90,41)" fg:x="13469" fg:w="653"/><text x="25.3572%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,698 instructions, 25.49%)</title><rect x="0.9807%" y="229" width="25.4903%" height="15" fill="rgb(236,98,13)" fg:x="527" fg:w="13698"/><text x="1.2737%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="26.4971%" y="181" width="0.0112%" height="15" fill="rgb(254,52,52)" fg:x="14239" fg:w="6"/><text x="26.7900%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="26.5157%" y="181" width="0.1023%" height="15" fill="rgb(211,64,22)" fg:x="14249" fg:w="55"/><text x="26.8087%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="26.6180%" y="181" width="0.0186%" height="15" fill="rgb(241,212,17)" fg:x="14304" fg:w="10"/><text x="26.9110%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::leftshift_for_tree_index (10 instructions, 0.02%)</title><rect x="26.6385%" y="165" width="0.0186%" height="15" fill="rgb(240,162,6)" fg:x="14315" fg:w="10"/><text x="26.9315%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (113 instructions, 0.21%)</title><rect x="26.6366%" y="181" width="0.2103%" height="15" fill="rgb(210,38,37)" fg:x="14314" fg:w="113"/><text x="26.9296%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (266 instructions, 0.49%)</title><rect x="26.4710%" y="197" width="0.4950%" height="15" fill="rgb(248,128,25)" fg:x="14225" fg:w="266"/><text x="26.7640%" y="207.50"></text></g><g><title>__rdl_dealloc (268 instructions, 0.50%)</title><rect x="26.4710%" y="213" width="0.4987%" height="15" fill="rgb(227,29,38)" fg:x="14225" fg:w="268"/><text x="26.7640%" y="223.50"></text></g><g><title>__rust_dealloc (273 instructions, 0.51%)</title><rect x="26.4710%" y="229" width="0.5080%" height="15" fill="rgb(221,71,46)" fg:x="14225" fg:w="273"/><text x="26.7640%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (14,223 instructions, 26.47%)</title><rect x="0.5880%" y="245" width="26.4673%" height="15" fill="rgb(228,93,53)" fg:x="316" fg:w="14223"/><text x="0.8810%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>heap::MAP::__getit (6 instructions, 0.01%)</title><rect x="27.0553%" y="245" width="0.0112%" height="15" fill="rgb(209,182,47)" fg:x="14539" fg:w="6"/><text x="27.3483%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="27.0665%" y="245" width="1.3529%" height="15" fill="rgb(253,115,26)" fg:x="14545" fg:w="727"/><text x="27.3595%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="28.4194%" y="245" width="1.2747%" height="15" fill="rgb(206,183,47)" fg:x="15272" fg:w="685"/><text x="28.7123%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="29.6941%" y="245" width="1.4068%" height="15" fill="rgb(231,218,0)" fg:x="15957" fg:w="756"/><text x="29.9870%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="31.1009%" y="245" width="1.3529%" height="15" fill="rgb(249,25,34)" fg:x="16713" fg:w="727"/><text x="31.3939%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="32.4538%" y="245" width="1.2747%" height="15" fill="rgb(222,129,34)" fg:x="17440" fg:w="685"/><text x="32.7467%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="33.7285%" y="245" width="1.4068%" height="15" fill="rgb(249,135,13)" fg:x="18125" fg:w="756"/><text x="34.0214%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="35.1353%" y="245" width="1.3529%" height="15" fill="rgb(224,166,14)" fg:x="18881" fg:w="727"/><text x="35.4283%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="36.4881%" y="245" width="1.3529%" height="15" fill="rgb(237,213,32)" fg:x="19608" fg:w="727"/><text x="36.7811%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="37.8410%" y="245" width="1.3529%" height="15" fill="rgb(217,154,11)" fg:x="20335" fg:w="727"/><text x="38.1340%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.46%)</title><rect x="39.1939%" y="245" width="1.4608%" height="15" fill="rgb(215,53,20)" fg:x="21062" fg:w="785"/><text x="39.4868%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="40.6547%" y="245" width="1.3529%" height="15" fill="rgb(247,126,4)" fg:x="21847" fg:w="727"/><text x="40.9476%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="42.0075%" y="245" width="1.3529%" height="15" fill="rgb(223,51,13)" fg:x="22574" fg:w="727"/><text x="42.3005%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="43.3604%" y="245" width="1.3529%" height="15" fill="rgb(245,41,0)" fg:x="23301" fg:w="727"/><text x="43.6533%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.51%)</title><rect x="44.7132%" y="245" width="1.5148%" height="15" fill="rgb(241,209,23)" fg:x="24028" fg:w="814"/><text x="45.0062%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.33%)</title><rect x="46.2280%" y="245" width="1.3287%" height="15" fill="rgb(244,112,2)" fg:x="24842" fg:w="714"/><text x="46.5210%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="47.5567%" y="245" width="1.4068%" height="15" fill="rgb(236,112,3)" fg:x="25556" fg:w="756"/><text x="47.8496%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="48.9635%" y="245" width="1.3529%" height="15" fill="rgb(252,179,6)" fg:x="26312" fg:w="727"/><text x="49.2565%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.33%)</title><rect x="50.3163%" y="245" width="1.3287%" height="15" fill="rgb(223,135,9)" fg:x="27039" fg:w="714"/><text x="50.6093%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (714 instructions, 1.33%)</title><rect x="51.6450%" y="245" width="1.3287%" height="15" fill="rgb(224,14,51)" fg:x="27753" fg:w="714"/><text x="51.9380%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="52.9737%" y="245" width="1.3529%" height="15" fill="rgb(238,127,20)" fg:x="28467" fg:w="727"/><text x="53.2667%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="54.3265%" y="245" width="1.3529%" height="15" fill="rgb(232,221,54)" fg:x="29194" fg:w="727"/><text x="54.6195%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="55.6794%" y="245" width="1.4068%" height="15" fill="rgb(254,4,48)" fg:x="29921" fg:w="756"/><text x="55.9724%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="57.0862%" y="245" width="1.2747%" height="15" fill="rgb(213,177,40)" fg:x="30677" fg:w="685"/><text x="57.3792%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.46%)</title><rect x="58.3609%" y="245" width="1.4608%" height="15" fill="rgb(206,223,19)" fg:x="31362" fg:w="785"/><text x="58.6539%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="59.8217%" y="245" width="1.3529%" height="15" fill="rgb(207,9,6)" fg:x="32147" fg:w="727"/><text x="60.1147%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="61.1746%" y="245" width="1.4068%" height="15" fill="rgb(247,75,7)" fg:x="32874" fg:w="756"/><text x="61.4676%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="62.5814%" y="245" width="1.3529%" height="15" fill="rgb(230,49,37)" fg:x="33630" fg:w="727"/><text x="62.8744%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="63.9343%" y="245" width="1.4068%" height="15" fill="rgb(211,225,40)" fg:x="34357" fg:w="756"/><text x="64.2272%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="65.3411%" y="245" width="1.3529%" height="15" fill="rgb(244,118,17)" fg:x="35113" fg:w="727"/><text x="65.6341%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="66.6940%" y="245" width="1.2747%" height="15" fill="rgb(248,38,31)" fg:x="35840" fg:w="685"/><text x="66.9869%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="67.9687%" y="245" width="1.4068%" height="15" fill="rgb(216,229,52)" fg:x="36525" fg:w="756"/><text x="68.2616%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="69.3755%" y="245" width="1.3529%" height="15" fill="rgb(244,187,12)" fg:x="37281" fg:w="727"/><text x="69.6685%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="70.7283%" y="245" width="1.3529%" height="15" fill="rgb(231,104,36)" fg:x="38008" fg:w="727"/><text x="71.0213%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="72.0812%" y="245" width="1.2747%" height="15" fill="rgb(241,93,12)" fg:x="38735" fg:w="685"/><text x="72.3742%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="73.3559%" y="245" width="1.4068%" height="15" fill="rgb(234,229,11)" fg:x="39420" fg:w="756"/><text x="73.6489%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="74.7627%" y="245" width="1.4068%" height="15" fill="rgb(234,108,46)" fg:x="40176" fg:w="756"/><text x="75.0557%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="76.1696%" y="245" width="1.2747%" height="15" fill="rgb(248,81,2)" fg:x="40932" fg:w="685"/><text x="76.4625%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.46%)</title><rect x="77.4443%" y="245" width="1.4608%" height="15" fill="rgb(216,91,37)" fg:x="41617" fg:w="785"/><text x="77.7372%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="78.9051%" y="245" width="1.2747%" height="15" fill="rgb(240,108,48)" fg:x="42402" fg:w="685"/><text x="79.1980%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.51%)</title><rect x="80.1798%" y="245" width="1.5148%" height="15" fill="rgb(235,201,43)" fg:x="43087" fg:w="814"/><text x="80.4727%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (685 instructions, 1.27%)</title><rect x="81.6945%" y="245" width="1.2747%" height="15" fill="rgb(207,62,39)" fg:x="43901" fg:w="685"/><text x="81.9875%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.51%)</title><rect x="82.9692%" y="245" width="1.5148%" height="15" fill="rgb(252,68,15)" fg:x="44586" fg:w="814"/><text x="83.2622%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.46%)</title><rect x="84.4840%" y="245" width="1.4608%" height="15" fill="rgb(215,117,27)" fg:x="45400" fg:w="785"/><text x="84.7769%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (814 instructions, 1.51%)</title><rect x="85.9448%" y="245" width="1.5148%" height="15" fill="rgb(208,134,19)" fg:x="46185" fg:w="814"/><text x="86.2377%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (756 instructions, 1.41%)</title><rect x="87.4595%" y="245" width="1.4068%" height="15" fill="rgb(246,209,6)" fg:x="46999" fg:w="756"/><text x="87.7525%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="88.8664%" y="245" width="1.3529%" height="15" fill="rgb(211,8,28)" fg:x="47755" fg:w="727"/><text x="89.1593%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (785 instructions, 1.46%)</title><rect x="90.2192%" y="245" width="1.4608%" height="15" fill="rgb(233,62,4)" fg:x="48482" fg:w="785"/><text x="90.5122%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (743 instructions, 1.38%)</title><rect x="91.6800%" y="245" width="1.3826%" height="15" fill="rgb(247,187,9)" fg:x="49267" fg:w="743"/><text x="91.9730%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="93.0626%" y="245" width="1.3529%" height="15" fill="rgb(225,202,45)" fg:x="50010" fg:w="727"/><text x="93.3556%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (727 instructions, 1.35%)</title><rect x="94.4155%" y="245" width="1.3529%" height="15" fill="rgb(254,160,32)" fg:x="50737" fg:w="727"/><text x="94.7085%" y="255.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="95.7684%" y="213" width="0.0149%" height="15" fill="rgb(241,141,46)" fg:x="51464" fg:w="8"/><text x="96.0613%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.10%)</title><rect x="95.8242%" y="133" width="0.1023%" height="15" fill="rgb(252,84,12)" fg:x="51494" fg:w="55"/><text x="96.1172%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="95.9265%" y="133" width="0.0112%" height="15" fill="rgb(250,18,30)" fg:x="51549" fg:w="6"/><text x="96.2195%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="95.9377%" y="133" width="0.0186%" height="15" fill="rgb(212,117,4)" fg:x="51555" fg:w="10"/><text x="96.2307%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (158 instructions, 0.29%)</title><rect x="95.7832%" y="149" width="0.2940%" height="15" fill="rgb(224,149,53)" fg:x="51472" fg:w="158"/><text x="96.0762%" y="159.50"></text></g><g><title>__rdl_dealloc (160 instructions, 0.30%)</title><rect x="95.7832%" y="165" width="0.2977%" height="15" fill="rgb(217,131,54)" fg:x="51472" fg:w="160"/><text x="96.0762%" y="175.50"></text></g><g><title>__rust_dealloc (165 instructions, 0.31%)</title><rect x="95.7832%" y="181" width="0.3070%" height="15" fill="rgb(212,89,28)" fg:x="51472" fg:w="165"/><text x="96.0762%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (197 instructions, 0.37%)</title><rect x="95.7832%" y="197" width="0.3666%" height="15" fill="rgb(219,181,35)" fg:x="51472" fg:w="197"/><text x="96.0762%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.25%)</title><rect x="96.1498%" y="181" width="0.2512%" height="15" fill="rgb(225,117,18)" fg:x="51669" fg:w="135"/><text x="96.4428%" y="191.50"></text></g><g><title>memset (139 instructions, 0.26%)</title><rect x="96.1498%" y="197" width="0.2587%" height="15" fill="rgb(238,102,30)" fg:x="51669" fg:w="139"/><text x="96.4428%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (411 instructions, 0.76%)</title><rect x="95.7832%" y="213" width="0.7648%" height="15" fill="rgb(247,179,54)" fg:x="51472" fg:w="411"/><text x="96.0762%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (504 instructions, 0.94%)</title><rect x="95.7684%" y="229" width="0.9379%" height="15" fill="rgb(236,140,7)" fg:x="51464" fg:w="504"/><text x="96.0613%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.06%)</title><rect x="96.7118%" y="197" width="0.0614%" height="15" fill="rgb(210,180,16)" fg:x="51971" fg:w="33"/><text x="97.0048%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.16%)</title><rect x="96.7118%" y="213" width="0.1638%" height="15" fill="rgb(245,110,3)" fg:x="51971" fg:w="88"/><text x="97.0048%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.8756%" y="101" width="0.0167%" height="15" fill="rgb(247,0,20)" fg:x="52059" fg:w="9"/><text x="97.1686%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.8923%" y="101" width="0.0167%" height="15" fill="rgb(214,128,38)" fg:x="52068" fg:w="9"/><text x="97.1853%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.02%)</title><rect x="96.9091%" y="101" width="0.0167%" height="15" fill="rgb(244,88,52)" fg:x="52077" fg:w="9"/><text x="97.2020%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="96.9314%" y="101" width="0.0186%" height="15" fill="rgb(242,108,10)" fg:x="52089" fg:w="10"/><text x="97.2244%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.25%)</title><rect x="96.8756%" y="117" width="0.2456%" height="15" fill="rgb(225,62,23)" fg:x="52059" fg:w="132"/><text x="97.1686%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.26%)</title><rect x="96.8756%" y="133" width="0.2642%" height="15" fill="rgb(247,94,48)" fg:x="52059" fg:w="142"/><text x="97.1686%" y="143.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.27%)</title><rect x="96.8756%" y="149" width="0.2698%" height="15" fill="rgb(235,82,49)" fg:x="52059" fg:w="145"/><text x="97.1686%" y="159.50"></text></g><g><title>__rust_alloc (151 instructions, 0.28%)</title><rect x="96.8756%" y="165" width="0.2810%" height="15" fill="rgb(234,129,26)" fg:x="52059" fg:w="151"/><text x="97.1686%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (183 instructions, 0.34%)</title><rect x="96.8756%" y="181" width="0.3405%" height="15" fill="rgb(214,152,27)" fg:x="52059" fg:w="183"/><text x="97.1686%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 instructions, 0.47%)</title><rect x="96.8756%" y="197" width="0.4652%" height="15" fill="rgb(227,103,4)" fg:x="52059" fg:w="250"/><text x="97.1686%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="97.3408%" y="197" width="0.0186%" height="15" fill="rgb(210,226,5)" fg:x="52309" fg:w="10"/><text x="97.6338%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.3594%" y="181" width="0.0205%" height="15" fill="rgb(221,42,42)" fg:x="52319" fg:w="11"/><text x="97.6524%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="97.3873%" y="181" width="0.0205%" height="15" fill="rgb(251,57,43)" fg:x="52334" fg:w="11"/><text x="97.6803%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="97.3594%" y="197" width="0.0558%" height="15" fill="rgb(248,165,14)" fg:x="52319" fg:w="30"/><text x="97.6524%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (492 instructions, 0.92%)</title><rect x="96.8756%" y="213" width="0.9156%" height="15" fill="rgb(212,199,47)" fg:x="52059" fg:w="492"/><text x="97.1686%" y="223.50"></text></g><g><title>candid::ser::TypeSerialize::get_result (6 instructions, 0.01%)</title><rect x="97.7911%" y="213" width="0.0112%" height="15" fill="rgb(219,183,40)" fg:x="52551" fg:w="6"/><text x="98.0841%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.06%)</title><rect x="97.8023%" y="197" width="0.0577%" height="15" fill="rgb(251,221,17)" fg:x="52557" fg:w="31"/><text x="98.0953%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.16%)</title><rect x="97.8023%" y="213" width="0.1600%" height="15" fill="rgb(231,195,35)" fg:x="52557" fg:w="86"/><text x="98.0953%" y="223.50"></text></g><g><title>candid::ser::ValueSerializer::get_result (6 instructions, 0.01%)</title><rect x="97.9623%" y="213" width="0.0112%" height="15" fill="rgb(238,95,48)" fg:x="52643" fg:w="6"/><text x="98.2553%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.03%)</title><rect x="97.9735%" y="213" width="0.0279%" height="15" fill="rgb(210,129,15)" fg:x="52649" fg:w="15"/><text x="98.2665%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (772 instructions, 1.44%)</title><rect x="96.7118%" y="229" width="1.4366%" height="15" fill="rgb(211,79,18)" fg:x="51971" fg:w="772"/><text x="97.0048%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.1838%" y="181" width="0.0112%" height="15" fill="rgb(245,8,31)" fg:x="52762" fg:w="6"/><text x="98.4767%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.1949%" y="181" width="0.0186%" height="15" fill="rgb(246,113,24)" fg:x="52768" fg:w="10"/><text x="98.4879%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.13%)</title><rect x="98.1577%" y="197" width="0.1303%" height="15" fill="rgb(211,66,48)" fg:x="52748" fg:w="70"/><text x="98.4507%" y="207.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.13%)</title><rect x="98.1577%" y="213" width="0.1340%" height="15" fill="rgb(210,213,7)" fg:x="52748" fg:w="72"/><text x="98.4507%" y="223.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.14%)</title><rect x="98.1577%" y="229" width="0.1433%" height="15" fill="rgb(227,119,25)" fg:x="52748" fg:w="77"/><text x="98.4507%" y="239.50"></text></g><g><title>candid::utils::write_args (1,437 instructions, 2.67%)</title><rect x="95.7684%" y="245" width="2.6741%" height="15" fill="rgb(209,168,45)" fg:x="51464" fg:w="1437"/><text x="96.0613%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.4685%" y="197" width="0.0112%" height="15" fill="rgb(208,127,50)" fg:x="52915" fg:w="6"/><text x="98.7615%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="98.4797%" y="197" width="0.0298%" height="15" fill="rgb(218,81,12)" fg:x="52921" fg:w="16"/><text x="98.7726%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.18%)</title><rect x="98.4424%" y="213" width="0.1824%" height="15" fill="rgb(235,49,39)" fg:x="52901" fg:w="98"/><text x="98.7354%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.19%)</title><rect x="98.4424%" y="229" width="0.1861%" height="15" fill="rgb(233,29,3)" fg:x="52901" fg:w="100"/><text x="98.7354%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::cinuse (6 instructions, 0.01%)</title><rect x="98.6788%" y="197" width="0.0112%" height="15" fill="rgb(233,127,5)" fg:x="53028" fg:w="6"/><text x="98.9717%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="98.6899%" y="197" width="0.0186%" height="15" fill="rgb(218,104,13)" fg:x="53034" fg:w="10"/><text x="98.9829%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (122 instructions, 0.23%)</title><rect x="98.6378%" y="213" width="0.2270%" height="15" fill="rgb(236,91,17)" fg:x="53006" fg:w="122"/><text x="98.9308%" y="223.50"></text></g><g><title>__rdl_dealloc (124 instructions, 0.23%)</title><rect x="98.6378%" y="229" width="0.2307%" height="15" fill="rgb(252,50,23)" fg:x="53006" fg:w="124"/><text x="98.9308%" y="239.50"></text></g><g><title>__rust_dealloc (234 instructions, 0.44%)</title><rect x="98.4424%" y="245" width="0.4354%" height="15" fill="rgb(239,19,13)" fg:x="52901" fg:w="234"/><text x="98.7354%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (53,727 instructions, 99.98%)</title><rect x="0.0149%" y="261" width="99.9795%" height="15" fill="rgb(222,141,12)" fg:x="8" fg:w="53727"/><text x="0.3079%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (53,738 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(253,70,50)" fg:x="0" fg:w="53738"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_remove (53,738 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(214,140,50)" fg:x="0" fg:w="53738"/><text x="0.2930%" y="287.50">canister_update batch_remove</text></g></svg></svg>