<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="45732"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0415%" height="15" fill="rgb(207,24,29)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0415%" y="197" width="0.1662%" height="15" fill="rgb(220,2,33)" fg:x="19" fg:w="76"/><text x="0.3345%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2077%" y="197" width="0.1662%" height="15" fill="rgb(228,86,36)" fg:x="95" fg:w="76"/><text x="0.5007%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3739%" y="165" width="0.1662%" height="15" fill="rgb(223,208,42)" fg:x="171" fg:w="76"/><text x="0.6669%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="0.5401%" y="149" width="0.1509%" height="15" fill="rgb(218,44,48)" fg:x="247" fg:w="69"/><text x="0.8331%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="0.6910%" y="149" width="0.8878%" height="15" fill="rgb(234,40,27)" fg:x="316" fg:w="406"/><text x="0.9840%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="1.5788%" y="149" width="0.1793%" height="15" fill="rgb(215,67,39)" fg:x="722" fg:w="82"/><text x="1.8717%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.7581%" y="149" width="0.1181%" height="15" fill="rgb(245,215,47)" fg:x="804" fg:w="54"/><text x="2.0510%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8761%" y="149" width="0.1181%" height="15" fill="rgb(239,81,12)" fg:x="858" fg:w="54"/><text x="2.1691%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9942%" y="149" width="0.1181%" height="15" fill="rgb(250,197,9)" fg:x="912" fg:w="54"/><text x="2.2872%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.1123%" y="149" width="0.1181%" height="15" fill="rgb(233,43,0)" fg:x="966" fg:w="54"/><text x="2.4053%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="2.2304%" y="149" width="0.1509%" height="15" fill="rgb(205,119,13)" fg:x="1020" fg:w="69"/><text x="2.5234%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="2.3813%" y="149" width="0.1421%" height="15" fill="rgb(254,71,54)" fg:x="1089" fg:w="65"/><text x="2.6742%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="2.5234%" y="149" width="0.8878%" height="15" fill="rgb(235,46,23)" fg:x="1154" fg:w="406"/><text x="2.8164%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="3.4112%" y="149" width="0.0350%" height="15" fill="rgb(244,41,52)" fg:x="1560" fg:w="16"/><text x="3.7041%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.4462%" y="133" width="0.1662%" height="15" fill="rgb(230,50,50)" fg:x="1576" fg:w="76"/><text x="3.7391%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="3.6124%" y="101" width="0.1312%" height="15" fill="rgb(209,95,9)" fg:x="1652" fg:w="60"/><text x="3.9053%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="3.6124%" y="117" width="0.1859%" height="15" fill="rgb(223,185,18)" fg:x="1652" fg:w="85"/><text x="3.9053%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.7982%" y="69" width="0.0197%" height="15" fill="rgb(210,37,52)" fg:x="1737" fg:w="9"/><text x="4.0912%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.8179%" y="53" width="0.0656%" height="15" fill="rgb(251,216,17)" fg:x="1746" fg:w="30"/><text x="4.1109%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.8179%" y="69" width="0.1203%" height="15" fill="rgb(223,158,7)" fg:x="1746" fg:w="55"/><text x="4.1109%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="3.7982%" y="85" width="0.2580%" height="15" fill="rgb(209,69,45)" fg:x="1737" fg:w="118"/><text x="4.0912%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="3.7982%" y="101" width="0.3739%" height="15" fill="rgb(243,91,38)" fg:x="1737" fg:w="171"/><text x="4.0912%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="3.7982%" y="117" width="0.3849%" height="15" fill="rgb(251,146,15)" fg:x="1737" fg:w="176"/><text x="4.0912%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="3.6124%" y="133" width="0.8134%" height="15" fill="rgb(254,36,25)" fg:x="1652" fg:w="372"/><text x="3.9053%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.29%)</title><rect x="3.4462%" y="149" width="1.2879%" height="15" fill="rgb(218,202,43)" fg:x="1576" fg:w="589"/><text x="3.7391%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="4.7341%" y="149" width="0.1793%" height="15" fill="rgb(216,65,14)" fg:x="2165" fg:w="82"/><text x="5.0271%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="4.9134%" y="149" width="0.1203%" height="15" fill="rgb(231,81,9)" fg:x="2247" fg:w="55"/><text x="5.2064%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="5.0337%" y="149" width="0.1378%" height="15" fill="rgb(223,50,38)" fg:x="2302" fg:w="63"/><text x="5.3266%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.14%)</title><rect x="5.1714%" y="149" width="0.1421%" height="15" fill="rgb(221,42,34)" fg:x="2365" fg:w="65"/><text x="5.4644%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.89%)</title><rect x="5.3136%" y="133" width="0.8878%" height="15" fill="rgb(237,133,32)" fg:x="2430" fg:w="406"/><text x="5.6065%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="6.2013%" y="133" width="0.0350%" height="15" fill="rgb(254,92,49)" fg:x="2836" fg:w="16"/><text x="6.4943%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.2363%" y="117" width="0.1662%" height="15" fill="rgb(235,70,7)" fg:x="2852" fg:w="76"/><text x="6.5293%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.13%)</title><rect x="6.4025%" y="85" width="0.1312%" height="15" fill="rgb(217,86,44)" fg:x="2928" fg:w="60"/><text x="6.6955%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="6.4025%" y="101" width="0.1859%" height="15" fill="rgb(227,227,11)" fg:x="2928" fg:w="85"/><text x="6.6955%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.5884%" y="53" width="0.0197%" height="15" fill="rgb(251,41,37)" fg:x="3013" fg:w="9"/><text x="6.8814%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.6081%" y="37" width="0.0656%" height="15" fill="rgb(210,223,3)" fg:x="3022" fg:w="30"/><text x="6.9010%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.6081%" y="53" width="0.1203%" height="15" fill="rgb(206,30,15)" fg:x="3022" fg:w="55"/><text x="6.9010%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.26%)</title><rect x="6.5884%" y="69" width="0.2580%" height="15" fill="rgb(250,182,26)" fg:x="3013" fg:w="118"/><text x="6.8814%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.37%)</title><rect x="6.5884%" y="85" width="0.3739%" height="15" fill="rgb(247,32,48)" fg:x="3013" fg:w="171"/><text x="6.8814%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.38%)</title><rect x="6.5884%" y="101" width="0.3849%" height="15" fill="rgb(237,9,15)" fg:x="3013" fg:w="176"/><text x="6.8814%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.81%)</title><rect x="6.4025%" y="117" width="0.8134%" height="15" fill="rgb(250,167,42)" fg:x="2928" fg:w="372"/><text x="6.6955%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.29%)</title><rect x="6.2363%" y="133" width="1.2879%" height="15" fill="rgb(248,16,9)" fg:x="2852" fg:w="589"/><text x="6.5293%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.18%)</title><rect x="7.5243%" y="133" width="0.1793%" height="15" fill="rgb(249,218,13)" fg:x="3441" fg:w="82"/><text x="7.8172%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.7036%" y="133" width="0.1203%" height="15" fill="rgb(233,221,29)" fg:x="3523" fg:w="55"/><text x="7.9965%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.15%)</title><rect x="7.8238%" y="117" width="0.1509%" height="15" fill="rgb(254,4,35)" fg:x="3578" fg:w="69"/><text x="8.1168%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.20%)</title><rect x="7.9747%" y="117" width="0.1990%" height="15" fill="rgb(236,28,48)" fg:x="3647" fg:w="91"/><text x="8.2677%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="8.1737%" y="117" width="0.1378%" height="15" fill="rgb(236,131,33)" fg:x="3738" fg:w="63"/><text x="8.4667%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.62%)</title><rect x="7.8238%" y="133" width="0.6166%" height="15" fill="rgb(222,8,47)" fg:x="3578" fg:w="282"/><text x="8.1168%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.17%)</title><rect x="8.4405%" y="133" width="0.1706%" height="15" fill="rgb(218,213,4)" fg:x="3860" fg:w="78"/><text x="8.7334%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 3.74%)</title><rect x="5.3136%" y="149" width="3.7414%" height="15" fill="rgb(209,214,8)" fg:x="2430" fg:w="1711"/><text x="5.6065%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.14%)</title><rect x="9.0549%" y="149" width="0.1378%" height="15" fill="rgb(217,72,8)" fg:x="4141" fg:w="63"/><text x="9.3479%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.1927%" y="149" width="0.0284%" height="15" fill="rgb(231,169,25)" fg:x="4204" fg:w="13"/><text x="9.4857%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.2211%" y="149" width="0.0284%" height="15" fill="rgb(246,24,39)" fg:x="4217" fg:w="13"/><text x="9.5141%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.2495%" y="149" width="0.0153%" height="15" fill="rgb(212,137,50)" fg:x="4230" fg:w="7"/><text x="9.5425%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.2648%" y="149" width="0.0328%" height="15" fill="rgb(218,34,30)" fg:x="4237" fg:w="15"/><text x="9.5578%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.2976%" y="133" width="0.1662%" height="15" fill="rgb(233,96,1)" fg:x="4252" fg:w="76"/><text x="9.5906%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.35%)</title><rect x="9.2976%" y="149" width="0.3477%" height="15" fill="rgb(245,8,47)" fg:x="4252" fg:w="159"/><text x="9.5906%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.6453%" y="117" width="0.1662%" height="15" fill="rgb(238,206,27)" fg:x="4411" fg:w="76"/><text x="9.9383%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.24%)</title><rect x="9.6453%" y="133" width="0.2405%" height="15" fill="rgb(213,11,13)" fg:x="4411" fg:w="110"/><text x="9.9383%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.39%)</title><rect x="9.6453%" y="149" width="0.3892%" height="15" fill="rgb(213,50,44)" fg:x="4411" fg:w="178"/><text x="9.9383%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.0345%" y="149" width="0.1662%" height="15" fill="rgb(237,172,15)" fg:x="4589" fg:w="76"/><text x="10.3275%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.2007%" y="149" width="0.1771%" height="15" fill="rgb(254,39,39)" fg:x="4665" fg:w="81"/><text x="10.4937%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.3779%" y="149" width="0.1662%" height="15" fill="rgb(229,26,11)" fg:x="4746" fg:w="76"/><text x="10.6708%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.5440%" y="149" width="0.1662%" height="15" fill="rgb(234,187,36)" fg:x="4822" fg:w="76"/><text x="10.8370%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.7146%" y="149" width="0.1771%" height="15" fill="rgb(234,115,44)" fg:x="4900" fg:w="81"/><text x="11.0076%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.87%)</title><rect x="10.8917%" y="149" width="0.8725%" height="15" fill="rgb(229,196,24)" fg:x="4981" fg:w="399"/><text x="11.1847%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.87%)</title><rect x="11.7642%" y="149" width="0.8725%" height="15" fill="rgb(233,217,44)" fg:x="5380" fg:w="399"/><text x="12.0572%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 14.12%)</title><rect x="0.5401%" y="165" width="14.1236%" height="15" fill="rgb(225,200,37)" fg:x="247" fg:w="6459"/><text x="0.8331%" y="175.50">candid::de::IDLDes..</text></g><g><title>memcpy (354 instructions, 0.77%)</title><rect x="14.6637%" y="165" width="0.7741%" height="15" fill="rgb(213,163,40)" fg:x="6706" fg:w="354"/><text x="14.9567%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.4378%" y="149" width="0.0109%" height="15" fill="rgb(214,4,28)" fg:x="7060" fg:w="5"/><text x="15.7307%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.09%)</title><rect x="15.4378%" y="165" width="0.0853%" height="15" fill="rgb(246,24,40)" fg:x="7060" fg:w="39"/><text x="15.7307%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="15.5230%" y="165" width="0.1662%" height="15" fill="rgb(211,180,16)" fg:x="7099" fg:w="76"/><text x="15.8160%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="15.6892%" y="149" width="0.0109%" height="15" fill="rgb(213,130,28)" fg:x="7175" fg:w="5"/><text x="15.9822%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="15.7002%" y="133" width="0.1159%" height="15" fill="rgb(251,154,17)" fg:x="7180" fg:w="53"/><text x="15.9931%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.19%)</title><rect x="15.8161%" y="133" width="0.1924%" height="15" fill="rgb(230,129,50)" fg:x="7233" fg:w="88"/><text x="16.1090%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.35%)</title><rect x="16.0085%" y="133" width="0.3542%" height="15" fill="rgb(238,158,5)" fg:x="7321" fg:w="162"/><text x="16.3015%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="15.7002%" y="149" width="1.1808%" height="15" fill="rgb(248,25,34)" fg:x="7180" fg:w="540"/><text x="15.9931%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.64%)</title><rect x="15.6892%" y="165" width="1.6378%" height="15" fill="rgb(236,80,39)" fg:x="7175" fg:w="749"/><text x="15.9822%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="17.3270%" y="165" width="0.1662%" height="15" fill="rgb(211,14,54)" fg:x="7924" fg:w="76"/><text x="17.6200%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="17.4932%" y="149" width="0.0109%" height="15" fill="rgb(233,66,23)" fg:x="8000" fg:w="5"/><text x="17.7862%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="17.5042%" y="133" width="0.1159%" height="15" fill="rgb(206,226,53)" fg:x="8005" fg:w="53"/><text x="17.7971%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.19%)</title><rect x="17.6200%" y="133" width="0.1924%" height="15" fill="rgb(222,211,32)" fg:x="8058" fg:w="88"/><text x="17.9130%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.35%)</title><rect x="17.8125%" y="133" width="0.3542%" height="15" fill="rgb(206,119,27)" fg:x="8146" fg:w="162"/><text x="18.1054%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.18%)</title><rect x="17.5042%" y="149" width="1.1808%" height="15" fill="rgb(207,101,4)" fg:x="8005" fg:w="540"/><text x="17.7971%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="18.6849%" y="149" width="0.1487%" height="15" fill="rgb(254,85,20)" fg:x="8545" fg:w="68"/><text x="18.9779%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="18.8336%" y="133" width="0.1771%" height="15" fill="rgb(207,61,32)" fg:x="8613" fg:w="81"/><text x="19.1266%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.24%)</title><rect x="18.8336%" y="149" width="0.2362%" height="15" fill="rgb(216,220,23)" fg:x="8613" fg:w="108"/><text x="19.1266%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.95%)</title><rect x="17.4932%" y="165" width="1.9461%" height="15" fill="rgb(213,170,23)" fg:x="8000" fg:w="890"/><text x="17.7862%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="19.4393%" y="117" width="0.1159%" height="15" fill="rgb(216,82,38)" fg:x="8890" fg:w="53"/><text x="19.7323%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.17%)</title><rect x="19.4393%" y="133" width="0.1706%" height="15" fill="rgb(238,152,21)" fg:x="8890" fg:w="78"/><text x="19.7323%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.64%)</title><rect x="19.4393%" y="149" width="0.6407%" height="15" fill="rgb(240,65,44)" fg:x="8890" fg:w="293"/><text x="19.7323%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1318 (15 instructions, 0.03%)</title><rect x="20.0800%" y="149" width="0.0328%" height="15" fill="rgb(254,55,49)" fg:x="9183" fg:w="15"/><text x="20.3730%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.1128%" y="149" width="0.0241%" height="15" fill="rgb(227,26,37)" fg:x="9198" fg:w="11"/><text x="20.4058%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.05%)</title><rect x="19.4393%" y="165" width="1.0452%" height="15" fill="rgb(206,34,48)" fg:x="8890" fg:w="478"/><text x="19.7323%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.10%)</title><rect x="20.4846%" y="165" width="0.1028%" height="15" fill="rgb(216,152,22)" fg:x="9368" fg:w="47"/><text x="20.7775%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.5873%" y="149" width="0.2690%" height="15" fill="rgb(248,148,43)" fg:x="9415" fg:w="123"/><text x="20.8803%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.27%)</title><rect x="20.9153%" y="149" width="0.2690%" height="15" fill="rgb(252,140,8)" fg:x="9565" fg:w="123"/><text x="21.2083%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.66%)</title><rect x="20.5873%" y="165" width="0.6560%" height="15" fill="rgb(235,183,39)" fg:x="9415" fg:w="300"/><text x="20.8803%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="21.2433%" y="149" width="0.0612%" height="15" fill="rgb(219,227,0)" fg:x="9715" fg:w="28"/><text x="21.5363%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="21.3046%" y="149" width="0.0328%" height="15" fill="rgb(244,51,26)" fg:x="9743" fg:w="15"/><text x="21.5975%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="21.3374%" y="149" width="0.0328%" height="15" fill="rgb(208,12,6)" fg:x="9758" fg:w="15"/><text x="21.6303%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.30%)</title><rect x="21.2433%" y="165" width="0.2952%" height="15" fill="rgb(232,136,14)" fg:x="9715" fg:w="135"/><text x="21.5363%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.5385%" y="165" width="0.0241%" height="15" fill="rgb(234,194,53)" fg:x="9850" fg:w="11"/><text x="21.8315%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.5626%" y="165" width="0.0241%" height="15" fill="rgb(246,90,24)" fg:x="9861" fg:w="11"/><text x="21.8556%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="21.5866%" y="165" width="0.0241%" height="15" fill="rgb(246,26,35)" fg:x="9872" fg:w="11"/><text x="21.8796%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.90%)</title><rect x="21.6107%" y="165" width="0.8965%" height="15" fill="rgb(240,68,48)" fg:x="9883" fg:w="410"/><text x="21.9037%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="22.5072%" y="133" width="0.0262%" height="15" fill="rgb(228,161,39)" fg:x="10293" fg:w="12"/><text x="22.8002%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.37%)</title><rect x="22.5335%" y="133" width="0.3674%" height="15" fill="rgb(236,116,1)" fg:x="10305" fg:w="168"/><text x="22.8264%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="22.9008%" y="101" width="0.2077%" height="15" fill="rgb(237,18,47)" fg:x="10473" fg:w="95"/><text x="23.1938%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.43%)</title><rect x="22.9008%" y="117" width="0.4264%" height="15" fill="rgb(215,2,17)" fg:x="10473" fg:w="195"/><text x="23.1938%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 0.49%)</title><rect x="22.9008%" y="133" width="0.4854%" height="15" fill="rgb(240,19,48)" fg:x="10473" fg:w="222"/><text x="23.1938%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="23.3863%" y="133" width="0.0241%" height="15" fill="rgb(239,72,31)" fg:x="10695" fg:w="11"/><text x="23.6792%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (453 instructions, 0.99%)</title><rect x="22.5072%" y="149" width="0.9906%" height="15" fill="rgb(247,45,27)" fg:x="10293" fg:w="453"/><text x="22.8002%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (491 instructions, 1.07%)</title><rect x="22.5072%" y="165" width="1.0736%" height="15" fill="rgb(207,199,49)" fg:x="10293" fg:w="491"/><text x="22.8002%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="23.5809%" y="149" width="0.1181%" height="15" fill="rgb(216,32,2)" fg:x="10784" fg:w="54"/><text x="23.8738%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="23.6989%" y="149" width="0.2077%" height="15" fill="rgb(207,161,52)" fg:x="10838" fg:w="95"/><text x="23.9919%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.50%)</title><rect x="23.5809%" y="165" width="0.5029%" height="15" fill="rgb(218,185,12)" fg:x="10784" fg:w="230"/><text x="23.8738%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,236 instructions, 24.57%)</title><rect x="0.3739%" y="181" width="24.5692%" height="15" fill="rgb(229,152,39)" fg:x="171" fg:w="11236"/><text x="0.6669%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="24.9431%" y="181" width="1.4170%" height="15" fill="rgb(240,178,11)" fg:x="11407" fg:w="648"/><text x="25.2361%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="26.3601%" y="181" width="1.4804%" height="15" fill="rgb(233,205,48)" fg:x="12055" fg:w="677"/><text x="26.6531%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="27.8405%" y="181" width="1.4804%" height="15" fill="rgb(221,203,1)" fg:x="12732" fg:w="677"/><text x="28.1334%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (764 instructions, 1.67%)</title><rect x="29.3208%" y="181" width="1.6706%" height="15" fill="rgb(215,132,36)" fg:x="13409" fg:w="764"/><text x="29.6138%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="30.9914%" y="181" width="1.4804%" height="15" fill="rgb(242,21,40)" fg:x="14173" fg:w="677"/><text x="31.2844%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="32.4718%" y="181" width="1.3339%" height="15" fill="rgb(238,173,15)" fg:x="14850" fg:w="610"/><text x="32.7648%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="33.8057%" y="181" width="1.4170%" height="15" fill="rgb(221,167,8)" fg:x="15460" fg:w="648"/><text x="34.0986%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="35.2226%" y="181" width="1.4804%" height="15" fill="rgb(254,146,54)" fg:x="16108" fg:w="677"/><text x="35.5156%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="36.7030%" y="181" width="1.3973%" height="15" fill="rgb(249,62,40)" fg:x="16785" fg:w="639"/><text x="36.9959%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="38.1002%" y="181" width="1.3339%" height="15" fill="rgb(222,91,49)" fg:x="17424" fg:w="610"/><text x="38.3932%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="39.4341%" y="181" width="1.4170%" height="15" fill="rgb(229,77,30)" fg:x="18034" fg:w="648"/><text x="39.7271%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="40.8510%" y="181" width="1.3339%" height="15" fill="rgb(212,33,38)" fg:x="18682" fg:w="610"/><text x="41.1440%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="42.1849%" y="181" width="1.4170%" height="15" fill="rgb(220,214,41)" fg:x="19292" fg:w="648"/><text x="42.4779%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="43.6019%" y="181" width="1.4170%" height="15" fill="rgb(235,4,20)" fg:x="19940" fg:w="648"/><text x="43.8948%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (697 instructions, 1.52%)</title><rect x="45.0188%" y="181" width="1.5241%" height="15" fill="rgb(247,58,19)" fg:x="20588" fg:w="697"/><text x="45.3118%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="46.5429%" y="181" width="1.3339%" height="15" fill="rgb(229,1,9)" fg:x="21285" fg:w="610"/><text x="46.8359%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="47.8768%" y="181" width="1.4170%" height="15" fill="rgb(238,24,32)" fg:x="21895" fg:w="648"/><text x="48.1697%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="49.2937%" y="181" width="1.4170%" height="15" fill="rgb(212,155,52)" fg:x="22543" fg:w="648"/><text x="49.5867%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="50.7107%" y="181" width="1.4804%" height="15" fill="rgb(244,161,0)" fg:x="23191" fg:w="677"/><text x="51.0036%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="52.1910%" y="181" width="1.4804%" height="15" fill="rgb(208,31,20)" fg:x="23868" fg:w="677"/><text x="52.4840%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="53.6714%" y="181" width="1.3339%" height="15" fill="rgb(241,130,40)" fg:x="24545" fg:w="610"/><text x="53.9644%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.61%)</title><rect x="55.0052%" y="181" width="1.6072%" height="15" fill="rgb(211,11,3)" fg:x="25155" fg:w="735"/><text x="55.2982%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (697 instructions, 1.52%)</title><rect x="56.6124%" y="181" width="1.5241%" height="15" fill="rgb(240,153,37)" fg:x="25890" fg:w="697"/><text x="56.9054%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="58.1365%" y="181" width="1.3339%" height="15" fill="rgb(235,139,48)" fg:x="26587" fg:w="610"/><text x="58.4295%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="59.4704%" y="181" width="1.3973%" height="15" fill="rgb(232,157,37)" fg:x="27197" fg:w="639"/><text x="59.7634%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="60.8677%" y="181" width="1.4170%" height="15" fill="rgb(220,30,38)" fg:x="27836" fg:w="648"/><text x="61.1606%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="62.2846%" y="181" width="1.3339%" height="15" fill="rgb(216,86,53)" fg:x="28484" fg:w="610"/><text x="62.5776%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="63.6185%" y="181" width="1.3339%" height="15" fill="rgb(239,172,7)" fg:x="29094" fg:w="610"/><text x="63.9114%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="64.9523%" y="181" width="1.3339%" height="15" fill="rgb(242,98,6)" fg:x="29704" fg:w="610"/><text x="65.2453%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="66.2862%" y="181" width="1.3339%" height="15" fill="rgb(252,199,35)" fg:x="30314" fg:w="610"/><text x="66.5792%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (610 instructions, 1.33%)</title><rect x="67.6200%" y="181" width="1.3339%" height="15" fill="rgb(210,61,12)" fg:x="30924" fg:w="610"/><text x="67.9130%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="68.9539%" y="181" width="1.4804%" height="15" fill="rgb(252,117,10)" fg:x="31534" fg:w="677"/><text x="69.2469%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="70.4343%" y="181" width="1.4170%" height="15" fill="rgb(213,177,33)" fg:x="32211" fg:w="648"/><text x="70.7272%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="71.8512%" y="181" width="1.4170%" height="15" fill="rgb(243,76,51)" fg:x="32859" fg:w="648"/><text x="72.1442%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="73.2682%" y="181" width="1.4170%" height="15" fill="rgb(232,206,42)" fg:x="33507" fg:w="648"/><text x="73.5611%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="74.6851%" y="181" width="1.4170%" height="15" fill="rgb(207,60,22)" fg:x="34155" fg:w="648"/><text x="74.9781%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="76.1021%" y="181" width="1.4170%" height="15" fill="rgb(206,204,48)" fg:x="34803" fg:w="648"/><text x="76.3950%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="77.5190%" y="181" width="1.4804%" height="15" fill="rgb(208,160,1)" fg:x="35451" fg:w="677"/><text x="77.8120%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="78.9994%" y="181" width="1.4804%" height="15" fill="rgb(223,5,30)" fg:x="36128" fg:w="677"/><text x="79.2924%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="80.4798%" y="181" width="1.4170%" height="15" fill="rgb(211,191,7)" fg:x="36805" fg:w="648"/><text x="80.7727%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.48%)</title><rect x="81.8967%" y="181" width="1.4804%" height="15" fill="rgb(240,207,22)" fg:x="37453" fg:w="677"/><text x="82.1897%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (706 instructions, 1.54%)</title><rect x="83.3771%" y="181" width="1.5438%" height="15" fill="rgb(236,88,24)" fg:x="38130" fg:w="706"/><text x="83.6700%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="84.9208%" y="181" width="1.4170%" height="15" fill="rgb(219,178,2)" fg:x="38836" fg:w="648"/><text x="85.2138%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="86.3378%" y="181" width="1.4170%" height="15" fill="rgb(230,84,51)" fg:x="39484" fg:w="648"/><text x="86.6308%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="87.7547%" y="181" width="1.4170%" height="15" fill="rgb(213,38,34)" fg:x="40132" fg:w="648"/><text x="88.0477%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="89.1717%" y="181" width="1.4170%" height="15" fill="rgb(211,221,45)" fg:x="40780" fg:w="648"/><text x="89.4647%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="90.5886%" y="181" width="1.4170%" height="15" fill="rgb(240,200,35)" fg:x="41428" fg:w="648"/><text x="90.8816%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (639 instructions, 1.40%)</title><rect x="92.0056%" y="181" width="1.3973%" height="15" fill="rgb(235,87,42)" fg:x="42076" fg:w="639"/><text x="92.2986%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="93.4029%" y="181" width="1.4170%" height="15" fill="rgb(247,217,51)" fg:x="42715" fg:w="648"/><text x="93.6958%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.42%)</title><rect x="94.8198%" y="181" width="1.4170%" height="15" fill="rgb(216,83,3)" fg:x="43363" fg:w="648"/><text x="95.1128%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="96.2368%" y="149" width="0.0109%" height="15" fill="rgb(224,34,30)" fg:x="44011" fg:w="5"/><text x="96.5297%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="96.2477%" y="117" width="0.1181%" height="15" fill="rgb(220,56,46)" fg:x="44016" fg:w="54"/><text x="96.5407%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.30%)</title><rect x="96.2477%" y="133" width="0.2952%" height="15" fill="rgb(248,151,52)" fg:x="44016" fg:w="135"/><text x="96.5407%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.35%)</title><rect x="96.2477%" y="149" width="0.3542%" height="15" fill="rgb(235,121,21)" fg:x="44016" fg:w="162"/><text x="96.5407%" y="159.50"></text></g><g><title>memset (136 instructions, 0.30%)</title><rect x="96.6019%" y="149" width="0.2974%" height="15" fill="rgb(237,32,15)" fg:x="44178" fg:w="136"/><text x="96.8949%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 1.01%)</title><rect x="96.2368%" y="165" width="1.0124%" height="15" fill="rgb(225,152,53)" fg:x="44011" fg:w="463"/><text x="96.5297%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="97.2492%" y="149" width="0.0700%" height="15" fill="rgb(237,214,35)" fg:x="44474" fg:w="32"/><text x="97.5422%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="97.3192%" y="101" width="0.1662%" height="15" fill="rgb(238,164,38)" fg:x="44506" fg:w="76"/><text x="97.6121%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.24%)</title><rect x="97.3192%" y="117" width="0.2405%" height="15" fill="rgb(228,41,40)" fg:x="44506" fg:w="110"/><text x="97.6121%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.38%)</title><rect x="97.3192%" y="133" width="0.3827%" height="15" fill="rgb(219,127,41)" fg:x="44506" fg:w="175"/><text x="97.6121%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7018%" y="133" width="0.0241%" height="15" fill="rgb(238,76,36)" fg:x="44681" fg:w="11"/><text x="97.9948%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.7259%" y="133" width="0.0241%" height="15" fill="rgb(236,154,26)" fg:x="44692" fg:w="11"/><text x="98.0188%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.79%)</title><rect x="97.3192%" y="149" width="0.7850%" height="15" fill="rgb(213,2,45)" fg:x="44506" fg:w="359"/><text x="97.6121%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="98.1042%" y="149" width="0.0656%" height="15" fill="rgb(254,132,35)" fg:x="44865" fg:w="30"/><text x="98.3971%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="98.1698%" y="149" width="0.0109%" height="15" fill="rgb(252,178,17)" fg:x="44895" fg:w="5"/><text x="98.4627%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 1.08%)</title><rect x="97.2492%" y="165" width="1.0802%" height="15" fill="rgb(218,49,13)" fg:x="44474" fg:w="494"/><text x="97.5422%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.3294%" y="165" width="0.0109%" height="15" fill="rgb(234,203,28)" fg:x="44968" fg:w="5"/><text x="98.6224%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="98.3403%" y="165" width="0.1203%" height="15" fill="rgb(234,188,42)" fg:x="44973" fg:w="55"/><text x="98.6333%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,091 instructions, 2.39%)</title><rect x="96.2368%" y="181" width="2.3856%" height="15" fill="rgb(247,173,1)" fg:x="44011" fg:w="1091"/><text x="96.5297%" y="191.50">i..</text></g><g><title>heap::batch_remove_7_::{{closure}} (45,270 instructions, 98.99%)</title><rect x="0.3739%" y="197" width="98.9898%" height="15" fill="rgb(209,20,50)" fg:x="171" fg:w="45270"/><text x="0.6669%" y="207.50">heap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.3637%" y="197" width="0.0262%" height="15" fill="rgb(223,42,10)" fg:x="45441" fg:w="12"/><text x="99.6567%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="99.3899%" y="197" width="0.1771%" height="15" fill="rgb(232,50,23)" fg:x="45453" fg:w="81"/><text x="99.6829%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.22%)</title><rect x="99.5670%" y="197" width="0.2187%" height="15" fill="rgb(213,24,34)" fg:x="45534" fg:w="100"/><text x="99.8600%" y="207.50"></text></g><g><title>all (45,732 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,193,38)" fg:x="0" fg:w="45732"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (45,732 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(248,57,1)" fg:x="0" fg:w="45732"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>