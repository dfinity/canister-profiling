<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="44345"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0428%" height="15" fill="rgb(224,62,54)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.0428%" y="197" width="0.1714%" height="15" fill="rgb(250,158,22)" fg:x="19" fg:w="76"/><text x="0.3358%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.2142%" y="197" width="0.1714%" height="15" fill="rgb(240,198,49)" fg:x="95" fg:w="76"/><text x="0.5072%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="0.3856%" y="165" width="0.1714%" height="15" fill="rgb(237,22,4)" fg:x="171" fg:w="76"/><text x="0.6786%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="0.5570%" y="149" width="0.1601%" height="15" fill="rgb(244,26,49)" fg:x="247" fg:w="71"/><text x="0.8500%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="0.7171%" y="149" width="0.9065%" height="15" fill="rgb(211,133,13)" fg:x="318" fg:w="402"/><text x="1.0101%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="1.6236%" y="149" width="0.1872%" height="15" fill="rgb(209,106,37)" fg:x="720" fg:w="83"/><text x="1.9166%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.8108%" y="149" width="0.1218%" height="15" fill="rgb(229,28,6)" fg:x="803" fg:w="54"/><text x="2.1038%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="1.9326%" y="149" width="0.1218%" height="15" fill="rgb(247,226,45)" fg:x="857" fg:w="54"/><text x="2.2255%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.0543%" y="149" width="0.1218%" height="15" fill="rgb(234,178,16)" fg:x="911" fg:w="54"/><text x="2.3473%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.12%)</title><rect x="2.1761%" y="149" width="0.1218%" height="15" fill="rgb(234,26,18)" fg:x="965" fg:w="54"/><text x="2.4691%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="2.2979%" y="149" width="0.1601%" height="15" fill="rgb(231,162,5)" fg:x="1019" fg:w="71"/><text x="2.5909%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.15%)</title><rect x="2.4580%" y="149" width="0.1466%" height="15" fill="rgb(239,106,22)" fg:x="1090" fg:w="65"/><text x="2.7510%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="2.6046%" y="149" width="0.9065%" height="15" fill="rgb(243,219,23)" fg:x="1155" fg:w="402"/><text x="2.8975%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="3.5111%" y="149" width="0.0361%" height="15" fill="rgb(240,178,28)" fg:x="1557" fg:w="16"/><text x="3.8041%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="3.5472%" y="133" width="0.1714%" height="15" fill="rgb(254,13,23)" fg:x="1573" fg:w="76"/><text x="3.8402%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.14%)</title><rect x="3.7186%" y="101" width="0.1353%" height="15" fill="rgb(245,17,46)" fg:x="1649" fg:w="60"/><text x="4.0115%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="3.7186%" y="117" width="0.1917%" height="15" fill="rgb(249,170,39)" fg:x="1649" fg:w="85"/><text x="4.0115%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.9102%" y="69" width="0.0203%" height="15" fill="rgb(218,146,31)" fg:x="1734" fg:w="9"/><text x="4.2032%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="3.9305%" y="53" width="0.0677%" height="15" fill="rgb(247,59,46)" fg:x="1743" fg:w="30"/><text x="4.2235%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="3.9305%" y="69" width="0.1240%" height="15" fill="rgb(248,223,37)" fg:x="1743" fg:w="55"/><text x="4.2235%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.26%)</title><rect x="3.9102%" y="85" width="0.2571%" height="15" fill="rgb(220,154,32)" fg:x="1734" fg:w="114"/><text x="4.2032%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.38%)</title><rect x="3.9102%" y="101" width="0.3766%" height="15" fill="rgb(206,128,37)" fg:x="1734" fg:w="167"/><text x="4.2032%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.39%)</title><rect x="3.9102%" y="117" width="0.3879%" height="15" fill="rgb(207,120,4)" fg:x="1734" fg:w="172"/><text x="4.2032%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.83%)</title><rect x="3.7186%" y="133" width="0.8299%" height="15" fill="rgb(206,157,26)" fg:x="1649" fg:w="368"/><text x="4.0115%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 1.27%)</title><rect x="3.5472%" y="149" width="1.2741%" height="15" fill="rgb(245,47,1)" fg:x="1573" fg:w="565"/><text x="3.8402%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="4.8213%" y="149" width="0.1872%" height="15" fill="rgb(248,44,13)" fg:x="2138" fg:w="83"/><text x="5.1143%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="5.0085%" y="149" width="0.1240%" height="15" fill="rgb(235,218,29)" fg:x="2221" fg:w="55"/><text x="5.3014%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="5.1325%" y="149" width="0.1466%" height="15" fill="rgb(207,220,50)" fg:x="2276" fg:w="65"/><text x="5.4255%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.15%)</title><rect x="5.2791%" y="149" width="0.1466%" height="15" fill="rgb(223,188,4)" fg:x="2341" fg:w="65"/><text x="5.5720%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.91%)</title><rect x="5.4256%" y="133" width="0.9065%" height="15" fill="rgb(241,51,40)" fg:x="2406" fg:w="402"/><text x="5.7186%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="6.3322%" y="133" width="0.0361%" height="15" fill="rgb(244,102,38)" fg:x="2808" fg:w="16"/><text x="6.6251%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="6.3682%" y="117" width="0.1714%" height="15" fill="rgb(251,126,29)" fg:x="2824" fg:w="76"/><text x="6.6612%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.14%)</title><rect x="6.5396%" y="85" width="0.1353%" height="15" fill="rgb(253,216,50)" fg:x="2900" fg:w="60"/><text x="6.8326%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.19%)</title><rect x="6.5396%" y="101" width="0.1917%" height="15" fill="rgb(227,10,20)" fg:x="2900" fg:w="85"/><text x="6.8326%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="6.7313%" y="53" width="0.0203%" height="15" fill="rgb(242,220,38)" fg:x="2985" fg:w="9"/><text x="7.0243%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.07%)</title><rect x="6.7516%" y="37" width="0.0677%" height="15" fill="rgb(209,218,26)" fg:x="2994" fg:w="30"/><text x="7.0446%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.12%)</title><rect x="6.7516%" y="53" width="0.1240%" height="15" fill="rgb(249,184,29)" fg:x="2994" fg:w="55"/><text x="7.0446%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.26%)</title><rect x="6.7313%" y="69" width="0.2571%" height="15" fill="rgb(208,25,8)" fg:x="2985" fg:w="114"/><text x="7.0243%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.38%)</title><rect x="6.7313%" y="85" width="0.3766%" height="15" fill="rgb(240,115,42)" fg:x="2985" fg:w="167"/><text x="7.0243%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.39%)</title><rect x="6.7313%" y="101" width="0.3879%" height="15" fill="rgb(209,6,43)" fg:x="2985" fg:w="172"/><text x="7.0243%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.83%)</title><rect x="6.5396%" y="117" width="0.8299%" height="15" fill="rgb(243,47,0)" fg:x="2900" fg:w="368"/><text x="6.8326%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 1.27%)</title><rect x="6.3682%" y="133" width="1.2741%" height="15" fill="rgb(211,54,4)" fg:x="2824" fg:w="565"/><text x="6.6612%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.19%)</title><rect x="7.6423%" y="133" width="0.1872%" height="15" fill="rgb(235,131,53)" fg:x="3389" fg:w="83"/><text x="7.9353%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="7.8295%" y="133" width="0.1240%" height="15" fill="rgb(207,197,43)" fg:x="3472" fg:w="55"/><text x="8.1225%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.16%)</title><rect x="7.9535%" y="117" width="0.1601%" height="15" fill="rgb(220,49,13)" fg:x="3527" fg:w="71"/><text x="8.2465%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.20%)</title><rect x="8.1137%" y="117" width="0.2030%" height="15" fill="rgb(245,194,22)" fg:x="3598" fg:w="90"/><text x="8.4066%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="8.3166%" y="117" width="0.1466%" height="15" fill="rgb(254,1,8)" fg:x="3688" fg:w="65"/><text x="8.6096%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.64%)</title><rect x="7.9535%" y="133" width="0.6427%" height="15" fill="rgb(212,194,38)" fg:x="3527" fg:w="285"/><text x="8.2465%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.18%)</title><rect x="8.5962%" y="133" width="0.1759%" height="15" fill="rgb(254,196,52)" fg:x="3812" fg:w="78"/><text x="8.8892%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 3.80%)</title><rect x="5.4256%" y="149" width="3.8043%" height="15" fill="rgb(242,30,45)" fg:x="2406" fg:w="1687"/><text x="5.7186%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.15%)</title><rect x="9.2299%" y="149" width="0.1466%" height="15" fill="rgb(209,107,35)" fg:x="4093" fg:w="65"/><text x="9.5229%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.3765%" y="149" width="0.0293%" height="15" fill="rgb(243,58,10)" fg:x="4158" fg:w="13"/><text x="9.6694%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.03%)</title><rect x="9.4058%" y="149" width="0.0293%" height="15" fill="rgb(212,85,53)" fg:x="4171" fg:w="13"/><text x="9.6988%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="9.4351%" y="149" width="0.0158%" height="15" fill="rgb(250,101,49)" fg:x="4184" fg:w="7"/><text x="9.7281%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="9.4509%" y="149" width="0.0338%" height="15" fill="rgb(248,48,51)" fg:x="4191" fg:w="15"/><text x="9.7439%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.4847%" y="133" width="0.1714%" height="15" fill="rgb(245,174,50)" fg:x="4206" fg:w="76"/><text x="9.7777%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.36%)</title><rect x="9.4847%" y="149" width="0.3586%" height="15" fill="rgb(232,225,48)" fg:x="4206" fg:w="159"/><text x="9.7777%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="9.8433%" y="117" width="0.1714%" height="15" fill="rgb(227,197,45)" fg:x="4365" fg:w="76"/><text x="10.1362%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.25%)</title><rect x="9.8433%" y="133" width="0.2481%" height="15" fill="rgb(233,125,30)" fg:x="4365" fg:w="110"/><text x="10.1362%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.41%)</title><rect x="9.8433%" y="149" width="0.4059%" height="15" fill="rgb(235,146,6)" fg:x="4365" fg:w="180"/><text x="10.1362%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.2492%" y="149" width="0.1714%" height="15" fill="rgb(233,53,17)" fg:x="4545" fg:w="76"/><text x="10.5422%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.4206%" y="149" width="0.1827%" height="15" fill="rgb(245,18,13)" fg:x="4621" fg:w="81"/><text x="10.7135%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.6032%" y="149" width="0.1714%" height="15" fill="rgb(252,149,19)" fg:x="4702" fg:w="76"/><text x="10.8962%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="10.7746%" y="149" width="0.1714%" height="15" fill="rgb(254,169,53)" fg:x="4778" fg:w="76"/><text x="11.0676%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="10.9505%" y="149" width="0.1827%" height="15" fill="rgb(244,100,36)" fg:x="4856" fg:w="81"/><text x="11.2435%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.90%)</title><rect x="11.1332%" y="149" width="0.8998%" height="15" fill="rgb(220,158,9)" fg:x="4937" fg:w="399"/><text x="11.4261%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.90%)</title><rect x="12.0329%" y="149" width="0.8998%" height="15" fill="rgb(209,150,7)" fg:x="5336" fg:w="399"/><text x="12.3259%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 14.54%)</title><rect x="0.5570%" y="165" width="14.5405%" height="15" fill="rgb(209,91,12)" fg:x="247" fg:w="6448"/><text x="0.8500%" y="175.50">candid::de::IDLDese..</text></g><g><title>memcpy (354 instructions, 0.80%)</title><rect x="15.0975%" y="165" width="0.7983%" height="15" fill="rgb(227,21,6)" fg:x="6695" fg:w="354"/><text x="15.3905%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="15.8958%" y="149" width="0.0271%" height="15" fill="rgb(224,49,41)" fg:x="7049" fg:w="12"/><text x="16.1888%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.11%)</title><rect x="15.8958%" y="165" width="0.1128%" height="15" fill="rgb(217,202,3)" fg:x="7049" fg:w="50"/><text x="16.1888%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="16.0086%" y="165" width="0.1714%" height="15" fill="rgb(238,203,44)" fg:x="7099" fg:w="76"/><text x="16.3015%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="16.1800%" y="149" width="0.0271%" height="15" fill="rgb(219,46,12)" fg:x="7175" fg:w="12"/><text x="16.4729%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="16.2070%" y="133" width="0.1195%" height="15" fill="rgb(213,150,37)" fg:x="7187" fg:w="53"/><text x="16.5000%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.20%)</title><rect x="16.3265%" y="133" width="0.1984%" height="15" fill="rgb(230,155,54)" fg:x="7240" fg:w="88"/><text x="16.6195%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.37%)</title><rect x="16.5250%" y="133" width="0.3653%" height="15" fill="rgb(253,112,44)" fg:x="7328" fg:w="162"/><text x="16.8179%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.22%)</title><rect x="16.2070%" y="149" width="1.2177%" height="15" fill="rgb(252,220,4)" fg:x="7187" fg:w="540"/><text x="16.5000%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 1.71%)</title><rect x="16.1800%" y="165" width="1.7138%" height="15" fill="rgb(228,198,21)" fg:x="7175" fg:w="760"/><text x="16.4729%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="17.8938%" y="165" width="0.1714%" height="15" fill="rgb(219,188,53)" fg:x="7935" fg:w="76"/><text x="18.1868%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="18.0652%" y="149" width="0.0271%" height="15" fill="rgb(217,224,43)" fg:x="8011" fg:w="12"/><text x="18.3581%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="18.0922%" y="133" width="0.1195%" height="15" fill="rgb(237,136,19)" fg:x="8023" fg:w="53"/><text x="18.3852%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.20%)</title><rect x="18.2117%" y="133" width="0.1984%" height="15" fill="rgb(207,101,7)" fg:x="8076" fg:w="88"/><text x="18.5047%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.37%)</title><rect x="18.4102%" y="133" width="0.3653%" height="15" fill="rgb(251,45,24)" fg:x="8164" fg:w="162"/><text x="18.7032%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.22%)</title><rect x="18.0922%" y="149" width="1.2177%" height="15" fill="rgb(212,61,36)" fg:x="8023" fg:w="540"/><text x="18.3852%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.15%)</title><rect x="19.3100%" y="149" width="0.1533%" height="15" fill="rgb(231,217,27)" fg:x="8563" fg:w="68"/><text x="19.6029%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="19.4633%" y="133" width="0.1827%" height="15" fill="rgb(222,77,51)" fg:x="8631" fg:w="81"/><text x="19.7563%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.24%)</title><rect x="19.4633%" y="149" width="0.2435%" height="15" fill="rgb(211,209,48)" fg:x="8631" fg:w="108"/><text x="19.7563%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 2.02%)</title><rect x="18.0652%" y="165" width="2.0183%" height="15" fill="rgb(230,54,21)" fg:x="8011" fg:w="895"/><text x="18.3581%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.12%)</title><rect x="20.0834%" y="117" width="0.1195%" height="15" fill="rgb(239,105,8)" fg:x="8906" fg:w="53"/><text x="20.3764%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.18%)</title><rect x="20.0834%" y="133" width="0.1781%" height="15" fill="rgb(210,137,27)" fg:x="8906" fg:w="79"/><text x="20.3764%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.66%)</title><rect x="20.0834%" y="149" width="0.6585%" height="15" fill="rgb(237,182,32)" fg:x="8906" fg:w="292"/><text x="20.3764%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.852 (15 instructions, 0.03%)</title><rect x="20.7419%" y="149" width="0.0338%" height="15" fill="rgb(242,54,24)" fg:x="9198" fg:w="15"/><text x="21.0349%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.7757%" y="149" width="0.0248%" height="15" fill="rgb(251,89,48)" fg:x="9213" fg:w="11"/><text x="21.0687%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 1.12%)</title><rect x="20.0834%" y="165" width="1.1230%" height="15" fill="rgb(229,144,5)" fg:x="8906" fg:w="498"/><text x="20.3764%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.10%)</title><rect x="21.2064%" y="165" width="0.1015%" height="15" fill="rgb(221,111,13)" fg:x="9404" fg:w="45"/><text x="21.4994%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.28%)</title><rect x="21.3079%" y="149" width="0.2774%" height="15" fill="rgb(211,155,30)" fg:x="9449" fg:w="123"/><text x="21.6009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.28%)</title><rect x="21.6462%" y="149" width="0.2774%" height="15" fill="rgb(208,9,53)" fg:x="9599" fg:w="123"/><text x="21.9392%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.68%)</title><rect x="21.3079%" y="165" width="0.6765%" height="15" fill="rgb(253,68,51)" fg:x="9449" fg:w="300"/><text x="21.6009%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.06%)</title><rect x="21.9844%" y="149" width="0.0631%" height="15" fill="rgb(241,190,18)" fg:x="9749" fg:w="28"/><text x="22.2774%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (15 instructions, 0.03%)</title><rect x="22.0476%" y="149" width="0.0338%" height="15" fill="rgb(229,143,28)" fg:x="9777" fg:w="15"/><text x="22.3406%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1750 (15 instructions, 0.03%)</title><rect x="22.0814%" y="149" width="0.0338%" height="15" fill="rgb(222,0,45)" fg:x="9792" fg:w="15"/><text x="22.3744%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.30%)</title><rect x="21.9844%" y="165" width="0.3044%" height="15" fill="rgb(212,112,35)" fg:x="9749" fg:w="135"/><text x="22.2774%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.2889%" y="165" width="0.0248%" height="15" fill="rgb(247,210,3)" fg:x="9884" fg:w="11"/><text x="22.5818%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.3137%" y="165" width="0.0248%" height="15" fill="rgb(242,191,36)" fg:x="9895" fg:w="11"/><text x="22.6066%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.3385%" y="165" width="0.0248%" height="15" fill="rgb(216,122,53)" fg:x="9906" fg:w="11"/><text x="22.6315%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.92%)</title><rect x="22.3633%" y="165" width="0.9246%" height="15" fill="rgb(230,9,15)" fg:x="9917" fg:w="410"/><text x="22.6563%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.03%)</title><rect x="23.2879%" y="133" width="0.0338%" height="15" fill="rgb(231,87,43)" fg:x="10327" fg:w="15"/><text x="23.5808%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.38%)</title><rect x="23.3217%" y="133" width="0.3788%" height="15" fill="rgb(231,89,49)" fg:x="10342" fg:w="168"/><text x="23.6147%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="23.7005%" y="101" width="0.2142%" height="15" fill="rgb(232,147,21)" fg:x="10510" fg:w="95"/><text x="23.9935%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.44%)</title><rect x="23.7005%" y="117" width="0.4397%" height="15" fill="rgb(224,113,28)" fg:x="10510" fg:w="195"/><text x="23.9935%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 0.50%)</title><rect x="23.7005%" y="133" width="0.5006%" height="15" fill="rgb(211,208,49)" fg:x="10510" fg:w="222"/><text x="23.9935%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="24.2012%" y="133" width="0.0248%" height="15" fill="rgb(239,23,0)" fg:x="10732" fg:w="11"/><text x="24.4941%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (456 instructions, 1.03%)</title><rect x="23.2879%" y="149" width="1.0283%" height="15" fill="rgb(253,163,4)" fg:x="10327" fg:w="456"/><text x="23.5808%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (493 instructions, 1.11%)</title><rect x="23.2879%" y="165" width="1.1117%" height="15" fill="rgb(212,125,1)" fg:x="10327" fg:w="493"/><text x="23.5808%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="24.3996%" y="149" width="0.1218%" height="15" fill="rgb(215,205,18)" fg:x="10820" fg:w="54"/><text x="24.6926%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.21%)</title><rect x="24.5214%" y="149" width="0.2142%" height="15" fill="rgb(221,101,23)" fg:x="10874" fg:w="95"/><text x="24.8143%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.52%)</title><rect x="24.3996%" y="165" width="0.5187%" height="15" fill="rgb(220,111,34)" fg:x="10820" fg:w="230"/><text x="24.6926%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,261 instructions, 25.39%)</title><rect x="0.3856%" y="181" width="25.3941%" height="15" fill="rgb(211,196,12)" fg:x="171" fg:w="11261"/><text x="0.6786%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="25.7797%" y="181" width="1.3959%" height="15" fill="rgb(225,28,19)" fg:x="11432" fg:w="619"/><text x="26.0727%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="27.1756%" y="181" width="1.4613%" height="15" fill="rgb(244,104,22)" fg:x="12051" fg:w="648"/><text x="27.4685%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="28.6368%" y="181" width="1.4613%" height="15" fill="rgb(231,162,2)" fg:x="12699" fg:w="648"/><text x="28.9298%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (735 instructions, 1.66%)</title><rect x="30.0981%" y="181" width="1.6575%" height="15" fill="rgb(254,151,43)" fg:x="13347" fg:w="735"/><text x="30.3911%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="31.7556%" y="181" width="1.4613%" height="15" fill="rgb(234,159,33)" fg:x="14082" fg:w="648"/><text x="32.0485%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="33.2168%" y="181" width="1.3147%" height="15" fill="rgb(241,176,54)" fg:x="14730" fg:w="583"/><text x="33.5098%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="34.5315%" y="181" width="1.3959%" height="15" fill="rgb(215,3,15)" fg:x="15313" fg:w="619"/><text x="34.8245%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="35.9274%" y="181" width="1.4613%" height="15" fill="rgb(208,72,5)" fg:x="15932" fg:w="648"/><text x="36.2204%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="37.3887%" y="181" width="1.3801%" height="15" fill="rgb(216,112,8)" fg:x="16580" fg:w="612"/><text x="37.6816%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="38.7687%" y="181" width="1.3147%" height="15" fill="rgb(239,84,35)" fg:x="17192" fg:w="583"/><text x="39.0617%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="40.0834%" y="181" width="1.3959%" height="15" fill="rgb(224,68,10)" fg:x="17775" fg:w="619"/><text x="40.3764%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="41.4793%" y="181" width="1.3147%" height="15" fill="rgb(209,224,14)" fg:x="18394" fg:w="583"/><text x="41.7723%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="42.7940%" y="181" width="1.3959%" height="15" fill="rgb(222,99,51)" fg:x="18977" fg:w="619"/><text x="43.0870%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="44.1899%" y="181" width="1.3959%" height="15" fill="rgb(210,213,5)" fg:x="19596" fg:w="619"/><text x="44.4828%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.51%)</title><rect x="45.5857%" y="181" width="1.5109%" height="15" fill="rgb(254,221,43)" fg:x="20215" fg:w="670"/><text x="45.8787%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="47.0966%" y="181" width="1.3147%" height="15" fill="rgb(214,29,42)" fg:x="20885" fg:w="583"/><text x="47.3896%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="48.4113%" y="181" width="1.3959%" height="15" fill="rgb(244,75,4)" fg:x="21468" fg:w="619"/><text x="48.7043%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="49.8072%" y="181" width="1.3959%" height="15" fill="rgb(231,214,30)" fg:x="22087" fg:w="619"/><text x="50.1002%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="51.2031%" y="181" width="1.4613%" height="15" fill="rgb(253,45,7)" fg:x="22706" fg:w="648"/><text x="51.4960%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="52.6643%" y="181" width="1.4613%" height="15" fill="rgb(243,209,41)" fg:x="23354" fg:w="648"/><text x="52.9573%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="54.1256%" y="181" width="1.3147%" height="15" fill="rgb(237,96,54)" fg:x="24002" fg:w="583"/><text x="54.4186%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (706 instructions, 1.59%)</title><rect x="55.4403%" y="181" width="1.5921%" height="15" fill="rgb(236,34,18)" fg:x="24585" fg:w="706"/><text x="55.7333%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (670 instructions, 1.51%)</title><rect x="57.0324%" y="181" width="1.5109%" height="15" fill="rgb(236,134,26)" fg:x="25291" fg:w="670"/><text x="57.3253%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="58.5432%" y="181" width="1.3147%" height="15" fill="rgb(252,109,13)" fg:x="25961" fg:w="583"/><text x="58.8362%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="59.8579%" y="181" width="1.3801%" height="15" fill="rgb(221,213,7)" fg:x="26544" fg:w="612"/><text x="60.1509%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="61.2380%" y="181" width="1.3959%" height="15" fill="rgb(216,49,35)" fg:x="27156" fg:w="619"/><text x="61.5310%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="62.6339%" y="181" width="1.3147%" height="15" fill="rgb(228,31,45)" fg:x="27775" fg:w="583"/><text x="62.9269%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="63.9486%" y="181" width="1.3147%" height="15" fill="rgb(216,224,25)" fg:x="28358" fg:w="583"/><text x="64.2416%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="65.2633%" y="181" width="1.3147%" height="15" fill="rgb(251,214,10)" fg:x="28941" fg:w="583"/><text x="65.5562%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="66.5780%" y="181" width="1.3147%" height="15" fill="rgb(226,19,5)" fg:x="29524" fg:w="583"/><text x="66.8709%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (583 instructions, 1.31%)</title><rect x="67.8927%" y="181" width="1.3147%" height="15" fill="rgb(221,11,37)" fg:x="30107" fg:w="583"/><text x="68.1856%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="69.2074%" y="181" width="1.4613%" height="15" fill="rgb(243,96,1)" fg:x="30690" fg:w="648"/><text x="69.5003%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="70.6686%" y="181" width="1.3959%" height="15" fill="rgb(221,83,23)" fg:x="31338" fg:w="619"/><text x="70.9616%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="72.0645%" y="181" width="1.3959%" height="15" fill="rgb(245,42,23)" fg:x="31957" fg:w="619"/><text x="72.3575%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="73.4604%" y="181" width="1.3959%" height="15" fill="rgb(239,21,43)" fg:x="32576" fg:w="619"/><text x="73.7533%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="74.8562%" y="181" width="1.3959%" height="15" fill="rgb(223,193,20)" fg:x="33195" fg:w="619"/><text x="75.1492%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="76.2521%" y="181" width="1.3959%" height="15" fill="rgb(216,130,17)" fg:x="33814" fg:w="619"/><text x="76.5451%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="77.6480%" y="181" width="1.4613%" height="15" fill="rgb(243,147,36)" fg:x="34433" fg:w="648"/><text x="77.9410%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="79.1093%" y="181" width="1.4613%" height="15" fill="rgb(254,46,48)" fg:x="35081" fg:w="648"/><text x="79.4022%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="80.5705%" y="181" width="1.3959%" height="15" fill="rgb(237,121,44)" fg:x="35729" fg:w="619"/><text x="80.8635%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (648 instructions, 1.46%)</title><rect x="81.9664%" y="181" width="1.4613%" height="15" fill="rgb(211,146,1)" fg:x="36348" fg:w="648"/><text x="82.2594%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (677 instructions, 1.53%)</title><rect x="83.4277%" y="181" width="1.5267%" height="15" fill="rgb(232,16,38)" fg:x="36996" fg:w="677"/><text x="83.7206%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="84.9543%" y="181" width="1.3959%" height="15" fill="rgb(214,161,27)" fg:x="37673" fg:w="619"/><text x="85.2473%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="86.3502%" y="181" width="1.3959%" height="15" fill="rgb(254,52,46)" fg:x="38292" fg:w="619"/><text x="86.6432%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="87.7461%" y="181" width="1.3959%" height="15" fill="rgb(254,26,53)" fg:x="38911" fg:w="619"/><text x="88.0391%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="89.1420%" y="181" width="1.3959%" height="15" fill="rgb(229,121,7)" fg:x="39530" fg:w="619"/><text x="89.4349%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="90.5378%" y="181" width="1.3959%" height="15" fill="rgb(216,80,38)" fg:x="40149" fg:w="619"/><text x="90.8308%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (612 instructions, 1.38%)</title><rect x="91.9337%" y="181" width="1.3801%" height="15" fill="rgb(217,148,41)" fg:x="40768" fg:w="612"/><text x="92.2267%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="93.3138%" y="181" width="1.3959%" height="15" fill="rgb(205,196,49)" fg:x="41380" fg:w="619"/><text x="93.6068%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (619 instructions, 1.40%)</title><rect x="94.7097%" y="181" width="1.3959%" height="15" fill="rgb(233,152,6)" fg:x="41999" fg:w="619"/><text x="95.0026%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.03%)</title><rect x="96.1055%" y="149" width="0.0271%" height="15" fill="rgb(240,64,28)" fg:x="42618" fg:w="12"/><text x="96.3985%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.12%)</title><rect x="96.1326%" y="117" width="0.1218%" height="15" fill="rgb(211,105,32)" fg:x="42630" fg:w="54"/><text x="96.4256%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.30%)</title><rect x="96.1326%" y="133" width="0.3044%" height="15" fill="rgb(213,164,53)" fg:x="42630" fg:w="135"/><text x="96.4256%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.37%)</title><rect x="96.1326%" y="149" width="0.3653%" height="15" fill="rgb(210,119,2)" fg:x="42630" fg:w="162"/><text x="96.4256%" y="159.50"></text></g><g><title>memset (136 instructions, 0.31%)</title><rect x="96.4979%" y="149" width="0.3067%" height="15" fill="rgb(214,55,7)" fg:x="42792" fg:w="136"/><text x="96.7909%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 1.06%)</title><rect x="96.1055%" y="165" width="1.0554%" height="15" fill="rgb(209,134,8)" fg:x="42618" fg:w="468"/><text x="96.3985%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.07%)</title><rect x="97.1609%" y="149" width="0.0722%" height="15" fill="rgb(215,208,40)" fg:x="43086" fg:w="32"/><text x="97.4539%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.17%)</title><rect x="97.2331%" y="101" width="0.1714%" height="15" fill="rgb(244,100,49)" fg:x="43118" fg:w="76"/><text x="97.5260%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.25%)</title><rect x="97.2331%" y="117" width="0.2481%" height="15" fill="rgb(233,19,27)" fg:x="43118" fg:w="110"/><text x="97.5260%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 0.40%)</title><rect x="97.2331%" y="133" width="0.3991%" height="15" fill="rgb(246,228,19)" fg:x="43118" fg:w="177"/><text x="97.5260%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.6322%" y="133" width="0.0248%" height="15" fill="rgb(252,203,4)" fg:x="43295" fg:w="11"/><text x="97.9252%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="97.6570%" y="133" width="0.0248%" height="15" fill="rgb(251,214,17)" fg:x="43306" fg:w="11"/><text x="97.9500%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 0.81%)</title><rect x="97.2331%" y="149" width="0.8141%" height="15" fill="rgb(248,66,54)" fg:x="43118" fg:w="361"/><text x="97.5260%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.07%)</title><rect x="98.0471%" y="149" width="0.0677%" height="15" fill="rgb(210,169,37)" fg:x="43479" fg:w="30"/><text x="98.3401%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="98.1148%" y="149" width="0.0113%" height="15" fill="rgb(211,41,9)" fg:x="43509" fg:w="5"/><text x="98.4078%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 1.12%)</title><rect x="97.1609%" y="165" width="1.1185%" height="15" fill="rgb(242,59,39)" fg:x="43086" fg:w="496"/><text x="97.4539%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.12%)</title><rect x="98.2884%" y="165" width="0.1240%" height="15" fill="rgb(226,144,49)" fg:x="43586" fg:w="55"/><text x="98.5814%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,097 instructions, 2.47%)</title><rect x="96.1055%" y="181" width="2.4738%" height="15" fill="rgb(215,170,19)" fg:x="42618" fg:w="1097"/><text x="96.3985%" y="191.50">i..</text></g><g><title>heap::batch_remove_7_::{{closure}} (43,883 instructions, 98.96%)</title><rect x="0.3856%" y="197" width="98.9582%" height="15" fill="rgb(247,130,50)" fg:x="171" fg:w="43883"/><text x="0.6786%" y="207.50">heap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.3438%" y="197" width="0.0271%" height="15" fill="rgb(211,27,36)" fg:x="44054" fg:w="12"/><text x="99.6368%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.18%)</title><rect x="99.3708%" y="197" width="0.1827%" height="15" fill="rgb(250,124,5)" fg:x="44066" fg:w="81"/><text x="99.6638%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.23%)</title><rect x="99.5535%" y="197" width="0.2255%" height="15" fill="rgb(230,113,49)" fg:x="44147" fg:w="100"/><text x="99.8465%" y="207.50"></text></g><g><title>all (44,345 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,123,53)" fg:x="0" fg:w="44345"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (44,345 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,91,53)" fg:x="0" fg:w="44345"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>